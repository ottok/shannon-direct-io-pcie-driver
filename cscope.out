cscope 15 /home/spike/valinor/lm/linux/drivers/block/shannon -q 0000010549 0001899291
	@shannon.h

9 #i‚de‡
__SHANNON_H


10 
	#__SHANNON_H


	)

12 
	~"sh™n⁄_p‹t.h
"

15 
	~"sh™n⁄_c⁄fig.h
"

16 
	~"sh™n⁄_mbr.h
"

17 
	~"sh™n⁄_memblock.h
"

18 
	~"sh™n⁄_¥e„tch.h
"

19 
	~"sh™n⁄_io˘l.h
"

21 
	#SHANNON_USE_WRITE_BUFFER
 1

	)

24 
	#QUEUE_SIZE
 (4096ULË

	)

25 
	#MAGICBEAN
 0x10AC7A

	)

27 
	#SHN_OVERPROVISION_THRESHOLD
 300

	)

29 
	#SHN_ERR_NO_SPACE
 -1

	)

30 
	#SHN_ERR_LOW_SPACE
 -2

	)

31 
	#SHN_WRITE_EPILOG
 -3

	)

33 
	#SHANNON_VERSION_MAJOR
(
a
Ë(◊)>>16Ë& 0xFF

	)

34 
	#SHANNON_VERSION_MINOR
(
a
Ë(◊)>>8Ë& 0xFF

	)

35 
	#SHANNON_VERSION_RELEASE
(
a
Ë◊Ë& 0xFF

	)

36 
	#SHANNON_MAKE_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

39 
	#SHANNON_VERSION_CODE
 
	`SHANNON_MAKE_VERSION
(3, 2, 2)

	)

40 
	#SHANNON_FIX_VERSION_CODE
 4

	)

43 
	#TEMP_AUX1_THRESHOLD
 90UL

	)

44 
	#TEMP_AUX1_CRITICAL_THRESHOLD
 100UL

	)

45 
	#TEMP_AUX2_THRESHOLD
 90UL

	)

46 
	#TEMP_AUX2_CRITICAL_THRESHOLD
 100UL

	)

47 
	#TEMP_BOARD_THRESHOLD
 90UL

	)

48 
	#TEMP_BOARD_CRITICAL_THRESHOLD
 100UL

	)

49 
	#TEMP_INNER_THRESHOLD
 93UL

	)

50 
	#TEMP_INNER_CRITICAL_THRESHOLD
 100UL

	)

52 
	#SHN_PAGE_SHIFT
 12

	)

53 
	#SHN_PAGE_SIZE
 (1UL << 
SHN_PAGE_SHIFT
)

	)

54 
	#SHN_PAGE_ALIGN
(
addr
Ë
	`_ALIGN_UP
◊ddr, 
SHN_PAGE_SIZE
)

	)

56 
	#gë_∑ge_ö_fú°_∂™e
(
sdev
, 
∑ge
) \

57 ((
∑ge
Ë/ (
sdev
)->
∑ges_ö_siblög_eblock
 * (sdev)->∑ges_ö_siblög_eblock + (’ageË% (sdev)->
∑ges_ö_eblock
))

	)

61 
	#INVALID_LBA
 0xffffffff

	)

63 
	#INVALID_LBA2
 0xffffff„

	)

64 
	#lba_is_övÆid
(
x
Ë((xË=
INVALID_LBA
 || (xË=
INVALID_LBA2
)

	)

66 
	#LONG_INVALID_LBA
 0xfffffffff

	)

67 
	#l⁄g_lba_is_övÆid
(
x
Ë((xË=
LONG_INVALID_LBA
)

	)

68 
	#ªq_has_övÆid_lba
(
ªq
Ë(((‘eq)->
d©©y≥
 !
SHORT_LBA
Ë&& (‘eq)->d©©y≥ !
LONG_LBA
)) || \

69 (((
ªq
)->
d©©y≥
 =
LONG_LBA
Ë&& 
	`l⁄g_lba_is_övÆid
(‘eq)->
lba
)) || \

70 (((
ªq
)->
d©©y≥
 =
SHORT_LBA
Ë&& 
	`lba_is_övÆid
(‘eq)->
lba
)))

	)

72 
	#is_a˘ive_blk
(
sb
Ë(((sb)->
°©e
 =
HOT_ACTIVE_BLOCK
Ë|| ((sb)->°©ê=
COLD_ACTIVE_BLOCK
))

	)

73 
	#is_œ°_blk
(
sb
Ë(((sb)->
°©e
 =
LAST_HOT_BLOCK
Ë|| ((sb)->°©ê=
LAST_COLD_BLOCK
))

	)

76 
	#ECC_CORRECTION_BITS_IN_SECTOR
 120

	)

78 #ifde‡
SHANNON_RELEASE


79 
	#debug_¥öt
 
debugs1


	)

81 
	#debug_¥öt
 
debugs0


	)

84 
	#NO_COMPLETION_WRITE_BIT
 (0x5)

	)

85 
	#NO_COMPLETION_WRITE_MASK
 (0x1 << 
NO_COMPLETION_WRITE_BIT
)

	)

87 
sh™n⁄_scsi_mode
;

89 
	#MAX_LUN_COUNT
 512

	)

90 
	slun_pba
 {

91 
u32
 
	mlun_pba
;

92 
u32
 
	mlun
;

95 
	ssh™n⁄_b¨
 {

96 
__u32
 
	mˇp
;

97 
__u32
 
	møid
;

98 
__u32
 
	mecc
;

99 
__u32
 
	mwrôe_buf_öfo
;

100 
__u32
 
	mª£rved4
;

101 
__u32
 
	mª£rved5
;

102 
__u32
 
	mfúmw¨e_vîsi⁄
;

103 
__u32
 
	mfúmw¨e_èg
;

104 
__u32
 
	mª£rved_¨øy1
[30];

105 
__u32
 
	msy°em_m⁄ô‹
;

106 
__u32
 
	mª£rved39
;

107 
__u32
 
	mª£rved40
;

108 
__u32
 
	mª£rved41
;

109 
__u32
 
	md«_low
;

110 
__u32
 
	md«_high
;

111 
__u32
 
	mª£rved_¨øy2
[6];

112 
__u32
 
	mª£t_öfo
;

113 
__u32
 
	mª£rved_¨øy3
[9];

114 
__u32
 
	mícoded_d«
;

117 
	sglobÆ_b¨
 {

118 
__u32
 
	mÊash
;

119 
__u32
 
	mlogicb
;

120 
__u32
 
	m∑ge
;

121 
__u32
 
	møid_öfo
;

123 
__u32
 
	mecc
;

124 
__u32
 
	mmisc
;

125 
__u32
 
	ms¸ambÀr_£ed
;

126 
__u32
 
	ms¸ambÀr_mask
;

129 
	ssh™n⁄_lun_b¨
 {

130 
__u32
 
	msq_dma_addr0
;

131 
__u32
 
	msq_dma_addr1
;

132 
__u32
 
	mcq_dma_addr0
;

133 
__u32
 
	mcq_dma_addr1
;

135 
__u32
 
	msq_hód
;

136 
__u32
 
	mack_cq_èû
;

138 
__u32
 
	mcq_hód
;

139 
__u32
 
	msq_èû
;

140 
__u32
 
	mlun_°©us
;

143 
	gsh™n⁄_ªque°
;

145 
	eshn_blk_deÁu…_limôs
 {

146 
	mSHN_BLK_MAX_SEGMENTS
 = 128,

147 
	mSHN_BLK_SAFE_MAX_SECTORS
 = 255,

148 
	mSHN_BLK_DEF_MAX_SECTORS
 = 1024,

149 
	mSHN_BLK_MAX_SEGMENT_SIZE
 = 65536,

150 
	mSHN_BLK_SEG_BOUNDARY_MASK
 = 0xFFFFFFFFUL,

153 
	#SHN_SLAB_HWCACHE_ALIGN
 0x00002000UL

	)

154 
	#SHN_SLAB_CACHE_DMA
 0x00004000UL

	)

156 
	esh™n⁄_›code
 {

157 
	msh_cmd_¥e_ªad
 = 0x00,

158 
	msh_cmd_ªad
 = 0x01,

159 
	msh_cmd_ªad_íd
 = 0x02,

160 
	msh_cmd_adv™˚d_ªad
 = 0x08,

161 
	msh_cmd_îa£
 = 0x10,

162 
	msh_cmd_wrôe
 = 0x20,

163 
	msh_cmd_buf_wrôe
 = 0x30,

164 
	msh_cmd_buf_wrôe_no_commô
 = 0x31,

165 
	msh_cmd_buf_ªad
 = 0x32,

166 
	msh_cmd_ªg_ªad
 = 0x40,

167 
	msh_cmd_ªg_wrôe
 = 0x50,

168 
	msh_cmd_∑rôy
 = 0x80,

169 
	msh_cmd_∑rôy_öô
 = 0x90,

170 
	msh_cmd_ª£t
 = 0xF0,

171 
	msh_cmd_no_›
 = 0xFF,

174 
	#SH_FAKE_ERR
 240

	)

175 
	#SH_SOFT_ERR_1
 241

	)

176 
	#SH_SOFT_ERR_2
 242

	)

177 
	#SH_FRESH_ERASED
 251

	)

178 
	#SH_CRC_ERR
 252

	)

179 
	#SH_ECC_UNCORRECTABLE
 253

	)

181 
	#SH_STATUS_SUCCESS
 0x04

	)

182 
	#SH_BIT_FAIL
 0

	)

183 
	#SH_BIT_READY
 6

	)

185 
	#cmd_∑π
(
vÆ
, 
width
, 
shi·
Ë(((vÆË& ((1UL<<(width)Ë- 1)Ë<< (shi·))

	)

187 
	ssh™n⁄_cmd
 {

188 
__u8
 
	m›code
;

190 
__u8
 
	mlogicbs
;

191 
__u8
 
	md©a_luns
;

194 
__u8
 
	møid_°rùe
;

195 
__u8
 
	mfú°_logicb
;

197 
__u8
 
	mhód
;

200 
	#gë_cmd_phy_lun
(
sdev
, 
lun£t
, 
dw‹d1
) \

201 ((
lun£t
Ë* (
sdev
)->
max_lun_ö_lun£t
 + (((
	`sh™n⁄_mem_ªadl
(
dw‹d1
Ë>> 24Ë& ((1UL << 8Ë- 1)Ë% (sdev)->max_lun_ö_lun£t))

	)

202 
__u32
 
	mdw‹d1
;

205 
	ssh™n⁄_ˇched_ªad_cmd
 {

206 
__u8
 
	m›code
;

209 
	#make_ªad_cmd_byã1
(
logicbs
, 
exåa_±e
Ë(
	`cmd_∑π
÷ogicbs, 4, 0Ë| cmd_∑π”xåa_±e, 4, 4))

	)

210 
	#gë_ªad_cmd_logicbs
(
byã1
Ë((byã1Ë& ((1UL << 4Ë-1))

	)

211 
__u8
 
	mbyã1
;

212 
__u8
 
	mfú°_logicb
;

213 
__u8
 
	mhód
;

216 
__u32
 
	mdw‹d1
;

219 
	ssh™n⁄_wrôe_cmd
 {

220 
__u8
 
	m›code
;

221 
__u8
 
	mexåa_±e
;

222 
__u8
 
	møid_°rùe
;

223 
__u8
 
	mhód
;

226 
__u32
 
	mdw‹d1
;

229 
	ssh™n⁄_buf_cmd
 {

230 
__u8
 
	m›code
;

231 
__u8
 
	mphy_lun
;

232 
__u8
 
	mlogicb_ödex
;

235 
	#make_buf_cmd_byã3
(
hód
, 
øid_°rùe
Ë(
	`cmd_∑π
(hód, 4, 0Ë| cmd_∑π‘aid_°rùe, 4, 4))

	)

236 
__u8
 
	mbyã3
;

240 
	#gë_buf_cmd_phy_lun
(
phy_lun
, 
dw‹d1
Ë((((
	`sh™n⁄_mem_ªadl
(dw‹d1Ë>> 24Ë& ((1UL << 4Ë- 1)Ë<< 8Ë| (phy_lun))

	)

241 
	#gë_buf_cmd_logicbs
(
dw‹d1
Ë((
	`sh™n⁄_mem_ªadl
(dw‹d1Ë>> 24Ë& ((1UL << 4Ë- 1))

	)

242 
	#gë_buf_cmd_±es
(
dw‹d1
Ë((
	`sh™n⁄_mem_ªadl
(dw‹d1Ë>> 28Ë& ((1UL << 4Ë- 1))

	)

243 
__u32
 
	mdw‹d1
;

246 
	ssh™n⁄_bufq_ack_cmd
 {

247 
__u8
 
	mtokí
;

248 
__u8
 
	mphy_lun
;

249 
__u8
 
	mbuf_cookõ
;

250 
__u8
 
	m°©us
;

252 
__u32
 
	mdw‹d1
;

255 
	ssh™n⁄_ªgi°î_cmd
 {

256 
__u8
 
	m›code
;

257 
__u8
 
	m£c⁄d¨y_cmd
;

258 
__u8
 
	md©a_byã
;

259 
	#PREFIX_CMD_MASK
 (1 << 1)

	)

260 
	#FORCE_ADDR_CYCLE_MASK
 (1 << 2)

	)

261 
	#FIRT_CMD_DISABLE_MASK
 (1 << 3)

	)

262 
	#VENDOR_MODE_MASK
 (1 << 5)

	)

263 
	#SECONDARY_CMD_ENABLE_MASK
 (1 << 6)

	)

264 
__u8
 
	mhód
;

266 
__u8
 
	mÊash_addr
;

267 
__u8
 
	mbyãs
;

268 
__u8
 
	mÊash_cmd
;

269 
__u8
 
	mphy_lun
;

270 } 
	mÊash_ªg
;

273 
	gsh™n⁄_lun
;

275 
	ssh™n⁄_cmd_öfo
 {

276 
sh™n⁄_li°_hód
 
	mªq_li°
;

277 
	mcmd_Àn
;

279 
	mlogicbs
;

280 
	mlun_pba
;

282 
	mœ°_a˘ive_time
;

285 
	ssh™n⁄_îr‹_h™dÀr
 {

286 
sh™n⁄_w‹k_°ru˘
 
	mw‹k
;

289 
sh™n⁄_dev
 *
	mdev
;

290 
sh™n⁄_sb
 *
	msb
;

291 
sh™n⁄_ªque°
 *
	mªq
;

292 
sh™n⁄_lun
 *
	mlun
;

293 
	meblk
;

296 
	slba_li°
 {

297 
sh™n⁄_li°_hód
 
	mli°
;

298 
sh™n⁄_disk
 *
	msdisk
;

299 
u16
 
	mns_id
;

300 
u16
 
	mns_£q_num
;

301 
logicb64_t
 
	mlba
;

303 
sh™n⁄_•ölock_t
 
	mlba_lock
;

304 
	#LBA_READING
 1

	)

305 
	#LBA_LOCKED
 2

	)

306 
	m°©us
;

307 
	mãmp
;

308 
u8
 
	mhód
;

309 
sh™n⁄_li°_hód
 
	mªq_li°
;

311 
sh™n⁄_li°_hód
 
	mwaô_li°
;

312 
lun_pba
 
	mpba
;

317 
	#REQ_WAIT_PICK_SHIFT
 (31)

	)

318 
	#REQ_WAIT_PICK_MASK
 (1U << 
REQ_WAIT_PICK_SHIFT
)

	)

319 
	#REQ_INDEX_MASK
 (
REQ_WAIT_PICK_MASK
 - 1)

	)

320 
	#is_waô_pick_ªq
(
_ªq
Ë(!!((_ªq)->
ödex
 & 
REQ_WAIT_PICK_MASK
))

	)

321 
	#£t_ªq_waô_pick
(
_ªq
Ë((_ªq)->
ödex
 |
REQ_WAIT_PICK_MASK
)

	)

322 
	#˛ór_waô_pick_bô
(
_ªq
Ë((_ªq)->
ödex
 &~
REQ_WAIT_PICK_MASK
)

	)

323 
	#£t_ªq_ödex
(
_ªq
, 
_ödex
Ë((_ªq)->
ödex
 |((_ödexË& 
REQ_INDEX_MASK
))

	)

324 
	#gë_ªq_ödex
(
_ªq
Ë((_ªq)->
ödex
 & 
REQ_INDEX_MASK
)

	)

325 
	ssh™n⁄_ªque°
 {

326 
sh™n⁄_li°_hód
 
	mli°
;

327 
u32
 
	mödex
;

328 
logicb64_t
 
	mlba
;

329 
lun_pba
 
	mpba
;

330 
lun_pba
 
	mﬁd_pba
;

331 
	mdma_dú
;

332 
	mÀngth
;

333 *
	mvút_addr
;

335 
sh™n⁄_dma_addr_t
 
	mdma_addªss
;

336 
u64
 
	m°¨t_off£t
;

338 
sh™n⁄_sg_li°_t
 *
	msg
;

339 *
	mvút_addr_2
;

340 
sh™n⁄_dma_addr_t
 
	mdma_addªss_2
;

341 
sh™n⁄_sg_li°_t
 *
	msg2
;

342 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

343 
u64
 
	memu_mëad©a
;

345 
	#FROM_GC
 1

	)

346 
	#FROM_HOST
 2

	)

347 
	#FROM_PERIOD_READ
 3

	)

348 
	#FROM_OVERLAP
 4

	)

349 
	#FROM_PREFETCH
 5

	)

350 
	m£ndî
;

353 
	#SHORT_LBA_MASK
 0x00000000FFFFFFFFUL

	)

354 
	#LONG_LBA_MASK
 0x0000000FFFFFFFFFUL

	)

355 
	#NS_SEQ_NUM_SHIFT
 40

	)

356 
	#NS_SEQ_NUM_MASK
 0x00000000000003FFUL

	)

357 
	#NS_ID_SHIFT
 50

	)

358 
	#NS_ID_MASK
 0x00000000000003FFUL

	)

359 
	#DATATYPE_SHIFT
 60

	)

360 
	#DATATYPE_MASK
 0x000000000000000FUL

	)

362 
	#SHORT_LBA
 0UL

	)

363 
	#LONG_LBA
 0xFUL

	)

364 
	#NEED_RESCAN
 2UL

	)

365 
	#EPILOG
 0x3UL

	)

366 
u64
 
	m_mëad©a
;

367 
u8
 
	m_ecc
;

368 
u8
 
	md©©y≥
;

369 
u16
 
	mns_id
;

370 
u16
 
	mns_£q_num
;

372 
	#PHANTOM_WRITE_SHIFT
 7

	)

373 
	#NO_POLL_SHIFT
 6

	)

374 
	#NO_POLL_MASK
 (1 << 
NO_POLL_SHIFT
)

	)

375 
	#DUMMY_WRITE_SHIFT
 5

	)

376 
	#DUMMY_WRITE_MASK
 (1 << 
DUMMY_WRITE_SHIFT
)

	)

377 
	#MULTI_PLANES_SHIFT
 4

	)

378 
	#MULTI_PLANES_MASK
 (1 << 
MULTI_PLANES_SHIFT
)

	)

379 
	#DUMMY_READ_SHIFT
 5

	)

380 
	#DUMMY_READ_MASK
 (1 << 
DUMMY_READ_SHIFT
)

	)

381 
	#HOT_INDEX
 0

	)

382 
	#COLD_INDEX
 1

	)

383 
	#MBR_INDEX
 2

	)

384 
	#OVERLAP_INDEX
 2

	)

385 
	#HEAD_INDEX_MASK
 0x0f

	)

386 
	#HOT_HEAD
 (
HOT_INDEX
 | 
MULTI_PLANES_MASK
 | 
NO_POLL_MASK
)

	)

387 
	#COLD_HEAD
 (
COLD_INDEX
 | 
MULTI_PLANES_MASK
 | 
NO_POLL_MASK
)

	)

388 
	#MBR_HEAD
 
MBR_INDEX


	)

389 
	#OVERLAP_HEAD
 (
OVERLAP_INDEX
 | 
MULTI_PLANES_MASK
 | 
NO_POLL_MASK
)

	)

390 
u8
 
	mhód
;

391 
u8
 
	m‹ig_hód
;

392 
	mµa
;

393 
	mwr_off£t
;

394 
sh™n⁄_›code
 
	m›code
;

395 
sh™n⁄_li°_hód
 
	mchunk_li°
;

396 
sh™n⁄_li°_hód
 
	mbio_li°
;

397 
sh™n⁄_bio
 *
	msbio
;

399 #ifde‡
CONFIG_SHANNON_DEBUG


400 
	mèg
;

401 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


402 
sh™n⁄_li°_hód
 
	mdebug_li°
;

405 
	#FILL_READ_MASK
 0x200UL

	)

406 
	#RAID_READ_MASK
 0x100UL

	)

407 
	#REREAD_NUM_MASK
 0x0ffUL

	)

408 
	#REREAD_TIMES_ON_ERROR
 5

	)

410 
	mªªad
;

412 
	#SNAPREAD_REQ_MASK
 (0x100UL)

	)

413 
	#DUMMYREAD_REQ_MASK
 (0x200UL)

	)

414 
	#is_¢≠ªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 & 
SNAPREAD_REQ_MASK
)

	)

415 
	#£t_¢≠ªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 |
SNAPREAD_REQ_MASK
)

	)

416 
	#˛ón_¢≠ªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 &~
SNAPREAD_REQ_MASK
)

	)

417 
	#is_dummyªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 & 
DUMMYREAD_REQ_MASK
)

	)

418 
	#£t_dummyªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 |
DUMMYREAD_REQ_MASK
)

	)

419 
	#˛ón_dummyªad_ªq
(
_ªq
Ë((_ªq)->
ªad_Êags
 &~
DUMMYREAD_REQ_MASK
)

	)

420 
	mªad_Êags
;

421 
u64
 
	m£q_num
;

422 *
	mªcovî_buf
;

424 
u8
 
	mªad_luns_f‹_ªcovî
;

425 
u8
 
	md©a_luns
;

427 
	#REQ_NEW
 0

	)

428 
	#REQ_IN_QUEUE
 2

	)

429 
	#REQ_PICKED
 4

	)

430 
	#REQ_CMD_QUEUE
 6

	)

431 
	#REQ_BUF_QUEUE
 8

	)

432 
	#REQ_IN_RC_LIST
 10

	)

433 
	#REQ_IN_RMW_LIST
 12

	)

434 
	#REQ_IN_RMW_WAIT_LIST
 14

	)

435 
	#REQ_IN_ADV_READ_LIST
 16

	)

436 
	#REQ_ERROR
 20

	)

437 
	#REQ_IN_RAID5
 22

	)

438 
	#REQ_WAIT_RAID5
 22

	)

439 
	#REQ_IN_PREFETCH_REQ_LIST
 40

	)

440 
	#REQ_PICKED_FROM_PREFETCH
 42

	)

441 
	#REQ_WAIT_CACHE
 44

	)

442 
	#REQ_DONE
 88

	)

443 
	#REQ_CALLBACK
 99

	)

444 
	m°©e
;

445 
	movîœp_ªadtimes
;

449 
	ssh™n⁄_ovîœp
 {

450 
	mwr_chunk
;

451 
	mwr_∑ge
;

452 
	mwr_logicb
;

453 
	mwr_∂™e
;

454 
	mwr_lun
;

455 
	movîœp_wrôeback
;

456 
	mhód
;

457 
	mc›y_îr
;

458 
lun_pba
 
	mpba
;

459 
sh™n⁄_waô_queue_hód_t
 
	mwaô_ovîœp_evít
;

460 
logicb64_t
 
	m_mëad©a
;

461 
logicb64_t
 
	mbuf„d_mëad©a
;

462 
	mhô_cou¡
;

466 
	#STATE_RMW_SHIFT
 0

	)

468 
	#LBA_STATUS_ENTRY_LEN
 1

	)

475 
	#COLD_STATE
 0x0UL

	)

476 
	#HIGHEST_COLD_STATE
 0x3UL

	)

477 
	#INIT_HOT_STATE
 0x4UL

	)

478 
	#HOT_STATE
 0xfUL

	)

479 
	#TEMP_MASK
 0xfUL

	)

480 
	#TEMP_ENTRY_LEN
 4UL

	)

482 
	#ALL_HOT
 ((
HOT_STATE
 << 
TEMP_ENTRY_LEN
Ë| HOT_STATE)

	)

483 
	#ALL_COLD
 ((
COLD_STATE
 << 
TEMP_ENTRY_LEN
Ë| COLD_STATE)

	)

485 
	#INIT_STATE
 
INIT_HOT_STATE


	)

487 
	#CONVERT_SEQ_NUM_TO_TEMP
(
dev
, 
sb
) \

488 (((
dev
)->
£quí˚_numbî
 - (
sb
)->
£q_num
)/((dev)->
sb_cou¡
 * 9/10))

	)

495 
	#NEXT_HEAD_SHIFT
 1UL

	)

496 
	#STATE_STALE_SHIFT
 2UL

	)

497 
	#STATE_HOST_WRITE
 3UL

	)

498 
	#STATE_GC_READ
 4UL

	)

499 
	#STATE_GC_WRITE
 5UL

	)

500 
	#STATE_IN_HOT_BUFQ
 6UL

	)

501 
	#STATE_IN_COLD_BUFQ
 7UL

	)

503 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


506 
	#STATE_HOST_INVALID_WR
 8UL

	)

507 
	#STATE_GC_INVALID_WR
 9UL

	)

509 
	#PBA_ENTRY_LEN
 16

	)

510 
	#ALL_STALE
 0x0004UL

	)

514 
	#PBA_ENTRY_LEN
 8

	)

515 
	#ALL_STALE
 0x04UL

	)

518 
	ssh™n⁄_lun£t
 {

519 
	mödex
;

520 
sh™n⁄_dev
 *
	msdev
;

522 
sh™n⁄_©omic_t
 
	mö_wq
;

523 
sh™n⁄_li°_hód
 
	mªq_queue
;

524 
sh™n⁄_•ölock_t
 
	mªq_queue_lock
;

525 
sh™n⁄_muãx_t
 
	mlun_pick_£m
;

527 
sh™n⁄_muãx_t
 
	msq_£m
;

528 
sh™n⁄_cmd
 *
	msq_addr
;

529 vﬁ©ûê
sh™n⁄_cmd
 *
	mcq_addr
;

530 
sh™n⁄_dma_addr_t
 
	msq_dma_addr
;

531 
sh™n⁄_dma_addr_t
 
	mcq_dma_addr
;

532 
sh™n⁄_waô_queue_hód_t
 
	mwaô_cmd_pos
;

534 
sh™n⁄_w‹k_°ru˘
 
	msubmô_w‹k
;

535 
sh™n⁄_w‹k_°ru˘
 
	mcomp_w‹k
;

537 
__u64
 
	mho°_ªad_£˘‹s
;

538 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

539 
sh™n⁄_waô_queue_hód_t
 
	memu_waô
;

540 
sh™n⁄_èsk_°ru˘_t
 *
	memu_thªad
;

542 
sh™n⁄_•ölock_t
 
	mlun_b¨_lock
;

543 
sh™n⁄_lun_b¨
 
__iomem
 *
	mlun_b¨
;

545 
__u32
 
	msq_hw_hód
;

546 
__u32
 
	msq_hw_èû
;

547 
__u32
 
	mcq_hw_hód
;

549 
__u32
 
	msq_hód_tmp
;

550 
__u32
 
	msq_hód
;

551 
__u32
 
	mcq_hód
;

552 
__u32
 
	mcq_èû
;

553 
__u32
 
	mcq_èû_tmp
;

554 
__u8
 
	mh™g
;

556 #ifde‡
CONFIG_SHANNON_DEBUG


557 
	mqueue_dïth
[17];

558 
	mcmd_queue_dïth
[17];

559 
	mcomp_queue_dïth
[17];

561 
	mpick_sq_dïth
[11];

562 
	mpick_scq_dïth
[11];

565 
sh™n⁄_cmd_öfo
 
	mcmd_öfo
[512];

566 
sh™n⁄_˚
 *
	mlun£t_˚s
;

569 
	ssh™n⁄_˚
 {

570 
	mödex_ö_lun£t
;

571 
	#SNAPREAD_ENABLE_SHIFT
 (0)

	)

572 
	#SNAPREAD_ENABLE_MASK
 (1 << 
SNAPREAD_ENABLE_SHIFT
)

	)

573 
	m„©uª_Êags
;

575 
sh™n⁄_lun£t
 *
	mlun£t
;

576 
sh™n⁄_lun
 **
	mluns
;

579 
	gsh™n⁄_dev
;

580 
	ssh™n⁄_lun
 {

581 
u64
 *
	mpba_èbÀ
;

582 
sh™n⁄_dev
 *
	msdev
;

583 
	mlun_num
;

584 
	mphy_lun_num
;

585 
sh™n⁄_lun£t
 *
	mlun£t
;

586 
sh™n⁄_˚
 *
	m˚
;

588 
	#LUN_BBT_SIZE
 8192

	)

589 
sh™n⁄_•ölock_t
 
	mbbt_lock
;

590 
sh™n⁄_muãx_t
 
	mª‰esh_£m
;

591 
u16
 *
	mbbt
;

592 
	mbad_blk_cou¡
;

593 
sh™n⁄_©omic_t
 
	m√xt_em±y_∑ge
;

594 
	mbad
;

595 
sh™n⁄_©omic_t
 
	mavaû_d©a_sbs
;

598 
__u64
 
	mecc_°©i°ics
[
ECC_CORRECTION_BITS_IN_SECTOR
 + 1];

599 
sh™n⁄_©omic_t
 
	mecc_Áûuª_times
;

601 
__u64
 
	madv_ªad_ecc_°©i°ics
[
ECC_CORRECTION_BITS_IN_SECTOR
 + 1];

602 
sh™n⁄_©omic_t
 
	madv_ªad_Áûuª_times
;

604 
sh™n⁄_©omic_t
 
	mdy«mic_bad_blk˙t
;

606 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

607 
sh™n⁄_emu_lun
 *
	memu_lun
;

609 
	mª‰esh_⁄e_mbr_eblk_d⁄e
;

610 
sh™n⁄_waô_queue_hód_t
 
	mª‰esh_⁄e_mbr_eblk_d⁄e_evít
;

611 
	mupd©e_poﬁ_öfo_d⁄e
;

612 
sh™n⁄_waô_queue_hód_t
 
	mupd©e_poﬁ_öfo_d⁄e_evít
;

615 
sh™n⁄_•ölock_t
 
	mcheck_lock
;

616 
u8
 
	mîr_checkög
;

617 
u8
 
	msu•icious_bad_lun
;

618 
sh™n⁄_©omic_t
 
	mîr_blocks
;

619 
u32
 
	mcomm™d_timeout_˙t
;

620 
sh™n⁄_w‹k_°ru˘
 
	mîr_checkög_w‹k
;

621 
	m°¨t_sb
;

622 
sh™n⁄_w‹k_°ru˘
 
	mªad_su•icious_bad_lun_w‹k
;

625 
	#sh™n⁄_dev_is_g5
(
sdev
Ë((sdev)->
h¨dw¨e_vîsi⁄
 =0x10)

	)

626 
	#sh™n⁄_dev_is_g5_ffß
(
sdev
Ë(
	`sh™n⁄_dev_is_g5
(sdevË&& 
	`dev_is_g5_ffß
((sdev)->
pci_dev
))

	)

627 
	#sh™n⁄_dev_is_g5_Âga
(
sdev
Ë(
	`sh™n⁄_dev_is_g5
(sdevË&& 
	`dev_is_g5_Âga
((sdev)->
pci_dev
))

	)

629 
	#BBT_BITMAP_WATERMARK
 0xFEFEFEFEFEFEFEFE

	)

630 
	#bbt_usög_bôm≠
(
bbt
, 
sdev
) \

631 ((*(
u64
 *)(
bbt
Ë=
BBT_BITMAP_WATERMARK
Ë|| 
	`sh™n⁄_dev_is_g5
(
sdev
))

	)

633 
	#EPILOG_WATERMARK
 0xbìfbìfbìfbìf

	)

634 
	ssh™n⁄_ïûog_hód
 {

635 
u64
 
	m£q_num
;

636 
u32
 
	mîa£_cou¡î
;

637 
u16
 
	m√xt_sb
;

638 
u16
 
	mhód_ödex
;

639 
u64
 
	mho°_wrôe_£˘‹s
;

640 
u64
 
	mtŸÆ_wrôe_£˘‹s
;

641 
u64
 
	mpowî_⁄_£c⁄ds
;

642 
u64
 
	mpowî_cy˛e_cou¡
;

643 
u64
 
	mho°_ªad_£˘‹s
;

644 
u32
 
	mãm≥øtuª_öt_max
;

645 
u32
 
	mãm≥øtuª_bﬂrd_max
;

646 
u32
 
	mãm≥øtuª_Êash_max
;

647 
u32
 
	mvﬁège_öt_max
;

648 
u32
 
	mvﬁège_aux_max
;

649 
u32
 
	m£u_¸c_îr‹_hi°‹y
;

650 
u32
 
	m£u_ecc_îr‹_hi°‹y
;

651 
u32
 
	mª£rved1
;

652 
u64
 
	mïûog_w©îm¨k
;

653 
u8
 
	mª£rved
[160];

656 
	ssh™n⁄_ïûog_hód_4k
 {

657 
sh™n⁄_ïûog_hód
 
	mhód
;

658 
u8
 
	mª£rved
[3840];

661 
	ssh™n⁄_ïûog
 {

662 
	mödex
;

663 
	mlogicbs_ö_u£
;

664 
sh™n⁄_ïûog_hód_4k
 *
	mïûog_hód
;

665 
u8
 **
	m∑ges_poöãrs
;

668 #ifde‡
CONFIG_SHANNON_DEBUG


669 
	sgc_block_°©e
 {

670 
sh™n⁄_li°_hód
 
	mli°
;

671 
	msb_ödex
;

672 
	mvÆid_∑ges
;

673 
	mbad_lun
[8];

674 
	mîr‹_lun
[24];

675 
	mpba_èbÀ_Àn
;

676 
u8
 *
	mpba_èbÀ
;

680 
	#VENDOR_MODE_CMD_SEQ_TABLE1_LEN
 7

	)

681 
	#VENDOR_MODE_CMD_SEQ_TABLE2_LEN
 11

	)

682 
	svíd‹_mode_èbÀ
 {

683 
	maddr
;

684 
	md©a
;

687 
	s„©uª_cfg
 {

688 
	#FEATURE_INVALID
 (0)

	)

689 
	#FEATURE_VALID_SHIFT
 (0)

	)

690 
	#FEATURE_VALID_MASK
 (1 << 
FEATURE_VALID_SHIFT
)

	)

691 
	#FEATURE_PRIO_0_SHIFT
 (1)

	)

692 
	#FEATURE_PRIO_0_MASK
 (1 << 
FEATURE_PRIO_0_SHIFT
)

	)

693 
	#FEATURE_PRIO_1_SHIFT
 (2)

	)

694 
	#FEATURE_PRIO_1_MASK
 (1 << 
FEATURE_PRIO_1_SHIFT
)

	)

695 
	#FEATURE_PRIORITY_MASK
 (
FEATURE_PRIO_0_MASK
 | 
FEATURE_PRIO_1_MASK
)

	)

696 
u8
 
	mvÆid
;

697 
u8
 
	maddr
;

698 
u8
 
	mcmd
;

699 
u8
 
	m£c⁄d¨y_cmd
;

700 
	#VENDOR_MODE
 5

	)

701 
	#SECOND_ENABLE
 6

	)

702 
u8
 
	mmisc
;

703 
	#FEATURE_CFG_MAX_DATA
 8

	)

704 
u8
 
	mnbyã
;

705 
u8
 
	md©a
[
FEATURE_CFG_MAX_DATA
 + 2];

708 
	ssub_group
 {

709 
sh™n⁄_©omic_t
 
	mavaûabÀ_luns
;

710 
	md©a_luns
;

711 
	m°¨t_lun
;

712 
	m∑rôy_lun_off£t
;

713 
	mfú°_lun_off£t
;

714 
	mœ°_d©a_lun_off£t
;

715 
	mphy_ödex
;

718 
	#NOR_MBR_ADDR
 0x1FE0000

	)

719 
	ssh™n⁄_n‹_mbr
 {

720 
	#NOR_MBR_MAGIC
 0xF1A581DF1A581DF1

	)

721 
u64
 
	mw©îm¨k
;

722 
u64
 
	mvîsi⁄
;

723 
u64
 
	mÊashid
;

724 
	#ONFI_ASYNC_MODE
 0

	)

725 
	#TOGGLE_MODE
 1

	)

726 
	#ONFI_SYNC_MODE
 3

	)

727 
u8
 
	mifmode
;

728 
	#FREQ_NORMAL
 0

	)

729 
	#FREQ_TURBO
 1

	)

730 
u8
 
	mif˛ock
;

731 
u8
 
	m‰eq_mode
;

732 
u8
 
	mpowî_budgë
;

733 
u16
 
	msh¨ed_∑ges
;

734 
u16
 
	mmbr_logicb_shi·
;

735 
u16
 
	mecc_codew‹ds_ö_logicb
;

736 
u16
 
	mÆign_∑d1
[3];

737 
u32
 
	m˛o£_block_ªad_cou¡
;

738 
u32
 
	m›í_block_ªad_cou¡
;

739 
u32
 
	mmi¸ocode_addr
;

740 
u32
 
	mmi¸ocode_Àngth
;

741 
u32
 
	mmi¸ocode_checksum
;

742 
u32
 
	mÆign_∑d2
[1];

743 
u64
 
	mª£rved
[88];

745 
	#FEATURE_CFG_LIST_SIZE
 16

	)

746 
„©uª_cfg
 
	m„©uª_¨øy
[
FEATURE_CFG_LIST_SIZE
];

748 
u32
 
	mmi¸ocode
[0];

749 }
__©åibuã__
((
∑cked
));

751 
gë_∑rôy_lun
(
sub_group
 *
group
);

752 
fú°_lun
(
sub_group
 *
group
);

753 
œ°_d©a_lun
(
sub_group
 *
group
);

755 
	ssh™n⁄_sb
 {

756 
sh™n⁄_li°_hód
 
	mli°
;

760 
sh™n⁄_•ölock_t
 
	mlock
;

761 
sh™n⁄_©omic_t
 
	mvÆid_∑ges
;

762 
	mwr_off£t
;

763 
sh™n⁄_©omic_t
 
	mö_wrôe_logicbs
;

764 
sh™n⁄_©omic_t
 
	m≥riod_ªad_d⁄e
;

765 
sh™n⁄_©omic_t
 
	mö_≥riod_ªad
;

766 
sh™n⁄_©omic_t
 
	munföished_wrôes
;

768 
	mbad_lun
[8];

769 
	mîr‹_lun
[24];

770 
	mîr_msg_lun
[24];

771 
sh™n⁄_©omic_t
 
	mavaûabÀ_luns
;

772 
sh™n⁄_©omic_t
 
	mavaûabÀ_groups
;

773 
	mmö_d©a_luns
;

774 
	mmö_avaûabÀ_luns
;

775 
sub_group
 *
	msub_group
;

776 
u32
 *
	mªad_cou¡
;

777 
u32
 
	mmax_ªad_cou¡
;

778 
	mïûog_size
;

779 
	mlogicbs_ö_ïûog
;

781 
sh™n⁄_dev
 *
	msdev
;

782 
	msb_ödex
;

783 
u32
 
	mîa£_cou¡î
;

785 
	#MAX_SEQ_NUM
 ~0UL

	)

786 
u64
 
	m£q_num
;

787 
	#INVALID_SB_INDEX
 0xffff

	)

788 
u16
 
	m√xt_sb
;

789 
u16
 
	mhód_ödex
;

791 
	#NEED_FILL_BIT
 (0)

	)

792 
	#SKIP_PARITY_BIT
 (1)

	)

793 
	#NEED_RECLAIM_BIT
 (2)

	)

794 
	#NEXT_GROUP_HAS_DATA_BIT
 (3)

	)

795 
	#RECOVERED_EPILOG_HEAD_BIT
 (4)

	)

796 
	#NEED_FILL
 (1 << 
NEED_FILL_BIT
)

	)

797 
	#SKIP_PARITY
 (1 << 
SKIP_PARITY_BIT
)

	)

798 
	#NEED_RECLAIM
 (1 << 
NEED_RECLAIM_BIT
)

	)

799 
	#NEXT_GROUP_HAS_DATA
 (1 << 
NEXT_GROUP_HAS_DATA_BIT
)

	)

800 
	#RECOVERED_EPILOG_HEAD
 (1 << 
RECOVERED_EPILOG_HEAD_BIT
)

	)

801 
	#gë_ªcovîed_ïûog_hód
(
sb
Ë((sb)->
ªcovî_°©us
 & 
RECOVERED_EPILOG_HEAD
)

	)

802 
	#£t_ªcovîed_ïûog_hód
(
sb
Ë((sb)->
ªcovî_°©us
 |
RECOVERED_EPILOG_HEAD
)

	)

803 
u8
 
	mªcovî_°©us
;

805 
	#HOT_ACTIVE_BLOCK
 1

	)

806 
	#LAST_HOT_BLOCK
 2

	)

807 
	#HOT_BLOCK_LIST
 3

	)

808 
	#COLD_ACTIVE_BLOCK
 4

	)

809 
	#LAST_COLD_BLOCK
 5

	)

810 
	#COLD_BLOCK_LIST
 6

	)

811 
	#WAIT_COPY_BLOCK
 7

	)

812 
	#IN_GC_BLOCK
 8

	)

813 
	#WAIT_ERASE_BLOCK
 9

	)

814 
	#FREE_BLOCK
 10

	)

815 
	#DISCARDED_BLOCK
 11

	)

816 
	#MBR_BLOCK
 12

	)

817 
	#COPY_ERR_BLOCK
 13

	)

818 
	#ERROR_BLOCK
 14

	)

819 
	#IN_RECOVER_BLOCK
 15

	)

820 
	#WAIT_WL_BLOCK
 16

	)

821 
	#IN_WL_BLOCK
 17

	)

822 
	#NEXT_HOT_BLOCK
 18

	)

823 
	#NEXT_COLD_BLOCK
 19

	)

824 
	#IN_ERASING_BLOCK
 20

	)

825 
	#OVERLAP_BLOCK
 21

	)

826 
	#RECOVER_ERR_BLOCK
 0xe4

	)

827 
	m°©e
;

828 
	mﬁd_°©e
;

830 
sh™n⁄_ïûog
 *
	mïûog
;

831 
sh™n⁄_dma_addr_t
 
	mïûog_dma
;

832 
	mgc_ö_Êight
;

833 #ifde‡
CONFIG_SHANNON_DEBUG


834 
gc_block_°©e
 *
	mgc_°©e
;

836 
	m∑rôy_öô_d⁄e
;

837 
	#GC_SB_SHIFT
 1

	)

838 
	#WL_SB_SHIFT
 2

	)

839 
	#ERROR_SB_SHIFT
 3

	)

840 
	mª˛aim_köd
;

841 
	mfûl_sb
;

842 
	mmax_ecc
;

843 
	mœ°_îa£d_time°amp
;

844 
	mœ°_˛o£d_time°amp
;

845 
	mecc_Áûuª_times
[
MAX_LUN_COUNT
];

846 
	mmax_lun_ecc_Áûuª_times
;

849 
sh™n⁄_li°_hód
 
	mîa£_cou¡_li°
;

852 
a˘ive_blk_°©e
[];

853 
œ°_blk_°©e
[];

854 
√xt_blk_°©e
[];

855 
u£d_blk_°©e
[];

856 
wrôe_hód
[];

857 
u8
 
lba_ty≥
[];

858 
u64
 
övÆid_lba
[];

859 
u64
 
övÆid_mëad©a
[];

860 (*
phy_lun_to_logiˇl_lun
[])(
sh™n⁄_dev
 *, );

862 
	s√w_bad_lun
 {

863 
bad_lun_Êag
;

865 
group_bad_lun
[0];

868 
	sn‹Êash_ödex_node
 {

869 
u32
 
mbr_∑ge
;

870 
u32
 
mbr_backup_∑ge
;

871 
u32
 
bbt_°¨t_∑ge
;

872 
u32
 
bbt_íd_∑ge
;

873 
u32
 
„©uª_∑ge
;

874 
u32
 
mi¸o_code_∑ge
;

875 
u32
 
ª£rved
[1017];

876 
u32
 
¸c
;

879 
	smi¸ocode_èbÀ_öfo
 {

880 
≥_cy˛e
;

881 
off£t
;

882 
°¨t_ªg
;

883 
Àngth
;

884 
ª£rved
[12];

887 
	smi¸ocode_öfo
 {

888 
èbÀ_˙t
;

890 
ª£rved
[1022];

892 
u32
 
¸c
;

895 
	ssh™n⁄_n‹Êash
 {

896 
u32
 
blk_cou¡
;

897 
u32
 
size_öbyãs
;

898 
u32
 
£gmíts
;

899 
u32
 
buf_addr
;

900 
u32
 
buf_size
;

901 
u32
 
¥ogªss
;

902 
u32
 
¥iv©e_öt
;

905 
u32
 
pcõ_phy_addr
;

906 
u32
 
ödex_node_addr
;

907 
u32
 
˙é_∑øm_addr
;

908 
u32
 
mbr_addr
;

909 
u32
 
mbr_backup_addr
;

910 
u32
 
bbt_addr
;

911 
u32
 
bbt_size
;

912 
u32
 
„©uª_addr
;

913 
u32
 
mi¸o_code_addr
;

914 
u32
 
poﬁ_öfo_addr
;

915 
u32
 
poﬁ_öfo_backup_addr
;

921 
	sn‹Êash_£g
 {

922 
u32
 
°¨t_phyaddr
;

923 
u32
 
íd_phyaddr
;

924 
u32
 
blk_size
;

925 } 
£gmít
[4];

929 
	sbad_block
 {

930 
__u8
 
lun
;

931 
__u16
 
block
;

932 } 
	`__©åibuã__
 ((
∑cked
));

934 
	sn‹_∑ge_medü
 {

935 
__u16
 
f‹m©_vîsi⁄
;

936 
__u16
 
ödex
;

937 
	#MAX_BBT_SEQ_NUM
 (0xFFFFFFFF)

	)

938 
__u32
 
£q_num
;

939 
	#BAD_BLOCKS_PER_PAGE
 1361

	)

940 
bad_block
 
bbt
[
BAD_BLOCKS_PER_PAGE
];

941 
__u8
 
ª£rved
;

942 
__u32
 
¸c
;

943 } 
	`__©åibuã__
 ((
∑cked
));

946 
	sn‹_block
 {

947 
ödex
;

948 
	#NOR_BLOCK_FULL
 1

	)

949 
	#NOR_BLOCK_FREE
 2

	)

950 
	#NOR_BLOCK_USED
 3

	)

951 
	#NOR_BLOCK_ACTIVE
 4

	)

952 
	#NOR_BLOCK_WAIT_ERASE
 5

	)

953 
	#NOR_BLOCK_ERASE_ERR
 6

	)

954 
	#NOR_BLOCK_WRITE_ERR
 7

	)

955 
°©e
;

957 
sh™n⁄_li°_hód
 
li°
;

959 
sh™n⁄_li°_hód
 
∑ge_li°
;

960 
vÆid_∑ges
;

963 
	sn‹_∑ge
 {

964 
	#INVALID_NOR_PAGE_INDEX
 (0xFFFF)

	)

965 
	#INVALID_NOR_BLOCK_INDEX
 (0xFFFF)

	)

966 
ödex
;

967 
n‹_block
;

969 
sh™n⁄_li°_hód
 
li°
;

970 
n‹_∑ge_medü
 *
d©a
;

973 
	sm≠_èbÀ_°ru˘
 {

974 
	#MAP_TABLE_VALID_BIT
 (0)

	)

975 
	#MAP_TABLE_VALID_MASK
 (1 << 
MAP_TABLE_VALID_BIT
)

	)

976 
u8
 
°©e
;

978 
sˇâî_memblock
 
m≠_èbÀ
;

979 
u64
 
m≠_èbÀ_size
;

980 
sˇâî_memblock
 
ãmp_èbÀ
;

981 
u64
 
ãmp_èbÀ_size
;

983 
	#LOCK_COUNT
 71

	)

984 
sh™n⁄_•ölock_t
 
m≠_èbÀ_lock
[
LOCK_COUNT
];

985 
u64
 
vÆid_logicbs_¨øy
[
LOCK_COUNT
];

988 
	ssh™n⁄_disk
 {

989 
u32
 
sdev_cou¡
;

990 
u32
 
°rù_size
;

991 
u32
 
°rù_size_shi·
;

993 
m≠_èbÀ_°ru˘
 *
Õmt_¨øy
;

994 
u64
 
tŸÆ_m≠_èbÀ_size
;

995 
u64
 
tŸÆ_ãmp_èbÀ_size
;

997 
sh™n⁄_¥e„tch
 
¥e„tch
;

998 
sh™n⁄_©omic_t
 
≥ndög_bios
;

1001 
u64
 
‹ig_m≠_èbÀ_size
;

1003 
sh™n⁄_•ölock_t
 
queue_lock
;

1004 
sh™n⁄_ªque°_queue_t
 *
queue
;

1005 
sh™n⁄_gídisk_t
 *
gd
;

1006 
u16
 
¥i‹ôy
;

1008 
¥öt_œãncy_öãrvÆ
;

1009 
sh™n⁄_timî_li°
 
¥öt_œãncy_timî
;

1010 
max_bio_ªad_œãncy
;

1011 
max_bio_wrôe_œãncy
;

1012 
sh™n⁄_•ölock_t
 
ªc‹d_œãncy_lock
;

1018 
u64
 
Æig√d_ªqs
;

1019 
u64
 
n⁄Æig√d_ªqs
;

1020 
n⁄Æig√d_bios
;

1021 
	#RMW_READ
 0

	)

1022 
	#RMW_WRITE
 1

	)

1023 
	#RMW_LIST_COUNT
 10

	)

1024 
sh™n⁄_•ölock_t
 
rmw_li°_lock
[2][
RMW_LIST_COUNT
];

1025 
sh™n⁄_li°_hód
 
rmw_li°
[2][
RMW_LIST_COUNT
];

1026 
sh™n⁄_díåy_t
 *
debugfs_rmw_li°
;

1029 #ifde‡
CONFIG_SHANNON_DEBUG_CDEV


1030 
sh™n⁄_dev_t
 
Õmt_dev_num
;

1031 
Õmt_maj‹
;

1032 
sh™n⁄_˛ass_t
 *
Õmt_˛ass
;

1033 
debug_cdev
 *
Õmt_cdev
;

1035 
sh™n⁄_dev_t
 
ãmp_èbÀ_dev_num
;

1036 
ãmp_èbÀ_maj‹
;

1037 
sh™n⁄_˛ass_t
 *
ãmp_èbÀ_˛ass
;

1038 
debug_cdev
 *
ãmp_èbÀ_cdev
;

1041 
	#SHN_DISK_INATTACH
 0

	)

1042 
	#SHN_DISK_ATTACHED
 1

	)

1043 
	#SHN_DISK_DETACHED
 2

	)

1044 
©èched
;

1046 
exô
;

1047 
ö_ªc⁄fig
;

1048 
disk_«me
[16];

1049 
__u64
 
£˘‹s
;

1050 *
ho°d©a
;

1053 
	#SYSFS_INIT_DONE
 1

	)

1054 
	#SYSFS_LINK_DONE
 2

	)

1056 
	ssh™n⁄_öãºu±_¨g
 {

1057 
dw‹d_ödex
;

1058 
sh™n⁄_w‹k_°ru˘
 
ªpﬁl_w‹k
;

1059 
sh™n⁄_π_w‹k_°ru˘
 
π_ªpﬁl_w‹k
;

1060 
sh™n⁄_dev
 *
sdev
;

1063 
	ssh™n⁄_dev
 {

1064 
u16
 
sdev_id
;

1066 
ho°_wrôes
;

1067 
gc_wrôes
;

1069 
sh™n⁄_li°_hód
 
ªq_queue
[
PRIORITY_LEVELS
];

1070 
sh™n⁄_•ölock_t
 
ªq_queue_lock
[
PRIORITY_LEVELS
];

1071 
sh™n⁄_©omic_t
 
wrôe_ªqs
[
PRIORITY_LEVELS
];

1073 
sh™n⁄_•ölock_t
 
gc_wrôe_queue_lock
;

1074 
sh™n⁄_©omic_t
 
gc_wrôe_ªqs
;

1075 
sh™n⁄_li°_hód
 
gc_wrôe_queue
;

1076 #ifde‡
CONFIG_SHANNON_STATISTICS


1077 
sh™n⁄_©omic_t
 
‰om_ho°
;

1078 
sh™n⁄_©omic_t
 
‰om_gc
;

1080 
	#MAX_MSIX_INTERRUPTS
 8

	)

1082 
öãºu±_ve˘
[
MAX_MSIX_INTERRUPTS
/2];

1083 
u32
 
u32_ve˘‹s
[
MAX_MSIX_INTERRUPTS
];

1085 
u64
 
pŸítül_öãºu±_ve˘‹s
[
MAX_MSIX_INTERRUPTS
/2];

1086 
sh™n⁄_öãºu±_¨g
 
öãºu±_¨g
[
MAX_MSIX_INTERRUPTS
];

1087 
sh™n⁄_msix_íåy_t
 *
msix_d©a
;

1088 
sh™n⁄_poﬁ
 *
•oﬁ
;

1090 
max_úq_ödex
;

1092 
	#CRC32_TABLE_SIZE
 256

	)

1093 
u32
 *
¸c_èbÀ
;

1094 
u32
 
˝s_¸c
;

1096 
	#REQ_QUEUE_THRESHOLD_H
 (
sdev
->
logicbs_ö_chunk
 * sdev->
lun_cou¡
 * 5)

	)

1097 
	#REQ_QUEUE_THRESHOLD_L
 (
sdev
->
logicbs_ö_chunk
 * sdev->
lun_cou¡
 * 4)

	)

1098 
ö_block_°©e
;

1099 
h¨d_queue_limô
;

1100 
	#DEFAULT_CMD_QUEUE_WRITES_THRESHOLD_H
(
sdev
Ë((sdev)->
max_luns_ö_group
 * (sdev)->
logicbs_ö_chunk
 * 3)

	)

1101 
	#GET_CMD_QUEUE_WRITES_THRESHOLD_L
(
sdev
Ë((sdev)->
cmd_queue_wrôes_limô
 - (((sdev)->
max_luns_ö_group
 * (sdev)->
logicbs_ö_chunk
Ë>> 1))

	)

1102 
cmd_queue_wrôes_limô
;

1103 
sh™n⁄_©omic_t
 
wrôe_ªqs_f‹_gc
;

1104 
sh™n⁄_©omic_t
 
ö_Êight_wrôes
;

1105 
sh™n⁄_©omic_t
 
ö_cmd_queue_wrôes
;

1106 
sh™n⁄_©omic_t
 
gc_ö_Êight
;

1107 
sh™n⁄_©omic_t
 
ö_cmd_queue_adv_ªads
;

1109 
sh™n⁄_li°_hód
 
adv_ªad_li°
;

1110 
sh™n⁄_•ölock_t
 
adv_ªad_li°_lock
;

1111 
	#MAX_IN_GC_LOGICBS
 25000

	)

1112 
sh™n⁄_©omic_t
 
ö_gc_logicbs
;

1113 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


1114 
sh™n⁄_©omic_t
 
ªad_bios
;

1115 
sh™n⁄_©omic_t
 
wrôe_bios
;

1117 
sh™n⁄_waô_queue_hód_t
 
limô_ªq_queue
[2];

1119 
sh™n⁄_•ölock_t
 
ªgs_›_lock
;

1120 
sh™n⁄_•ölock_t
 
this_sb_lock
;

1121 
sh™n⁄_sb
 *
this_sb
;

1122 
this_∑ge_°rùe
;

1123 
this_lun
;

1125 
u64
 
max_wrôe_bw
;

1126 
sh™n⁄_©omic64_t
 
wrôe_bw
;

1127 
sh™n⁄_muãx_t
 
thrŸée_wrôe_bw_£m
;

1128 
thrŸée_wrôe_bw_time_°amp
;

1131 
	#DO_DATA_RETENTION_THRESHOLD
 (3600UL * 72Ë

	)

1132 
	#DEFAULT_DATA_RETENTION_INTERVAL
 1800

	)

1133 
d©a_ªã¡i⁄_öãrvÆ
;

1134 
sh™n⁄_timî_li°
 
d©a_ªã¡i⁄_timî
;

1135 
	#WL_TIMER_INTERVAL
 120

	)

1136 
wl_timî_öãrvÆ
;

1137 
sh™n⁄_timî_li°
 
wl_timî
;

1138 
	súq_dñay_desc
 {

1139 
úq_dñay
;

1141 
	#DEFAULT_UPDATE_IRQ_DELAY_TIMEOUT
 (10Ë

	)

1142 
	#DEFAULT_ENABLE_DYNAMIC_IRQ_DELAY
 (1)

	)

1143 
	#DEFAULT_IRQ_DELAY_FACTOR
 (2)

	)

1144 
	#DEFAULT_MIN_IRQ_DELAY
 (0x01)

	)

1145 
	#DEFAULT_MAX_IRQ_DELAY
 (0xFF)

	)

1146 
	#DEFAULT_HOST_READ_LAT_DIVIDE
 (5)

	)

1147 
	#DEFAULT_HOST_WRITE_LAT_DIVIDE
 (5)

	)

1148 
	#DEFAULT_HOST_READ_THRESHOLD_FACTOR
 (2)

	)

1149 
	#DEFAULT_HOST_WRITE_THRESHOLD_FACTOR
 (2)

	)

1150 
upd©e_úq_dñay_öãrvÆ
;

1151 
sh™n⁄_timî_li°
 
upd©e_úq_dñay_timî
;

1152 
sh™n⁄_w‹k_°ru˘
 
upd©e_úq_dñay_w‹k
;

1153 
u32
 
dy«mic_úq_dñay
;

1154 
u32
 
ªad_œãncy_divide
;

1155 
u32
 
wrôe_œãncy_divide
;

1156 
u32
 
wrôe_thªshﬁd_Á˘‹
;

1157 
u32
 
ªad_thªshﬁd_Á˘‹
;

1158 
u32
 
Á˘‹
;

1159 
u64
 
ho°_wrôe_ios_œ°
;

1160 
u64
 
ho°_wrôe_m£cs_œ°
;

1161 
u64
 
ho°_ªad_ios_œ°
;

1162 
u64
 
ho°_ªad_m£cs_œ°
;

1163 
mö_úq_dñay
;

1164 
max_úq_dñay
;

1165 } 
úq_dñay
;

1166 
	#DATA_RETENTION
 0

	)

1167 
	#ERASE_BALANCE
 1

	)

1168 
	#READ_DISTURB
 2

	)

1169 
	#ECC_FAILURE
 3

	)

1170 
	#TOTAL_REASON
 4

	)

1171 
wl_ªas⁄
;

1172 
√xt_wl_ªas⁄
;

1173 
sh™n⁄_w‹k_°ru˘
 
wl_föd_sb_w‹k
;

1174 
sh™n⁄_w‹k_°ru˘
 
wl_ªad_w‹k
;

1175 
sh™n⁄_w‹kqueue_°ru˘_t
 *
wl_wq
;

1176 
sh™n⁄_sb
 *
wl_this_sb
;

1177 
sh™n⁄_©omic_t
 
ö_wl_logicbs
;

1178 
sh™n⁄_li°_hód
 
waô_wl_li°
;

1179 
	#WAIT_WL_BLKCNT_MAX
 2

	)

1180 
waô_wl_blk˙t
;

1181 
sh™n⁄_©omic_t
 
ö_wl_blk˙t
;

1182 
sh™n⁄_•ölock_t
 
waô_wl_lock
;

1183 
max_ö_wl_logicbs
;

1184 
cuºít_max_ö_wl_logicbs
;

1185 
wl_max_îa£_cou¡
;

1186 
wl_îa£_cou¡_dñè
[2];

1188 
¢≠_ªad_íabÀ
;

1189 
sh™n⁄_©omic64_t
 
¢≠_ªad_cou¡î
;

1190 
sh™n⁄_©omic_t
 
¢≠_ªad_mism©ch
;

1192 
Á°_ªad_íabÀ
;

1194 
	s≥riod_ªad_°ru˘
 {

1195 
	#PERIOD_READ_DISABLE
 (0)

	)

1196 
	#PERIOD_READ_ENABLE
 (1)

	)

1197 
u8
 
°©e
;

1198 
u8
 
a˘ive_d⁄e
[2];

1199 
u8
 
œ°_blk_d⁄e
[2];

1200 
≥riod
;

1201 
u32
 
µa
;

1202 
	#PERIOD_READ_THRESHOLD
 (100)

	)

1203 
u32
 
_öãrvÆ
;

1204 
u64
 
mö_£q_num
;

1205 
u64
 
max_£q_num
;

1206 
u64
 
blk˙t
;

1207 } 
≥riod_ªad
;

1209 
°›_Æl
;

1210 
sh™n⁄_timî_li°
 
≥riod_ªad_timî
;

1211 
sh™n⁄_w‹k_°ru˘
 
≥riod_ªad_w‹k
;

1212 
sh™n⁄_timî_li°
 
gc_timî
;

1213 
sh™n⁄_w‹k_°ru˘
 
gc_timî_w‹k
;

1214 
	#BALANCE_GC_TIMEOUT
 (30Ë

	)

1215 
sh™n⁄_timî_li°
 
bÆ™˚_gc_timî
;

1216 
gc_èsk_limô
;

1217 
sh™n⁄_pm_qos_ªque°_t
 
pm_qos_l
;

1218 
sh™n⁄_w‹k_°ru˘
 
pm_qos_w‹k
;

1219 
sh™n⁄_w‹k_°ru˘
 
w‹k
;

1220 
pﬁl
[
MAX_MSIX_INTERRUPTS
];

1221 
sh™n⁄_muãx_t
 
pick_£m
;

1222 
sh™n⁄_èskÀt_°ru˘
 
comp_èskÀt
[
MAX_MSIX_INTERRUPTS
];

1223 
ö_úq
[
MAX_MSIX_INTERRUPTS
];

1225 
	#ADV_READ_SUPPORT_SHIFT
 (0)

	)

1226 
	#ADV_READ_SUPPORT_MASK
 (1 << 
ADV_READ_SUPPORT_SHIFT
)

	)

1227 
	#UPDATING_MICROCODE_SHIFT
 (1)

	)

1228 
	#UPDATING_MICROCODE_MASK
 (1 << 
UPDATING_MICROCODE_SHIFT
)

	)

1229 
adv™˚d_ªad_°©e
;

1230 
©omic_wrôe
;

1231 
¥i‹ôize_wrôe
;

1232 
hód_cou¡
;

1233 
u£_duÆ_hód
;

1234 
	#SHORT_LBA_FORMAT
 (0)

	)

1235 
	#LONG_LBA_FORMAT
 (1)

	)

1236 
lba_f‹m©
;

1238 
wr_sb
[2];

1239 
wr_group
[2];

1240 
lun_ö_group
[2];

1241 
wr_lun_off£t
[2];

1242 
wr_chunk
[2];

1243 
wr_∂™e
[2];

1244 
wr_∑ge
[2];

1245 
wr_logicb
[2];

1246 
a˘ive_blk_°¨t_jiffõs
[2];

1247 
sh™n⁄_sb
 *
a˘ive_blk
[2];

1248 
sh™n⁄_sb
 *
œ°_blk
[2];

1249 
com∑˘_ïûog
;

1251 
u64
 
chunk_°¨t_jiffõs
[2];

1252 
sh™n⁄_•ölock_t
 
chunk_ªq_lock
[2];

1253 
sh™n⁄_ªque°
 *
chunk_ªq
[2];

1254 
chunk_ªq˙t
[2];

1256 
∑rôy_öô_d⁄e
[2];

1257 
sh™n⁄_waô_queue_hód_t
 
∑rôy_öô_d⁄e_evít
[2];

1258 
	#FILL_SB_TIME_EXPIRE
 (25200ULË

	)

1259 
	#FILL_FIRST_SB_TIME_EXPIRE
 (7200ULË

	)

1260 
sh™n⁄_timî_li°
 
fûl_sb_timî
[2];

1261 #ifde‡
SHANNON_USE_WRITE_BUFFER


1262 
sh™n⁄_timî_li°
 
fûl_chunk_timî
[2];

1263 
fûl_chunk_timî_expúe
;

1265 
sh™n⁄_dñayed_w‹k
 
hŸ_dñayed_∑d
;

1266 
sh™n⁄_dñayed_w‹k
 
cﬁd_dñayed_∑d
;

1269 
	#INIT_EPILOG_COUNT
 64

	)

1270 
	#RUN_EPILOG_COUNT
 4

	)

1271 
sh™n⁄_•ölock_t
 
ïûog_lock
;

1272 
ïûog_cou¡
;

1273 
sh™n⁄_ïûog
 *
ïûogs
[
INIT_EPILOG_COUNT
];

1274 
ïûog_bôm≠
;

1276 
sh™n⁄_•ölock_t
 
u£d_blocks_lock
[2];

1277 
sh™n⁄_li°_hód
 
u£d_blocks
[2];

1278 
u£d_blk˙t
[2];

1280 
sh™n⁄_©omic_t
 
disˇrded_blk˙t
;

1281 
sh™n⁄_li°_hód
 
‰ì_blocks
;

1282 
sh™n⁄_•ölock_t
 
‰ì_blocks_lock
;

1283 
‰ì_blk˙t
;

1284 
sh™n⁄_waô_queue_hód_t
 
block_ho°_wr
;

1285 
sh™n⁄_waô_queue_hód_t
 
waô_‰ì_blk
;

1286 
sh™n⁄_li°_hód
 
waô_c›y
;

1287 
	#WAIT_COPY_BLKCNT_MAX
 4

	)

1288 
waô_c›y_blk˙t
;

1289 
sh™n⁄_•ölock_t
 
waô_c›y_lock
;

1290 
sh™n⁄_•ölock_t
 
waô_îa£d_lock
;

1291 
sh™n⁄_li°_hód
 
waô_îa£d
;

1292 
waô_îa£d_blk˙t
;

1293 
sh™n⁄_©omic_t
 
ö_îa£_blk˙t
;

1294 
sh™n⁄_•ölock_t
 
c›y_îr_lock
;

1295 
sh™n⁄_li°_hód
 
c›y_îr_blocks
;

1296 
c›y_îr_blk˙t
;

1297 
sh™n⁄_•ölock_t
 
ªcovî_îr_lock
;

1298 
sh™n⁄_li°_hód
 
ªcovî_îr_blocks
;

1299 
ªcovî_îr_blk˙t
;

1300 
sh™n⁄_©omic_t
 
ö_gc_blk˙t
;

1301 
	#IN_GC_STATE
 1

	)

1302 
	#NO_RECLAIM
 0

	)

1303 
gc_thªad_°©e
;

1304 
sh™n⁄_•ölock_t
 
gc_°©e_lock
;

1305 
gc_Á˘‹
;

1307 
hŸ_block_ª˛aim_¥i‹ôy
;

1308 
gc_ªad_ªqs
;

1309 
sh™n⁄_•ölock_t
 
gc_ªqs_lock
;

1310 
sh™n⁄_©omic_t
 
gc_thªads
;

1311 
sh™n⁄_waô_queue_hód_t
 
waô_pick_evít
;

1312 
exåa_ªqs
;

1313 
sh™n⁄_•ölock_t
 
exåa_ªqs_lock
;

1314 
	#MAX_LOGICB_BUF_COUNT
 50000

	)

1315 
sh™n⁄_©omic_t
 
logicb_buf_cou¡
;

1316 
sh™n⁄_mempoﬁ_t
 *
logicb_buf_poﬁ
;

1317 
sh™n⁄_mempoﬁ_t
 *
ïûog_∑ge_poﬁ
;

1319 
sh™n⁄_pci_dev_t
 *
pci_dev
;

1320 
node
;

1321 
sh™n⁄_b¨
 
__iomem
 *
b¨
;

1322 vﬁ©ûê
u32
 *
öãºu±_b¨
;

1323 
globÆ_b¨
 
__iomem
 *global_bar;

1325 
sh™n⁄_lun
 **
lun
;

1326 
lun_cou¡
;

1327 
max_avaûabÀ_luns
;

1328 
max_avaûabÀ_groups
;

1329 
sh™n⁄_lun£t
 *
lun£ts
;

1330 
lun£t_cou¡
;

1331 
__u64
 
max_£˘‹s
;

1332 
ovî¥ovisi⁄_øã
;

1334 
sh™n⁄_sb
 *
sbs
;

1335 
sb_cou¡
;

1336 
sub_group
 *
sub_groups
;

1337 
∑rôy_groups
;

1338 
max_luns_ö_group
;

1339 *
ªad_cou¡
;

1340 
u32
 
ªad_di°urb_thªshﬁd
;

1341 
u32
 
›í_block_ªad_di°urb_thªshﬁd
;

1343 
sh™n⁄_mbr
 
mbr
;

1344 
sh™n⁄_muãx_t
 
modify_mbr_£m
;

1346 
big_lock
;

1347 
ho°_ac˚ss_blocked
;

1348 
drive_no
;

1349 
maj‹
;

1350 
sh™n⁄_miscdevi˚_t
 
misc
;

1351 
sh™n⁄_li°_hód
 
li°
;

1352 
cdev_«me
[16];

1353 
sh™n⁄_©omic_t
 
u£rs
;

1355 
sh™n⁄_muãx_t
 
°©e_£m
;

1361 
°©e
;

1362 
ac˚ss_mode
;

1369 
ªad⁄ly_ªas⁄
;

1370 
ªdu˚d_wrôe_ªas⁄
;

1371 
sh™n⁄_w‹k_°ru˘
 
ac˚ss_mode_w‹k
;

1373 
	#MAX_RECONFIG_TIMES
 5

	)

1374 
ªc⁄fig_suµ‹t
;

1375 
ªc⁄fig_times
;

1376 
tŸÆ_ªc⁄fig_times
;

1377 
fú°_jiffõ
;

1379 
	#MAX_RESET_TIMES
 1

	)

1380 
ª£t_times
;

1381 
tŸÆ_ª£t_times
;

1382 
fú°_ª£t_jiffõ
;

1386 
	#FLASH_PE_COUNT_SPEC
 5000

	)

1387 
mö_îa£_cou¡
;

1388 
max_îa£_cou¡
;

1389 
avîage_îa£_cou¡
;

1390 
v¨ün˚_of_îa£_cou¡
;

1391 
tŸÆ_îa£_cou¡
;

1392 
Êash_≥_thªshﬁd
;

1394 
sh™n⁄_•ölock_t
 
io_°©i°ics_lock
;

1396 
__u64
 
powî_⁄_£c⁄ds
;

1397 
__u32
 
powî_cy˛e_cou¡
;

1399 
__u64
 
ho°_wrôe_£˘‹s
;

1400 
__u64
 
ho°_wrôe_£˘‹s_œ°
;

1402 
__u64
 
ho°_wrôe_ios
;

1403 
__u64
 
ho°_wrôe_m£cs
;

1405 
__u64
 
ho°_wrôe_b™dwidth
;

1406 
__u64
 
ho°_wrôe_i›s
;

1407 
__u64
 
ho°_wrôe_œãncy
;

1409 
__u64
 
tŸÆ_wrôe_£˘‹s
;

1410 
__u64
 
tŸÆ_wrôe_£˘‹s_œ°
;

1411 
__u64
 
tŸÆ_wrôe_b™dwidth
;

1413 
__u64
 
tŸÆ_ªad_£˘‹s
;

1414 
__u64
 
tŸÆ_ªad_£˘‹s_œ°
;

1415 
__u64
 
tŸÆ_ªad_b™dwidth
;

1417 
__u64
 
ho°_ªad_£˘‹s
;

1418 
__u64
 
ho°_ªad_£˘‹s_œ°
;

1419 
__u64
 
ho°_ªad_£˘‹s_hi°‹y
;

1421 
__u64
 
ho°_ªad_ios
;

1422 
__u64
 
ho°_ªad_m£cs
;

1424 
__u64
 
ho°_ªad_b™dwidth
;

1425 
__u64
 
ho°_ªad_i›s
;

1426 
__u64
 
ho°_ªad_œãncy
;

1428 
__u64
 
wrôe_am∂ifõr
;

1429 
__u64
 
wrôe_am∂ifõr_li„time
;

1432 
__u64
 
tŸÆ_gc_logicbs
;

1433 
__u64
 
tŸÆ_wl_logicbs
;

1434 
__u64
 
tŸÆ_îr_ªcovî_logicbs
;

1436 
__u64
 
tŸÆ_gc_£˘‹s_œ°
;

1437 
__u64
 
tŸÆ_wl_£˘‹s_œ°
;

1438 
__u64
 
tŸÆ_îr_ªcovî_£˘‹s_œ°
;

1440 
__u32
 
gc_b™dwidth
;

1441 
__u32
 
wl_b™dwidth
;

1442 
__u32
 
îr_ªcovî_b™dwidth
;

1444 
sh™n⁄_©omic_t
 
°©ic_bad_blk˙t
;

1445 
sh™n⁄_©omic_t
 
dy«mic_bad_blk˙t
;

1448 
gc_sbs
;

1449 
îr_ªcovîed_sbs
;

1450 
wl_sbs
;

1451 
d©a_ªã¡i⁄_sbs
;

1452 
ªad_di°urb_sbs
;

1453 
îa£_bÆ™˚_sbs
;

1454 
ecc_Áûuª_sbs
;

1456 
__u64
 
ecc_°©i°ics
[
ECC_CORRECTION_BITS_IN_SECTOR
 + 1];

1457 
sh™n⁄_©omic_t
 
ecc_Áûuª_times
;

1458 
sh™n⁄_©omic_t
 
ecc_fc_°©i°ics
;

1459 
	#ECC_FAILURE_RATE_THRESHOLD
 3

	)

1460 
ecc_Áûuª_øã_thªshﬁd
;

1462 
powî_⁄_jiffõs
;

1463 
œ°_jiffõs
;

1464 
__u64
 
powî_⁄_£c⁄ds_hi°‹y
;

1466 
	#NO_READ_ERR_MSG
 0

	)

1467 
	#ONE_MSG_PER_BLK
 1

	)

1468 
	#MSG_ON_RETRY_FAIL
 2

	)

1469 
	#MSG_ON_EACH_READ_FAIL
 3

	)

1470 
ªad_îr_msg_Àvñ
;

1473 
sh™n⁄_li°_hód
 
ª£nd_li°
;

1474 
ª£nd_logicbs
;

1475 
sh™n⁄_•ölock_t
 
ª£nd_li°_lock
;

1478 *
dummy_∑ge
;

1479 
sh™n⁄_dma_addr_t
 
dummy_dma_∑ge
;

1481 
öå_big_shi·
[2];

1482 
bufq_ack_öå_shi·
;

1483 
£u_öå_shi·
;

1484 #ifde‡
SHANNON_USE_WRITE_BUFFER


1485 
bufq_∂ugged
;

1486 
buf„r_wrôe_limô
;

1487 
sh™n⁄_w‹k_°ru˘
 
h™dÀ_bufq_w‹k
;

1488 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

1489 
sh™n⁄_waô_queue_hód_t
 
bufq_emu_waô
[2];

1490 
sh™n⁄_èsk_°ru˘_t
 *
bufq_emu_thªad
[2];

1492 
sh™n⁄_muãx_t
 
bufq_sq_£m
[2];

1493 
sh™n⁄_cmd
 *
bufq_sq_addr
[2];

1494 vﬁ©ûê
sh™n⁄_cmd
 *
bufq_cq_addr
[2];

1495 
sh™n⁄_dma_addr_t
 
bufq_sq_dma_addr
[2];

1496 
sh™n⁄_dma_addr_t
 
bufq_cq_dma_addr
[2];

1497 
sh™n⁄_waô_queue_hód_t
 
bufq_waô_cmd_pos
[2];

1499 
sh™n⁄_•ölock_t
 
bufq_b¨_lock
[2];

1500 
sh™n⁄_lun_b¨
 
__iomem
 *
bufq_b¨
[2];

1502 
__u32
 
bufq_sq_hw_hód
[2];

1503 
__u32
 
bufq_sq_hw_èû
[2];

1504 
__u32
 
bufq_cq_hw_hód
[2];

1506 
__u32
 
bufq_sq_hód_tmp
[2];

1507 
__u32
 
bufq_sq_hód
[2];

1508 
__u32
 
bufq_cq_hód
[2];

1509 
__u32
 
bufq_cq_èû
[2];

1511 
__u8
 
bufq_h™g
[2];

1513 
sh™n⁄_lun_b¨
 
__iomem
 *
bufq_ack_b¨
;

1514 
sh™n⁄_cmd
 *
bufq_ack_cq_addr
;

1515 
sh™n⁄_dma_addr_t
 
bufq_ack_cq_dma_addr
;

1516 
__u32
 
bufq_ack_cq_hw_hód
;

1518 
__u32
 
bufq_ack_cq_èû
;

1519 
__u32
 
bufq_ack_cq_hód
;

1521 
sh™n⁄_cmd_öfo
 
cmd_öfo
[2][512];

1525 #ifde‡
CONFIG_SHANNON_DEBUG


1526 
sh™n⁄_díåy_t
 *
sh™n⁄_debug_roŸ
;

1527 
sh™n⁄_díåy_t
 *
debugfs_Æl_blocks
;

1528 
sh™n⁄_díåy_t
 *
debugfs_hŸ_blocks
;

1529 
sh™n⁄_díåy_t
 *
debugfs_cﬁd_blocks
;

1530 
sh™n⁄_díåy_t
 *
debugfs_waô_îa£d
;

1531 
sh™n⁄_díåy_t
 *
debugfs_waô_c›y
;

1532 
sh™n⁄_díåy_t
 *
debugfs_‰ì_blocks
;

1533 
sh™n⁄_díåy_t
 *
debugfs_îr_blks
;

1534 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


1535 
sh™n⁄_díåy_t
 *
debugfs_out°™dög_ªqs
;

1536 
sh™n⁄_díåy_t
 *
debugfs_out°™dög_sbios
;

1538 
sh™n⁄_díåy_t
 *
debugfs_ªq_queue0
;

1539 
sh™n⁄_díåy_t
 *
debugfs_ªq_queue1
;

1540 
sh™n⁄_díåy_t
 *
debugfs_cmd_queue
;

1541 
sh™n⁄_díåy_t
 *
debugfs_gc_°©e
;

1542 
sh™n⁄_díåy_t
 *
debugfs_°©i°ics
;

1543 
sh™n⁄_díåy_t
 *
debugfs_bﬂrd_∑ømëîs
;

1544 
sh™n⁄_díåy_t
 *
debugfs_ªad_cou¡
;

1545 
sh™n⁄_díåy_t
 *
debugfs_ecc_Áûuª_times
;

1546 
sh™n⁄_díåy_t
 *
debugfs_bad_blocks
;

1547 
sh™n⁄_díåy_t
 *
debugfs_queue_dïth
;

1548 
sh™n⁄_díåy_t
 *
debugfs_mbr
;

1549 
sh™n⁄_díåy_t
 *
debugfs_l2p_lunm≠
;

1551 
sh™n⁄_díåy_t
 *
debugfs_waôqueue
;

1552 
sh™n⁄_díåy_t
 *
debugfs_lock_°©
;

1554 
sh™n⁄_díåy_t
 *
debugfs_lun_°©i°ics
;

1556 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

1557 
sh™n⁄_díåy_t
 *
debugfs_ªgi°îs
;

1559 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


1560 
sh™n⁄_díåy_t
 *
debugfs_sq_dïth
;

1563 
sh™n⁄_li°_hód
 
gc_°©e_li°
;

1564 
sh™n⁄_•ölock_t
 
gc_°©e_li°_lock
;

1565 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


1566 
díåy
 *
debugfs_Áke_wr_bad_lu≈∑
;

1567 
díåy
 *
debugfs_Áke_rd_bad_lu≈ba
;

1568 
díåy
 *
debugfs_Áke_î_bad_block
;

1569 
díåy
 *
debugfs_Áke_bad_lun
;

1570 
díåy
 *
debugfs_Áke_cmd_timeout_lun
;

1571 
díåy
 *
debugfs_Áke_rd_bad_lun
;

1573 *
Áke_wr_bad_lu≈∑
;

1574 *
Áke_rd_bad_lu≈ba
;

1575 *
Áke_î_bad_block
;

1576 *
Áke_bad_lun
;

1577 *
Áke_cmd_timeout_lun
;

1578 *
Áke_rd_bad_lun
;

1579 *
Áke_twö_rd_bad_lu≈ba
;

1580 
díåy
 *
debugfs_twö_ªad_îr
;

1581 
twö_ªad_îr
;

1583 
Áke_bad_lun_skùmbr
;

1584 
Áke_cmd_timeout_lun_skùmbr
;

1585 
sh™n⁄_©omic_t
 
rwe_îr_buf_d⁄e
;

1586 
m™uÆ_ªad_îr
;

1587 
m™uÆ_wrôe_îr
;

1588 
díåy
 *
debugfs_m™uÆ_ªad_îr
;

1589 
díåy
 *
debugfs_m™uÆ_wrôe_îr
;

1591 #ifde‡
CONFIG_SHANNON_PLVERIFY


1592 
díåy
 *
debugfs_∂˘æ
;

1593 
∂˘æ
;

1594 
boŸög_waô_îa£d
[128];

1596 #ifde‡
CONFIG_SHANNON_DEBUG_DUMP


1597 
sh™n⁄_díåy_t
 *
debugfs_dump
;

1599 
sh™n⁄_díåy_t
 *
debugfs_badlun
;

1600 
sh™n⁄_díåy_t
 *
debugfs_vﬁège
;

1603 
sh™n⁄_díåy_t
 *
debugfs_cmd_queue_øw_d©a_dú
;

1604 
sh™n⁄_díåy_t
 **
debugfs_cmd_queue_øw_d©a
;

1607 
	#DMA_REORDER_RETRY_COUNT
 5000

	)

1608 
u64
 
°©us_pﬁl_cou¡
;

1609 
u64
 
°©us_pﬁl_ªåy
;

1610 
u64
 
ªad_pﬁl_cou¡
;

1611 
u64
 
ªad_pﬁl_ªåy
;

1612 
u64
 
bufq_pﬁl_cou¡
;

1613 
u64
 
bufq_pﬁl_ªåy
;

1615 #ifde‡
CONFIG_SHANNON_DEBUG_CDEV


1616 
sh™n⁄_dev_t
 
bufq_comm™d_dev_num
;

1617 
bufq_comm™d_maj‹
;

1618 
sh™n⁄_˛ass_t
 *
bufq_comm™d_˛ass
;

1619 
debug_cdev
 *
bufq_comm™d_cdevs
;

1621 
sh™n⁄_dev_t
 
comm™d_dev_num
;

1622 
comm™d_maj‹
;

1623 
sh™n⁄_˛ass_t
 *
comm™d_˛ass
;

1624 
debug_cdev
 *
comm™d_cdevs
;

1626 
sh™n⁄_dev_t
 
com∂ëi⁄_dev_num
;

1627 
com∂ëi⁄_maj‹
;

1628 
sh™n⁄_˛ass_t
 *
com∂ëi⁄_˛ass
;

1629 
debug_cdev
 *
com∂ëi⁄_cdevs
;

1631 
sh™n⁄_dev_t
 
pba_èbÀ_dev_num
;

1632 
pba_èbÀ_maj‹
;

1633 
sh™n⁄_˛ass_t
 *
pba_èbÀ_˛ass
;

1634 
debug_cdev
 *
pba_èbÀ_cdevs
;

1636 
sh™n⁄_dev_t
 
ïûog_dev_num
;

1637 
ïûog_maj‹
;

1638 
sh™n⁄_˛ass_t
 *
ïûog_˛ass
;

1639 
debug_cdev
 *
ïûog_cdev
;

1642 
sh™n⁄_disk
 
sdisk
;

1643 
sh™n⁄_èsk_°ru˘_t
 *
¥e„tch_thªad
;

1651 
øid5_suµ‹ãd
;

1652 
rŸ©e_∑rôy
;

1654 
sh™n⁄_•ölock_t
 
£quí˚_numbî_lock
;

1655 
u64
 
£quí˚_numbî
;

1656 
u64
 
powî_⁄_£q_num
;

1657 
ecc_by∑ss
;

1658 
ªåy_times_⁄_îr‹
;

1660 
	#STAGE_INIT_HARDWARE_DONE
 1

	)

1661 
	#STAGE_BBT_DONE
 2

	)

1662 
	#STAGE_RECOVER_USED_DONE
 3

	)

1663 
	#STAGE_RECOVER_ACTIVE_DONE
 4

	)

1664 
	#STAGE_RECOVER_DONE
 5

	)

1665 
	#STAGE9_DONE
 9

	)

1666 
öô_d⁄e
;

1667 
	#RECOVER_WARNING
 -1

	)

1668 
	#RECOVER_PROBLEMATIC
 -2

	)

1669 
	#RECOVER_ERROR
 -3

	)

1670 
	#RECOVER_DEAD
 -4

	)

1671 
ªcovî_°©e
;

1672 
sh™n⁄_©omic_t
 
ªcovî_d⁄e
;

1673 
sh™n⁄_waô_queue_hód_t
 
ªcovî_d⁄e_evít
;

1675 
	#IDLE
 (0)

	)

1676 
	#WAIT_NEXT_GROUP_STATUS
 (1)

	)

1677 
	#GET_NEXT_GROUP_STATUS_FINISH
 (2)

	)

1678 
sh™n⁄_©omic_t
 
a˘ive_waô_°©us
;

1679 
sh™n⁄_waô_queue_hód_t
 
a˘ive_waô_evít
;

1680 
sh™n⁄_©omic_t
 
waô_blk
;

1681 
sh™n⁄_waô_queue_hód_t
 
waô_blk_d⁄e_evít
;

1682 
sh™n⁄_waô_queue_hód_t
 
big_lock_evít
;

1684 *
övÆid_Êashids
;

1685 
√w_bad_lun
 *new_bad_lun;

1686 
u64
 
°©ic_bad_lun_m≠
[
BAD_LUN_MAP_ARRAY_SIZE
];

1688 
sh™n⁄_èsk_°ru˘_t
 *
gc_thªad
;

1690 
sh™n⁄_•ölock_t
 
îr_blks_lock
;

1691 
sh™n⁄_li°_hód
 
îr_blks
;

1692 
îr_blk˙t
;

1693 
sh™n⁄_©omic_t
 
≥ndög_îr_blks
;

1694 
sh™n⁄_èsk_°ru˘_t
 *
ªcovî_thªad
;

1695 
ªcovî_øã
;

1696 
sh™n⁄_sb
 *
this_îr_sb
;

1697 
this_îr_sb_ödex
;

1698 
this_îr_°rùe
;

1699 
îr_gc_Á˘‹
;

1701 
	#LUN_BITMAP_LEN
 64

	)

1702 
u8
 
îr_check_bôm≠
[
LUN_BITMAP_LEN
];

1703 
îr_check_debug
;

1704 
su•icious_bad_lun_ödiˇt‹
;

1706 
logicb_shi·
;

1707 
logicb_size
;

1708 
£˘‹s_ö_logicb
;

1710 
u£r_logicb_shi·
;

1711 
u£r_logicb_size
;

1713 
«nd_∑ge_size
;

1714 
«nd_∑ge_shi·
;

1715 
«nd_∑ge_ˇ∑côy
;

1716 
oob_size
;

1717 
logicbs_ö_∑ge
;

1718 
∂™es
;

1719 
p£udo_∂™e
;

1720 
∂™e_‹dî
;

1721 
logicbs_ö_chunk
;

1722 
logicbs_ö_∑ge_°rùe
;

1723 
∑ges_ö_eblock
;

1724 
eblocks_ö_lun
;

1725 
mbr_eblocks
;

1726 
logicbs_ö_eblock
;

1727 
logicbs_ö_siblög_eblock
;

1728 
∑ges_ö_siblög_eblock
;

1729 
cfg_ch™√ls
;

1730 
cfg_lun£t_ö_ch™√l
;

1731 
cfg_lun_ö_lun£t
;

1732 
max_ch™√ls
;

1733 
max_lun_ö_ch™√l
;

1734 
max_lun£t_ö_ch™√l
;

1735 
max_lun_ö_lun£t
;

1736 
max_lun_ö_˚
;

1737 
max_˚_ö_lun£t
;

1738 
max_ïûog_size
;

1739 
max_logicbs_ö_ïûog
;

1740 
ïûog_hód_size
;

1741 
ïûog_íåy_size
;

1742 
¥efix_no_›_cmd
;

1744 
µa_block_width
;

1745 
µa_∂™e_width
;

1746 
µa_∑ge_width
;

1747 
µa_block_shi·
;

1748 
µa_∂™e_shi·
;

1749 
µa_∑ge_shi·
;

1752 
öãºu±_dñay
;

1753 
ecc_codew‹ds_ö_logicb
;

1754 
ecc_c‹ª˘i⁄_powî
;

1755 
ecc_codew‹d_size
;

1756 
fú°_codew‹d_off£t
;

1757 
	#MODE_8BIT
 (1)

	)

1758 
	#MODE_16BIT
 (2)

	)

1759 
bô_mode
;

1760 *
£˘‹s_codew‹d_addr
;

1761 
fuŒ_£˘‹_size
;

1762 
fuŒ_∑ge_size
;

1763 
vîy_öôül_sblk
[2];

1765 
pba_èbÀ_size
;

1767 
¥ogªss_b¨_vÆid
;

1768 
sh™n⁄_©omic_t
 
îa£_d⁄e
;

1769 
sh™n⁄_waô_queue_hód_t
 
îa£_d⁄e_evít
;

1770 
sh™n⁄_©omic_t
 
ª‰esh_mbr_d⁄e
;

1771 
sh™n⁄_©omic_t
 
ª‰esh_mbr_cou¡
;

1774 
vﬁège_aux
;

1775 
vﬁège_aux_max
;

1776 
vﬁège_öt
;

1777 
vﬁège_öt_max
;

1778 
ãm≥øtuª_öt
;

1779 
ãm≥øtuª_öt_max
;

1780 
ãm≥øtuª_aux1
;

1781 
ãm≥øtuª_aux2
;

1782 
ãm≥øtuª_bﬂrd
;

1783 
ãm≥øtuª_bﬂrd_max
;

1784 
ãm≥øtuª_Êash
;

1785 
ãm≥øtuª_Êash_max
;

1786 
ãm≥øtuª_w¨nög_thªshﬁd
;

1789 
u32
 
£u_¸c_îr‹
;

1790 
u32
 
£u_¸c_îr‹_hi°‹y
;

1791 
u32
 
£u_ecc_îr‹
;

1792 
u32
 
£u_ecc_îr‹_hi°‹y
;

1795 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_wq
;

1796 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_ªad_wq
;

1797 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_≥riod_ªad_wq
;

1798 
sh™n⁄_w‹kqueue_°ru˘_t
 *
gc_timî_wq
;

1799 
sh™n⁄_w‹kqueue_°ru˘_t
 *
ªad_îr_wq
;

1800 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_comp_wq
;

1801 
sh™n⁄_w‹kqueue_°ru˘_t
 *
¥e„tch_wq
;

1802 
sh™n⁄_π_w‹kqueue_°ru˘
 *
sh™n⁄_π_comp_wq
;

1803 
ˇŒback_ƒ_wq
;

1804 
sh™n⁄_w‹kqueue_°ru˘_t
 **
sh™n⁄_ˇŒback_wq
;

1805 
sh™n⁄_w‹kqueue_°ru˘_t
 **
h™dÀ_lun_wq
;

1806 **
w‹kqueue_«me
;

1807 
w‹kqueue_cou¡
;

1808 
sh™n⁄_ƒ_wq
;

1811 
u64
 
buf_ªad_Áûed
;

1812 
hŸ_∂uggabÀ
;

1813 
∂ug_out
;

1814 
sh™n⁄_dñayed_w‹k
 
eje˘_w‹k
;

1815 
sh™n⁄_w‹k_°ru˘
 
∂ugout_w‹k
;

1816 
sh™n⁄_muãx_t
 
∂ug_out_£m
;

1818 
sh™n⁄_w‹k_°ru˘
 
ªc⁄fig_w‹k
;

1819 
sh™n⁄_w‹k_°ru˘
 
ª£t_w‹k
;

1820 
sh™n⁄_w‹k_°ru˘
 
upd©e_mi¸ocode_w‹k
;

1822 
u64
 
d«
;

1823 
u32
 
has_£rvi˚_èg
;

1824 
£rvi˚_èg
[32];

1825 
modñ_id
[40];

1827 
udid
[36];

1829 
u32
 
fúmw¨e_vîsi⁄
;

1830 
u32
 
fúmw¨e_èg
;

1831 
u8
 
h¨dw¨e_vîsi⁄
;

1834 
sh™n⁄_kobje˘_t
 
sysfs_kobj
;

1835 
sh™n⁄_kobje˘_t
 
sysfs_pci_öfo_kobj
;

1836 
sysfs_öô_d⁄e
;

1839 
sh™n⁄_devi˚_t
 *
hwm⁄_dev
;

1842 
sh™n⁄_timî_li°
 
w©chdog_timî
;

1843 
sh™n⁄_w‹k_°ru˘
 
w©chdog_w‹k
;

1845 
sh™n⁄_w‹kqueue_°ru˘_t
 *
misc_wq
;

1846 
w©chdog_°›
;

1848 
	#MBR_REFRESH_INTERVAL
 15552000

	)

1851 
sh™n⁄_w‹k_°ru˘
 
ª‰esh_w‹k
;

1852 
sh™n⁄_w‹kqueue_°ru˘_t
 *
ª‰esh_wq
;

1853 
ª‰esh_£quí˚
;

1856 
	#READ_FROM_NORFLASH
 1

	)

1857 
	#MICROCODE_FROM_NORFLASH
 (1 << 1)

	)

1858 
u8
 
n‹_mbr_°©us
;

1859 
u64
 
Êashid
;

1860 
ifmode
;

1861 
ovîdrive
;

1862 
‰eq_mode
;

1864 
cuºít_mi¸ocode_ödex
;

1865 
	#MICROCODE_ARRAY_SIZE
 (8)

	)

1867 
	#MICROCODE_INVALID
 (0)

	)

1868 
	#MICROCODE_VALID_SHIFT
 (0)

	)

1869 
	#MICROCODE_VALID_MASK
 (1 << 
MICROCODE_VALID_SHIFT
)

	)

1870 
	#MICROCODE_FROM_NOR_SHIFT
 (1)

	)

1871 
	#MICROCODE_FROM_NOR_MASK
 (1 << 
MICROCODE_FROM_NOR_SHIFT
)

	)

1872 
	#MICROCODE_IN_USE_SHIFT
 (2)

	)

1873 
	#MICROCODE_IN_USE_MASK
 (1 << 
MICROCODE_IN_USE_SHIFT
)

	)

1874 
°©e
;

1875 
≥_cy˛e
;

1876 
°¨t_ªg
;

1877 
mi¸ocode_Àngth
;

1878 
u32
 *
èbÀ
;

1879 } 
mi¸ocode_¨øy
[
MICROCODE_ARRAY_SIZE
];

1881 
sh¨ed_∑ges
;

1882 
dummy_w‹dlöe
;

1883 
„©uª_cfg
 
„©uª_cfg_li°
[
FEATURE_CFG_LIST_SIZE
];

1885 
u64
 
fûl_›í_chunk_logicbs
;

1887 
u64
 
buf„r_wrôe_cou¡î
;

1888 
u64
 
buf„r_wrôe_cou¡î_œ°
;

1889 
u64
 
dúe˘_wrôe_cou¡î
;

1890 
u64
 
dúe˘_wrôe_cou¡î_œ°
;

1892 
u64
 
buf„r_wrôe_≥r˚¡
;

1894 
u32
 
n‹Êash_id
;

1895 
sh™n⁄_n‹Êash
 
n‹Êash
;

1896 
sh™n⁄_muãx_t
 
n‹Êash_›s_£m
;

1898 
n‹_block
 *
n‹_blocks
;

1899 
n‹_∑ge
 **
n‹_∑ge_¨øy
;

1900 
cuº_∑ge
;

1901 
√xt_¶Ÿ
;

1902 
pos_block
;

1903 
pos_∑ge
;

1904 
u16
 
bbt_f‹m©_vîsi⁄
;

1905 
u32
 
bbt_£q_num
;

1906 
sh™n⁄_li°_hód
 
fuŒ_n‹_block_li°
;

1907 
sh™n⁄_li°_hód
 
u£d_n‹_block_li°
;

1908 
sh™n⁄_li°_hód
 
‰ì_n‹_block_li°
;

1909 
sh™n⁄_li°_hód
 
waô_îa£_n‹_block_li°
;

1910 
sh™n⁄_li°_hód
 
îa£_îr_n‹_block_li°
;

1911 
sh™n⁄_li°_hód
 
wrôe_îr_n‹_block_li°
;

1912 
‰ì_n‹_block_cou¡
;

1913 
sh™n⁄_muãx_t
 
wrôe_bbt_£m
;

1914 
	#BBT_SLOT_IS_FULL
 (1 << 0)

	)

1915 
	#BBT_NOR_BLOCK_NO_SPACE
 (1 << 1)

	)

1916 
n‹_bbt_°©e
;

1917 
sh™n⁄_díåy_t
 *
debugfs_bbt_°©e
;

1919 
ovîœp_wrôe
;

1920 
sh™n⁄_ovîœp
 *
ovîœp
;

1921 
sh™n⁄_waô_queue_hód_t
 
îa£_dummy_d⁄e_evít
;

1922 
sh™n⁄_©omic_t
 
îa£_dummy_d⁄e
;

1925 
sh™n⁄_pci_öfo
 
pci_öfo
;

1929 
	#NS_LOGICB_SHIFT
 12

	)

1930 
	#NS_STRIP_SIZE_SHIFT
 (3Ë

	)

1931 
	ssh™n⁄_«me•a˚
 {

1932 
sh™n⁄_disk
 
sdisk
;

1933 
u£r_logicb_size
;

1934 
u£r_logicb_shi·
;

1935 
logicb_size
;

1936 
logicb_shi·
;

1937 
°rù_size
;

1938 
°rù_size_shi·
;

1939 
sh™n⁄_•ölock_t
 
d©a_lock
;

1940 
lun_pba
 
d©a_pba
;

1941 
sh™n⁄_ns_d©a
 *
d©a
;

1942 
upd©e_ns_d©a_d⁄e
;

1943 
sh™n⁄_waô_queue_hód_t
 
upd©e_ns_d©a_d⁄e_evít
;

1944 
sh™n⁄_©omic_t
 
ios
;

1945 
u32
 
max_i›s
;

1946 
sh™n⁄_muãx_t
 
thrŸée_ios_£m
;

1947 
u32
 
thrŸée_ios_time_°amp
;

1948 
u16
 
£q_num
;

1950 
sh™n⁄_©omic_t
 
u£rs
;

1952 
sh™n⁄_©omic_t
 
ªfcou¡
;

1953 
u32
 
£˘‹s_ö_logicb
;

1954 
u32
 
idx
;

1955 
sh™n⁄_poﬁ
 *
poﬁ
;

1956 
sh™n⁄_kobje˘_t
 
sysfs_kobj
;

1957 
maj‹
;

1958 
sysfs_öô_d⁄e
;

1959 
u64
 
ho°_wrôe_£˘‹s_hi°‹y
;

1960 
u64
 
ho°_ªad_£˘‹s_hi°‹y
;

1962 
œ°_jiffõs
;

1963 
sh™n⁄_•ölock_t
 
io_°©i°ics_lock
;

1965 
__u64
 
ho°_wrôe_£˘‹s
;

1966 
__u64
 
ho°_wrôe_£˘‹s_œ°
;

1968 
__u64
 
ho°_wrôe_ios
;

1969 
__u64
 
ho°_wrôe_m£cs
;

1971 
__u64
 
ho°_wrôe_b™dwidth
;

1972 
__u64
 
ho°_wrôe_i›s
;

1973 
__u64
 
ho°_wrôe_œãncy
;

1975 
__u64
 
ho°_ªad_£˘‹s
;

1976 
__u64
 
ho°_ªad_£˘‹s_œ°
;

1978 
__u64
 
ho°_ªad_ios
;

1979 
__u64
 
ho°_ªad_m£cs
;

1981 
__u64
 
ho°_ªad_b™dwidth
;

1982 
__u64
 
ho°_ªad_i›s
;

1983 
__u64
 
ho°_ªad_œãncy
;

1987 
	#POOL_DEFAULT_OVERPROVISION
 20

	)

1989 
	ssh™n⁄_poﬁ
 {

1990 
u64
 
w©îm¨k
;

1991 
u16
 
id
;

1992 
u16
 
sdev_cou¡
;

1993 
u16
 
⁄löe_sdev_cou¡
;

1994 
sh™n⁄_©omic_t
 
ªfcou¡
;

1995 
ovî¥ovisi⁄
;

1996 
ªad⁄ly_ªas⁄
;

1997 
sh™n⁄_©omic_t
 
ns_cou¡
, 
high_¥i‹ôy_ns_cou¡
;

1998 
sh™n⁄_©omic64_t
 
u£d_logicbs
;

1999 
u64
 
avaûabÀ_ˇ∑côy
;

2000 
u64
 
physiˇl_ˇ∑côy
;

2001 
maj‹
;

2002 
exô
;

2003 
°©e
;

2004 
ac˚ss_mode
;

2005 
sh™n⁄_li°_hód
 
li°
;

2006 
cdev_«me
[16];

2007 
nodíame
[32];

2008 
sh™n⁄_miscdevi˚_t
 
misc
;

2009 
sh™n⁄_muãx_t
 
°©e_£m
;

2010 
sh™n⁄_kobje˘_t
 
sysfs_kobj
;

2011 
sysfs_öô_d⁄e
;

2012 
h¨d_queue_limô
;

2013 
sh™n⁄_©omic_t
 
ªcovî_ns_d©a_d⁄e
;

2014 
sh™n⁄_waô_queue_hód_t
 
ªcovî_ns_d©a_d⁄e_evít
;

2020 
sh™n⁄_«me•a˚
 **
ns
;

2021 
sh™n⁄_ns_d©a
 *
ns_d©a
;

2022 
sh™n⁄_muãx_t
 
poﬁ_öfo_£m
;

2023 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
;

2025 
sh™n⁄_mbr
 *
fú°_mbr
;

2026 
sh™n⁄_dev
 *
sdevs
[0];

2029 
	#OVERPROVISION_THRESHOLD
 10

	)

2030 
	#INT_DEALY
 1

	)

2031 
	#META_LEN
 8

	)

2032 
	#RAID5_SUPPORTED
 1

	)

2033 
	#ROTATE_PARITY
 1

	)

2034 
	#ECC_BYPASS
 0

	)

2036 
	#GC_DIVIDE_FACTOR
 50

	)

2037 
	#GC_THROTTLE_FACTOR
 6

	)

2039 
	#GC_THRESHOLD_N1H
 24

	)

2040 
	#GC_THRESHOLD_N1L
 23

	)

2041 
	#GC_WL_BAR
 17

	)

2042 
	#GC_THROTTLE_BAR
 17

	)

2043 
	#GC_THRESHOLD_N3
 6

	)

2045 
	#READ_THE_REST_TAG
 0x0101010101010000

	)

2046 
	#READ_LAST_EPILOG_CALLBACK_TAG
 0x1212121212120000

	)

2047 
	#READ_LAST_EPILOG_TAG
 0x2323232323230000

	)

2048 
	#RECOVER_ACTIVE_BLK_TAG
 0x3434343434340000

	)

2049 
	#PARITY_INIT_TAG
 0x4545454545450000

	)

2050 
	#WRITE_PARITY_TAG
 0x5656565656560000

	)

2051 
	#WRITE_EPILOG_TAG
 0x6767676767670000

	)

2053 
	#HOT_TIMER_FN_TAG
 0x8989898989890000

	)

2054 
	#COLD_TIMER_FN_TAG
 0x9a9a9a9a9a9a0000

	)

2055 
	#ERASE_BLOCK_TAG
 0xabababababab0000

	)

2056 
	#GC_TAG
 0xbcbcbcbcbcbc0000

	)

2057 
	#WL_TAG
 0xcdcdcdcdcdcd0000

	)

2058 
	#WR_ERR_HANDLER_TAG
 0xdededededede0000

	)

2059 
	#READ_BBT_TAG
 0xe„„„„„f0000

	)

2060 
	#ADD_BBT_TO_MBR_TAG
 0x1231231231230000

	)

2061 
	#WRITE_MBR_TAG
 0x2342342342340000

	)

2062 
	#WRITE_STATIC_BBT_TAG
 0x3453453453450000

	)

2063 
	#READ_PPA_TAG
 0x4564564564560000

	)

2064 
	#RAID5_RECOVERY_TAG
 0x5675675675670000

	)

2065 
	#DUMMY_CHUNK_TAG
 0x6786786786780000

	)

2066 
	#READ_CHECK_TAG
 0x7897897897890000

	)

2067 
	#RECOVER_BBT_TAG
 0x89a89a89a89a0000

	)

2068 
	#FILL_BLANK_EPILOG_TAG
 0x9ab9ab9ab9ab0000

	)

2069 
	#FILL_BUFFER_WRITE_CHUNK_TAG
 0xabˇbˇbˇbc0000

	)

2070 
	#ASSEMBLE_READ_TAG
 0xbcdbcdbcdbcd0000

	)

2071 
	#ASSEMBLE_RMW_READ_TAG
 0xcdecdecdecde0000

	)

2072 
	#REFRESH_MBR_EBLKS_TAG
 0xdefdefdefdef0000

	)

2073 
	#BAD_LUN_CHECKING_TAG
 0x„d„d„d„d0000

	)

2074 
	#READ_BBT_POOL_INFO_TAG
 0x1234123412340000

	)

2075 
	#WRITE_BBT_POOL_INFO_TAG
 0x2345234523450000

	)

2076 
	#ADD_BBT_POOL_INFO_TAG
 0x3456345634560000

	)

2077 
	#CHECK_NEXT_GROUP_TAG
 0x4567456745670000

	)

2078 
	#FILL_ACTIVE_BLK_TAG
 0x5678567856780000

	)

2079 
	#RESEND_RMW_READ_TAG
 0x6789678967890000

	)

2080 
	#PERIOD_READ_TAG
 0x789a789a789a0000

	)

2081 
	#UPDATE_NS_DATA_TAG
 0x89ab89ab89ab0000

	)

2082 
	#RECOVER_NS_DATA_TAG
 0x9abc9abc9abc0000

	)

2083 
	#RECOVER_OVERLAP_BLK_TAG
 0xabcdabcdabcd0000

	)

2084 
	#OVERLAP_WRITE_BACK_TAG
 0xbcdebcdebcde0000

	)

2085 
	#PREFETCH_TAG
 0xcba9cba9cba90000

	)

2087 
ölöe
 
	$pba_is_equÆ
(
lun_pba
 *
pba1
, lun_pb®*
pba2
)

2089  ((
pba1
->
lun
 =
pba2
->lunË&& (pba1->
lun_pba
 ==Öba2->lun_pba));

2090 
	}
}

2092 
ölöe
 
	$lun_pba_is_övÆid
(
lun_pba
 *
pba
)

2094  (
pba
->
lun_pba
 == 0x03ffffff);

2095 
	}
}

2097 
ölöe
 
	$£t_lun_pba_övÆid
(
lun_pba
 *
pba
)

2099 
pba
->
lun_pba
 = 0x03ffffff;

2100 
	}
}

2102 
ölöe
 
u64
 
	$gë_Õmt_vÆid_logicbs
(
m≠_èbÀ_°ru˘
 *
Õmt
)

2104 
i
;

2105 
u64
 
vÆid_logicbs
 = 0;

2107 i‡(
	`u∆ikñy
(
Õmt
 =
NULL
))

2110 i‡(!(
Õmt
->
°©e
 & 
MAP_TABLE_VALID_MASK
))

2113 
i
 = 0; i < 
LOCK_COUNT
; i++)

2114 
vÆid_logicbs
 +
Õmt
->
vÆid_logicbs_¨øy
[
i
];

2116  
vÆid_logicbs
;

2117 
	}
}

2119 
ölöe
 
u64
 
	$gë_sdisk_vÆid_logicbs
(
sh™n⁄_disk
 *
sdisk
)

2121 
i
;

2122 
u64
 
vÆid_logicbs
 = 0;

2124 i‡(
sdisk
->
Õmt_¨øy
 =
NULL
)

2127 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++)

2128 
vÆid_logicbs
 +
	`gë_Õmt_vÆid_logicbs
(&
sdisk
->
Õmt_¨øy
[
i
]);

2130  
vÆid_logicbs
;

2131 
	}
}

2133 
ölöe
 
	$Õmt_vÆid_logicbs_˛ór
(
m≠_èbÀ_°ru˘
 *
Õmt
)

2135 
i
;

2137 i‡(
	`u∆ikñy
(
Õmt
 =
NULL
))

2140 
i
 = 0; i < 
LOCK_COUNT
; i++)

2141 
Õmt
->
vÆid_logicbs_¨øy
[
i
] = 0;

2142 
	}
}

2144 
ölöe
 
	$sdisk_vÆid_logicbs_˛ór
(
sh™n⁄_disk
 *
sdisk
)

2146 
i
;

2148 i‡(
sdisk
->
Õmt_¨øy
 =
NULL
)

2151 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++)

2152 
	`Õmt_vÆid_logicbs_˛ór
(&
sdisk
->
Õmt_¨øy
[
i
]);

2153 
	}
}

2155 
ölöe
 
u32
 
	$gë_m≠_èbÀ_°ru˘_ödex_‰om_lba
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
)

2157 i‡(
sdisk
->
sdev_cou¡
 == 1)

2159 i‡((
sdisk
->
sdev_cou¡
 & (sdisk->sdev_count - 1)) == 0)

2160  ((
lba
 >> 
sdisk
->
°rù_size_shi·
Ë& (sdisk->
sdev_cou¡
 - 1));

2162  ((
lba
 >> 
sdisk
->
°rù_size_shi·
Ë% sdisk->
sdev_cou¡
);

2163 
	}
}

2164 
	#gë_m≠_èbÀ_°ru˘_‰om_sdev
(
sdev
, 
sdisk
Ë(&((sdisk)->
Õmt_¨øy
[sdev->
sdev_id
]))

	)

2165 
	#gë_Õmt_lock_ödex
(
¶Ÿ
Ë((¶ŸË% 
LOCK_COUNT
)

	)

2166 
	#Õmt_lock
(
sdev
, 
sdisk
, 
lba
) \

2167 
	`sh™n⁄_•ö_lock_bh
(&(
sdisk
)->
Õmt_¨øy
[(
sdev
)->
sdev_id
].
m≠_èbÀ_lock
[
	`gë_Õmt_lock_ödex
(
	`gë_¶Ÿ_‰om_Õmt
((sdisk), (
lba
)))])

	)

2169 
	#Õmt_u∆ock
(
sdev
, 
sdisk
, 
lba
) \

2170 
	`sh™n⁄_•ö_u∆ock_bh
(&(
sdisk
)->
Õmt_¨øy
[(
sdev
)->
sdev_id
].
m≠_èbÀ_lock
[
	`gë_Õmt_lock_ödex
(
	`gë_¶Ÿ_‰om_Õmt
((sdisk), (
lba
)))])

	)

2172 
	#Õmt_lock_ö_ªcovî_Õmt
(
sdev
, 
sdisk
, 
¶Ÿ
) \

2173 
	`sh™n⁄_•ö_lock
(&(
sdisk
)->
Õmt_¨øy
[(
sdev
)->
sdev_id
].
m≠_èbÀ_lock
[
	`gë_Õmt_lock_ödex
((
¶Ÿ
))])

	)

2175 
	#Õmt_u∆ock_ö_ªcovî_Õmt
(
sdev
, 
sdisk
, 
¶Ÿ
) \

2176 
	`sh™n⁄_•ö_u∆ock
(&(
sdisk
)->
Õmt_¨øy
[(
sdev
)->
sdev_id
].
m≠_èbÀ_lock
[
	`gë_Õmt_lock_ödex
((
¶Ÿ
))])

	)

2178 
	#MBR_MAX_TRY
 32

	)

2180 
	#£t_ªcovî_°©e_w¨nög
(
sdev
) \

2182 i‡((
sdev
)->
ªcovî_°©e
 > 
RECOVER_WARNING
) \

2183 (
sdev
)->
ªcovî_°©e
 = 
RECOVER_WARNING
; \

2184 
	`sh™n⁄_w¨n
("Löê%dÑecovî w¨nög.\n", 
__LINE__
); \

2185 } 0)

	)

2187 
	#£t_ªcovî_°©e_¥obÀm©ic
(
sdev
) \

2189 i‡((
sdev
)->
ªcovî_°©e
 > 
RECOVER_PROBLEMATIC
) \

2190 (
sdev
)->
ªcovî_°©e
 = 
RECOVER_PROBLEMATIC
; \

2191 
	`sh™n⁄_£t_bô
(
SHN_REASON_EPILOG_FAILURE
, &(
sdev
)->
ªad⁄ly_ªas⁄
); \

2192 
	`sh™n⁄_îr
("Löê%d: ProbÀm©i¯ªcovî! NìdÅÿbêªf‹m©áà⁄˚.\n", 
__LINE__
); \

2193 } 0)

	)

2195 
	#£t_ªcovî_°©e_îr‹
(
sdev
) \

2197 i‡((
sdev
)->
ªcovî_°©e
 > 
RECOVER_ERROR
) \

2198 (
sdev
)->
ªcovî_°©e
 = 
RECOVER_ERROR
; \

2199 
	`sh™n⁄_£t_bô
(
SHN_REASON_EPILOG_FAILURE
, &(
sdev
)->
ªad⁄ly_ªas⁄
); \

2200 
	`sh™n⁄_îr
("Löê%d: Recovî Eº‹! NìdÅÿbêªf‹m©áà⁄˚.\n", 
__LINE__
); \

2201 } 0)

	)

2203 
	#£t_ªcovî_°©e_dód
(
sdev
) \

2205 i‡((
sdev
)->
ªcovî_°©e
 > 
RECOVER_DEAD
) \

2206 (
sdev
)->
ªcovî_°©e
 = 
RECOVER_DEAD
; \

2207 
	`sh™n⁄_îr
("Löê%d: Recovî faûed! Insmod moduÀ faûed. Exô.\n", 
__LINE__
); \

2208 } 0)

	)

2210 
	#fú°_ïûog_pba
(
sdev
, 
sb
Ë((sb)->
mö_d©a_luns
 * (sdev)->
max_avaûabÀ_groups
 * (sdev)->
logicbs_ö_siblög_eblock
 - (sb)->
logicbs_ö_ïûog
)

	)

2212 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_≥r˝u_wq
;

2214 
Õmt_lock_öô
(
m≠_èbÀ_°ru˘
 *
Õmt
);

2215 
sdisk_m≠_èbÀ_lock_öô
(
sh™n⁄_disk
 *
sdisk
);

2216 
gc_thªad_‚
(*
d©a
);

2217 
ªcovî_thªad_‚
(*
d©a
);

2218 
£t_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
, 
hód_ödex
);

2219 
˛ór_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun
, 
lun_pba
, 
hód_ödex
);

2220 
ã°_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun
, 
lun_pba
);

2221 
gë_hód_ödex_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
);

2222 
ã°_gc_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
);

2223 
ã°_gc_ªad_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
);

2224 
gë_ãm≥øtuª
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *lun_pba);

2225 
£t_ãm≥øtuª
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
, 
ãmp
);

2226 
£t_pba_√xt_hód
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
logicb_t
 
lun_pba
, 
hód
);

2227 
gë_pba_√xt_hód
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
logicb_t
 
lun_pba
);

2228 
£t_ho°_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
ﬁd
);

2229 
˛ór_ho°_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
ﬁd
);

2230 
ã°_wrôe_ö_¥o˚ss
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
);

2231 
£t_vÆid
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
);

2232 
£t_ﬁd_pba_°Æe
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
);

2233 
is_°Æe
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
);

2234 
pba_is_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
);

2235 
gë_√xt_sb
(
sh™n⁄_dev
 *
dev
, 
hód
);

2236 
Æloc_lun_pba
(
sh™n⁄_dev
 *
dev
, 
logicb64_t
 
lba
, 
hód
, 
lun_pba
 *
pba
);

2237 
buûd_d©a_°ru˘
(
sh™n⁄_dev
 *
dev
);

2238 
∑rôy_öô
(
sh™n⁄_sb
 *
sb
, 
group_ödex
, 
µa
, 
u8
 
hód
);

2239 
£t_ho°_wrôe_övÆid
(
sh™n⁄_dev
 *, 
lun_pba
 *);

2240 
£t_gc_wrôe_övÆid
(
sh™n⁄_dev
 *, 
lun_pba
 *);

2241 
ªöôülize_sb
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
);

2242 
upd©e_îa£_cou¡
(
sh™n⁄_dev
 *
dev
);

2243 
submô_gc_ªad
(
sh™n⁄_dev
 *
sdev
, 
cou¡
);

2244 
bÆ™˚_gc
(
sh™n⁄_dev
 *
sdev
, 
logicbs
);

2245 
gc_wrôe_ˇn˚l
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

2246 
sh™n⁄_lun_îr_checkög_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2247 
ªad_su•icious_bad_lun_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2248 
d©a_ªã¡i⁄_timî_èsk
(
sh™n⁄_timî_li°
 *
timî
);

2249 
wl_timî_èsk
(
sh™n⁄_timî_li°
 *
timî
);

2250 
sh™n⁄_wl_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2251 
sh™n⁄_wl_ªad_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2252 
add_sb_to_‰ì_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
√w_sb
);

2253 
ªmove_sb_‰om_‰ì_blk_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
);

2254 
put_öto_waô_c›y_li°
(
sh™n⁄_sb
 *
sb
);

2255 
sh™n⁄_sb
 *
gë_≥riod_ªad_sb
(
sh™n⁄_dev
 *
sdev
);

2256 
ˇn_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
);

2257 
ªöô_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
);

2258 
≥riod_ªad_íabÀ
(
sh™n⁄_dev
 *
sdev
);

2259 
≥riod_ªad_dißbÀ
(
sh™n⁄_dev
 *
sdev
);

2260 
≥riod_ªad_sb
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
);

2261 
do_√xt_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
);

2262 
sbs_˛ón_≥riod_ªad_d⁄e
(
sh™n⁄_dev
 *
sdev
);

2263 
check_îa£d_°©e
(
sh™n⁄_sb
 *
sb
);

2264 *
°©e_«me
(
°©e
);

2265 
should_upd©e_mi¸ocode
(
sh™n⁄_dev
 *
sdev
);

2266 
gë_upd©e_mi¸ocode
(
sh™n⁄_dev
 *
sdev
);

2267 
add_sb_îa£_cou¡î
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
);

2268 
sh™n⁄_m≠_èbÀ_de°roy
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
to_‰ìli°
);

2269 
sh™n⁄_m≠_èbÀ_ª£t
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
to_‰ìli°
);

2270 
upd©e_úq_dñay_timeout
(
sh™n⁄_timî_li°
 *
timî
);

2271 
upd©e_úq_dñay_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2274 
sb_m¨k_îr‹_lun
(
sh™n⁄_dev
 *, 
sh™n⁄_sb
 *, , );

2275 
sb_˛ór_îr‹_lun
(
sh™n⁄_dev
 *, 
sh™n⁄_sb
 *, , );

2276 
is_îr‹_lun
(
sh™n⁄_dev
 *, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
);

2277 
sb_m¨k_îr‹_lun_bad
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
);

2278 
sb_m¨k_bad_lun
(
sh™n⁄_sb
 *
sb
, 
lun
);

2279 
is_bad_lun
(
sh™n⁄_sb
 *
sb
, 
lun
);

2280 
is_°©ic_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2281 
m¨k_su≥r_block_bad
(
sh™n⁄_sb
 *
sb
);

2282 
m¨k_sb_îr_f‹_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
);

2283 
move_blks_to_îr_blks_li°
(
sh™n⁄_dev
 *
sdev
);

2284 
ªc‹d_bad_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
, 
bad_eblk
);

2285 
add_bad_eblk_to_lun_bbt
(
sh™n⁄_lun
 *
lun
, 
bad_eblk
);

2286 
eblk_is_bad_block
(
sh™n⁄_lun
 *
lun
, 
eblk
);

2287 
is_bad_block_dev
(
sh™n⁄_dev
 *
dev
, 
lun
, 
sb_ödex
);

2288 
£t_√w_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
);

2289 
£t_fuŒ_dy«mic_bad_blocks
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
);

2290 
m¨k_bad_block_dev
(
sh™n⁄_dev
 *
dev
, 
lun
, 
sb_ödex
);

2291 
ªcovî_bad_lun_bbt
(
sh™n⁄_dev
 *
sdev
, 
group_ödex
);

2292 
check_îr_blk˙t_öc
(
sh™n⁄_dev
 *
sdev
);

2293 
check_îr_blk˙t_dec
(
sh™n⁄_dev
 *
sdev
);

2294 
ªq_is_ö_a˘ive_chunks_ønge
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, *
phód
);

2295 
£t_ªad_îr‹_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

2297 
lun_ª‰esh_mbr_eblks_sync
(
sh™n⁄_lun
 *
lun
);

2300 
£t_ïûog_size
(
sh™n⁄_dev
 *
sdev
);

2301 
sh™n⁄_ªÀa£_ªbuûd_ïûogs
(
sh™n⁄_dev
 *
sdev
);

2302 
sh™n⁄_ªÀa£_ïûogs
(
sh™n⁄_dev
 *
sdev
);

2303 
sh™n⁄_Æloc_ïûogs
(
sh™n⁄_dev
 *
sdev
);

2304 
upd©e_ïûog_hód
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
);

2305 
sh™n⁄_ïûog
 *
ïûog_Æloc
(
size
, 
sh™n⁄_dev
 *
sdev
);

2306 
sb_‰ì_ïûog
(
sh™n⁄_sb
 *
sb
);

2307 
ªÀa£_a˘ive_blocks_ïûog
(
sh™n⁄_dev
 *
sdev
);

2308 
ïûog_£t_mëad©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog
 *
ïûog
, 
pba
, 
u64
 
mëad©a
);

2309 
u64
 
ïûog_gë_mëad©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog
 *
ïûog
, 
pba
);

2310 *
ïûog_gë_addr
(
sh™n⁄_ïûog
 *
ïûog
, 
logicb_idx
, 
sh™n⁄_dev
 *
sdev
);

2311 
wrôe_ïûog
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
hód
);

2312 
is_fú°_ïûog_pba
(
sh™n⁄_sb
 *
sb
, 
logicb_t
 
wr_off£t
);

2313 
is_ïûog_pba
(
sh™n⁄_sb
 *
sb
, 
logicb_t
 
wr_off£t
);

2314 
is_ïûog_∑ge_°rùe
(
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
group_ödex
);

2315 
ªåõve_sm¨t_‰om_ïûog_hód
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog_hód
 *
ïûog_hód
);

2316 
ªad_ïûog
(
sh™n⁄_sb
 *
sb
);

2317 
ªcovî_ns_d©a_‰om_ªq
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_ªque°
 *
ªq
, 
sh™n⁄_dev
 *
sdev
);

2321 
__sh™n⁄_wrôe_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
);

2322 
__sh™n⁄_îa£_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
, 
mu…i_∂™e
);

2323 
sh™n⁄_wrôe_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
);

2324 
sh™n⁄_∑rôy_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
);

2325 
sh™n⁄_ªque°
 *
make_∑rôy_ªq
(
sh™n⁄_sb
 *
sb
, 
∑rôy_lun
, sh™n⁄_ªque° *
wrôe
);

2326 
upd©e_lun£t_sq_hód
(
sh™n⁄_lun£t
 *
lun£t
);

2327 *
Æloc_logicb_buf
(
sh™n⁄_dev
 *
sdev
, 
gÂ_t
 
gÂ_mask
);

2328 
‰ì_logicb_buf
(
sh™n⁄_dev
 *
sdev
, *
addr
);

2329 
sh™n⁄_ªque°
 *
Æloc_ªq
(
gÂ_t
);

2330 
‰ì_ªq
(
sh™n⁄_ªque°
 *
ªq
);

2331 *
›code_«me
(
sh™n⁄_›code
 
›code
);

2332 
sbio_ªÀa£
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_bio
 *
sbio
);

2333 
Æl_ªq_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
);

2334 
gc_wrôe_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
);

2335 
ho°_ªq_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
);

2336 
sh™n⁄_pick_ªque°
(
sh™n⁄_dev
 *
dev
, 
limô
);

2337 
show_pick_£m_ö_debugfs
(
sh™n⁄_dev
 *
sdev
);

2338 
lun£t_pick_ªque°
(
sh™n⁄_lun£t
 *
lun£t
, 
limô
);

2339 
gc_îr‹_sb_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2340 
ho°_ªq_queue_Àngth
(
sh™n⁄_dev
 *
sdev
);

2341 
lun£t_ªq_queue_is_em±y
(
sh™n⁄_lun£t
 *
lun£t
);

2342 
add_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
);

2343 
add_ªque°_queue_èû_wôhout_lock
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
);

2344 
add_ªq_to_gc_wrôe_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
);

2345 
add_wrôe_ªq_to_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
);

2346 
add_wrôe_li°_to_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_li°_hód
 *
wrôe_li°
, 
u32
 
ªqs
, 
¥i‹ôy
);

2347 
add_lun_ªque°_queue_èû
(
sh™n⁄_lun
 *
lun
, 
sh™n⁄_ªque°
 *
ªq
);

2348 
add_adv_ªad_ªque°_li°_èû
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

2349 
put_adv_ªad_li°_to_lun_queue
(
sh™n⁄_dev
 *
sdev
);

2350 
öô_globÆ_c⁄fig_ªgs_f‹_Êashid
(
sh™n⁄_dev
 *
dev
);

2351 
£t_avaûabÀ_øid_°rùes
(
sh™n⁄_dev
 *
sdev
);

2352 
dump_b¨_•a˚
(
sh™n⁄_dev
 *
dev
);

2353 
öô_globÆ_c⁄fig_ªgs
(
sh™n⁄_dev
 *
dev
);

2354 
îa£_su≥r_block
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
‰om_gc
, 
√ed_ªöô
);

2355 
ˇlcuœã_globÆ_v¨übÀ
(
sh™n⁄_dev
 *
dev
);

2356 
£nd_dummy_ªq
(
sh™n⁄_dev
 *
sdev
, 
hód
);

2357 
£nd_dummy_ovîœp_ªq
(
sh™n⁄_dev
 *
sdev
, 
ovîwrôe
);

2358 
ªcovî_d©a_‰om_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
, *
addr
);

2359 
mod_gc_timî
(
sh™n⁄_dev
 *
sdev
, 
expúes
);

2360 
mod_fûl_chunk_timî
(
sh™n⁄_dev
 *
sdev
, 
fûl_hód
);

2361 
mod_fûl_sb_timî
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
sh™n⁄_sb
 *
sb
);

2362 
sb_fûl_g¨bage_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

2363 
c›y_mbr_to_mem‹y
(
sh™n⁄_mbr
 *
to
, sh™n⁄_mb∏*
‰om
);

2364 
åiggî_ª˛aim_waô_c›y_li°
(
sh™n⁄_dev
 *
sdev
);

2365 
sh™n⁄_de„r_timî
(
sh™n⁄_dev
 *
sdev
, 
expúes
);

2366 
fs_bio_ªad_ˇŒback
(
sh™n⁄_bio
 *
sbio
);

2367 
fs_bio_wrôe_ˇŒback
(
sh™n⁄_bio
 *
sbio
);

2368 
ˇlcuœã_n⁄Æig√d_bio_u£r_cou¡
(
sh™n⁄_bio
 *
sbio
, 
logicb_size
, 
fú°_size
);

2369 
is_cou∂e_sg
(
sh™n⁄_sg_li°_t
 *
sg
, sh™n⁄_sg_li°_à*
√xt_sg
);

2370 
£nd_Æig√d_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
);

2371 
£nd_u«lig√d_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
);

2372 
wrôe_ªque°_d⁄e
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
);

2373 
ho°_gë_hód_™d_£t_pba_èbÀ
(
sh™n⁄_dev
 *
dev
,

2374 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio_t
 *
bio
, 
sh™n⁄_ªque°
 *
ªq
);

2375 
decom¥ess_mëad©a
(
sh™n⁄_ªque°
 *
ªq
);

2376 
upd©e_d©a_ö_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
);

2377 
˛ór_©omic_¥i‹ôize_wrôe
(
sh™n⁄_dev
 *
sdev
);

2379 
ªc‹d_œãncy
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
);

2380 
sh™n⁄_have_wrôãn_ios
(
sh™n⁄_dev
 *
sdev
);

2381 
sh™n⁄_have_wrôãn_m£cs
(
sh™n⁄_dev
 *
sdev
);

2382 
sh™n⁄_have_ªad_ios
(
sh™n⁄_dev
 *
sdev
);

2383 
sh™n⁄_have_ªad_m£cs
(
sh™n⁄_dev
 *
sdev
);

2384 
ns_¥öt_œãncy_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
);

2385 
¥öt_œãncy_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
);

2386 
°¨t_¥öt_œãncy_timî
(
sh™n⁄_disk
 *
sdisk
);

2387 
°›_¥öt_œãncy_timî
(
sh™n⁄_disk
 *
sdisk
);

2389 
upd©e_ac˚ss_mode
(
sh™n⁄_dev
 *
dev
);

2390 
sh™n⁄_©èch
(
sh™n⁄_dev
 *
dev
);

2391 
sh™n⁄_dëach
(
sh™n⁄_dev
 *
dev
);

2392 
upd©e_vﬁège_ãm≥øtuª
(
sh™n⁄_dev
 *
dev
);

2393 
u32
 
ªad_£u_öfo
(
sh™n⁄_dev
 *
dev
);

2394 
sh_ö¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
);

2395 
sh_de¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
);

2396 
mem£t_m≠_èbÀ
(
sˇâî_memblock
 *
m≠_èbÀ
);

2397 
gë_lun_pba_‰om_lba
(
logicb64_t
 
lba
, 
lun_pba
 *, *
ö_ˇche
, 
sh™n⁄_disk
 *);

2398 
upd©e_m≠pög_èbÀ
(
sh™n⁄_disk
 *, 
logicb64_t
 
lba
, 
u32
 
lun
, u32 
lun_pba
);

2399 
£t_lba_d©a_ö_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
);

2400 
˛ór_lba_d©a_ö_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
);

2401 
u8
 *
ãmp_èbÀ_gë_posôi⁄
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
logicb64_t
 
lba
);

2402 
u32
 *
m≠_èbÀ_gë_posôi⁄
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
logicb64_t
 
lba
);

2403 
ˇlcuœã_physiˇl_ˇ∑côy
(
sh™n⁄_dev
 *
dev
);

2404 
check_™d_Æloc_m≠èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
);

2405 
check_™d_Æloc_Õmt
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
logicb_shi·
);

2406 
ˇlcuœã_ovî¥ovisi⁄_øã
(
sh™n⁄_dev
 *
sdev
);

2407 
lun£t_queue_dïth
(
sh™n⁄_lun£t
 *
lun£t
);

2409 
	#m≠_èbÀ_d©a
(
_lun
, 
_lun_pba
Ë((((
u32
)(_lunË& 0x3fË<< 26Ë| ((_lun_pbaË& 0x3ffffff))

	)

2410 
	#ãmp_èbÀ_d©a
(
_ãmp
, 
_lun
Ë((((_ãmpË& 0xfË<< 4Ë| (((_lunË>> 6Ë& 0xf))

	)

2412 
sh™n⁄_bio_ö_Êight
(
sh™n⁄_dev
 *
sdev
);

2413 
sh™n⁄_have_ªad_£˘‹s
(
sh™n⁄_dev
 *
sdev
);

2414 
upd©e_powî_⁄_£c⁄ds
(
sh™n⁄_dev
 *
sdev
);

2415 
døö_comm™d_queue
(
sh™n⁄_dev
 *
dev
, );

2416 
sh™n⁄_ªc⁄fig
(
sh™n⁄_dev
 *
sdev
);

2417 
sh™n⁄_ª£t
(
sh™n⁄_dev
 *
sdev
);

2418 
upd©e_io_°©i°ics
(
sh™n⁄_dev
 *
sdev
);

2419 
com∂ëe_≥ndög_ªque°
(
sh™n⁄_dev
 *
sdev
);

2420 
sh™n⁄_m≠_èbÀ_ªsize
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
logicb_shi·
);

2421 
sh™n⁄_ªsize_m≠_èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
logicb_shi·
);

2422 
sh™n⁄_Æloc_m≠_èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
);

2423 
sh™n⁄_Æloc_m≠_èbÀ_ns
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
, u32 
sdev_cou¡
, u32 
°rù_size_shi·
);

2424 
sh™n⁄_m≠_èbÀ_‰ì
(
sh™n⁄_disk
 *
sdisk
);

2425 
sh™n⁄_m≠_èbÀ_‰ì_ns
(
sh™n⁄_disk
 *
sdisk
);

2426 
sh™n⁄_memblock_poﬁ_add
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
);

2427 
sh™n⁄_memblock_poﬁ_˛ór
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
);

2428 
add_to_memblock_‰ìli°
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u8
 *
addr
);

2429 
sh™n⁄_memblock_poﬁ_öc_maxt
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
);

2430 
sh™n⁄_memblock_poﬁ_dec_maxt
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
);

2431 
sh™n⁄_memblock_poﬁ_dec_maxt_by_˙t
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
cou¡
);

2432 
sh™n⁄_öô_blk_queue
(
sh™n⁄_dev
 *
sdev
);

2433 
sh™n⁄_m≠_èbÀ_˛ór
(
m≠_èbÀ_°ru˘
 *
Õmt
);

2434 
sh™n⁄_m≠_èbÀ_dißbÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
);

2435 
sh™n⁄_m≠_èbÀ_íabÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
);

2436 
sdev_m≠_èbÀ_íabÀ
(
sh™n⁄_dev
 *
sdev
);

2437 
ªÀa£_sdev_m≠_èbÀ
(
sh™n⁄_dev
 *
sdev
);

2439 
sh™n⁄_n‹Êash_îa£
(
sh™n⁄_dev
 *
sdev
, 
u32
 
°¨t
, u32 
Àngth
);

2440 
sh™n⁄_n‹Êash_wrôe
(
sh™n⁄_dev
 *
sdev
, 
u32
 
°¨t
, u32 
Àngth
, *
d©a
);

2441 
sh™n⁄_n‹Êash_ªad
(
sh™n⁄_dev
 *
sdev
, 
u32
 
°¨t
, u32 
Àngth
, *
d©a
);

2442 
ªad_n‹Êash_öfo
(
sh™n⁄_dev
 *
sdev
);

2443 
h™dÀ_waô_pick_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

2444 
sh™n⁄_pci_ª£t_¥ï¨e
(
sh™n⁄_pci_dev_t
 *
pdev
);

2445 
sh™n⁄_pci_ª£t_föished
(
sh™n⁄_pci_dev_t
 *
pdev
);

2447 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

2448 
ölöe
 
u32
 
	$ªad_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, 
u32
 *
addr
)

2450  *
addr
;

2451 
	}
}

2453 
ölöe
 
	$wrôe_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, 
u32
 
vÆue
, u32 *
addr
)

2455 *
addr
 = 
vÆue
;

2456 
	}
}

2458 
ölöe
 
u32
 
	$ªad_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, c⁄° vﬁ©ûê
__iomem
 *
addr
)

2460 
u32
 
vÆue
;

2462 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

2463 
vÆue
 = 
	`sh™n⁄_ªadl
(
addr
);

2464 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

2466  
vÆue
;

2467 
	}
}

2469 
ölöe
 
	$wrôe_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, 
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
)

2471 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

2472 
	`sh™n⁄_wrôñ
(
vÆue
, 
addr
);

2473 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

2474 
	}
}

2477 
ölöe
 
u32
 
	$ªad_øw_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, c⁄° vﬁ©ûê
__iomem
 *
addr
)

2479 
u32
 
vÆue
;

2481 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

2482 
vÆue
 = 
	`sh™n⁄_øw_ªadl
(
addr
);

2483 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

2485  
vÆue
;

2486 
	}
}

2488 
ölöe
 
	$wrôe_øw_ªg_ß„
(
sh™n⁄_dev
 *
sdev
, 
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
)

2490 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

2491 
	`sh™n⁄_øw_wrôñ
(
vÆue
, 
addr
);

2492 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

2493 
	}
}

2496 
c›y_poﬁ_öfo
(
sh™n⁄_poﬁ_öfo
 *
to
, sh™n⁄_poﬁ_öfÿ*
‰om
);

2497 
sh_ö¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *);

2498 
sh_de¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *);

2499 
öô_sdev_ö_poﬁ
(
sh™n⁄_dev
 *
sdev
);

2500 
ªÀa£_poﬁ_°ru˘
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2501 
¸óã_poﬁ
(
¨g
);

2502 
ªcovî_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
±r
);

2503 
sh™n⁄_©èch_ns
(
sh™n⁄_«me•a˚
 *
ns
);

2504 
sh™n⁄_dëach_ns
(
sh™n⁄_«me•a˚
 *
ns
);

2505 
sh™n⁄_poﬁ_©èch
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2506 
sh™n⁄_poﬁ_dëach
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2507 
öô_«me•a˚s
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2508 
sh™n⁄_bio_ö_Êight_ns
(
sh™n⁄_«me•a˚
 *
ns
);

2509 
check_•a˚_ußge
(
sh™n⁄_dev
 *
sdev
);

2510 
£t_poﬁ_h¨d_queue_limô
(
sh™n⁄_poﬁ
 *
•
, );

2511 
•oﬁ_upd©e_ac˚ss_mode
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2512 
ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2513 
__£t_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
›
);

2514 
£t_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
›
);

2515 
check_sbio_is_ovîwrôed
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_«me•a˚
 *
ns
);

2516 
sh™n⁄_«me•a˚
 *
ns_gë_ª„ªn˚
(shannon_namespace *);

2517 
ns_put_ª„ªn˚
(
sh™n⁄_«me•a˚
 *
ns
);

2518 
sh™n⁄_poﬁ
 *
•oﬁ_gë_ª„ªn˚
(shannon_pool *);

2519 
•oﬁ_put_ª„ªn˚
(
sh™n⁄_poﬁ
 *);

2520 
upd©e_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
);

2521 
ns_upd©e_io_°©i°ics
(
sh™n⁄_«me•a˚
 *
ns
);

2522 
upd©e_ns_d©a
(
sh™n⁄_«me•a˚
 *
ns
);

2523 
c›y_ns_d©a
(
sh™n⁄_ns_d©a
 *
to
, sh™n⁄_ns_d©®*
‰om
);

2525 
ölöe
 
	$put_•oﬁ_™d_ns
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
sh™n⁄_«me•a˚
 *
ns
)

2527 i‡(
•oﬁ
) {

2528 i‡(
ns
)

2529 
	`ns_put_ª„ªn˚
(
ns
);

2530 
	`•oﬁ_put_ª„ªn˚
(
•oﬁ
);

2532 
	}
}

2535 
ölöe
 
	$check_°©us
(
°©us
)

2537  (
°©us
 & 0x41) != 0x40;

2538 
	}
}

2540 
ölöe
 
	$check_cmd_timeout
(
°©us
)

2542  (
°©us
 == 0xFE);

2543 
	}
}

2546 
sh™n⁄_öô_h¨dw¨e_g4
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
);

2547 
ch™ge_öãºu±_öto_msi_mode
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
);

2548 
sh™n⁄_dißbÀ_msi
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
);

2549 
lun_£t_„©uª_gíîÆ_g4
(
sh™n⁄_dev
 *
sdev
, 
„©uª_cfg
 *
cfg
);

2550 
sh™n⁄_n‹Êash_îa£_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
);

2551 
sh™n⁄_n‹Êash_wrôe_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
);

2552 
sh™n⁄_n‹Êash_ªad_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
, u32 
x„r_size
);

2553 
ªad_bbt_öfo_g4
(
sh™n⁄_dev
 *
sdev
);

2554 
™Æyze_bbt_öfo_g4
(
sh™n⁄_dev
 *
sdev
);

2555 
upd©e_poﬁ_öfo_g4
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_poﬁ
 *
•oﬁ
);

2558 
	#NOR_PAGE_SIZE
 4096

	)

2559 
n‹Êash_ªad_ö_4k_mode
(
sh™n⁄_dev
 *
sdev
, 
u32
 
addr
, u32 
Àngth
, *
d©a
);

2560 
n‹Êash_wrôe_ö_4k_mode
(
sh™n⁄_dev
 *
sdev
, 
u32
 
addr
, u32 
Àngth
, *
d©a
);

2561 
gë_n‹_∑ge_ödex
(
sh™n⁄_dev
 *
sdev
);

2562 
sh™n⁄_öô_h¨dw¨e_g5
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
);

2563 
gë_mbr_‰om_n‹
(
sh™n⁄_dev
 *
sdev
);

2564 
com∂ëi⁄_pﬁl_g5
(
sh™n⁄_dev
 *
dev
, 
dw‹d_ödex
);

2565 
h™dÀ_com∂ëi⁄_èskÀt_g5
(
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
);

2566 
ch™ge_öãºu±_öto_msix_mode
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
);

2567 
sh™n⁄_dißbÀ_msix
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
);

2568 
sh™n⁄_n‹Êash_îa£_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
);

2569 
sh™n⁄_n‹Êash_wrôe_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
);

2570 
sh™n⁄_n‹Êash_ªad_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
);

2571 
£t_ecc_‹g™iz©i⁄
(
sh™n⁄_dev
 *
sdev
);

2572 
ªad_bbt_öfo_g5
(
sh™n⁄_dev
 *
sdev
);

2573 
™Æyze_bbt_öfo_g5
(
sh™n⁄_dev
 *
sdev
);

2574 
ª‰esh_mbr_g5
(
sh™n⁄_dev
 *
sdev
, 
˛ón_poﬁ
);

2575 
sh™n⁄_£t_˘æ_∑øm
(
sh™n⁄_dev
 *
sdev
);

2576 
ªad_poﬁ_öfo_g5
(
sh™n⁄_dev
 *
sdev
);

2577 
upd©e_n‹_ödex_node
(
sh™n⁄_dev
 *
sdev
);

2578 
upd©e_poﬁ_öfo_g5
(
sh™n⁄_dev
 *
sdev
, 
˛ón_poﬁ
);

2579 
˛ón_poﬁ_öfo_g5
(
sh™n⁄_dev
 *
sdev
);

2580 
sh™n⁄_pﬁlög_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
, 
logicb_t
 
lun_pba
, 
u8
 
©å
, u8 
hód
);

2581 
do_¢≠_ªad
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
fú°_ªq
, 
∂™es
);

2582 
¢≠_ªad_dißbÀ
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_lun
 *
lun
, 
f‹˚
, 
has_lock
);

2583 
gë_codew‹d_addr
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
);

2584 
gë_£˘‹s_cou¡
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
);

2585 
Æloc_bbt_n‹_°ru˘uª
(
sh™n⁄_dev
 *
sdev
);

2586 
ªÀa£_bbt_n‹_°ru˘uª
(
sh™n⁄_dev
 *
sdev
);

2587 
víd‹_mode_cmd_£quí˚
(
sh™n⁄_dev
 *
sdev
);

2588 
√ed_víd‹_mode_cmd
(
sh™n⁄_dev
 *
sdev
);

2591 
sh™n⁄_¥e„tch_öô
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
u32
 
logicb_size
);

2592 
sh™n⁄_¥e„tch_de°roy
(
sh™n⁄_¥e„tch
 *
¥e„tch
);

2593 
gë_lba_d©a_‰om_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
);

2594 
¥e„tch_check
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
);

2595 
ö¸ó£_ˇche_miss
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
);

2596 
dr›_Æl_ˇche_löe
(
sh™n⁄_dev
 *
sdev
);

2597 
add_ªq_to_¥e„tch_li°
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
);

2598 
¥e„tch_thªad_‚
(*
d©a
);

2601 
bufq_queue_dïth
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
);

2602 
bufq_åaffic_jam
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
);

2605 #ifde‡
CONFIG_SHANNON_DEBUG


2606 
add_to_gc_°©e_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
);

2607 
ªc‹d_pba_èbÀ
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
lun
);

2608 
ªmove_‰om_gc_°©e_li°
(
sh™n⁄_sb
 *
sb
);

2609 
ªÀa£_blocks_gc_°©e
(
sh™n⁄_dev
 *
sdev
);

2610 
wrôe_chunk_is_vÆid
(
sh™n⁄_ªque°
 *
ªq
, 
sh™n⁄_dev
 *
sdev
);

2611 
£t_ªq_debug_èg
(
sh™n⁄_ªque°
 *, , );

2612 
dump_Æl_blocks
(
sh™n⁄_dev
 *
dev
);

2613 
sh™n⁄_debugfs_öô
(
sh™n⁄_dev
 *
dev
);

2614 
sh™n⁄_debugfs_˛ónup
(
sh™n⁄_dev
 *);

2615 
check_vÆid_∑ges
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
);

2616 
add_to_gc_°©e_li°
(
sh™n⁄_dev
 *, 
sh™n⁄_sb
 *);

2618 
ölöe
 
	$add_to_gc_°©e_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
){
	}
}

2619 
ölöe
 
	$ªc‹d_pba_èbÀ
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
lun
){
	}
}

2620 
ölöe
 
	$ªmove_‰om_gc_°©e_li°
(
sh™n⁄_sb
 *
sb
){
	}
}

2621 
ölöe
 
	$ªÀa£_blocks_gc_°©e
(
sh™n⁄_dev
 *
sdev
){
	}
}

2622 
ölöe
 
	$wrôe_chunk_is_vÆid
(
sh™n⁄_ªque°
 *
ªq
, 
sh™n⁄_dev
 *
sdev
){ 1;
	}
}

2623 
ölöe
 
	$£t_ªq_debug_èg
(
sh™n⁄_ªque°
 *
ªq
, 
èg
, 
i
){
	}
}

2624 
ölöe
 
	$dump_Æl_blocks
(
sh™n⁄_dev
 *
dev
){
	}
}

2625 
ölöe
 
	$sh™n⁄_debugfs_öô
(
sh™n⁄_dev
 *
dev
){ 0;
	}
}

2626 
ölöe
 
	$sh™n⁄_debugfs_˛ónup
(){
	}
}

2627 
ölöe
 
	$check_vÆid_∑ges
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
Ë{
	}
}

2630 #ifde‡
CONFIG_SHANNON_DEBUG_CDEV


2631 
bufq_comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
);

2632 
bufq_comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
);

2633 
comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
);

2634 
comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
);

2635 
com∂ëi⁄_cdev_öô
(
sh™n⁄_dev
 *
dev
);

2636 
com∂ëi⁄_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
);

2637 
pba_èbÀ_cdev_öô
(
sh™n⁄_dev
 *
dev
, 
pba_èbÀ_size
);

2638 
pba_èbÀ_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
);

2639 
Õmt_cdev_öô
(
sh™n⁄_disk
 *
sdisk
);

2640 
Õmt_cdev_exô
(
sh™n⁄_disk
 *
sdisk
);

2641 
ãmp_èbÀ_cdev_öô
(
sh™n⁄_disk
 *
sdisk
);

2642 
ãmp_èbÀ_cdev_exô
(
sh™n⁄_disk
 *
sdisk
);

2643 
ïûog_cdev_öô
(
sh™n⁄_dev
 *
dev
);

2644 
ïûog_cdev_exô
(
sh™n⁄_dev
 *
dev
);

2645 
c›y_ïûog_buf
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
, 
sh™n⁄_ïûog
 *
ïûog
);

2647 
ölöe
 
	$bufq_comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
){ 0;
	}
}

2648 
ölöe
 
	$bufq_comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
){
	}
}

2649 
ölöe
 
	$comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
){ 0;
	}
}

2650 
ölöe
 
	$comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
){
	}
}

2651 
ölöe
 
	$com∂ëi⁄_cdev_öô
(
sh™n⁄_dev
 *
dev
){ 0;
	}
}

2652 
ölöe
 
	$com∂ëi⁄_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
){
	}
}

2653 
ölöe
 
	$pba_èbÀ_cdev_öô
(
sh™n⁄_dev
 *
dev
, 
pba_èbÀ_size
){ 0;
	}
}

2654 
ölöe
 
	$pba_èbÀ_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
){
	}
}

2655 
ölöe
 
	$Õmt_cdev_öô
(
sh™n⁄_disk
 *
sdisk
){ 0;
	}
}

2656 
ölöe
 
	$Õmt_cdev_exô
(
sh™n⁄_disk
 *
sdisk
){
	}
}

2657 
ölöe
 
	$ãmp_èbÀ_cdev_öô
(
sh™n⁄_disk
 *
sdisk
){ 0;
	}
}

2658 
ölöe
 
	$ãmp_èbÀ_cdev_exô
(
sh™n⁄_disk
 *
sdisk
){
	}
}

2659 
ölöe
 
	$ïûog_cdev_öô
(
sh™n⁄_dev
 *
dev
){ 0;
	}
}

2660 
ölöe
 
	$ïûog_cdev_exô
(
sh™n⁄_dev
 *
dev
){
	}
}

2661 
ölöe
 
	$c›y_ïûog_buf
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
, 
sh™n⁄_ïûog
 *
ïûog
Ë{
	}
}

2664 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


2665 
m¨k_Áke_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2666 
is_Áke_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2667 
m¨k_Áke_cmd_timeout_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2668 
is_Áke_cmd_timeout_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2669 
m¨k_Áke_rd_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2670 
is_Áke_rd_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
);

2671 
m¨k_Áke_wr_bad_lu≈∑
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
µa
);

2672 
is_Áke_wr_bad_lu≈∑
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
µa
);

2673 
m¨k_Áke_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
);

2674 
is_Áke_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
);

2675 
m¨k_Áke_rd_bad_lu≈ba_øidmuãx
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
);

2676 
m¨k_Áke_î_bad_block
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
blk
);

2677 
is_Áke_î_bad_block
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
blk
);

2678 
m¨k_Áke_twö_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
, 
hód_ödex
);

2679 
is_Áke_twö_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
, 
hód_ödex
);

2680 
upd©e_Áke_∑âîn
(
sh™n⁄_dev
 *
sdev
, 
√xt_sb
, 
hód_ödex
);

2683 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

2684 
	~"sh™n⁄_emu.h
"

2686 
	#MAX_LOGICBS_IN_PAGE
 16

	)

2688 
emu_lun_amou¡
;

2689 
emu_eblocks_ö_lun
;

2690 
emu_∑ges_ö_eblock
;

2691 
emu_«nd_∑ge_shi·
;

2692 
emu_oob_size
;

2693 
emu_∂™e_‹dî
;

2694 
emu_logicb_shi·
;

2695 
emu_logicbs_ö_∑ge
;

2696 
emu_ch™√ls
;

2698 
sh™n⁄_emu_lun
 *
emu_luns
;

2702 
	#__echo_ö
 
	`debugs0
("íãr.\n")

	)

2703 
	#__echo_out
 
	`debugs0
("exô.\n")

	)

2705 
	#__echo_ö


	)

2706 
	#__echo_out


	)

	@shannon.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

16 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

17 
__©åibuã_u£d__


18 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

197 c⁄° 
	g__moduÀ_dïíds
[]

198 
__©åibuã_u£d__


199 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

202 
MODULE_ALIAS
("pci:v000010EEd00006024sv*sd*bc*sc*i*");

203 
MODULE_ALIAS
("pci:v00001CB0d00000265sv*sd*bc*sc*i*");

204 
MODULE_ALIAS
("pci:v00001CB0d00000275sv*sd*bc*sc*i*");

205 
MODULE_ALIAS
("pci:v00001CB0d00001275sv*sd*bc*sc*i*");

206 
MODULE_ALIAS
("pci:v00001CB0d00002275sv*sd*bc*sc*i*");

207 
MODULE_ALIAS
("pci:v00001CB0d00001285sv*sd*bc*sc*i*");

208 
MODULE_ALIAS
("pci:v00001CB0d00003275sv*sd*bc*sc*i*");

209 
MODULE_ALIAS
("pci:v00001CB0d000025A5sv*sd*bc*sc*i*");

210 
MODULE_ALIAS
("pci:v00001CB0d000035A5sv*sd*bc*sc*i*");

212 
MODULE_INFO
(
§cvîsi⁄
, "D4A115C74483EA220837F66");

	@shannon_512.c

2 
lba_li°
 *
	$Æloc_lba_li°
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
)

4 
lba_li°
 *lba_list;

5 
ªåy
:

6 
lba_li°
 = 
	`sh™n⁄_kzÆloc
((*lba_li°), 
GFP_ATOMIC
);

7 i‡(
lba_li°
 =
NULL
) {

8 
	`sh™n⁄_w¨n
("allocateÇewÜba_list failed.\n");

9 
ªåy
;

11 
	`SHANNON_INIT_LIST_HEAD
(&
lba_li°
->
li°
);

12 
	`SHANNON_INIT_LIST_HEAD
(&
lba_li°
->
ªq_li°
);

13 
	`SHANNON_INIT_LIST_HEAD
(&
lba_li°
->
waô_li°
);

14 
lba_li°
->
sdisk
 = sdisk;

15 
lba_li°
->
lba
 =Üba;

16 
lba_li°
->
°©us
 = 
LBA_READING
;

17 
	`sh™n⁄_•ö_lock_öô
(&
lba_li°
->
lba_lock
);

18  
lba_li°
;

19 
	}
}

21 
	$‰ì_lba_li°
(
lba_li°
 *lba_list)

23 
	`BUG_ON
(
lba_li°
 =
NULL
);

24 
	`sh™n⁄_k‰ì
(
lba_li°
);

25 
	}
}

27 
	$as£mbÀ_rc_ªad_ªq_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

29 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

30 
lba_li°
 *lba_li° = (lba_li° *)
sbio
->
d©a2
;

31 
sh™n⁄_disk
 *
sdisk
 = 
lba_li°
->sdisk;

32 
sh™n⁄_ªque°
 *
ªq
, *
p
, *
tmp
;

33 
off£t
, 
ödex
 = 
lba_li°
->
lba
 % 
RMW_LIST_COUNT
;

35 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_READ
][
ödex
]);

36 
	`sh™n⁄_li°_dñ_öô
(&
lba_li°
->
li°
);

37 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_READ
][
ödex
]);

39 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

40 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

41 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

42 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

43 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

44 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

45 
ªq
->
ªcovî_buf
 = 
NULL
;

47 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

48 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

49 
__func__
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

51 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

52 
lba_li°
->
°©us
 = 
LBA_LOCKED
;

53 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

54 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
p
, 
tmp
, &
lba_li°
->
ªq_li°
, 
li°
) {

55 
	`sh™n⁄_li°_dñ_öô
(&
p
->
li°
);

56 
p
->
_ecc
 = 
ªq
->_ecc;

57 
p
->
sbio
->
°©us
 |= sbio->status;

58 
off£t
 = 
p
->
°¨t_off£t
 % 
sdev
->
logicb_size
;

59 
	`sh™n⁄_mem˝y
(
p
->
vút_addr
, 
ªq
->vút_add∏+ 
off£t
,Ö->
Àngth
);

60 
	`sbio_ªÀa£
(
sdev
, 
p
->
sbio
);

62 
	`‰ì_lba_li°
(
lba_li°
);

63 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

64 
	`‰ì_ªq
(
ªq
);

65 
	`‰ì_sbio
(
sbio
);

66 
	}
}

68 
	$as£mbÀ_rc_ªad_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
lba_li°
 *lba_list)

70 
sh™n⁄_bio
 *
sbio
;

71 
sh™n⁄_ªque°
 *
ªq
;

72 
sh™n⁄_sb
 *
sb
;

73 
lun
, 
ªt
, 
ö_ˇche
;

75 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

76 
sbio
->
d©a
 = 
sdev
;

77 
sbio
->
d©a2
 = 
lba_li°
;

78 
	`£t_sbio_debug_èg
(
sbio
, 
ASSEMBLE_READ_TAG
);

79 
sbio
->
ˇŒback
 = 
as£mbÀ_rc_ªad_ªq_ˇŒback
;

80 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

82 
sbio
->
logicbs
 = 1;

83 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

84 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

85 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

87 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

88 
	`£t_ªq_debug_èg
(
ªq
, 
ASSEMBLE_READ_TAG
, 0);

89 
ªq
->
sbio
 = sbio;

90 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

91 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

92 
ªq
->
£ndî
 = 
FROM_HOST
;

93 
ªq
->
›code
 = 
sh_cmd_ªad
;

94 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

95 
ªq
->
ns_id
 = 
lba_li°
->ns_id;

96 
ªq
->
ns_£q_num
 = 
lba_li°
->ns_seq_num;

97 
ªq
->
lba
 = 
lba_li°
->lba;

98 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

99 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

100 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

101 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

102 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, &
ö_ˇche
, 
sdisk
);

103 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

104 
lba_li°
->
pba
.
lun
 = 
ªq
->pba.lun;

105 
lba_li°
->
pba
.
lun_pba
 = 
ªq
->pba.lun_pba;

106 i‡(
ªt
 < 0) {

107 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0,Ñeq->
Àngth
);

108 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

110 } i‡(
ö_ˇche
) {

111 i‡(
	`add_ªq_to_¥e„tch_li°
(
sdisk
, 
ªq
)) {

112 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
¥e„tch_thªad
);

116 
	`ö¸ó£_ˇche_miss
(
sdisk
, 
ªq
);

117 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

118 
ªq
->
£q_num
 = 
sb
->seq_num;

119 
lun
 = 
ªq
->
pba
.lun;

120 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

121 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, 1);

124 
	}
}

126 
as£mbÀ_rmw_ªad_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
lba_li°
 *lba_list);

127 
ª£nd_as£mbÀ_rmw_ªad_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
);

128 
	$as£mbÀ_rmw_wrôe_ªq_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

130 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

131 
lba_li°
 *lba_li° = (lba_li° *)
sbio
->
d©a2
;

132 
sh™n⁄_disk
 *
sdisk
 = 
lba_li°
->sdisk;

133 
sh™n⁄_sb
 *
sb
;

134 
sh™n⁄_ªque°
 *
ªq
, *
p
, *
tmp
;

135 
lun_pba
 
pba
;

136 
ödex
 = 
lba_li°
->
lba
 % 
RMW_LIST_COUNT
;

138 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

139 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

140 
ªq
->
°©e
 = 
REQ_CALLBACK
;

141 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

142 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

143 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

144 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

145 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
pba
, 
NULL
, 
sdisk
);

146 i‡((
ªq
->
ﬁd_pba
.
lun
 !
pba
.lunË|| (ªq->ﬁd_pba.
lun_pba
 !=Öba.lun_pba)) {

148 
	`debugs1
("lba=%ld is overlapped, old:lun=%d,Üun_pba=%d,Çew:lun=%d,lun_pba=%d.\n",

149 
ªq
->
lba
,Ñeq->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
, 
pba
.lun,Öba.lun_pba);

151 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

152 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

154 
	`sh™n⁄_îr
("assemble_rmw_write_req: sbio->status=0x%x,Üba=%d,Üun=%d,Üun_pba=%d.\n", \

155 
sbio
->
°©us
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

156 
	`sh™n⁄_©omic_sub
(1, &
sb
->
ö_wrôe_logicbs
);

159 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
p
, 
tmp
, &
lba_li°
->
ªq_li°
, 
li°
) {

160 
	`sh™n⁄_li°_dñ_öô
(&
p
->
li°
);

161 
p
->
sbio
->
°©us
 |= sbio->status;

162 
p
->
°©e
 = 
REQ_DONE
;

163 i‡(
	`is_waô_pick_ªq
(
p
))

164 
	`h™dÀ_waô_pick_ªq
(
sdev
, 
p
);

165 
	`sbio_ªÀa£
(
sdev
, 
p
->
sbio
);

167 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

168 
	`‰ì_ªq
(
ªq
);

169 
	`‰ì_sbio
(
sbio
);

171 i‡(
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
)) {

172 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_WRITE
][
ödex
]);

173 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

174 i‡(
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
))

175 
	`sh™n⁄_li°_dñ_öô
(&
lba_li°
->
li°
);

176 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

177 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_WRITE
][
ödex
]);

179 i‡(!
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
)) {

180 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

181 
	`sh™n⁄_li°_add_èû
(&
lba_li°
->
ªq_li°
, &lba_li°->
waô_li°
);

182 
	`sh™n⁄_li°_dñ_öô
(&
lba_li°
->
waô_li°
);

183 
lba_li°
->
°©us
 = 
LBA_READING
;

184 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

185 
	`as£mbÀ_rmw_ªad_ªq
(
sdev
, 
sdisk
, 
lba_li°
);

187 
	`‰ì_lba_li°
(
lba_li°
);

188 
	}
}

190 
	$as£mbÀ_rmw_modify_ªq_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

192 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

193 
lba_li°
 *lba_li° = (lba_li° *)
sbio
->
d©a2
;

194 
sh™n⁄_disk
 *
sdisk
 = 
lba_li°
->sdisk;

195 
sh™n⁄_ªque°
 *
ªq
, *
p
, *
tmp
;

196 
off£t
, 
fûl_hód
 = 0, 
ªt
;

198 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
)

199 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 10);

201 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

202 
lba_li°
->
°©us
 = 
LBA_LOCKED
;

203 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

205 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

206 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

207 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

208 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

209 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

210 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

211 
ªq
->
ªcovî_buf
 = 
NULL
;

213 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

214 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

215 
__func__
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

217 
ªq
->
°©e
 = 
REQ_CALLBACK
;

219 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
))) {

221 
ªq
->
°©e
 = 
REQ_DONE
;

222 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

223 
‰ì
;

226 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
lba_li°
->
ªq_li°
, 
li°
) {

227 
off£t
 = 
p
->
°¨t_off£t
 % 
sdev
->
logicb_size
;

228 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
 + 
off£t
, 
p
->vút_addr,Ö->
Àngth
);

231 
sbio
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

232 
sbio
->
ˇŒback
 = 
as£mbÀ_rmw_wrôe_ªq_ˇŒback
;

233 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

234 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

235 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
 * sbio->
logicbs
, 
SHANNON_DMA_TODEVICE
);

236 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

237 
	`sh™n⁄_w¨n
("shannon_dma_map_singleÉrror.\n");

238 
	`ª£nd_as£mbÀ_rmw_ªad_ªq
(
sdev
, 
sdisk
, 
sbio
);

242 
ªq
->
›code
 = 
sh_cmd_wrôe
;

243 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

244 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

245 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

246 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

247 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

248 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
ﬁd_pba
, 
NULL
, 
sdisk
);

249 i‡((
ªq
->
ﬁd_pba
.
lun
 !ªq->
pba
.lunË|| (ªq->ﬁd_pba.
lun_pba
 !=Ñeq->pba.lun_pba)) {

250 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

251 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sbio->
logicbs
 * sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

252 
	`sh™n⁄_öfo
("%s():Çs_id=%d,Üba=0x%lx,Üun=%d,Üun_pba=0x%x.Üpmt:lun=%d,Üun_pba=0x%x.\n",

253 
__func__
, 
lba_li°
->
ns_id
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,

254 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
);

255 i‡(
ªt
 == 0) {

256 
sh™n⁄_sb
 *
sb
;

257 
sb
 = 
sdev
->
sbs
 + 
ªq
->
ﬁd_pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

258 
	`sh™n⁄_öfo
("%s():Çs_id=%d,Üba=0x%lx,Ñeq->seq_num=%ld,Üpmt: sb->seq_num=%ld.\n",

259 
__func__
, 
lba_li°
->
ns_id
, 
ªq
->
lba
,Ñeq->
£q_num
, 
sb
->seq_num);

261 
	`ª£nd_as£mbÀ_rmw_ªad_ªq
(
sdev
, 
sdisk
, 
sbio
);

264 
	`ho°_gë_hód_™d_£t_pba_èbÀ
(
sdev
, 
sdisk
, 
sbio
->
bio
, 
ªq
);

265 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

267 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

269 #ifde‡
CONFIG_SHANNON_STATISTICS


270 
	`sh™n⁄_©omic_add
(
sbio
->
logicbs
, &
sdev
->
‰om_ho°
);

272 i‡((
ªq
->
hód
 & 
HEAD_INDEX_MASK
Ë=
HOT_INDEX
)

273 
fûl_hód
 |1 << 
HOT_INDEX
;

275 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


276 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

278 
fûl_hód
 |1 << 
COLD_INDEX
;

280 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
sdisk
->
¥i‹ôy
);

281 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

282 
	`mod_fûl_chunk_timî
(
sdev
, 
fûl_hód
);

283 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
) {

284 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 4);

288 
‰ì
:

289 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
p
, 
tmp
, &
lba_li°
->
ªq_li°
, 
li°
) {

290 
	`sh™n⁄_li°_dñ_öô
(&
p
->
li°
);

291 
p
->
sbio
->
°©us
 |= sbio->status;

292 
p
->
°©e
 = 
REQ_DONE
;

293 
	`sbio_ªÀa£
(
sdev
, 
p
->
sbio
);

295 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

296 
	`‰ì_ªq
(
ªq
);

297 
	`‰ì_sbio
(
sbio
);

299 i‡(
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
)) {

300 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_WRITE
][
lba_li°
->
lba
 % 
RMW_LIST_COUNT
]);

301 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

302 i‡(
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
))

303 
	`sh™n⁄_li°_dñ_öô
(&
lba_li°
->
li°
);

304 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

305 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[
RMW_WRITE
][
lba_li°
->
lba
 % 
RMW_LIST_COUNT
]);

307 i‡(!
	`sh™n⁄_li°_em±y
(&
lba_li°
->
waô_li°
)) {

308 
	`sh™n⁄_•ö_lock_bh
(&
lba_li°
->
lba_lock
);

309 
	`sh™n⁄_li°_add_èû
(&
lba_li°
->
ªq_li°
, &lba_li°->
waô_li°
);

310 
	`sh™n⁄_li°_dñ_öô
(&
lba_li°
->
waô_li°
);

311 
lba_li°
->
°©us
 = 
LBA_READING
;

312 
	`sh™n⁄_•ö_u∆ock_bh
(&
lba_li°
->
lba_lock
);

313 
	`as£mbÀ_rmw_ªad_ªq
(
sdev
, 
sdisk
, 
lba_li°
);

315 
	`‰ì_lba_li°
(
lba_li°
);

316 
	}
}

318 
	$ª£nd_as£mbÀ_rmw_ªad_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
)

320 
sh™n⁄_ªque°
 *
ªq
;

321 
sh™n⁄_sb
 *
sb
;

322 
lun
, 
ªt
, 
ö_ˇche
;

324 
ªm≠
:

325 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
 * sbio->
logicbs
, 
SHANNON_DMA_FROMDEVICE
);

326 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

327 
	`sh™n⁄_w¨n
("shannon_dma_map_singleÉrror.\n");

328 
	`sh™n⁄_m¶ìp
(1);

329 
ªm≠
;

332 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

333 
	`£t_sbio_debug_èg
(
sbio
, 
RESEND_RMW_READ_TAG
);

334 
sbio
->
ˇŒback
 = 
as£mbÀ_rmw_modify_ªq_ˇŒback
;

335 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

336 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

338 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

339 
ªq
->
ªªad
 = 0;

340 
ªq
->
ªcovî_buf
 = 
NULL
;

341 
ªq
->
_ecc
 = 0;

342 
ªq
->
_mëad©a
 = 0;

343 
ªq
->
›code
 = 
sh_cmd_ªad
;

344 
	`£t_ªq_debug_èg
(
ªq
, 
RESEND_RMW_READ_TAG
, 0);

345 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

346 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

347 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

348 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

349 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, &
ö_ˇche
, 
sdisk
);

350 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

351 i‡(
ªt
 < 0) {

352 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0,Ñeq->
Àngth
);

353 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

355 } i‡(
ö_ˇche
) {

356 i‡(
	`add_ªq_to_¥e„tch_li°
(
sdisk
, 
ªq
)) {

357 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
¥e„tch_thªad
);

361 
	`ö¸ó£_ˇche_miss
(
sdisk
, 
ªq
);

362 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

363 
ªq
->
£q_num
 = 
sb
->seq_num;

364 
lun
 = 
ªq
->
pba
.lun;

365 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

366 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, 1);

369 
	}
}

372 
	$as£mbÀ_rmw_ªad_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
lba_li°
 *lba_list)

374 
sh™n⁄_bio
 *
sbio
;

375 
sh™n⁄_ªque°
 *
ªq
;

376 
sh™n⁄_sb
 *
sb
;

377 
lun
, 
ªt
, 
ö_ˇche
;

379 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

380 
sbio
->
d©a
 = 
sdev
;

381 
sbio
->
d©a2
 = 
lba_li°
;

382 
	`£t_sbio_debug_èg
(
sbio
, 
ASSEMBLE_RMW_READ_TAG
);

383 
sbio
->
ˇŒback
 = 
as£mbÀ_rmw_modify_ªq_ˇŒback
;

384 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

385 
sbio
->
ns_id
 = 
lba_li°
->ns_id;

386 
sbio
->
ns_£q_num
 = 
lba_li°
->
ns_id
;

387 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

389 
sbio
->
logicbs
 = 1;

390 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

391 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

392 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

394 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

395 
	`£t_ªq_debug_èg
(
ªq
, 
ASSEMBLE_RMW_READ_TAG
, 0);

396 
ªq
->
sbio
 = sbio;

397 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

398 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

399 
ªq
->
£ndî
 = 
FROM_HOST
;

400 
ªq
->
›code
 = 
sh_cmd_ªad
;

401 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

402 
ªq
->
ns_id
 = 
lba_li°
->ns_id;

403 
ªq
->
ns_£q_num
 = 
lba_li°
->ns_seq_num;

404 
ªq
->
lba
 = 
lba_li°
->lba;

405 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

406 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

407 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

408 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

409 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, &
ö_ˇche
, 
sdisk
);

410 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

411 i‡(
ªt
 < 0) {

412 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0,Ñeq->
Àngth
);

413 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

415 } i‡(
ö_ˇche
) {

416 i‡(
	`add_ªq_to_¥e„tch_li°
(
sdisk
, 
ªq
)) {

417 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
¥e„tch_thªad
);

421 
	`ö¸ó£_ˇche_miss
(
sdisk
, 
ªq
);

422 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

423 
ªq
->
£q_num
 = 
sb
->seq_num;

424 
lun
 = 
ªq
->
pba
.lun;

425 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

426 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, 1);

429 
	}
}

431 
	$n⁄Æig√d_ªad_bio_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

433 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

434 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

436 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


437 
	`sh™n⁄_©omic_dec
(&
sdev
->
ªad_bios
);

439 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

440 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

441 i‡(
ªq
->
Àngth
 =
sdev
->
logicb_size
) {

442 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

443 i‡(
ªq
->
vút_addr_2
)

444 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

446 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

447 
fú°_size
 = 
sdev
->
logicb_size
 - (()
ªq
->
vút_addr
 & (sdev->logicb_size - 1));

448 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
fú°_size
);

449 i‡(
fú°_size
 < 
sdev
->
logicb_size
)

450 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
,Ñeq->
ªcovî_buf
 + 
fú°_size
, 
sdev
->
logicb_size
 - first_size);

451 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

453 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

454 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

455 
__func__
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

457 
	`‰ì_ªq
(
ªq
);

460 
	`sh™n⁄_com∂ëe_fs_io
(
sdev
->
sdisk
.
ho°d©a
, sdev->sdisk.
gd
, 
sbio
);

461 i‡(
sbio
->
sg_cou¡
)

462 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

463 
	`‰ì_sbio
(
sbio
);

464 
	}
}

466 
	$add_ªq_to_rc_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

468 
lba_li°
 *
p
, *
√w
 = 
NULL
;

469 
ödex
 = 
ªq
->
lba
 % 
RMW_LIST_COUNT
;

470 
lun_pba
 
pba
;

472 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

473 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
pba
, 
NULL
, 
sdisk
);

474 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

475 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[0][
ödex
]);

476 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdisk
->
rmw_li°
[0][
ödex
], 
li°
) {

477 i‡(
p
->
lba
 =
ªq
->lba) {

478 i‡((
p
->
pba
.
lun
 =pba.lunË&& (p->pba.
lun_pba
 ==Öba.lun_pba))

479 
found0
;

482 } i‡(
p
->
lba
 > 
ªq
->lba)

485 
√w
 = 
	`Æloc_lba_li°
(
sdisk
, 
ªq
->
lba
);

486 
√w
->
pba
.
lun
 =Öba.lun;

487 
√w
->
pba
.
lun_pba
 =Öba.lun_pba;

488 
√w
->
ns_id
 = 
ªq
->ns_id;

489 
√w
->
ns_£q_num
 = 
ªq
->ns_seq_num;

490 
	`sh™n⁄_li°_add_èû
(&
√w
->
li°
, &
p
->list);

491 
p
 = 
√w
;

492 
found0
:

493 
	`sh™n⁄_•ö_lock_bh
(&
p
->
lba_lock
);

494 
ªq
->
°©e
 = 
REQ_IN_RC_LIST
;

495 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
p
->
ªq_li°
);

496 
	`sh™n⁄_•ö_u∆ock_bh
(&
p
->
lba_lock
);

497 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[0][
ödex
]);

498 i‡(
√w
)

499 
	`as£mbÀ_rc_ªad_ªq
(
sdev
, 
sdisk
, 
√w
);

500 
	}
}

502 
	$add_ªq_to_rmw_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

504 
lba_li°
 *
p
, *
√w
 = 
NULL
;

505 
ödex
 = 
ªq
->
lba
 % 
RMW_LIST_COUNT
;

507 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[1][
ödex
]);

508 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdisk
->
rmw_li°
[1][
ödex
], 
li°
) {

509 i‡(
p
->
lba
 =
ªq
->lba)

510 
found1
;

511 i‡(
p
->
lba
 > 
ªq
->lba)

514 
√w
 = 
	`Æloc_lba_li°
(
sdisk
, 
ªq
->
lba
);

515 
√w
->
hód
 = 
ªq
->head;

516 
√w
->
ns_id
 = 
ªq
->ns_id;

517 
√w
->
ns_£q_num
 = 
ªq
->ns_seq_num;

518 
	`sh™n⁄_li°_add_èû
(&
√w
->
li°
, &
p
->list);

519 
p
 = 
√w
;

520 
found1
:

521 
	`sh™n⁄_•ö_lock_bh
(&
p
->
lba_lock
);

522 i‡(
p
->
°©us
 =
LBA_LOCKED
) {

523 
ªq
->
°©e
 = 
REQ_IN_RMW_WAIT_LIST
;

524 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
p
->
waô_li°
);

526 
ªq
->
°©e
 = 
REQ_IN_RMW_LIST
;

527 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
p
->
ªq_li°
);

529 
	`sh™n⁄_•ö_u∆ock_bh
(&
p
->
lba_lock
);

530 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[1][
ödex
]);

531 i‡(
√w
)

532 
	`as£mbÀ_rmw_ªad_ªq
(
sdev
, 
sdisk
, 
√w
);

533 
	}
}

535 
	$n⁄Æig√d_wrôe_bio_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

537 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

538 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

539 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

540 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
œ°_sb
 = NULL;

541 
logicbs
 = 0;

543 
__echo_ö
;

544 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


545 
	`sh™n⁄_©omic_dec
(&
sdev
->
wrôe_bios
);

547 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

548 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

549 i‡(
ªq
->
Àngth
 =
sdev
->
logicb_size
) {

550 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

551 i‡(
ªq
->
vút_addr_2
)

552 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

554 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

555 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

556 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

557 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

558 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

559 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

561 
	`sh™n⁄_öfo
("%s: sbio->°¨t_£˘‹=0x%lx, sbio->°©us=0x%x.\n", 
__func__
, 
sbio
->
°¨t_£˘‹
, sbio->
°©us
);

562 i‡((
œ°_sb
 =
NULL
Ë|| (œ°_sb =
sb
))

563 
logicbs
++;

565 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

566 
logicbs
 = 1;

568 
œ°_sb
 = 
sb
;

571 
	`‰ì_ªq
(
ªq
);

574 i‡(
logicbs
)

575 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

576 
	`sh™n⁄_©omic_sub
(
sbio
->
logicbs
, &
sdev
->
ö_Êight_wrôes
);

578 
	`sh™n⁄_com∂ëe_fs_io
(
sdev
->
sdisk
.
ho°d©a
, sdev->sdisk.
gd
, 
sbio
);

579 i‡(
sbio
->
sg_cou¡
)

580 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

582 
	`‰ì_sbio
(
sbio
);

583 
	}
}

585 
	$£nd_u«lig√d_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
)

587 
sdisk
->
n⁄Æig√d_ªqs
++;

588 i‡(
ªq
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

589 
ªq
->
›code
 = 
sh_cmd_wrôe
;

590 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

591 
	`add_ªq_to_rmw_li°
(
sdev
, 
sdisk
, 
ªq
);

593 
ªq
->
›code
 = 
sh_cmd_ªad
;

594 
	`add_ªq_to_rc_li°
(
sdev
, 
sdisk
, 
ªq
);

596 
	}
}

598 
	$£nd_Æig√d_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
)

600 
ªt
, 
lun
, 
fûl_hód
 = 0;

601 
sh™n⁄_sb
 *
sb
 = 
NULL
;

603 
sdisk
->
Æig√d_ªqs
++;

604 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
,Ñeq->
sg
,Ñeq->
dma_dú
);

605 i‡(
ªq
->
vút_addr_2
)

606 
ªq
->
dma_addªss_2
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
,Ñeq->
sg2
,Ñeq->
dma_dú
);

608 i‡(
ªq
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

609 
ªq
->
›code
 = 
sh_cmd_wrôe
;

610 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

612 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

613 
	`ho°_gë_hód_™d_£t_pba_èbÀ
(
sdev
, 
sdisk
, 
sbio
->
bio
, 
ªq
);

614 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

615 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

616 i‡((
ªq
->
hód
 & 
HEAD_INDEX_MASK
Ë=
HOT_INDEX
)

617 
fûl_hód
 |1 << 
HOT_INDEX
;

619 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


620 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

622 
fûl_hód
 |1 << 
COLD_INDEX
;

624 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
sdisk
->
¥i‹ôy
);

625 
	`mod_fûl_chunk_timî
(
sdev
, 
fûl_hód
);

626 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

628 
ªq
->
›code
 = 
sh_cmd_ªad
;

630 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

631 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

632 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

633 i‡(
ªt
 < 0) {

634 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

636 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

637 
ªq
->
£q_num
 = 
sb
->seq_num;

638 
lun
 = 
ªq
->
pba
.lun;

639 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

640 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, 1);

643 
	}
}

645 
	$check_bef‹e_wrôe
(
sh™n⁄_dev
 *
sdev
)

647 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
)

648 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 10);

650 i‡(
sdev
->
‰ì_blk˙t
 < 
GC_THRESHOLD_N3
) {

651 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
block_ho°_wr
, (sdev->
sdisk
.
exô
 || (sdev->
‰ì_blk˙t
 >
GC_THRESHOLD_N3
)));

654 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë>
REQ_QUEUE_THRESHOLD_H
))

655 
sdev
->
ö_block_°©e
 = 2;

656 i‡(
sdev
->
ö_block_°©e
 == 2) {

657 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
limô_ªq_queue
[1], \

658 (
sdev
->
sdisk
.
exô
 || (sdev->
ö_block_°©e
 < 2Ë|| (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
)));

661 
	}
}

663 
	$is_cou∂e_sg
(
sh™n⁄_sg_li°_t
 *
sg
, sh™n⁄_sg_li°_à*
√xt_sg
)

665 i‡((
√xt_sg
 =
NULL
Ë|| (
	`sh™n⁄_sg_Àngth
(next_sg) == 0))

667 i‡((
	`sh™n⁄_sg_off£t
(
sg
Ë+ 
	`sh™n⁄_sg_Àngth
(sg)) != 4096)

669 i‡(
	`sh™n⁄_sg_off£t
(
√xt_sg
) != 0)

671 i‡((
	`sh™n⁄_sg_Àngth
(
sg
Ë+ sh™n⁄_sg_Àngth(
√xt_sg
)) != 4096)

675 
	}
}

677 
	$ˇlcuœã_n⁄Æig√d_bio_u£r_cou¡
(
sh™n⁄_bio
 *
sbio
, 
logicb_size
, 
fú°_size
)

679 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
, *
√xt_sg
 = NULL;

681 
ªmaöed_size
, 
und⁄e
 = 0;

682 
Àngth
 = 0;

684 
u£r_cou¡
 = 0;

686 i‡(
fú°_size
) {

687 
ªmaöed_size
 = 
fú°_size
;

688 
und⁄e
 = 1;

690 
ªmaöed_size
 = 
logicb_size
;

691 
und⁄e
 = 0;

694 
sg
 = 
sbio
->sg;

696 
sg
 && 
	`sh™n⁄_sg_∑ge
(sg)) {

697 
Àngth
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

698 
u£r_cou¡
++;

700 i‡(
und⁄e
) {

701 
ªmaöed_size
 -
Àngth
;

702 i‡(
ªmaöed_size
 == 0) {

703 
ªmaöed_size
 = 
logicb_size
;

704 
und⁄e
 = 0;

707 i‡((
	`sh™n⁄_sg_off£t
(
sg
Ë& 0x7Ë|| (
	`sh™n⁄_sg_Àngth
(sg) & 0x7)) {

708 
und⁄e
 = 1;

709 
ªmaöed_size
 -
Àngth
;

711 i‡(
Àngth
 !
logicb_size
) {

712 
√xt_sg
 = 
	`sh™n⁄_sg_√xt
(
sg
);

713 i‡(
	`is_cou∂e_sg
(
sg
, 
√xt_sg
)) {

714 
sg
 = 
√xt_sg
;

716 
und⁄e
 = 1;

717 
ªmaöed_size
 -
Àngth
;

723 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

726  
u£r_cou¡
;

727 
	}
}

729 
	$sh™n⁄_submô_n⁄Æig√d_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
, 
fú°_size
)

731 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

732 
sh™n⁄_ªque°
 *
ªq
;

733 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
, *
√xt_sg
 = NULL;

734 
i
, 
ªmaöed_size
, 
und⁄e
 = 0;

735 
u64
 
°¨t_off£t
;

738 
sdev
->
sdisk
.
n⁄Æig√d_bios
++;

739 
sbio
->
d©a
 = 
sdev
;

740 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

741 
sbio
->
ˇŒback
 = 
n⁄Æig√d_wrôe_bio_ˇŒback
;

742 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

744 
	`check_bef‹e_wrôe
(
sdev
);

745 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
)) {

746 
	`sh™n⁄_w¨n
("the disk isábsent!\n");

747  -
EIO
;

750 
sbio
->
ˇŒback
 = 
n⁄Æig√d_ªad_bio_ˇŒback
;

751 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

754 
sbio
->
logicbs
 = 
	`ˇlcuœã_n⁄Æig√d_bio_u£r_cou¡
(sbio, 
sdev
->
logicb_size
, 
fú°_size
);

755 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
 + 1);

758 i‡(
fú°_size
) {

759 
ªmaöed_size
 = 
fú°_size
;

760 
und⁄e
 = 1;

762 
ªmaöed_size
 = 
sdev
->
logicb_size
;

763 
und⁄e
 = 0;

766 
°¨t_off£t
 = 
sbio
->
°¨t_£˘‹
 << 9;

767 
sg
 = 
sbio
->sg;

768 
i
 = 0;

769 
sg
 && 
	`sh™n⁄_sg_∑ge
(sg)) {

770 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

771 #ifde‡
CONFIG_SHANNON_DEBUG


772 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

774 
ªq
->
£ndî
 = 
FROM_HOST
;

775 
ªq
->
sbio
 = sbio;

776 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

777 
	`£t_ªq_ödex
(
ªq
, 
i
);

778 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

779 
ªq
->
dma_dú
 = 
sbio
->dma_dir;

780 
ªq
->
sg
 = sg;

781 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

782 
ªq
->
Àngth
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

783 
ªq
->
°¨t_off£t
 = start_offset;

784 
ªq
->
lba
 = 
°¨t_off£t
 >> 
sdev
->
logicb_shi·
;

786 
°¨t_off£t
 +
	`sh™n⁄_sg_Àngth
(
sg
);

788 i‡(
und⁄e
) {

789 
ªmaöed_size
 -
ªq
->
Àngth
;

790 i‡(
ªmaöed_size
 == 0) {

791 
ªmaöed_size
 = 
sdev
->
logicb_size
;

792 
und⁄e
 = 0;

794 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

796 i‡((
	`sh™n⁄_sg_off£t
(
sg
Ë& 0x7Ë|| (
	`sh™n⁄_sg_Àngth
(sg) & 0x7)) {

797 
und⁄e
 = 1;

798 
ªmaöed_size
 -
ªq
->
Àngth
;

799 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

801 i‡(
ªq
->
Àngth
 =
sdev
->
logicb_size
) {

802 
	`£nd_Æig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

804 
√xt_sg
 = 
	`sh™n⁄_sg_√xt
(
sg
);

805 i‡(
	`is_cou∂e_sg
(
sg
, 
√xt_sg
)) {

806 
ªq
->
sg2
 = 
√xt_sg
;

807 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
√xt_sg
);

808 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

809 
°¨t_off£t
 +
	`sh™n⁄_sg_Àngth
(
√xt_sg
);

810 
	`£nd_Æig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

812 
sg
 = 
√xt_sg
;

814 
und⁄e
 = 1;

815 
ªmaöed_size
 -
ªq
->
Àngth
;

816 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

822 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

823 
i
++;

826 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

827 
	`sh™n⁄_©omic_add
(
sbio
->
logicbs
, &
sdev
->
ö_Êight_wrôes
);

829 
	`bÆ™˚_gc
(
sdev
, 
sbio
->
logicbs
);

830 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
) {

831 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 4);

835 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

838 
	}
}

	@shannon_block.c

1 
	~<löux/fs.h
>

2 
	~<löux/devi˚.h
>

3 
	~<löux/öãºu±.h
>

4 
	~<löux/blkdev.h
>

5 
	~<löux/gíhd.h
>

6 
	~<löux/kî√l.h
>

7 
	~<löux/moduÀ.h
>

8 
	~<löux/vîsi⁄.h
>

9 
	~<löux/pci.h
>

10 
	~<löux/•ölock.h
>

12 
	~"sh™n⁄_block.h
"

13 
	~"sh™n⁄_devi˚.h
"

14 
	~"sh™n⁄_time.h
"

15 
	~"sh™n⁄_p‹t.h
"

17 
ö¸ó£_ns_≥ndög_bios
(
sh™n⁄_«me•a˚
 *
ns
);

18 
de¸ó£_ns_≥ndög_bios
(
sh™n⁄_«me•a˚
 *
ns
);

19 
check_™d_Æloc_Õmt
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
logicb_shi·
);

21 
	gsh™n⁄_u£_iosched
 = 0;

24 
sh™n⁄_gídisk_t
 *
	$sh™n⁄_Æloc_disk
(
mö‹s
)

26  
	`Æloc_disk
(
mö‹s
);

27 
	}
}

29 
block_devi˚_›î©i⁄s
 
sh™n⁄_›s
;

30 
block_devi˚_›î©i⁄s
 
sh™n⁄_›s_ns
;

31 
	$sh™n⁄_öô_gídisk
(
sh™n⁄_gídisk_t
 *
disk
, *
«me
, 
maj‹
, 
mö‹_•™
, 
fú°_mö‹
, 
sh™n⁄_ªque°_queue_t
 *
rq
, *
¥i
)

33 
gídisk
 *
gd
 = (gídisk *)
disk
;

35 
	`¢¥ötf
(
gd
->
disk_«me
, 32, 
«me
);

36 
gd
->
maj‹
 = major;

37 
gd
->
mö‹s
 = 
mö‹_•™
;

38 
gd
->
fú°_mö‹
 = first_minor;

39 
	`debugs0
("disk_name=%s, major=%d, minors=%d, first_minor=%d.\n",

40 
gd
->
disk_«me
, gd->
maj‹
, gd->
mö‹s
, gd->
fú°_mö‹
);

41 
gd
->
queue
 = (
ªque°_queue
 *)
rq
;

42 
gd
->
¥iv©e_d©a
 = 
¥i
;

43 
gd
->
f›s
 = &
sh™n⁄_›s
;

45 i‡(*
«me
 != 'd')

46 
gd
->
f›s
 = &
sh™n⁄_›s_ns
;

49 
	}
}

51 
	$sh™n⁄_£t_ˇ∑côy
(
sh™n⁄_gídisk_t
 *
disk
, 
sh™n⁄_£˘‹_t
 
size
)

53 
	`£t_ˇ∑côy
((
gídisk
 *)
disk
, 
size
);

54 
	}
}

56 
	$sh™n⁄_£t_disk_ro
(
sh™n⁄_gídisk_t
 *
disk
, 
Êag
)

58 
	`£t_disk_ro
((
gídisk
 *)
disk
, 
Êag
);

59 
	}
}

61 
	$sh™n⁄_put_disk
(
sh™n⁄_gídisk_t
 *
disk
)

63 
	`put_disk
((
gídisk
 *)
disk
);

64 
	}
}

66 
	$sh™n⁄_add_disk
(
sh™n⁄_gídisk_t
 *
disk
)

68 
	`add_disk
((
gídisk
 *)
disk
);

69 
	}
}

71 
	$sh™n⁄_dñ_gídisk
(
sh™n⁄_gídisk_t
 *
gp
)

73 
	`dñ_gídisk
((
gídisk
 *)
gp
);

74 
	}
}

77 
	$sh™n⁄_ªgi°î_blkdev
(
maj‹
, c⁄° *
«me
)

79  
	`ªgi°î_blkdev
(
maj‹
, 
«me
);

80 
	}
}

82 
	$sh™n⁄_uƒegi°î_blkdev
(
maj‹
, c⁄° *
«me
)

84 
	`uƒegi°î_blkdev
(
maj‹
, 
«me
);

85 
	}
}

88 
	$sh™n⁄_blk_queue_block_size
(
sh™n⁄_ªque°_queue_t
 *
queue
, 
logiˇl_size
, 
physiˇl_size
)

90 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

92 
	`blk_queue_logiˇl_block_size
((
ªque°_queue
 *)
queue
, 
logiˇl_size
);

93 
	`blk_queue_physiˇl_block_size
((
ªque°_queue
 *)
queue
, 
physiˇl_size
);

97 
	`blk_queue_h¨d£˘_size
((
ªque°_queue
 *)
queue
, 
logiˇl_size
);

100 
	}
}

102 
	$sh™n⁄_blk_queue_max_hw_£˘‹s
(
sh™n⁄_ªque°_queue_t
 *
q
, 
max_hw_£˘‹s
)

104 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

105 
	`blk_queue_max_hw_£˘‹s
((
ªque°_queue
 *)
q
, 
max_hw_£˘‹s
);

107 
	`blk_queue_max_£˘‹s
((
ªque°_queue
 *)
q
, 
max_hw_£˘‹s
);

109 
	}
}

111 
	$sh™n⁄_blk_queue_io_mö
(
sh™n⁄_ªque°_queue_t
 *
queue
, 
mö
)

113 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

114 
	`blk_queue_io_mö
((
ªque°_queue
 *)
queue
, 
mö
);

116 
	}
}

118 
	$sh™n⁄_blk_queue_io_›t
(
sh™n⁄_ªque°_queue_t
 *
queue
, 
›t
)

120 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

121 
	`blk_queue_io_›t
((
ªque°_queue
 *)
queue
, 
›t
);

123 
	}
}

125 
	$sh™n⁄_should_åim_bio
(
sh™n⁄_bio_t
 *
bio
)

127 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4, 8, 0)

128  ((
bio
 *)bio)->
bi_›f
 && (
	`bio_›
((biÿ*)bioË=
REQ_OP_DISCARD
);

130 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

131 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 36)

132  ((
bio
 *)bio)->
bi_rw
 & 
REQ_DISCARD
;

134 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 28)

135  
	`bio_disˇrd
((
bio
 *)bio);

137  
	`bio_rw_Êagged
((
bio
 *)bio, 
BIO_RW_DISCARD
);

146 
	}
}

149 
	$sh™n⁄_queue_Êag_£t
(
Êag
, 
sh™n⁄_ªque°_queue_t
 *
queue
)

151 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 26)

152 
	`£t_bô
(
Êag
, &(((
ªque°_queue
 *)
queue
)->
queue_Êags
));

153 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 17, 0)

154 
	`queue_Êag_£t_u∆ocked
(
Êag
, (
ªque°_queue
 *)
queue
);

156 
	`blk_queue_Êag_£t
(
Êag
, (
ªque°_queue
 *)
queue
);

158 
	}
}

161 
	$sh™n⁄_queue_Êag_˛ór
(
Êag
, 
sh™n⁄_ªque°_queue_t
 *
queue
)

163 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 26)

164 
	`˛ór_bô
(
Êag
, &(((
ªque°_queue
 *)
queue
)->
queue_Êags
));

165 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 17, 0)

166 
	`queue_Êag_˛ór_u∆ocked
(
Êag
, (
ªque°_queue
 *)
queue
);

168 
	`blk_queue_Êag_˛ór
(
Êag
, (
ªque°_queue
 *)
queue
);

170 
	}
}

172 
	$sh™n⁄_åim_£âög
(
sh™n⁄_ªque°_queue_t
 *
queue
)

174 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 32)

177 #ifde‡
RHEL_RELEASE_CODE


178 #i‡
RHEL_RELEASE_CODE
 >
	`RHEL_RELEASE_VERSION
(6, 0)

179 ((
ªque°_queue
 *)
queue
)->
limôs
.
disˇrd_gønuœrôy
 = 
PAGE_SIZE
;

183 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 33)

184 ((
ªque°_queue
 *)
queue
)->
limôs
.
disˇrd_gønuœrôy
 = 
PAGE_SIZE
;

187 ((
ªque°_queue
 *)
queue
)->
limôs
.
max_disˇrd_£˘‹s
 = (
UINT_MAX
 >> 9) & ~7;

189 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 37) && LINUX_VERSION_CODE < KERNEL_VERSION(4, 12, 0)

190 ((
ªque°_queue
 *)
queue
)->
limôs
.
disˇrd_zî€s_d©a
 = 1;

193 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 17, 0)

194 
	`queue_Êag_£t_u∆ocked
(
QUEUE_FLAG_DISCARD
, (
ªque°_queue
 *)
queue
);

196 
	`blk_queue_Êag_£t
(
QUEUE_FLAG_DISCARD
, (
ªque°_queue
 *)
queue
);

199 
	}
}

201 
	$sh™n⁄_rŸ©i⁄Æ_£âög
(
sh™n⁄_ªque°_queue_t
 *
queue
)

203 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

204 
	`sh™n⁄_queue_Êag_£t
(
QUEUE_FLAG_NONROT
, 
queue
);

206 
	}
}

208 
	$sh™n⁄_blk_˛ónup_queue
(
sh™n⁄_ªque°_queue_t
 *
q
)

210 
	`blk_˛ónup_queue
((
ªque°_queue
 *)
q
);

211 
	}
}

214 
	$sh™n⁄_bio_ídio
(
sh™n⁄_bio_t
 *
bio
, 
îr‹
)

216 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 24)

218 i‡(
îr‹
)

219 
	`bio_ídio
((
bio
 *)bio, 0, 
îr‹
);

221 
	`bio_ídio
((
bio
 *)bio, ((biÿ*)bio)->
bi_size
, 0);

223 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 3, 0)

225 
	`bio_ídio
((
bio
 *)bio, 
îr‹
);

227 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 13, 0)

228 ((
bio
 *)bio)->
bi_îr‹
 = 
îr‹
;

229 
	`bio_ídio
((
bio
 *)bio);

231 ((
bio
 *)bio)->
bi_°©us
 = 
îr‹
;

232 
	`bio_ídio
((
bio
 *)bio);

234 
	}
}

236 
	$sh™n⁄_bio_Êagged
(
sh™n⁄_bio_t
 *
bio
, 
Êag
)

238  
	`bio_Êagged
((
bio
 *)bio, 
Êag
);

239 
	}
}

241 
	$sh™n⁄_bio_d©a_dú
(
sh™n⁄_bio_t
 *
bio
)

243  
	`bio_d©a_dú
((
bio
 *)bio);

244 
	}
}

246 
	$sh™n⁄_bio_£gmíts
(
sh™n⁄_bio_t
 *
bio
)

248  
	`bio_£gmíts
((
bio
 *)bio);

249 
	}
}

251 
	$gë_bi_size
(
sh™n⁄_bio_t
 *
bio
)

253 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 14, 0)

254  ((
bio
 *)bio)->
bi_ôî
.
bi_size
;

256  ((
bio
 *)bio)->
bi_size
;

258 
	}
}

260 
sh™n⁄_£˘‹_t
 
	$gë_bi_£˘‹
(
sh™n⁄_bio_t
 *
bio
)

262 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 14, 0)

263  ((
bio
 *)bio)->
bi_ôî
.
bi_£˘‹
;

265  ((
bio
 *)bio)->
bi_£˘‹
;

267 
	}
}

269 
sh™n⁄_gídisk_t
 *
gë_gídisk_‰om_ns
(
sh™n⁄_«me•a˚
 *
ns
);

270 
ns_gë_logicb_size
(
sh™n⁄_«me•a˚
 *
ns
);

271 
ns_gë_logicb_shi·
(
sh™n⁄_«me•a˚
 *
ns
);

272 
sh™n⁄_poﬁ
 *
ns_gë_poﬁ
(
sh™n⁄_«me•a˚
 *
ns
);

273 
sh™n⁄_disk
 *
gë_sh™n⁄_disk_‰om_ns
(
sh™n⁄_«me•a˚
 *
ns
);

274 
u64
 
poﬁ_u£d_logicbs
(
sh™n⁄_poﬁ
 *
•
);

275 
u64
 
poﬁ_avaûabÀ_ˇp
(
sh™n⁄_poﬁ
 *
•
);

277 
sh™n⁄_gídisk_t
 *
gë_gídisk_‰om_sdev
(
sh™n⁄_dev
 *
sdev
);

278 
gë_logicb_size
(
sh™n⁄_dev
 *
sdev
);

279 
gë_logicb_shi·
(
sh™n⁄_dev
 *
sdev
);

280 
sh™n⁄_disk
 *
gë_sh™n⁄_disk_‰om_sdev
(
sh™n⁄_dev
 *
sdev
);

282 
sh™n⁄_check_avaûabûôy
(
sh™n⁄_dev
 *
sdev
);

283 
sh™n⁄_check_avaûabûôy_ns
(
sh™n⁄_«me•a˚
 *);

284 
sh™n⁄_disk_ªad⁄ly
(
sh™n⁄_dev
 *
sdev
);

285 
sh™n⁄_disk_ªad⁄ly_ns
(
sh™n⁄_«me•a˚
 *);

286 
sh™n⁄_submô_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
);

287 
sh™n⁄_submô_bio_thrŸéög_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
);

288 
sh™n⁄_disˇrd
(
sh™n⁄_dev
 *
sdev
, 
logicb64_t
 
°¨t_lba
,Üogicb64_à
íd_lba
);

289 
sh™n⁄_disˇrd_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
logicb64_t
 
°¨t_lba
,Üogicb64_à
íd_lba
, 
dñ_ns
);

291 #ifde‡
CONFIG_SHANNON_DEBUG


292 
	$£t_sbio_debug_èg
(
sh™n⁄_bio
 *
sbio
, 
èg
)

294 
sbio
->
èg
 =Åag;

295 
	}
}

298 
	$sh™n⁄_Æloc_boun˚_∑ges
(
sh™n⁄_sg_li°_t
 *
sgèbÀ
, 
fú°_size
, 
tŸÆ_size
)

300 
∑ge_˙t
 = 0, 
i
 = 0, 
j
 = 0;

301 
fú°_∑ge_of„°
 = 0, 
œ°_∑ge_Àn
 = 0;

303 
∑ge
 *∑gê
NULL
;

304 
sh™n⁄_sg_li°_t
 *
sge
 = 
sgèbÀ
;

306 i‡(
fú°_size
) {

307 
∑ge_˙t
++;

308 
fú°_∑ge_of„°
 = 
PAGE_SIZE
 - 
fú°_size
;

311 
∑ge_˙t
 +(
tŸÆ_size
 - 
fú°_size
Ë/ 
PAGE_SIZE
;

312 
œ°_∑ge_Àn
 = (
tŸÆ_size
 - 
fú°_size
Ë% 
PAGE_SIZE
;

314 i‡(
œ°_∑ge_Àn
)

315 
∑ge_˙t
++;

317 
i
 = 0; i < 
∑ge_˙t
; i++) {

318 
∑ge
 = 
	`Æloc_∑ge
(
GFP_KERNEL
);

320 i‡(!
∑ge
)

321 
Áû_out
;

323 i‡((
i
 =0Ë&& 
fú°_∑ge_of„°
)

324 
	`sh™n⁄_sg_£t_∑ge
(
sge
, 
∑ge
, 
fú°_size
, 
fú°_∑ge_of„°
);

325 i‡((
i
 =
∑ge_˙t
 - 1Ë&& 
œ°_∑ge_Àn
)

326 
	`sh™n⁄_sg_£t_∑ge
(
sge
, 
∑ge
, 
œ°_∑ge_Àn
, 0);

328 
	`sh™n⁄_sg_£t_∑ge
(
sge
, 
∑ge
, 
PAGE_SIZE
, 0);

330 
sge
 = 
	`sh™n⁄_sg_√xt
(sge);

333 
	`sh™n⁄_sg_m¨k_íd
(
sge
);

335  
∑ge_˙t
;

337 
Áû_out
:

338 
	`sh™n⁄_f‹_óch_sg
(
sgèbÀ
, 
sge
, 
i
, 
j
)

339 
	`__‰ì_∑ge
(
	`sh™n⁄_sg_∑ge
(
sge
));

341  -
ENOMEM
;

342 
	}
}

346 
	$sh™n⁄_c›y_boun˚_∑ges
(
sh™n⁄_bio_t
 *
lbio
, 
sh™n⁄_sg_li°_t
 *
sgèbÀ
, 
to_sg
)

348 
bio
 *biÿ(biÿ*)
lbio
;

349 
sh™n⁄_sg_li°_t
 *
sge
 = 
sgèbÀ
;

351 
sge_off£t
, 
sge_Àn
;

352 
bvec_off£t
, 
bvec_Àn
;

354 
c›y_Àn
;

356 *
sge_addr
, *
bvec_addr
;

358 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 14, 0)

359 
bio_vec
 
bvec
;

360 
bvec_ôî
 
ôî
;

362 
sge_Àn
 = 
	`sh™n⁄_sg_Àngth
(
sge
);

363 
sge_off£t
 = 
	`sh™n⁄_sg_off£t
(
sge
);

365 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

366 
bvec_Àn
 = 
bvec
.
bv_Àn
;

367 
bvec_off£t
 = 
bvec
.
bv_off£t
;

370 i‡(
sge_Àn
 > 
bvec_Àn
)

371 
c›y_Àn
 = 
bvec_Àn
;

373 
c›y_Àn
 = 
sge_Àn
;

375 
bvec_addr
 = 
	`∑ge_addªss
(
bvec
.
bv_∑ge
Ë+ 
bvec_off£t
;

376 
sge_addr
 = 
	`∑ge_addªss
(
	`sh™n⁄_sg_∑ge
(
sge
)Ë+ 
sge_off£t
;

378 i‡(
to_sg
)

379 
	`mem˝y
(
sge_addr
, 
bvec_addr
, 
c›y_Àn
);

381 
	`mem˝y
(
bvec_addr
, 
sge_addr
, 
c›y_Àn
);

383 
bvec_off£t
 +
c›y_Àn
;

384 
bvec_Àn
 -
c›y_Àn
;

386 
sge_off£t
 +
c›y_Àn
;

387 
sge_Àn
 -
c›y_Àn
;

389 i‡(
sge_Àn
 <= 0) {

390 
sge
 = 
	`sh™n⁄_sg_√xt
(sge);

391 
sge_Àn
 = 
	`sh™n⁄_sg_Àngth
(
sge
);

392 
sge_off£t
 = 
	`sh™n⁄_sg_off£t
(
sge
);

394 } 
bvec_Àn
 > 0);

398 
bio_vec
 *
bvec
;

399 
i
;

401 
sge_Àn
 = 
	`sh™n⁄_sg_Àngth
(
sge
);

402 
sge_off£t
 = 
	`sh™n⁄_sg_off£t
(
sge
);

404 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

405 
bvec_Àn
 = 
bvec
->
bv_Àn
;

406 
bvec_off£t
 = 
bvec
->
bv_off£t
;

409 i‡(
sge_Àn
 > 
bvec_Àn
)

410 
c›y_Àn
 = 
bvec_Àn
;

412 
c›y_Àn
 = 
sge_Àn
;

414 
bvec_addr
 = 
	`∑ge_addªss
(
bvec
->
bv_∑ge
Ë+ 
bvec_off£t
;

415 
sge_addr
 = 
	`∑ge_addªss
(
	`sh™n⁄_sg_∑ge
(
sge
)Ë+ 
sge_off£t
;

417 i‡(
to_sg
)

418 
	`mem˝y
(
sge_addr
, 
bvec_addr
, 
c›y_Àn
);

420 
	`mem˝y
(
bvec_addr
, 
sge_addr
, 
c›y_Àn
);

422 
bvec_off£t
 +
c›y_Àn
;

423 
bvec_Àn
 -
c›y_Àn
;

425 
sge_off£t
 +
c›y_Àn
;

426 
sge_Àn
 -
c›y_Àn
;

428 i‡(
sge_Àn
 <= 0) {

429 
sge
 = 
	`sh™n⁄_sg_√xt
(sge);

430 
sge_Àn
 = 
	`sh™n⁄_sg_Àngth
(
sge
);

431 
sge_off£t
 = 
	`sh™n⁄_sg_off£t
(
sge
);

433 } 
bvec_Àn
 > 0);

436 
	}
}

438 
	$sh™n⁄_‰ì_boun˚_∑ges
(
sh™n⁄_sg_li°_t
 *
sgèbÀ
, 
sg_cou¡
)

440 
sh™n⁄_sg_li°_t
 *
sge
;

441 
i
;

443 
	`sh™n⁄_f‹_óch_sg
(
sgèbÀ
, 
sge
, 
sg_cou¡
, 
i
)

444 
	`__‰ì_∑ge
(
	`sh™n⁄_sg_∑ge
(
sge
));

445 
	}
}

447 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 14, 0)

448 
	$sh™n⁄_c⁄vît_bio
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_bio_t
 *
lbio
, 
logicb_size
)

450 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
;

451 
bio
 *biÿ(biÿ*)
lbio
;

452 
bio_vec
 
bvec
;

453 
off£t
, 
ªmaöed_size
, 
m≠_size
 = 0, 
und⁄e
 = 0;

454 
bvec_ôî
 
ôî
;

456 
ªt
 = 0;

458 
∑ge_off£t
, 
m≠∑bÀ_size
;

460 
sbio
->
bio_size
 = 
	`gë_bi_size
(
lbio
);

462 
sbio
->
£gmíts
 = 
	`sh™n⁄_bio_£gmíts
(
lbio
);

463 
sbio
->
sg_cou¡
 = 2 * (((sbio->
bio_size
 + 
logicb_size
 - 1)/logicb_sizeË+ sbio->
£gmíts
);

465 
sbio
->
sg
 = 
	`sh™n⁄_sg_Æloc
(sbio->
sg_cou¡
, 
GFP_SHANNON
);

466 i‡(
sbio
->
sg
 =
NULL
) {

467 
	`sh™n⁄_îr
("alloc sg failed.\n");

468  -
ENOMEM
;

470 
	`sh™n⁄_sg_öô_èbÀ
(
sbio
->
sg
, sbio->
sg_cou¡
);

472 
sbio
->
°¨t_£˘‹
 = 
	`gë_bi_£˘‹
(
lbio
);

474 
sbio
->
fú°_size
 = 
logicb_size
 - ((sbio->
°¨t_£˘‹
 << 9) & (logicb_size - 1));

475 
sbio
->
fú°_size
 = sbio->fú°_sizê% 
logicb_size
;

476 
sbio
->
fú°_size
 = 
	`mö
(sbio->
bio_size
, sbio->first_size);

478 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

479 i‡(
bvec
.
bv_off£t
 & 0x7) {

480 
sbio
->
√ed_boun˚
 = 1;

482 i‡(
bvec
.
bv_Àn
 & 0x7) {

483 
sbio
->
√ed_boun˚
 = 1;

487 i‡(
sbio
->
√ed_boun˚
) {

488 
sbio
->
has_hﬁe
 = 0;

490 
ªt
 = 
	`sh™n⁄_Æloc_boun˚_∑ges
(
sbio
->
sg
, sbio->
fú°_size
, sbio->
bio_size
);

492 i‡(
ªt
 <= 0) {

493 
ﬁd_Áshi⁄
;

495 
sbio
->
u£d_sg_cou¡
 = 
ªt
;

497 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)

498 
	`sh™n⁄_c›y_boun˚_∑ges
(
bio
, 
sbio
->
sg
, 1);

504 
ﬁd_Áshi⁄
:

505 
ªmaöed_size
 = 
sbio
->
fú°_size
 ? sbio->fú°_sizê: 
logicb_size
;

507 
sbio
->
has_hﬁe
 = 0;

508 i‡(
sbio
->
√ed_boun˚
) {

509 
sbio
->
has_hﬁe
 = 1;

510 
sbio
->
√ed_boun˚
 = 0;

513 
sbio
->
u£d_sg_cou¡
 = 0;

514 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

517 i‡((
ôî
.
bi_idx
 !
bio
->
bi_ôî
.bi_idxË&& (
bvec
.
bv_off£t
 != 0)) {

518 
sbio
->
has_hﬁe
 = 1;

521 i‡((
ôî
.
bi_idx
 !(
sbio
->
£gmíts
 - 1)Ë&& ((
bvec
.
bv_off£t
 + bvec.
bv_Àn
) != 4096)) {

522 
sbio
->
has_hﬁe
 = 1;

525 
off£t
 = 0;

527 
∑ge_off£t
 = 
bvec
.
bv_off£t
 + 
off£t
;

529 
off£t
 < 
bvec
.
bv_Àn
) {

530 
m≠∑bÀ_size
 = 
PAGE_SIZE
 - (
∑ge_off£t
 & (PAGE_SIZE -1));

531 i‡(
m≠∑bÀ_size
 > (
bvec
.
bv_Àn
 - 
off£t
))

532 
m≠∑bÀ_size
 = 
bvec
.
bv_Àn
 - 
off£t
;

534 i‡(
m≠∑bÀ_size
 < 
ªmaöed_size
) {

535 
m≠_size
 = 
m≠∑bÀ_size
;

536 
und⁄e
 = 1;

538 
m≠_size
 = 
ªmaöed_size
;

539 
und⁄e
 = 0;

541 
ªmaöed_size
 -
m≠_size
;

542 i‡(
ªmaöed_size
 == 0)

543 
ªmaöed_size
 = 
logicb_size
;

544 
sg
 = sg ? 
	`sh™n⁄_sg_√xt
(sgË: 
sbio
->sg;

545 
	`sh™n⁄_sg_£t_∑ge
(
sg
, 
bvec
.
bv_∑ge
 + (
∑ge_off£t
 / 
PAGE_SIZE
), 
m≠_size
,Öage_offset % PAGE_SIZE);

546 
sbio
->
u£d_sg_cou¡
++;

548 
off£t
 +
m≠_size
;

549 
∑ge_off£t
 = 
bvec
.
bv_off£t
 + 
off£t
;

552 
	`sh™n⁄_sg_m¨k_íd
(
sg
);

555 
	}
}

557 
	$sh™n⁄_c⁄vît_bio
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_bio_t
 *
lbio
, 
logicb_size
)

559 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
;

560 
bio
 *biÿ(biÿ*)
lbio
;

561 
bio_vec
 *
bvec
;

562 
i
, 
off£t
, 
ªmaöed_size
, 
m≠_size
 = 0, 
und⁄e
 = 0;

564 
∑ge_off£t
, 
m≠∑bÀ_size
;

566 
ªt
 = 0;

568 
sbio
->
bio_size
 = 
	`gë_bi_size
(
lbio
);

570 
sbio
->
£gmíts
 = 
	`sh™n⁄_bio_£gmíts
(
lbio
);

571 
sbio
->
sg_cou¡
 = 2 * (((sbio->
bio_size
 + 
logicb_size
 - 1)/logicb_sizeË+ sbio->
£gmíts
);

573 
sbio
->
sg
 = 
	`sh™n⁄_sg_Æloc
(sbio->
sg_cou¡
, 
GFP_SHANNON
);

574 i‡(
sbio
->
sg
 =
NULL
) {

575 
	`sh™n⁄_îr
("alloc sg failed.\n");

576  -
ENOMEM
;

578 
	`sh™n⁄_sg_öô_èbÀ
(
sbio
->
sg
, sbio->
sg_cou¡
);

580 
sbio
->
°¨t_£˘‹
 = 
	`gë_bi_£˘‹
(
lbio
);

582 
sbio
->
fú°_size
 = 
logicb_size
 - ((sbio->
°¨t_£˘‹
 << 9) & (logicb_size - 1));

583 
sbio
->
fú°_size
 = sbio->fú°_sizê% 
logicb_size
;

584 
sbio
->
fú°_size
 = 
	`mö
(sbio->
bio_size
, sbio->first_size);

586 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

587 i‡(
bvec
->
bv_off£t
 & 0x7) {

588 
sbio
->
√ed_boun˚
 = 1;

590 i‡(
bvec
->
bv_Àn
 & 0x7) {

591 
sbio
->
√ed_boun˚
 = 1;

595 i‡(
sbio
->
√ed_boun˚
) {

596 
sbio
->
has_hﬁe
 = 0;

598 
ªt
 = 
	`sh™n⁄_Æloc_boun˚_∑ges
(
sbio
->
sg
, sbio->
fú°_size
, sbio->
bio_size
);

600 i‡(
ªt
 <= 0) {

601 
ﬁd_Áshi⁄
;

603 
sbio
->
u£d_sg_cou¡
 = 
ªt
;

605 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)

606 
	`sh™n⁄_c›y_boun˚_∑ges
(
bio
, 
sbio
->
sg
, 1);

612 
ﬁd_Áshi⁄
:

613 
ªmaöed_size
 = 
sbio
->
fú°_size
 ? sbio->fú°_sizê: 
logicb_size
;

615 
sbio
->
has_hﬁe
 = 0;

616 i‡(
sbio
->
√ed_boun˚
) {

617 
sbio
->
has_hﬁe
 = 1;

618 
sbio
->
√ed_boun˚
 = 0;

621 
sbio
->
u£d_sg_cou¡
 = 0;

622 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

625 i‡((
i
 !
bio
->
bi_idx
Ë&& (
bvec
->
bv_off£t
 != 0)) {

626 
sbio
->
has_hﬁe
 = 1;

629 i‡((
i
 !(
sbio
->
£gmíts
 - 1)Ë&& ((
bvec
->
bv_off£t
 + bvec->
bv_Àn
) != 4096)) {

630 
sbio
->
has_hﬁe
 = 1;

633 
off£t
 = 0;

635 
∑ge_off£t
 = 
bvec
->
bv_off£t
 + 
off£t
;

637 
off£t
 < 
bvec
->
bv_Àn
) {

638 
m≠∑bÀ_size
 = 
PAGE_SIZE
 - (
∑ge_off£t
 & (PAGE_SIZE -1));

639 i‡(
m≠∑bÀ_size
 > (
bvec
->
bv_Àn
 - 
off£t
))

640 
m≠∑bÀ_size
 = 
bvec
->
bv_Àn
 - 
off£t
;

642 i‡(
m≠∑bÀ_size
 < 
ªmaöed_size
) {

643 
m≠_size
 = 
m≠∑bÀ_size
;

644 
und⁄e
 = 1;

646 
m≠_size
 = 
ªmaöed_size
;

647 
und⁄e
 = 0;

649 
ªmaöed_size
 -
m≠_size
;

650 i‡(
ªmaöed_size
 == 0)

651 
ªmaöed_size
 = 
logicb_size
;

652 
sg
 = sg ? 
	`sh™n⁄_sg_√xt
(sgË: 
sbio
->sg;

653 
	`sh™n⁄_sg_£t_∑ge
(
sg
, 
bvec
->
bv_∑ge
 + (
∑ge_off£t
 / 
PAGE_SIZE
), 
m≠_size
,Öage_offset % PAGE_SIZE);

654 
sbio
->
u£d_sg_cou¡
++;

656 
off£t
 +
m≠_size
;

657 
∑ge_off£t
 = 
bvec
->
bv_off£t
 + 
off£t
;

660 
	`sh™n⁄_sg_m¨k_íd
(
sg
);

663 
	}
}

666 
	$submô_sbio_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

668 
sh™n⁄_bio
 *
sbio
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_bio, 
make_ªq_w‹k
);

669 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

670 
ªt
;

672 
ªt
 = 
	`sh™n⁄_submô_bio
(
sdev
, 
sbio
);

673 i‡(
ªt
) {

674 
	`sh™n⁄_íd_io_ac˘
(
	`gë_gídisk_‰om_sdev
(
sdev
), 
sbio
->
bio
, 0);

675 i‡(
sbio
->
sg
)

676 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

677 
	`sh™n⁄_bio_ídio
(
sbio
->
bio
, 
ªt
);

678 
	`‰ì_sbio
(
sbio
);

680 
	}
}

682 
	$submô_sbio_èsk_ns
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

684 
sh™n⁄_bio
 *
sbio
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_bio, 
make_ªq_w‹k
);

685 
sh™n⁄_«me•a˚
 *
ns
 = (sh™n⁄_«me•a˚ *)
sbio
->
d©a
;

686 
ªt
;

688 
ªt
 = 
	`sh™n⁄_submô_bio_thrŸéög_ns
(
ns
, 
sbio
);

689 i‡(
ªt
) {

690 
	`sh™n⁄_íd_io_ac˘
(
	`gë_gídisk_‰om_ns
(
ns
), 
sbio
->
bio
, 0);

691 i‡(
sbio
->
sg
)

692 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

693 
	`sh™n⁄_bio_ídio
(
sbio
->
bio
, 
ªt
);

694 
	`‰ì_sbio
(
sbio
);

695 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

697 
	}
}

699 
sh™n⁄_w‹kqueue_°ru˘_t
 *
sh™n⁄_≥r˝u_wq
;

700 
	$sh™n⁄_make_ªque°
(
sh™n⁄_ªque°_queue_t
 *
q
, 
sh™n⁄_bio_t
 *
bio
)

702 
sh™n⁄_dev
 *
sdev
 = ((
ªque°_queue
 *)
q
)->
queued©a
;

703 
sh™n⁄_bio
 *
sbio
;

704 
ªt
;

705 
logicb_size
 = 
	`gë_logicb_size
(
sdev
);

706 
logicb_shi·
 = 
	`gë_logicb_shi·
(
sdev
);

708 i‡(
	`sh™n⁄_check_avaûabûôy
(
sdev
))

710 
	`sh™n⁄_bio_ídio
(
bio
, -
EIO
);

714 i‡(
	`u∆ikñy
(
	`sh™n⁄_should_åim_bio
(
bio
))) {

716 
u64
 
åim_°¨t
 = 
	`gë_bi_£˘‹
(
bio
);

717 
u64
 
åim_íd
 = 
åim_°¨t
 + (
	`gë_bi_size
(
bio
) >> 9);

718 
åim_°¨t
 = 
	`_ALIGN_UP
—rim_°¨t, 
logicb_size
/512);

719 
åim_íd
 = 
	`_ALIGN_DOWN
—rim_íd, 
logicb_size
/512);

721 
åim_°¨t
 =Årim_°¨à>> (
logicb_shi·
 - 9);

722 
åim_íd
 =Årim_íd >> (
logicb_shi·
 - 9);

723 
	`sh™n⁄_disˇrd
(
sdev
, 
åim_°¨t
, 
åim_íd
);

724 
	`sh™n⁄_bio_ídio
(
bio
, 0);

728 i‡(
	`u∆ikñy
(
	`gë_bi_size
(
bio
) == 0)) {

729 
	`sh™n⁄_bio_ídio
(
bio
, 0);

733 i‡(
	`u∆ikñy
(
	`sh™n⁄_disk_ªad⁄ly
(
sdev
)Ë&& (
	`sh™n⁄_bio_d©a_dú
(
bio
Ë=
LINUX_BIO_WRITE
)) {

734 
	`sh™n⁄_bio_ídio
(
bio
, -
EIO
);

738 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

739 
sbio
->
bio
 = bio;

740 
sbio
->
Ãeq
 = 
NULL
;

741 i‡(
	`sh™n⁄_bio_d©a_dú
(
bio
))

742 
sbio
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

744 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

745 
	`SHANNON_INIT_LIST_HEAD
(&
sbio
->
globÆ_li°
);

746 
	`£t_sbio_debug_èg
(
sbio
, 
MAKE_REQUEST_TAG
);

748 
ªt
 = 
	`sh™n⁄_c⁄vît_bio
(
sbio
, 
bio
, 
logicb_size
);

749 i‡(
ªt
)

750 
‰ì_sbio
;

752 i‡(
	`u∆ikñy
(
	`check_™d_Æloc_Õmt
(
	`gë_sh™n⁄_disk_‰om_sdev
(
sdev
), 
sbio
, 
logicb_shi·
))) {

753 
ªt
 = -
EIO
;

754 
‰ì_sg_li°
;

758 
sbio
->
°¨t_time
 = 
	`gë_jiffõs
();

759 
	`sh™n⁄_°¨t_io_ac˘
(
	`gë_gídisk_‰om_sdev
(
sdev
), 
sbio
->
bio
);

761 i‡(
	`likñy
(
sh™n⁄_≥r˝u_wq
)) {

762 
sbio
->
d©a
 = 
sdev
;

763 
	`sh™n⁄_öô_w‹k
(&
sbio
->
make_ªq_w‹k
, 
submô_sbio_èsk
);

764 
	`sh™n⁄_queue_w‹k
(
sh™n⁄_≥r˝u_wq
, &
sbio
->
make_ªq_w‹k
);

766 
ªt
 = 
	`sh™n⁄_submô_bio
(
sdev
, 
sbio
);

767 i‡(
ªt
)

768 
íd_io_ac˘
;

773 
íd_io_ac˘
:

774 
	`sh™n⁄_íd_io_ac˘
(
	`gë_gídisk_‰om_sdev
(
sdev
), 
sbio
->
bio
, 0);

775 
‰ì_sg_li°
:

776 i‡(
sbio
->
√ed_boun˚
)

777 
	`sh™n⁄_‰ì_boun˚_∑ges
(
sbio
->
sg
, sbio->
u£d_sg_cou¡
);

778 i‡(
sbio
->
sg
)

779 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

780 
‰ì_sbio
:

781 
	`‰ì_sbio
(
sbio
);

782 
	`sh™n⁄_bio_ídio
(
bio
, 
ªt
);

784 
	}
}

786 
sh™n⁄_dev
 *
gë_sh™n⁄_dev_‰om_ns
(
sh™n⁄_«me•a˚
 *
ns
);

787 
check_sbio_is_ovîwrôed
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_«me•a˚
 *
ns
);

788 
	$sh™n⁄_make_ªque°_ns
(
sh™n⁄_ªque°_queue_t
 *
q
, 
sh™n⁄_bio_t
 *
bio
)

790 
sh™n⁄_«me•a˚
 *
ns
 = ((
ªque°_queue
 *)
q
)->
queued©a
;

791 
sh™n⁄_bio
 *
sbio
;

792 
ªt
;

793 
logicb_size
 = 
	`ns_gë_logicb_size
(
ns
);

794 
logicb_shi·
 = 
	`ns_gë_logicb_shi·
(
ns
);

796 
	`ö¸ó£_ns_≥ndög_bios
(
ns
);

797 i‡(
	`sh™n⁄_check_avaûabûôy_ns
(
ns
)) {

798 
	`sh™n⁄_bio_ídio
(
bio
, -
EIO
);

799 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

803 i‡(
	`u∆ikñy
(
	`sh™n⁄_should_åim_bio
(
bio
))) {

805 
u64
 
åim_°¨t
 = 
	`gë_bi_£˘‹
(
bio
);

806 
u64
 
åim_íd
 = 
åim_°¨t
 + (
	`gë_bi_size
(
bio
) >> 9);

807 
åim_°¨t
 = 
	`_ALIGN_UP
—rim_°¨t, 
logicb_size
/512);

808 
åim_íd
 = 
	`_ALIGN_DOWN
—rim_íd, 
logicb_size
/512);

810 
åim_°¨t
 =Årim_°¨à>> (
logicb_shi·
 - 9);

811 
åim_íd
 =Årim_íd >> (
logicb_shi·
 - 9);

812 
	`sh™n⁄_disˇrd_ns
(
ns
, 
åim_°¨t
, 
åim_íd
, 0);

813 
	`sh™n⁄_bio_ídio
(
bio
, 0);

814 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

818 i‡(
	`u∆ikñy
(
	`gë_bi_size
(
bio
) == 0)) {

819 
	`sh™n⁄_bio_ídio
(
bio
, 0);

820 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

824 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

825 
sbio
->
bio
 = bio;

826 
sbio
->
Ãeq
 = 
NULL
;

827 i‡(
	`sh™n⁄_bio_d©a_dú
(
bio
))

828 
sbio
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

830 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

831 
	`SHANNON_INIT_LIST_HEAD
(&
sbio
->
globÆ_li°
);

832 
	`£t_sbio_debug_èg
(
sbio
, 
MAKE_REQUEST_TAG
);

834 
ªt
 = 
	`sh™n⁄_c⁄vît_bio
(
sbio
, 
bio
, 
logicb_size
);

835 i‡(
ªt
)

836 
‰ì_sbio
;

838 i‡(
	`u∆ikñy
(
	`check_™d_Æloc_Õmt
(
	`gë_sh™n⁄_disk_‰om_ns
(
ns
), 
sbio
, 
logicb_shi·
))) {

839 
ªt
 = -
EIO
;

840 
‰ì_sg_li°
;

843 i‡((
	`sh™n⁄_bio_d©a_dú
(
bio
Ë=
LINUX_BIO_WRITE
)

844 && (
	`u∆ikñy
(
	`sh™n⁄_disk_ªad⁄ly_ns
(
ns
))

845 || (
	`poﬁ_u£d_logicbs
(
	`ns_gë_poﬁ
(
ns
)Ë> 
	`poﬁ_avaûabÀ_ˇp
(ns_get_pool(ns))/8

846 && !
	`check_sbio_is_ovîwrôed
(
sbio
, 
ns
)))) {

847 
ªt
 = -
EIO
;

848 
‰ì_sg_li°
;

852 
sbio
->
°¨t_time
 = 
	`gë_jiffõs
();

853 
	`sh™n⁄_°¨t_io_ac˘
(
	`gë_gídisk_‰om_ns
(
ns
), 
sbio
->
bio
);

855 i‡(
	`likñy
(
sh™n⁄_≥r˝u_wq
)) {

856 
sbio
->
d©a
 = 
ns
;

857 
	`sh™n⁄_öô_w‹k
(&
sbio
->
make_ªq_w‹k
, 
submô_sbio_èsk_ns
);

858 
	`sh™n⁄_queue_w‹k
(
sh™n⁄_≥r˝u_wq
, &
sbio
->
make_ªq_w‹k
);

860 
ªt
 = 
	`sh™n⁄_submô_bio_thrŸéög_ns
(
ns
, 
sbio
);

861 i‡(
ªt
)

862 
íd_io_ac˘
;

867 
íd_io_ac˘
:

868 
	`sh™n⁄_íd_io_ac˘
(
	`gë_gídisk_‰om_ns
(
ns
), 
sbio
->
bio
, 0);

869 
‰ì_sg_li°
:

870 i‡(
sbio
->
sg
)

871 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

872 
‰ì_sbio
:

873 
	`‰ì_sbio
(
sbio
);

874 
	`sh™n⁄_bio_ídio
(
bio
, 
ªt
);

875 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

877 
	}
}

880 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4,4,0)

881 
blk_qc_t
 
	$sh™n⁄_make_ªque°_wøµî
(
ªque°_queue
 *
q
, 
bio
 *bio)

883 
	`sh™n⁄_make_ªque°
(
q
, 
bio
);

884  
BLK_QC_T_NONE
;

885 
	}
}

887 
blk_qc_t
 
	$sh™n⁄_make_ªque°_wøµî_ns
(
ªque°_queue
 *
q
, 
bio
 *bio)

889 
	`sh™n⁄_make_ªque°_ns
(
q
, 
bio
);

890  
BLK_QC_T_NONE
;

891 
	}
}

892 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,2,0)

893 
	$sh™n⁄_make_ªque°_wøµî
(
ªque°_queue
 *
q
, 
bio
 *bio)

895 
	`sh™n⁄_make_ªque°
(
q
, 
bio
);

896 
	}
}

898 
	$sh™n⁄_make_ªque°_wøµî_ns
(
ªque°_queue
 *
q
, 
bio
 *bio)

900 
	`sh™n⁄_make_ªque°_ns
(
q
, 
bio
);

901 
	}
}

903 
	$sh™n⁄_make_ªque°_wøµî
(
ªque°_queue
 *
q
, 
bio
 *bio)

905  
	`sh™n⁄_make_ªque°
(
q
, 
bio
);

906 
	}
}

908 
	$sh™n⁄_make_ªque°_wøµî_ns
(
ªque°_queue
 *
q
, 
bio
 *bio)

910  
	`sh™n⁄_make_ªque°_ns
(
q
, 
bio
);

911 
	}
}

914 
	#LREQ_IO_GOOD
 1

	)

915 
	#LREQ_IO_ERROR
 0

	)

917 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 25)

919 
ölöe
 
	$com∂ëe_buf„rs
(
bio
 *bio, 
°©us
)

921 
bio
) {

922 
bio
 *
xbh
 = bio->
bi_√xt
;

924 
bio
->
bi_√xt
 = 
NULL
;

925 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 19)

926 
	`blk_föished_io
(
	`bio_£˘‹s
(
bio
));

928 
	`sh™n⁄_bio_ídio
(
bio
, 
°©us
 ? 0 : -
EIO
);

929 
bio
 = 
xbh
;

931 
	}
}

933 
	$sh™n⁄_íd_ªque°
(
sh™n⁄_Ãeq_t
 *
Ãeq
)

935 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

936 
ªque°_queue
 *
q
 = 
rq
->q;

937 
Êags
;

939 
	`com∂ëe_buf„rs
(
rq
->
bio
,Ñq->
îr‹s
);

941 i‡(
	`blk_fs_ªque°
(
rq
)) {

942 c⁄° 
rw
 = 
	`rq_d©a_dú
(
rq
);

943 
	`disk_°©_add
(
rq
->
rq_disk
, 
£˘‹s
[
rw
],Ñq->
ƒ_£˘‹s
);

946 
	`add_disk_øndom√ss
(
rq
->
rq_disk
);

947 
	`•ö_lock_úqßve
(
q
->
queue_lock
, 
Êags
);

948 
	`íd_th©_ªque°_œ°
(
rq
,Ñq->
îr‹s
);

949 
	`•ö_u∆ock_úqª°‹e
(
q
->
queue_lock
, 
Êags
);

950 
	}
}

952 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4, 12, 0)

955 
	$sh™n⁄_íd_ªque°
(
sh™n⁄_Ãeq_t
 *
Ãeq
)

957 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

958 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

959 
	`blk_íd_ªque°_Æl
(
rq
,Ñq->
îr‹s
 ? 0 : -
EIO
);

961 
	`blk_íd_ªque°
(
rq
,Ñq->
îr‹s
 ? 0 : -
EIO
, 
	`blk_rq_byãs
(rq));

963 
	}
}

967 
	$sh™n⁄_íd_ªque°
(
sh™n⁄_Ãeq_t
 *
Ãeq
, 
îr‹
)

969 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

971 
	`blk_íd_ªque°
(
rq
, 
îr‹
 ? 0 : -
EIO
, 
	`blk_rq_byãs
(rq));

972 
	}
}

976 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4, 12, 0)

977 
	$sh™n⁄_£t_Ãeq_îr‹s
(
sh™n⁄_Ãeq_t
 *
Ãeq
, 
îr‹s
)

979 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

981 
rq
->
îr‹s
 =Érrors;

982 
	}
}

985 
sh™n⁄_scsi_íd_io_ac˘
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
sh™n⁄_bio
 *
sbio
, 
duøti⁄
);

986 
	$sh™n⁄_com∂ëe_fs_io
(*
ho°d©a
, 
sh™n⁄_gídisk_t
 *
gd
, 
sh™n⁄_bio
 *
sbio
)

989 i‡(
sbio
->
bio
) {

990 i‡(
sbio
->
√ed_boun˚
) {

991 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

992 
	`sh™n⁄_c›y_boun˚_∑ges
(
sbio
->
bio
, sbio->
sg
, 0);

993 
	`sh™n⁄_‰ì_boun˚_∑ges
(
sbio
->
sg
, sbio->
u£d_sg_cou¡
);

996 
	`sh™n⁄_íd_io_ac˘
(
gd
, 
sbio
->
bio
, 
	`gë_jiffõs
(Ë- sbio->
°¨t_time
);

997 i‡(
	`likñy
(
sbio
->
°©us
 == 0))

998 
	`sh™n⁄_bio_ídio
(
sbio
->
bio
, 0);

1000 
	`sh™n⁄_îr
("Eº‹ se˘‹s!, sètus=0x%x, dma_dú=%d.\n", 
sbio
->
°©us
, sbio->
dma_dú
);

1001 
	`sh™n⁄_bio_ídio
(
sbio
->
bio
, -
EIO
);

1003 } i‡(
sbio
->
Ãeq
) {

1004 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1005 i‡(
	`likñy
(
sbio
->
°©us
 == 0))

1006 
	`sh™n⁄_£t_Ãeq_îr‹s
(
sbio
->
Ãeq
, 
LREQ_IO_GOOD
);

1008 
	`sh™n⁄_£t_Ãeq_îr‹s
(
sbio
->
Ãeq
, 
LREQ_IO_ERROR
);

1009 
	`sh™n⁄_îr
("Eº‹ se˘‹s!, sètus=0x%x.\n", 
sbio
->
°©us
);

1011 
	`sh™n⁄_íd_ªque°
(
sbio
->
Ãeq
);

1013 
	`sh™n⁄_íd_ªque°
(
sbio
->
Ãeq
, sbio->
°©us
 ? 
LREQ_IO_ERROR
 : 
LREQ_IO_GOOD
);

1015 } i‡(
sbio
->
scsi_cmnd
) {

1016 
	`sh™n⁄_scsi_íd_io_ac˘
((
sh™n⁄_scsi_¥iv©e
 *)
ho°d©a
, 
sbio
, 
	`gë_jiffõs
(Ë- sbio->
°¨t_time
);

1017 i‡(
	`likñy
(
sbio
->
°©us
 == 0))

1018 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
NULL
);

1020 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_CHECK_CONDITION
, 
NULL
);

1022 
	`sh™n⁄_îr
("BUG! A fs sbio isn'tÑelatedÅoá bio oráÑequest!");

1023 
	`BUG
();

1025 
	}
}

1028 
ölöe
 
£˘‹_t
 
	$sh™n⁄_blk_rq_pos
(
ªque°
 *
rq
)

1030 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

1031  
	`blk_rq_pos
(
rq
);

1033  
rq
->
h¨d_£˘‹
;

1035 
	}
}

1039 
ölöe
 
	$sh™n⁄_blk_rq_byãs
(
ªque°
 *
rq
)

1041 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

1042  
	`blk_rq_byãs
(
rq
);

1044 i‡(
	`blk_fs_ªque°
(
rq
))

1045  
rq
->
h¨d_ƒ_£˘‹s
 << 9;

1046  
rq
->
d©a_Àn
;

1048 
	}
}

1050 
	$sh™n⁄_Ãeq_£gmíts
(
sh™n⁄_Ãeq_t
 *
Ãeq
)

1052 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

1053 
bio
 *biÿ
NULL
;

1054 
£gmíts
 = 0;

1056 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

1057 
	`__rq_f‹_óch_bio
(
bio
, 
rq
)

1058 
£gmíts
 +
	`sh™n⁄_bio_£gmíts
(
bio
);

1060 
	`rq_f‹_óch_bio
(
bio
, 
rq
)

1061 
£gmíts
 +
	`sh™n⁄_bio_£gmíts
(
bio
);

1064  
£gmíts
;

1065 
	}
}

1067 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 14, 0)

1068 
	$sh™n⁄_c⁄vît_Ãeq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_Ãeq_t
 *
Ãeq
)

1070 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
;

1071 
bio_vec
 
bvec
;

1072 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

1073 
i
, 
off£t
, 
ªmaöed_size
, 
m≠_size
 = 0, 
und⁄e
 = 0;

1074 
logicb_size
 = 
	`gë_logicb_size
(
sdev
);

1075 
ªq_ôî©‹
 
ôî
;

1077 
sbio
->
£gmíts
 = 
	`sh™n⁄_Ãeq_£gmíts
(
Ãeq
);

1078 
sbio
->
sg_cou¡
 = 2 * sbio->
£gmíts
 + 1;

1079 
sbio
->
sg
 = 
	`sh™n⁄_sg_Æloc
(sbio->
sg_cou¡
, 
GFP_SHANNON
);

1080 i‡(
sbio
->
sg
 =
NULL
) {

1081 
	`sh™n⁄_îr
("alloc sg failed.\n");

1082  -
ENOMEM
;

1084 
	`sh™n⁄_sg_öô_èbÀ
(
sbio
->
sg
, sbio->
sg_cou¡
);

1086 
sbio
->
bio_size
 = 
	`sh™n⁄_blk_rq_byãs
(
rq
);

1087 
sbio
->
°¨t_£˘‹
 = 
	`sh™n⁄_blk_rq_pos
(
rq
);

1089 
sbio
->
fú°_size
 = 
logicb_size
 - ((sbio->
°¨t_£˘‹
 << 9) & (logicb_size - 1));

1090 
sbio
->
fú°_size
 = sbio->fú°_sizê% 
logicb_size
;

1091 
sbio
->
fú°_size
 = 
	`mö
(sbio->
bio_size
, sbio->first_size);

1094 
ªmaöed_size
 = 
sbio
->
fú°_size
 ? sbio->fú°_sizê: 
logicb_size
;

1096 
sbio
->
has_hﬁe
 = 0;

1097 
sbio
->
u£d_sg_cou¡
 = 0;

1099 
i
 = 0;

1100 
	`rq_f‹_óch_£gmít
(
bvec
, 
rq
, 
ôî
)

1103 i‡((
i
 !0Ë&& (
bvec
.
bv_off£t
 != 0))

1104 
sbio
->
has_hﬁe
 = 1;

1106 i‡((
i
 !(
sbio
->
£gmíts
 - 1)Ë&& ((
bvec
.
bv_off£t
 + bvec.
bv_Àn
) != 4096))

1107 
sbio
->
has_hﬁe
 = 1;

1109 
off£t
 = 0;

1110 
off£t
 < 
bvec
.
bv_Àn
) {

1111 i‡((
bvec
.
bv_Àn
 - 
off£t
Ë< 
ªmaöed_size
) {

1112 
m≠_size
 = 
bvec
.
bv_Àn
 - 
off£t
;

1113 
und⁄e
 = 1;

1115 
m≠_size
 = 
ªmaöed_size
;

1116 
und⁄e
 = 0;

1118 
ªmaöed_size
 -
m≠_size
;

1119 i‡(
ªmaöed_size
 == 0)

1120 
ªmaöed_size
 = 
logicb_size
;

1121 
sg
 = sg ? 
	`sh™n⁄_sg_√xt
(sgË: 
sbio
->sg;

1122 
	`sh™n⁄_sg_£t_∑ge
(
sg
, 
bvec
.
bv_∑ge
, 
m≠_size
, bvec.
bv_off£t
 + 
off£t
);

1123 
sbio
->
u£d_sg_cou¡
++;

1125 
off£t
 +
m≠_size
;

1127 
i
++;

1130 
	`sh™n⁄_sg_m¨k_íd
(
sg
);

1133 
	}
}

1135 
	$sh™n⁄_c⁄vît_Ãeq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_Ãeq_t
 *
Ãeq
)

1137 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
;

1138 
bio_vec
 *
bvec
;

1139 
ªque°
 *
rq
 = (ªque° *)
Ãeq
;

1140 
i
, 
off£t
, 
ªmaöed_size
, 
m≠_size
 = 0, 
und⁄e
 = 0;

1141 
logicb_size
 = 
	`gë_logicb_size
(
sdev
);

1142 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

1143 
ªq_ôî©‹
 
ôî
;

1145 
bio
 *bio;

1146 
j
;

1149 
sbio
->
£gmíts
 = 
	`sh™n⁄_Ãeq_£gmíts
(
Ãeq
);

1150 
sbio
->
sg_cou¡
 = 2 * sbio->
£gmíts
 + 1;

1151 
sbio
->
sg
 = 
	`sh™n⁄_sg_Æloc
(sbio->
sg_cou¡
, 
GFP_SHANNON
);

1152 i‡(
sbio
->
sg
 =
NULL
) {

1153 
	`sh™n⁄_îr
("alloc sg failed.\n");

1154  -
ENOMEM
;

1156 
	`sh™n⁄_sg_öô_èbÀ
(
sbio
->
sg
, sbio->
sg_cou¡
);

1158 
sbio
->
bio_size
 = 
	`sh™n⁄_blk_rq_byãs
(
rq
);

1159 
sbio
->
°¨t_£˘‹
 = 
	`sh™n⁄_blk_rq_pos
(
rq
);

1161 
sbio
->
fú°_size
 = 
logicb_size
 - ((sbio->
°¨t_£˘‹
 << 9) & (logicb_size - 1));

1162 
sbio
->
fú°_size
 = sbio->fú°_sizê% 
logicb_size
;

1163 
sbio
->
fú°_size
 = 
	`mö
(sbio->
bio_size
, sbio->first_size);

1166 
ªmaöed_size
 = 
sbio
->
fú°_size
 ? sbio->fú°_sizê: 
logicb_size
;

1168 
sbio
->
has_hﬁe
 = 0;

1169 
sbio
->
u£d_sg_cou¡
 = 0;

1171 
i
 = 0;

1172 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

1173 
	`rq_f‹_óch_£gmít
(
bvec
, 
rq
, 
ôî
)

1175 
	`rq_f‹_óch_bio
(
bio
, 
rq
)

1176 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
j
)

1180 i‡((
i
 !0Ë&& (
bvec
->
bv_off£t
 != 0))

1181 
sbio
->
has_hﬁe
 = 1;

1183 i‡((
i
 !(
sbio
->
£gmíts
 - 1)Ë&& ((
bvec
->
bv_off£t
 + bvec->
bv_Àn
) != 4096))

1184 
sbio
->
has_hﬁe
 = 1;

1186 
off£t
 = 0;

1187 
off£t
 < 
bvec
->
bv_Àn
) {

1188 i‡((
bvec
->
bv_Àn
 - 
off£t
Ë< 
ªmaöed_size
) {

1189 
m≠_size
 = 
bvec
->
bv_Àn
 - 
off£t
;

1190 
und⁄e
 = 1;

1192 
m≠_size
 = 
ªmaöed_size
;

1193 
und⁄e
 = 0;

1195 
ªmaöed_size
 -
m≠_size
;

1196 i‡(
ªmaöed_size
 == 0)

1197 
ªmaöed_size
 = 
logicb_size
;

1198 
sg
 = sg ? 
	`sh™n⁄_sg_√xt
(sgË: 
sbio
->sg;

1199 
	`sh™n⁄_sg_£t_∑ge
(
sg
, 
bvec
->
bv_∑ge
, 
m≠_size
, bvec->
bv_off£t
 + 
off£t
);

1200 
sbio
->
u£d_sg_cou¡
++;

1202 
off£t
 +
m≠_size
;

1204 
i
++;

1207 
	`sh™n⁄_sg_m¨k_íd
(
sg
);

1210 
	}
}

1213 
	$sh™n⁄_disk_x„r_ªque°
(
sh™n⁄_dev
 *
sdev
, 
ªque°
 *
rq
)

1215 
ªt
;

1216 
sh™n⁄_bio
 *
sbio
 = 
NULL
;

1217 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1218 
logicb_size
 = 
	`gë_logicb_size
(
sdev
);

1219 
logicb_shi·
 = 
	`gë_logicb_shi·
(
sdev
);

1223 i‡(
	`sh™n⁄_check_avaûabûôy
(
sdev
))

1225 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1226 
rq
->
îr‹s
 = 
LREQ_IO_ERROR
;

1227 
	`sh™n⁄_íd_ªque°
(
rq
);

1229 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_ERROR
);

1234 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 19)

1235 i‡(!
	`blk_fs_ªque°
(
rq
))

1236 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 11, 0)

1237 i‡(
rq
->
cmd_ty≥
 !
REQ_TYPE_FS
)

1239 i‡(
	`blk_rq_is_∑s°hrough
(
rq
))

1242 
	`debugs1
("skipÇon-fsÑequest.\n");

1243 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1244 
rq
->
îr‹s
 = 
LREQ_IO_ERROR
;

1245 
	`sh™n⁄_íd_ªque°
(
rq
);

1247 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_ERROR
);

1252 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1253 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4, 8, 0)

1254 i‡(
	`u∆ikñy
(
	`ªq_›
(
rq
Ë=
REQ_OP_DISCARD
)) {

1256 i‡(
	`u∆ikñy
(
rq
->
cmd_Êags
 & 
REQ_DISCARD
)) {

1259 
u64
 
åim_°¨t
 = 
	`sh™n⁄_blk_rq_pos
(
rq
);

1260 
u64
 
åim_íd
 = 
åim_°¨t
 + (
	`sh™n⁄_blk_rq_byãs
(
rq
) >> 9);

1261 
åim_°¨t
 = 
	`_ALIGN_UP
—rim_°¨t, 
logicb_size
/512);

1262 
åim_íd
 = 
	`_ALIGN_DOWN
—rim_íd, 
logicb_size
/512);

1264 
åim_°¨t
 =Årim_°¨à>> (
logicb_shi·
 - 9);

1265 
åim_íd
 =Årim_íd >> (
logicb_shi·
 - 9);

1266 
	`sh™n⁄_disˇrd
(
sdev
, 
åim_°¨t
, 
åim_íd
);

1267 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1268 
rq
->
îr‹s
 = 
LREQ_IO_GOOD
;

1269 
	`sh™n⁄_íd_ªque°
(
rq
);

1271 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_GOOD
);

1277 i‡(
	`u∆ikñy
(
	`sh™n⁄_blk_rq_byãs
(
rq
) == 0)) {

1278 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1279 
rq
->
îr‹s
 = 
LREQ_IO_GOOD
;

1280 
	`sh™n⁄_íd_ªque°
(
rq
);

1282 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_GOOD
);

1287 i‡(
	`u∆ikñy
(
	`sh™n⁄_disk_ªad⁄ly
(
sdev
)Ë&& (
	`rq_d©a_dú
(
rq
Ë=
LREQ_WRITE
)) {

1288 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1289 
rq
->
îr‹s
 = 
LREQ_IO_ERROR
;

1290 
	`sh™n⁄_íd_ªque°
(
rq
);

1292 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_ERROR
);

1297 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1298 
sbio
->
bio
 = 
NULL
;

1299 
sbio
->
Ãeq
 = 
rq
;

1300 i‡(
	`rq_d©a_dú
(
rq
))

1301 
sbio
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

1303 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1304 
	`£t_sbio_debug_èg
(
sbio
, 
LINUX_REQ_TAG
);

1306 
ªt
 = 
	`sh™n⁄_c⁄vît_Ãeq
(
sdev
, 
sbio
, 
rq
);

1307 i‡(
ªt
)

1308 
‰ì_sbio
;

1310 
ªt
 = 
	`sh™n⁄_submô_bio
(
sdev
, 
sbio
);

1311 i‡(
ªt
)

1312 
‰ì_sg_li°
;

1316 
‰ì_sg_li°
:

1317 i‡(
sbio
->
sg
)

1318 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

1319 
‰ì_sbio
:

1320 
	`‰ì_sbio
(
sbio
);

1321 i‡(
ªt
 =-
ENOMEM
) {

1323  -
ENOMEM
;

1325 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1326 
rq
->
îr‹s
 = 
LREQ_IO_ERROR
;

1327 
	`sh™n⁄_íd_ªque°
(
rq
);

1329 
	`sh™n⁄_íd_ªque°
(
rq
, 
LREQ_IO_ERROR
);

1334 
	}
}

1336 
	$sh™n⁄_disk_ªque°
(
ªque°_queue
 *
q
)

1338 
sh™n⁄_dev
 *
sdev
 = 
q
->
queued©a
;

1339 
ªque°
 *
rq
;

1340 
ªt
;

1342 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

1343 (
rq
 = 
	`blk_≥ek_ªque°
(
q
))) {

1344 
	`blk_°¨t_ªque°
(
rq
);

1346 (
rq
 = 
	`ñv_√xt_ªque°
(
q
))) {

1347 
	`blkdev_dequeue_ªque°
(
rq
);

1349 
	`•ö_u∆ock_úq
(
q
->
queue_lock
);

1351 
ªt
 = 
	`sh™n⁄_disk_x„r_ªque°
(
sdev
, 
rq
);

1352 i‡(
ªt
 =-
ENOMEM
) {

1353 
	`•ö_lock_úq
(
q
->
queue_lock
);

1354 
	`blk_ªqueue_ªque°
(
q
, 
rq
);

1355 
	`•ö_u∆ock_úq
(
q
->
queue_lock
);

1357 
	`•ö_lock_úq
(
q
->
queue_lock
);

1359 
	}
}

1361 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4, 18, 0)

1362 
	$sh™n⁄_ñev©‹_ch™ge
(
ªque°_queue
 *
q
, *
«me
)

1364 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 36)

1365 
	`ñev©‹_exô
(
q
->
ñev©‹
);

1366 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

1367  
	`ñev©‹_ch™ge
(
q
, 
«me
);

1369 
	`ñev©‹_exô
(
q
, q->
ñev©‹
);

1372 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 32)

1373 
q
->
ñev©‹
 = 
NULL
;

1375  
	`ñev©‹_öô
(
q
, 
«me
);

1376 
	}
}

1379 
sh™n⁄_ªque°_queue_t
 *
	$sh™n⁄_öô_queue
(*
d©a
, 
sh™n⁄_•ölock_t
 *
lock
)

1381 
ªque°_queue
 *
queue
 = 
NULL
;

1383 
	`sh™n⁄_•ö_lock_öô
(
lock
);

1384 
queue
 = 
	`blk_öô_queue
((
ªque°_‚_¥oc
 *)
sh™n⁄_disk_ªque°
,

1385 (
•ölock_t
 *)
lock
);

1387 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 18, 0)

1388 i‡(
queue
) {

1389 
ñev©‹_«me
[] = "noop";

1390 i‡(
	`sh™n⁄_ñev©‹_ch™ge
(
queue
, 
ñev©‹_«me
)) {

1391 
	`sh™n⁄_îr
("FailedÅo initializeÇoop io scheduler.\n");

1392 
	`blk_˛ónup_queue
(
queue
);

1393 
queue
 = 
NULL
;

1395 
	`sh™n⁄_öfo
("usingÇoop io scheduler.\n");

1396 
queue
->
queued©a
 = 
d©a
;

1401  
queue
;

1402 
	}
}

1404 
sh™n⁄_ªque°_queue_t
 *
	$sh™n⁄_Æloc_queue
(*
d©a
, 
ns
)

1406 
ªque°_queue
 *
queue
 = 
NULL
;

1408 
queue
 = 
	`blk_Æloc_queue
(
GFP_SHANNON
);

1409 i‡(
queue
) {

1410 i‡(
ns
)

1411 
	`blk_queue_make_ªque°
(
queue
, 
sh™n⁄_make_ªque°_wøµî_ns
);

1413 
	`blk_queue_make_ªque°
(
queue
, 
sh™n⁄_make_ªque°_wøµî
);

1414 
queue
->
queued©a
 = 
d©a
;

1417  
queue
;

1418 
	}
}

1420 
sh™n⁄_ªque°_queue_t
 *
	$sh™n⁄_¸óã_blkqueue
(*
d©a
, 
sh™n⁄_•ölock_t
 *
lock
, 
ns
)

1422 i‡(
sh™n⁄_u£_iosched
)

1423  
	`sh™n⁄_öô_queue
(
d©a
, 
lock
);

1425  
	`sh™n⁄_Æloc_queue
(
d©a
, 
ns
);

1426 
	}
}

	@shannon_block.h

1 #i‚de‡
__SHANNON_BLOCK_H


2 
	#__SHANNON_BLOCK_H


	)

4 
	~"sh™n⁄_li°.h
"

5 
	~"sh™n⁄_c⁄fig.h
"

6 
	~"sh™n⁄_kc‹e.h
"

7 
	~"sh™n⁄_sˇâî.h
"

8 
	~"sh™n⁄_dma.h
"

9 
	~"sh™n⁄_w‹kqueue.h
"

10 
	~"sh™n⁄_scsi.h
"

13 
	tsh™n⁄_gídisk_t
;

14 
	tsh™n⁄_ªque°_queue_t
;

15 
	tsh™n⁄_bio_t
;

16 
	tsh™n⁄_Ãeq_t
;

17 
	tsh™n⁄_£˘‹_t
;

18 
u32
 
	tlogicb_t
;

19 
u64
 
	tlogicb64_t
;

21 
	#_ALIGN_UP
(
addr
,
size
Ë((◊ddr)+((
	`ty≥of
◊ddr))(size)-1))&(~(—y≥of◊ddr))(size)-1)))

	)

22 
	#_ALIGN_DOWN
(
addr
,
size
Ë(◊ddr)&(~((
	`ty≥of
◊ddr))(size)-1)))

	)

24 
	#MAKE_REQUEST_TAG
 0x7878787878780000

	)

25 
	#LINUX_REQ_TAG
 0xdefdefdefdef0000

	)

27 
	#LINUX_BIO_READ
 0

	)

28 
	#LINUX_BIO_WRITE
 1

	)

30 
	#LREQ_READ
 0

	)

31 
	#LREQ_WRITE
 1

	)

34 
	gsh™n⁄_«me•a˚
;

35 
	ssh™n⁄_bio
 {

36 #ifde‡
CONFIG_SHANNON_DEBUG


37 
	mèg
;

38 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


39 
sh™n⁄_li°_hód
 
	mdebug_li°
;

42 
	m°¨t_time
;

43 
sh™n⁄_©omic_t
 
	mu£r_cou¡
;

44 
	mdma_dú
;

45 
	mc‹ª˘ed_bôs
;

46 
	#HAVE_BLANK_SECTOR
 1

	)

47 
	#HAVE_ERROR_SECTOR
 2

	)

48 
	m°©us
;

49 
	#BUFFER_WRITE
 1

	)

50 
	#DIRECT_WRITE
 2

	)

51 
	mwrôe_mëhod
;

53 
sh™n⁄_£˘‹_t
 
	m°¨t_£˘‹
;

54 
	mbio_size
;

55 
	mfú°_size
;

56 
	mhas_hﬁe
;

57 
logicb_t
 
	mlogicbs
;

58 
	m£gmíts
;

60 
u16
 
	mns_id
;

61 
u16
 
	mns_£q_num
;

62 
	mwaô_dev_pick_mask
;

64 
sh™n⁄_w‹k_°ru˘
 
	mmake_ªq_w‹k
;

65 
sh™n⁄_w‹k_°ru˘
 
	mcb_w‹k
;

66 (*
	mˇŒback
)(
sh™n⁄_bio
 *
	msbio
);

67 *
	md©a
;

68 *
	md©a2
;

69 
	mmay_¶ìp_ö_ˇŒback
;

72 *
	mvút_addr
;

73 
sh™n⁄_dma_addr_t
 
	mdma_addªss
;

75 
	mœãncy
;

76 
sh™n⁄_li°_hód
 
	mªq_li°
;

77 
sh™n⁄_li°_hód
 
	mglobÆ_li°
;

79 
sh™n⁄_bio_t
 *
	mbio
;

80 
sh™n⁄_Ãeq_t
 *
	mÃeq
;

81 
	msg_cou¡
;

82 
	mu£d_sg_cou¡
;

83 
sh™n⁄_sg_li°_t
 *
	msg
;

85 
	movîœp
;

86 
	m√ed_boun˚
;

89 
sh™n⁄_scsi_¥iv©e
 *
	mho°d©a
;

90 *
	mscsi_cmnd
;

91 *
	mcmd
;

92 
sh™n⁄_w‹k_°ru˘
 
	mscsi_w‹k
;

96 
sh™n⁄_bio
 *
Æloc_sbio
(
gÂ_t
 
gÂ_mask
);

97 
‰ì_sbio
(
sh™n⁄_bio
 *
sbio
);

99 #ifde‡
CONFIG_SHANNON_DEBUG


100 
£t_sbio_debug_èg
(
sh™n⁄_bio
 *, );

102 
ölöe
 
	$£t_sbio_debug_èg
(
sh™n⁄_bio
 *
sbio
, 
èg
){
	}
}

106 
sh™n⁄_gídisk_t
 *
sh™n⁄_Æloc_disk
(
mö‹s
);

107 
sh™n⁄_öô_gídisk
(
sh™n⁄_gídisk_t
 *
disk
, *
«me
, 
maj‹
, 
mö‹_•™
, 
fú°_mö‹
, 
sh™n⁄_ªque°_queue_t
 *
rq
, *
¥i
);

108 
sh™n⁄_£t_ˇ∑côy
(
sh™n⁄_gídisk_t
 *
disk
, 
sh™n⁄_£˘‹_t
 
size
);

109 
sh™n⁄_£t_disk_ro
(
sh™n⁄_gídisk_t
 *
disk
, 
Êag
);

110 
sh™n⁄_put_disk
(
sh™n⁄_gídisk_t
 *
disk
);

111 
sh™n⁄_add_disk
(
sh™n⁄_gídisk_t
 *
disk
);

112 
sh™n⁄_dñ_gídisk
(
sh™n⁄_gídisk_t
 *
gp
);

115 
sh™n⁄_ªgi°î_blkdev
(
maj‹
, c⁄° *
«me
);

116 
sh™n⁄_uƒegi°î_blkdev
(
maj‹
, c⁄° *
«me
);

118 
	gsh™n⁄_«me•a˚
;

121 
	gsh™n⁄_dev
;

122 
	gsh™n⁄_disk
;

123 
sh™n⁄_ªque°_queue_t
 *
sh™n⁄_¸óã_blkqueue
(*, 
sh™n⁄_•ölock_t
 *
lock
, );

124 
sh™n⁄_blk_queue_block_size
(
sh™n⁄_ªque°_queue_t
 *
queue
, , );

125 
sh™n⁄_blk_queue_max_hw_£˘‹s
(
sh™n⁄_ªque°_queue_t
 *, );

126 
sh™n⁄_blk_queue_io_mö
(
sh™n⁄_ªque°_queue_t
 *
queue
, 
mö
);

127 
sh™n⁄_blk_queue_io_›t
(
sh™n⁄_ªque°_queue_t
 *
queue
, 
›t
);

128 
sh™n⁄_blk_˛ónup_queue
(
sh™n⁄_ªque°_queue_t
 *
q
);

129 
sh™n⁄_åim_£âög
(
sh™n⁄_ªque°_queue_t
 *
queue
);

130 
sh™n⁄_rŸ©i⁄Æ_£âög
(
sh™n⁄_ªque°_queue_t
 *
queue
);

133 
	#BIO_RW_PRIO
 16

	)

134 
sh™n⁄_£˘‹_t
 
gë_bi_£˘‹
(
sh™n⁄_bio_t
 *
bio
);

135 
sh™n⁄_bio_Êagged
(
sh™n⁄_bio_t
 *
bio
, 
Êag
);

136 
sh™n⁄_bio_d©a_dú
(
sh™n⁄_bio_t
 *
bio
);

137 
sh™n⁄_com∂ëe_fs_io
(*
ho°d©a
, 
sh™n⁄_gídisk_t
 *
gd
, 
sh™n⁄_bio
 *
sbio
);

140 
íd_scsi_cmnd
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_scsi_cmd_°©us
 
°©us
, *
buf
);

	@shannon_buffer.c

13 #ifde‡
SHANNON_USE_WRITE_BUFFER


15 
	$∂ug_bufq
(
sh™n⁄_dev
 *
sdev
)

17 
sdev
->
bufq_∂ugged
 = 1;

18 
	}
}

20 
	$u≈lug_bufq
(
sh™n⁄_dev
 *
sdev
)

22 
sdev
->
bufq_∂ugged
 = 0;

23 
	}
}

25 
	$bufq_queue_dïth
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

27  (
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
] + 
QUEUE_SIZE
 - sdev->
bufq_cq_èû
[head_index]) % QUEUE_SIZE;

28 
	}
}

30 
	$down_bufq_limô
(
sh™n⁄_dev
 *
sdev
, 
low_bound
, 
°ï
)

32 
sdev
->
buf„r_wrôe_limô
 -
°ï
;

33 i‡(
sdev
->
buf„r_wrôe_limô
 <
low_bound
)

34 
sdev
->
buf„r_wrôe_limô
 = 
low_bound
;

35 
	}
}

37 
	$up_bufq_limô
(
sh™n⁄_dev
 *
sdev
, 
high_bound
, 
°ï
)

39 
sdev
->
buf„r_wrôe_limô
 +
°ï
;

40 i‡(
sdev
->
buf„r_wrôe_limô
 >
high_bound
)

41 
sdev
->
buf„r_wrôe_limô
 = 
high_bound
;

42 
	}
}

44 
	tAºay
[2];

45 
	gbufq_limô_bound_512
[3][2] = {

51 
	gbufq_limô_bound_4k
[3][2] = {

57 
	#ALL_DIRECT_WRITE_512
 1100

	)

58 
	#ALL_DIRECT_WRITE_4K
 780

	)

59 
	$upd©e_bufq_limô
(
sh™n⁄_dev
 *
sdev
)

61 
≥ndög_wrôes
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
);

62 
cuºít_dïth
, 
ödex
;

63 
Aºay
 *
bound
;

65 i‡(
sdev
->
logicb_size
 == 512)

66 
ödex
 = 
≥ndög_wrôes
 / (
ALL_DIRECT_WRITE_512
 / 3);

68 
ödex
 = 
≥ndög_wrôes
 / (
ALL_DIRECT_WRITE_4K
 / 3);

69 i‡(
ödex
 >= 3) {

70 
sdev
->
buf„r_wrôe_limô
 = 0;

74 i‡(
sdev
->
logicb_size
 == 512)

75 
bound
 = &
bufq_limô_bound_512
[0];

77 
bound
 = &
bufq_limô_bound_4k
[0];

79 
cuºít_dïth
 = 
	`bufq_queue_dïth
(
sdev
, 0) + bufq_queue_depth(sdev, 1);

80 i‡(
cuºít_dïth
 == 0)

81 
	`up_bufq_limô
(
sdev
, 
bound
[
ödex
][1], (3 - index) * 24);

82 i‡(
cuºít_dïth
 > 
sdev
->
logicbs_ö_chunk
 * 24)

83 
	`down_bufq_limô
(
sdev
, 
bound
[
ödex
][0], 1);

84 
	}
}

87 
	$bufq_åaffic_jam
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

89 i‡(
	`u∆ikñy
(
sdev
->
bufq_∂ugged
 == 1))

92 i‡(
	`bufq_queue_dïth
(
sdev
, 
hód_ödex
Ë> sdev->
buf„r_wrôe_limô
)

96 
	}
}

99 
	$bufq_åaffic_lowî
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

102 i‡(
sdev
->
bufq_sq_hód
[
hód_ödex
] =sdev->
bufq_cq_èû
[head_index])

106 
	}
}

108 
	$upd©e_bufq_sq_hód
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

110 i‡(
sdev
->
bufq_sq_hw_hód
[
hód_ödex
] !sdev->
bufq_sq_hód
[head_index]) {

111 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
hód_ödex
]);

112 
	`sh™n⁄_£t_bô
(
sdev
->
öå_big_shi·
[
hód_ödex
], sdev->
pŸítül_öãºu±_ve˘‹s
);

113 
	`sh™n⁄_£t_bô
(
sdev
->
bufq_ack_öå_shi·
, sdev->
pŸítül_öãºu±_ve˘‹s
);

114 
sdev
->
bufq_sq_hw_hód
[
hód_ödex
] = sdev->
bufq_sq_hód
[head_index];

115 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

116 
	`sh™n⁄_wake_up
(&
sdev
->
bufq_emu_waô
[
hód_ödex
]);

118 
	`wrôe_ªg_ß„
(
sdev
, sdev->
bufq_sq_hw_hód
[
hód_ödex
], &sdev->
bufq_b¨
[hód_ödex]->
sq_hód
);

120 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
hód_ödex
]);

122 
	}
}

128 
	$bufq_Æloc_cmd
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
cou¡
)

130 
ªt
 = -
EBUSY
;

131 
bufq_cq_èû
 = 
sdev
->bufq_cq_èû[
hód_ödex
];

135 i‡(
bufq_cq_èû
 =
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
]) {

136 
ªt
 = 
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
];

137 
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
] = (sdev->bufq_sq_hód_tmp[hód_ödex] + (
cou¡
 << 3)Ë% 
QUEUE_SIZE
;

138 
out
;

141 i‡(((
bufq_cq_èû
 + 
QUEUE_SIZE
Ë- 
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
]Ë% QUEUE_SIZE <(
cou¡
 << 3)) {

142 
out
;

144 
ªt
 = 
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
];

145 
sdev
->
bufq_sq_hód_tmp
[
hód_ödex
] = (sdev->bufq_sq_hód_tmp[hód_ödex] + (
cou¡
 << 3)Ë% 
QUEUE_SIZE
;

146 
out
;

148 
out
:

149  
ªt
;

150 
	}
}

157 
	$bufq_Æloc_cmd_¶ì∑bÀ
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
cou¡
)

159 
cmd_off£t
;

161 
	`sh™n⁄_waô_evít
(
sdev
->
bufq_waô_cmd_pos
[
hód_ödex
], (
cmd_off£t
 = 
	`bufq_Æloc_cmd
(sdev, hód_ödex, 
cou¡
)) >= 0);

162 i‡(
	`u∆ikñy
(
cmd_off£t
 < 0))

163  -
EINTR
;

165 
	`˛ór_comm™d_queue
((
u64
 *)
sdev
->
bufq_sq_addr
[
hód_ödex
], 
cmd_off£t
, 
cou¡
, 0);

166 i‡(
has_dma_dñay
)

167 
	`˛ór_comm™d_queue
((
u64
 *)
sdev
->
bufq_cq_addr
[
hód_ödex
], 
cmd_off£t
, 
cou¡
, 
COMP_QUEUE_FILL
);

169  
cmd_off£t
;

170 
	}
}

172 
	$sh™n⁄_ªad_buf_cmd
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

174 
sh™n⁄_buf_cmd
 *
ªad
;

175 
cmd_off£t
, 
cmdid
, 
cou¡
;

176 
u64
 *
±e
;

177 
hód_ödex
 = 
	`gë_hód_ödex_ö_bufq
(
sdev
, &
ªq
->
pba
);

178 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

179 
ªt
;

180 
is_ovîœp
 = 0;

182 i‡(
sdev
->
ovîœp_wrôe
 && 
	`pba_is_equÆ
(&
ªq
->
pba
, &sdev->
ovîœp
->pba)) {

183 
hód_ödex
 = 
HOT_INDEX
;

184 
is_ovîœp
 = 1;

187 i‡(
hód_ödex
 < 0)

189 
cou¡
 = (
ªq
->
dma_addªss_2
)? 3 : 2;

190 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

191 i‡(
is_ovîœp
) {

192 
u64
 
_mëad©a
 = (((u64)
lba_ty≥
[
sdev
->
lba_f‹m©
]Ë<< 
DATATYPE_SHIFT
) | \

193 (((
u64
)
ªq
->
ns_id
 & 
NS_ID_MASK
Ë<< 
NS_ID_SHIFT
) | \

194 (((
u64
)
ªq
->
ns_£q_num
 & 
NS_SEQ_NUM_MASK
Ë<< 
NS_SEQ_NUM_SHIFT
) | \

195 (
ªq
->
lba
 & 
LONG_LBA_MASK
);

196 
	`BUG_ON
(
_mëad©a
 =
övÆid_mëad©a
[
sdev
->
lba_f‹m©
]);

197 i‡(
ªq
->
£ndî
 =
FROM_OVERLAP
)

198 
	`BUG_ON
(
_mëad©a
 !
sdev
->
ovîœp
->
buf„d_mëad©a
);

199 i‡(
_mëad©a
 !
sdev
->
ovîœp
->
buf„d_mëad©a
) {

200 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
NULL
;

201 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

202 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

204 i‡(
	`u∆ikñy
(
ªq
->
ovîœp_ªadtimes
 - 99) % 100 == 99) {

205 
	`sh™n⁄_w¨n
("req->lba=%lu, metadata=0x%16llx,Ñeadtimes=%d, buffed_metadata=%lu, _metadata=%lu.\n", \

206 
ªq
->
lba
, 
_mëad©a
,Ñeq->
ovîœp_ªadtimes
, 
sdev
->
ovîœp
->
buf„d_mëad©a
, \

207 
sdev
->
ovîœp
->
_mëad©a
);

208 
	`sh™n⁄_m¶ìp
(1);

210 
ªq
->
ovîœp_ªadtimes
++;

211 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

212 i‡(
•oﬁ
) {

213 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

214 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

215 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

216 
	`BUG
();

218 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

219 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

220 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

221 
	`BUG
();

223 
sdisk
 = &
ns
->sdisk;

226 
	`Õmt_lock
(
sdev
, &sdev->
sdisk
, 
ªq
->
lba
);

227 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

228 
	`Õmt_u∆ock
(
sdev
, &sdev->
sdisk
, 
ªq
->
lba
);

229 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

230 i‡(
ªt
 < 0) {

231 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

232 
	`sh™n⁄_log
("%s:Üb®%x may bêdisˇrded. Ju° ign‹êô.\n", 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

233 
ªq
->
°©e
 = 
REQ_DONE
;

234 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

237 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

239 
ªq
->
£q_num
 = 
sb
->seq_num;

240 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
ªq
->
pba
.lun],Ñeq);

241 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

247 
	`BUG_ON
(
hód_ödex
 < 0);

248 
cmd_off£t
 = 
	`bufq_Æloc_cmd_¶ì∑bÀ
(
sdev
, 
hód_ödex
, 
cou¡
);

249 i‡(
cmd_off£t
 < 0) {

250 
	`sh™n⁄_îr
("weáre killed.\n");

251 
	`BUG
();

252  -
EIO
;

254 
ªq
->
°©e
 = 
REQ_BUF_QUEUE
;

255 
cmdid
 = 
cmd_off£t
 >> 3;

256 
ªad
 = (
sh™n⁄_buf_cmd
 *)(
sdev
->
bufq_sq_addr
[
hód_ödex
] + 
cmdid
);

258 
ªad
->
›code
 = 
sh_cmd_buf_ªad
;

259 
ªad
->
phy_lun
 = 
sdev
->
lun
[
ªq
->
pba
.lun]->
phy_lun_num
 % 0x100;

260 
ªad
->
logicb_ödex
 = 
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
 + (
eblk
 % sdev->
∂™es
) * sdev->logicbs_in_page;

261 
	`sh™n⁄_mem_wrôñ
(
	`make_buf_cmd_dw‹d1
(
sdev
, 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
,

262 
sdev
->
lun
[
ªq
->
pba
.lun]->
phy_lun_num
 >> 8, (ªq->
dma_addªss_2
 ? 1 : 0)), &
ªad
->
dw‹d1
);

263 
±e
 = 
	`cmd_queue_öc
(
ªad
, 1);

264 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss
, 
±e
);

265 i‡(
ªq
->
dma_addªss_2
) {

266 
±e
 = 
	`cmd_queue_öc
(pte, 1);

267 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss_2
, 
±e
);

269 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

270 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

271 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
logicbs
 = 1;

272 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
ªq_li°
);

273 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
ªq_li°
);

274 
sdev
->
bufq_sq_hód
[
hód_ödex
] = sdev->
bufq_sq_hód_tmp
[head_index];

275 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

276 
	`upd©e_bufq_sq_hód
(
sdev
, 
hód_ödex
);

279 
	}
}

281 
	$sh™n⁄_wrôe_buf_cmd
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

283 
sh™n⁄_buf_cmd
 *
wrôe
;

284 
cmd_off£t
, 
cmdid
, 
cou¡
;

285 
u64
 *
±e
;

286 
hód_ödex
 = 
ªq
->
hód
 & 
HEAD_INDEX_MASK
;

287 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

288 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
];

289 
sub_group
 *
group
 = &
sb
->sub_group[
ªq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

290 
is_ovîœp
 = 0;

292 i‡(
ªq
->
hód
 =
OVERLAP_HEAD
) {

293 
hód_ödex
 = 
HOT_INDEX
;

294 
is_ovîœp
 = 1;

296 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_cmd_queue_wrôes
);

297 
	`sh™n⁄_©omic_öc
(&
sb
->
unföished_wrôes
);

298 
cou¡
 = (
ªq
->
dma_addªss_2
)? 4 : 3;

299 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

300 i‡(
is_ovîœp
) {

301 
	`BUG_ON
(!
sdev
->
ovîœp_wrôe
);

302 
sdev
->
ovîœp
->
buf„d_mëad©a
 = 
ªq
->
_mëad©a
;

304 
cmd_off£t
 = 
	`bufq_Æloc_cmd_¶ì∑bÀ
(
sdev
, 
hód_ödex
, 
cou¡
);

305 i‡(
cmd_off£t
 < 0) {

306 
	`sh™n⁄_îr
("weáre killed.\n");

307 
	`BUG
();

308  -
EIO
;

310 
cmdid
 = 
cmd_off£t
 >> 3;

311 
wrôe
 = (
sh™n⁄_buf_cmd
 *)(
sdev
->
bufq_sq_addr
[
hód_ödex
] + 
cmdid
);

313 i‡(
sdev
->
©omic_wrôe
 && (
ªq
->
£ndî
 =
FROM_HOST
Ë&& (
	`gë_ªq_ödex
‘eqË< (ªq->
sbio
->
logicbs
 - 1)))

314 
wrôe
->
›code
 = 
sh_cmd_buf_wrôe_no_commô
;

316 
wrôe
->
›code
 = 
sh_cmd_buf_wrôe
;

317 
wrôe
->
phy_lun
 = 
sdev
->
lun
[
ªq
->
pba
.lun]->
phy_lun_num
 % 0x100;

318 
wrôe
->
logicb_ödex
 = 
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
 + (
eblk
 % sdev->
∂™es
) * sdev->logicbs_in_page;

319 
wrôe
->
byã3
 = 
	`make_buf_cmd_byã3
(
ªq
->
hód
 & 
HEAD_INDEX_MASK
, 
is_ovîœp
 ? 0 : 
group
->
phy_ödex
);

320 
	`sh™n⁄_mem_wrôñ
(
	`make_buf_cmd_dw‹d1
(
sdev
, 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
,

321 
sdev
->
lun
[
ªq
->
pba
.lun]->
phy_lun_num
 >> 8, (ªq->
dma_addªss_2
 ? 1 : 0)), &
wrôe
->
dw‹d1
);

322 
±e
 = 
	`cmd_queue_öc
(
wrôe
, 1);

323 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss
, 
±e
);

324 
±e
 = 
	`cmd_queue_öc
(pte, 1);

325 i‡(
ªq
->
dma_addªss_2
) {

326 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss_2
, 
±e
);

327 
±e
 = 
	`cmd_queue_öc
(pte, 1);

329 
	`sh™n⁄_mem_wrôeq
(
ªq
->
_mëad©a
, 
±e
);

330 
ªq
->
°©e
 = 
REQ_BUF_QUEUE
;

331 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

332 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

333 
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
logicbs
 = 1;

334 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
ªq_li°
);

335 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
].
ªq_li°
);

336 
sdev
->
bufq_sq_hód
[
hód_ödex
] = sdev->
bufq_sq_hód_tmp
[head_index];

337 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[
hód_ödex
]);

338 
	`upd©e_bufq_sq_hód
(
sdev
, 
hód_ödex
);

341 
	}
}

343 
	$m¨k_ªq_îr‹
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

345 
sh™n⁄_sb
 *
sb
;

347 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

348 i‡(
ªq
->
sbio
) {

349 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

350 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

352 
	`‰ì_ªq
(
ªq
);

353 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

355 
	}
}

357 
	$sh™n⁄_pick_øw_wrôe_buf_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

359 
hód_ödex
 = 
ªq
->
hód
 & 
HEAD_INDEX_MASK
;

361 i‡(
sdev
->
ovîœp_wrôe
)

362 
hód_ödex
 = 
HOT_INDEX
;

364 
	`£t_pba_ö_bufq
(
sdev
, &
ªq
->
pba
, 
hód_ödex
);

366 i‡(
	`sh™n⁄_wrôe_buf_cmd
(
sdev
, 
ªq
) < 0) {

367 
	`m¨k_ªq_îr‹
(
sdev
, 
ªq
);

371 
sdev
->
buf„r_wrôe_cou¡î
++;

372 
	}
}

374 
	$sh™n⁄_pick_wrôe_buf_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

376 
sh™n⁄_ªque°
 *
∑rôy
 = 
NULL
;

377 
sh™n⁄_sb
 *
sb
;

378 
hód
 = 
ªq
->head;

379 
hód_ödex
 = 
ªq
->
hód
 & 
HEAD_INDEX_MASK
;

380 
∑rôy_lun
 = 0;

382 
	`£t_pba_ö_bufq
(
sdev
, &
ªq
->
pba
, 
hód_ödex
);

384 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

385 i‡(
sdev
->
øid5_suµ‹ãd
 && (
sb
->
wr_off£t
 % (sb->
mö_d©a_luns
 * sdev->
logicbs_ö_chunk
) == 0)) {

386 
∑rôy_lun
 = 
	`gë_∑rôy_lun
(&
sb
->
sub_group
[
ªq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
]);

387 
∑rôy
 = 
	`make_∑rôy_ªq
(
sb
, 
∑rôy_lun
, 
ªq
);

390 i‡(
	`sh™n⁄_wrôe_buf_cmd
(
sdev
, 
ªq
) < 0) {

391 
	`m¨k_ªq_îr‹
(
sdev
, 
ªq
);

395 
sdev
->
buf„r_wrôe_cou¡î
++;

397 i‡(
∑rôy
) {

398 
	`sh™n⁄_∑rôy_cmd
(
sdev
->
lun
[
∑rôy_lun
]->
lun£t
, 
∑rôy
);

399 
∑rôy
 = 
NULL
;

401 i‡(
	`u∆ikñy
(
	`is_fú°_ïûog_pba
(
sb
, sb->
wr_off£t
))) {

402 
	`swôch_to_√xt_sb
(
sdev
, 
sb
, 
hód
);

404 
	}
}

406 
	$˛ór_chunk_ö_bufq
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
œ°_lun_pba
, 
hód_ödex
)

408 
∂™e
;

409 
logicb
, 
lun_pba
;

410 
µa
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
œ°_lun_pba
 / sdev->
logicbs_ö_∑ge
);

412 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

413 
logicb
 = 0;Üogicb < 
sdev
->
logicbs_ö_∑ge
;Üogicb++) {

414 
lun_pba
 = ((
µa
 + 
∂™e
 * 
sdev
->
∑ges_ö_eblock
Ë* sdev->
logicbs_ö_∑ge
Ë+ 
logicb
;

415 
	`BUG_ON
(!
	`ã°_pba_ö_bufq
(
sdev
, 
lun
, 
lun_pba
));

416 
	`˛ór_pba_ö_bufq
(
sdev
, 
lun
, 
lun_pba
, 
hód_ödex
);

417 
	`BUG_ON
(
	`ã°_pba_ö_bufq
(
sdev
, 
lun
, 
lun_pba
));

420 
	}
}

422 
ölöe
 
	$ªad_‰om_Êash
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

424 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

425 
sdev
->
buf_ªad_Áûed
++;

426 
	`add_lun_ªque°_queue_èû
(
lun
, 
ªq
);

427 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &
lun
->
lun£t
->
submô_w‹k
);

428 
	}
}

430 
	$put_chunk_ªq_to_buf
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
, 
hód_ödex
)

432 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

434 
tmp
 = 
¥eq
;

436 
ªq
 = 
tmp
;

437 
tmp
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

438 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
chunk_li°
);

439 
	`sh™n⁄_pick_wrôe_buf_ªque°
(
sdev
, 
ªq
);

440 } 
ªq
 !
tmp
);

441 
	}
}

443 
	$ªad_check_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

445 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

446 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

447 
sh™n⁄_sb
 *
sb
 = 
NULL
;

448 
lun
 = -1, 
∂™e
, 
Áû
 = 0;

450 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
SHANNON_DMA_FROMDEVICE
);

451 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

452 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

453 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

454 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

455 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

457 i‡(
sbio
->
°©us
 || (
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

458 
Áû
 = 1;

459 
	`sh™n⁄_öfo
("lun=%d,Üun_pba=%d,Écc=0x%x,Ñîód=0x%x.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

460 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

461 
lun
 = 
ªq
->
pba
.lun;

463 
	`‰ì_ªq
(
ªq
);

466 i‡(
Áû
) {

467 
	`sh™n⁄_log
("%s: m¨k buf„∏wrôêblock! sbio->°©us=0x%x.\n", 
sdev
->
sdisk
.
disk_«me
, 
sbio
->
°©us
);

468 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

469 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
))

470 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
);

472 
	`h™dÀ_wrôe_îr‹
(
sdev
, 
sb
, 
NULL
);

475 
	`sh™n⁄_k‰ì
(
sbio
->
vút_addr
);

476 
	`‰ì_sbio
(
sbio
);

477 
	}
}

479 #ifde‡
CONFIG_SHANNON_BUFFER_WRITE_VERIFY


480 
	$£nd_ªad_check_cmd
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
wªq
)

482 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

483 
sh™n⁄_bio
 *
sbio
;

484 
°rùe_∑ge
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
wªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_∑ge
);

485 
i
;

488 
sbio
 = 
	`Æloc_sbio
(
GFP_NOWAIT
);

489 
	`£t_sbio_debug_èg
(
sbio
, 
READ_CHECK_TAG
);

490 
sbio
->
vút_addr
 = 
	`sh™n⁄_kmÆloc
(
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
GFP_ATOMIC
);

491 i‡(
sbio
->
vút_addr
 =
NULL
) {

492 
	`‰ì_sbio
(
sbio
);

493  -
ENOMEM
;

495 
sbio
->
logicbs
 = 
sdev
->
logicbs_ö_chunk
;

496 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

497 
sbio
->
ˇŒback
 = 
ªad_check_ˇŒback
;

498 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

499 
sbio
->
d©a
 = 
sdev
;

500 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
SHANNON_DMA_FROMDEVICE
);

501 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

502 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

503 
	`BUG
();

504 
	`sh™n⁄_k‰ì
(
sbio
->
vút_addr
);

505 
	`‰ì_sbio
(
sbio
);

506  -
ENOMEM
;

509 
i
 = 0; i < 
sdev
->
logicbs_ö_chunk
; i++) {

510 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

511 
	`£t_ªq_debug_èg
(
ªq
, 
READ_CHECK_TAG
, 0);

512 
ªq
->
›code
 = 
sh_cmd_ªad
;

513 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

514 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

515 
ªq
->
vút_addr
 = 
sbio
->vút_add∏+ 
i
 * 
sdev
->
logicb_size
;

516 
ªq
->
dma_addªss
 = 
sbio
->dma_addªs†+ 
i
 * 
sdev
->
logicb_size
;

517 
ªq
->
pba
.
lun
 = 
wªq
->pba.lun;

518 
ªq
->
pba
.
lun_pba
 = 
°rùe_∑ge
 * 
sdev
->
logicbs_ö_∑ge
 + (
i
 / sdev->logicbs_ö_∑geË* sdev->
∑ges_ö_eblock
 * sdev->logicbs_in_page + (i % sdev->logicbs_in_page);

520 
ªq
->
sbio
 = sbio;

522 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

523 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

524 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

525 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
wªq
->
pba
.lun], 
ªq
);

527 
	`BUG_ON
(
ªq
->
pba
.
lun_pba
 !
wªq
->pba.lun_pba);

528 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[
wªq
->
pba
.lun]->
lun£t
->
submô_w‹k
);

530 
	}
}

533 
	$__h™dÀ_bufq
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
ªad_cq_hód
)

535 
sh™n⁄_buf_cmd
 *
cmd
;

536 
sh™n⁄_cmd_öfo
 *
öfo
;

537 
sh™n⁄_sb
 *
sb
;

538 
sh™n⁄_ªque°
 *
ªq
;

539 
cmdid
, 
cmd_Àn
, 
ªåy
;

540 
u64
 *
mëad©a
;

541 
u64
 
øw_cm∂
;

542 
u32
 *
°©us
, 
°©us_vÆue
;

543 
ªt
 = 0, 
has_¥ogªss
 = 0;

545 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
))

547 i‡(
	`u∆ikñy
(
ªad_cq_hód
)) {

548 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

549 
sdev
->
bufq_cq_hw_hód
[
hód_ödex
] = 
	`ªad_ªg_ß„
(sdev, &sdev->
bufq_b¨
[hód_ödex]->
cq_hód
);

551 i‡(
	`u∆ikñy
(
sdev
->
bufq_cq_hw_hód
[
hód_ödex
] > 
QUEUE_SIZE
)) {

552 
sdev
->
∂ug_out
 = 
	`check_∂ugout
(sdev);

553 i‡(
sdev
->
∂ug_out
)

555 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

556 
sdev
->
bufq_cq_hw_hód
[
hód_ödex
] = 
	`ªad_ªg_ß„
(sdev, &sdev->
bufq_b¨
[hód_ödex]->
cq_hód
);

558 i‡(
sdev
->
bufq_cq_hw_hód
[
hód_ödex
] > 
QUEUE_SIZE
) {

559 
	`sh™n⁄_îr
("head_index=%d, bufq_cq_hw_head=0x%x.\n",

560 
hód_ödex
, 
sdev
->
bufq_cq_hw_hód
[head_index]);

561 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

562 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
w©chdog_w‹k
);

567 
sdev
->
bufq_cq_hód
[
hód_ödex
] = sdev->
bufq_cq_hw_hód
[head_index];

571 
cmdid
 = 
sdev
->
bufq_cq_èû
[
hód_ödex
] >> 3;

572 
cmd
 = (
sh™n⁄_buf_cmd
 *)
sdev
->
bufq_sq_addr
[
hód_ödex
] + 
cmdid
;

573 i‡(
	`likñy
(
ªad_cq_hód
 == 0)) {

574 i‡(
sdev
->
bufq_cq_èû
[
hód_ödex
] =sdev->
bufq_sq_hód
[head_index])

576 i‡(
cmd
->
›code
 =
sh_cmd_buf_ªad
) {

578 
ªt
 = 1;

581 
øw_cm∂
 = *((
u64
 *)
sdev
->
bufq_cq_addr
[
hód_ödex
] + 
cmdid
);

583 i‡(
øw_cm∂
 =
COMP_QUEUE_FILL
)

587 i‡(
sdev
->
bufq_cq_èû
[
hód_ödex
] =sdev->
bufq_cq_hód
[head_index])

589 
øw_cm∂
 = *((
u64
 *)
sdev
->
bufq_cq_addr
[
hód_ödex
] + 
cmdid
);

590 i‡(
øw_cm∂
 =
COMP_QUEUE_FILL
)

591 
	`sh™n⁄_Æ¨m
("%s: bufq head_index=%d, cqÉrror: opcode=0x%x, sq_head=0x%x, cq_tail=0x%x, cq_head=0x%x.\n",

592 
sdev
->
sdisk
.
disk_«me
, 
hód_ödex
, 
cmd
->
›code
, sdev->
bufq_sq_hód
[head_index],

593 
sdev
->
bufq_cq_èû
[
hód_ödex
], sdev->
bufq_cq_hód
[head_index]);

596 
öfo
 = &
sdev
->
cmd_öfo
[
hód_ödex
][
cmdid
];

597 
°©us
 = (
u32
 *)(
sdev
->
bufq_cq_addr
[
hód_ödex
] + 
cmdid
);

598 
°©us_vÆue
 = 
	`sh™n⁄_mem_ªadl
(
°©us
);

599 i‡(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

600 
	`sh™n⁄_îr
("info->req_list isÉmpty!!! sq_head=%x, cq_tail=%x.\n",

601 
sdev
->
bufq_sq_hód
[
hód_ödex
], sdev->
bufq_cq_èû
[head_index]);

602 
	`BUG
();

604 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

605 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

606 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

607 
	`BUG_ON
(
	`gë_buf_cmd_phy_lun
(
cmd
->
phy_lun
, &cmd->
dw‹d1
Ë!
sdev
->
lun
[
ªq
->
pba
.lun]->
phy_lun_num
);

608 
cmd
->
›code
) {

609 
sh_cmd_buf_wrôe_no_commô
:

610 
sh_cmd_buf_wrôe
:

611 i‡(
°©us_vÆue
 > 0xf)

612 
	`sh™n⁄_Æ¨m
("%s: bufq hód_ödex=%d, opcode=0x%x, sètus=0x%x, cq_èû=0x%x.\n", 
sdev
->
sdisk
.
disk_«me
, \

613 
hód_ödex
, 
cmd
->
›code
, 
°©us_vÆue
, 
sdev
->
bufq_cq_èû
[head_index]);

615 
	`sh™n⁄_©omic_dec
(&
sdev
->
ö_cmd_queue_wrôes
);

616 i‡(
sdev
->
cmd_queue_wrôes_limô
 && 
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
Ë< 
	`GET_CMD_QUEUE_WRITES_THRESHOLD_L
(sdev)) {

617 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

618 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

620 i‡(
sdev
->
h¨d_queue_limô
 && (
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
) < sdev->hard_queue_limit)) {

621 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

622 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

624 i‡(
cmd
->
logicb_ödex
 =
sdev
->
logicbs_ö_chunk
 - 1) {

625 
	`˛ór_chunk_ö_bufq
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
hód_ödex
);

626 #ifde‡
CONFIG_SHANNON_BUFFER_WRITE_VERIFY


627 
	`£nd_ªad_check_cmd
(
sdev
, 
ªq
);

630 i‡(
ªq
->
sbio
) {

631 
ªq
->
°©e
 = 
REQ_DONE
;

632 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

634 
	`‰ì_ªq
(
ªq
);

635 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

638 
sh_cmd_buf_ªad
:

639 i‡(
°©us_vÆue
 == 0xfffffffe) {

641 
	`ªad_‰om_Êash
(
sdev
, 
ªq
);

646 i‡((
°©us_vÆue
 != 0xff) && (status_value > 0xf)) {

647 
	`sh™n⁄_Æ¨m
("%s: bufq hód_ödex=%d, opcode=0x%x, sètus=0x%x, cq_èû=0x%x.\n", 
sdev
->
sdisk
.
disk_«me
, \

648 
hód_ödex
, 
cmd
->
›code
, 
°©us_vÆue
, 
sdev
->
bufq_cq_èû
[head_index]);

649 
	`ªad_‰om_Êash
(
sdev
, 
ªq
);

653 
mëad©a
 = 
	`cmd_queue_öc
(
°©us
, 1);

654 
ªåy
 = 0;

655 
	`sh™n⁄_mem_ªadq
(
mëad©a
Ë=
COMP_QUEUE_FILL
) {

656 
ªåy
++;

657 
sdev
->
ªad_pﬁl_ªåy
++;

658 i‡(
ªåy
 > 
DMA_REORDER_RETRY_COUNT
) {

659 
	`sh™n⁄_Æ¨m
("bufq head_index=%d, DMA metadata opcode=0x%X, metadata=%llX.\n",

660 
hód_ödex
, 
cmd
->
›code
, 
ªq
->
_mëad©a
);

663 
	`sh™n⁄_b¨rõr
();

664 
	`sh™n⁄_udñay
(2);

666 
ªq
->
_mëad©a
 = 
	`sh™n⁄_mem_ªadq
(
mëad©a
);

667 
ªq
->
_ecc
 = 0;

668 i‡(
	`decom¥ess_mëad©a
(
ªq
)) {

669 
	`sh™n⁄_w¨n
("%s:Übaánd metadata don't match.Üun=%d,Üun_pba=%d,Üba=0x%lx, metadata=0x%lx. *status=0x%x.\n",

670 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
lba
, (Ïeq->
_mëad©a
, 
	`sh™n⁄_mem_ªadl
(
°©us
));

671 
	`ªad_‰om_Êash
(
sdev
, 
ªq
);

674 
ªq
->
°©e
 = 
REQ_DONE
;

675 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

678 
	`sh™n⁄_w¨n
("unknow¿›code=0x%x.\n", 
cmd
->
›code
);

680 
öfo
->
œ°_a˘ive_time
 = 0;

681 
cmd_Àn
 = 
öfo
->cmd_len;

682 
sdev
->
bufq_cq_èû
[
hód_ödex
] = (sdev->bufq_cq_èû[hód_ödex] + 
cmd_Àn
Ë% 
QUEUE_SIZE
;

684 
	`sh™n⁄_b¨rõr
();

685 i‡(
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
bufq_waô_cmd_pos
[
hód_ödex
]))

686 
	`sh™n⁄_wake_up
(&
sdev
->
bufq_waô_cmd_pos
[
hód_ödex
]);

687 i‡(!
has_¥ogªss
)

688 
has_¥ogªss
 = 1;

690 i‡(
	`likñy
(!
ªad_cq_hód
))

691 
sdev
->
bufq_cq_hód
[
hód_ödex
] = sdev->
bufq_cq_èû
[head_index];

692 i‡(
sdev
->
bufq_cq_èû
[
hód_ödex
] =sdev->
bufq_sq_hód
[head_index]) {

693 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
hód_ödex
]);

694 i‡(
sdev
->
bufq_cq_èû
[
hód_ödex
] =sdev->
bufq_sq_hód
[head_index])

695 
	`sh™n⁄_˛ór_bô
(
sdev
->
öå_big_shi·
[
hód_ödex
], sdev->
pŸítül_öãºu±_ve˘‹s
);

696 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
hód_ödex
]);

699 i‡(
sdev
->
chunk_ªq˙t
[
hód_ödex
] && 
	`bufq_åaffic_lowî
(sdev, head_index))

700 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

702 i‡(
has_¥ogªss
)

703 
sdev
->
bufq_h™g
[
hód_ödex
] = 0;

705  
ªt
;

706 
	}
}

708 
	$h™dÀ_bufq
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

710 i‡(
	`u∆ikñy
(
	`__h™dÀ_bufq
(
sdev
, 
hód_ödex
, 0)))

711 
	`__h™dÀ_bufq
(
sdev
, 
hód_ödex
, 1);

712 
	}
}

714 
	$h™dÀ_bufq_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

716 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
h™dÀ_bufq_w‹k
);

717 
i
;

719 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++)

720 
	`h™dÀ_bufq
(
sdev
, 
i
);

721 
	`sh™n⁄_c⁄d_ªsched
();

722 
	}
}

724 
	$__h™dÀ_bufq_ack_öãºu±
(
sh™n⁄_dev
 *
sdev
, 
ªad_cq_hód
)

726 
sh™n⁄_bufq_ack_cmd
 *
cmd
;

727 
sh™n⁄_sb
 *
sb
;

728 
cmdid
, 
∂™e
, 
logiˇl_lun
;

730 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
))

733 i‡(
	`u∆ikñy
(
ªad_cq_hód
)) {

734 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

735 
sdev
->
bufq_ack_cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->
bufq_ack_b¨
->
cq_hód
);

737 
sdev
->
bufq_ack_cq_hód
 = sdev->
bufq_ack_cq_hw_hód
;

738 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
 || (sdev->
bufq_ack_cq_hód
 > 
QUEUE_SIZE
)))

743 
cmdid
 = 
sdev
->
bufq_ack_cq_èû
 >> 3;

744 
cmd
 = (
sh™n⁄_bufq_ack_cmd
 *)
sdev
->
bufq_ack_cq_addr
 + 
cmdid
;

745 i‡(
	`likñy
(!
ªad_cq_hód
)) {

747 i‡(*((vﬁ©ûê
u64
 *)
cmd
Ë=
COMP_QUEUE_FILL
)

750 i‡(
sdev
->
bufq_ack_cq_èû
 =sdev->
bufq_ack_cq_hód
)

753 i‡(
cmd
->
tokí
 != 0x38)

754 
	`sh™n⁄_îr
("bufq_ack_cq_tail=0x%x,Åoken=0x%x.\n",

755 
sdev
->
bufq_ack_cq_èû
, 
cmd
->
tokí
);

756 
	`BUG_ON
(
cmd
->
tokí
 != 0x38);

757 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


758 i‡(
sdev
->
m™uÆ_wrôe_îr
) {

759 
	`m¨k_Áke_wr_bad_lu≈∑
(
sdev
, 
phy_lun_to_logiˇl_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev,

760 
	`gë_buf_cmd_phy_lun
(
cmd
->
phy_lun
, &cmd->
dw‹d1
)), 
	`gë_cmd_µa
(
sdev
, &cmd->dword1));

761 
sdev
->
m™uÆ_wrôe_îr
 = 0;

763 i‡(
	`is_Áke_wr_bad_lu≈∑
(
sdev
, 
phy_lun_to_logiˇl_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev,

764 
	`gë_buf_cmd_phy_lun
(
cmd
->
phy_lun
, &cmd->
dw‹d1
)), 
	`gë_cmd_µa
(
sdev
, &cmd->dword1))) {

765 
	`debugs1
("### Trap in fake buffer write badÜunppa:Üun=%d blk=%dÖage=%d\n",

766 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_buf_cmd_phy_lun
(
cmd
->
phy_lun
, &cmd->
dw‹d1
)),

767 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
Ë/ sdev->
∑ges_ö_eblock
, get_cmd_ppa(sdev, &cmd->dword1) % sdev->pages_in_eblock);

768 
cmd
->
°©us
 = 0xEF;

771 
sb
 = 
sdev
->
sbs
 + 
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
)/(sdev->
∑ges_ö_eblock
 * sdev->
∂™es
);

772 
	`sh™n⁄_©omic_sub
(
sdev
->
logicbs_ö_chunk
, &
sb
->
unföished_wrôes
);

773 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& 
	`check_°©us
(
cmd
->
°©us
)) {

774 
logiˇl_lun
 = 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_buf_cmd_phy_lun
(
cmd
->
phy_lun
, &cmd->
dw‹d1
));

775 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

776 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
logiˇl_lun
, 
∂™e
)) {

777 
	`sh™n⁄_log
("%s: mark buffer write block! sb=%d,Üun=%d, cmd->status=0x%x.\n",

778 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
logiˇl_lun
, 
cmd
->
°©us
);

779 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
logiˇl_lun
, 
∂™e
);

782 
	`h™dÀ_wrôe_îr‹
(
sdev
, 
sb
, 
NULL
);

785 i‡(
	`likñy
(!
ªad_cq_hód
)) {

787 *((vﬁ©ûê
u64
 *)
cmd
Ë
COMP_QUEUE_FILL
;

789 
sdev
->
bufq_ack_cq_èû
 = (sdev->bufq_ack_cq_èû + 8Ë% 
QUEUE_SIZE
;

792 i‡(
	`likñy
(!
ªad_cq_hód
))

793 
sdev
->
bufq_ack_cq_hód
 = sdev->
bufq_ack_cq_èû
;

794 
	`wrôe_ªg_ß„
(
sdev
, sdev->
bufq_ack_cq_èû
, &sdev->
bufq_ack_b¨
->
ack_cq_èû
);

798 i‡(
sdev
->
u£_duÆ_hód
) {

799 i‡((
sdev
->
bufq_cq_èû
[
HOT_INDEX
] =sdev->
bufq_sq_hód_tmp
[HOT_INDEX]) && \

800 (
sdev
->
bufq_cq_èû
[
COLD_INDEX
] =sdev->
bufq_sq_hód_tmp
[COLD_INDEX])) {

801 
≥ndög_wrôes
;

802 
≥ndög_wrôes
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
);

803 i‡(
≥ndög_wrôes
 == 0) {

804 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
HOT_INDEX
]);

805 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
COLD_INDEX
]);

806 
≥ndög_wrôes
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
);

807 i‡(
≥ndög_wrôes
 == 0)

808 
	`sh™n⁄_˛ór_bô
(
sdev
->
bufq_ack_öå_shi·
, sdev->
pŸítül_öãºu±_ve˘‹s
);

809 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
COLD_INDEX
]);

810 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
HOT_INDEX
]);

814 i‡(
sdev
->
bufq_cq_èû
[
HOT_INDEX
] =sdev->
bufq_sq_hód_tmp
[HOT_INDEX]) {

815 
≥ndög_wrôes
;

816 
≥ndög_wrôes
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
);

817 i‡(
≥ndög_wrôes
 == 0) {

818 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
HOT_INDEX
]);

819 
≥ndög_wrôes
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
);

820 i‡(
≥ndög_wrôes
 == 0)

821 
	`sh™n⁄_˛ór_bô
(
sdev
->
bufq_ack_öå_shi·
, sdev->
pŸítül_öãºu±_ve˘‹s
);

822 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
HOT_INDEX
]);

827 
	}
}

829 
	$h™dÀ_bufq_ack_öãºu±
(
sh™n⁄_dev
 *
sdev
)

831 
	`__h™dÀ_bufq_ack_öãºu±
(
sdev
, 0);

832 
	}
}

834 
	$Æloc_buf„r_queue
(
sh™n⁄_dev
 *
sdev
)

836 
	`sh™n⁄_öô_w‹k
(&
sdev
->
h™dÀ_bufq_w‹k
, 
h™dÀ_bufq_èsk
);

837 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
bufq_b¨_lock
[0]);

838 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
bufq_b¨_lock
[1]);

839 
	`sh™n⁄_muãx_öô
(&
sdev
->
bufq_sq_£m
[0]);

840 
	`sh™n⁄_muãx_öô
(&
sdev
->
bufq_sq_£m
[1]);

841 
sdev
->
bufq_sq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[0], 
GFP_SHANNON
);

842 
sdev
->
bufq_cq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[0], 
GFP_SHANNON
);

843 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
bufq_waô_cmd_pos
[0]);

844 
sdev
->
bufq_sq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[1], 
GFP_SHANNON
);

845 
sdev
->
bufq_cq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[1], 
GFP_SHANNON
);

846 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
bufq_waô_cmd_pos
[1]);

848 
sdev
->
buf„r_wrôe_limô
 = 
QUEUE_SIZE
 - 1 - (sdev->
logicbs_ö_chunk
 * 24);

849 
sdev
->
bufq_ack_cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_ack_cq_dma_addr
, 
GFP_SHANNON
);

851 i‡(
has_dma_dñay
)

852 
	`˛ór_comm™d_queue
((
u64
 *)
sdev
->
bufq_ack_cq_addr
, 0, 
QUEUE_SIZE
>>3, 
COMP_QUEUE_FILL
);

854 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

855 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

857 
sdev
->
bufq_b¨
[0] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[0]));

858 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
sq_dma_addr0
);

859 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
sq_dma_addr1
);

860 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
cq_dma_addr0
);

861 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
cq_dma_addr1
);

863 
sdev
->
bufq_b¨
[1] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[1]));

864 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
sq_dma_addr0
);

865 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
sq_dma_addr1
);

866 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
cq_dma_addr0
);

867 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
cq_dma_addr1
);

869 
sdev
->
bufq_ack_b¨
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
bufq_ack_öå_shi·
));

870 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_ack_cq_dma_addr
, &sdev->
bufq_ack_b¨
->
cq_dma_addr0
);

871 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_ack_cq_dma_addr
 >> 32Ë: 0, &sdev->
bufq_ack_b¨
->
cq_dma_addr1
);

873 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

876 
	`bufq_comm™d_cdev_öô
(
sdev
);

877 
	}
}

879 
	$ªÀa£_buf„r_queue
(
sh™n⁄_dev
 *
sdev
)

881 
	`bufq_comm™d_cdev_ªÀa£
(
sdev
);

882 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[0], sdev->
bufq_sq_dma_addr
[0]);

883 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[0], sdev->
bufq_cq_dma_addr
[0]);

884 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[1], sdev->
bufq_sq_dma_addr
[1]);

885 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[1], sdev->
bufq_cq_dma_addr
[1]);

886 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_ack_cq_addr
, sdev->
bufq_ack_cq_dma_addr
);

887 
	}
}

891 
	$∂ug_bufq
(
sh™n⁄_dev
 *
sdev
)

893 
	}
}

895 
	$u≈lug_bufq
(
sh™n⁄_dev
 *
sdev
)

897 
	}
}

899 
	$upd©e_bufq_limô
(
sh™n⁄_dev
 *
sdev
)

901 
	}
}

903 
	$bufq_åaffic_jam
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

906 
	}
}

908 
	$sh™n⁄_pick_wrôe_buf_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

911 
	}
}

913 
	$h™dÀ_bufq_öãºu±
(
sh™n⁄_dev
 *
sdev
)

916 
	}
}

918 
	$Æloc_buf„r_queue
(
sh™n⁄_dev
 *
sdev
)

921 
	}
}

923 
	$ªÀa£_buf„r_queue
(
sh™n⁄_dev
 *
sdev
)

926 
	}
}

	@shannon_cdev.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/fs.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/mm.h
>

5 
	~<löux/¶ab.h
>

6 
	~<löux/sched.h
>

7 
	~<asm/uac˚ss.h
>

8 
	~<löux/cdev.h
>

10 
	~"sh™n⁄_devi˚.h
"

11 
	~"sh™n⁄_memblock.h
"

13 
	$debug_cdev_›í
(
öode
 *öode, 
fûe
 *file)

15 
debug_cdev
 *
dev
;

17 
dev
 = 
	`c⁄èöî_of
((
sh™n⁄_cdev_t
 *)
öode
->
i_cdev
, 
debug_cdev
, 
cdev
);

18 
fûe
->
¥iv©e_d©a
 = 
dev
;

21 
	}
}

23 
	$debug_cdev_ªÀa£
(
öode
 *öode, 
fûe
 *file)

26 
	}
}

28 
ssize_t
 
	$debug_cdev_ªad
(
fûe
 *fûe, 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

30 
debug_cdev
 *
dev
 = 
fûe
->
¥iv©e_d©a
;

31 
sˇâî_memblock
 *
smb
;

32 
size_t
 
ªmaö
;

33 
size_t
 
d©a_Àn
;

34 
size_t
 
buf_off£t
 = 0;

35 
ssize_t
 
ªt
 = 0;

37 i‡(*
f_pos
 >
dev
->
size
)

38 
out
;

39 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

40 
cou¡
 = 
dev
->
size
 - *
f_pos
;

42 i‡(
dev
->
ty≥
 =
NORMAL_TYPE
) {

43 if(
	`c›y_to_u£r
(
buf
, 
dev
->bu‡+ *
f_pos
, 
cou¡
)) {

44 
ªt
 = -
EFAULT
;

45 
out
;

47 *
f_pos
 +
cou¡
;

48 } i‡(
dev
->
ty≥
 =
SCATTER_MEMBLOCK_TYPE
) {

49 
smb
 = (
sˇâî_memblock
 *)
dev
->
buf
;

50 
ªmaö
 = 
cou¡
;

51 
ªmaö
 > 0) {

52 
d©a_Àn
 = (
ªmaö
 < (
smb
->
memblock_size
 - ((*
f_pos
) % smb->memblock_size)) ?Ñemain : (smb->memblock_size - ((*f_pos) % smb->memblock_size)));

53 i‡(((*
f_pos
Ë% 
smb
->
memblock_size
Ë+ 
d©a_Àn
 > smb->memblock_size)

54 
	`sh™n⁄_îr
("f_po†+ d©a_À¿> memblock_size, off£t=%ld, f_pos%mb->memblock_size=%ld, d©a_Àn=%ld\n", *
f_pos
, (*f_posË% 
smb
->
memblock_size
, 
d©a_Àn
);

55 i‡(
	`u∆ikñy
(
	`check_™d_Æloc_memblock
(
smb
, *
f_pos
))) {

56 
ªt
 = -
EFAULT
;

57 
out
;

59 i‡(
	`c›y_to_u£r
(
buf
 + 
buf_off£t
, 
smb
->
memblock_li°
[(*
f_pos
Ë/ smb->
memblock_size
] + ((*f_posË% smb->memblock_size), 
d©a_Àn
)) {

60 
ªt
 = -
EFAULT
;

61 
out
;

63 *
f_pos
 +
d©a_Àn
;

64 
ªmaö
 -
d©a_Àn
;

65 
buf_off£t
 +
d©a_Àn
;

69 
ªt
 = 
cou¡
;

70 
out
:

71  
ªt
;

72 
	}
}

74 
ssize_t
 
	$debug_cdev_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
f_pos
)

76 
debug_cdev
 *
dev
 = 
fûe
->
¥iv©e_d©a
;

77 
sˇâî_memblock
 *
smb
;

78 
size_t
 
ªmaö
;

79 
size_t
 
d©a_Àn
;

80 
size_t
 
buf_off£t
 = 0;

81 
ssize_t
 
ªt
 = 0;

83 i‡(*
f_pos
 >
dev
->
size
)

84 
out
;

85 i‡(*
f_pos
 + 
cou¡
 > 
dev
->
size
)

86 
cou¡
 = 
dev
->
size
 - *
f_pos
;

88 i‡(
dev
->
ty≥
 =
NORMAL_TYPE
) {

89 i‡(
	`c›y_‰om_u£r
(
dev
->
buf
 + *
f_pos
, buf, 
cou¡
)) {

90 
	`sh™n⁄_îr
("copy_from_user failed.\n");

91 
ªt
 = -
EFAULT
;

92 
out
;

95 *
f_pos
 +
cou¡
;

96 } i‡(
dev
->
ty≥
 =
SCATTER_MEMBLOCK_TYPE
) {

97 
smb
 = (
sˇâî_memblock
 *)
dev
->
buf
;

98 
ªmaö
 = 
cou¡
;

99 
ªmaö
 > 0) {

100 
d©a_Àn
 = (
ªmaö
 < (
smb
->
memblock_size
 - ((*
f_pos
) % smb->memblock_size)) ?Ñemain : (smb->memblock_size - ((*f_pos) % smb->memblock_size)));

101 i‡(((*
f_pos
Ë% 
smb
->
memblock_size
Ë+ 
d©a_Àn
 > smb->memblock_size)

102 
	`sh™n⁄_îr
("f_po†+ d©a_À¿> memblock_size, off£t=%ld, f_pos%mb->memblock_size=%ld, d©a_Àn=%ld\n", *
f_pos
, (*f_posË% 
smb
->
memblock_size
, 
d©a_Àn
);

103 i‡(
	`u∆ikñy
(
	`check_™d_Æloc_memblock
(
smb
, *
f_pos
))) {

104 
ªt
 = -
EFAULT
;

105 
out
;

107 i‡(
	`c›y_‰om_u£r
(
smb
->
memblock_li°
[(*
f_pos
Ë/ smb->
memblock_size
] + ((*f_posË% smb->memblock_size), 
buf
 + 
buf_off£t
, 
d©a_Àn
)) {

108 
ªt
 = -
EFAULT
;

109 
out
;

111 *
f_pos
 +
d©a_Àn
;

112 
ªmaö
 -
d©a_Àn
;

113 
buf_off£t
 +
d©a_Àn
;

117 
ªt
 = 
cou¡
;

118 
out
:

119  
ªt
;

120 
	}
}

122 
loff_t
 
	$debug_cdev_Œ£ek
(
fûe
 *
fûp
, 
loff_t
 
off
, 
whí˚
)

124 
debug_cdev
 *
dev
 = 
fûp
->
¥iv©e_d©a
;

125 
loff_t
 
√wpos
;

127 
whí˚
) {

128 
SEEK_SET
:

129 
√wpos
 = 
off
;

131 
SEEK_CUR
:

132 
√wpos
 = 
fûp
->
f_pos
 + 
off
;

134 
SEEK_END
:

135 
√wpos
 = 
dev
->
size
 + 
off
;

138  -
EINVAL
;

141 i‡(
√wpos
 < 0Ë -
EINVAL
;

142 
fûp
->
f_pos
 = 
√wpos
;

143  
√wpos
;

144 
	}
}

146 
fûe_›î©i⁄s
 
	gdebug_cdev_f›s
 = {

147 .
ow√r
 = 
THIS_MODULE
,

148 .
	g›í
 = 
debug_cdev_›í
,

149 .
	gªÀa£
 = 
debug_cdev_ªÀa£
,

150 .
	gªad
 = 
debug_cdev_ªad
,

151 .
	gwrôe
 = 
debug_cdev_wrôe
,

152 .
	gŒ£ek
 = 
debug_cdev_Œ£ek
,

154 
EXPORT_SYMBOL
(
debug_cdev_f›s
);

	@shannon_config.h

6 #i‚de‡
__SHANNON_CONFIG_H


7 
	#__SHANNON_CONFIG_H


	)

10 
	#CONFIG_SHANNON_DEBUG


	)

15 #i‡
deföed
(
CONFIG_SHANNON_DEBUG
)

21 
	#CONFIG_SHANNON_DMA_REORDER


	)

29 #i‚de‡
SHANNON_RELEASE


30 
	#CONFIG_SHANNON_DEBUG_CDEV


	)

31 
	#CONFIG_SHANNON_DEBUG_DUMP


	)

34 
	#CONFIG_SHANNON_DEBUG_REQS


	)

36 
	#CONFIG_SINGLE_HEAD_VERIFY


	)

58 
	#CONFIG_READ_SKIP_BAD_BLOCKS


	)

63 #i‡
deföed
(
CONFIG_SHANNON_DEBUG_CDEV
)

82 
	#CONFIG_SHANNON_GC_BALANCE


	)

	@shannon_debug.c

1 
	$add_to_gc_°©e_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

3 
gc_block_°©e
 *
gc_°©e
;

5 
gc_°©e
 = 
	`sh™n⁄_kmÆloc
((*gc_°©e), 
GFP_ATOMIC
);

6 i‡(
gc_°©e
 =
NULL
) {

7 
	`sh™n⁄_w¨n
("Æloˇã gc_°©êÁûed. sb_ödex=%d.\n", 
sb
->
sb_ödex
);

10 
gc_°©e
->
sb_ödex
 = 
sb
->sb_index;

11 
gc_°©e
->
vÆid_∑ges
 = 
	`sh™n⁄_©omic_ªad
(&
sb
->valid_pages);

12 
gc_°©e
->
bad_lun
[0] = 
sb
->bad_lun[0];

13 
gc_°©e
->
îr‹_lun
[0] = 
sb
->error_lun[0];

14 
gc_°©e
->
pba_èbÀ_Àn
 = (
sdev
->
logicbs_ö_siblög_eblock
 * sdev->
lun_cou¡
 * 
PBA_ENTRY_LEN
 + 7)/8;

15 #ifde‡
CONFIG_RECORD_PBA_TABLE_IN_GC


16 
gc_°©e
->
pba_èbÀ
 = 
	`sh™n⁄_kzÆloc
(gc_°©e->
pba_èbÀ_Àn
, 
GFP_NOWAIT
);

18 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_°©e_li°_lock
);

19 
	`sh™n⁄_li°_add_èû
(&
gc_°©e
->
li°
, &
sdev
->
gc_°©e_li°
);

20 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_°©e_li°_lock
);

21 
sb
->
gc_°©e
 = gc_state;

22 
	}
}

24 
	$ªc‹d_pba_èbÀ
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
lun
)

26 #ifde‡
CONFIG_RECORD_PBA_TABLE_IN_GC


27 
gc_block_°©e
 *
gc_°©e
 = 
sb
->gc_state;

31 i‡(
sb
->
gc_°©e
 && sb->gc_°©e->
pba_èbÀ
) {

32 
u8
 *
to
 = (u8 *)
gc_°©e
->
pba_èbÀ
 + 
lun
 * 
sdev
->
logicbs_ö_siblög_eblock
 * 
PBA_ENTRY_LEN
 / 8;

33 
u8
 *
‰om
 = (u8 *)
sdev
->
lun
[lun]->
pba_èbÀ
 + 
sb
->
sb_ödex
 * sdev->
logicbs_ö_siblög_eblock
 * 
PBA_ENTRY_LEN
 / 8;

34 
	`sh™n⁄_mem˝y
(
to
, 
‰om
, 
sdev
->
logicbs_ö_siblög_eblock
 * 
PBA_ENTRY_LEN
 / 8);

37 
	}
}

39 
	$ªmove_‰om_gc_°©e_li°
(
sh™n⁄_sb
 *
sb
)

41 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

42 i‡(
sb
->
gc_°©e
 =
NULL
) {

43 
	`sh™n⁄_w¨n
("gc_°©êi†NULL. sb_ödex=%d.\n", 
sb
->
sb_ödex
);

46 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_°©e_li°_lock
);

47 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
gc_°©e
->
li°
);

48 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_°©e_li°_lock
);

49 #ifde‡
CONFIG_RECORD_PBA_TABLE_IN_GC


50 i‡(
sb
->
gc_°©e
->
pba_èbÀ
)

51 
	`sh™n⁄_k‰ì
(
sb
->
gc_°©e
->
pba_èbÀ
);

53 
	`sh™n⁄_k‰ì
(
sb
->
gc_°©e
);

54 
sb
->
gc_°©e
 = 
NULL
;

55 
	}
}

57 
	$ªÀa£_blocks_gc_°©e
(
sh™n⁄_dev
 *
sdev
)

59 
i
;

60 
sh™n⁄_sb
 *
sb
;

62 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

63 
sb
 = &
sdev
->
sbs
[
i
];

64 i‡(
sb
->
gc_°©e
 !
NULL
)

65 
	`ªmove_‰om_gc_°©e_li°
(
sb
);

67 
	}
}

69 *
	$sh™n⁄_kmÆloc_waô
(
size_t
 
size
)

71 *
addr
 = 
NULL
;

72 
ªåy
:

73 
addr
 = 
	`sh™n⁄_kmÆloc
(
size
, 
GFP_SHANNON
);

74 i‡(
addr
 =
NULL
)

75 
ªåy
;

76  
addr
;

77 
	}
}

79 #ifde‡
CONFIG_SHANNON_DEBUG_CDEV


80 #ifde‡
SHANNON_USE_WRITE_BUFFER


81 
	$bufq_comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
)

83 
i
, 
ªt
 = 0;

84 
dev_t
 
devno
;

85 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

87 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "bufq_comm™d_df%c", 'a' + 
dev
->
drive_no
);

89 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
dev
->
bufq_comm™d_dev_num
, 0, 2, 
«mebuf
) < 0) {

90 
	`sh™n⁄_îr
("Can'tÑegister device commanddata.\n");

91 
ªt
 = -1;

92 
out
;

94 
dev
->
bufq_comm™d_maj‹
 = 
	`SHANNON_MAJOR
(dev->
bufq_comm™d_dev_num
);

95 
dev
->
bufq_comm™d_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

96 i‡(
	`SHANNON_IS_ERR
(
dev
->
bufq_comm™d_˛ass
)) {

97 
dev
->
bufq_comm™d_cdevs
 = 
NULL
;

98 
ªt
 = 
	`SHANNON_PTR_ERR
(
dev
->
bufq_comm™d_˛ass
);

99 
out
;

101 
dev
->
bufq_comm™d_cdevs
 = 
	`sh™n⁄_kmÆloc
((*dev->bufq_comm™d_cdevsË* 2, 
GFP_SHANNON
);

102 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

103 
dev
->
bufq_comm™d_cdevs
[
i
].
ty≥
 = 
NORMAL_TYPE
;

104 
dev
->
bufq_comm™d_cdevs
[
i
].
mö‹
 = i;

105 
dev
->
bufq_comm™d_cdevs
[
i
].
buf
 = (*)dev->
bufq_sq_addr
[i];

106 
dev
->
bufq_comm™d_cdevs
[
i
].
size
 = 
QUEUE_SIZE
;

108 
	`sh™n⁄_öô_debug_cdev
(&
dev
->
bufq_comm™d_cdevs
[
i
].
cdev
);

109 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
dev
->
bufq_comm™d_cdevs
[
i
].
cdev
);

111 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
bufq_comm™d_maj‹
, 
i
);

112 i‡(
	`sh™n⁄_cdev_add
(&
dev
->
bufq_comm™d_cdevs
[
i
].
cdev
, 
devno
, 1)) {

113 
	`sh™n⁄_îr
("cdev_add Error.\n");

114 
	`BUG
();

116 
	`sh™n⁄_devi˚_¸óã
(
dev
->
bufq_comm™d_˛ass
, 
	`gë_devi˚_‰om_pci_dev
(dev->
pci_dev
), 
devno
, 
NULL
, "%s%d", 
«mebuf
, 
i
);

118 
out
:

119 
	`sh™n⁄_k‰ì
(
«mebuf
);

120  
ªt
;

121 
	}
}

123 
	$bufq_comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
)

125 
i
;

126 
dev_t
 
devno
;

128 i‡(
dev
->
bufq_comm™d_cdevs
 !
NULL
) {

129 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

130 
	`sh™n⁄_cdev_dñ
(&
dev
->
bufq_comm™d_cdevs
[
i
].
cdev
);

131 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
bufq_comm™d_maj‹
, 
i
);

132 
	`sh™n⁄_devi˚_de°roy
(
dev
->
bufq_comm™d_˛ass
, 
devno
);

134 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev
->
bufq_comm™d_dev_num
, 2);

135 
	`sh™n⁄_˛ass_de°roy
(
dev
->
bufq_comm™d_˛ass
);

136 
	`sh™n⁄_k‰ì
(
dev
->
bufq_comm™d_cdevs
);

137 
dev
->
bufq_comm™d_cdevs
 = 
NULL
;

139 
	}
}

142 
	$comm™d_cdev_öô
(
sh™n⁄_dev
 *
dev
)

144 
i
, 
ªt
 = 0;

145 
dev_t
 
devno
;

146 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

148 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "comm™d_df%c", 'a' + 
dev
->
drive_no
);

150 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
dev
->
comm™d_dev_num
, 0, dev->
lun£t_cou¡
, 
«mebuf
) < 0) {

151 
	`sh™n⁄_îr
("Can'tÑegister device commanddata.\n");

152 
ªt
 = -1;

153 
out
;

155 
dev
->
comm™d_maj‹
 = 
	`SHANNON_MAJOR
(dev->
comm™d_dev_num
);

156 
dev
->
comm™d_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

157 i‡(
	`SHANNON_IS_ERR
(
dev
->
comm™d_˛ass
)) {

158 
dev
->
comm™d_cdevs
 = 
NULL
;

159 
ªt
 = 
	`SHANNON_PTR_ERR
(
dev
->
comm™d_˛ass
);

160 
out
;

162 
dev
->
comm™d_cdevs
 = 
	`sh™n⁄_kmÆloc
((*dev->comm™d_cdevsË* dev->
lun£t_cou¡
, 
GFP_SHANNON
);

163 i‡(!
dev
->
comm™d_cdevs
) {

164 
	`sh™n⁄_îr
("Can`tállocate memory for command_cdevs.\n");

165 
ªt
 = -1;

166 
out
;

168 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

169 
dev
->
comm™d_cdevs
[
i
].
ty≥
 = 
NORMAL_TYPE
;

170 
dev
->
comm™d_cdevs
[
i
].
mö‹
 = i;

171 
dev
->
comm™d_cdevs
[
i
].
buf
 = (*)dev->
lun£ts
[i].
sq_addr
;

172 
dev
->
comm™d_cdevs
[
i
].
size
 = 
QUEUE_SIZE
;

174 
	`sh™n⁄_öô_debug_cdev
(&
dev
->
comm™d_cdevs
[
i
].
cdev
);

175 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
dev
->
comm™d_cdevs
[
i
].
cdev
);

177 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
comm™d_maj‹
, 
i
);

178 i‡(
	`sh™n⁄_cdev_add
(&
dev
->
comm™d_cdevs
[
i
].
cdev
, 
devno
, 1)) {

179 
	`sh™n⁄_îr
("cdev_add Error.\n");

180 
	`BUG
();

182 
	`sh™n⁄_devi˚_¸óã
(
dev
->
comm™d_˛ass
, 
	`gë_devi˚_‰om_pci_dev
(dev->
pci_dev
), 
devno
, 
NULL
, "%s%d", 
«mebuf
, 
i
);

184 
out
:

185 
	`sh™n⁄_k‰ì
(
«mebuf
);

186  
ªt
;

187 
	}
}

189 
	$comm™d_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
)

191 
i
;

192 
dev_t
 
devno
;

194 i‡(
dev
->
comm™d_cdevs
 !
NULL
) {

195 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

196 
	`sh™n⁄_cdev_dñ
(&
dev
->
comm™d_cdevs
[
i
].
cdev
);

197 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
comm™d_maj‹
, 
i
);

198 
	`sh™n⁄_devi˚_de°roy
(
dev
->
comm™d_˛ass
, 
devno
);

200 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev
->
comm™d_dev_num
, dev->
lun£t_cou¡
);

201 
	`sh™n⁄_˛ass_de°roy
(
dev
->
comm™d_˛ass
);

202 
	`sh™n⁄_k‰ì
(
dev
->
comm™d_cdevs
);

203 
dev
->
comm™d_cdevs
 = 
NULL
;

205 
	}
}

207 
	$com∂ëi⁄_cdev_öô
(
sh™n⁄_dev
 *
dev
)

209 
i
, 
ªt
 = 0;

210 
dev_t
 
devno
;

211 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

213 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "com∂ëi⁄_df%c", 'a' + 
dev
->
drive_no
);

215 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
dev
->
com∂ëi⁄_dev_num
, 0, dev->
lun£t_cou¡
, 
«mebuf
) < 0) {

216 
	`sh™n⁄_îr
("Can'tÑegister device completiondata.\n");

217 
ªt
 = -1;

218 
out
;

220 
dev
->
com∂ëi⁄_maj‹
 = 
	`SHANNON_MAJOR
(dev->
com∂ëi⁄_dev_num
);

221 
dev
->
com∂ëi⁄_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

222 i‡(
	`SHANNON_IS_ERR
(
dev
->
com∂ëi⁄_˛ass
)) {

223 
dev
->
com∂ëi⁄_cdevs
 = 
NULL
;

224 
ªt
 = 
	`SHANNON_PTR_ERR
(
dev
->
com∂ëi⁄_˛ass
);

225 
out
;

228 
dev
->
com∂ëi⁄_cdevs
 = 
	`sh™n⁄_kmÆloc
((*dev->com∂ëi⁄_cdevsË* dev->
lun£t_cou¡
, 
GFP_SHANNON
);

229 i‡(!
dev
->
com∂ëi⁄_cdevs
) {

230 
	`sh™n⁄_îr
("Can`tállocate memory for completion_cdevs.\n");

231 
ªt
 = -1;

232 
out
;

234 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

235 
dev
->
com∂ëi⁄_cdevs
[
i
].
ty≥
 = 
NORMAL_TYPE
;

236 
dev
->
com∂ëi⁄_cdevs
[
i
].
mö‹
 = i;

237 
dev
->
com∂ëi⁄_cdevs
[
i
].
buf
 = (*)dev->
lun£ts
[i].
cq_addr
;

238 
dev
->
com∂ëi⁄_cdevs
[
i
].
size
 = 
QUEUE_SIZE
;

240 
	`sh™n⁄_öô_debug_cdev
(&
dev
->
com∂ëi⁄_cdevs
[
i
].
cdev
);

241 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
dev
->
com∂ëi⁄_cdevs
[
i
].
cdev
);

243 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
com∂ëi⁄_maj‹
, 
i
);

244 i‡(
	`sh™n⁄_cdev_add
(&
dev
->
com∂ëi⁄_cdevs
[
i
].
cdev
, 
devno
, 1)) {

245 
	`sh™n⁄_îr
("cdev_add Error.\n");

246 
	`BUG
();

248 
	`sh™n⁄_devi˚_¸óã
(
dev
->
com∂ëi⁄_˛ass
, 
	`gë_devi˚_‰om_pci_dev
(dev->
pci_dev
), 
devno
, 
NULL
, "%s%d", 
«mebuf
, 
i
);

250 
out
:

251 
	`sh™n⁄_k‰ì
(
«mebuf
);

252  
ªt
;

253 
	}
}

255 
	$com∂ëi⁄_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
)

257 
i
;

258 
dev_t
 
devno
;

260 i‡(
dev
->
com∂ëi⁄_cdevs
 !
NULL
) {

261 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

262 
	`sh™n⁄_cdev_dñ
(&
dev
->
com∂ëi⁄_cdevs
[
i
].
cdev
);

263 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
com∂ëi⁄_maj‹
, 
i
);

264 
	`sh™n⁄_devi˚_de°roy
(
dev
->
com∂ëi⁄_˛ass
, 
devno
);

266 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev
->
com∂ëi⁄_dev_num
, dev->
lun£t_cou¡
);

267 
	`sh™n⁄_˛ass_de°roy
(
dev
->
com∂ëi⁄_˛ass
);

268 
	`sh™n⁄_k‰ì
(
dev
->
com∂ëi⁄_cdevs
);

269 
dev
->
com∂ëi⁄_cdevs
 = 
NULL
;

271 
	}
}

274 
	$pba_èbÀ_cdev_öô
(
sh™n⁄_dev
 *
dev
, 
pba_èbÀ_size
)

276 
i
, 
ªt
 = 0;

277 
dev_t
 
devno
;

278 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

280 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "pba_èbÀ_df%c", 'a' + 
dev
->
drive_no
);

282 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
dev
->
pba_èbÀ_dev_num
, 0, dev->
lun_cou¡
, 
«mebuf
) < 0) {

283 
	`sh™n⁄_îr
("Can'tÑegister deviceÖba_tabledata.\n");

284 
ªt
 = -1;

285 
out
;

287 
dev
->
pba_èbÀ_maj‹
 = 
	`SHANNON_MAJOR
(dev->
pba_èbÀ_dev_num
);

288 
dev
->
pba_èbÀ_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

289 i‡(
	`SHANNON_IS_ERR
(
dev
->
pba_èbÀ_˛ass
)) {

290 
dev
->
pba_èbÀ_cdevs
 = 
NULL
;

291 
ªt
 = 
	`SHANNON_PTR_ERR
(
dev
->
pba_èbÀ_˛ass
);

292 
out
;

294 
dev
->
pba_èbÀ_cdevs
 = 
	`sh™n⁄_kmÆloc
((*dev->pba_èbÀ_cdevsË* dev->
lun_cou¡
, 
GFP_SHANNON
);

295 i‡(!
dev
->
pba_èbÀ_cdevs
) {

296 
	`sh™n⁄_îr
("Can`tállocate memory forÖba_table_cdevs.\n");

297 
ªt
 = -1;

298 
out
;

300 
i
 = 0; i < 
dev
->
lun_cou¡
; i++) {

301 i‡(!
dev
->
lun
[
i
]->
pba_èbÀ
)

303 
dev
->
pba_èbÀ_cdevs
[
i
].
ty≥
 = 
NORMAL_TYPE
;

304 
dev
->
pba_èbÀ_cdevs
[
i
].
mö‹
 = i;

305 
dev
->
pba_èbÀ_cdevs
[
i
].
buf
 = (*)dev->
lun
[i]->
pba_èbÀ
;

306 
dev
->
pba_èbÀ_cdevs
[
i
].
size
 = 
pba_èbÀ_size
;

308 
	`sh™n⁄_öô_debug_cdev
(&
dev
->
pba_èbÀ_cdevs
[
i
].
cdev
);

309 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
dev
->
pba_èbÀ_cdevs
[
i
].
cdev
);

311 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
pba_èbÀ_maj‹
, 
i
);

312 i‡(
	`sh™n⁄_cdev_add
(&
dev
->
pba_èbÀ_cdevs
[
i
].
cdev
, 
devno
, 1)) {

313 
	`sh™n⁄_îr
("cdev_add Error.\n");

314 
	`BUG
();

316 
	`sh™n⁄_devi˚_¸óã
(
dev
->
pba_èbÀ_˛ass
, 
	`gë_devi˚_‰om_pci_dev
(dev->
pci_dev
), 
devno
, 
NULL
, "%s%d", 
«mebuf
, 
i
);

318 
out
:

319 
	`sh™n⁄_k‰ì
(
«mebuf
);

320  
ªt
;

321 
	}
}

323 
	$pba_èbÀ_cdev_ªÀa£
(
sh™n⁄_dev
 *
dev
)

325 
i
;

326 
dev_t
 
devno
;

328 i‡(
dev
->
pba_èbÀ_cdevs
 !
NULL
) {

329 
i
 = 0; i < 
dev
->
lun_cou¡
; i++) {

330 i‡(!
dev
->
lun
[
i
]->
pba_èbÀ
)

332 
	`sh™n⁄_cdev_dñ
(&
dev
->
pba_èbÀ_cdevs
[
i
].
cdev
);

333 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
pba_èbÀ_maj‹
, 
i
);

334 
	`sh™n⁄_devi˚_de°roy
(
dev
->
pba_èbÀ_˛ass
, 
devno
);

336 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev
->
pba_èbÀ_dev_num
, dev->
lun_cou¡
);

337 
	`sh™n⁄_˛ass_de°roy
(
dev
->
pba_èbÀ_˛ass
);

338 
	`sh™n⁄_k‰ì
(
dev
->
pba_èbÀ_cdevs
);

339 
dev
->
pba_èbÀ_cdevs
 = 
NULL
;

341 
	}
}

343 
	$Õmt_cdev_öô
(
sh™n⁄_disk
 *
sdisk
)

345 
dev_t
 
devno
;

346 
ªt
 = 0;

347 
i
;

348 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

350 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "sh™n⁄_Õmt_%s", 
sdisk
->
disk_«me
);

352 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
sdisk
->
Õmt_dev_num
, 0, sdisk->
sdev_cou¡
, 
«mebuf
) < 0) {

353 
	`sh™n⁄_îr
("Can'tÑegister deviceÜpmt.\n");

354 
ªt
 = -1;

355 
out
;

357 
sdisk
->
Õmt_maj‹
 = 
	`SHANNON_MAJOR
(sdisk->
Õmt_dev_num
);

358 
sdisk
->
Õmt_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

359 i‡(
	`SHANNON_IS_ERR
(
sdisk
->
Õmt_˛ass
)) {

360 
sdisk
->
Õmt_cdev
 = 
NULL
;

361 
ªt
 = 
	`SHANNON_PTR_ERR
(
sdisk
->
Õmt_˛ass
);

362 
out
;

364 
sdisk
->
Õmt_cdev
 = 
	`sh™n⁄_kmÆloc
((*sdisk->Õmt_cdevË* sdisk->
sdev_cou¡
, 
GFP_SHANNON
);

365 i‡(!
sdisk
->
Õmt_cdev
) {

366 
	`sh™n⁄_îr
("Can`tállocÜpmt_cdev.\n");

367 
	`sh™n⁄_˛ass_de°roy
(
sdisk
->
Õmt_˛ass
);

368 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
sdisk
->
Õmt_dev_num
, sdisk->
sdev_cou¡
);

369 
ªt
 = -
ENOMEM
;

370 
out
;

373 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

374 
sdisk
->
Õmt_cdev
[
i
].
ty≥
 = 
SCATTER_MEMBLOCK_TYPE
;

375 
sdisk
->
Õmt_cdev
[
i
].
mö‹
 = i;

376 
sdisk
->
Õmt_cdev
[
i
].
size
 = sdisk->
Õmt_¨øy
[i].
m≠_èbÀ_size
;

377 
sdisk
->
Õmt_cdev
[
i
].
buf
 = (*)(&sdisk->
Õmt_¨øy
[i].
m≠_èbÀ
);

379 
	`sh™n⁄_öô_debug_cdev
(&
sdisk
->
Õmt_cdev
[
i
].
cdev
);

380 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
sdisk
->
Õmt_cdev
[
i
].
cdev
);

382 
devno
 = 
	`SHANNON_MKDEV
(
sdisk
->
Õmt_maj‹
, 
i
);

383 i‡(
	`sh™n⁄_cdev_add
(&
sdisk
->
Õmt_cdev
[
i
].
cdev
, 
devno
, 1)) {

384 
	`sh™n⁄_îr
("cdev_add Error.\n");

385 
	`BUG
();

387 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "sh™n⁄_Õmt_%s_no_%d", 
sdisk
->
disk_«me
, 
i
);

388 
	`sh™n⁄_devi˚_¸óã
(
sdisk
->
Õmt_˛ass
, 
NULL
, 
devno
, NULL, "%s", 
«mebuf
);

391 
out
:

392 
	`sh™n⁄_k‰ì
(
«mebuf
);

393  
ªt
;

394 
	}
}

396 
	$Õmt_cdev_exô
(
sh™n⁄_disk
 *
sdisk
)

398 
i
;

400 i‡(
sdisk
->
Õmt_cdev
 !
NULL
) {

401 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

402 
	`sh™n⁄_cdev_dñ
(&
sdisk
->
Õmt_cdev
[
i
].
cdev
);

403 
	`sh™n⁄_devi˚_de°roy
(
sdisk
->
Õmt_˛ass
, 
	`SHANNON_MKDEV
(sdisk->
Õmt_maj‹
, 
i
));

405 
	`sh™n⁄_˛ass_de°roy
(
sdisk
->
Õmt_˛ass
);

406 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
sdisk
->
Õmt_dev_num
, sdisk->
sdev_cou¡
);

407 
	`sh™n⁄_k‰ì
(
sdisk
->
Õmt_cdev
);

408 
sdisk
->
Õmt_cdev
 = 
NULL
;

410 
	}
}

412 
	$ãmp_èbÀ_cdev_öô
(
sh™n⁄_disk
 *
sdisk
)

414 
dev_t
 
devno
;

415 
ªt
 = 0;

416 
i
;

417 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

419 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "sh™n⁄_ãmp_èbÀ_%s", 
sdisk
->
disk_«me
);

421 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
sdisk
->
ãmp_èbÀ_dev_num
, 0, sdisk->
sdev_cou¡
, 
«mebuf
) < 0) {

422 
	`sh™n⁄_îr
("Can'tÑegister deviceÅemp_table.\n");

423 
ªt
 = -1;

424 
out
;

426 
sdisk
->
ãmp_èbÀ_maj‹
 = 
	`SHANNON_MAJOR
(sdisk->
ãmp_èbÀ_dev_num
);

427 
sdisk
->
ãmp_èbÀ_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

428 i‡(
	`SHANNON_IS_ERR
(
sdisk
->
ãmp_èbÀ_˛ass
)) {

429 
sdisk
->
ãmp_èbÀ_cdev
 = 
NULL
;

430 
ªt
 = 
	`SHANNON_PTR_ERR
(
sdisk
->
ãmp_èbÀ_˛ass
);

431 
out
;

434 
sdisk
->
ãmp_èbÀ_cdev
 = 
	`sh™n⁄_kmÆloc
((*sdisk->ãmp_èbÀ_cdevË* sdisk->
sdev_cou¡
, 
GFP_SHANNON
);

435 i‡(!
sdisk
->
ãmp_èbÀ_cdev
) {

436 
	`sh™n⁄_îr
("Can`tállocÅemp_table_cdev.\n");

437 
	`sh™n⁄_˛ass_de°roy
(
sdisk
->
ãmp_èbÀ_˛ass
);

438 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
sdisk
->
ãmp_èbÀ_dev_num
, sdisk->
sdev_cou¡
);

439 
ªt
 = -
ENOMEM
;

440 
out
;

442 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

443 
sdisk
->
ãmp_èbÀ_cdev
[
i
].
ty≥
 = 
SCATTER_MEMBLOCK_TYPE
;

444 
sdisk
->
ãmp_èbÀ_cdev
[
i
].
mö‹
 = i;

445 
sdisk
->
ãmp_èbÀ_cdev
[
i
].
size
 = sdisk->
Õmt_¨øy
[i].
ãmp_èbÀ_size
;

446 
sdisk
->
ãmp_èbÀ_cdev
[
i
].
buf
 = (*)(&sdisk->
Õmt_¨øy
[i].
ãmp_èbÀ
);

448 
	`sh™n⁄_öô_debug_cdev
(&
sdisk
->
ãmp_èbÀ_cdev
[
i
].
cdev
);

449 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
sdisk
->
ãmp_èbÀ_cdev
[
i
].
cdev
);

451 
devno
 = 
	`SHANNON_MKDEV
(
sdisk
->
ãmp_èbÀ_maj‹
, 
i
);

452 i‡(
	`sh™n⁄_cdev_add
(&
sdisk
->
ãmp_èbÀ_cdev
[
i
].
cdev
, 
devno
, 1)) {

453 
	`sh™n⁄_îr
("cdev_add Error.\n");

454 
	`BUG
();

456 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "sh™n⁄_ãmp_èbÀ_%s_no_%d", 
sdisk
->
disk_«me
, 
i
);

457 
	`sh™n⁄_devi˚_¸óã
(
sdisk
->
ãmp_èbÀ_˛ass
, 
NULL
, 
devno
, NULL, "%s", 
«mebuf
, 0);

460 
out
:

461 
	`sh™n⁄_k‰ì
(
«mebuf
);

462  
ªt
;

463 
	}
}

465 
	$ãmp_èbÀ_cdev_exô
(
sh™n⁄_disk
 *
sdisk
)

467 
i
;

469 i‡(
sdisk
->
ãmp_èbÀ_cdev
 !
NULL
) {

470 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

471 
	`sh™n⁄_cdev_dñ
(&
sdisk
->
ãmp_èbÀ_cdev
[
i
].
cdev
);

472 
	`sh™n⁄_devi˚_de°roy
(
sdisk
->
ãmp_èbÀ_˛ass
, 
	`SHANNON_MKDEV
(sdisk->
ãmp_èbÀ_maj‹
, 
i
));

474 
	`sh™n⁄_k‰ì
(
sdisk
->
ãmp_èbÀ_cdev
);

475 
	`sh™n⁄_˛ass_de°roy
(
sdisk
->
ãmp_èbÀ_˛ass
);

476 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
sdisk
->
ãmp_èbÀ_dev_num
, sdisk->
sdev_cou¡
);

477 
sdisk
->
ãmp_èbÀ_cdev
 = 
NULL
;

479 
	}
}

480 
	$ïûog_cdev_öô
(
sh™n⁄_dev
 *
dev
)

482 
dev_t
 
devno
;

483 
ªt
 = 0;

484 *
«mebuf
 = 
	`sh™n⁄_kmÆloc_waô
(32);

486 
	`sh™n⁄_¢¥ötf
(
«mebuf
, 32, "ïûog_df%c", 'a' + 
dev
->
drive_no
);

488 i‡(
	`sh™n⁄_Æloc_chrdev_ªgi⁄
(&
dev
->
ïûog_dev_num
, 0, 1, 
«mebuf
) < 0) {

489 
	`sh™n⁄_îr
("Can'tÑegister deviceÉpilog.\n");

490 
ªt
 = -1;

491 
out
;

493 
dev
->
ïûog_maj‹
 = 
	`SHANNON_MAJOR
(dev->
ïûog_dev_num
);

494 
dev
->
ïûog_˛ass
 = 
	`sh™n⁄_˛ass_¸óã
(
	`sh™n⁄_gë_this_moduÀ
(), 
«mebuf
);

495 i‡(
	`SHANNON_IS_ERR
(
dev
->
ïûog_˛ass
)) {

496 
dev
->
ïûog_cdev
 = 
NULL
;

497 
ªt
 = 
	`SHANNON_PTR_ERR
(
dev
->
ïûog_˛ass
);

498 
out
;

500 
dev
->
ïûog_cdev
 = 
	`sh™n⁄_kmÆloc
((*dev->ïûog_cdev), 
GFP_SHANNON
);

501 i‡(!
dev
->
ïûog_cdev
) {

502 
	`sh™n⁄_îr
("Can`tállocate memory forÉpilog_cdev.\n");

503 
ªt
 = -1;

504 
out
;

506 
dev
->
ïûog_cdev
->
ty≥
 = 
NORMAL_TYPE
;

507 
dev
->
ïûog_cdev
->
mö‹
 = 0;

508 
dev
->
ïûog_cdev
->
size
 = dev->
max_ïûog_size
 * dev->
eblocks_ö_lun
/dev->
∂™es
;

509 
dev
->
ïûog_cdev
->
buf
 = 
	`sh™n⁄_vmÆloc
(dev->ïûog_cdev->
size
);

510 i‡(
dev
->
ïûog_cdev
->
buf
 =
NULL
) {

511 
	`sh™n⁄_îr
("ˇ¿nŸáŒoˇã mem‹y f‹Épûog_cdev, size=%ld.\n", 
dev
->
ïûog_cdev
->
size
);

512 
ªt
 = -1;

513 
out
;

515 
	`sh™n⁄_mem£t
(
dev
->
ïûog_cdev
->
buf
, 0, dev->ïûog_cdev->
size
);

517 
	`sh™n⁄_öô_debug_cdev
(&
dev
->
ïûog_cdev
->
cdev
);

518 
	`sh™n⁄_£t_cdev_ow√r_this_moduÀ
(&
dev
->
ïûog_cdev
->
cdev
);

520 
devno
 = 
	`SHANNON_MKDEV
(
dev
->
ïûog_maj‹
, 0);

521 i‡(
	`sh™n⁄_cdev_add
(&
dev
->
ïûog_cdev
->
cdev
, 
devno
, 1)) {

522 
	`sh™n⁄_îr
("cdev_add Error.\n");

523 
	`BUG
();

525 
	`sh™n⁄_devi˚_¸óã
(
dev
->
ïûog_˛ass
, 
	`gë_devi˚_‰om_pci_dev
(dev->
pci_dev
), 
devno
, 
NULL
, "%s%d", 
«mebuf
, 0);

526 
out
:

527 
	`sh™n⁄_k‰ì
(
«mebuf
);

528  
ªt
;

529 
	}
}

531 
	$ïûog_cdev_exô
(
sh™n⁄_dev
 *
dev
)

533 i‡(
dev
->
ïûog_cdev
 !
NULL
) {

534 
	`sh™n⁄_v‰ì
(
dev
->
ïûog_cdev
->
buf
);

535 
	`sh™n⁄_cdev_dñ
(&
dev
->
ïûog_cdev
->
cdev
);

536 
	`sh™n⁄_devi˚_de°roy
(
dev
->
ïûog_˛ass
, 
	`SHANNON_MKDEV
(dev->
ïûog_maj‹
, 0));

537 
	`sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev
->
ïûog_dev_num
, 1);

538 
	`sh™n⁄_˛ass_de°roy
(
dev
->
ïûog_˛ass
);

539 
	`sh™n⁄_k‰ì
(
dev
->
ïûog_cdev
);

540 
dev
->
ïûog_cdev
 = 
NULL
;

542 
	}
}

544 
	$c›y_ïûog_buf
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
, 
sh™n⁄_ïûog
 *
ïûog
)

546 
i
;

548 
i
 = 0; i < 
ïûog
->
logicbs_ö_u£
; i++)

549 
	`sh™n⁄_mem˝y
(
dev
->
ïûog_cdev
->
buf
 + 
sb_ödex
 * dev->
max_ïûog_size
 + 
i
 * dev->
logicb_size
,

550 
	`ïûog_gë_addr
(
ïûog
, 
i
, 
dev
), dev->
logicb_size
);

551 
	}
}

554 
	$wrôe_chunk_is_vÆid
(
sh™n⁄_ªque°
 *
ªq
, 
sh™n⁄_dev
 *
sdev
)

556 
sh™n⁄_ªque°
 *
p
;

557 
cou¡
;

558 
∑ge
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
);

560 i‡((
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
) != 0)

563 
cou¡
 = 1;

564 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
ªq
->
chunk_li°
, chunk_list) {

565 i‡(
ªq
->
pba
.
lun
 !
p
->pba.lun)

567 i‡(
∑ge
 !
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
p
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
))

569 
cou¡
++;

571 i‡(
cou¡
 !
sdev
->
logicbs_ö_chunk
)

574 
	}
}

576 
	$£t_ªq_debug_èg
(
sh™n⁄_ªque°
 *
ªq
, 
èg
, 
i
)

578 
ªq
->
èg
 =Åag + 
i
;

579 
	}
}

581 
	$dump_Æl_blocks
(
sh™n⁄_dev
 *
dev
)

583 
i
, 
ö_gc
 = 0;

584 
sh™n⁄_sb
 *
sb
;

586 
	`sh™n⁄_öfo
("°¨t-----------‰ì_blk˙t=%d.----------------.\n", 
dev
->
‰ì_blk˙t
);

587 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

588 
sb
 = 
dev
->
sbs
 + 
i
;

589 i‡(
sb
->
°©e
 =
IN_GC_BLOCK
)

590 
ö_gc
++;

591 i‡((
sb
->
°©e
 !
HOT_BLOCK_LIST
))

592 
	`sh™n⁄_öfo
("%s(): sb_ödex=%d, sèã=%d, vÆid_∑ges=%d.\n", 
__func__
, 
sb
->
sb_ödex
, sb->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
));

594 
	`sh™n⁄_öfo
("------------ö_gc=%d ---------------íd.\n", 
ö_gc
);

595 
	}
}

598 *
	$£q_Æl_blocks_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

600 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

601 i‡(*
pos
 >
sdev
->
sb_cou¡
)

602  
NULL
;

603  
sdev
->
sbs
 + *
pos
;

604 
	}
}

606 *
	$£q_Æl_blocks_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

608 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

609 (*
pos
)++;

610 i‡(*
pos
 >
sdev
->
sb_cou¡
)

611  
NULL
;

612  
sdev
->
sbs
 + *
pos
;

613 
	}
}

615 
	$£q_Æl_blocks_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

617 
	}
}

619 *
	$°©e_«me
(
°©e
)

621 
°©e
) {

622 
HOT_ACTIVE_BLOCK
:

624 
LAST_HOT_BLOCK
:

626 
HOT_BLOCK_LIST
:

628 
COLD_ACTIVE_BLOCK
:

630 
LAST_COLD_BLOCK
:

632 
COLD_BLOCK_LIST
:

634 
WAIT_COPY_BLOCK
:

636 
IN_GC_BLOCK
:

638 
WAIT_ERASE_BLOCK
:

640 
FREE_BLOCK
:

642 
DISCARDED_BLOCK
:

644 
MBR_BLOCK
:

646 
ERROR_BLOCK
:

648 
IN_RECOVER_BLOCK
:

650 
NEXT_HOT_BLOCK
:

652 
NEXT_COLD_BLOCK
:

654 
IN_ERASING_BLOCK
:

656 
OVERLAP_BLOCK
:

661 
	}
}

663 
	$£q_Æl_blocks_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

665 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
v
;

666 
sub_group
 *
group
;

667 
i
, 
œ°_îa£
, 
œ°_˛o£
;

668 
now
;

670 
now
 = 
	`gë_jiffõs
();

671 
œ°_îa£
 = (
now
 - 
sb
->
œ°_îa£d_time°amp
Ë/ 
	`gë_HZ
() / 3600;

672 
œ°_˛o£
 = (
now
 - 
sb
->
œ°_˛o£d_time°amp
Ë/ 
	`gë_HZ
() / 3600;

674 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

675 
	`sh™n⁄_£q_¥ötf
(
s
, "sb_index=%3d, state=%15s(%3d), valid_pages=%7d, in_write=%d, unfinished_writes=%d,ávail_luns=%d, seq_num=%7ld,Érase_count=%d, wr_offset=%d, min_available_luns=%d, flag=0x%x,Üogicbs_in_epilog=%d, max_ecc=%d,Üast_erase=%d,Üast_close=%d.\n",

676 
sb
->
sb_ödex
, 
	`°©e_«me
(sb->
°©e
), sb->°©e, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
),

677 
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
), sh™n⁄_©omic_ªad(&sb->
unföished_wrôes
), sh™n⁄_©omic_ªad(&sb->
avaûabÀ_luns
), (
ul⁄g
)sb->
£q_num
,

678 
sb
->
îa£_cou¡î
, sb->
wr_off£t
, sb->
mö_avaûabÀ_luns
, sb->
ª˛aim_köd
, sb->
logicbs_ö_ïûog
, sb->
max_ecc
,

679 
œ°_îa£
, 
œ°_˛o£
);

680 
i
 = 0; i < 
sb
->
sdev
->
∑rôy_groups
; i++) {

681 
group
 = &
sb
->
sub_group
[
i
];

682 
	`sh™n⁄_£q_¥ötf
(
s
, "Öhy_index=%d, start_lun=%d,ávailable_luns=%d, data_luns=%d, first_lun=%d,Üast_data_lun=%d,Öarity_lun=%d.\n",

683 
group
->
phy_ödex
, group->
°¨t_lun
, 
	`sh™n⁄_©omic_ªad
(&group->
avaûabÀ_luns
), group->
d©a_luns
, 
	`fú°_lun
(group), 
	`œ°_d©a_lun
(group), 
	`gë_∑rôy_lun
(group));

685 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

687 
	}
}

689 
sh™n⁄_£q_›î©i⁄s_t
 
	gÆl_blocks_£q_›s
;

691 
	$debugfs_Æl_blocks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

693 
ªt
;

695 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
Æl_blocks_£q_›s
, 
£q_Æl_blocks_°¨t
);

696 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
Æl_blocks_£q_›s
, 
£q_Æl_blocks_√xt
);

697 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
Æl_blocks_£q_›s
, 
£q_Æl_blocks_°›
);

698 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
Æl_blocks_£q_›s
, 
£q_Æl_blocks_show
);

699 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
Æl_blocks_£q_›s
);

700 i‡(0 =
ªt
)

701 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

702  
ªt
;

703 
	}
}

705 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_Æl_blocks_f›s
;

708 #ifde‡
CONFIG_SHANNON_DEBUG_DUMP


709 *
	$£q_dump_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

711 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

712 i‡(*
pos
 >
sdev
->
sb_cou¡
)

713  
NULL
;

714  
sdev
->
sbs
 + *
pos
;

715 
	}
}

717 *
	$£q_dump_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

719 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

720 (*
pos
)++;

721 i‡(*
pos
 >
sdev
->
sb_cou¡
)

722  
NULL
;

723  
sdev
->
sbs
 + *
pos
;

724 
	}
}

726 
	$£q_dump_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

728 
	}
}

730 
	$£q_dump_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

732 
i
, 
j
, 
k
, 
lun_off£t
;

733 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

734 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
v
;

735 
sub_group
 *
group
;

737 i‡(0 =
sb
->
sb_ödex
) {

739 
	`sh™n⁄_£q_¥ötf
(
s
, "[section-tag:variables]\n");

740 
	`sh™n⁄_£q_¥ötf
(
s
, "sb_cou¡=%d\n", 
sdev
->
sb_cou¡
);

741 
	`sh™n⁄_£q_¥ötf
(
s
, "∂™e_cou¡=%d\n", 
sdev
->
∂™es
);

742 
	`sh™n⁄_£q_¥ötf
(
s
, "∑ge_cou¡=%d\n", 
sdev
->
∑ges_ö_eblock
);

743 
	`sh™n⁄_£q_¥ötf
(
s
, "∑ge_size=%d\n", 
sdev
->
«nd_∑ge_size
);

744 
	`sh™n⁄_£q_¥ötf
(
s
, "oob_size=%d\n", 
sdev
->
oob_size
);

745 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_cou¡=%d\n", 
sdev
->
lun_cou¡
);

746 
	`sh™n⁄_£q_¥ötf
(
s
, "rg_cou¡=%d\n", 
sdev
->
∑rôy_groups
);

747 
	`sh™n⁄_£q_¥ötf
(
s
, "rg_max_luns=%d\n", 
sdev
->
max_luns_ö_group
);

748 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇ∑côy=%ŒuGB\n", 
sdev
->
sdisk
.
£˘‹s
*512/(1000*1000*1000));

749 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_budgë=%d\n", 
sdev
->
mbr
.
powî_budgë
);

750 
	`sh™n⁄_£q_¥ötf
(
s
, "if˛ock=%d\n", 
sdev
->
mbr
.
˛k
);

751 
	`sh™n⁄_£q_¥ötf
(
s
, "flashid=");

752 
i
 = 0; i < (
sdev
->
Êashid
); i++)

753 
	`sh™n⁄_£q_¥ötf
(
s
, "%02X%s", (
sdev
->
Êashid
 >> 
i
*8)&0xFF, i != (sdev->flashid)-1 ? " " : "\n");

754 
	`sh™n⁄_£q_¥ötf
(
s
, "bad_phy_lun_map=");

755 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
; i++)

756 
	`sh™n⁄_£q_¥ötf
(
s
, "%016ŒX%s", 
sdev
->
mbr
.
bad_phy_lun_m≠
[
i
], i !
BAD_LUN_MAP_ARRAY_SIZE
-1 ? " " : "\n");

757 
	`sh™n⁄_£q_¥ötf
(
s
, "max_ch™√ls=%d\n", 
sdev
->
max_ch™√ls
);

758 
	`sh™n⁄_£q_¥ötf
(
s
, "max_lun£t_ö_ch™√l=%d\n", 
sdev
->
max_lun£t_ö_ch™√l
);

759 
	`sh™n⁄_£q_¥ötf
(
s
, "max_lun_ö_lun£t=%d\n", 
sdev
->
max_lun_ö_lun£t
);

760 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

761 
	`sh™n⁄_£q_¥ötf
(
s
, "io_width=%d\n", 
	`sh™n⁄_ªad_ªg
(&
sdev
->
globÆ_b¨
->
øid_öfo
, 
PER_BYTE_DISABLE
) == 0 ? 16 : 8);

762 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

763 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_c‹ª˘i⁄_powî=%d\n", 
sdev
->
ecc_c‹ª˘i⁄_powî
);

764 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_codew‹ds_ö_logicb=%d\n", 
sdev
->
ecc_codew‹ds_ö_logicb
);

765 
	`sh™n⁄_£q_¥ötf
(
s
, "subsy°em_devi˚_id=%04X\n", 
sdev
->
pci_öfo
.
subsy°em_devi˚_id
);

766 
	`sh™n⁄_£q_¥ötf
(
s
, "¢=%s\n", 
sdev
->
£rvi˚_èg
);

769 
	`sh™n⁄_£q_¥ötf
(
s
, "[section-tag:log2phy]\n");

770 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

771 
	`sh™n⁄_£q_¥ötf
(
s
, "%d=%d\n", 
i
, 
sdev
->
lun
[i]->
phy_lun_num
);

774 
	`sh™n⁄_£q_¥ötf
(
s
, "[section-tag:sbs]\n");

778 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

779 
	`sh™n⁄_£q_¥ötf
(
s
, "sb_index=%d,state=%s,valid_pages=%d,in_write=%d,"

781 
sb
->
sb_ödex
, 
	`°©e_«me
(sb->
°©e
), 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
), sh™n⁄_©omic_ªad(&sb->
ö_wrôe_logicbs
),

782 
sb
->
avaûabÀ_luns
, (
ul⁄g
)sb->
£q_num
, sb->
îa£_cou¡î
, sb->
wr_off£t
, sb->
mö_avaûabÀ_luns
, sb->
ª˛aim_köd
);

784 
	`sh™n⁄_£q_¥ötf
(
s
, " badlun_bitmap=");

785 
i
 = 0; i < 
	`ARRAY_SIZE
(
sb
->
bad_lun
); i++)

786 
	`sh™n⁄_£q_¥ötf
(
s
, "%016lX%s", 
sb
->
bad_lun
[
i
], i !
	`ARRAY_SIZE
(sb->bad_lun)-1 ? "-" : "\n");

788 
i
 = 0; i < 
sb
->
sdev
->
∑rôy_groups
; i++) {

789 
group
 = &
sb
->
sub_group
[
i
];

790 
	`sh™n⁄_£q_¥ötf
(
s
, "Öhy_index=%d,start_lun=%d,available_luns=%d,data_luns=%d,first_lun=%d,last_data_lun=%d,parity_lun=%d,used_data_luns=",

791 
group
->
phy_ödex
, group->
°¨t_lun
, group->
avaûabÀ_luns
, group->
d©a_luns
, 
	`fú°_lun
(group), 
	`œ°_d©a_lun
(group), 
	`gë_∑rôy_lun
(group));

792 i‡(
sb
->
mö_avaûabÀ_luns
 > 1 && 
group
->
phy_ödex
 >= 0) {

793 
k
 = 
sb
->
mö_avaûabÀ_luns
 - 1;

794 
j
 = 0; j < 
sdev
->
max_luns_ö_group
; j++) {

795 
lun_off£t
 = (
	`fú°_lun
(
group
)-group->
°¨t_lun
+
j
)%
sdev
->
max_luns_ö_group
 + group->start_lun;

796 i‡(!
	`is_bad_lun
(
sb
, 
lun_off£t
)) {

797 
k
--;

798 
	`sh™n⁄_£q_¥ötf
(
s
, "%d%s", 
lun_off£t
, 
k
 ? "-" : "\n");

799 i‡(!
k
)

803 i‡(
k
)

804 
	`sh™n⁄_£q_¥ötf
(
s
, "XXX: used_data_lunsÖarsingÉrror!\n");

806 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

808 
	`sh™n⁄_£q_¥ötf
(
s
, "----------------------------------------------------------------\n");

809 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

811 
	}
}

813 
sh™n⁄_£q_›î©i⁄s_t
 
	gsbs_£q_›s
;

815 
	$debugfs_dump_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

817 
ªt
;

819 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
sbs_£q_›s
, 
£q_dump_°¨t
);

820 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
sbs_£q_›s
, 
£q_dump_√xt
);

821 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
sbs_£q_›s
, 
£q_dump_°›
);

822 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
sbs_£q_›s
, 
£q_dump_show
);

823 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
sbs_£q_›s
);

824 i‡(0 =
ªt
)

825 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

826  
ªt
;

827 
	}
}

829 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_dump_f›s
;

832 *
	$hŸ_blocks_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

834 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

835 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

836  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
u£d_blocks
[
HOT_INDEX
], *
pos
);

837 
	}
}

839 *
	$hŸ_blocks_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

841  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
u£d_blocks
[
HOT_INDEX
], 
pos
);

842 
	}
}

844 
	$hŸ_blocks_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

846 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
u£d_blocks_lock
[
HOT_INDEX
]);

847 
	}
}

849 
	$blocks_li°_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

851 
sh™n⁄_sb
 *
sb
 = 
	`c⁄èöî_of
(
v
, sh™n⁄_sb, 
li°
);

853 
	`sh™n⁄_£q_¥ötf
(
s
, "sb_index=%3d, state=%18s(%3d), valid_pages=%7d, in_write=%d,ávail_luns=%d, seq_num=%7ld,Érase_count=%d, flag=0x%x.\n",

854 
sb
->
sb_ödex
, 
	`°©e_«me
(sb->
°©e
), sb->°©e, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
),

855 
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
), sh™n⁄_©omic_ªad(&sb->
avaûabÀ_luns
), (
ul⁄g
)sb->
£q_num
,

856 
sb
->
îa£_cou¡î
, sb->
ª˛aim_köd
);

858 
	}
}

860 
sh™n⁄_£q_›î©i⁄s_t
 
	ghŸ_blocks_£q_›s
;

862 
	$debugfs_hŸ_blocks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

864 
ªt
;

865 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
hŸ_blocks_£q_›s
, 
hŸ_blocks_£q_°¨t
);

866 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
hŸ_blocks_£q_›s
, 
hŸ_blocks_£q_√xt
);

867 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
hŸ_blocks_£q_›s
, 
hŸ_blocks_£q_°›
);

868 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
hŸ_blocks_£q_›s
, 
blocks_li°_£q_show
);

869 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
hŸ_blocks_£q_›s
);

870 i‡(0 =
ªt
)

871 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

872  
ªt
;

873 
	}
}

875 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_hŸ_blocks_f›s
;

877 *
	$cﬁd_blocks_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

879 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

880 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

881  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
u£d_blocks
[
COLD_INDEX
], *
pos
);

882 
	}
}

884 *
	$cﬁd_blocks_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

886  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
u£d_blocks
[
COLD_INDEX
], 
pos
);

887 
	}
}

889 
	$cﬁd_blocks_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

891 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
u£d_blocks_lock
[
COLD_INDEX
]);

892 
	}
}

894 
sh™n⁄_£q_›î©i⁄s_t
 
	gcﬁd_blocks_£q_›s
;

896 
	$debugfs_cﬁd_blocks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

898 
ªt
;

899 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
cﬁd_blocks_£q_›s
, 
cﬁd_blocks_£q_°¨t
);

900 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
cﬁd_blocks_£q_›s
, 
cﬁd_blocks_£q_√xt
);

901 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
cﬁd_blocks_£q_›s
, 
cﬁd_blocks_£q_°›
);

902 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
cﬁd_blocks_£q_›s
, 
blocks_li°_£q_show
);

903 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
cﬁd_blocks_£q_›s
);

904 i‡(0 =
ªt
)

905 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

906  
ªt
;

907 
	}
}

909 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_cﬁd_blocks_f›s
;

911 *
	$waô_îa£d_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

913 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

914 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_îa£d_lock
);

915  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
waô_îa£d
, *
pos
);

916 
	}
}

918 *
	$waô_îa£d_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

920  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
waô_îa£d
, 
pos
);

921 
	}
}

923 
	$waô_îa£d_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

925 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
waô_îa£d_lock
);

926 
	}
}

928 
sh™n⁄_£q_›î©i⁄s_t
 
	gwaô_îa£d_£q_›s
;

930 
	$debugfs_waô_îa£d_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

932 
ªt
;

933 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
waô_îa£d_£q_›s
, 
waô_îa£d_£q_°¨t
);

934 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
waô_îa£d_£q_›s
, 
waô_îa£d_£q_√xt
);

935 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
waô_îa£d_£q_›s
, 
waô_îa£d_£q_°›
);

936 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
waô_îa£d_£q_›s
, 
blocks_li°_£q_show
);

937 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
waô_îa£d_£q_›s
);

938 i‡(0 =
ªt
)

939 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

940  
ªt
;

941 
	}
}

943 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_waô_îa£d_f›s
;

945 *
	$waô_c›y_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

947 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

948 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_c›y_lock
);

949  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
waô_c›y
, *
pos
);

950 
	}
}

952 *
	$waô_c›y_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

954  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
waô_c›y
, 
pos
);

955 
	}
}

957 
	$waô_c›y_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

959 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
waô_c›y_lock
);

960 
	}
}

962 
sh™n⁄_£q_›î©i⁄s_t
 
	gwaô_c›y_£q_›s
;

964 
	$debugfs_waô_c›y_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

966 
ªt
;

967 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
waô_c›y_£q_›s
, 
waô_c›y_£q_°¨t
);

968 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
waô_c›y_£q_›s
, 
waô_c›y_£q_√xt
);

969 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
waô_c›y_£q_›s
, 
waô_c›y_£q_°›
);

970 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
waô_c›y_£q_›s
, 
blocks_li°_£q_show
);

971 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
waô_c›y_£q_›s
);

972 i‡(0 =
ªt
)

973 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

974  
ªt
;

975 
	}
}

977 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_waô_c›y_f›s
;

979 *
	$‰ì_blocks_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

981 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

982 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

983  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
‰ì_blocks
, *
pos
);

984 
	}
}

986 *
	$‰ì_blocks_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

988  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
‰ì_blocks
, 
pos
);

989 
	}
}

991 
	$‰ì_blocks_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

993 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
‰ì_blocks_lock
);

994 
	}
}

996 
sh™n⁄_£q_›î©i⁄s_t
 
	g‰ì_blocks_£q_›s
;

998 
	$debugfs_‰ì_blocks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1000 
ªt
;

1001 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
‰ì_blocks_£q_›s
, 
‰ì_blocks_£q_°¨t
);

1002 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
‰ì_blocks_£q_›s
, 
‰ì_blocks_£q_√xt
);

1003 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
‰ì_blocks_£q_›s
, 
‰ì_blocks_£q_°›
);

1004 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
‰ì_blocks_£q_›s
, 
blocks_li°_£q_show
);

1005 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
‰ì_blocks_£q_›s
);

1006 i‡(0 =
ªt
)

1007 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1008  
ªt
;

1009 
	}
}

1011 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_‰ì_blocks_f›s
;

1013 *
	$îr_blks_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

1015 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1016 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

1017  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
îr_blks
, *
pos
);

1018 
	}
}

1020 *
	$îr_blks_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

1022  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
îr_blks
, 
pos
);

1023 
	}
}

1025 
	$îr_blks_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1027 
	`sh™n⁄_•ö_u∆ock_bh
(&((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
îr_blks_lock
);

1028 
	}
}

1030 
sh™n⁄_£q_›î©i⁄s_t
 
	gîr_blks_£q_›s
;

1032 
	$debugfs_îr_blks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1034 
ªt
;

1035 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
îr_blks_£q_›s
, 
îr_blks_£q_°¨t
);

1036 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
îr_blks_£q_›s
, 
îr_blks_£q_√xt
);

1037 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
îr_blks_£q_›s
, 
îr_blks_£q_°›
);

1038 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
îr_blks_£q_›s
, 
blocks_li°_£q_show
);

1039 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
îr_blks_£q_›s
);

1040 i‡(0 =
ªt
)

1041 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1042  
ªt
;

1043 
	}
}

1045 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_îr_blks_f›s
;

1047 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


1048 
sh™n⁄_li°_hód
 
out°™dög_sbios_li°
;

1049 
sh™n⁄_•ölock_t
 
out°™dög_sbios_li°_lock
;

1051 
	$out°™dög_sbios_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1053 
sh™n⁄_bio
 *
sbio
 = 
	`c⁄èöî_of
(
v
, sh™n⁄_bio, 
debug_li°
);

1055 
	`sh™n⁄_£q_¥ötf
(
s
, "ns_id=%3u,Çs_seq_num=%3u, dma_dir=%d, start_sector=%13lu, bio_size=%7u, status=%d, user_count=%d, wait_dev_pick_mask=0x%lx, sbio->tag=0x%lx.\n",

1056 
sbio
->
ns_id
, sbio->
ns_£q_num
, sbio->
dma_dú
, sbio->
°¨t_£˘‹
, sbio->
bio_size
, sbio->
°©us
, 
	`sh™n⁄_©omic_ªad
(&sbio->
u£r_cou¡
), sbio->
waô_dev_pick_mask
, sbio->
èg
);

1058 
	}
}

1060 *
	$out°™dög_sbios_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

1062 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_sbios_li°_lock
);

1063  
	`sh™n⁄_£q_li°_°¨t
(&
out°™dög_sbios_li°
, *
pos
);

1064 
	}
}

1066 *
	$out°™dög_sbios_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

1068  
	`sh™n⁄_£q_li°_√xt
(
v
, &
out°™dög_sbios_li°
, 
pos
);

1069 
	}
}

1071 
	$out°™dög_sbios_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1073 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_sbios_li°_lock
);

1074 
	}
}

1076 
sh™n⁄_£q_›î©i⁄s_t
 
	gout°™dög_sbios_£q_›s
;

1078 
	$debugfs_out°™dög_sbios_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1080 
ªt
;

1081 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
out°™dög_sbios_£q_›s
, 
out°™dög_sbios_£q_°¨t
);

1082 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
out°™dög_sbios_£q_›s
, 
out°™dög_sbios_£q_√xt
);

1083 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
out°™dög_sbios_£q_›s
, 
out°™dög_sbios_£q_°›
);

1084 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
out°™dög_sbios_£q_›s
, 
out°™dög_sbios_£q_show
);

1085 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
out°™dög_sbios_£q_›s
);

1086  
ªt
;

1087 
	}
}

1089 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_out°™dög_sbios_f›s
;

1091 
sh™n⁄_li°_hód
 
out°™dög_ªqs_li°
;

1092 
sh™n⁄_•ölock_t
 
out°™dög_ªqs_li°_lock
;

1094 
	$out°™dög_ªqs_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1096 
sh™n⁄_ªque°
 *
ªq
 = 
	`c⁄èöî_of
(
v
, sh™n⁄_ªque°, 
debug_li°
);

1098 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%3d,Üun_pba=%8d,Çs_id=%2u,Çs_seq_num=%3u, state=%2d,Ñeread=0x%x,Üba=%9ld, opcode=0x%x,Écc=0x%x,Ñeq->index=0x%x,Åag=0x%lx.\n",

1099 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
°©e
,Ñeq->
ªªad
,

1100 
ªq
->
lba
,Ñeq->
›code
,Ñeq->
_ecc
,Ñeq->
ödex
,Ñeq->
èg
);

1102 
	}
}

1104 *
	$out°™dög_ªqs_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

1106 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_ªqs_li°_lock
);

1107  
	`sh™n⁄_£q_li°_°¨t
(&
out°™dög_ªqs_li°
, *
pos
);

1108 
	}
}

1110 *
	$out°™dög_ªqs_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

1112  
	`sh™n⁄_£q_li°_√xt
(
v
, &
out°™dög_ªqs_li°
, 
pos
);

1113 
	}
}

1115 
	$out°™dög_ªqs_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1117 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_ªqs_li°_lock
);

1118 
	}
}

1120 
sh™n⁄_£q_›î©i⁄s_t
 
	gout°™dög_ªqs_£q_›s
;

1122 
	$debugfs_out°™dög_ªqs_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1124 
ªt
;

1125 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
out°™dög_ªqs_£q_›s
, 
out°™dög_ªqs_£q_°¨t
);

1126 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
out°™dög_ªqs_£q_›s
, 
out°™dög_ªqs_£q_√xt
);

1127 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
out°™dög_ªqs_£q_›s
, 
out°™dög_ªqs_£q_°›
);

1128 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
out°™dög_ªqs_£q_›s
, 
out°™dög_ªqs_£q_show
);

1129 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
out°™dög_ªqs_£q_›s
);

1130  
ªt
;

1131 
	}
}

1133 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_out°™dög_ªqs_f›s
;

1136 
	$ªq_queue_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1138 
sh™n⁄_ªque°
 *
ªq
 = 
	`c⁄èöî_of
(
v
, sh™n⁄_ªque°, 
li°
);

1140 
	`sh™n⁄_£q_¥ötf
(
s
, "%13s(0x%4x),Çs_id=%u,Çs_seq_num=%u,Üba=0x%lx,Üun=%2d,Üun_pba=0x%x, head=%d,Åag=0x%lx.\n",

1141 
	`›code_«me
(
ªq
->
›code
),Ñeq->›code,Ñeq->
ns_id
,Ñeq->
ns_£q_num
,

1142 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
hód
,Ñeq->
èg
);

1144 
	}
}

1146 *
	$ªq_queue0_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

1148 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1149 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[0]);

1150  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
ªq_queue
[0], *
pos
);

1151 
	}
}

1153 *
	$ªq_queue0_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

1155  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
ªq_queue
[0], 
pos
);

1156 
	}
}

1158 
	$ªq_queue0_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1160 
	`sh™n⁄_•ö_u∆ock_bh
(&(((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
ªq_queue_lock
[0]));

1161 
	}
}

1163 
sh™n⁄_£q_›î©i⁄s_t
 
	gªq_queue0_£q_›s
;

1165 
	$debugfs_ªq_queue0_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1167 
ªt
;

1168 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
ªq_queue0_£q_›s
, 
ªq_queue0_£q_°¨t
);

1169 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
ªq_queue0_£q_›s
, 
ªq_queue0_£q_√xt
);

1170 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
ªq_queue0_£q_›s
, 
ªq_queue0_£q_°›
);

1171 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
ªq_queue0_£q_›s
, 
ªq_queue_£q_show
);

1172 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
ªq_queue0_£q_›s
);

1173 i‡(0 =
ªt
)

1174 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1175  
ªt
;

1176 
	}
}

1178 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_ªq_queue0_f›s
;

1180 *
	$ªq_queue1_£q_°¨t
(
sh™n⁄_£q_fûe_t
 *
s
, 
sh™n⁄_loff_t
 *
pos
)

1182 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1183 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[1]);

1184  
	`sh™n⁄_£q_li°_°¨t
(&
sdev
->
ªq_queue
[1], *
pos
);

1185 
	}
}

1187 *
	$ªq_queue1_£q_√xt
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
, 
sh™n⁄_loff_t
 *
pos
)

1189  
	`sh™n⁄_£q_li°_√xt
(
v
, &((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
ªq_queue
[1], 
pos
);

1190 
	}
}

1192 
	$ªq_queue1_£q_°›
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1194 
	`sh™n⁄_•ö_u∆ock_bh
(&(((
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
))->
ªq_queue_lock
[1]));

1195 
	}
}

1197 
sh™n⁄_£q_›î©i⁄s_t
 
	gªq_queue1_£q_›s
;

1199 
	$debugfs_ªq_queue1_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1201 
ªt
;

1202 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
ªq_queue1_£q_›s
, 
ªq_queue1_£q_°¨t
);

1203 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
ªq_queue1_£q_›s
, 
ªq_queue1_£q_√xt
);

1204 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
ªq_queue1_£q_›s
, 
ªq_queue1_£q_°›
);

1205 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
ªq_queue1_£q_›s
, 
ªq_queue_£q_show
);

1206 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
ªq_queue1_£q_›s
);

1207 i‡(0 =
ªt
)

1208 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1209  
ªt
;

1210 
	}
}

1212 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_ªq_queue1_f›s
;

1214 
	$cmd_queue_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1216 
i
;

1217 
sh™n⁄_lun£t
 *
lun£t
;

1218 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1220 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

1221 
lun£t
 = &
sdev
->
lun£ts
[
i
];

1222 
	`sh™n⁄_£q_¥ötf
(
s
, "lun£t=%2d.\n", 
i
);

1223 
	`sh™n⁄_£q_¥ötf
(
s
, " sq_hw_head=0x%x, sq_hw_tail=0x%x, cq_hw_head=0x%x.\n",

1224 
lun£t
->
sq_hw_hód
,Üun£t->
sq_hw_èû
,Üun£t->
cq_hw_hód
);

1225 
	`sh™n⁄_£q_¥ötf
(
s
, " sq_head=0x%x, sq_head_tmp=0x%x, cq_head=0x%x, cq_tail=0x%x, cq_tail_tmp=0x%x.\n",

1226 
lun£t
->
sq_hód
,Üun£t->
sq_hód_tmp
,Üun£t->
cq_hód
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
);

1227 
	`sh™n⁄_£q_puts
(
s
, "-----------------------------------------------------------------\n");

1229 #ifde‡
SHANNON_USE_WRITE_BUFFER


1230 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

1231 
	`sh™n⁄_£q_¥ötf
(
s
, " bufq_sq_hw_head=0x%x, bufq_sq_hw_tail=0x%x, bufq_cq_hw_head=0x%x.\n",

1232 
sdev
->
bufq_sq_hw_hód
[
i
], sdev->
bufq_sq_hw_èû
[i], sdev->
bufq_cq_hw_hód
[i]);

1233 
	`sh™n⁄_£q_¥ötf
(
s
, " bufq_sq_head=0x%x, bufq_sq_head_tmp=0x%x, bufq_cq_head=0x%x, bufq_cq_tail=0x%x.\n",

1234 
sdev
->
bufq_sq_hód
[
i
], sdev->
bufq_sq_hód_tmp
[i], sdev->
bufq_cq_hód
[i], sdev->
bufq_cq_èû
[i]);

1235 
	`sh™n⁄_£q_puts
(
s
, "-----------------------------------------------------------------\n");

1239 
	}
}

1241 
	$debugfs_cmd_queue_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1243  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
cmd_queue_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1244 
	}
}

1246 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_cmd_queue_f›s
;

1248 
	$cmd_queue_øw_d©a_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1250 
k
 = 0;

1251 
__u32
 *
d©a
;

1252 
sh™n⁄_lun£t
 *
lun£t
 = (sh™n⁄_lun£à*)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1254 
	`sh™n⁄_£q_¥ötf
(
s
, "command_queue:\n");

1255 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1256 
d©a
 = (
__u32
 *)((*)
lun£t
->
sq_addr
 + 
k
 * 32);

1257 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1258 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1260 
	`sh™n⁄_£q_¥ötf
(
s
, "completion_queue:\n");

1261 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1262 
d©a
 = (
__u32
 *)((*)
lun£t
->
cq_addr
 + 
k
 * 32);

1263 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1264 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1267 
	}
}

1269 
	$debugfs_cmd_queue_øw_d©a_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1271  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
cmd_queue_øw_d©a_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1272 
	}
}

1274 
	$cmd_queue_øw_d©a_bufq0_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1276 #ifde‡
SHANNON_USE_WRITE_BUFFER


1277 
k
 = 0;

1278 
__u32
 *
d©a
;

1279 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1281 
	`sh™n⁄_£q_¥ötf
(
s
, "command_queue:\n");

1282 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1283 
d©a
 = (
__u32
 *)((*)
sdev
->
bufq_sq_addr
[0] + 
k
 * 32);

1284 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1285 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1287 
	`sh™n⁄_£q_¥ötf
(
s
, "completion_queue:\n");

1288 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1289 
d©a
 = (
__u32
 *)((*)
sdev
->
bufq_cq_addr
[0] + 
k
 * 32);

1290 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1291 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1295 
	}
}

1297 
	$debugfs_cmd_queue_øw_d©a_bufq0_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1299  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
cmd_queue_øw_d©a_bufq0_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1300 
	}
}

1302 
	$cmd_queue_øw_d©a_bufq1_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1304 #ifde‡
SHANNON_USE_WRITE_BUFFER


1305 
k
 = 0;

1306 
__u32
 *
d©a
;

1307 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1309 
	`sh™n⁄_£q_¥ötf
(
s
, "command_queue:\n");

1310 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1311 
d©a
 = (
__u32
 *)((*)
sdev
->
bufq_sq_addr
[1] + 
k
 * 32);

1312 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1313 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1315 
	`sh™n⁄_£q_¥ötf
(
s
, "completion_queue:\n");

1316 
k
 = 0; k < 
QUEUE_SIZE
 / 32; k++) {

1317 
d©a
 = (
__u32
 *)((*)
sdev
->
bufq_cq_addr
[1] + 
k
 * 32);

1318 
	`sh™n⁄_£q_¥ötf
(
s
, "%04.4x: %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x %08.8x\n", \

1319 
k
 * 32, *
d©a
, *(data + 1), *(data + 2), *(data + 3), *(data + 4), *(data + 5), *(data + 6), *(data + 7));

1323 
	}
}

1325 
	$debugfs_cmd_queue_øw_d©a_bufq1_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1327  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
cmd_queue_øw_d©a_bufq1_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1328 
	}
}

1330 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_cmd_queue_øw_d©a_f›s
;

1331 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_cmd_queue_øw_d©a_bufq0_f›s
;

1332 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_cmd_queue_øw_d©a_bufq1_f›s
;

1334 
	$gc_°©e_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1336 
gc_block_°©e
 *
gc_°©e
;

1337 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1338 
sh™n⁄_ovîœp
 *
ﬁ
;

1339 #ifde‡
CONFIG_RECORD_PBA_TABLE_IN_GC


1340 
i
;

1343 
	`sh™n⁄_£q_¥ötf
(
s
, "hód_cou¡=%d.\n", 
sdev
->
hód_cou¡
);

1344 
	`sh™n⁄_£q_¥ötf
(
s
, "HOT_PC: sb=%d, group=%d,Üun_in_group=%d,Üun_offset=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

1345 
sdev
->
wr_sb
[
HOT_INDEX
], sdev->
wr_group
[HOT_INDEX], sdev->
lun_ö_group
[HOT_INDEX], sdev->
wr_lun_off£t
[HOT_INDEX],

1346 
sdev
->
wr_chunk
[
HOT_INDEX
], sdev->
wr_∂™e
[HOT_INDEX], sdev->
wr_∑ge
[HOT_INDEX], sdev->
wr_logicb
[HOT_INDEX]);

1347 
	`sh™n⁄_£q_¥ötf
(
s
, "hŸ_ªq˙t=%d.\n", 
sdev
->
chunk_ªq˙t
[
HOT_INDEX
]);

1348 
	`sh™n⁄_£q_¥ötf
(
s
, "hŸ_ªq=%p.\n", 
sdev
->
chunk_ªq
[
HOT_INDEX
]);

1349 
	`sh™n⁄_£q_¥ötf
(
s
, "COLD_PC: sb=%d, group=%d,Üun_in_group=%d,Üun_offset=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

1350 
sdev
->
wr_sb
[
COLD_INDEX
], sdev->
wr_group
[COLD_INDEX], sdev->
lun_ö_group
[COLD_INDEX], sdev->
wr_lun_off£t
[COLD_INDEX],

1351 
sdev
->
wr_chunk
[
COLD_INDEX
], sdev->
wr_∂™e
[COLD_INDEX], sdev->
wr_∑ge
[COLD_INDEX], sdev->
wr_logicb
[COLD_INDEX]);

1352 
	`sh™n⁄_£q_¥ötf
(
s
, "cﬁd_ªq˙t=%d.\n", 
sdev
->
chunk_ªq˙t
[
COLD_INDEX
]);

1353 
	`sh™n⁄_£q_¥ötf
(
s
, "cﬁd_ªq=%p.\n\n", 
sdev
->
chunk_ªq
[
COLD_INDEX
]);

1354 
	`sh™n⁄_£q_¥ötf
(
s
, "≥riod_ªad_°©e=%d.\n", 
sdev
->
≥riod_ªad
.
°©e
);

1355 
	`sh™n⁄_£q_¥ötf
(
s
, "gc_thªad_°©e=%d.\n", 
sdev
->
gc_thªad_°©e
);

1356 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_gc_blk˙t=%d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_blk˙t
));

1358 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_°©e_li°_lock
);

1359 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
gc_°©e_li°
)) {

1360 
	`sh™n⁄_li°_f‹_óch_íåy
(
gc_°©e
, &
sdev
->
gc_°©e_li°
, 
li°
) {

1361 
	`sh™n⁄_£q_¥ötf
(
s
, "sb_ödex=%d.\n", 
gc_°©e
->
sb_ödex
);

1362 
	`sh™n⁄_£q_¥ötf
(
s
, "vÆid_∑ges=%d.\n", 
gc_°©e
->
vÆid_∑ges
);

1363 
	`sh™n⁄_£q_¥ötf
(
s
, "gc_ö_Êight=%d.\n", 
sdev
->
sbs
[
gc_°©e
->
sb_ödex
].
gc_ö_Êight
);

1364 
	`sh™n⁄_£q_¥ötf
(
s
, "bad_lun[0]=0x%lx.\n", 
gc_°©e
->
bad_lun
[0]);

1365 
	`sh™n⁄_£q_¥ötf
(
s
, "îr‹_lun[0]=0x%lx.\n", 
gc_°©e
->
îr‹_lun
[0]);

1366 #ifde‡
CONFIG_RECORD_PBA_TABLE_IN_GC


1367 i‡(
gc_°©e
->
pba_èbÀ
) {

1368 
i
 = 0; i < 
gc_°©e
->
pba_èbÀ_Àn
; i++) {

1369 i‡(
i
%32 == 0)

1370 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

1371 i‡(
i
%(
sdev
->
logicbs_ö_siblög_eblock
 * 
PBA_ENTRY_LEN
 / 8) == 0)

1372 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

1373 
	`sh™n⁄_£q_¥ötf
(
s
, "%2x ", 
gc_°©e
->
pba_èbÀ
[
i
]);

1377 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

1380 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_°©e_li°_lock
);

1382 i‡(!
sdev
->
ovîœp_wrôe
 || !sdev->
ovîœp
)

1385 
ﬁ
 = 
sdev
->
ovîœp
;

1386 
	`sh™n⁄_£q_¥ötf
(
s
, "overlap_info:\n");

1387 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_logicb=%d.\n", 
ﬁ
->
wr_logicb
);

1388 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_∑ge=%d.\n", 
ﬁ
->
wr_∑ge
);

1389 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_chunk=%d.\n", 
ﬁ
->
wr_chunk
);

1390 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_∂™e=%d.\n", 
ﬁ
->
wr_∂™e
);

1391 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_sb=%d.\n", 
sdev
->
mbr
.
ovîœp_sblk
);

1392 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_lun=%d.\n", 
ﬁ
->
pba
.
lun
);

1393 
	`sh™n⁄_£q_¥ötf
(
s
, "wr_lun_pba=%d.\n", 
ﬁ
->
pba
.
lun_pba
);

1394 
	`sh™n⁄_£q_¥ötf
(
s
, "lba=0x%16llx, buf_lba=0x%16llx, head=0x%x, hit_count=%lu.\n", \

1395 
ﬁ
->
_mëad©a
, ol->
buf„d_mëad©a
, ol->
hód
, ol->
hô_cou¡
);

1398 
	}
}

1400 
	$debugfs_gc_°©e_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1402  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
gc_°©e_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1403 
	}
}

1405 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_gc_°©e_f›s
;

1407 #i‡!
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

1408 
	$ªgi°îs_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1410 
i
;

1411 
u32
 
Êash_‹g
, 
£˘‹_‹g
, 
∑ge_‹g
, 
øid_öfo
, 
ecc_‹g
, 
misc
, 
s¸m_£ed
, 
s¸m_mask
, 
fw_vîsi⁄
;

1412 
u32
 
sq_addr0
, 
sq_addr1
, 
cq_addr0
, 
cq_addr1
, 
sq_hód
, 
cq_hód
, 
sq_èû
, 
lun_°©us
;

1413 #ifde‡
SHANNON_USE_WRITE_BUFFER


1414 
u32
 
ack_hód
, 
ack_èû
;

1416 
sh™n⁄_lun£t
 *
lun£t
;

1417 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1419 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1420 
Êash_‹g
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
Êash
);

1421 
£˘‹_‹g
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
logicb
);

1422 
∑ge_‹g
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
∑ge
);

1423 
øid_öfo
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->raid_info);

1424 
ecc_‹g
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
ecc
);

1425 
misc
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->misc);

1426 
s¸m_£ed
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
s¸ambÀr_£ed
);

1427 
s¸m_mask
 = 
	`sh™n⁄_ªadl
(&
sdev
->
globÆ_b¨
->
s¸ambÀr_mask
);

1428 
fw_vîsi⁄
 = 
	`sh™n⁄_ªadl
(&
sdev
->
b¨
->
fúmw¨e_vîsi⁄
);

1429 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1431 
	`sh™n⁄_£q_¥ötf
(
s
, "Global configuration(DWORD 192):\n");

1432 
	`sh™n⁄_£q_¥ötf
(
s
, "Êash org™iz©i⁄: 0x%x.\n", 
Êash_‹g
);

1433 
	`sh™n⁄_£q_¥ötf
(
s
, "£˘‹ org™iz©i⁄: 0x%x.\n", 
£˘‹_‹g
);

1434 
	`sh™n⁄_£q_¥ötf
(
s
, "∑ge/chunk org™iz©i⁄: 0x%x.\n", 
∑ge_‹g
);

1435 
	`sh™n⁄_£q_¥ötf
(
s
, "RAID info: 0x%x.\n", 
øid_öfo
);

1436 
	`sh™n⁄_£q_¥ötf
(
s
, "ECC org™iz©i⁄: 0x%x.\n", 
ecc_‹g
);

1437 
	`sh™n⁄_£q_¥ötf
(
s
, "Misc: 0x%x.\n", 
misc
);

1438 
	`sh™n⁄_£q_¥ötf
(
s
, "S¸ambÀ∏£ed: 0x%x.\n", 
s¸m_£ed
);

1439 
	`sh™n⁄_£q_¥ötf
(
s
, "S¸ambÀ∏mask: 0x%x.\n", 
s¸m_mask
);

1440 
	`sh™n⁄_£q_¥ötf
(
s
, "Fúmw¨êvîsi⁄: %8.8x.\n", 
fw_vîsi⁄
);

1442 
	`sh™n⁄_£q_¥ötf
(
s
, "\nper LUN section:");

1443 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

1444 
lun£t
 = &
sdev
->
lun£ts
[
i
];

1446 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1447 
sq_addr0
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->
sq_dma_addr0
);

1448 
sq_addr1
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->
sq_dma_addr1
);

1449 
cq_addr0
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->
cq_dma_addr0
);

1450 
cq_addr1
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->
cq_dma_addr1
);

1451 
sq_hód
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->sq_head);

1452 
cq_hód
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->cq_head);

1453 
sq_èû
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->sq_tail);

1454 
lun_°©us
 = 
	`sh™n⁄_ªadl
(&
lun£t
->
lun_b¨
->lun_status);

1455 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1457 
	`sh™n⁄_£q_¥ötf
(
s
, "\∆un£t=%d.\n", 
lun£t
->
ödex
);

1458 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_dma_addr0=0x%x.\n", 
sq_addr0
);

1459 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_dma_addr1=0x%x.\n", 
sq_addr1
);

1460 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr0=0x%x.\n", 
cq_addr0
);

1461 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr1=0x%x.\n", 
cq_addr1
);

1462 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_hód = 0x%x.\n", 
sq_hód
);

1463 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_hód = 0x%x.\n", 
cq_hód
);

1464 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_èû = 0x%x.\n", 
sq_èû
);

1465 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_°©u†0x%x.\n", 
lun_°©us
);

1467 #ifde‡
SHANNON_USE_WRITE_BUFFER


1468 
	`sh™n⁄_£q_¥ötf
(
s
, "\nBuffer Queue section:");

1469 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

1470 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1471 
sq_addr0
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->
sq_dma_addr0
);

1472 
sq_addr1
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->
sq_dma_addr1
);

1473 
cq_addr0
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->
cq_dma_addr0
);

1474 
cq_addr1
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->
cq_dma_addr1
);

1475 
sq_hód
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->sq_head);

1476 
cq_hód
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->cq_head);

1477 
sq_èû
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->sq_tail);

1478 
lun_°©us
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_b¨
[
i
]->lun_status);

1479 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1481 
	`sh™n⁄_£q_¥ötf
(
s
, "\ni=%d.\n", 
i
);

1482 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_dma_addr0=0x%x.\n", 
sq_addr0
);

1483 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_dma_addr1=0x%x.\n", 
sq_addr1
);

1484 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr0=0x%x.\n", 
cq_addr0
);

1485 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr1=0x%x.\n", 
cq_addr1
);

1486 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_hód = 0x%x.\n", 
sq_hód
);

1487 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_hód = 0x%x.\n", 
cq_hód
);

1488 
	`sh™n⁄_£q_¥ötf
(
s
, "sq_èû = 0x%x.\n", 
sq_èû
);

1489 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_°©u†0x%x.\n", 
lun_°©us
);

1493 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1494 
cq_addr0
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_ack_b¨
->
cq_dma_addr0
);

1495 
cq_addr1
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_ack_b¨
->
cq_dma_addr1
);

1496 
ack_hód
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_ack_b¨
->
cq_hód
);

1497 
ack_èû
 = 
	`sh™n⁄_ªadl
(&
sdev
->
bufq_ack_b¨
->
ack_cq_èû
);

1498 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1500 
	`sh™n⁄_£q_¥ötf
(
s
, "\nBuffer Ack Queue section:");

1501 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr0=0x%x.\n", 
cq_addr0
);

1502 
	`sh™n⁄_£q_¥ötf
(
s
, "cq_dma_addr1=0x%x.\n", 
cq_addr1
);

1503 
	`sh™n⁄_£q_¥ötf
(
s
, "ack_cq_hód =0x%x.\n", 
ack_hód
);

1504 
	`sh™n⁄_£q_¥ötf
(
s
, "ack_cq_èû =0x%x.\n", 
ack_èû
);

1507 
	}
}

1509 
	$debugfs_ªgi°îs_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1511  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
ªgi°îs_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1512 
	}
}

1514 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_ªgi°îs_f›s
;

1517 
	$queue_dïth_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1519 
i
, 
j
;

1520 
sh™n⁄_lun£t
 *
lun£t
;

1521 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1523 
	`sh™n⁄_£q_¥ötf
(
s
, "\nper LUN section:");

1524 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

1525 
lun£t
 = &
sdev
->
lun£ts
[
i
];

1526 
	`sh™n⁄_£q_¥ötf
(
s
, "\∆un£t=%d.\n", 
lun£t
->
ödex
);

1527 
	`sh™n⁄_£q_¥ötf
(
s
, "depth | both | command_queue | completion_queue\n");

1528 
j
 = 0; j < 17; j++) {

1529 
	`sh™n⁄_£q_¥ötf
(
s
, " %2d: %6d, %6d, %6d.\n", 
j
, 
lun£t
->
queue_dïth
[j],Üun£t->
cmd_queue_dïth
[j],Üun£t->
comp_queue_dïth
[j]);

1533 
	}
}

1535 
	$debugfs_queue_dïth_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1537  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
queue_dïth_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1538 
	}
}

1540 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_queue_dïth_f›s
;

1542 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


1543 
	$sq_dïth_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1545 
i
, 
j
;

1546 
sh™n⁄_lun£t
 *
lun£t
;

1547 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1549 
	`sh™n⁄_£q_¥ötf
(
s
, "Queue depth in shannon_pick_request:\n:");

1550 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

1551 
lun£t
 = &
sdev
->
lun£ts
[
i
];

1552 
	`sh™n⁄_£q_¥ötf
(
s
, "\∆un=%d.\n", 
lun£t
->
ödex
);

1553 
	`sh™n⁄_£q_¥ötf
(
s
, "depth | command_queue | sqánd cq\n");

1554 
j
 = 0; j < 11; j++) {

1555 
	`sh™n⁄_£q_¥ötf
(
s
, " %2d: %8d, %20d.\n", 
j
, 
lun£t
->
pick_sq_dïth
[j],Üun£t->
pick_scq_dïth
[j]);

1559 
	}
}

1561 
	$debugfs_sq_dïth_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1563  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
sq_dïth_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1564 
	}
}

1566 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_sq_dïth_f›s
;

1570 
sh™n⁄_mempoﬁ_t
 *
sh™n⁄_ªq_poﬁ
;

1571 
sh™n⁄_mempoﬁ_t
 *
sh™n⁄_bio_poﬁ
;

1572 
sh™n⁄_pm_qos_vÆue
;

1573 
sh™n⁄_pm_qos_dißbÀ
;

1574 
sh™n⁄_u£_iosched
;

1575 
	#SH_DCM_DEBUG_OFFSET
 0x18

	)

1577 
	$lun_°©i°ics_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1579 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1580 
sh™n⁄_lun
 *
lun
 = 
NULL
;

1582 
i
 = 0, 
j
 = 0;

1584 
max_ecc
 = 0, 
max_adv_ecc
 = 0;

1586 
	`sh™n⁄_£q_¥ötf
(
s
, "======lun statistics:======\n");

1588 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

1589 
max_ecc
 = 0;

1590 
max_adv_ecc
 = 0;

1591 
lun
 = 
sdev
->lun[
i
];

1593 
j
 = 0; j <
sdev
->
ecc_c‹ª˘i⁄_powî
; j++) {

1594 i‡((
lun
->
ecc_°©i°ics
[
j
] !0Ë&& (j > 
max_ecc
))

1595 
max_ecc
 = 
j
;

1596 i‡((
lun
->
adv_ªad_ecc_°©i°ics
[
j
] !0Ë&& (j > 
max_adv_ecc
))

1597 
max_adv_ecc
 = 
j
;

1600 
	`sh™n⁄_£q_¥ötf
(
s
, "lu¿%4d:Écc_Áûuª_times=%d, max_ecc=%d,ádv_ªad_Áûuª_times=%d, max_adv_ecc=%d, bad_blk_cou¡=%d, dy«mic_bad_blk˙t=%d,Çext_em±y_∑ge=%d\n", 
i
, \

1601 
	`sh™n⁄_©omic_ªad
(&
lun
->
ecc_Áûuª_times
), 
max_ecc
, sh™n⁄_©omic_ªad(&lun->
adv_ªad_Áûuª_times
), 
max_adv_ecc
,\

1602 
lun
->
bad_blk_cou¡
, 
	`sh™n⁄_©omic_ªad
(&lun->
dy«mic_bad_blk˙t
), sh™n⁄_©omic_ªad(&lun->
√xt_em±y_∑ge
));

1605 
	`sh™n⁄_£q_¥ötf
(
s
, "\n======detailedÜunÉcc statistics:======\n");

1607 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

1608 
lun
 = 
sdev
->lun[
i
];

1610 
	`sh™n⁄_£q_¥ötf
(
s
, "-----------------------------------------------------------------\n");

1611 
	`sh™n⁄_£q_¥ötf
(
s
, "lu¿%d:\n", 
i
);

1613 
	`sh™n⁄_£q_¥ötf
(
s
, "\√cc_Áûuª_times %d.\n", 
	`sh™n⁄_©omic_ªad
(&
lun
->
ecc_Áûuª_times
));

1614 
j
 = 0; j <
sdev
->
ecc_c‹ª˘i⁄_powî
; j++)

1615 
	`sh™n⁄_£q_¥ötf
(
s
, "%dbôs_c‹ª˘ed_by_ecc %Œu.\n", 
j
, 
lun
->
ecc_°©i°ics
[j]);

1617 
	`sh™n⁄_£q_¥ötf
(
s
, "\«dv_ªad_Áûuª_times %d.\n", 
	`sh™n⁄_©omic_ªad
(&
lun
->
adv_ªad_Áûuª_times
));

1618 
j
 = 0; j <
sdev
->
ecc_c‹ª˘i⁄_powî
; j++)

1619 
	`sh™n⁄_£q_¥ötf
(
s
, "%dbôs_c‹ª˘ed_by_ecc %Œu.\n", 
j
, 
lun
->
adv_ªad_ecc_°©i°ics
[j]);

1620 
	`sh™n⁄_£q_¥ötf
(
s
, "-----------------------------------------------------------------\n");

1624 
	}
}

1626 
	$debugfs_lun_°©i°ics_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1628  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
lun_°©i°ics_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1629 
	}
}

1631 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_lun_°©i°ics_f›s
;

1634 
has_dma_dñay
;

1635 
	$°©i°ics_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1637 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1638 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdev
->
sdisk
.prefetch;

1639 
i
 = 0;

1641 
	`sh™n⁄_£q_¥ötf
(
s
, "======general configuration======\n");

1642 
	`sh™n⁄_£q_¥ötf
(
s
, "pm_qos_dißbÀ %d.\n", 
sh™n⁄_pm_qos_dißbÀ
);

1643 
	`sh™n⁄_£q_¥ötf
(
s
, "pm_qos_vÆue %d.\n", 
sh™n⁄_pm_qos_vÆue
);

1644 
	`sh™n⁄_£q_¥ötf
(
s
, "u£_iosched %d.\n", 
sh™n⁄_u£_iosched
);

1645 
	`sh™n⁄_£q_¥ötf
(
s
, "dcm_debug %08X\n", 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
SH_DCM_DEBUG_OFFSET
));

1646 
	`sh™n⁄_£q_¥ötf
(
s
, "\n======prefetch statistics=======\n");

1647 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_°©e %s.\n", (
	`gë_¥e„tch_íabÀ_°©e
(&
sdev
->
sdisk
.
¥e„tch
)) ? "enable" : "disable");

1648 i‡(
	`gë_¥e„tch_íabÀ_°©e
(&
sdev
->
sdisk
.
¥e„tch
)) {

1649 
	`sh™n⁄_£q_¥ötf
(
s
, "run_°©e %s.\n", (
	`gë_¥e„tch_w‹kög_°©e
(&
sdev
->
sdisk
.
¥e„tch
)) ? "working" : "sleeping");

1650 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_size %luK.\n", 
sdev
->
sdisk
.
¥e„tch
.
tŸÆ_size
 / 1024);

1651 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_löes %lu.\n", 
sdev
->
sdisk
.
¥e„tch
.
ˇche_löes
);

1652 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_löe_size %luK.\n", (
sdev
->
sdisk
.
¥e„tch
.
lba_≥r_löe
 * sdev->
logicb_size
) / 1024);

1653 
	`sh™n⁄_£q_¥ötf
(
s
, "¶Ÿ_≥r_löe %lu.\n", 
sdev
->
sdisk
.
¥e„tch
.
lba_≥r_löe
 / sdev->sdisk.¥e„tch.
ˇche_≥r_¶Ÿ
);

1654 
	`sh™n⁄_£q_¥ötf
(
s
, "¶Ÿ_size %luK.\n", (
sdev
->
sdisk
.
¥e„tch
.
ˇche_≥r_¶Ÿ
 * sdev->
logicb_size
) / 1024);

1655 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_¥e„tch %lu.\n", 
sdev
->
sdisk
.
¥e„tch
.
¥e„tch_cou¡
);

1656 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_hôs %lu(%u%).\n", 
sdev
->
sdisk
.
¥e„tch
.
ˇche_hôs
,

1657 
¥e„tch
->
ˇche_hôs
 * 100 / (¥e„tch->ˇche_hô†+Öª„tch->
ˇche_miss
 +Öª„tch->
waô_ˇche_ªad_hôs
 + 1));

1658 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇche_miss %lu(%u%).\n", 
sdev
->
sdisk
.
¥e„tch
.
ˇche_miss
,

1659 
¥e„tch
->
ˇche_miss
 * 100 / (¥e„tch->
ˇche_hôs
 +Öª„tch->ˇche_mis†+Öª„tch->
waô_ˇche_ªad_hôs
 + 1));

1660 
	`sh™n⁄_£q_¥ötf
(
s
, "waô_ˇche_ªad_hôs %lu(%u%).\n", 
sdev
->
sdisk
.
¥e„tch
.
waô_ˇche_ªad_hôs
,

1661 
¥e„tch
->
waô_ˇche_ªad_hôs
 * 100 / (¥e„tch->
ˇche_hôs
 +Öª„tch->
ˇche_miss
 +Örefetch->wait_cache_read_hits + 1));

1663 
	`sh™n⁄_£q_¥ötf
(
s
, "\n======permanent statistics======\n");

1664 
	`upd©e_îa£_cou¡
(
sdev
);

1665 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

1666 i‡(
sdev
->
•oﬁ
) {

1667 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

1668 
sh™n⁄_«me•a˚
 *
ns
 = 
sdev
->
•oﬁ
->ns[
i
];

1669 i‡(
ns
)

1670 
	`sh™n⁄_£q_¥ötf
(
s
, "n†%d vÆid_logicbs %lu.\n", 
i
, 
	`gë_sdisk_vÆid_logicbs
(&
ns
->
sdisk
));

1673 
	`sh™n⁄_£q_¥ötf
(
s
, "vÆid_logicbs %lu.\n", 
	`gë_sdisk_vÆid_logicbs
(&
sdev
->
sdisk
));

1675 
	`sh™n⁄_£q_¥ötf
(
s
, "úq_dñay %d.\n", 
sdev
->
úq_dñay
.irq_delay);

1676 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ac˚ss_blocked %d.\n", 
sdev
->
ho°_ac˚ss_blocked
);

1677 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_⁄_£c⁄ds %Œu.\n", 
sdev
->
powî_⁄_£c⁄ds
);

1678 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_cy˛e_cou¡ %d.\n", 
sdev
->
powî_cy˛e_cou¡
);

1679 
	`sh™n⁄_£q_¥ötf
(
s
, "max_îa£_cou¡ %d.\n", 
sdev
->
max_îa£_cou¡
);

1680 
	`sh™n⁄_£q_¥ötf
(
s
, "mö_îa£_cou¡ %d.\n", 
sdev
->
mö_îa£_cou¡
);

1681 
	`sh™n⁄_£q_¥ötf
(
s
, "avîage_îa£_cou¡ %d.\n", 
sdev
->
avîage_îa£_cou¡
);

1682 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_îa£_cou¡ %d.\n", 
sdev
->
tŸÆ_îa£_cou¡
);

1683 
	`sh™n⁄_£q_¥ötf
(
s
, "v¨ün˚_of_îa£_cou¡ %d/100.\n", 
sdev
->
v¨ün˚_of_îa£_cou¡
);

1684 
	`upd©e_io_°©i°ics
(
sdev
);

1685 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_wrôe_£˘‹s %Œu.\n", 
sdev
->
ho°_wrôe_£˘‹s
);

1686 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_wrôe_£˘‹s %Œu.\n", 
sdev
->
tŸÆ_wrôe_£˘‹s
);

1687 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_wrôe_i›s %Œu.\n", 
sdev
->
ho°_wrôe_i›s
);

1688 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_wrôe_b™dwidth %Œu KB/s.\n", 
sdev
->
ho°_wrôe_b™dwidth
);

1689 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_wrôe_œãncy %Œu us.\n", 
sdev
->
ho°_wrôe_œãncy
);

1690 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

1691 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ªad_£˘‹s %Œu.\n", 
sdev
->
ho°_ªad_£˘‹s
);

1692 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ªad_i›s %Œu.\n", 
sdev
->
ho°_ªad_i›s
);

1693 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ªad_b™dwidth %Œu KB/s.\n", 
sdev
->
ho°_ªad_b™dwidth
);

1694 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ªad_œãncy %Œu us.\n", 
sdev
->
ho°_ªad_œãncy
);

1695 
	`sh™n⁄_£q_¥ötf
(
s
, "¢≠_ªad_cou¡î %Œu.\n", 
	`sh™n⁄_©omic64_ªad
(&
sdev
->
¢≠_ªad_cou¡î
));

1696 
	`sh™n⁄_£q_¥ötf
(
s
, "≥riod_ªad_blk˙t %Œu.\n", 
sdev
->
≥riod_ªad
.
blk˙t
);

1697 
	`sh™n⁄_£q_¥ötf
(
s
, "≥riod_ªad_öãrvÆ %Œu ms.\n", 
	`sh™n⁄_jiffõs_to_m£cs
(
sdev
->
≥riod_ªad
.
_öãrvÆ
));

1698 
	`sh™n⁄_£q_¥ötf
(
s
, "°©ic_bad_blk˙t %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
°©ic_bad_blk˙t
));

1699 
	`sh™n⁄_£q_¥ötf
(
s
, "dy«mic_bad_blk˙t %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
dy«mic_bad_blk˙t
));

1700 
	`sh™n⁄_£q_¥ötf
(
s
, "\n======impermanent statistics======\n");

1701 
	`sh™n⁄_£q_¥ötf
(
s
, "m≠èbÀ_poﬁ_‰ì˙t %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
m≠_èbÀ_poﬁ
.
‰ì_˙t
));

1702 
	`sh™n⁄_£q_¥ötf
(
s
, "m≠èbÀ_poﬁ_u£d˙t %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
m≠_èbÀ_poﬁ
.
u£d_˙t
));

1703 
	`sh™n⁄_£q_¥ötf
(
s
, "m≠èbÀ_poﬁ_möt %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
m≠_èbÀ_poﬁ
.
mö_thªshﬁd
));

1704 
	`sh™n⁄_£q_¥ötf
(
s
, "m≠èbÀ_poﬁ_maxt %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
m≠_èbÀ_poﬁ
.
max_thªshﬁd
));

1705 
	`sh™n⁄_£q_¥ötf
(
s
, "ãm±abÀ_poﬁ_‰ì˙t %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
ãmp_èbÀ_poﬁ
.
‰ì_˙t
));

1706 
	`sh™n⁄_£q_¥ötf
(
s
, "ãm±abÀ_poﬁ_u£d˙t %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
ãmp_èbÀ_poﬁ
.
u£d_˙t
));

1707 
	`sh™n⁄_£q_¥ötf
(
s
, "ãm±abÀ_poﬁ_möt %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
ãmp_èbÀ_poﬁ
.
mö_thªshﬁd
));

1708 
	`sh™n⁄_£q_¥ötf
(
s
, "ãm±abÀ_poﬁ_maxt %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
ãmp_èbÀ_poﬁ
.
max_thªshﬁd
));

1709 
	`sh™n⁄_£q_¥ötf
(
s
, "buf_ªad_Áûed %Œu.\n", 
sdev
->
buf_ªad_Áûed
);

1710 
	`sh™n⁄_£q_¥ötf
(
s
, "buf„r_wrôe_cou¡î %Œu.\n", 
sdev
->
buf„r_wrôe_cou¡î
);

1711 
	`sh™n⁄_£q_¥ötf
(
s
, "dúe˘_wrôe_cou¡î %Œu.\n", 
sdev
->
dúe˘_wrôe_cou¡î
);

1712 
	`sh™n⁄_£q_¥ötf
(
s
, "fûl_›í_chunk_logicbs %Œu.\n", 
sdev
->
fûl_›í_chunk_logicbs
);

1713 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++)

1714 
	`sh™n⁄_£q_¥ötf
(
s
, "a˘ive_blk_›í_time[%d] %Œu s.\n", 
i
, 
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
(Ë- 
sdev
->
a˘ive_blk_°¨t_jiffõs
[i]) / 1000);

1715 
	`sh™n⁄_£q_¥ötf
(
s
, "gc_ª˛aimed_block† %d.\n", 
sdev
->
gc_sbs
);

1716 
	`sh™n⁄_£q_¥ötf
(
s
, "îr_ªcovîed_block† %d.\n", 
sdev
->
îr_ªcovîed_sbs
);

1717 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_îr_ªcovî_logicb† %Œu.\n", 
sdev
->
tŸÆ_îr_ªcovî_logicbs
);

1720 
	`sh™n⁄_£q_¥ötf
(
s
, "wl_ª˛aimed_block† %d.\n", 
sdev
->
wl_sbs
);

1721 
	`sh™n⁄_£q_¥ötf
(
s
, "d©a_ªã¡i⁄_block† %d.\n", 
sdev
->
d©a_ªã¡i⁄_sbs
);

1722 
	`sh™n⁄_£q_¥ötf
(
s
, "ªad_di°urb_block† %d.\n", 
sdev
->
ªad_di°urb_sbs
);

1723 
	`sh™n⁄_£q_¥ötf
(
s
, "îa£_bÆ™˚_block† %d.\n", 
sdev
->
îa£_bÆ™˚_sbs
);

1724 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_Áûuª_block† %d.\n", 
sdev
->
ecc_Áûuª_sbs
);

1725 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_wl_logicbs %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_wl_logicbs
));

1726 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_wl_logicb† %Œu.\n", 
sdev
->
tŸÆ_wl_logicbs
);

1727 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_wl_blk˙t %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_wl_blk˙t
));

1728 #ifde‡
CONFIG_SHANNON_STATISTICS


1729 
	`sh™n⁄_£q_¥ötf
(
s
, "ªque°s_‰om_gc %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
‰om_gc
));

1730 
	`sh™n⁄_£q_¥ötf
(
s
, "ªque°s_‰om_ho° %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
‰om_ho°
));

1732 
	`sh™n⁄_£q_¥ötf
(
s
, "wrôe_ªqs_ö_ªq_queue[0] %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[0]));

1733 
	`sh™n⁄_£q_¥ötf
(
s
, "wrôe_ªqs_ö_ªq_queue[1] %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[1]));

1734 
	`sh™n⁄_£q_¥ötf
(
s
, "wrôe_ªqs_ö_ªq_queue[2] %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[2]));

1735 
	`sh™n⁄_£q_¥ötf
(
s
, "gc_wrôe_ªqs %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
gc_wrôe_ªqs
));

1736 
	`sh™n⁄_£q_¥ötf
(
s
, "exåa_ªqs %ld.\n", 
sdev
->
exåa_ªqs
);

1737 
	`sh™n⁄_£q_¥ötf
(
s
, "gc_thªads %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
gc_thªads
));

1738 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


1739 
	`sh™n⁄_£q_¥ötf
(
s
, "ªad_bios %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ªad_bios
));

1740 
	`sh™n⁄_£q_¥ötf
(
s
, "wrôe_bios %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_bios
));

1742 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_block_°©e %d.\n", 
sdev
->
ö_block_°©e
);

1743 
	`sh™n⁄_£q_¥ötf
(
s
, "‰ì_blk˙t %d.\n", 
sdev
->
‰ì_blk˙t
);

1744 
	`sh™n⁄_£q_¥ötf
(
s
, "waô_c›y_blk˙à %d.\n", 
sdev
->
waô_c›y_blk˙t
);

1745 
	`sh™n⁄_£q_¥ötf
(
s
, "hŸ_blk˙t %d.\n", 
sdev
->
u£d_blk˙t
[
HOT_INDEX
]);

1746 
	`sh™n⁄_£q_¥ötf
(
s
, "cﬁd_blk˙t %d.\n", 
sdev
->
u£d_blk˙t
[
COLD_INDEX
]);

1747 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_Êight_wrôe_ªqs %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_Êight_wrôes
Ë+ sh™n⁄_©omic_ªad(&sdev->
gc_ö_Êight
));

1748 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_gc_logicbs %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
));

1749 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_cmd_queue_wrôe† %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_cmd_queue_wrôes
));

1750 
	`sh™n⁄_£q_¥ötf
(
s
, "ö_cmd_queue_adv_ªads %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_cmd_queue_adv_ªads
));

1751 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_gc_logicb† %Œu.\n", 
sdev
->
tŸÆ_gc_logicbs
);

1752 
	`sh™n⁄_£q_¥ötf
(
s
, "logicb_buf_cou¡ %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
logicb_buf_cou¡
));

1753 
	`sh™n⁄_£q_¥ötf
(
s
, "disk_ö_Êight %d.\n", 
	`sh™n⁄_bio_ö_Êight
(
sdev
));

1755 
	`sh™n⁄_£q_¥ötf
(
s
, "îr_blk˙t %d.\n", 
sdev
->
îr_blk˙t
);

1756 
	`sh™n⁄_£q_¥ötf
(
s
, "≥ndög_îr_blk† %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
≥ndög_îr_blks
));

1757 
	`sh™n⁄_£q_¥ötf
(
s
, "this_îr_sb %d.\n", 
sdev
->
this_îr_sb_ödex
);

1758 
	`sh™n⁄_£q_¥ötf
(
s
, "this_îr_°rùe %d.\n", 
sdev
->
this_îr_°rùe
);

1759 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_ªad_b™dwidth %ld.\n", 
sdev
->
tŸÆ_ªad_b™dwidth
);

1760 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_wrôe_b™dwidth %ld.\n", 
sdev
->
tŸÆ_wrôe_b™dwidth
);

1761 #ifde‡
SHANNON_USE_WRITE_BUFFER


1762 
	`sh™n⁄_£q_¥ötf
(
s
, "buf„r_wrôe_limô %d.\n", 
sdev
->
buf„r_wrôe_limô
);

1763 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_dïth(0) %d.\n", 
	`bufq_queue_dïth
(
sdev
, 0));

1764 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_dïth(1) %d.\n", 
	`bufq_queue_dïth
(
sdev
, 1));

1766 
	`sh™n⁄_£q_¥ötf
(
s
, "sh™n⁄_ªq_poﬁ cou¡ %d.\n", 
	`gë_mempoﬁ_cou¡
(
sh™n⁄_ªq_poﬁ
));

1767 
	`sh™n⁄_£q_¥ötf
(
s
, "sh™n⁄_bio_poﬁ cou¡ %d.\n", 
	`gë_mempoﬁ_cou¡
(
sh™n⁄_bio_poﬁ
));

1768 
	`sh™n⁄_£q_¥ötf
(
s
, "logicb_buf_poﬁ cou¡ %d.\n", 
	`gë_mempoﬁ_cou¡
(
sdev
->
logicb_buf_poﬁ
));

1769 i‡(
has_dma_dñay
) {

1770 
	`sh™n⁄_£q_¥ötf
(
s
, "°©us_ªåy %ld %ld.\n", 
sdev
->
°©us_pﬁl_cou¡
, sdev->
°©us_pﬁl_ªåy
);

1771 
	`sh™n⁄_£q_¥ötf
(
s
, "ªad_ªåy %ld %ld.\n", 
sdev
->
ªad_pﬁl_cou¡
, sdev->
ªad_pﬁl_ªåy
);

1772 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_ªåy %ld %ld.\n", 
sdev
->
bufq_pﬁl_cou¡
, sdev->
bufq_pﬁl_ªåy
);

1774 
	`sh™n⁄_£q_¥ötf
(
s
, "\n======ecc statistics======\n");

1775 i‡(!
	`sh™n⁄_dev_is_g5_ffß
(
sdev
))

1776 
	`ªad_£u_öfo
(
sdev
);

1777 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_c‹ª˘i⁄_powî %u.\n", 
sdev
->
ecc_c‹ª˘i⁄_powî
);

1778 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_codew‹d_size %u.\n", 
sdev
->
ecc_codew‹d_size
);

1779 
	`sh™n⁄_£q_¥ötf
(
s
, "£u_¸c_îr‹ %u.\n", 
sdev
->
£u_¸c_îr‹
);

1780 
	`sh™n⁄_£q_¥ötf
(
s
, "£u_¸c_îr‹_hi°‹y %u.\n", 
sdev
->
£u_¸c_îr‹_hi°‹y
);

1781 
	`sh™n⁄_£q_¥ötf
(
s
, "£u_ecc_îr‹ %u.\n", 
sdev
->
£u_ecc_îr‹
);

1782 
	`sh™n⁄_£q_¥ötf
(
s
, "£u_ecc_îr‹_hi°‹y %u.\n", 
sdev
->
£u_ecc_îr‹_hi°‹y
);

1783 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_ªc⁄fig_times %u.\n", 
sdev
->
tŸÆ_ªc⁄fig_times
);

1784 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_Áûuª_times %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ecc_Áûuª_times
));

1785 
	`sh™n⁄_£q_¥ötf
(
s
, "¢≠_ªad_mism©ch %Œu.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
¢≠_ªad_mism©ch
));

1786 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_fc_°©i°ics %d.\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ecc_fc_°©i°ics
));

1787 
i
 = 0; i <
sdev
->
ecc_c‹ª˘i⁄_powî
; i++)

1788 
	`sh™n⁄_£q_¥ötf
(
s
, "%dbôs_c‹ª˘ed_by_ecc %Œu.\n", 
i
, 
sdev
->
ecc_°©i°ics
[i]);

1791 
	}
}

1793 
	$debugfs_°©i°ics_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1795  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
°©i°ics_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1796 
	}
}

1798 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_°©i°ics_f›s
;

1800 
	$bﬂrd_∑ømëîs_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1802 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1803 
	`sh™n⁄_£q_¥ötf
(
s
, "max_ch™√l† %d\n", 
sdev
->
max_ch™√ls
);

1804 
	`sh™n⁄_£q_¥ötf
(
s
, "max_lun£t_ö_ch™√» %d\n", 
sdev
->
max_lun£t_ö_ch™√l
);

1805 
	`sh™n⁄_£q_¥ötf
(
s
, "max_lun_ö_lun£à %d\n", 
sdev
->
max_lun_ö_lun£t
);

1806 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1807 
	`sh™n⁄_£q_¥ötf
(
s
, "io_width %d\n", 
	`sh™n⁄_ªad_ªg
(&
sdev
->
globÆ_b¨
->
øid_öfo
, 
PER_BYTE_DISABLE
) == 0 ? 16 : 8);

1808 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1809 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_c‹ª˘i⁄_powî %d\n", 
sdev
->
ecc_c‹ª˘i⁄_powî
);

1810 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_codew‹ds_ö_logicb %d\n", 
sdev
->
ecc_codew‹ds_ö_logicb
);

1811 
	`sh™n⁄_£q_¥ötf
(
s
, "Êashid %016LX\n", 
sdev
->
Êashid
);

1812 
	`sh™n⁄_£q_¥ötf
(
s
, "subsy°em_devi˚_id %04X\n", 
sdev
->
pci_öfo
.
subsy°em_devi˚_id
);

1815 
	}
}

1817 
	$debugfs_bﬂrd_∑ømëîs_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1819  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
bﬂrd_∑ømëîs_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1820 
	}
}

1822 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_bﬂrd_∑ømëîs_f›s
;

1824 
	$ªad_cou¡_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1826 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1827 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

1828 
u32
 
max_ªad_cou¡
 = 0;

1829 
i
, 
lun
;

1831 
vi˘im
 = &
sdev
->
sbs
[0];

1832 
i
 = 0; i < 
sdev
->
sb_cou¡
; i++) {

1833 
sb
 = 
sdev
->
sbs
 + 
i
;

1834 
	`sh™n⁄_£q_¥ötf
(
s
, "sb=%d, max=%u.ÖîÜu¿cou¡:", 
sb
->
sb_ödex
, sb->
max_ªad_cou¡
);

1835 i‡(
sb
->
max_ªad_cou¡
 > max_read_count) {

1836 
max_ªad_cou¡
 = 
sb
->max_read_count;

1837 
vi˘im
 = 
sb
;

1839 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++)

1840 
	`sh™n⁄_£q_¥ötf
(
s
, " %d(%u).", 
lun
, 
sb
->
ªad_cou¡
[lun]);

1841 
	`sh™n⁄_£q_¥ötf
(
s
, "\n\n");

1843 
	`sh™n⁄_£q_¥ötf
(
s
, "max_read_count sb=%d, max_read_count=%u, state=%d.\n",

1844 
vi˘im
->
sb_ödex
, vi˘im->
max_ªad_cou¡
, vi˘im->
°©e
);

1846 
	}
}

1848 
	$debugfs_ªad_cou¡_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1850  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
ªad_cou¡_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1851 
	}
}

1853 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_ªad_cou¡_f›s
;

1855 
	$ecc_Áûuª_times_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1857 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1858 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

1859 
max_lun_ecc_Áûuª_times
 = 0;

1860 
i
, 
lun
;

1862 
vi˘im
 = &
sdev
->
sbs
[0];

1863 
i
 = 0; i < 
sdev
->
sb_cou¡
; i++) {

1864 
sb
 = 
sdev
->
sbs
 + 
i
;

1865 
	`sh™n⁄_£q_¥ötf
(
s
, "sb=%d, max=%d.ÖîÜu¿cou¡:", 
sb
->
sb_ödex
, sb->
max_lun_ecc_Áûuª_times
);

1866 i‡(
sb
->
max_lun_ecc_Áûuª_times
 > max_lun_ecc_failure_times) {

1867 
max_lun_ecc_Áûuª_times
 = 
sb
->max_lun_ecc_failure_times;

1868 
vi˘im
 = 
sb
;

1870 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++)

1871 
	`sh™n⁄_£q_¥ötf
(
s
, " %d(%u).", 
lun
, 
sb
->
ecc_Áûuª_times
[lun]);

1872 
	`sh™n⁄_£q_¥ötf
(
s
, "\n\n");

1874 
	`sh™n⁄_£q_¥ötf
(
s
, "max_lun_ecc_failure_times sb=%d, max_lun_ecc_failure_times=%d, state=%d.\n",

1875 
vi˘im
->
sb_ödex
, vi˘im->
max_lun_ecc_Áûuª_times
, vi˘im->
°©e
);

1877 
	}
}

1879 
	$debugfs_ecc_Áûuª_times_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1881  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
ecc_Áûuª_times_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1882 
	}
}

1884 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_ecc_Áûuª_times_f›s
;

1886 
	$bad_blocks_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1888 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1889 
sh™n⁄_lun
 *
lun
;

1890 
i
, 
j
;

1891 
bô
 = 0;

1893 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

1894 
lun
 = 
sdev
->lun[
i
];

1895 i‡(
	`is_°©ic_bad_lun
(
sdev
, 
i
)) {

1896 
	`sh™n⁄_£q_¥ötf
(
s
, "lun %d(bad=%d,ávail_data_sbs=%d,Çext_empty_page=%d) : static badÜun.\n",

1897 
i
, 
lun
->
bad
, 
	`sh™n⁄_©omic_ªad
(&lun->
avaû_d©a_sbs
), sh™n⁄_©omic_ªad(&lun->
√xt_em±y_∑ge
));

1899 
	`sh™n⁄_£q_¥ötf
(
s
, "lun %d(bad=%d,ávail_data_sbs=%d,Çext_empty_page=%d) :",

1900 
i
, 
lun
->
bad
, 
	`sh™n⁄_©omic_ªad
(&lun->
avaû_d©a_sbs
), sh™n⁄_©omic_ªad(&lun->
√xt_em±y_∑ge
));

1901 
j
 = 0;

1902 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1903 
	`sh™n⁄_f‹_óch_£t_bô_À
(
bô
, 
lun
->
bbt
, 
LUN_BBT_SIZE
 * 8)

1904 
	`sh™n⁄_£q_¥ötf
(
s
, " %d", 
bô
);

1905 } i‡(
	`bbt_usög_bôm≠
(
lun
->
bbt
, 
sdev
)) {

1906 
	`sh™n⁄_f‹_óch_£t_bô_À
(
bô
, (
u64
 *)
lun
->
bbt
 + 1, 
LUN_BBT_SIZE
 * 8 - 64)

1907 
	`sh™n⁄_£q_¥ötf
(
s
, " %d", 
bô
);

1909 
lun
->
bbt
[
j
] != 0xFFFF) {

1910 
	`sh™n⁄_£q_¥ötf
(
s
, " %d", 
lun
->
bbt
[
j
]);

1911 
j
++;

1914 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

1919 
	}
}

1921 
	$debugfs_bad_blocks_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1923  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
bad_blocks_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1924 
	}
}

1926 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_bad_blocks_f›s
;

1928 
	$rmw_li°_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1930 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1931 
lba_li°
 *
p
;

1932 
i
, 
j
;

1934 
i
 = 0; i < 2; i++) {

1935 
j
 = 0; j < 
RMW_LIST_COUNT
; j++) {

1936 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
sdisk
.
rmw_li°_lock
[
i
][
j
]);

1937 
	`sh™n⁄_£q_¥ötf
(
s
, "%s%2d:> ", 
i
?"wrôe":"ªad", 
j
);

1938 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdev
->
sdisk
.
rmw_li°
[
i
][
j
], 
li°
) {

1939 
	`sh™n⁄_£q_¥ötf
(
s
, " %d=%d.", 
p
->
lba
,Ö->
°©us
);

1941 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

1942 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
sdisk
.
rmw_li°_lock
[
i
][
j
]);

1944 
	`sh™n⁄_£q_¥ötf
(
s
, "----------------------------------\n");

1948 
	}
}

1950 
	$debugfs_rmw_li°_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1952  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
rmw_li°_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1953 
	}
}

1955 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_rmw_li°_f›s
;

1958 
	$waôqueue_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

1960 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

1961 
i
;

1963 
	`sh™n⁄_£q_¥ötf
(
s
, "limô_ªq_queue[0] \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
limô_ªq_queue
[0])?"ACTIVE":"EMPTY");

1964 
	`sh™n⁄_£q_¥ötf
(
s
, "limô_ªq_queue[1] \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
limô_ªq_queue
[1])?"ACTIVE":"EMPTY");

1965 
	`sh™n⁄_£q_¥ötf
(
s
, "∑rôy_öô_d⁄e_evít[0]\t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
∑rôy_öô_d⁄e_evít
[0])?"ACTIVE":"EMPTY");

1966 
	`sh™n⁄_£q_¥ötf
(
s
, "∑rôy_öô_d⁄e_evít[1]\t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
∑rôy_öô_d⁄e_evít
[1])?"ACTIVE":"EMPTY");

1967 
	`sh™n⁄_£q_¥ötf
(
s
, "block_ho°_wr \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
block_ho°_wr
)?"ACTIVE":"EMPTY");

1968 
	`sh™n⁄_£q_¥ötf
(
s
, "waô_‰ì_blk \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
waô_‰ì_blk
)?"ACTIVE":"EMPTY");

1969 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

1970 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_emu_waô[0] %s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
bufq_emu_waô
[0])?"ACTIVE":"EMPTY");

1971 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_emu_waô[1] %s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
bufq_emu_waô
[1])?"ACTIVE":"EMPTY");

1973 #ifde‡
SHANNON_USE_WRITE_BUFFER


1974 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_waô_cmd_pos[0] \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
bufq_waô_cmd_pos
[0])?"ACTIVE":"EMPTY");

1975 
	`sh™n⁄_£q_¥ötf
(
s
, "bufq_waô_cmd_pos[1] \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
bufq_waô_cmd_pos
[1])?"ACTIVE":"EMPTY");

1977 
	`sh™n⁄_£q_¥ötf
(
s
, "ªcovî_d⁄e_evít \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
ªcovî_d⁄e_evít
)?"ACTIVE":"EMPTY");

1978 
	`sh™n⁄_£q_¥ötf
(
s
, "big_lock_evít \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
big_lock_evít
)?"ACTIVE":"EMPTY");

1979 
	`sh™n⁄_£q_¥ötf
(
s
, "îa£_d⁄e_evít %s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
îa£_d⁄e_evít
)?"ACTIVE":"EMPTY");

1980 
	`sh™n⁄_£q_¥ötf
(
s
, "waô_pick_evít \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
waô_pick_evít
)?"ACTIVE":"EMPTY");

1981 
	`sh™n⁄_£q_¥ötf
(
s
, "îa£_dummy_d⁄e_evít \t%s.\n", 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
îa£_dummy_d⁄e_evít
)?"ACTIVE":"EMPTY");

1982 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

1983 
	`sh™n⁄_£q_¥ötf
(
s
, "waô_cmd_pos[%d] \t%s.\n", 
i
, 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
lun£ts
[i].
waô_cmd_pos
)?"ACTIVE":"EMPTY");

1984 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

1985 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

1986 
	`sh™n⁄_£q_¥ötf
(
s
, "emu_waô[%d] \t%s.\n", 
i
, 
	`sh™n⁄_waôqueue_a˘ive
(&
sdev
->
lun£ts
[i].
emu_waô
)?"ACTIVE":"EMPTY");

1990 
	}
}

1993 
	$debugfs_waôqueue_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

1995  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
waôqueue_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

1996 
	}
}

1998 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_waôqueue_f›s
;

2000 
	$lock_°©_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2002 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2003 
	`sh™n⁄_£q_¥ötf
(
s
, "pick_£m \t%s.\n", 
	`show_pick_£m_ö_debugfs
(
sdev
)?"locked":"unlocked");

2005 
	}
}

2007 
	$debugfs_lock_°©_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2009  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
lock_°©_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2010 
	}
}

2012 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_lock_°©_f›s
;

2014 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


2016 
	$Áke_wr_bad_lu≈∑_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2018 
lun
, 
µa
;

2019 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2021 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2022 
µa
 = 0;Ö∑ < 
sdev
->
sb_cou¡
 * sdev->
∂™es
 * sdev->
∑ges_ö_eblock
;Öpa++) {

2023 i‡(
	`is_Áke_wr_bad_lu≈∑
(
sdev
, 
lun
, 
µa
)) {

2024 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d block=%dÖage=%d\n",

2025 
lun
,

2026 
µa
 / 
sdev
->
∑ges_ö_eblock
,

2027 
µa
 % 
sdev
->
∑ges_ö_eblock
);

2033 
	}
}

2035 
	$debugfs_Áke_wr_bad_lu≈∑_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2037  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_wr_bad_lu≈∑_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2038 
	}
}

2043 
sh™n⁄_ssize_t
 
	$debugfs_Áke_wr_bad_lu≈∑_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2044 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2046 
lun
, 
blkoff
, 
∑geoff
;

2047 
löe
[16], *
p
, *
≤ext
;

2048 
sh™n⁄_dev
 *
sdev
;

2050 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2052 i‡(
cou¡
 > 16)

2053  -
EINVAL
;

2054 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2055  -
EFAULT
;

2058 
p
 = 
≤ext
 = 
löe
;

2059 
≤ext
 = 
	`°rchr
(
p
, ',');

2060 i‡(
NULL
 =
≤ext
) {

2061 
	`sh™n⁄_îr
("Valid input:Üun,blkoff,pageoff");

2062  -
EINVAL
;

2064 *
≤ext
 = '\0';

2065 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2067 
p
 = ++
≤ext
;

2068 
≤ext
 = 
	`°rchr
(
p
, ',');

2069 i‡(
NULL
 =
≤ext
) {

2070 
	`sh™n⁄_îr
("Valid input:Üun,blkoff,pageoff");

2071  -
EINVAL
;

2073 *
≤ext
 = '\0';

2074 
blkoff
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2076 
p
 = ++
≤ext
;

2077 
∑geoff
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2079 
	`sh™n⁄_öfo
("%s:lun=%d, blkoff=%d,Öageoff=%d\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
, 
blkoff
, 
∑geoff
);

2081 i‡(
lun
 >
sdev
->
lun_cou¡
 || 
blkoff
 >sdev->
sb_cou¡
 * sdev->
∂™es


2082 || 
∑geoff
 >
sdev
->
∑ges_ö_eblock
) {

2083 
	`sh™n⁄_îr
("Overrang NANDáddress!\n");

2084  -
EINVAL
;

2086 
	`m¨k_Áke_wr_bad_lu≈∑
(
sdev
, 
lun
, 
blkoff
 * sdev->
∑ges_ö_eblock
 + 
∑geoff
);

2088  
cou¡
;

2089 
	}
}

2091 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_wr_bad_lu≈∑_f›s
;

2094 
	$Áke_rd_bad_lu≈ba_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2096 
pba
, 
lun
;

2097 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2099 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2100 
pba
 = 0;Öb®< 
sdev
->
sb_cou¡
 * sdev->
logicbs_ö_siblög_eblock
;Öba++) {

2102 i‡(
	`is_Áke_rd_bad_lu≈ba
(
sdev
, 
lun
, 
pba
)) {

2103 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d block=%dÖage=%d sector=%d\n",

2104 
lun
,

2105 (
pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
,

2106 (
pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
,

2107 
pba
 % 
sdev
->
logicbs_ö_∑ge
);

2110 
	`sh™n⁄_scheduÀ
();

2114 
	}
}

2116 
	$debugfs_Áke_rd_bad_lu≈ba_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2118  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_rd_bad_lu≈ba_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2119 
	}
}

2126 
	$¥_Áke_rd_bad_lu≈ba_ußge
()

2128 
	`sh™n⁄_öfo
("User input format:Écho \"[@]lun,blkoff,pageoff,sectoroff\" > fake_rd_bad_lunpba\n"

2131 
	}
}

2133 
sh™n⁄_ssize_t
 
	$debugfs_Áke_rd_bad_lu≈ba_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2134 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2136 
pba
, 
mode
;

2137 
lun
, 
blkoff
, 
∑geoff
, 
£˘‹off
;

2138 
löe
[32], *
p
, *
≤ext
;

2139 
sh™n⁄_dev
 *
sdev
;

2141 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2143 i‡(
cou¡
 > 32)

2144  -
EINVAL
;

2145 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2146  -
EFAULT
;

2148 i‡('@' =
löe
[0]) {

2149 
mode
 = 1;

2150 
p
 = 
≤ext
 = &
löe
[1];

2152 
mode
 = 0;

2153 
p
 = 
≤ext
 = &
löe
[0];

2155 
≤ext
 = 
	`°rchr
(
p
, ',');

2156 i‡(
NULL
 =
≤ext
) {

2157 
	`¥_Áke_rd_bad_lu≈ba_ußge
();

2158  -
EINVAL
;

2160 *
≤ext
 = '\0';

2161 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2163 
p
 = ++
≤ext
;

2164 
≤ext
 = 
	`°rchr
(
p
, ',');

2165 i‡(
NULL
 =
≤ext
) {

2166 
	`¥_Áke_rd_bad_lu≈ba_ußge
();

2167  -
EINVAL
;

2169 *
≤ext
 = '\0';

2170 
blkoff
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2172 
p
 = ++
≤ext
;

2173 
≤ext
 = 
	`°rchr
(
p
, ',');

2174 i‡(
NULL
 =
≤ext
) {

2175 
	`¥_Áke_rd_bad_lu≈ba_ußge
();

2176  -
EINVAL
;

2178 *
≤ext
 = '\0';

2179 
∑geoff
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2181 
p
 = ++
≤ext
;

2182 
£˘‹off
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2184 
	`sh™n⁄_öfo
("%s:lun=%d, blkoff=%d,Öageoff=%d, se˘‹off=%d\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
, 
blkoff
, 
∑geoff
, 
£˘‹off
);

2186 i‡(
lun
 >
sdev
->
lun_cou¡
 || 
blkoff
 >sdev->
sb_cou¡
 * sdev->
∂™es


2187 || 
∑geoff
 >
sdev
->
∑ges_ö_eblock
 || 
£˘‹off
 >sdev->
logicbs_ö_∑ge
) {

2188 
	`sh™n⁄_îr
("Overrang NANDáddress!\n");

2189  -
EINVAL
;

2192 
pba
 = 
blkoff
 * (
sdev
->
logicbs_ö_siblög_eblock
 / sdev->
∂™es
)

2193 + 
∑geoff
 * 
sdev
->
logicbs_ö_∑ge


2194 + 
£˘‹off
;

2195 i‡(
mode
)

2196 
	`m¨k_Áke_rd_bad_lu≈ba
(
sdev
, 
lun
, 
pba
);

2198 
	`m¨k_Áke_rd_bad_lu≈ba_øidmuãx
(
sdev
, 
lun
, 
pba
);

2200  
cou¡
;

2201 
	}
}

2203 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_rd_bad_lu≈ba_f›s
;

2206 
	$Áke_î_bad_block_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2208 
lun
, 
blk
;

2209 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2211 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2212 
blk
 = 0; blk < 
sdev
->
eblocks_ö_lun
; blk++) {

2213 i‡(
	`is_Áke_î_bad_block
(
sdev
, 
lun
, 
blk
))

2214 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d block=%d\n", 
lun
, 
blk
);

2219 
	}
}

2221 
	$debugfs_Áke_î_bad_block_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2223  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_î_bad_block_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2224 
	}
}

2229 
sh™n⁄_ssize_t
 
	$debugfs_Áke_î_bad_block_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2230 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2232 
lun
, 
blk
;

2233 
löe
[16], *
p
, *
≤ext
;

2234 
sh™n⁄_dev
 *
sdev
;

2236 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2238 i‡(
cou¡
 > 16)

2239  -
EINVAL
;

2240 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2241  -
EFAULT
;

2243 
p
 = 
löe
;

2244 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, &
≤ext
, 10);

2245 i‡(',' !*
≤ext
) {

2246 
	`sh™n⁄_îr
("Valid input:Üun,blk\n");

2247  -
EINVAL
;

2250 
p
 = 
≤ext
 + 1;

2251 
blk
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
p
, 
NULL
, 10);

2253 
	`debugs1
("lun=%d, blk=%d\n", 
lun
, 
blk
);

2255 i‡(
lun
 >
sdev
->
lun_cou¡
 || 
blk
 >sdev->
eblocks_ö_lun
) {

2256 
	`sh™n⁄_îr
("Overrang NANDáddress!\n");

2257  -
EINVAL
;

2259 
	`m¨k_Áke_î_bad_block
(
sdev
, 
lun
, 
blk
);

2261  
cou¡
;

2262 
	}
}

2264 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_î_bad_block_f›s
;

2267 
	$Áke_bad_lun_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2269 
lun
;

2270 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2272 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2273 i‡(
	`is_Áke_bad_lun
(
sdev
, 
lun
))

2274 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d%s\n", ()
lun
, 
sdev
->
Áke_bad_lun_skùmbr
 ? "x" : "");

2278 
	}
}

2280 
	$debugfs_Áke_bad_lun_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2282  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_bad_lun_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2283 
	}
}

2288 
sh™n⁄_ssize_t
 
	$debugfs_Áke_bad_lun_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2289 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2291 
lun
;

2292 
löe
[16], *
íd±r
;

2293 
sh™n⁄_dev
 *
sdev
;

2295 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2297 i‡(
cou¡
 > 16)

2298  -
EINVAL
;

2299 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2300  -
EFAULT
;

2302 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
löe
, &
íd±r
, 10);

2303 
	`debugs1
("lun=%d\n", 
lun
);

2305 
sdev
->
Áke_bad_lun_skùmbr
 = ('x' =*
íd±r
 || 'X' == *endptr);

2307 i‡(
lun
 >
sdev
->
lun_cou¡
) {

2308 
	`sh™n⁄_îr
("OverrangÜunámount!\n");

2309  -
EINVAL
;

2311 
	`m¨k_Áke_bad_lun
(
sdev
, 
lun
);

2313  
cou¡
;

2314 
	}
}

2316 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_bad_lun_f›s
;

2319 
	$Áke_cmd_timeout_lun_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2321 
lun
;

2322 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2324 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2325 i‡(
	`is_Áke_cmd_timeout_lun
(
sdev
, 
lun
))

2326 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d%s\n", ()
lun
, 
sdev
->
Áke_cmd_timeout_lun_skùmbr
 ? "x" : "");

2330 
	}
}

2332 
	$debugfs_Áke_cmd_timeout_lun_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2334  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_cmd_timeout_lun_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2335 
	}
}

2340 
sh™n⁄_ssize_t
 
	$debugfs_Áke_cmd_timeout_lun_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2341 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2343 
lun
;

2344 
löe
[16], *
íd±r
;

2345 
sh™n⁄_dev
 *
sdev
;

2347 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2349 i‡(
cou¡
 > 16)

2350  -
EINVAL
;

2351 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2352  -
EFAULT
;

2354 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
löe
, &
íd±r
, 10);

2355 
	`debugs1
("lun=%d\n", 
lun
);

2357 
sdev
->
Áke_cmd_timeout_lun_skùmbr
 = ('x' =*
íd±r
 || 'X' == *endptr);

2359 i‡(
lun
 > 
sdev
->
lun_cou¡
) {

2360 
	`sh™n⁄_îr
("OverrangÜunámount!\n");

2361  -
EINVAL
;

2363 
	`m¨k_Áke_cmd_timeout_lun
(
sdev
, 
lun
);

2365  
cou¡
;

2366 
	}
}

2368 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_cmd_timeout_lun_f›s
;

2371 
	$Áke_rd_bad_lun_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2373 
lun
;

2374 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2376 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

2377 i‡(
	`is_Áke_rd_bad_lun
(
sdev
, 
lun
))

2378 
	`sh™n⁄_£q_¥ötf
(
s
, "lun=%d%s\n", ()
lun
, 
sdev
->
Áke_bad_lun_skùmbr
 ? "x" : "");

2382 
	}
}

2384 
	$debugfs_Áke_rd_bad_lun_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2386  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
Áke_rd_bad_lun_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2387 
	}
}

2392 
sh™n⁄_ssize_t
 
	$debugfs_Áke_rd_bad_lun_wrôe
(
sh™n⁄_fûe_t
 *
fûe
, c⁄° 
__u£r
 *
buf„r
,

2393 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2395 
lun
;

2396 
löe
[16], *
íd±r
;

2397 
sh™n⁄_dev
 *
sdev
;

2399 
sdev
 = (
sh™n⁄_dev
 *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2401 i‡(
cou¡
 > 16)

2402  -
EINVAL
;

2403 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2404  -
EFAULT
;

2406 
lun
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
löe
, &
íd±r
, 10);

2408 
sdev
->
Áke_bad_lun_skùmbr
 = ('x' =*
íd±r
 || 'X' == *endptr);

2409 
	`sh™n⁄_log
("%s:setÜun=%dÅo fakeÑead badÜun, skipmbr=%d.\n",

2410 
sdev
->
sdisk
.
disk_«me
, 
lun
, sdev->
Áke_bad_lun_skùmbr
);

2412 i‡(
lun
 >
sdev
->
lun_cou¡
) {

2413 
	`sh™n⁄_îr
("OverrangÜunámount!\n");

2414  -
EINVAL
;

2416 
	`m¨k_Áke_rd_bad_lun
(
sdev
, 
lun
);

2418  
cou¡
;

2419 
	}
}

2421 
sh™n⁄_fûe_›î©i⁄s_t
 
	gÁke_rd_bad_lun_f›s
;

2423 
sh™n⁄_size_t
 
	$debugfs_m™uÆ_ªad_îr_wrôe
(
sh™n⁄_fûe_t
 *
fûe
,

2424 c⁄° 
__u£r
 *
buf„r
, 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2426 
vÆue
;

2427 
löe
[16], *
íd±r
;

2428 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2430 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2431  -
EFAULT
;

2433 
vÆue
 = 
	`sim∂e_°πoul
(
löe
, &
íd±r
, 0x10);

2434 
	`sh™n⁄_öfo
("vÆue=%ld,Énd±r=%c.\n", 
vÆue
, *
íd±r
);

2435 
sdev
->
m™uÆ_ªad_îr
 = 
vÆue
;

2437  
cou¡
;

2438 
	}
}

2440 
	$m™uÆ_ªad_îr_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2442 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2443 
	`sh™n⁄_£q_¥ötf
(
s
, "%d\n", 
sdev
->
m™uÆ_ªad_îr
);

2445 
	}
}

2447 
	$debugfs_m™uÆ_ªad_îr_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2449  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
m™uÆ_ªad_îr_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2450 
	}
}

2452 
sh™n⁄_fûe_›î©i⁄s_t
 
	gm™uÆ_ªad_îr_f›s
;

2454 
sh™n⁄_size_t
 
	$debugfs_m™uÆ_wrôe_îr_wrôe
(
sh™n⁄_fûe_t
 *
fûe
,

2455 c⁄° 
__u£r
 *
buf„r
, 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2457 
vÆue
;

2458 
löe
[16], *
íd±r
;

2459 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2461 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2462  -
EFAULT
;

2464 
vÆue
 = 
	`sim∂e_°πoul
(
löe
, &
íd±r
, 0x10);

2465 
	`sh™n⁄_öfo
("vÆue=%ld,Énd±r=%c.\n", 
vÆue
, *
íd±r
);

2466 
sdev
->
m™uÆ_wrôe_îr
 = 
vÆue
;

2468  
cou¡
;

2469 
	}
}

2471 
	$m™uÆ_wrôe_îr_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2473 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2474 
	`sh™n⁄_£q_¥ötf
(
s
, "%d\n", 
sdev
->
m™uÆ_wrôe_îr
);

2476 
	}
}

2478 
	$debugfs_m™uÆ_wrôe_îr_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2480  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
m™uÆ_wrôe_îr_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2481 
	}
}

2483 
sh™n⁄_fûe_›î©i⁄s_t
 
	gm™uÆ_wrôe_îr_f›s
;

2487 
sh™n⁄_size_t
 
	$debugfs_twö_ªad_îr_wrôe
(
sh™n⁄_fûe_t
 *
fûe
,

2488 c⁄° 
__u£r
 *
buf„r
, 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2490 
vÆue
;

2491 
löe
[16], *
íd±r
;

2492 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2494 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2495  -
EFAULT
;

2497 
vÆue
 = 
	`sim∂e_°πoul
(
löe
, &
íd±r
, 0x10);

2498 
sdev
->
twö_ªad_îr
 = !!
vÆue
;

2500  
cou¡
;

2501 
	}
}

2503 
	$twö_ªad_îr_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2505 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2506 
	`sh™n⁄_£q_¥ötf
(
s
, "%d\n", 
sdev
->
twö_ªad_îr
);

2508 
	}
}

2510 
	$debugfs_twö_ªad_îr_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2512  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
twö_ªad_îr_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2513 
	}
}

2515 
sh™n⁄_fûe_›î©i⁄s_t
 
	gtwö_ªad_îr_f›s
;

2518 #ifde‡
CONFIG_SHANNON_PLVERIFY


2519 
sh™n⁄_size_t
 
	$debugfs_∂˘æ_wrôe
(
sh™n⁄_fûe_t
 *
fûe
,

2520 c⁄° 
__u£r
 *
buf„r
, 
sh™n⁄_size_t
 
cou¡
, 
sh™n⁄_loff_t
 *
pos
)

2522 
vÆue
;

2523 
löe
[16], *
íd±r
;

2524 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
));

2526 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
löe
, 
buf„r
, 
cou¡
))

2527  -
EFAULT
;

2529 
vÆue
 = 
	`sim∂e_°πoul
(
löe
, &
íd±r
, 0x10);

2531 i‡('m' =*
íd±r
 || 'M' == *endptr)

2532 
sdev
->
∂˘æ
 |
vÆue
;

2534 
sdev
->
∂˘æ
 = 
vÆue
;

2536  
cou¡
;

2537 
	}
}

2539 
	$∂˘æ_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2541 
i
;

2542 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2544 
	`sh™n⁄_£q_¥ötf
(
s
, "bô 0: f‹˚-hód [%s]\n", (
sdev
->
∂˘æ
 & 0x01) ? "ENABLE" : "DISABLE");

2545 
	`sh™n⁄_£q_¥ötf
(
s
, "bô 1:Örohibô-îa£ [%s]\n", (
sdev
->
∂˘æ
 & 0x02) ? "ENABLE" : "DISABLE");

2547 
	`sh™n⁄_£q_¥ötf
(
s
, "booting_wait_erased:");

2548 
i
 = 0; i < 
	`ARRAY_SIZE
(
sdev
->
boŸög_waô_îa£d
); i++) {

2549 i‡(0xFFFFFFFF =
sdev
->
boŸög_waô_îa£d
[
i
]) {

2550 
	`sh™n⁄_£q_¥ötf
(
s
, " END\n");

2553 
	`sh™n⁄_£q_¥ötf
(
s
, " %d", 
sdev
->
boŸög_waô_îa£d
[
i
]);

2557 
	}
}

2559 
	$debugfs_∂˘æ_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2561  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
∂˘æ_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2562 
	}
}

2564 
sh™n⁄_fûe_›î©i⁄s_t
 
	g∂˘æ_f›s
;

2568 
	$badlun_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2570 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
v
;

2571 
i
;

2573 
	`sh™n⁄_£q_¥ötf
(
s
, "bad_lun[%04d]:", 
sb
->
sb_ödex
);

2574 
i
 = 0; i < 
	`ARRAY_SIZE
(
sb
->
bad_lun
); i++)

2575 
	`sh™n⁄_£q_¥ötf
(
s
, " %016lX", 
sb
->
bad_lun
[
i
]);

2576 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

2579 
	}
}

2581 
sh™n⁄_£q_›î©i⁄s_t
 
	gbadlun_£q_›s
;

2583 
	$debugfs_badlun_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2585 
ªt
;

2586 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(&
badlun_£q_›s
, 
£q_Æl_blocks_°¨t
);

2587 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(&
badlun_£q_›s
, 
£q_Æl_blocks_√xt
);

2588 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(&
badlun_£q_›s
, 
£q_Æl_blocks_°›
);

2589 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(&
badlun_£q_›s
, 
badlun_£q_show
);

2590 
ªt
 = 
	`sh™n⁄_£q_›í
(
fûe
, &
badlun_£q_›s
);

2591 i‡(0 =
ªt
)

2592 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûe
), 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2593  
ªt
;

2594 
	}
}

2596 
sh™n⁄_fûe_›î©i⁄s_t
 
	gbadlun_f›s
;

2598 
	$vﬁège_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2600 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2601 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

2602 
	`sh™n⁄_£q_¥ötf
(
s
, "c⁄åﬁÀ∏ãm≥øtuª%d degC, max%d degC.\n", 
sdev
->
ãm≥øtuª_öt
, sdev->
ãm≥øtuª_öt_max
);

2603 
	`sh™n⁄_£q_¥ötf
(
s
, "mŸhîbﬂrdÅem≥øtuª%d degC, max%d degC.\n", 
sdev
->
ãm≥øtuª_bﬂrd
, sdev->
ãm≥øtuª_bﬂrd_max
);

2604 
	`sh™n⁄_£q_¥ötf
(
s
, "ÊashÅem≥øtuª%d degC, max%d degC.\n", 
sdev
->
ãm≥øtuª_Êash
, sdev->
ãm≥øtuª_Êash_max
);

2605 
	`sh™n⁄_£q_¥ötf
(
s
, "öã∫ñ vﬁège%d mV, max%d mV.\n", 
sdev
->
vﬁège_öt
, sdev->
vﬁège_öt_max
);

2606 
	`sh™n⁄_£q_¥ötf
(
s
, "auxûüry vﬁège%d mV, max%d mV.\n", 
sdev
->
vﬁège_aux
, sdev->
vﬁège_aux_max
);

2607 
	`sh™n⁄_£q_¥ötf
(
s
, "exã∫ÆÅem≥øtuª1%d degC.\n", 
sdev
->
ãm≥øtuª_aux1
);

2608 
	`sh™n⁄_£q_¥ötf
(
s
, "exã∫ÆÅem≥øtuª2%d degC.\n", 
sdev
->
ãm≥øtuª_aux2
);

2610 
	}
}

2612 
	$debugfs_vﬁège_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2614  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
vﬁège_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2615 
	}
}

2617 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_vﬁège_f›s
;

2619 *
	$n‹_block_°©e
(
°©e
)

2621 
°©e
) {

2622 
NOR_BLOCK_FULL
:

2624 
NOR_BLOCK_FREE
:

2626 
NOR_BLOCK_USED
:

2628 
NOR_BLOCK_ACTIVE
:

2630 
NOR_BLOCK_WAIT_ERASE
:

2632 
NOR_BLOCK_ERASE_ERR
:

2634 
NOR_BLOCK_WRITE_ERR
:

2641 
	}
}

2643 
	$bbt_°©e_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2645 
i
;

2646 
blk_num
, 
∑ge_num
;

2647 
n‹_block
 *
nblock
;

2648 
n‹_∑ge
 *
≈age
;

2649 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2651 
blk_num
 = 
sdev
->
n‹Êash
.
bbt_size
 / (sdev->n‹Êash.
size_öbyãs
/sdev->n‹Êash.
blk_cou¡
);

2652 
∑ge_num
 = 
sdev
->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
;

2654 
	`sh™n⁄_£q_¥ötf
(
s
, "nor_block, valid_pages, state\n");

2655 
i
 = 0; i < 
blk_num
; i++) {

2656 
nblock
 = &
sdev
->
n‹_blocks
[
i
];

2657 
	`sh™n⁄_£q_¥ötf
(
s
, "%3d, %3d, %s\n", 
nblock
->
ödex
, \

2658 
nblock
->
vÆid_∑ges
, 
	`n‹_block_°©e
“block->
°©e
));

2661 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

2662 
	`sh™n⁄_£q_¥ötf
(
s
, "nor_page, index,Çor_block, seq_num\n");

2663 
i
 = 0; i < 
∑ge_num
; i++) {

2664 
≈age
 = 
sdev
->
n‹_∑ge_¨øy
[
i
];

2665 i‡(
≈age
->
ödex
 !
INVALID_NOR_PAGE_INDEX
)

2666 
	`sh™n⁄_£q_¥ötf
(
s
, "%3d, %3d, %3d, %u\n", 
i
, \

2667 
≈age
->
ödex
,Ç∑ge->
n‹_block
,Ç∑ge->
d©a
->
£q_num
);

2670 
	`sh™n⁄_£q_¥ötf
(
s
, "\n");

2671 
	`sh™n⁄_£q_¥ötf
(
s
, "curr_page=%d,Çext_slot=%d,Öos_block=%d,Öos_page=%d, state=%u.\n", \

2672 
sdev
->
cuº_∑ge
, sdev->
√xt_¶Ÿ
, sdev->
pos_block
, sdev->
pos_∑ge
, sdev->
n‹_bbt_°©e
);

2675 
	}
}

2677 
	$debugfs_bbt_°©e_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2679  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
bbt_°©e_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2680 
	}
}

2682 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_bbt_°©e_f›s
;

2685 
	$mbr_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2687 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2688 
„©uª_cfg
 *
cfg
 = 
sdev
->
„©uª_cfg_li°
;

2689 
i
, 
¥io
;

2691 
	`sh™n⁄_£q_¥ötf
(
s
, "id=%s\n", 
sdev
->
mbr
.
id
);

2692 
	`sh™n⁄_£q_¥ötf
(
s
, "mbr_vîsi⁄=0x%04X\n", ()
sdev
->
mbr
.
mbr_f‹m©_vîsi⁄
);

2693 
	`sh™n⁄_£q_¥ötf
(
s
, "h¨dw¨e_vîsi⁄=0x%08X\n", ()
sdev
->
mbr
.
h¨dw¨e_vîsi⁄
);

2694 
	`sh™n⁄_£q_¥ötf
(
s
, "so·w¨e_vîsi⁄=%d\n", ()
sdev
->
mbr
.
so·w¨e_vîsi⁄
);

2695 
	`sh™n⁄_£q_¥ötf
(
s
, "«nd_m™uÁ˘uª=0x%04X\n", ()
sdev
->
mbr
.
«nd_m™uÁ˘uª
);

2696 
	`sh™n⁄_£q_¥ötf
(
s
, "«nd_id=0x%04X\n", ()
sdev
->
mbr
.
«nd_id
);

2697 
	`sh™n⁄_£q_¥ötf
(
s
, "ˇ∑côy=%Œu\n", 
sdev
->
mbr
.
ˇ∑côy
);

2699 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_amou¡=%d\n", 
sdev
->
mbr
.
lun_amou¡
);

2700 
	`sh™n⁄_£q_¥ötf
(
s
, "eblocks_ö_lun=%d\n", 
sdev
->
mbr
.
eblocks_ö_lun
);

2701 
	`sh™n⁄_£q_¥ötf
(
s
, "∑ges_ö_eblock=%d\n", 
sdev
->
mbr
.
∑ges_ö_eblock
);

2702 
	`sh™n⁄_£q_¥ötf
(
s
, "«nd_∑ge_shi·=%d\n", 
sdev
->
mbr
.
«nd_∑ge_shi·
);

2703 
	`sh™n⁄_£q_¥ötf
(
s
, "oob_size=%d\n", 
sdev
->
mbr
.
oob_size
);

2704 
	`sh™n⁄_£q_¥ötf
(
s
, "logicb_shi·=%d\n", 
sdev
->
mbr
.
logicb_shi·
);

2705 
	`sh™n⁄_£q_¥ötf
(
s
, "u£r_logicb_shi·=%d\n", 
sdev
->
mbr
.
u£r_logicb_shi·
);

2706 
	`sh™n⁄_£q_¥ötf
(
s
, "∂™e_‹dî=%d\n", 
sdev
->
mbr
.
∂™e_‹dî
);

2707 
	`sh™n⁄_£q_¥ötf
(
s
, "∂™e_cou¡=%d\n", 
sdev
->
mbr
.
∂™e_cou¡
);

2708 
	`sh™n⁄_£q_¥ötf
(
s
, "p£udo_∂™e=%d\n", 
sdev
->
mbr
.
p£udo_∂™e
);

2709 
	`sh™n⁄_£q_¥ötf
(
s
, "c⁄fig_ch™√ls=%d\n", 
sdev
->
mbr
.
cfg_ch™√ls
);

2710 
	`sh™n⁄_£q_¥ötf
(
s
, "c⁄fig_lun£t_ö_ch™√l=%d\n", 
sdev
->
mbr
.
cfg_lun£t_ö_ch™√l
);

2711 
	`sh™n⁄_£q_¥ötf
(
s
, "c⁄fig_lun_ö_lun£t=%d\n", 
sdev
->
mbr
.
cfg_lun_ö_lun£t
);

2713 
	`sh™n⁄_£q_¥ötf
(
s
, "öô_hŸ_sblk=%d\n", 
sdev
->
mbr
.
öô_hŸ_sblk
);

2714 
	`sh™n⁄_£q_¥ötf
(
s
, "öô_cﬁd_sblk=%d\n", 
sdev
->
mbr
.
öô_cﬁd_sblk
);

2716 
	`sh™n⁄_£q_¥ötf
(
s
, "öãºu±_dñay=%d\n", 
sdev
->
mbr
.
öãºu±_dñay
);

2717 
	`sh™n⁄_£q_¥ötf
(
s
, "ovî¥ovisi⁄_øã=%d.%d\n", 
sdev
->
ovî¥ovisi⁄_øã
 / 100, sdev->overprovision_rate % 100);

2718 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_codew‹ds_ö_logicb=%d\n", 
sdev
->
mbr
.
ecc_codew‹ds_ö_logicb
);

2719 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_c‹ª˘i⁄_powî=%d\n", 
sdev
->
mbr
.
ecc_c‹ª˘i⁄_powî
);

2721 
	`sh™n⁄_£q_¥ötf
(
s
, "hi°‹y_îa£_cou¡=%d\n", 
sdev
->
mbr
.
hi°‹y_îa£_cou¡
);

2722 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_cy˛e_cou¡=%Œd\n", 
sdev
->
mbr
.
powî_cy˛e_cou¡
);

2723 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_⁄_£c⁄ds=%Œd\n", 
sdev
->
mbr
.
powî_⁄_£c⁄ds
);

2724 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_wrôe_£˘‹s=%Œd\n", 
sdev
->
mbr
.
ho°_wrôe_£˘‹s
);

2725 
	`sh™n⁄_£q_¥ötf
(
s
, "tŸÆ_wrôe_£˘‹s=%Œd\n", 
sdev
->
mbr
.
tŸÆ_wrôe_£˘‹s
);

2726 
	`sh™n⁄_£q_¥ötf
(
s
, "ho°_ªad_£˘‹s=%Œd\n", 
sdev
->
mbr
.
ho°_ªad_£˘‹s
);

2727 
	`sh™n⁄_£q_¥ötf
(
s
, "Êash_drvmode=%d\n", 
sdev
->
mbr
.
Êash_drvmode
);

2728 
	`sh™n⁄_£q_¥ötf
(
s
, "luns_≥r_˚_mask=0x%02X\n", 
sdev
->
mbr
.
luns_≥r_˚_mask
);

2729 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_m≠_mode=%d\n", 
sdev
->
mbr
.
lun_m≠_mode
);

2730 
	`sh™n⁄_£q_¥ötf
(
s
, "øid_°rùes=%d\n", 
sdev
->
mbr
.
øid_°rùes
);

2731 
	`sh™n⁄_£q_¥ötf
(
s
, "„©uª_Êags=0x%Œx\n", 
sdev
->
mbr
.
„©uª_Êags
);

2732 
	`sh™n⁄_£q_¥ötf
(
s
, "powî_budgë=%d\n", 
sdev
->
mbr
.
powî_budgë
);

2733 
	`sh™n⁄_£q_¥ötf
(
s
, "dma_max_ªad_limô=%d\n", 
sdev
->
mbr
.
dma_max_ªad_limô
);

2734 
	`sh™n⁄_£q_¥ötf
(
s
, "˛k=%d\n", 
sdev
->
mbr
.
˛k
);

2735 
	`sh™n⁄_£q_¥ötf
(
s
, "max_out°™dög_bios=%d\n", 
sdev
->
mbr
.
max_out°™dög_bios
);

2736 
	`sh™n⁄_£q_¥ötf
(
s
, "mbr_upd©e=%d.\n", 
sdev
->
mbr
.
mbr_upd©e
);

2737 
	`sh™n⁄_£q_¥ötf
(
s
, "ãmp_thªshﬁd1=%d.\n", 
sdev
->
mbr
.
ãmp_thªshﬁd1
);

2738 
	`sh™n⁄_£q_¥ötf
(
s
, "ãmp_¸ôiˇl_thªshﬁd1=%d.\n", 
sdev
->
mbr
.
ãmp_¸ôiˇl_thªshﬁd1
);

2739 
	`sh™n⁄_£q_¥ötf
(
s
, "ãmp_thªshﬁd2=%d.\n", 
sdev
->
mbr
.
ãmp_thªshﬁd2
);

2740 
	`sh™n⁄_£q_¥ötf
(
s
, "ãmp_¸ôiˇl_thªshﬁd2=%d.\n", 
sdev
->
mbr
.
ãmp_¸ôiˇl_thªshﬁd2
);

2741 
	`sh™n⁄_£q_¥ötf
(
s
, "poﬁ_w©îm¨k=%d.\n", 
sdev
->
mbr
.
poﬁ_w©îm¨k
);

2742 
	`sh™n⁄_£q_¥ötf
(
s
, "sdev_id=%d.\n", 
sdev
->
mbr
.
sdev_id
);

2743 
	`sh™n⁄_£q_¥ötf
(
s
, "sdev_cou¡=%d.\n", 
sdev
->
mbr
.
sdev_cou¡
);

2744 
	`sh™n⁄_£q_¥ötf
(
s
, "sh¨ed_∑ges=%d.\n", 
sdev
->
mbr
.
sh¨ed_∑ges
);

2745 
	`sh™n⁄_£q_¥ötf
(
s
, "p£udo_∂™e=%d.\n", 
sdev
->
mbr
.
p£udo_∂™e
);

2746 
	`sh™n⁄_£q_¥ötf
(
s
, "∂™e_cou¡=%d.\n", 
sdev
->
mbr
.
∂™e_cou¡
);

2747 
	`sh™n⁄_£q_¥ötf
(
s
, "≥riod_ªad_≥riod=%d.\n", 
sdev
->
mbr
.
≥riod_ªad_≥riod
);

2748 
	`sh™n⁄_£q_¥ötf
(
s
, "≥riod_ªad_µa=%d.\n", 
sdev
->
mbr
.
≥riod_ªad_µa
);

2749 
	`sh™n⁄_£q_¥ötf
(
s
, "dummy_w‹dlöe=%d.\n", 
sdev
->
mbr
.
dummy_w‹dlöe
);

2750 
	`sh™n⁄_£q_¥ötf
(
s
, "max_kìp_îa£d_hours=%d.\n", 
sdev
->
mbr
.
max_kìp_îa£d_hours
);

2751 
	`sh™n⁄_£q_¥ötf
(
s
, "ªad_ªåy=%d.\n", 
sdev
->
mbr
.
ªad_ªåy
);

2752 
	`sh™n⁄_£q_¥ötf
(
s
, "ecc_Áûuª_øã_thªshﬁd=%d.\n", 
sdev
->
mbr
.
ecc_Áûuª_øã_thªshﬁd
);

2753 
	`sh™n⁄_£q_¥ötf
(
s
, "max_wrôe_bw=%u.\n", 
sdev
->
mbr
.
max_wrôe_bw
);

2754 
	`sh™n⁄_£q_¥ötf
(
s
, "d©a_ªã¡i⁄_öãrvÆ=%u.\n", 
sdev
->
mbr
.
d©a_ªã¡i⁄_öãrvÆ
);

2755 
	`sh™n⁄_£q_¥ötf
(
s
, "µa_∑ge_width=%u.\n", 
sdev
->
mbr
.
µa_∑ge_width
);

2756 
	`sh™n⁄_£q_¥ötf
(
s
, "µa_∂™e_width=%u.\n", 
sdev
->
mbr
.
µa_∂™e_width
);

2757 
	`sh™n⁄_£q_¥ötf
(
s
, "˝s_vîsi⁄=%u.\n", 
sdev
->
mbr
.
˝s_vîsi⁄
);

2758 
	`sh™n⁄_£q_¥ötf
(
s
, "ovîœp_sblk=%u.\n", 
sdev
->
mbr
.
ovîœp_sblk
);

2759 
	`sh™n⁄_£q_¥ötf
(
s
, "≥_cy˛e=%u.\n", 
sdev
->
mbr
.
≥_cy˛e
);

2761 
	`sh™n⁄_£q_¥ötf
(
s
, "bad_phy_lun_map=");

2762 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
 - 1; i++)

2763 
	`sh™n⁄_£q_¥ötf
(
s
, "%016ŒX_", 
sdev
->
mbr
.
bad_phy_lun_m≠
[
i
]);

2764 
	`sh™n⁄_£q_¥ötf
(
s
, "%016ŒX\n", 
sdev
->
mbr
.
bad_phy_lun_m≠
[
BAD_LUN_MAP_ARRAY_SIZE
 - 1]);

2766 
i
 = 0; i < 
FEATURE_CFG_LIST_SIZE
; i++) {

2767 i‡(
cfg
->
vÆid
 =
FEATURE_INVALID
)

2769 i‡(
cfg
->
vÆid
 & 
FEATURE_PRIO_0_MASK
)

2770 
¥io
 = 0;

2771 i‡(
cfg
->
vÆid
 & 
FEATURE_PRIO_1_MASK
)

2772 
¥io
 = 1;

2774 
¥io
 = -1;

2775 
	`sh™n⁄_£q_¥ötf
(
s
, "feature: [prio=%d,áddr=0x%02x, cmd=0x%02x, sec_cmd=0x%02x, "

2777 
¥io
, 
cfg
->
addr
, cfg->
cmd
, cfg->
£c⁄d¨y_cmd
, cfg->
misc
, cfg->
nbyã
,

2778 
cfg
->
d©a
[
FEATURE_CFG_MAX_DATA
], cfg->data[FEATURE_CFG_MAX_DATA + 1],

2779 *(
__u64
*)
cfg
->
d©a
);

2780 
cfg
++;

2783 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

2785 
	`sh™n⁄_£q_¥ötf
(
s
, "*hw_max_ch™√ls=%d\n", (
	`ªad_ªg_ß„
(
sdev
, sdev->
b¨
) >> 16) & 0xFF);

2786 
	`sh™n⁄_£q_¥ötf
(
s
, "*hw_max_lun£ts_ö_ch™√l=%d\n", (
	`ªad_ªg_ß„
(
sdev
, sdev->
b¨
) >> 24) & 0x0F);

2787 
	`sh™n⁄_£q_¥ötf
(
s
, "*hw_max_luns_ö_lun£t=%d\n", ((
	`ªad_ªg_ß„
(
sdev
, sdev->
b¨
) >> 28) & 0x0F) + 1);

2789 
	`sh™n⁄_£q_¥ötf
(
s
, "*logicbs_ö_∑ge=%d\n", 
sdev
->
logicbs_ö_∑ge
);

2790 
	`sh™n⁄_£q_¥ötf
(
s
, "*ïûog_size=%d\n", 
sdev
->
max_ïûog_size
);

2792 i‡(
sdev
->
n‹_mbr_°©us
 & 
READ_FROM_NORFLASH
) {

2793 
	`sh™n⁄_£q_¥ötf
(
s
, "NM-w©îm¨k=%016lX\n", 
NOR_MBR_MAGIC
);

2796 
	}
}

2798 
	$debugfs_mbr_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2800  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
mbr_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2801 
	}
}

2803 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_mbr_f›s
;

2806 
	$l2p_lunm≠_£q_show
(
sh™n⁄_£q_fûe_t
 *
s
, *
v
)

2808 
i
;

2809 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_£q_fûe_¥iv©e
(
s
);

2811 
	`sh™n⁄_£q_¥ötf
(
s
, "lun_m≠_mode=%d\n\n", 
sdev
->
mbr
.
lun_m≠_mode
);

2812 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

2813 
	`sh™n⁄_£q_¥ötf
(
s
, "logiˇl_lun=%d,Öhysiˇl_lun=%d.\n", 
i
, 
sdev
->
lun
[i]->
phy_lun_num
);

2816 
	}
}

2818 
	$debugfs_l2p_lunm≠_›í
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

2820  
	`sh™n⁄_sögÀ_›í
(
fûe
, 
l2p_lunm≠_£q_show
, 
	`sh™n⁄_öode_i_¥iv©e
(
öode
));

2821 
	}
}

2823 
sh™n⁄_fûe_›î©i⁄s_t
 
	gshow_l2p_lunm≠_f›s
;

2825 
	$sh™n⁄_debugfs_öô
(
sh™n⁄_dev
 *
dev
)

2827 
i
;

2828 
«mebuf
[30];

2830 
dev
->
sh™n⁄_debug_roŸ
 = 
	`sh™n⁄_debugfs_¸óã_dú
(
	`sh™n⁄_disk_«me
(dev), 
NULL
);

2831 i‡(!
dev
->
sh™n⁄_debug_roŸ
)

2832  -
ENOENT
;

2834 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_Æl_blocks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2835 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_Æl_blocks_f›s
, 
debugfs_Æl_blocks_›í
);

2836 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_Æl_blocks_f›s
, 
sh™n⁄_£q_ªad
);

2837 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_Æl_blocks_f›s
, 
sh™n⁄_£q_l£ek
);

2838 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_Æl_blocks_f›s
, 
sh™n⁄_£q_ªÀa£
);

2839 
dev
->
debugfs_Æl_blocks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("all_blocks", 0444,

2840 
dev
->
sh™n⁄_debug_roŸ
, dev,

2841 &
show_Æl_blocks_f›s
);

2842 i‡(!
dev
->
debugfs_Æl_blocks
)

2843  -
ENOENT
;

2845 #ifde‡
CONFIG_SHANNON_DEBUG_DUMP


2846 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_dump_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2847 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_dump_f›s
, 
debugfs_dump_›í
);

2848 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_dump_f›s
, 
sh™n⁄_£q_ªad
);

2849 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_dump_f›s
, 
sh™n⁄_£q_l£ek
);

2850 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_dump_f›s
, 
sh™n⁄_£q_ªÀa£
);

2851 
dev
->
debugfs_dump
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("dump", 0444,

2852 
dev
->
sh™n⁄_debug_roŸ
, dev,

2853 &
show_dump_f›s
);

2854 i‡(!
dev
->
debugfs_dump
)

2855  -
ENOENT
;

2858 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_hŸ_blocks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2859 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_hŸ_blocks_f›s
, 
debugfs_hŸ_blocks_›í
);

2860 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_hŸ_blocks_f›s
, 
sh™n⁄_£q_ªad
);

2861 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_hŸ_blocks_f›s
, 
sh™n⁄_£q_l£ek
);

2862 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_hŸ_blocks_f›s
, 
sh™n⁄_£q_ªÀa£
);

2863 
dev
->
debugfs_hŸ_blocks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("hot_blocks", 0444,

2864 
dev
->
sh™n⁄_debug_roŸ
, dev,

2865 &
show_hŸ_blocks_f›s
);

2866 i‡(!
dev
->
debugfs_hŸ_blocks
)

2867  -
ENOENT
;

2869 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_cﬁd_blocks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2870 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_cﬁd_blocks_f›s
, 
debugfs_cﬁd_blocks_›í
);

2871 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_cﬁd_blocks_f›s
, 
sh™n⁄_£q_ªad
);

2872 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_cﬁd_blocks_f›s
, 
sh™n⁄_£q_l£ek
);

2873 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_cﬁd_blocks_f›s
, 
sh™n⁄_£q_ªÀa£
);

2874 
dev
->
debugfs_cﬁd_blocks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("cold_blocks", 0444,

2875 
dev
->
sh™n⁄_debug_roŸ
, dev,

2876 &
show_cﬁd_blocks_f›s
);

2877 i‡(!
dev
->
debugfs_cﬁd_blocks
)

2878  -
ENOENT
;

2880 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_waô_îa£d_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2881 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_waô_îa£d_f›s
, 
debugfs_waô_îa£d_›í
);

2882 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_waô_îa£d_f›s
, 
sh™n⁄_£q_ªad
);

2883 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_waô_îa£d_f›s
, 
sh™n⁄_£q_l£ek
);

2884 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_waô_îa£d_f›s
, 
sh™n⁄_£q_ªÀa£
);

2885 
dev
->
debugfs_waô_îa£d
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("wait_erased", 0444,

2886 
dev
->
sh™n⁄_debug_roŸ
, dev,

2887 &
show_waô_îa£d_f›s
);

2888 i‡(!
dev
->
debugfs_waô_îa£d
)

2889  -
ENOENT
;

2891 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_waô_c›y_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2892 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_waô_c›y_f›s
, 
debugfs_waô_c›y_›í
);

2893 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_waô_c›y_f›s
, 
sh™n⁄_£q_ªad
);

2894 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_waô_c›y_f›s
, 
sh™n⁄_£q_l£ek
);

2895 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_waô_c›y_f›s
, 
sh™n⁄_£q_ªÀa£
);

2896 
dev
->
debugfs_waô_c›y
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("wait_copy", 0444,

2897 
dev
->
sh™n⁄_debug_roŸ
, dev,

2898 &
show_waô_c›y_f›s
);

2899 i‡(!
dev
->
debugfs_waô_c›y
)

2900  -
ENOENT
;

2902 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_‰ì_blocks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2903 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_‰ì_blocks_f›s
, 
debugfs_‰ì_blocks_›í
);

2904 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_‰ì_blocks_f›s
, 
sh™n⁄_£q_ªad
);

2905 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_‰ì_blocks_f›s
, 
sh™n⁄_£q_l£ek
);

2906 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_‰ì_blocks_f›s
, 
sh™n⁄_£q_ªÀa£
);

2907 
dev
->
debugfs_‰ì_blocks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("free_blocks", 0444,

2908 
dev
->
sh™n⁄_debug_roŸ
, dev,

2909 &
show_‰ì_blocks_f›s
);

2910 i‡(!
dev
->
debugfs_‰ì_blocks
)

2911  -
ENOENT
;

2913 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_îr_blks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2914 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_îr_blks_f›s
, 
debugfs_îr_blks_›í
);

2915 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_îr_blks_f›s
, 
sh™n⁄_£q_ªad
);

2916 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_îr_blks_f›s
, 
sh™n⁄_£q_l£ek
);

2917 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_îr_blks_f›s
, 
sh™n⁄_£q_ªÀa£
);

2918 
dev
->
debugfs_îr_blks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("err_blks", 0444,

2919 
dev
->
sh™n⁄_debug_roŸ
, dev,

2920 &
show_îr_blks_f›s
);

2921 i‡(!
dev
->
debugfs_îr_blks
)

2922  -
ENOENT
;

2924 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


2925 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_out°™dög_ªqs_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2926 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_out°™dög_ªqs_f›s
, 
debugfs_out°™dög_ªqs_›í
);

2927 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_out°™dög_ªqs_f›s
, 
sh™n⁄_£q_ªad
);

2928 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_out°™dög_ªqs_f›s
, 
sh™n⁄_£q_l£ek
);

2929 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_out°™dög_ªqs_f›s
, 
sh™n⁄_£q_ªÀa£
);

2930 
dev
->
debugfs_out°™dög_ªqs
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("outstanding_reqs", 0444,

2931 
dev
->
sh™n⁄_debug_roŸ
, dev,

2932 &
show_out°™dög_ªqs_f›s
);

2933 i‡(!
dev
->
debugfs_out°™dög_ªqs
)

2934  -
ENOENT
;

2936 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_out°™dög_sbios_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2937 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_out°™dög_sbios_f›s
, 
debugfs_out°™dög_sbios_›í
);

2938 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_out°™dög_sbios_f›s
, 
sh™n⁄_£q_ªad
);

2939 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_out°™dög_sbios_f›s
, 
sh™n⁄_£q_l£ek
);

2940 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_out°™dög_sbios_f›s
, 
sh™n⁄_£q_ªÀa£
);

2941 
dev
->
debugfs_out°™dög_sbios
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("outstanding_sbios", 0444,

2942 
dev
->
sh™n⁄_debug_roŸ
, dev,

2943 &
show_out°™dög_sbios_f›s
);

2944 i‡(!
dev
->
debugfs_out°™dög_sbios
)

2945  -
ENOENT
;

2948 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_ªq_queue0_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2949 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_ªq_queue0_f›s
, 
debugfs_ªq_queue0_›í
);

2950 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_ªq_queue0_f›s
, 
sh™n⁄_£q_ªad
);

2951 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_ªq_queue0_f›s
, 
sh™n⁄_£q_l£ek
);

2952 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_ªq_queue0_f›s
, 
sh™n⁄_£q_ªÀa£
);

2953 
dev
->
debugfs_ªq_queue0
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("request_queue0", 0444,

2954 
dev
->
sh™n⁄_debug_roŸ
, dev,

2955 &
show_ªq_queue0_f›s
);

2956 i‡(!
dev
->
debugfs_ªq_queue0
)

2957  -
ENOENT
;

2959 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_ªq_queue1_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2960 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_ªq_queue1_f›s
, 
debugfs_ªq_queue1_›í
);

2961 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_ªq_queue1_f›s
, 
sh™n⁄_£q_ªad
);

2962 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_ªq_queue1_f›s
, 
sh™n⁄_£q_l£ek
);

2963 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_ªq_queue1_f›s
, 
sh™n⁄_£q_ªÀa£
);

2964 
dev
->
debugfs_ªq_queue1
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("request_queue1", 0444,

2965 
dev
->
sh™n⁄_debug_roŸ
, dev,

2966 &
show_ªq_queue1_f›s
);

2967 i‡(!
dev
->
debugfs_ªq_queue1
)

2968  -
ENOENT
;

2970 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_cmd_queue_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2971 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_cmd_queue_f›s
, 
debugfs_cmd_queue_›í
);

2972 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_cmd_queue_f›s
, 
sh™n⁄_£q_ªad
);

2973 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_cmd_queue_f›s
, 
sh™n⁄_£q_l£ek
);

2974 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_cmd_queue_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

2975 
dev
->
debugfs_cmd_queue
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("command_queue", 0444,

2976 
dev
->
sh™n⁄_debug_roŸ
, dev,

2977 &
show_cmd_queue_f›s
);

2978 i‡(!
dev
->
debugfs_cmd_queue
)

2979  -
ENOENT
;

2981 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_gc_°©e_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2982 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_gc_°©e_f›s
, 
debugfs_gc_°©e_›í
);

2983 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_gc_°©e_f›s
, 
sh™n⁄_£q_ªad
);

2984 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_gc_°©e_f›s
, 
sh™n⁄_£q_l£ek
);

2985 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_gc_°©e_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

2986 
dev
->
debugfs_gc_°©e
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("gc_state", 0444,

2987 
dev
->
sh™n⁄_debug_roŸ
, dev,

2988 &
show_gc_°©e_f›s
);

2989 i‡(!
dev
->
debugfs_gc_°©e
)

2990  -
ENOENT
;

2992 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

2993 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_ªgi°îs_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

2994 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_ªgi°îs_f›s
, 
debugfs_ªgi°îs_›í
);

2995 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_ªgi°îs_f›s
, 
sh™n⁄_£q_ªad
);

2996 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_ªgi°îs_f›s
, 
sh™n⁄_£q_l£ek
);

2997 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_ªgi°îs_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

2998 
dev
->
debugfs_ªgi°îs
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("registers", 0444,

2999 
dev
->
sh™n⁄_debug_roŸ
, dev,

3000 &
show_ªgi°îs_f›s
);

3001 i‡(!
dev
->
debugfs_ªgi°îs
)

3002  -
ENOENT
;

3004 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_queue_dïth_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3005 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_queue_dïth_f›s
, 
debugfs_queue_dïth_›í
);

3006 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_queue_dïth_f›s
, 
sh™n⁄_£q_ªad
);

3007 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_queue_dïth_f›s
, 
sh™n⁄_£q_l£ek
);

3008 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_queue_dïth_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3009 
dev
->
debugfs_queue_dïth
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("queue_depth", 0444,

3010 
dev
->
sh™n⁄_debug_roŸ
, dev,

3011 &
show_queue_dïth_f›s
);

3012 i‡(!
dev
->
debugfs_queue_dïth
)

3013  -
ENOENT
;

3015 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


3016 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_sq_dïth_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3017 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_sq_dïth_f›s
, 
debugfs_sq_dïth_›í
);

3018 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_sq_dïth_f›s
, 
sh™n⁄_£q_ªad
);

3019 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_sq_dïth_f›s
, 
sh™n⁄_£q_l£ek
);

3020 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_sq_dïth_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3021 
dev
->
debugfs_sq_dïth
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("sq_depth", 0444,

3022 
dev
->
sh™n⁄_debug_roŸ
, dev,

3023 &
show_sq_dïth_f›s
);

3024 i‡(!
dev
->
debugfs_sq_dïth
)

3025  -
ENOENT
;

3027 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_lun_°©i°ics_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3028 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_lun_°©i°ics_f›s
, 
debugfs_lun_°©i°ics_›í
);

3029 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_lun_°©i°ics_f›s
, 
sh™n⁄_£q_ªad
);

3030 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_lun_°©i°ics_f›s
, 
sh™n⁄_£q_l£ek
);

3031 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_lun_°©i°ics_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3032 
dev
->
debugfs_lun_°©i°ics
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("lun_statistics", 0444,

3033 
dev
->
sh™n⁄_debug_roŸ
, dev,

3034 &
show_lun_°©i°ics_f›s
);

3035 i‡(!
dev
->
debugfs_lun_°©i°ics
)

3036  -
ENOENT
;

3038 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_°©i°ics_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3039 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_°©i°ics_f›s
, 
debugfs_°©i°ics_›í
);

3040 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_°©i°ics_f›s
, 
sh™n⁄_£q_ªad
);

3041 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_°©i°ics_f›s
, 
sh™n⁄_£q_l£ek
);

3042 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_°©i°ics_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3043 
dev
->
debugfs_°©i°ics
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("statistics", 0444,

3044 
dev
->
sh™n⁄_debug_roŸ
, dev,

3045 &
show_°©i°ics_f›s
);

3046 i‡(!
dev
->
debugfs_°©i°ics
)

3047  -
ENOENT
;

3049 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_bﬂrd_∑ømëîs_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3050 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_bﬂrd_∑ømëîs_f›s
, 
debugfs_bﬂrd_∑ømëîs_›í
);

3051 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_bﬂrd_∑ømëîs_f›s
, 
sh™n⁄_£q_ªad
);

3052 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_bﬂrd_∑ømëîs_f›s
, 
sh™n⁄_£q_l£ek
);

3053 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_bﬂrd_∑ømëîs_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3054 
dev
->
debugfs_bﬂrd_∑ømëîs
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("board_parameters", 0444,

3055 
dev
->
sh™n⁄_debug_roŸ
, dev,

3056 &
show_bﬂrd_∑ømëîs_f›s
);

3057 i‡(!
dev
->
debugfs_bﬂrd_∑ømëîs
)

3058  -
ENOENT
;

3060 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_ªad_cou¡_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3061 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_ªad_cou¡_f›s
, 
debugfs_ªad_cou¡_›í
);

3062 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_ªad_cou¡_f›s
, 
sh™n⁄_£q_ªad
);

3063 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_ªad_cou¡_f›s
, 
sh™n⁄_£q_l£ek
);

3064 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_ªad_cou¡_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3065 
dev
->
debugfs_ªad_cou¡
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("read_count", 0444,

3066 
dev
->
sh™n⁄_debug_roŸ
, dev,

3067 &
show_ªad_cou¡_f›s
);

3068 i‡(!
dev
->
debugfs_ªad_cou¡
)

3069  -
ENOENT
;

3071 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_ecc_Áûuª_times_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3072 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_ecc_Áûuª_times_f›s
, 
debugfs_ecc_Áûuª_times_›í
);

3073 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_ecc_Áûuª_times_f›s
, 
sh™n⁄_£q_ªad
);

3074 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_ecc_Áûuª_times_f›s
, 
sh™n⁄_£q_l£ek
);

3075 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_ecc_Áûuª_times_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3076 
dev
->
debugfs_ecc_Áûuª_times
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("ecc_failure_times", 0444,

3077 
dev
->
sh™n⁄_debug_roŸ
, dev,

3078 &
show_ecc_Áûuª_times_f›s
);

3079 i‡(!
dev
->
debugfs_ecc_Áûuª_times
)

3080  -
ENOENT
;

3082 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_bad_blocks_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3083 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_bad_blocks_f›s
, 
debugfs_bad_blocks_›í
);

3084 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_bad_blocks_f›s
, 
sh™n⁄_£q_ªad
);

3085 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_bad_blocks_f›s
, 
sh™n⁄_£q_l£ek
);

3086 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_bad_blocks_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3087 
dev
->
debugfs_bad_blocks
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("bad_blocks", 0444,

3088 
dev
->
sh™n⁄_debug_roŸ
, dev,

3089 &
show_bad_blocks_f›s
);

3090 i‡(!
dev
->
debugfs_bad_blocks
)

3091  -
ENOENT
;

3093 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_rmw_li°_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3094 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_rmw_li°_f›s
, 
debugfs_rmw_li°_›í
);

3095 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_rmw_li°_f›s
, 
sh™n⁄_£q_ªad
);

3096 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_rmw_li°_f›s
, 
sh™n⁄_£q_l£ek
);

3097 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_rmw_li°_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3098 
dev
->
sdisk
.
debugfs_rmw_li°
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("rmw_list", 0444,

3099 
dev
->
sh™n⁄_debug_roŸ
, dev,

3100 &
show_rmw_li°_f›s
);

3101 i‡(!
dev
->
sdisk
.
debugfs_rmw_li°
)

3102  -
ENOENT
;

3104 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_waôqueue_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3105 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_waôqueue_f›s
, 
debugfs_waôqueue_›í
);

3106 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_waôqueue_f›s
, 
sh™n⁄_£q_ªad
);

3107 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_waôqueue_f›s
, 
sh™n⁄_£q_l£ek
);

3108 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_waôqueue_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3109 
dev
->
debugfs_waôqueue
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("waitqueue", 0444,

3110 
dev
->
sh™n⁄_debug_roŸ
, dev,

3111 &
show_waôqueue_f›s
);

3112 i‡(!
dev
->
debugfs_waôqueue
)

3113  -
ENOENT
;

3115 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_lock_°©_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3116 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_lock_°©_f›s
, 
debugfs_lock_°©_›í
);

3117 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_lock_°©_f›s
, 
sh™n⁄_£q_ªad
);

3118 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_lock_°©_f›s
, 
sh™n⁄_£q_l£ek
);

3119 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_lock_°©_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3120 
dev
->
debugfs_lock_°©
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("lock_stat", 0444,

3121 
dev
->
sh™n⁄_debug_roŸ
, dev,

3122 &
show_lock_°©_f›s
);

3123 i‡(!
dev
->
debugfs_lock_°©
)

3124  -
ENOENT
;

3126 #ifde‡
CONFIG_SHANNON_PLVERIFY


3127 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
∂˘æ_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3128 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
∂˘æ_f›s
, 
debugfs_∂˘æ_›í
);

3129 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
∂˘æ_f›s
, 
sh™n⁄_£q_ªad
);

3130 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
∂˘æ_f›s
, 
debugfs_∂˘æ_wrôe
);

3131 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
∂˘æ_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3132 
dev
->
debugfs_∂˘æ
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("plctrl", 0666,

3133 
dev
->
sh™n⁄_debug_roŸ
, dev,

3134 &
∂˘æ_f›s
);

3135 i‡(!
dev
->
debugfs_∂˘æ
)

3136  -
ENOENT
;

3139 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


3140 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
m™uÆ_ªad_îr_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3141 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
m™uÆ_ªad_îr_f›s
, 
debugfs_m™uÆ_ªad_îr_›í
);

3142 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
m™uÆ_ªad_îr_f›s
, 
sh™n⁄_£q_ªad
);

3143 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
m™uÆ_ªad_îr_f›s
, 
debugfs_m™uÆ_ªad_îr_wrôe
);

3144 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
m™uÆ_ªad_îr_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3145 
dev
->
debugfs_m™uÆ_ªad_îr
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("manual_read_err", 0666,

3146 
dev
->
sh™n⁄_debug_roŸ
, dev,

3147 &
m™uÆ_ªad_îr_f›s
);

3148 i‡(!
dev
->
debugfs_m™uÆ_ªad_îr
)

3149  -
ENOENT
;

3151 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
m™uÆ_wrôe_îr_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3152 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
m™uÆ_wrôe_îr_f›s
, 
debugfs_m™uÆ_wrôe_îr_›í
);

3153 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
m™uÆ_wrôe_îr_f›s
, 
sh™n⁄_£q_ªad
);

3154 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
m™uÆ_wrôe_îr_f›s
, 
debugfs_m™uÆ_wrôe_îr_wrôe
);

3155 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
m™uÆ_wrôe_îr_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3156 
dev
->
debugfs_m™uÆ_wrôe_îr
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("manual_write_err", 0666,

3157 
dev
->
sh™n⁄_debug_roŸ
, dev,

3158 &
m™uÆ_wrôe_îr_f›s
);

3159 i‡(!
dev
->
debugfs_m™uÆ_wrôe_îr
)

3160  -
ENOENT
;

3162 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_bad_lun_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3163 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_bad_lun_f›s
, 
debugfs_Áke_bad_lun_›í
);

3164 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_bad_lun_f›s
, 
debugfs_Áke_bad_lun_wrôe
);

3165 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_bad_lun_f›s
, 
sh™n⁄_£q_ªad
);

3166 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_bad_lun_f›s
, 
sh™n⁄_£q_l£ek
);

3167 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_bad_lun_f›s
, 
sh™n⁄_£q_ªÀa£
);

3168 
dev
->
debugfs_Áke_bad_lun
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_bad_lun", 0666,

3169 
dev
->
sh™n⁄_debug_roŸ
, dev,

3170 &
Áke_bad_lun_f›s
);

3171 i‡(!
dev
->
debugfs_Áke_bad_lun
)

3172  -
ENOENT
;

3174 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_cmd_timeout_lun_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3175 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_cmd_timeout_lun_f›s
, 
debugfs_Áke_cmd_timeout_lun_›í
);

3176 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_cmd_timeout_lun_f›s
, 
debugfs_Áke_cmd_timeout_lun_wrôe
);

3177 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_cmd_timeout_lun_f›s
, 
sh™n⁄_£q_ªad
);

3178 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_cmd_timeout_lun_f›s
, 
sh™n⁄_£q_l£ek
);

3179 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_cmd_timeout_lun_f›s
, 
sh™n⁄_£q_ªÀa£
);

3180 
dev
->
debugfs_Áke_cmd_timeout_lun
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_cmd_timeout_lun", 0666,

3181 
dev
->
sh™n⁄_debug_roŸ
, dev,

3182 &
Áke_cmd_timeout_lun_f›s
);

3183 i‡(!
dev
->
debugfs_Áke_cmd_timeout_lun
)

3184  -
ENOENT
;

3186 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_rd_bad_lun_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3187 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_rd_bad_lun_f›s
, 
debugfs_Áke_rd_bad_lun_›í
);

3188 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_rd_bad_lun_f›s
, 
debugfs_Áke_rd_bad_lun_wrôe
);

3189 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_rd_bad_lun_f›s
, 
sh™n⁄_£q_ªad
);

3190 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_rd_bad_lun_f›s
, 
sh™n⁄_£q_l£ek
);

3191 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_rd_bad_lun_f›s
, 
sh™n⁄_£q_ªÀa£
);

3192 
dev
->
debugfs_Áke_rd_bad_lun
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_rd_bad_lun", 0666,

3193 
dev
->
sh™n⁄_debug_roŸ
, dev,

3194 &
Áke_rd_bad_lun_f›s
);

3195 i‡(!
dev
->
debugfs_Áke_rd_bad_lun
)

3196  -
ENOENT
;

3198 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_rd_bad_lu≈ba_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3199 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_rd_bad_lu≈ba_f›s
, 
debugfs_Áke_rd_bad_lu≈ba_›í
);

3200 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_rd_bad_lu≈ba_f›s
, 
debugfs_Áke_rd_bad_lu≈ba_wrôe
);

3201 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_rd_bad_lu≈ba_f›s
, 
sh™n⁄_£q_ªad
);

3202 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_rd_bad_lu≈ba_f›s
, 
sh™n⁄_£q_l£ek
);

3203 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_rd_bad_lu≈ba_f›s
, 
sh™n⁄_£q_ªÀa£
);

3204 
dev
->
debugfs_Áke_rd_bad_lu≈ba
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_rd_bad_lunpba", 0666,

3205 
dev
->
sh™n⁄_debug_roŸ
, dev,

3206 &
Áke_rd_bad_lu≈ba_f›s
);

3207 i‡(!
dev
->
debugfs_Áke_rd_bad_lu≈ba
)

3208  -
ENOENT
;

3210 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_wr_bad_lu≈∑_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3211 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_wr_bad_lu≈∑_f›s
, 
debugfs_Áke_wr_bad_lu≈∑_›í
);

3212 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_wr_bad_lu≈∑_f›s
, 
debugfs_Áke_wr_bad_lu≈∑_wrôe
);

3213 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_wr_bad_lu≈∑_f›s
, 
sh™n⁄_£q_ªad
);

3214 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_wr_bad_lu≈∑_f›s
, 
sh™n⁄_£q_l£ek
);

3215 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_wr_bad_lu≈∑_f›s
, 
sh™n⁄_£q_ªÀa£
);

3216 
dev
->
debugfs_Áke_wr_bad_lu≈∑
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_wr_bad_lunppa", 0666,

3217 
dev
->
sh™n⁄_debug_roŸ
, dev,

3218 &
Áke_wr_bad_lu≈∑_f›s
);

3219 i‡(!
dev
->
debugfs_Áke_wr_bad_lu≈∑
)

3220  -
ENOENT
;

3222 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
Áke_î_bad_block_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3223 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
Áke_î_bad_block_f›s
, 
debugfs_Áke_î_bad_block_›í
);

3224 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
Áke_î_bad_block_f›s
, 
debugfs_Áke_î_bad_block_wrôe
);

3225 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
Áke_î_bad_block_f›s
, 
sh™n⁄_£q_ªad
);

3226 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
Áke_î_bad_block_f›s
, 
sh™n⁄_£q_l£ek
);

3227 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
Áke_î_bad_block_f›s
, 
sh™n⁄_£q_ªÀa£
);

3228 
dev
->
debugfs_Áke_î_bad_block
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("fake_er_bad_block", 0666,

3229 
dev
->
sh™n⁄_debug_roŸ
, dev,

3230 &
Áke_î_bad_block_f›s
);

3231 i‡(!
dev
->
debugfs_Áke_î_bad_block
)

3232  -
ENOENT
;

3234 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
twö_ªad_îr_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3235 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
twö_ªad_îr_f›s
, 
debugfs_twö_ªad_îr_›í
);

3236 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
twö_ªad_îr_f›s
, 
sh™n⁄_£q_ªad
);

3237 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(&
twö_ªad_îr_f›s
, 
debugfs_twö_ªad_îr_wrôe
);

3238 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
twö_ªad_îr_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3239 
dev
->
debugfs_twö_ªad_îr
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("twin_read_err", 0666,

3240 
dev
->
sh™n⁄_debug_roŸ
, dev,

3241 &
twö_ªad_îr_f›s
);

3242 i‡(!
dev
->
debugfs_twö_ªad_îr
)

3243  -
ENOENT
;

3246 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_mbr_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3247 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_mbr_f›s
, 
debugfs_mbr_›í
);

3248 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_mbr_f›s
, 
sh™n⁄_£q_ªad
);

3249 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_mbr_f›s
, 
sh™n⁄_£q_l£ek
);

3250 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_mbr_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3251 
dev
->
debugfs_mbr
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("mbr", 0444,

3252 
dev
->
sh™n⁄_debug_roŸ
, dev,

3253 &
show_mbr_f›s
);

3254 i‡(!
dev
->
debugfs_mbr
)

3255  -
ENOENT
;

3257 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_l2p_lunm≠_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3258 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_l2p_lunm≠_f›s
, 
debugfs_l2p_lunm≠_›í
);

3259 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_l2p_lunm≠_f›s
, 
sh™n⁄_£q_ªad
);

3260 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_l2p_lunm≠_f›s
, 
sh™n⁄_£q_l£ek
);

3261 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_l2p_lunm≠_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3262 
dev
->
debugfs_l2p_lunm≠
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("l2p_lunmap", 0444,

3263 
dev
->
sh™n⁄_debug_roŸ
, dev,

3264 &
show_l2p_lunm≠_f›s
);

3265 i‡(!
dev
->
debugfs_l2p_lunm≠
)

3266  -
ENOENT
;

3268 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
badlun_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3269 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
badlun_f›s
, 
debugfs_badlun_›í
);

3270 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
badlun_f›s
, 
sh™n⁄_£q_ªad
);

3271 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
badlun_f›s
, 
sh™n⁄_£q_l£ek
);

3272 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
badlun_f›s
, 
sh™n⁄_£q_ªÀa£
);

3273 
dev
->
debugfs_badlun
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("badlun_bitmap", 0444,

3274 
dev
->
sh™n⁄_debug_roŸ
, dev,

3275 &
badlun_f›s
);

3276 i‡(!
dev
->
debugfs_badlun
)

3277  -
ENOENT
;

3279 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

3280 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_bbt_°©e_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3281 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_bbt_°©e_f›s
, 
debugfs_bbt_°©e_›í
);

3282 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_bbt_°©e_f›s
, 
sh™n⁄_£q_ªad
);

3283 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_bbt_°©e_f›s
, 
sh™n⁄_£q_l£ek
);

3284 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_bbt_°©e_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3285 
dev
->
debugfs_bbt_°©e
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("bbt_state", 0444,

3286 
dev
->
sh™n⁄_debug_roŸ
, dev,

3287 &
show_bbt_°©e_f›s
);

3288 i‡(!
dev
->
debugfs_bbt_°©e
)

3289  -
ENOENT
;

3292 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_vﬁège_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3293 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_vﬁège_f›s
, 
debugfs_vﬁège_›í
);

3294 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_vﬁège_f›s
, 
sh™n⁄_£q_ªad
);

3295 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_vﬁège_f›s
, 
sh™n⁄_£q_l£ek
);

3296 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_vﬁège_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3297 
dev
->
debugfs_vﬁège
 = 
	`sh™n⁄_debugfs_¸óã_fûe
("voltage_temperature", 0444,

3298 
dev
->
sh™n⁄_debug_roŸ
, dev,

3299 &
show_vﬁège_f›s
);

3300 i‡(!
dev
->
debugfs_vﬁège
)

3301  -
ENOENT
;

3303 
dev
->
debugfs_cmd_queue_øw_d©a_dú
 = 
	`sh™n⁄_debugfs_¸óã_dú
("comm™d_queue_øw_d©a", dev->
sh™n⁄_debug_roŸ
);

3304 i‡(!
dev
->
debugfs_cmd_queue_øw_d©a_dú
)

3305  -
ENOENT
;

3306 
dev
->
debugfs_cmd_queue_øw_d©a
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_díåy_t
 *Ë* (dev->
lun£t_cou¡
 + 2), 
GFP_SHANNON
);

3307 i‡(!
dev
->
debugfs_cmd_queue_øw_d©a
)

3308  -
ENOMEM
;

3310 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

3311 
	`sh™n⁄_mem£t
(
«mebuf
, 0, 30);

3312 
	`sh™n⁄_•rötf
(
«mebuf
, "comm™d_queue_øw_d©a_%d", 
i
);

3313 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_cmd_queue_øw_d©a_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3314 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_cmd_queue_øw_d©a_f›s
, 
debugfs_cmd_queue_øw_d©a_›í
);

3315 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_cmd_queue_øw_d©a_f›s
, 
sh™n⁄_£q_ªad
);

3316 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_cmd_queue_øw_d©a_f›s
, 
sh™n⁄_£q_l£ek
);

3317 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_cmd_queue_øw_d©a_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3318 
dev
->
debugfs_cmd_queue_øw_d©a
[
i
] = 
	`sh™n⁄_debugfs_¸óã_fûe
(
«mebuf
, 0444,

3319 
dev
->
debugfs_cmd_queue_øw_d©a_dú
, &dev->
lun£ts
[
i
],

3320 &
show_cmd_queue_øw_d©a_f›s
);

3321 i‡(!
dev
->
debugfs_cmd_queue_øw_d©a
[
i
])

3322  -
ENOENT
;

3325 
	`sh™n⁄_mem£t
(
«mebuf
, 0, 30);

3326 
	`sh™n⁄_•rötf
(
«mebuf
, "command_queue_raw_data_bufq_%d", 0);

3327 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_cmd_queue_øw_d©a_bufq0_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3328 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq0_f›s
, 
debugfs_cmd_queue_øw_d©a_bufq0_›í
);

3329 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq0_f›s
, 
sh™n⁄_£q_ªad
);

3330 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq0_f›s
, 
sh™n⁄_£q_l£ek
);

3331 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq0_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3332 
dev
->
debugfs_cmd_queue_øw_d©a
[dev->
lun£t_cou¡
] = 
	`sh™n⁄_debugfs_¸óã_fûe
(
«mebuf
, 0444,

3333 
dev
->
debugfs_cmd_queue_øw_d©a_dú
, dev,

3334 &
show_cmd_queue_øw_d©a_bufq0_f›s
);

3335 i‡(!
dev
->
debugfs_cmd_queue_øw_d©a
[dev->
lun£t_cou¡
])

3336  -
ENOENT
;

3338 
	`sh™n⁄_mem£t
(
«mebuf
, 0, 30);

3339 
	`sh™n⁄_•rötf
(
«mebuf
, "command_queue_raw_data_bufq_%d", 1);

3340 
	`sh™n⁄_£t_fûe_›s_ow√r
(&
show_cmd_queue_øw_d©a_bufq1_f›s
, 
	`sh™n⁄_gë_this_moduÀ
());

3341 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq1_f›s
, 
debugfs_cmd_queue_øw_d©a_bufq1_›í
);

3342 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq1_f›s
, 
sh™n⁄_£q_ªad
);

3343 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq1_f›s
, 
sh™n⁄_£q_l£ek
);

3344 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(&
show_cmd_queue_øw_d©a_bufq1_f›s
, 
sh™n⁄_sögÀ_ªÀa£
);

3345 
dev
->
debugfs_cmd_queue_øw_d©a
[dev->
lun£t_cou¡
 + 1] = 
	`sh™n⁄_debugfs_¸óã_fûe
(
«mebuf
, 0444,

3346 
dev
->
debugfs_cmd_queue_øw_d©a_dú
, dev,

3347 &
show_cmd_queue_øw_d©a_bufq1_f›s
);

3348 i‡(!
dev
->
debugfs_cmd_queue_øw_d©a
[dev->
lun£t_cou¡
 + 1])

3349  -
ENOENT
;

3352 
	}
}

3354 
	$sh™n⁄_debugfs_˛ónup
(
sh™n⁄_dev
 *
dev
)

3356 
i
;

3358 
i
 = 0; i < 
dev
->
lun£t_cou¡
 + 2; i++) {

3359 i‡(
dev
->
debugfs_cmd_queue_øw_d©a
[
i
]) {

3360 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_cmd_queue_øw_d©a
[
i
]);

3361 
dev
->
debugfs_cmd_queue_øw_d©a
[
i
] = 
NULL
;

3364 i‡(
dev
->
debugfs_cmd_queue_øw_d©a
) {

3365 
	`sh™n⁄_k‰ì
(
dev
->
debugfs_cmd_queue_øw_d©a
);

3366 
dev
->
debugfs_cmd_queue_øw_d©a
 = 
NULL
;

3368 i‡(
dev
->
debugfs_cmd_queue_øw_d©a_dú
) {

3369 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_cmd_queue_øw_d©a_dú
);

3370 
dev
->
debugfs_cmd_queue_øw_d©a_dú
 = 
NULL
;

3372 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

3373 i‡(
dev
->
debugfs_bbt_°©e
) {

3374 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_bbt_°©e
);

3375 
dev
->
debugfs_bbt_°©e
 = 
NULL
;

3378 i‡(
dev
->
debugfs_vﬁège
) {

3379 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_vﬁège
);

3380 
dev
->
debugfs_vﬁège
 = 
NULL
;

3382 i‡(
dev
->
debugfs_badlun
) {

3383 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_badlun
);

3384 
dev
->
debugfs_badlun
 = 
NULL
;

3386 i‡(
dev
->
debugfs_l2p_lunm≠
) {

3387 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_l2p_lunm≠
);

3388 
dev
->
debugfs_l2p_lunm≠
 = 
NULL
;

3390 i‡(
dev
->
debugfs_mbr
) {

3391 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_mbr
);

3392 
dev
->
debugfs_mbr
 = 
NULL
;

3394 #ifde‡
CONFIG_SHANNON_PLVERIFY


3395 i‡(
dev
->
debugfs_∂˘æ
) {

3396 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_∂˘æ
);

3397 
dev
->
debugfs_∂˘æ
 = 
NULL
;

3400 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


3401 i‡(
dev
->
debugfs_m™uÆ_ªad_îr
) {

3402 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_m™uÆ_ªad_îr
);

3403 
dev
->
debugfs_m™uÆ_ªad_îr
 = 
NULL
;

3406 i‡(
dev
->
debugfs_m™uÆ_wrôe_îr
) {

3407 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_m™uÆ_wrôe_îr
);

3408 
dev
->
debugfs_m™uÆ_wrôe_îr
 = 
NULL
;

3411 i‡(
dev
->
debugfs_Áke_rd_bad_lun
) {

3412 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_rd_bad_lun
);

3413 
dev
->
debugfs_Áke_rd_bad_lun
 = 
NULL
;

3416 i‡(
dev
->
debugfs_Áke_bad_lun
) {

3417 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_bad_lun
);

3418 
dev
->
debugfs_Áke_bad_lun
 = 
NULL
;

3421 i‡(
dev
->
debugfs_Áke_cmd_timeout_lun
) {

3422 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_cmd_timeout_lun
);

3423 
dev
->
debugfs_Áke_cmd_timeout_lun
 = 
NULL
;

3426 i‡(
dev
->
debugfs_Áke_î_bad_block
) {

3427 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_î_bad_block
);

3428 
dev
->
debugfs_Áke_î_bad_block
 = 
NULL
;

3431 i‡(
dev
->
debugfs_Áke_rd_bad_lu≈ba
) {

3432 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_rd_bad_lu≈ba
);

3433 
dev
->
debugfs_Áke_rd_bad_lu≈ba
 = 
NULL
;

3436 i‡(
dev
->
debugfs_Áke_wr_bad_lu≈∑
) {

3437 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Áke_wr_bad_lu≈∑
);

3438 
dev
->
debugfs_Áke_wr_bad_lu≈∑
 = 
NULL
;

3441 i‡(
dev
->
debugfs_twö_ªad_îr
) {

3442 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_twö_ªad_îr
);

3443 
dev
->
debugfs_twö_ªad_îr
 = 
NULL
;

3446 i‡(
dev
->
debugfs_lock_°©
) {

3447 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_lock_°©
);

3448 
dev
->
debugfs_lock_°©
 = 
NULL
;

3450 i‡(
dev
->
debugfs_waôqueue
) {

3451 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_waôqueue
);

3452 
dev
->
debugfs_waôqueue
 = 
NULL
;

3455 i‡(
dev
->
sdisk
.
debugfs_rmw_li°
) {

3456 
	`sh™n⁄_debugfs_ªmove
(
dev
->
sdisk
.
debugfs_rmw_li°
);

3457 
dev
->
sdisk
.
debugfs_rmw_li°
 = 
NULL
;

3459 i‡(
dev
->
debugfs_bad_blocks
) {

3460 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_bad_blocks
);

3461 
dev
->
debugfs_bad_blocks
 = 
NULL
;

3463 i‡(
dev
->
debugfs_ªad_cou¡
) {

3464 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_ªad_cou¡
);

3465 
dev
->
debugfs_ªad_cou¡
 = 
NULL
;

3467 i‡(
dev
->
debugfs_ecc_Áûuª_times
) {

3468 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_ecc_Áûuª_times
);

3469 
dev
->
debugfs_ecc_Áûuª_times
 = 
NULL
;

3471 i‡(
dev
->
debugfs_bﬂrd_∑ømëîs
) {

3472 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_bﬂrd_∑ømëîs
);

3473 
dev
->
debugfs_bﬂrd_∑ømëîs
 = 
NULL
;

3475 i‡(
dev
->
debugfs_°©i°ics
) {

3476 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_°©i°ics
);

3477 
dev
->
debugfs_°©i°ics
 = 
NULL
;

3479 i‡(
dev
->
debugfs_lun_°©i°ics
) {

3480 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_lun_°©i°ics
);

3481 
dev
->
debugfs_lun_°©i°ics
 = 
NULL
;

3483 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


3484 i‡(
dev
->
debugfs_sq_dïth
) {

3485 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_sq_dïth
);

3486 
dev
->
debugfs_sq_dïth
 = 
NULL
;

3489 i‡(
dev
->
debugfs_queue_dïth
) {

3490 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_queue_dïth
);

3491 
dev
->
debugfs_queue_dïth
 = 
NULL
;

3493 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

3494 i‡(
dev
->
debugfs_ªgi°îs
) {

3495 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_ªgi°îs
);

3496 
dev
->
debugfs_ªgi°îs
 = 
NULL
;

3499 i‡(
dev
->
debugfs_gc_°©e
) {

3500 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_gc_°©e
);

3501 
dev
->
debugfs_gc_°©e
 = 
NULL
;

3503 i‡(
dev
->
debugfs_cmd_queue
) {

3504 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_cmd_queue
);

3505 
dev
->
debugfs_cmd_queue
 = 
NULL
;

3507 i‡(
dev
->
debugfs_ªq_queue1
) {

3508 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_ªq_queue1
);

3509 
dev
->
debugfs_ªq_queue1
 = 
NULL
;

3511 i‡(
dev
->
debugfs_ªq_queue0
) {

3512 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_ªq_queue0
);

3513 
dev
->
debugfs_ªq_queue0
 = 
NULL
;

3515 i‡(
dev
->
debugfs_‰ì_blocks
) {

3516 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_‰ì_blocks
);

3517 
dev
->
debugfs_‰ì_blocks
 = 
NULL
;

3519 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


3520 i‡(
dev
->
debugfs_out°™dög_sbios
) {

3521 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_out°™dög_sbios
);

3522 
dev
->
debugfs_out°™dög_sbios
 = 
NULL
;

3525 i‡(
dev
->
debugfs_out°™dög_ªqs
) {

3526 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_out°™dög_ªqs
);

3527 
dev
->
debugfs_out°™dög_ªqs
 = 
NULL
;

3530 i‡(
dev
->
debugfs_îr_blks
) {

3531 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_îr_blks
);

3532 
dev
->
debugfs_îr_blks
 = 
NULL
;

3535 i‡(
dev
->
debugfs_waô_c›y
) {

3536 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_waô_c›y
);

3537 
dev
->
debugfs_waô_c›y
 = 
NULL
;

3539 i‡(
dev
->
debugfs_waô_îa£d
) {

3540 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_waô_îa£d
);

3541 
dev
->
debugfs_waô_îa£d
 = 
NULL
;

3543 i‡(
dev
->
debugfs_cﬁd_blocks
) {

3544 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_cﬁd_blocks
);

3545 
dev
->
debugfs_cﬁd_blocks
 = 
NULL
;

3547 i‡(
dev
->
debugfs_hŸ_blocks
) {

3548 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_hŸ_blocks
);

3549 
dev
->
debugfs_hŸ_blocks
 = 
NULL
;

3551 #ifde‡
CONFIG_SHANNON_DEBUG_DUMP


3552 i‡(
dev
->
debugfs_dump
){

3553 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_dump
);

3554 
dev
->
debugfs_dump
 = 
NULL
;

3557 i‡(
dev
->
debugfs_Æl_blocks
) {

3558 
	`sh™n⁄_debugfs_ªmove
(
dev
->
debugfs_Æl_blocks
);

3559 
dev
->
debugfs_Æl_blocks
 = 
NULL
;

3561 i‡(
dev
->
sh™n⁄_debug_roŸ
) {

3562 
	`sh™n⁄_debugfs_ªmove
(
dev
->
sh™n⁄_debug_roŸ
);

3563 
dev
->
sh™n⁄_debug_roŸ
 = 
NULL
;

3565 
	}
}

3567 
	$check_vÆid_∑ges
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
)

3569 
lun
, 
vÆid_∑ges
 = 0;

3570 
sh™n⁄_sb
 *
sb
;

3571 
logicb_t
 
pba
, 
fú°_pba
, 
œ°_pba
;

3573 i‡(!
	`sh™n⁄_dev_is_g5
(
dev
))

3574 
	`BUG_ON
(
sb_ödex
==0);

3575 
sb
 = 
dev
->
sbs
 + 
sb_ödex
;

3577 
fú°_pba
 = 
sb
->
sb_ödex
 * 
dev
->
logicbs_ö_siblög_eblock
;

3578 
œ°_pba
 = (
sb
->
sb_ödex
 + 1Ë* 
dev
->
logicbs_ö_siblög_eblock
;

3580 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

3581 
lun
 = 
	`gë_∑rôy_lun
(&
sb
->
sub_group
[0]);

3583 
lun
 = (lu¿+ 1Ë% 
dev
->
lun_cou¡
;

3584 
	`is_bad_lun
(
sb
, 
lun
))

3585 
lun
 = (lu¿+ 1Ë% 
dev
->
lun_cou¡
;

3586 
pba
 = 
fú°_pba
;Öb®< 
œ°_pba
;Öba++) {

3587 i‡(!
	`is_°Æe
(
dev
, 
lun
, 
pba
)) {

3588 
vÆid_∑ges
++;

3591 } 
lun
 !
	`œ°_d©a_lun
(&
sb
->
sub_group
[0]));

3593 
	`sh™n⁄_öfo
("%s(): sb_ödex=%2d, vÆid_∑ges=%d, sb->vÆid_∑ges=%d.\n", 
__func__
, 
sb_ödex
, 
vÆid_∑ges
, 
	`sh™n⁄_©omic_ªad
(&
sb
->valid_pages));

3594 
	`BUG_ON
((
sb
->
°©e
 !
HOT_ACTIVE_BLOCK
Ë&& (sb->°©ê!
COLD_ACTIVE_BLOCK
Ë&& (
vÆid_∑ges
 !
	`sh™n⁄_©omic_ªad
(&sb->valid_pages)));

3595 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3596 
	}
}

3598 
	$dump_pba_èbÀ
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
)

3600 
off£t
 = (
sb_ödex
*
dev
->
logicbs_ö_siblög_eblock
*
PBA_ENTRY_LEN
)/8;

3601 
Àn
 = (
dev
->
logicbs_ö_siblög_eblock
*
PBA_ENTRY_LEN
)/8;

3602 *
ba£
;

3603 
lun
, 
j
;

3605 
	`sh™n⁄_öfo
("%s(): sb_ödex=%d. ---------\n", 
__func__
, 
sb_ödex
);

3606 
lun
 = 0;Üu¿< 
dev
->
lun_cou¡
;Üun++) {

3607 
	`sh™n⁄_öfo
("lun=%d: ", 
lun
);

3608 
ba£
 = (*)
dev
->
lun
[lun]->
pba_èbÀ
 + 
off£t
;

3609 
j
 = 0; j < 
Àn
; j++) {

3610 
	`sh™n⁄_öfo
("%3x ", *(
ba£
 + 
j
));

3612 
	`sh™n⁄_öfo
("\n");

3614 
	}
}

	@shannon_device.c

1 
	~<löux/fs.h
>

2 
	~<löux/devi˚.h
>

3 
	~<löux/cdev.h
>

4 
	~<löux/öãºu±.h
>

5 
	~<löux/blkdev.h
>

6 
	~<löux/gíhd.h
>

7 
	~<löux/kî√l.h
>

8 
	~<löux/jiffõs.h
>

9 
	~<löux/moduÀ.h
>

10 
	~<löux/vîsi⁄.h
>

12 
	~"sh™n⁄_devi˚.h
"

13 
	~"sh™n⁄_dma.h
"

14 
	~"sh™n⁄_block.h
"

16 
	#NAMEBUF_LEN
 256

	)

18 *
	$sh™n⁄_gë_this_moduÀ
()

20  
THIS_MODULE
;

21 
	}
}

23 
sh™n⁄_dev_t
 
	$SHANNON_MAJOR
(
sh™n⁄_dev_t
 
dev
)

25  
	`MAJOR
(
dev
);

26 
	}
}

28 
sh™n⁄_dev_t
 
	$SHANNON_MINOR
(
sh™n⁄_dev_t
 
dev
)

30  
	`MINOR
(
dev
);

31 
	}
}

33 
sh™n⁄_dev_t
 
	$SHANNON_MKDEV
(
sh™n⁄_dev_t
 
ma
, sh™n⁄_dev_à
mi
)

35  
	`MKDEV
(
ma
, 
mi
);

36 
	}
}

39 
	$sh™n⁄_cdev_add
(
sh™n⁄_cdev_t
 *
p
, 
sh™n⁄_dev_t
 
dev
, 
cou¡
)

41  
	`cdev_add
((
cdev
 *)
p
, 
dev
, 
cou¡
);

42 
	}
}

44 
	$sh™n⁄_cdev_dñ
(
sh™n⁄_cdev_t
 *
p
)

46 
	`cdev_dñ
((
cdev
 *)
p
);

47 
	}
}

49 
	$sh™n⁄_cdev_öô
(
sh™n⁄_cdev_t
 *
cdev
, c⁄° 
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
)

51 
	`cdev_öô
((
cdev
 *)cdev, (c⁄° 
fûe_›î©i⁄s
 *)
f›s
);

52 
	}
}

54 
	$sh™n⁄_£t_cdev_ow√r_this_moduÀ
(
sh™n⁄_cdev_t
 *
cdev
)

56 ((
cdev
 *)cdev)->
ow√r
 = 
THIS_MODULE
;

57 
	}
}

59 
fûe_›î©i⁄s
 
debug_cdev_f›s
;

61 
	$sh™n⁄_öô_debug_cdev
(
sh™n⁄_cdev_t
 *
cdev
)

63 
	`cdev_öô
((
cdev
 *)cdev, &
debug_cdev_f›s
);

64 
	}
}

67 
sh™n⁄_devi˚_t
 *
	$sh™n⁄_devi˚_¸óã
(
sh™n⁄_˛ass_t
 *
˛ass
, 
sh™n⁄_devi˚_t
 *
∑ª¡
,

68 
sh™n⁄_dev_t
 
devt
, *
drvd©a
, c⁄° *
fmt
, ...)

70 
va_li°
 
v¨gs
;

71 
«mebuf
[
NAMEBUF_LEN
];

73 
	`va_°¨t
(
v¨gs
, 
fmt
);

74 
	`v¢¥ötf
(
«mebuf
, 
NAMEBUF_LEN
, 
fmt
, 
v¨gs
);

75 
	`va_íd
(
v¨gs
);

77 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

79  
	`devi˚_¸óã
((
˛ass
 *)˛ass, (
devi˚
 *)
∑ª¡
, 
devt
, 
drvd©a
, 
«mebuf
);

83  
	`devi˚_¸óã
((
˛ass
 *)˛ass, (
devi˚
 *)
∑ª¡
, 
devt
, 
«mebuf
);

86 
	}
}

88 
	$sh™n⁄_devi˚_de°roy
(
sh™n⁄_˛ass_t
 *
˛s
, 
sh™n⁄_dev_t
 
devt
)

90 
	`devi˚_de°roy
((
˛ass
 *)
˛s
, 
devt
);

91 
	}
}

93 
sh™n⁄_˛ass_t
 *
	$sh™n⁄_˛ass_¸óã
(
sh™n⁄_moduÀ_t
 *
ow√r
, *
«me
)

95  
	`˛ass_¸óã
((
moduÀ
 *)
ow√r
, 
«me
);

96 
	}
}

98 
	$sh™n⁄_˛ass_de°roy
(
sh™n⁄_˛ass_t
 *
˛s
)

100 
	`˛ass_de°roy
((
˛ass
 *)
˛s
);

101 
	}
}

104 
	$sh™n⁄_Æloc_chrdev_ªgi⁄
(
sh™n⁄_dev_t
 *
dev
, 
ba£mö‹
, 
cou¡
, c⁄° *
«me
)

106  
	`Æloc_chrdev_ªgi⁄
(
dev
, 
ba£mö‹
, 
cou¡
, 
«me
);

107 
	}
}

109 
	$sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
sh™n⁄_dev_t
 
‰om
, 
cou¡
)

111 
	`uƒegi°î_chrdev_ªgi⁄
(
‰om
, 
cou¡
);

112 
	}
}

115 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 28)

117 
	$sh™n⁄_disk_ö_Êight
(
sh™n⁄_gídisk_t
 *
gdt
)

119 
gídisk
 *
gd
 = (gídisk *)
gdt
;

120  
	`©omic_ªad
((
©omic_t
 *)(&
gd
->
ö_Êight
));

121 
	}
}

123 #ñi‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 28)

125 
ölöe
 
	$sh™n⁄_∑π_öc_ö_Êight
(
hd_°ru˘
 *
∑π
, 
rw
)

127 
	`©omic_öc
((
©omic_t
 *)(&
∑π
->
ö_Êight
));

128 i‡(
∑π
->
∑πno
)

129 
	`©omic_öc
((
©omic_t
 *)(&
	`∑π_to_disk
(
∑π
)->
∑π0
.
ö_Êight
));

130 
	}
}

132 
ölöe
 
	$sh™n⁄_∑π_dec_ö_Êight
(
hd_°ru˘
 *
∑π
, 
rw
)

134 
	`©omic_dec
((
©omic_t
 *)(&
∑π
->
ö_Êight
));

135 i‡(
∑π
->
∑πno
)

136 
	`©omic_dec
((
©omic_t
 *)(&
	`∑π_to_disk
(
∑π
)->
∑π0
.
ö_Êight
));

137 
	}
}

139 
	$sh™n⁄_disk_ö_Êight
(
sh™n⁄_gídisk_t
 *
gdt
)

141 
gídisk
 *
gd
 = (gídisk *)
gdt
;

142  
	`©omic_ªad
((
©omic_t
 *)(&
gd
->
∑π0
.
ö_Êight
));

143 
	}
}

147 
ölöe
 
	$sh™n⁄_∑π_öc_ö_Êight
(
hd_°ru˘
 *
∑π
, 
rw
)

149 
	`©omic_öc
((
©omic_t
 *)(&
∑π
->
ö_Êight
[
rw
]));

150 i‡(
∑π
->
∑πno
)

151 
	`©omic_öc
((
©omic_t
 *)(&
	`∑π_to_disk
(
∑π
)->
∑π0
.
ö_Êight
[
rw
]));

152 
	}
}

154 
ölöe
 
	$sh™n⁄_∑π_dec_ö_Êight
(
hd_°ru˘
 *
∑π
, 
rw
)

156 
	`©omic_dec
((
©omic_t
 *)(&
∑π
->
ö_Êight
[
rw
]));

157 i‡(
∑π
->
∑πno
)

158 
	`©omic_dec
((
©omic_t
 *)(&
	`∑π_to_disk
(
∑π
)->
∑π0
.
ö_Êight
[
rw
]));

159 
	}
}

161 
	$sh™n⁄_disk_ö_Êight
(
sh™n⁄_gídisk_t
 *
gdt
)

163 
gídisk
 *
gd
 = (gídisk *)
gdt
;

165 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 14, 0)

167 #ifde‡
RHEL_RELEASE_CODE


168 #i‡
RHEL_RELEASE_CODE
 >
	`RHEL_RELEASE_VERSION
(7, 6)

169  
	`©omic_ªad
(&
gd
->
∑π0
.
ö_Êight
[0]) +átomic_read(&gd->part0.in_flight[1]);

171  
	`∑π_ö_Êight
(&
gd
->
∑π0
);

174  
	`∑π_ö_Êight
(&
gd
->
∑π0
);

178  
	`©omic_ªad
(&
gd
->
∑π0
.
ö_Êight
[0]) +átomic_read(&gd->part0.in_flight[1]);

180 
	}
}

184 
	$sh™n⁄_°¨t_io_ac˘
(
sh™n⁄_gídisk_t
 *
gdt
, 
sh™n⁄_bio_t
 *
p
)

186 
bio
 *biÿ(biÿ*)
p
;

187 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

188 
˝u
, 
rw
;

189 
gídisk
 *
gd
 = (gídisk *)
gdt
;

190 
hd_°ru˘
 *
∑π
;

192 
rw
 = 
	`sh™n⁄_bio_d©a_dú
(
bio
);

193 
˝u
 = 
	`∑π_°©_lock
();

194 
∑π
 = 
	`disk_m≠_£˘‹_rcu
(
gd
, 
	`gë_bi_£˘‹
(
bio
));

195 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 14, 0)

197 #ifde‡
RHEL_RELEASE_CODE


198 #i‡
RHEL_RELEASE_CODE
 >
	`RHEL_RELEASE_VERSION
(7, 6)

199 
	`∑π_round_°©s
(
gd
->
queue
, 
˝u
, 
∑π
);

201 
	`∑π_round_°©s
(
˝u
, 
∑π
);

204 
	`∑π_round_°©s
(
˝u
, 
∑π
);

208 
	`∑π_round_°©s
(
gd
->
queue
, 
˝u
, 
∑π
);

210 
	`∑π_°©_öc
(
˝u
, 
∑π
, 
ios
[
rw
]);

211 
	`∑π_°©_add
(
˝u
, 
∑π
, 
£˘‹s
[
rw
], 
	`bio_£˘‹s
(
bio
));

212 
	`sh™n⁄_∑π_öc_ö_Êight
(
∑π
, 
rw
);

213 
	`∑π_°©_u∆ock
();

215 
rw
;

216 
gídisk
 *
gd
 = (gídisk *)
gdt
;

218 
rw
 = 
	`sh™n⁄_bio_d©a_dú
(
bio
);

219 
	`¥ìm±_dißbÀ
();

220 
	`disk_round_°©s
(
gd
);

221 
	`disk_°©_öc
(
gd
, 
ios
[
rw
]);

222 
	`disk_°©_add
(
gd
, 
£˘‹s
[
rw
], 
	`bio_£˘‹s
(
bio
));

223 
	`©omic_öc
((
©omic_t
 *)(&
gd
->
ö_Êight
));

224 
	`¥ìm±_íabÀ
();

227 
	}
}

229 
	$sh™n⁄_íd_io_ac˘
(
sh™n⁄_gídisk_t
 *
gdt
, 
sh™n⁄_bio_t
 *
p
, 
duøti⁄
)

231 
bio
 *biÿ(biÿ*)
p
;

232 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

233 
˝u
, 
rw
;

234 
gídisk
 *
gd
 = (gídisk *)
gdt
;

235 
hd_°ru˘
 *
∑π
;

237 
rw
 = 
	`sh™n⁄_bio_d©a_dú
(
bio
);

238 
˝u
 = 
	`∑π_°©_lock
();

239 
∑π
 = 
	`disk_m≠_£˘‹_rcu
(
gd
, 
	`gë_bi_£˘‹
(
bio
));

240 
	`∑π_°©_add
(
˝u
, 
∑π
, 
ticks
[
rw
], 
duøti⁄
);

241 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 14, 0)

243 #ifde‡
RHEL_RELEASE_CODE


244 #i‡
RHEL_RELEASE_CODE
 >
	`RHEL_RELEASE_VERSION
(7, 6)

245 
	`∑π_round_°©s
(
gd
->
queue
, 
˝u
, 
∑π
);

247 
	`∑π_round_°©s
(
˝u
, 
∑π
);

250 
	`∑π_round_°©s
(
˝u
, 
∑π
);

254 
	`∑π_round_°©s
(
gd
->
queue
, 
˝u
, 
∑π
);

256 
	`sh™n⁄_∑π_dec_ö_Êight
(
∑π
, 
rw
);

257 
	`∑π_°©_u∆ock
();

259 
rw
;

260 
gídisk
 *
gd
 = (gídisk *)
gdt
;

262 
rw
 = 
	`sh™n⁄_bio_d©a_dú
(
bio
);

263 
	`¥ìm±_dißbÀ
();

264 
	`disk_°©_add
(
gd
, 
ticks
[
rw
], 
duøti⁄
);

265 
	`disk_round_°©s
(
gd
);

266 
	`©omic_dec
((
©omic_t
 *)(&
gd
->
ö_Êight
));

267 
	`¥ìm±_íabÀ
();

269 
	}
}

271 
	$sh™n⁄_ªad_£˘‹s
(
sh™n⁄_gídisk_t
 *
gdt
)

273 
gídisk
 *
gd
 = (gídisk *)
gdt
;

275 i‡(
gd
 =
NULL
)

278 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

279  
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
£˘‹s
[
READ
]);

281  
	`disk_°©_ªad
(
gd
, 
£˘‹s
[
READ
]);

283 
	}
}

285 
	$sh™n⁄_wrôe_£˘‹s
(
sh™n⁄_gídisk_t
 *
gdt
)

287 
gídisk
 *
gd
 = (gídisk *)
gdt
;

289 i‡(
gd
 =
NULL
)

292 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

293  
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
£˘‹s
[
WRITE
]);

295  
	`disk_°©_ªad
(
gd
, 
£˘‹s
[
WRITE
]);

297 
	}
}

299 
	$sh™n⁄_ªad_ios
(
sh™n⁄_gídisk_t
 *
gdt
)

301 
gídisk
 *
gd
 = (gídisk *)
gdt
;

303 i‡(
gd
 =
NULL
)

306 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

307  
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
ios
[
READ
]);

309  
	`disk_°©_ªad
(
gd
, 
ios
[
READ
]);

311 
	}
}

313 
	$sh™n⁄_wrôe_ios
(
sh™n⁄_gídisk_t
 *
gdt
)

315 
gídisk
 *
gd
 = (gídisk *)
gdt
;

317 i‡(
gd
 =
NULL
)

320 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

321  
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
ios
[
WRITE
]);

323  
	`disk_°©_ªad
(
gd
, 
ios
[
WRITE
]);

325 
	}
}

327 
	$sh™n⁄_ªad_m£cs
(
sh™n⁄_gídisk_t
 *
gdt
)

329 
gídisk
 *
gd
 = (gídisk *)
gdt
;

331 i‡(
gd
 =
NULL
)

334 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

335  
	`jiffõs_to_m£cs
(
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
ticks
[
READ
]));

337  
	`jiffõs_to_m£cs
(
	`disk_°©_ªad
(
gd
, 
ticks
[
READ
]));

339 
	}
}

341 
	$sh™n⁄_wrôe_m£cs
(
sh™n⁄_gídisk_t
 *
gdt
)

343 
gídisk
 *
gd
 = (gídisk *)
gdt
;

345 i‡(
gd
 =
NULL
)

348 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

349  
	`jiffõs_to_m£cs
(
	`∑π_°©_ªad
(&
gd
->
∑π0
, 
ticks
[
WRITE
]));

351  
	`jiffõs_to_m£cs
(
	`disk_°©_ªad
(
gd
, 
ticks
[
WRITE
]));

353 
	}
}

	@shannon_device.h

1 #i‚de‡
__SHANNON_DEVICE_H


2 
	#__SHANNON_DEVICE_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

5 
	~"sh™n⁄_w‹kqueue.h
"

6 
	~"sh™n⁄_block.h
"

7 
	~"sh™n⁄_fûe.h
"

9 
	s__sh™n⁄_cdev
 {

10 
RESERVE_MEM
(256);

12 
__sh™n⁄_cdev
 
	tsh™n⁄_cdev_t
;

14 
	s__sh™n⁄_miscdevi˚
 {

15 
RESERVE_MEM
(256);

17 
__sh™n⁄_miscdevi˚
 
	tsh™n⁄_miscdevi˚_t
;

19 
fûe_›î©i⁄s
 
sh™n⁄_˘æ_cdev_f›s
;

20 
fûe_›î©i⁄s
 
debug_cdev_f›s
;

22 
	sdebug_cdev
 {

23 
	#SCATTER_MEMBLOCK_TYPE
 (0x11)

	)

24 
	#NORMAL_TYPE
 (0x22)

	)

25 
	mty≥
;

26 
	mmö‹
;

27 *
	mbuf
;

28 
	msize
;

29 
sh™n⁄_cdev_t
 
	mcdev
;

32 
	tsh™n⁄_˛ass_t
;

33 
	tsh™n⁄_moduÀ_t
;

35 
	tsh™n⁄_dev_t
;

37 *
sh™n⁄_gë_this_moduÀ
();

38 
sh™n⁄_dev_t
 
SHANNON_MAJOR
(sh™n⁄_dev_à
dev
);

39 
sh™n⁄_dev_t
 
SHANNON_MINOR
(sh™n⁄_dev_à
dev
);

40 
sh™n⁄_dev_t
 
SHANNON_MKDEV
(sh™n⁄_dev_à
ma
, sh™n⁄_dev_à
mi
);

43 
sh™n⁄_devi˚_t
 *
sh™n⁄_devi˚_¸óã
(
sh™n⁄_˛ass_t
 *
˛ass
, sh™n⁄_devi˚_à*
∑ª¡
,

44 
sh™n⁄_dev_t
 
devt
, *
drvd©a
, c⁄° *
fmt
, ...);

45 
sh™n⁄_devi˚_de°roy
(
sh™n⁄_˛ass_t
 *
˛s
, 
sh™n⁄_dev_t
 
devt
);

46 
sh™n⁄_˛ass_t
 *
sh™n⁄_˛ass_¸óã
(
sh™n⁄_moduÀ_t
 *
ow√r
, *
«me
);

47 
sh™n⁄_˛ass_de°roy
(
sh™n⁄_˛ass_t
 *
˛s
);

50 
sh™n⁄_cdev_add
(
sh™n⁄_cdev_t
 *
p
, 
dev_t
 
dev
, 
cou¡
);

51 
sh™n⁄_cdev_dñ
(
sh™n⁄_cdev_t
 *
p
);

52 
sh™n⁄_cdev_öô
(
sh™n⁄_cdev_t
 *
cdev
, c⁄° 
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
);

53 
sh™n⁄_öô_debug_cdev
(
sh™n⁄_cdev_t
 *
cdev
);

54 
sh™n⁄_£t_cdev_ow√r_this_moduÀ
(
sh™n⁄_cdev_t
 *
cdev
);

58 
sh™n⁄_Æloc_chrdev_ªgi⁄
(
dev_t
 *
dev
, 
ba£mö‹
, 
cou¡
, c⁄° *
«me
);

59 
sh™n⁄_uƒegi°î_chrdev_ªgi⁄
(
dev_t
 
‰om
, 
cou¡
);

62 
sh™n⁄_disk_ö_Êight
(
sh™n⁄_gídisk_t
 *
gdt
);

63 
sh™n⁄_°¨t_io_ac˘
(
sh™n⁄_gídisk_t
 *
gdt
, 
sh™n⁄_bio_t
 *
bio
);

64 
sh™n⁄_íd_io_ac˘
(
sh™n⁄_gídisk_t
 *
gdt
, 
sh™n⁄_bio_t
 *
bio
, 
duøti⁄
);

65 
sh™n⁄_ªad_£˘‹s
(
sh™n⁄_gídisk_t
 *
gdt
);

66 
sh™n⁄_wrôe_£˘‹s
(
sh™n⁄_gídisk_t
 *
gdt
);

67 
sh™n⁄_ªad_ios
(
sh™n⁄_gídisk_t
 *
gdt
);

68 
sh™n⁄_wrôe_ios
(
sh™n⁄_gídisk_t
 *
gdt
);

69 
sh™n⁄_ªad_m£cs
(
sh™n⁄_gídisk_t
 *
gdt
);

70 
sh™n⁄_wrôe_m£cs
(
sh™n⁄_gídisk_t
 *
gdt
);

	@shannon_dma.c

1 
	~"sh™n⁄_dma.h
"

2 
	~<löux/dma-m≠pög.h
>

3 
	~<löux/pci.h
>

4 
	~<löux/vîsi⁄.h
>

5 
	~<löux/dñay.h
>

6 
	~<löux/sˇâîli°.h
>

8 #i‡!
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

9 
	$sh™n⁄_dma_£t_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
)

11  
	`dma_£t_mask
(&((
pci_dev
 *)
pdev
)->
dev
, 
mask
);

12 
	}
}

14 
	$sh™n⁄_dma_£t_cohîít_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
)

16 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 34)

18 i‡(!
	`dma_suµ‹ãd
(&((
pci_dev
 *)
pdev
)->
dev
, 
mask
))

19  -
EIO
;

20 ((
pci_dev
 *)
pdev
)->
dev
.
cohîít_dma_mask
 = 
mask
;

25  
	`dma_£t_cohîít_mask
(&((
pci_dev
 *)
pdev
)->
dev
,
mask
);

28 
	}
}

30 * 
	$sh™n⁄_dma_Æloc_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_dma_addr_t
 *
dma_h™dÀ
, 
sh™n⁄_gÂ_t
 
gÂ
)

32  
	`dma_Æloc_cohîít
(&((
pci_dev
 *)
pdev
)->
dev
, 
size
, 
dma_h™dÀ
, 
gÂ
);

33 
	}
}

35 
	$sh™n⁄_dma_‰ì_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, *
vaddr
, 
sh™n⁄_dma_addr_t
 
bus
)

37 
	`dma_‰ì_cohîít
(&((
pci_dev
 *)
pdev
)->
dev
, 
size
, 
vaddr
, 
bus
);

38 
	}
}

41 
	$sh™n⁄_dma_m≠pög_îr‹
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
dma_addr
)

43 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

45  
	`dma_m≠pög_îr‹
(&((
pci_dev
 *)
pdev
)->
dev
, 
dma_addr
);

49  
	`dma_m≠pög_îr‹
(
dma_addr
);

52 
	}
}

55 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
dú
)

57 
sh™n⁄_dma_addr_t
 
dma_h™dÀ
;

61 
dma_h™dÀ
 = 
	`dma_m≠_∑ge
(&((
pci_dev
 *)
pdev
)->
dev
, 
	`sh™n⁄_sg_∑ge
(
sg
), \

62 
	`sh™n⁄_sg_off£t
(
sg
), 
	`sh™n⁄_sg_Àngth
(sg), \

63 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

64 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
pdev
, 
dma_h™dÀ
)) {

65 
	`sh™n⁄_îr
("dma_map_pageÉrror!");

66 
	`udñay
(1);

68 
	`sh™n⁄_sg_£t_dma_addªss
(
sg
, 
dma_h™dÀ
);

73  
dma_h™dÀ
;

74 
	}
}

76 
	$sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
dú
)

78 
	`dma_unm≠_∑ge
(&((
pci_dev
 *)
pdev
)->
dev
, 
	`sh™n⁄_sg_dma_addªss
(
sg
), 
	`sh™n⁄_sg_Àngth
(sg),

79 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

80 
	}
}

82 
	$sh™n⁄_dma_unm≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
, 
dú
)

84 
	`dma_unm≠_sg
(&((
pci_dev
 *)
pdev
)->
dev
, (
sˇâîli°
 *)
sgl
, 
√¡s
, 
dú
);

85 
	}
}

88 
	$sh™n⁄_dma_m≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
, 
dú
)

90  
	`dma_m≠_sg
(&((
pci_dev
 *)
pdev
)->
dev
, (
sˇâîli°
 *)
sgl
, 
√¡s
, 
dú
);

91 
	}
}

93 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_dma_m≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, *
±r
, 
sh™n⁄_size_t
 
size
, 
dú
)

95  
	`dma_m≠_sögÀ
(&((
pci_dev
 *)
pdev
)->
dev
, 
±r
, 
size
, \

96 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

97 
	}
}

99 
	$sh™n⁄_dma_unm≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
addr
, 
sh™n⁄_size_t
 
size
, 
dú
)

101 
	`dma_unm≠_sögÀ
(&((
pci_dev
 *)
pdev
)->
dev
, 
addr
, 
size
, \

102 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

103 
	}
}

105 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_dma_m≠_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, *
±r
, 
sh™n⁄_size_t
 
off£t
, sh™n⁄_size_à
size
, 
dú
)

107  
	`dma_m≠_∑ge
(&((
pci_dev
 *)
pdev
)->
dev
, (
∑ge
 *)
±r
, 
off£t
, 
size
, \

108 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

109 
	}
}

111 
	$sh™n⁄_dma_unm≠_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
addr
, 
sh™n⁄_size_t
 
size
, 
dú
)

113 
	`dma_unm≠_∑ge
(&((
pci_dev
 *)
pdev
)->
dev
, 
addr
, 
size
, \

114 
dú
 =
SHANNON_DMA_FROMDEVICE
 ? 
DMA_FROM_DEVICE
 : 
DMA_TO_DEVICE
);

115 
	}
}

	@shannon_dma.h

1 #i‚de‡
__SHANNON_DMA_H


2 
	#__SHANNON_DMA_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

5 
	~"sh™n⁄_sˇâî.h
"

7 
	#SHANNON_DMA_TODEVICE
 1

	)

8 
	#SHANNON_DMA_FROMDEVICE
 2

	)

10 
	#SHANNON_DMA_BIT_MASK
(
n
Ë((“Ë=64Ë? ~0ULL : ((1ULL<<“))-1))

	)

12 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

14 
	~<löux/pci.h
>

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/dma-m≠pög.h
>

18 
ölöe
 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sgl
, 
dú
)

20  (
sh™n⁄_dma_addr_t
)
	`sh™n⁄_sg_vút
(
sgl
);

21 
	}
}

23 
ölöe
 
	$sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sgl
, 
dú
)

26 
	}
}

28 
ölöe
 
	$sh™n⁄_dma_m≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
, 
dú
)

30 
i
;

32 
i
 = 0; i < 
√¡s
; i++) {

33 
	`sh™n⁄_sg_dma_addªss
(
sgl
Ë(
sh™n⁄_dma_addr_t
)
	`sh™n⁄_sg_vút
(sgl);

34 
sgl
 = 
	`sh™n⁄_sg_√xt
(sgl);

36  
√¡s
;

37 
	}
}

39 
ölöe
 
	$sh™n⁄_dma_unm≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
√¡s
, 
dú
)

42 
	}
}

44 
ölöe
 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_dma_m≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, *
±r
, 
sh™n⁄_size_t
 
size
, 
dú
)

46  (
sh™n⁄_dma_addr_t
)
±r
;

47 
	}
}

49 
ölöe
 
	$sh™n⁄_dma_unm≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
addr
, 
sh™n⁄_size_t
 
size
, 
dú
)

52 
	}
}

54 
ölöe
 
	$sh™n⁄_dma_m≠pög_îr‹
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
dma_addr
)

57 
	}
}

59 
ölöe
 
	$sh™n⁄_dma_£t_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
)

61  
	`dma_£t_mask
(&((
pci_dev
 *)
pdev
)->
dev
, 
mask
);

62 
	}
}

64 
ölöe
 
	$sh™n⁄_dma_£t_cohîít_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
)

66 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 34)

68 i‡(!
	`dma_suµ‹ãd
(&((
pci_dev
 *)
pdev
)->
dev
, 
mask
))

69  -
EIO
;

70 ((
pci_dev
 *)
pdev
)->
dev
.
cohîít_dma_mask
 = 
mask
;

75  
	`dma_£t_cohîít_mask
(&((
pci_dev
 *)
pdev
)->
dev
,
mask
);

78 
	}
}

80 
ölöe
 * 
	$sh™n⁄_dma_Æloc_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_dma_addr_t
 *
dma_h™dÀ
, 
sh™n⁄_gÂ_t
 
gÂ
)

82  
	`dma_Æloc_cohîít
(&((
pci_dev
 *)
pdev
)->
dev
, 
size
, 
dma_h™dÀ
, 
gÂ
);

83 
	}
}

85 
ölöe
 
	$sh™n⁄_dma_‰ì_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, *
vaddr
, 
sh™n⁄_dma_addr_t
 
bus
)

87 
	`dma_‰ì_cohîít
(&((
pci_dev
 *)
pdev
)->
dev
, 
size
, 
vaddr
, 
bus
);

88 
	}
}

92 
sh™n⁄_dma_addr_t
 
sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
dú
);

93 
sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
dú
);

94 
sh™n⁄_dma_m≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
√¡s
, 
dú
);

95 
sh™n⁄_dma_unm≠_sg
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_sg_li°_t
 *
sg
, 
√¡s
, 
dú
);

96 
sh™n⁄_dma_addr_t
 
sh™n⁄_dma_m≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, *
±r
, 
sh™n⁄_size_t
 
size
, 
dú
);

97 
sh™n⁄_dma_unm≠_sögÀ
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
addr
, 
sh™n⁄_size_t
 
size
, 
dú
);

98 
sh™n⁄_dma_m≠pög_îr‹
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
dma_addr
);

100 
sh™n⁄_dma_£t_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
);

101 
sh™n⁄_dma_£t_cohîít_mask
(
sh™n⁄_pci_dev_t
 *
pdev
, 
u64
 
mask
);

102 * 
sh™n⁄_dma_Æloc_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_dma_addr_t
 *
dma_h™dÀ
, 
gÂ_t
 
gÂ
);

103 
sh™n⁄_dma_‰ì_cohîít
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_size_t
 
size
, *
vaddr
, 
sh™n⁄_dma_addr_t
 
bus
);

104 
sh™n⁄_dma_addr_t
 
sh™n⁄_dma_m≠_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, *
±r
, 
sh™n⁄_size_t
 
off£t
, sh™n⁄_size_à
size
, 
dú
);

105 
sh™n⁄_dma_unm≠_∑ge
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dma_addr_t
 
addr
, 
sh™n⁄_size_t
 
size
, 
dú
);

	@shannon_dna.c

2 
__u64
 
	gÁ˘‹
[16] = {

21 
	#RANDOM_COUNT
 4

	)

22 
__u64
 
	$codög
(
__u64
 
‹ig
)

24 
__u64
 
vÆue
;

25 
i
, 
ödex
, 
sum
;

26 
øndom
[
RANDOM_COUNT
] = {

33 
i
 = 0;

34 
vÆue
 = 0;

35 
sum
 = 0;

37 
ödex
 = 
‹ig
 & 0xf;

38 
sum
 +
ödex
;

39 
vÆue
 +
Á˘‹
[
ödex
] + fa˘‹[
i
];

40 
vÆue
 = vÆuê* (
sum
 + 
i
);

41 
vÆue
 +
øndom
[
ödex
 % 
RANDOM_COUNT
];

42 
vÆue
 +
Á˘‹
[
sum
 % 16];

43 
‹ig
 >>= 4;

44 
i
++;

45 } 
i
 < 16);

47  
vÆue
;

48 
	}
}

50 
	#SF1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

51 
	#SF2
(
x
, 
y
, 
z
Ë
	`SF1
(z, x, y)

	)

52 
	#SF3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

53 
	#SF4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

55 
	#SHANNON_STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

56 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(16-s)Ë+ x)

	)

58 
	$sh™n⁄_å™sf‹m
(
__u16
 *
hash
, __u16 c⁄° *
ö
)

60 
__u16
 
a
, 
b
, 
c
, 
d
;

62 
a
 = 
hash
[0];

63 
b
 = 
hash
[1];

64 
c
 = 
hash
[2];

65 
d
 = 
hash
[3];

67 
	`SHANNON_STEP
(
SF1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76a, 7);

68 
	`SHANNON_STEP
(
SF1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7, 12);

69 
	`SHANNON_STEP
(
SF1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2420, 9);

70 
	`SHANNON_STEP
(
SF1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bd, 2);

72 
	`SHANNON_STEP
(
SF2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e, 5);

73 
	`SHANNON_STEP
(
SF2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6, 10);

74 
	`SHANNON_STEP
(
SF2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d5, 14);

75 
	`SHANNON_STEP
(
SF2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcef, 9);

77 
	`SHANNON_STEP
(
SF3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac, 13);

78 
	`SHANNON_STEP
(
SF3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4be, 4);

79 
	`SHANNON_STEP
(
SF3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef, 6);

80 
	`SHANNON_STEP
(
SF3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xe3a1, 11);

82 
	`SHANNON_STEP
(
SF4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0c, 10);

83 
	`SHANNON_STEP
(
SF4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7, 7);

84 
	`SHANNON_STEP
(
SF4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf429, 6);

85 
	`SHANNON_STEP
(
SF4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x8584, 8);

87 
hash
[0] +
a
;

88 
hash
[1] +
b
;

89 
hash
[2] +
c
;

90 
hash
[3] +
d
;

91 
	}
}

93 
__u64
 
	$sh™n⁄_ícode
(
__u64
 
‹ig
)

96 
__u64
 
vÆue
;

97 
__u16
 
¨øy
[4];

98 } 
hash
, 
£¸ë
;

101 
hash
.
vÆue
 = 
	`codög
(
‹ig
);

102 
£¸ë
.
vÆue
 = 
‹ig
;

103 
	`sh™n⁄_å™sf‹m
(
hash
.
¨øy
, 
£¸ë
.array);

104  
hash
.
vÆue
;

105 
	}
}

	@shannon_emu.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/moduÀ∑øm.h
>

4 
	~<löux/mm.h
>

5 
	~<löux/fs.h
>

6 
	~<löux/¶ab.h
>

7 
	~<löux/cdev.h
>

8 
	~<löux/ty≥s.h
>

9 
	~<löux/vîsi⁄.h
>

10 
	~<asm/uac˚ss.h
>

11 
	~<löux/dñay.h
>

12 
	~<asm/bô›s.h
>

14 
	~"sh™n⁄_emu.h
"

17 
	gemu_lun_amou¡
 = 16;

18 
	gemu_eblocks_ö_lun
 = 512;

19 
	gemu_∑ges_ö_eblock
 = 8;

20 
	gemu_«nd_∑ge_shi·
 = 13;

21 
	gemu_oob_size
 = 448;

22 
	gemu_∂™e_‹dî
 = 1;

23 
	gemu_logicb_shi·
 = 12;

24 
	gemu_ecc_codew‹ds_ö_logicb
 = 8;

27 
	gemu_ch™√ls
 = 16;

28 
	gemu_lun£t_ö_ch™√l
 = 1;

29 
	gemu_lun_ö_lun£t
 = 1;

30 
	gemu_øid_°rùes
 = 2;

32 
EXPORT_SYMBOL
(
emu_lun_amou¡
);

33 
EXPORT_SYMBOL
(
emu_eblocks_ö_lun
);

34 
EXPORT_SYMBOL
(
emu_∑ges_ö_eblock
);

35 
EXPORT_SYMBOL
(
emu_«nd_∑ge_shi·
);

36 
EXPORT_SYMBOL
(
emu_oob_size
);

37 
EXPORT_SYMBOL
(
emu_∂™e_‹dî
);

38 
EXPORT_SYMBOL
(
emu_logicb_shi·
);

39 
EXPORT_SYMBOL
(
emu_ch™√ls
);

41 
sh™n⁄_emu_lun
 *
	gemu_luns
;

42 
EXPORT_SYMBOL
(
emu_luns
);

44 
	#WRITE_ERR
 0x01;

	)

45 
	gøndom_rd_øã
 = 0;

46 
	g≥rm™ít_rd_îr_øã
 = 0;

47 
	gøndom_wr_øã
 = 0;

49 
u8
 
	$emu_¥e_ªad
(
sh™n⁄_emu_lun
 *
lun
, 
logicb_t
 
µa
)

52 
	}
}

55 
u8
 
	$emu_ˇche_ªad
(
sh™n⁄_emu_lun
 *
lun
, 
logicb_t
 
lun_pba
, 
sh™n⁄_ªque°
 *
ªq
)

57 
ønd
;

58 *
µa_buf
;

59 
logicb_t
 
∑ge
 = 
ªq
->
pba
.
lun_pba
/
lun
->
logicbs_ö_∑ge
;

60 
eblk
 = 
∑ge
/
emu_∑ges_ö_eblock
;

61 
fú°_size
, 
œ°_size
;

63 i‡(
lun
->
bbt
[
eblk
/32] & (1<<(eblk%32))) {

64 
ªq
->
emu_mëad©a
 = 
INVALID_LBA
;

68 i‡((
lun
->
wr_Êags
[
∑ge
/32] & (1<<(page%32))) == 0) {

69 
ªq
->
emu_mëad©a
 = 
INVALID_LBA
;

70  
SH_FRESH_ERASED
;

73 i‡(
øndom_rd_øã
) {

74 
ønd
 = 
	`¥™dom32
(&
lun
->
ªad_ønd_°©e
);

75 i‡((
ønd
%
øndom_rd_øã
) == 0)

79 i‡(
≥rm™ít_rd_îr_øã
) {

80 
ønd
 = 
	`¥™dom32
(&
lun
->
ªad_ønd_°©e
);

81 i‡((
ønd
 % 
≥rm™ít_rd_îr_øã
) == 0) {

82 
	`sh™n⁄_öfo
("%s(): sëÉblk %dÅÿbad block.\n", 
__func__
, 
eblk
);

83 
lun
->
bbt
[
eblk
/32] |= 1 << (eblk%32);

88 
µa_buf
 = 
lun
->
emu_buf„r
 + 
∑ge
 * (1 << 
emu_«nd_∑ge_shi·
);

91 i‡(
ªq
->
dma_addªss_2
) {

92 
œ°_size
 = ()
ªq
->
vút_addr
 & (
lun
->
logicb_size
 - 1);

93 
fú°_size
 = 
lun
->
logicb_size
 - 
œ°_size
;

94 
	`BUG_ON
(
œ°_size
 == 0);

95 
	`BUG_ON
(
fú°_size
 == 0);

96 
	`mem˝y
(
ªq
->
vút_addr
, 
µa_buf
 + (ªq->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
, 
fú°_size
);

97 
	`mem˝y
(
ªq
->
vút_addr_2
, 
µa_buf
 + (ªq->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
 + 
fú°_size
, 
œ°_size
);

99 
	`mem˝y
(
ªq
->
vút_addr
, 
µa_buf
 + (ªq->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
,Üun->logicb_size);

100 
ªq
->
emu_mëad©a
 = 
lun
->
mëa_buf„r
[ªq->
pba
.
lun_pba
];

101 
	`BUG_ON
(!
	`lba_is_övÆid
(
ªq
->
lba
Ë&& ((
logicb_t
Ïeq->
emu_mëad©a
 !=Ñeq->lba));

104 
	}
}

106 
u8
 
	$emu_wrôe
(
sh™n⁄_emu_lun
 *
lun
, 
logicb_t
 
µa
, 
sh™n⁄_li°_hód
 *
ªq_li°
)

108 
ønd
;

109 
sh™n⁄_ªque°
 *
ªq
;

110 
i
, 
eblk
;

111 *
µa_buf
;

112 
fú°_size
, 
œ°_size
;

114 i‡(
lun
->
wr_Êags
[
µa
/32] & (1<<(ppa%32))) {

115 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, 
ªq_li°
, 
li°
) {

116 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d,Üun_pba=%d,Åag=0x%lx.\n",

117 
__func__
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
èg
);

119 
	`sh™n⁄_öfo
("%s(): wr_Êags[%d] = 0x%x.\n", 
__func__
, 
µa
/32, 
lun
->
wr_Êags
[ppa/32]);

120 
	`sh™n⁄_öfo
("%s(): ovîwrôê∑gê%d!\n", 
__func__
, 
µa
);

121 
	`asm
(" int $3");

125 
eblk
 = 
µa
/
emu_∑ges_ö_eblock
;

126 i‡(
lun
->
bbt
[
eblk
/32] & (1<<(eblk%32))) {

127  
WRITE_ERR
;

130 i‡(
øndom_wr_øã
) {

131 
ønd
 = 
	`¥™dom32
(&
lun
->
wrôe_ønd_°©e
);

132 i‡(
ønd
%
øndom_wr_øã
 == 0) {

133 
	`sh™n⁄_öfo
("%s(): sëÉblk %dÅÿbad block.\n", 
__func__
, 
eblk
);

134 
lun
->
bbt
[
eblk
/32] |= 1 << (eblk%32);

135  
WRITE_ERR
;

139 
µa_buf
 = 
lun
->
emu_buf„r
 + 
µa
 * (1 << 
emu_«nd_∑ge_shi·
);

140 
i
 = 0;

141 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, 
ªq_li°
, 
li°
) {

142 i‡(!
ªq
 || !ªq->
vút_addr
) {

143 
	`sh™n⁄_w¨nög
("req is NULL!!! ---------------------\n");

144 
	`BUG
();

146 i‡(
ªq
->
pba
.
lun_pba
 !(
µa
 * 
lun
->
logicbs_ö_∑ge
 + 
i
)) {

147 
	`sh™n⁄_öfo
("%s():Ö∑=%d,Üun_pba=%d, i=%d.\n", 
__func__
, 
µa
, 
ªq
->
pba
.
lun_pba
, 
i
);

148 
	`sh™n⁄_öfo
("%s(): Wr⁄gÜun_pba!\n", 
__func__
);

149 
	`asm
(" int $3");

152 
ønd
 = 
	`¥™dom32
(&
lun
->
wrôe_ønd_°©e
);

153 
	`udñay
(
ønd
 % 20);

154 i‡(
ªq
->
dma_addªss_2
) {

155 
œ°_size
 = ()
ªq
->
vút_addr
 & (
lun
->
logicb_size
 - 1);

156 
fú°_size
 = 
lun
->
logicb_size
 - 
œ°_size
;

157 
	`BUG_ON
(
œ°_size
 == 0);

158 
	`BUG_ON
(
fú°_size
 == 0);

159 
	`mem˝y
(
µa_buf
 + (
ªq
->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
,Ñeq->
vút_addr
, 
fú°_size
);

160 
	`mem˝y
(
µa_buf
 + (
ªq
->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
 + 
fú°_size
,Ñeq->
vút_addr_2
, 
œ°_size
);

162 
	`mem˝y
(
µa_buf
 + (
ªq
->
pba
.
lun_pba
 % 
lun
->
logicbs_ö_∑ge
Ë*Üun->
logicb_size
,Ñeq->
vút_addr
,Üun->logicb_size);

163 
lun
->
mëa_buf„r
[
ªq
->
pba
.
lun_pba
] =Ñeq->
emu_mëad©a
;

164 
	`BUG_ON
(
ªq
->
emu_mëad©a
 !ªq->
lba
);

165 
i
++;

167 
	`£t_bô
(
µa
 % 32, 
lun
->
wr_Êags
 +Öpa/32);

170 
	}
}

172 
u8
 
	$bufq_emu_wrôe
(
sh™n⁄_emu_lun
 *
lun
, 
logicb_t
 
µa
, *
§c
, *
mëad©a
)

174 *
µa_buf
;

175 
ønd
;

176 
eblk
;

178 i‡(
lun
->
wr_Êags
[
µa
/32] & (1<<(ppa%32))) {

179 
	`sh™n⁄_öfo
("%s(): wr_Êags[%d] = 0x%x.\n", 
__func__
, 
µa
/32, 
lun
->
wr_Êags
[ppa/32]);

180 
	`sh™n⁄_öfo
("%s(): ovîwrôê∑gê%d!\n", 
__func__
, 
µa
);

181 
	`asm
(" int $3");

185 
eblk
 = 
µa
/
emu_∑ges_ö_eblock
;

186 i‡(
lun
->
bbt
[
eblk
/32] & (1<<(eblk%32))) {

187  
WRITE_ERR
;

190 i‡(
øndom_wr_øã
) {

191 
ønd
 = 
	`¥™dom32
(&
lun
->
wrôe_ønd_°©e
);

192 i‡((
ønd
 % 
øndom_wr_øã
) == 0) {

193 
	`sh™n⁄_öfo
("%s(): sëÉblk %dÅÿbad block.\n", 
__func__
, 
eblk
);

194 
lun
->
bbt
[
eblk
/32] |= 1 << (eblk%32);

195  
WRITE_ERR
;

199 
µa_buf
 = 
lun
->
emu_buf„r
 + 
µa
 * (1 << 
emu_«nd_∑ge_shi·
);

200 
	`mem˝y
(
µa_buf
, 
§c
, 
lun
->
logicb_size
 *Üun->
logicbs_ö_∑ge
);

201 
	`mem˝y
(
lun
->
mëa_buf„r
 + 
µa
 *Üun->
logicbs_ö_∑ge
, 
mëad©a
,Üun->logicbs_ö_∑gê* (
u64
));

203 
	`£t_bô
(
µa
 % 32, 
lun
->
wr_Êags
 +Öpa/32);

206 
	}
}

208 
u8
 
	$emu_îa£
(
sh™n⁄_emu_lun
 *
lun
, 
eblk
)

210 
eblk_Êags_Àn
 = 
emu_∑ges_ö_eblock
/8;

211 
eblk_size
 = (1 << 
emu_«nd_∑ge_shi·
Ë* 
emu_∑ges_ö_eblock
;

213 i‡(
lun
->
bbt
[
eblk
/32] & (1<<(eblk%32))) {

217 
	`mem£t
(
lun
->
emu_buf„r
 + 
eblk
 * 
eblk_size
, 0,Éblk_size);

218 
	`mem£t
((*)
lun
->
wr_Êags
 + 
eblk_Êags_Àn
*
eblk
, 0,Éblk_flags_len);

220 
	}
}

222 
u16
 
	g°©ic_bbt
[][50] = {

242 
u16
 
	gdy«mic_bbt
[][30] = {

261 
emu_buf_cdev_öô
();

262 
emu_buf_cdev_ªÀa£
();

263 
mëad©a_cdev_öô
();

264 
mëad©a_cdev_ªÀa£
();

265 
lun_bbt_cdev_öô
();

266 
lun_bbt_cdev_ªÀa£
();

268 
	$sh™n⁄_emu_öô
()

270 
i
, 
j
, 
eblk
, 
emu_lun_size
, 
mëa_buf_Àn
, 
wr_Êags_Àn
, 
bbt_Àn
, 
ªt
 = 0;

271 
emu_«nd_∑ge_size
 = 1<<
emu_«nd_∑ge_shi·
;

272 
sh™n⁄_mbr
 
mbr
;

274 
	`mem£t
(&
mbr
, 0, (mbr));

275 
mbr
.
lun_amou¡
 = 
emu_lun_amou¡
;

276 
mbr
.
eblocks_ö_lun
 = 
emu_eblocks_ö_lun
;

277 
mbr
.
∑ges_ö_eblock
 = 
emu_∑ges_ö_eblock
;

278 
mbr
.
«nd_∑ge_shi·
 = 
emu_«nd_∑ge_shi·
;

279 
mbr
.
oob_size
 = 
emu_oob_size
;

280 
mbr
.
logicb_shi·
 = 
emu_logicb_shi·
;

281 
mbr
.
u£r_logicb_shi·
 = 9;

282 
mbr
.
∂™e_‹dî
 = 
emu_∂™e_‹dî
;

283 
mbr
.
cfg_ch™√ls
 = 
emu_ch™√ls
;

284 
mbr
.
cfg_lun£t_ö_ch™√l
 = 
emu_lun£t_ö_ch™√l
;

285 
mbr
.
cfg_lun_ö_lun£t
 = 
emu_lun_ö_lun£t
;

289 
mbr
.
öãºu±_dñay
 = 1;

290 
mbr
.
ˇ∑côy
 = ((
emu_lun_amou¡
 * 
emu_eblocks_ö_lun
 * 
emu_∑ges_ö_eblock
 * 50Ë<< (
emu_«nd_∑ge_shi·
 - 9)) / 100;

291 
mbr
.
ˇ∑côy
 = mbr.capacity & ~0x3ff;

292 
mbr
.
ecc_codew‹ds_ö_logicb
 = 
emu_ecc_codew‹ds_ö_logicb
;

293 
mbr
.
ecc_c‹ª˘i⁄_powî
 = 16;

294 
mbr
.
öô_hŸ_sblk
 = 2;

295 
mbr
.
öô_cﬁd_sblk
 = 3;

296 
mbr
.
hi°‹y_îa£_cou¡
 = 0;

297 
mbr
.
øid_°rùes
 = 
emu_øid_°rùes
;

299 
emu_lun_size
 = 
	`PAGE_ALIGN
(
emu_eblocks_ö_lun
 * 
emu_∑ges_ö_eblock
 * (
emu_«nd_∑ge_size
 + 
emu_oob_size
));

300 
mëa_buf_Àn
 = 
	`PAGE_ALIGN
(8 * 
MAX_LOGICBS_IN_PAGE
 * 
emu_∑ges_ö_eblock
 * 
emu_eblocks_ö_lun
);

301 
wr_Êags_Àn
 = (
emu_∑ges_ö_eblock
 * 
emu_eblocks_ö_lun
 + 8)/8;

302 
bbt_Àn
 = (
emu_eblocks_ö_lun
 + 8)/8;

304 
emu_luns
 = 
	`kmÆloc
((*emu_lunsË* 
emu_lun_amou¡
, 
GFP_SHANNON
);

305 
	`sh™n⁄_öfo
("%s():Ému_luns=0x%lx.\n", 
__func__
, ()
emu_luns
);

306 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

307 
	`sh™n⁄_öfo
("%s(): &emu_lun[%d]=0x%lx.\n", 
__func__
, 
i
, ()&
emu_luns
[i]);

308 
	`¥™dom32_£ed
(&
emu_luns
[
i
].
ªad_ønd_°©e
, 100 + 2 * i);

309 
	`¥™dom32_£ed
(&
emu_luns
[
i
].
wrôe_ønd_°©e
, 101 + 2 * i);

310 
emu_luns
[
i
].
lun_num
 = i;

311 
emu_luns
[
i
].
max_ch™√ls
 = 
emu_ch™√ls
;

312 
emu_luns
[
i
].
max_lun£t_ö_ch™√l
 = 
emu_lun£t_ö_ch™√l
;

313 
emu_luns
[
i
].
hw_lun_ö_lun£t
 = 
emu_lun_ö_lun£t
;

314 
emu_luns
[
i
].
logicb_size
 = 1 << 
MBR_LOGICB_SHIFT
;

315 
emu_luns
[
i
].
logicbs_ö_∑ge
 = 1;

316 
emu_luns
[
i
].
¥e_ªad
 = 
emu_¥e_ªad
;

317 
emu_luns
[
i
].
ˇche_ªad
 = 
emu_ˇche_ªad
;

318 
emu_luns
[
i
].
wrôe
 = 
emu_wrôe
;

319 
emu_luns
[
i
].
bufq_wrôe
 = 
bufq_emu_wrôe
;

320 
emu_luns
[
i
].
îa£
 = 
emu_îa£
;

321 
emu_luns
[
i
].
emu_buf„r
 = 
	`vmÆloc
(
emu_lun_size
);

322 i‡(
emu_luns
[
i
].
emu_buf„r
 =
NULL
) {

323 
	`sh™n⁄_îr
("cannotállocateÉnough memory forÉmu_buffer.\n");

324 
ªt
 = -
ENOMEM
;

326 
	`mem£t
(
emu_luns
[
i
].
emu_buf„r
, 0, 
emu_lun_size
);

327 
emu_luns
[
i
].
mëa_buf„r
 = 
	`vmÆloc
(
mëa_buf_Àn
);

328 
	`mem£t
((*)
emu_luns
[
i
].
mëa_buf„r
, 0xì, 
mëa_buf_Àn
);

330 
emu_luns
[
i
].
wr_Êags
 = (
u32
 *)
	`kzÆloc
(
wr_Êags_Àn
, 
GFP_SHANNON
);

331 
emu_luns
[
i
].
bbt
 = (
u32
 *)
	`kzÆloc
(
bbt_Àn
, 
GFP_SHANNON
);

334 
emu_luns
[
i
].
wr_Êags
[0/32] |= 1<<(0%32);

335 
	`mem˝y
(
emu_luns
[
i
].
emu_buf„r
, &
mbr
, (
sh™n⁄_mbr
));

336 
emu_luns
[
i
].
mëa_buf„r
[0] = 
MBR_WATERMARK
;

339 
emu_luns
[
i
].
wr_Êags
[1/32] |= 1<<(1%32);

342 
j
 = 0;

343 
eblk
 = 
°©ic_bbt
[
i
][
j
];

344 
eblk
 != 0xFFFF) {

346 *((
u16
 *)(
emu_luns
[
i
].
emu_buf„r
 + 
emu_«nd_∑ge_size
Ë+ 
j
Ë
eblk
;

348 
emu_luns
[
i
].
bbt
[
eblk
/32] |= 1 << (eblk%32);

349 
j
++;

350 
eblk
 = 
°©ic_bbt
[
i
][
j
];

352 *((
u16
 *)(
emu_luns
[
i
].
emu_buf„r
 + 
emu_«nd_∑ge_size
Ë+ 
j
) = 0xFFFF;

355 
j
 = 0;

356 
eblk
 = 
dy«mic_bbt
[
i
][
j
];

357 
eblk
 != 0xFFFF) {

359 *(
u16
 *)(
emu_luns
[
i
].
emu_buf„r
 + (2 + 
j
Ë* 
emu_«nd_∑ge_size
Ë
eblk
;

361 
emu_luns
[
i
].
bbt
[
eblk
/32] |= 1 << (eblk%32);

363 
emu_luns
[
i
].
wr_Êags
[(2 + 
j
)/32] |= 1<<((2 + j)%32);

364 
j
++;

365 
eblk
 = 
dy«mic_bbt
[
i
][
j
];

369 
	`emu_buf_cdev_öô
(
emu_lun_size
);

370 
	`mëad©a_cdev_öô
(
mëa_buf_Àn
);

371 
	`lun_bbt_cdev_öô
(
bbt_Àn
);

373  
ªt
;

374 
	}
}

376 
	$sh™n⁄_emu_exô
()

378 
i
;

380 
i
 = 0; i < 
emu_lun_amou¡
; i++)

381 
	`v‰ì
(
emu_luns
[
i
].
emu_buf„r
);

382 
	`k‰ì
(
emu_luns
);

384 
	`emu_buf_cdev_ªÀa£
();

385 
	`mëad©a_cdev_ªÀa£
();

386 
	`lun_bbt_cdev_ªÀa£
();

387 
	}
}

389 
moduÀ_öô
(
sh™n⁄_emu_öô
);

390 
moduÀ_exô
(
sh™n⁄_emu_exô
);

392 
dev_t
 
	gemu_buf_dev_num
;

393 
	gemu_buf_maj‹
;

394 
˛ass
 *
	gemu_buf_˛ass
;

395 
debug_cdev
 *
	gemu_buf_cdevs
;

397 
	$emu_buf_cdev_öô
(
emu_lun_size
)

399 
i
;

400 
dev_t
 
devno
;

402 i‡(
	`Æloc_chrdev_ªgi⁄
(&
emu_buf_dev_num
, 0, 
emu_lun_amou¡
, "emu_buf") < 0) {

403 
	`sh™n⁄_îr
("Can'tÑegister deviceÉmu_buf.\n");

406 
emu_buf_maj‹
 = 
	`MAJOR
(
emu_buf_dev_num
);

407 
emu_buf_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "emu_buf");

408 
emu_buf_cdevs
 = 
	`kmÆloc
((*emu_buf_cdevsË* 
emu_lun_amou¡
, 
GFP_SHANNON
);

409 
i
=0; i<
emu_lun_amou¡
; i++) {

410 
emu_buf_cdevs
[
i
].
mö‹
 = i;

411 
emu_buf_cdevs
[
i
].
buf
 = 
emu_luns
[i].
emu_buf„r
;

412 
emu_buf_cdevs
[
i
].
size
 = 
emu_lun_size
;

414 
	`cdev_öô
((
cdev
 *)(&
emu_buf_cdevs
[
i
].cdev), &
debug_cdev_f›s
);

415 ((
cdev
 *)(&
emu_buf_cdevs
[
i
].cdev))->
ow√r
 = 
THIS_MODULE
;

417 
devno
 = 
	`MKDEV
(
emu_buf_maj‹
, 
i
);

418 i‡(
	`cdev_add
((
cdev
 *)(&
emu_buf_cdevs
[
i
].cdev), 
devno
, 1)) {

419 
	`sh™n⁄_îr
("cdev_add Error.\n");

420 
	`BUG
();

422 
	`devi˚_¸óã
(
emu_buf_˛ass
, 
NULL
, 
devno
, NULL, "emu_buf%d", 
i
);

425 
	}
}

427 
	$emu_buf_cdev_ªÀa£
()

429 
i
;

430 
dev_t
 
devno
;

432 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

433 
	`cdev_dñ
((
cdev
 *)(&
emu_buf_cdevs
[
i
].cdev));

434 
devno
 = 
	`MKDEV
(
emu_buf_maj‹
, 
i
);

435 
	`devi˚_de°roy
(
emu_buf_˛ass
, 
devno
);

437 
	`uƒegi°î_chrdev_ªgi⁄
(
emu_buf_dev_num
, 
emu_lun_amou¡
);

438 
	`˛ass_de°roy
(
emu_buf_˛ass
);

439 
	`k‰ì
(
emu_buf_cdevs
);

440 
	}
}

442 
dev_t
 
	gmëa_dev_num
;

443 
	gmëa_maj‹
;

444 
˛ass
 *
	gmëa_˛ass
;

445 
debug_cdev
 *
	gmëa_cdevs
;

447 
	$mëad©a_cdev_öô
(
mëa_buf_Àn
)

449 
i
;

450 
dev_t
 
devno
;

452 i‡(
	`Æloc_chrdev_ªgi⁄
(&
mëa_dev_num
, 0, 
emu_lun_amou¡
, "meta") < 0) {

453 
	`sh™n⁄_îr
("Can'tÑegister device metadata.\n");

456 
mëa_maj‹
 = 
	`MAJOR
(
mëa_dev_num
);

457 
mëa_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "meta");

458 
mëa_cdevs
 = 
	`kmÆloc
((*mëa_cdevsË* 
emu_lun_amou¡
, 
GFP_SHANNON
);

459 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

460 
mëa_cdevs
[
i
].
mö‹
 = i;

461 
mëa_cdevs
[
i
].
buf
 = (*)
emu_luns
[i].
mëa_buf„r
;

462 
mëa_cdevs
[
i
].
size
 = 
mëa_buf_Àn
;

464 
	`cdev_öô
(((
cdev
 *)(&
mëa_cdevs
[
i
].cdev)), &
debug_cdev_f›s
);

465 ((
cdev
 *)(&
mëa_cdevs
[
i
].cdev))->
ow√r
 = 
THIS_MODULE
;

467 
devno
 = 
	`MKDEV
(
mëa_maj‹
, 
i
);

468 i‡(
	`cdev_add
((
cdev
 *)(&
mëa_cdevs
[
i
].cdev), 
devno
, 1)) {

469 
	`sh™n⁄_îr
("cdev_add Error.\n");

470 
	`BUG
();

472 
	`devi˚_¸óã
(
mëa_˛ass
, 
NULL
, 
devno
, NULL, "mëa%d", 
i
);

475 
	}
}

477 
	$mëad©a_cdev_ªÀa£
()

479 
i
;

480 
dev_t
 
devno
;

482 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

483 
	`cdev_dñ
((
cdev
 *)(&
mëa_cdevs
[
i
].cdev));

484 
devno
 = 
	`MKDEV
(
mëa_maj‹
, 
i
);

485 
	`devi˚_de°roy
(
mëa_˛ass
, 
devno
);

487 
	`uƒegi°î_chrdev_ªgi⁄
(
mëa_dev_num
, 
emu_lun_amou¡
);

488 
	`˛ass_de°roy
(
mëa_˛ass
);

489 
	`k‰ì
(
mëa_cdevs
);

490 
	}
}

492 
dev_t
 
	glun_bbt_dev_num
;

493 
	glun_bbt_maj‹
;

494 
˛ass
 *
	glun_bbt_˛ass
;

495 
debug_cdev
 *
	glun_bbt_cdevs
;

497 
	$lun_bbt_cdev_öô
(
lun_bbt_size
)

499 
i
;

500 
dev_t
 
devno
;

502 i‡(
	`Æloc_chrdev_ªgi⁄
(&
lun_bbt_dev_num
, 0, 
emu_lun_amou¡
, "lun_bbt") < 0) {

503 
	`sh™n⁄_îr
(
KERN_ERR
 "Can'tÑegister deviceÜun_bbt.\n");

506 
lun_bbt_maj‹
 = 
	`MAJOR
(
lun_bbt_dev_num
);

507 
lun_bbt_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "lun_bbt");

508 
lun_bbt_cdevs
 = 
	`kmÆloc
((*lun_bbt_cdevsË* 
emu_lun_amou¡
, 
GFP_SHANNON
);

509 
i
=0; i<
emu_lun_amou¡
; i++) {

510 
lun_bbt_cdevs
[
i
].
mö‹
 = i;

511 
lun_bbt_cdevs
[
i
].
buf
 = (*)
emu_luns
[i].
bbt
;

512 
lun_bbt_cdevs
[
i
].
size
 = 
lun_bbt_size
;

514 
	`cdev_öô
((
cdev
 *)(&
lun_bbt_cdevs
[
i
].cdev), &
debug_cdev_f›s
);

515 ((
cdev
 *)(&
lun_bbt_cdevs
[
i
].cdev))->
ow√r
 = 
THIS_MODULE
;

517 
devno
 = 
	`MKDEV
(
lun_bbt_maj‹
, 
i
);

518 i‡(
	`cdev_add
((
cdev
 *)(&
lun_bbt_cdevs
[
i
].cdev), 
devno
, 1)) {

519 
	`sh™n⁄_îr
("cdev_add Error.\n");

520 
	`BUG
();

522 
	`devi˚_¸óã
(
lun_bbt_˛ass
, 
NULL
, 
devno
, NULL, "lun_bbt%d", 
i
);

525 
	}
}

527 
	$lun_bbt_cdev_ªÀa£
()

529 
i
;

530 
dev_t
 
devno
;

532 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

533 
	`cdev_dñ
((
cdev
 *)(&
lun_bbt_cdevs
[
i
].cdev));

534 
devno
 = 
	`MKDEV
(
lun_bbt_maj‹
, 
i
);

535 
	`devi˚_de°roy
(
lun_bbt_˛ass
, 
devno
);

537 
	`uƒegi°î_chrdev_ªgi⁄
(
lun_bbt_dev_num
, 
emu_lun_amou¡
);

538 
	`˛ass_de°roy
(
lun_bbt_˛ass
);

539 
	`k‰ì
(
lun_bbt_cdevs
);

540 
	}
}

542 
MODULE_LICENSE
("GPL");

	@shannon_emu.h

1 #i‚de‡
__SHANNON_EMU_H


2 
	#__SHANNON_EMU_H


	)

4 
	~<löux/øndom.h
>

5 
	~"sh™n⁄.h
"

7 
	ssh™n⁄_emu_lun
 {

8 
	mlun_num
;

9 
	mlogiˇl_lun
;

10 
	mmax_ch™√ls
;

11 
	mmax_lun£t_ö_ch™√l
;

12 
	mhw_lun_ö_lun£t
;

13 *
	memu_buf„r
;

14 
u64
 *
	mmëa_buf„r
;

15 
u32
 *
	mwr_Êags
;

16 
u32
 *
	mbbt
;

17 
∫d_°©e
 
	mªad_ønd_°©e
;

18 
∫d_°©e
 
	mwrôe_ønd_°©e
;

20 
	mlogicb_size
;

21 
	mlogicbs_ö_∑ge
;

22 
	mlogicb_shi·
;

23 
u8
 (*
¥e_ªad
Ë(
	msh™n⁄_emu_lun
 *, 
	mlogicb_t
);

24 
u8
 (*
ˇche_ªad
Ë(
	msh™n⁄_emu_lun
 *, 
	mlogicb_t
, 
	msh™n⁄_ªque°
 *);

25 
u8
 (*
wrôe
Ë(
	msh™n⁄_emu_lun
 *, 
	mlogicb_t
, 
	msh™n⁄_li°_hód
 *);

26 
u8
 (*
bufq_wrôe
Ë(
sh™n⁄_emu_lun
 *
	mlun
, 
logicb_t
 
	mµa
, *
	m§c
, *
	mmëad©a
);

27 
u8
 (*
îa£
Ë(
	msh™n⁄_emu_lun
 *, );

	@shannon_epilog.c

12 
	~"sh™n⁄.h
"

14 
	#METADATA_ARRAY_SIZE
 (64)

	)

15 
	smëad©a_íåy
 {

16 
logicb64_t
 
	mlba
;

17 
u64
 
	m¶Ÿ
;

18 
u8
 
	mãmp
;

19 
u8
 
	md©©y≥
;

20 
u16
 
	mns_id
;

21 
u16
 
	mns_£q_num
;

22 
u16
 
	mlun
;

23 
u32
 
	mlun_pba
;

24 
u32
 
	msb_pba
;

26 
u8
 *
	mãmp_èbÀ_pos
;

27 
u32
 *
	mm≠_èbÀ_pos
;

28 
u64
 *
	mvÆid_logicbs_pos
;

29 
sh™n⁄_•ölock_t
 *
	m•ölock
;

30 
sh™n⁄_disk
 *
	msdisk
;

33 
	$£t_ïûog_size
(
sh™n⁄_dev
 *
sdev
)

35 
chunk_size
 = 
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
;

36 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
BIG_EPILOG
) {

37 
sdev
->
ïûog_hód_size
 = (
sh™n⁄_ïûog_hód_4k
);

38 
sdev
->
ïûog_íåy_size
 = (
u64
);

40 
sdev
->
ïûog_hód_size
 = (
sh™n⁄_ïûog_hód
);

41 
sdev
->
ïûog_íåy_size
 = (
logicb_t
);

43 
sdev
->
max_ïûog_size
 = sdev->
max_avaûabÀ_groups
 * sdev->
max_luns_ö_group
 * sdev->
logicbs_ö_siblög_eblock
 * sdev->
ïûog_íåy_size
 + sdev->
ïûog_hód_size
;

44 
sdev
->
max_ïûog_size
 = ((sdev->max_ïûog_sizê+ 
chunk_size
 - 1) / chunk_size) * chunk_size;

45 
sdev
->
max_logicbs_ö_ïûog
 = sdev->
max_ïûog_size
/sdev->
logicb_size
;

46 
	`debugs1
("epilog_head_size=%d,Épilog_entry_size=%d,Épilog_size=%d.\n",

47 
sdev
->
ïûog_hód_size
, sdev->
ïûog_íåy_size
, sdev->
max_ïûog_size
);

48 
	}
}

50 *
	$Æloc_ïûog_∑ge
(
sh™n⁄_dev
 *
sdev
, 
gÂ_t
 
gÂ_mask
)

52 *
addr
;

53 
ªåy
:

54 
addr
 = 
	`sh™n⁄_mempoﬁ_Æloc
(
sdev
->
ïûog_∑ge_poﬁ
, 
gÂ_mask
);

55 i‡(
	`u∆ikñy
(!
addr
)) {

56 
	`sh™n⁄_w¨n
("allocateÉpilog_page failed!\n");

57 i‡(
gÂ_mask
 & 
GFP_SHANNON
)

58 
	`sh™n⁄_m¶ìp
(1);

59 
ªåy
;

62  
addr
;

63 
	}
}

65 
	$‰ì_ïûog_∑ge
(
sh™n⁄_dev
 *
sdev
, *
addr
)

67 
	`sh™n⁄_mempoﬁ_‰ì
(
addr
, 
sdev
->
ïûog_∑ge_poﬁ
);

68 
	}
}

70 *
	$Æloc_∑ges_poöãrs
(
size
)

72 *
addr
;

73 
ªåy_out
 = 100;

75 
ªåy
:

76 
addr
 = 
	`sh™n⁄_vzÆloc
(
size
);

77 i‡(
	`u∆ikñy
(!
addr
)) {

78 
	`sh™n⁄_w¨n
("allocateÖage_buf failed,Ñetry");

79 
	`sh™n⁄_m¶ìp
(1);

80 i‡(
ªåy_out
--)

81 
ªåy
;

84  
addr
;

85 
	}
}

87 
	$‰ì_∑ges_poöãrs
(*
addr
)

89 
	`sh™n⁄_v‰ì
(
addr
);

90 
	}
}

92 
	$sh™n⁄_ªÀa£_ªbuûd_ïûogs
(
sh™n⁄_dev
 *
sdev
)

94 
sh™n⁄_ïûog
 *
ïûog
;

95 
i
, 
j
;

97 
	`sh™n⁄_•ö_lock
(&
sdev
->
ïûog_lock
);

98 
sdev
->
ïûog_cou¡
 = 
RUN_EPILOG_COUNT
;

99 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
ïûog_lock
);

100 
i
 = 
INIT_EPILOG_COUNT
 - 1; i >
RUN_EPILOG_COUNT
; i--) {

101 
ïûog
 = 
sdev
->
ïûogs
[
i
];

102 i‡(
ïûog
 =
NULL
)

105 
	`BUG_ON
(
	`sh™n⁄_ã°_™d_£t_bô
(
i
, &
sdev
->
ïûog_bôm≠
));

106 i‡(
ïûog
->
∑ges_poöãrs
) {

107 
j
 = 0; j < 
sdev
->
max_logicbs_ö_ïûog
; j++) {

108 i‡(
ïûog
->
∑ges_poöãrs
[
j
])

109 
	`‰ì_ïûog_∑ge
(
sdev
, 
ïûog
->
∑ges_poöãrs
[
j
]);

111 
	`‰ì_∑ges_poöãrs
(
ïûog
->
∑ges_poöãrs
);

113 
	`sh™n⁄_k‰ì
(
sdev
->
ïûogs
[
i
]);

114 
sdev
->
ïûogs
[
i
] = 
NULL
;

117 
	}
}

119 
	$sh™n⁄_ªÀa£_ïûogs
(
sh™n⁄_dev
 *
sdev
)

121 
sh™n⁄_ïûog
 *
ïûog
;

122 
i
, 
j
;

124 
i
 = 0; i < 
INIT_EPILOG_COUNT
; i++) {

125 
ïûog
 = 
sdev
->
ïûogs
[
i
];

126 i‡(
ïûog
 =
NULL
)

129 i‡(
ïûog
->
∑ges_poöãrs
) {

130 
j
 = 0; j < 
sdev
->
max_logicbs_ö_ïûog
; j++) {

131 i‡(
ïûog
->
∑ges_poöãrs
[
j
])

132 
	`‰ì_ïûog_∑ge
(
sdev
, 
ïûog
->
∑ges_poöãrs
[
j
]);

134 
	`‰ì_∑ges_poöãrs
(
ïûog
->
∑ges_poöãrs
);

136 
	`sh™n⁄_k‰ì
(
sdev
->
ïûogs
[
i
]);

137 
sdev
->
ïûogs
[
i
] = 
NULL
;

139 
	}
}

141 
	$sh™n⁄_Æloc_ïûogs
(
sh™n⁄_dev
 *
sdev
)

143 
sh™n⁄_ïûog
 *
ïûog
;

144 
i
, 
j
;

146 
sdev
->
ïûog_cou¡
 = 
INIT_EPILOG_COUNT
;

147 
i
 = 0; i < 
INIT_EPILOG_COUNT
; i++) {

148 
sdev
->
ïûogs
[
i
] = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_ïûog
), 
GFP_SHANNON
);

149 i‡(
NULL
 =
sdev
->
ïûogs
[
i
])

150 
Áû
;

152 
ïûog
 = 
sdev
->
ïûogs
[
i
];

153 
ïûog
->
ödex
 = 
i
;

154 
ïûog
->
∑ges_poöãrs
 = 
	`Æloc_∑ges_poöãrs
((*ïûog->∑ges_poöãrsË* 
sdev
->
max_logicbs_ö_ïûog
);

155 i‡(
	`u∆ikñy
(
NULL
 =
ïûog
->
∑ges_poöãrs
)) {

156 
	`debugs0
("allocÉpilogÖages_pointers failed!\n");

157 
Áû
;

160 
j
 = 0; j < 
sdev
->
max_logicbs_ö_ïûog
; j++) {

161 
ïûog
->
∑ges_poöãrs
[
j
] = 
	`Æloc_ïûog_∑ge
(
sdev
, 
GFP_SHANNON
);

162 
	`sh™n⁄_mem£t
(
ïûog
->
∑ges_poöãrs
[
j
], 0xFF, 
sdev
->
logicb_size
);

164 
ïûog
->
ïûog_hód
 = (
sh™n⁄_ïûog_hód_4k
 *Îpûog->
∑ges_poöãrs
[0];

165 
	`sh™n⁄_mem_wrôeq
(
EPILOG_WATERMARK
, &
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
);

167 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
ïûog_lock
);

168 
sdev
->
ïûog_bôm≠
 = 0;

170 
Áû
:

171 
	`sh™n⁄_ªÀa£_ïûogs
(
sdev
);

172  -
ENOMEM
;

173 
	}
}

175 
sh™n⁄_ïûog
 *
	$ïûog_Æloc
(
size
, 
sh™n⁄_dev
 *
sdev
)

177 
sh™n⁄_ïûog
 *
ïûog
;

178 
ödex
;

180 
	`sh™n⁄_•ö_lock
(&
sdev
->
ïûog_lock
);

181 
ödex
 = 
	`sh™n⁄_föd_fú°_zîo_bô
(&
sdev
->
ïûog_bôm≠
, sdev->
ïûog_cou¡
);

182 i‡(
ödex
 =
sdev
->
ïûog_cou¡
) {

183 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
ïûog_lock
);

184 
	`sh™n⁄_îr
("cannot getÉpilog!\n");

185  
NULL
;

187 
	`sh™n⁄_£t_bô
(
ödex
, &
sdev
->
ïûog_bôm≠
);

188 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
ïûog_lock
);

190 
ïûog
 = 
sdev
->
ïûogs
[
ödex
];

191 
ïûog
->
logicbs_ö_u£
 = 
size
/
sdev
->
logicb_size
;

193  
ïûog
;

194 
	}
}

196 
ölöe
 
	$ïûog_‰ì
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog
 *
ïûog
)

198 
j
;

200 i‡(
ïûog
 =
NULL
)

203 
j
 = 0; j < 
sdev
->
max_logicbs_ö_ïûog
; j++)

204 
	`sh™n⁄_mem£t
(
ïûog
->
∑ges_poöãrs
[
j
], 0xFF, 
sdev
->
logicb_size
);

205 
ïûog
->
ïûog_hód
 = (
sh™n⁄_ïûog_hód_4k
 *Îpûog->
∑ges_poöãrs
[0];

206 
	`sh™n⁄_mem_wrôeq
(
EPILOG_WATERMARK
, &
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
);

209 
	`sh™n⁄_•ö_lock
(&
sdev
->
ïûog_lock
);

210 
	`sh™n⁄_˛ór_bô
(
ïûog
->
ödex
, &
sdev
->
ïûog_bôm≠
);

211 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
ïûog_lock
);

212 
	}
}

214 
	$sb_‰ì_ïûog
(
sh™n⁄_sb
 *
sb
)

216 
	`ïûog_‰ì
(
sb
->
sdev
, sb->
ïûog
);

217 
sb
->
ïûog
 = 
NULL
;

218 
	}
}

220 
	$ªÀa£_a˘ive_blocks_ïûog
(
sh™n⁄_dev
 *
sdev
)

222 
i
;

224 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

225 i‡(
sdev
->
a˘ive_blk
[
i
] && sdev->a˘ive_blk[i]->
ïûog
)

226 
	`sb_‰ì_ïûog
(
sdev
->
a˘ive_blk
[
i
]);

228 
	}
}

230 *
	$ïûog_gë_addr
(
sh™n⁄_ïûog
 *
ïûog
, 
logicb_ödex
, 
sh™n⁄_dev
 *
sdev
)

232  
ïûog
->
∑ges_poöãrs
[
logicb_ödex
];

233 
	}
}

235 
	$ïûog_£t_mëad©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog
 *
ïûog
, 
pba
, 
u64
 
mëad©a
)

237 
addr
, 
∑ge
, 
off
;

239 
addr
 = 
pba
 * 
sdev
->
ïûog_íåy_size
 + sdev->
ïûog_hód_size
;

240 
∑ge
 = 
addr
 / 
sdev
->
logicb_size
;

241 
off
 = 
addr
 % 
sdev
->
logicb_size
;

243 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
BIG_EPILOG
)

244 
	`sh™n⁄_mem_wrôeq
(
mëad©a
, &
ïûog
->
∑ges_poöãrs
[
∑ge
][
off
]);

246 
logicb_t
 
lba
 = (logicb_t)
mëad©a
;

247 
	`sh™n⁄_mem_wrôñ
(
lba
, &
ïûog
->
∑ges_poöãrs
[
∑ge
][
off
]);

249 
	}
}

251 
u64
 
	$ïûog_gë_mëad©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog
 *
ïûog
, 
pba
)

253 
addr
, 
∑ge
, 
off
;

255 
addr
 = 
pba
 * 
sdev
->
ïûog_íåy_size
 + sdev->
ïûog_hód_size
;

256 
∑ge
 = 
addr
 / 
sdev
->
logicb_size
;

257 
off
 = 
addr
 % 
sdev
->
logicb_size
;

259 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
BIG_EPILOG
)

260  
	`sh™n⁄_mem_ªadq
(&
ïûog
->
∑ges_poöãrs
[
∑ge
][
off
]);

262  
	`sh™n⁄_mem_ªadl
(&
ïûog
->
∑ges_poöãrs
[
∑ge
][
off
]);

263 
	}
}

265 
	$wrôe_ïûog_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

267 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

268 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

269 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

270 
sh™n⁄_ïûog
 *
ïûog
;

272 
ïûog
 = 
sbio
->
vút_addr
;

273 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

274 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

275 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

276 
	`BUG_ON
(
sb
->
sb_ödex
 !
ªq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
);

277 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

278 
	`‰ì_ªq
(
ªq
);

280 
	`sb_‰ì_ïûog
(
sb
);

281 
	`‰ì_sbio
(
sbio
);

282 i‡((
	`sh™n⁄_©omic_ªad
(&
sdev
->
waô_blk
Ë=
sb
->
sb_ödex
Ë|| sdev->
∂ug_out
) {

283 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, -1);

284 
	`sh™n⁄_wake_up
(&
sdev
->
waô_blk_d⁄e_evít
);

286 
	}
}

288 
	$wrôe_ïûog
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
hód
)

290 
sh™n⁄_ªque°
 *
ªq
, *
fú°
, *
∑rôy
 = 
NULL
;

291 
sh™n⁄_bio
 *
sbio
;

292 
i
, 
cou¡
, 
∑rôy_lun
 = -1;

293 
a˘uÆ_logicbs
 = 
sb
->
ïûog
->
logicbs_ö_u£
;

295 
sbio
 = 
	`Æloc_sbio
(
GFP_NOWAIT
);

296 
	`£t_sbio_debug_èg
(
sbio
, 
WRITE_EPILOG_TAG
);

297 
sbio
->
vút_addr
 = 
sb
->
ïûog
;

298 
sbio
->
logicbs
 = 
a˘uÆ_logicbs
;

299 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

300 
sbio
->
ˇŒback
 = 
wrôe_ïûog_ˇŒback
;

301 
sbio
->
d©a
 = 
sb
;

303 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


304 
	`c›y_ïûog_buf
(
sdev
, 
sb
->
sb_ödex
, sb->
ïûog
);

306 
fú°
 = 
NULL
;

307 
cou¡
 = 0;

308 
i
 = 0; i < 
a˘uÆ_logicbs
; i++) {

309 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

310 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_EPILOG_TAG
, 
i
);

311 
ªq
->
›code
 = 
sh_cmd_wrôe
;

312 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

313 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

314 
ªq
->
hód
 = hód & ~
NO_POLL_MASK
;

315 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

316 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

317 
ªq
->
vút_addr
 = 
	`ïûog_gë_addr
(
sb
->
ïûog
, 
i
, 
sdev
);

318 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

319 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

320 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

321 
	`BUG
();

323 
	`Æloc_lun_pba
(
sdev
, 
ªq
->
_mëad©a
, 
hód
, &ªq->
pba
);

324 
ªq
->
sbio
 = sbio;

325 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

326 i‡(
fú°
 =
NULL
) {

327 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

328 
fú°
 = 
ªq
;

330 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
fú°
->chunk_list);

331 
cou¡
++;

332 i‡(
cou¡
 =
sdev
->
logicbs_ö_chunk
) {

333 i‡(
sdev
->
øid5_suµ‹ãd
 && (sdev->
lun_ö_group
[
hód
 & 
HEAD_INDEX_MASK
] == 0)) {

334 
∑rôy_lun
 = 
	`gë_∑rôy_lun
(&
sb
->
sub_group
[
fú°
->
pba
.
lun
/
sdev
->
max_luns_ö_group
]);

335 
∑rôy
 = 
	`make_∑rôy_ªq
(
sb
, 
∑rôy_lun
, 
fú°
);

338 
	`sh™n⁄_wrôe_cmd
(
sdev
->
lun
[
fú°
->
pba
.lun]->
lun£t
, first);

339 
fú°
 = 
NULL
;

340 
cou¡
 = 0;

342 i‡(
∑rôy
) {

343 
	`sh™n⁄_∑rôy_cmd
(
sdev
->
lun
[
∑rôy_lun
]->
lun£t
, 
∑rôy
);

344 
∑rôy
 = 
NULL
;

348 
	}
}

350 
	$is_fú°_ïûog_pba
(
sh™n⁄_sb
 *
sb
, 
logicb_t
 
wr_off£t
)

352 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

353  (
wr_off£t
 =
	`fú°_ïûog_pba
(
sdev
, 
sb
));

354 
	}
}

356 
	$is_ïûog_pba
(
sh™n⁄_sb
 *
sb
, 
logicb_t
 
wr_off£t
)

358 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

359  (
wr_off£t
 >(
sb
->
mö_d©a_luns
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_siblög_eblock
 - sb->
logicbs_ö_ïûog
));

360 
	}
}

362 
	$is_ïûog_∑ge_°rùe
(
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
group_ödex
)

364 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

365 
sub_group
 *
group
 = &
sb
->sub_group[
group_ödex
];

366 
logicbs_ö_group
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
;

367 
ïûog_groups
 = (
sb
->
logicbs_ö_ïûog
 + 
logicbs_ö_group
 - 1) /Üogicbs_in_group;

369  ((
∑ge_°rùe
 * 
sdev
->
max_avaûabÀ_groups
 + 
group
->
phy_ödex
Ë>(sdev->
∑ges_ö_eblock
 * sdev->max_avaûabÀ_group†- 
ïûog_groups
));

370 
	}
}

373 
	$upd©e_ïûog_hód
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

375 
	`sh™n⁄_mem_wrôeq
(
sdev
->
£quí˚_numbî
++, &
sb
->
ïûog
->
ïûog_hód
->
hód
.
£q_num
);

376 
sb
->
£q_num
 = 
	`sh™n⁄_mem_ªadq
(&sb->
ïûog
->
ïûog_hód
->
hód
.seq_num);

377 
	`sh™n⁄_mem_wrôew
(
sb
->
hód_ödex
, &sb->
ïûog
->
ïûog_hód
->
hód
.head_index);

378 
	`sh™n⁄_mem_wrôñ
(
sb
->
îa£_cou¡î
, &sb->
ïûog
->
ïûog_hód
->
hód
.erase_counter);

379 
	`sh™n⁄_mem_wrôew
(
sb
->
√xt_sb
, &sb->
ïûog
->
ïûog_hód
->
hód
.next_sb);

380 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

381 
	`sh™n⁄_mem_wrôeq
(
sdev
->
powî_⁄_£c⁄ds
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.power_on_seconds);

382 
	`sh™n⁄_mem_wrôeq
(
sdev
->
powî_cy˛e_cou¡
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.power_cycle_count);

383 
	`sh™n⁄_mem_wrôeq
(
sdev
->
ho°_wrôe_£˘‹s
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.host_write_sectors);

384 
	`sh™n⁄_mem_wrôeq
(
sdev
->
tŸÆ_wrôe_£˘‹s
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.total_write_sectors);

385 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

386 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_öt_max
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.temperature_int_max);

387 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_bﬂrd_max
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.temperature_board_max);

388 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_Êash_max
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.temperature_flash_max);

389 
	`sh™n⁄_mem_wrôñ
(
sdev
->
vﬁège_öt_max
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.voltage_int_max);

390 
	`sh™n⁄_mem_wrôñ
(
sdev
->
vﬁège_aux_max
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.voltage_aux_max);

392 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

393 
	`sh™n⁄_mem_wrôeq
(
sdev
->
ho°_ªad_£˘‹s
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.host_read_sectors);

395 
	`sh™n⁄_mem_wrôñ
(
sdev
->
£u_¸c_îr‹
 + sdev->
£u_¸c_îr‹_hi°‹y
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.seu_crc_error_history);

396 
	`sh™n⁄_mem_wrôñ
(
sdev
->
£u_ecc_îr‹
 + sdev->
£u_ecc_îr‹_hi°‹y
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.seu_ecc_error_history);

397 
	}
}

399 
	$ªåõve_sm¨t_‰om_ïûog_hód
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ïûog_hód
 *
ïûog_hód
)

401 i‡(
sdev
->
powî_⁄_£c⁄ds
 < (
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->power_on_seconds) + 1))

402 
sdev
->
powî_⁄_£c⁄ds
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->power_on_seconds);

403 i‡(
sdev
->
powî_cy˛e_cou¡
 < (
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->power_cycle_count) + 1))

404 
sdev
->
powî_cy˛e_cou¡
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->power_cycle_count);

405 i‡(
sdev
->
ho°_wrôe_£˘‹s
 < (
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->host_write_sectors) + 1))

406 
sdev
->
ho°_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->host_write_sectors);

407 i‡(
sdev
->
tŸÆ_wrôe_£˘‹s
 < (
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->total_write_sectors) + 1))

408 
sdev
->
tŸÆ_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->total_write_sectors);

409 i‡(
sdev
->
ho°_ªad_£˘‹s_hi°‹y
 < (
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ho°_ªad_£˘‹s
) + 1))

410 
sdev
->
ho°_ªad_£˘‹s_hi°‹y
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ho°_ªad_£˘‹s
);

411 i‡(
sdev
->
ãm≥øtuª_öt_max
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_int_max) + 1))

412 
sdev
->
ãm≥øtuª_öt_max
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_int_max);

413 i‡(
sdev
->
ãm≥øtuª_bﬂrd_max
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_board_max) + 1))

414 
sdev
->
ãm≥øtuª_bﬂrd_max
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_board_max);

415 i‡(
sdev
->
ãm≥øtuª_Êash_max
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_flash_max) + 1))

416 
sdev
->
ãm≥øtuª_Êash_max
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->temperature_flash_max);

417 i‡(
sdev
->
vﬁège_öt_max
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->voltage_int_max) + 1))

418 
sdev
->
vﬁège_öt_max
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->voltage_int_max);

419 i‡(
sdev
->
vﬁège_aux_max
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->voltage_aux_max) + 1))

420 
sdev
->
vﬁège_aux_max
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->voltage_aux_max);

421 i‡(
sdev
->
£u_¸c_îr‹_hi°‹y
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->seu_crc_error_history) + 1))

422 
sdev
->
£u_¸c_îr‹_hi°‹y
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->seu_crc_error_history);

423 i‡(
sdev
->
£u_ecc_îr‹_hi°‹y
 < (
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->seu_ecc_error_history) + 1))

424 
sdev
->
£u_ecc_îr‹_hi°‹y
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->seu_ecc_error_history);

425 
	}
}

427 
ölöe
 
	$ïûog_d©a_is_övÆid
(
sh™n⁄_dev
 *
sdev
, 
u64
 
mëad©a
)

429 
u32
 
ns_£q_num
 = (
mëad©a
 >> 
NS_SEQ_NUM_SHIFT
Ë& 
NS_SEQ_NUM_MASK
;

430 i‡(
mëad©a
 == ~0ULL)

432 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
BIG_EPILOG
) {

433 
d©©y≥
;

434 
u64
 
lba64
;

435 
d©©y≥
 = (
mëad©a
 >> 
DATATYPE_SHIFT
Ë& 
DATATYPE_MASK
;

436 i‡((
d©©y≥
 !
SHORT_LBA
Ë&& (d©©y≥ !
LONG_LBA
))

438 
lba64
 = 
mëad©a
 & 
LONG_LBA_MASK
;

439  
	`l⁄g_lba_is_övÆid
(
lba64
Ë&& 
ns_£q_num
 == 0;

441  
	`lba_is_övÆid
(
mëad©a
 & 
LONG_LBA_MASK
Ë&& 
ns_£q_num
 == 0;

442 
	}
}

444 
	$ªcovî_ns_d©a_‰om_ªq
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_ªque°
 *
ªq
, 
sh™n⁄_dev
 *
sdev
)

446 
u64
 
vîsi⁄_num
 = 
	`sh™n⁄_mem_ªadq
(
ªq
->
vút_addr
);

447 
	`sh™n⁄_•ö_lock_bh
(&
ns
->
d©a_lock
);

448 i‡(
vîsi⁄_num
 > 
ns
->
d©a
->
vîsi⁄
) {

449 
	`c›y_ns_d©a
(
ns
->
d©a
, 
ªq
->
vút_addr
);

450 i‡(
ns
->
d©a_pba
.
lun_pba
 != 0x03ffffff)

451 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ns
->
d©a_pba
.
lun
,Çs->d©a_pba.
lun_pba
);

452 
ns
->
d©a_pba
 = 
ªq
->
pba
;

453 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

455 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

456 
	}
}

458 
	$ªcovî_ns_d©a_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

460 
sh™n⁄_«me•a˚
 *
ns
 = 
sbio
->
d©a
;

461 
sh™n⁄_dev
 *
sdev
 = 
ns
->
poﬁ
->
sdevs
[0];

462 
sh™n⁄_ªque°
 *
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, shannon_request,

463 
bio_li°
);

464 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

465 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

466 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

468 i‡(
sbio
->
°©us
)

469 
	`sh™n⁄_w¨n
("error(%d)ÑeadingÇs_data,Üun: 0x%x,Üun_pba: 0x%x\n",

470 
sbio
->
°©us
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

472 
	`ªcovî_ns_d©a_‰om_ªq
(
ns
, 
ªq
, 
sdev
);

473 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, (*(
ns
->
d©a
)), 
SHANNON_DMA_FROMDEVICE
);

474 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

475 
	`‰ì_ªq
(
ªq
);

476 
	`‰ì_sbio
(
sbio
);

477 
	`sh™n⁄_©omic_dec
(&
ns
->
poﬁ
->
ªcovî_ns_d©a_d⁄e
);

478 i‡(
	`sh™n⁄_©omic_ªad
(&
ns
->
poﬁ
->
ªcovî_ns_d©a_d⁄e
) == 0)

479 
	`sh™n⁄_wake_up
(&
ns
->
poﬁ
->
ªcovî_ns_d©a_d⁄e_evít
);

480 
	}
}

482 
	$ªcovî_ns_d©a
(
sh™n⁄_«me•a˚
 *
ns
, 
lun_pba
 
pba
)

484 
sh™n⁄_bio
 *
sbio
;

485 
sh™n⁄_ªque°
 *
ªq
;

486 
sh™n⁄_dev
 *
sdev
 = 
ns
->
poﬁ
->
sdevs
[0];

487 
ns_d©a_size
 = (
sh™n⁄_ns_d©a
);

489 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

490 
	`£t_sbio_debug_èg
(
sbio
, 
RECOVER_NS_DATA_TAG
);

491 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

492 
sbio
->
logicbs
 = 1;

493 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

494 
sbio
->
ˇŒback
 = 
ªcovî_ns_d©a_ˇŒback
;

495 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

496 
sbio
->
d©a
 = 
ns
;

497 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, 
ns_d©a_size
,

498 
SHANNON_DMA_FROMDEVICE
);

500 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

501 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_NS_DATA_TAG
, 0);

502 
ªq
->
›code
 = 
sh_cmd_ªad
;

503 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

504 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

505 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

506 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

507 
ªq
->
pba
 =Öba;

508 
ªq
->
sbio
 = sbio;

509 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

510 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

511 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 0);

513 
	`sh™n⁄_©omic_öc
(&
ns
->
poﬁ
->
ªcovî_ns_d©a_d⁄e
);

514 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

516 
	}
}

518 
ölöe
 
	$mëad©a_íåy_¥e„tch
(
sh™n⁄_dev
 *
sdev
, 
mëad©a_íåy
 *
mëa_íåy
)

520 *
bô_ba£
 = (
u64
 *)
sdev
->
lun
[
mëa_íåy
->lun]->
pba_èbÀ
 + (mëa_íåy->
lun_pba
*
PBA_ENTRY_LEN
)/64;

522 
	`sh™n⁄_•ö_lock_¥e„tch
(&(
mëa_íåy
->
sdisk
->
Õmt_¨øy
[
sdev
->
sdev_id
].
m≠_èbÀ_lock
[
	`gë_Õmt_lock_ödex
(mëa_íåy->
¶Ÿ
)]));

523 
	`sh™n⁄_¥e„tch
(
bô_ba£
);

524 
	`sh™n⁄_¥e„tch
(
mëa_íåy
->
m≠_èbÀ_pos
);

525 
	`sh™n⁄_¥e„tch
(
mëa_íåy
->
ãmp_èbÀ_pos
);

526 
	}
}

528 
ölöe
 
	$Á°_h™dÀ_mëad©a_¨øy
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
mëad©a_íåy
 *
mëa_¨øy
, 
cou¡
)

530 
lun_pba
 
ﬁd_pba
;

531 
sb_num
;

532 
ödex
;

534 
	`sh™n⁄_¥e„tch
(&
mëa_¨øy
[0]);

535 
	`mëad©a_íåy_¥e„tch
(
sdev
, &
mëa_¨øy
[0]);

536 
ödex
 = 0; index < 
cou¡
; index++) {

537 i‡((
ödex
 + 1Ë< 
cou¡
) {

538 
	`sh™n⁄_¥e„tch
(&
mëa_¨øy
[
ödex
 + 1]);

539 
	`mëad©a_íåy_¥e„tch
(
sdev
, &
mëa_¨øy
[
ödex
 + 1]);

542 
	`Õmt_lock_ö_ªcovî_Õmt
(
sdev
, 
mëa_¨øy
[
ödex
].
sdisk
, mëa_¨øy[ödex].
¶Ÿ
);

543 i‡(
	`gë_lun_pba_‰om_lba
(
mëa_¨øy
[
ödex
].
lba
, &
ﬁd_pba
, 
NULL
, mëa_¨øy[ödex].
sdisk
) < 0) {

544 
	`sh™n⁄_¥e„tch
(&(
mëa_¨øy
[
ödex
].
sdisk
->
Õmt_¨øy
[
sdev
->
sdev_id
].
vÆid_logicbs_¨øy
[
	`gë_Õmt_lock_ödex
(mëa_¨øy[ödex].
¶Ÿ
)]));

546 
	`£t_vÆid
(
sdev
, 
mëa_¨øy
[
ödex
].
lun
, mëa_¨øy[ödex].
lun_pba
);

547 
mëa_¨øy
[
ödex
].
sdisk
->
Õmt_¨øy
[
sdev
->
sdev_id
].
vÆid_logicbs_¨øy
[
	`gë_Õmt_lock_ödex
(mëa_¨øy[ödex].
¶Ÿ
)]++;

548 *
mëa_¨øy
[
ödex
].
m≠_èbÀ_pos
 = 
	`m≠_èbÀ_d©a
(mëa_¨øy[ödex].
lun
, mëa_¨øy[ödex].
lun_pba
);

549 *
mëa_¨øy
[
ödex
].
ãmp_èbÀ_pos
 = 
	`ãmp_èbÀ_d©a
(mëa_¨øy[ödex].
ãmp
, mëa_¨øy[ödex].
lun
);

550 i‡(
sdev
->
•oﬁ
)

551 
	`sh™n⁄_©omic64_öc
(&
sdev
->
•oﬁ
->
u£d_logicbs
);

553 
sb_num
 = 
ﬁd_pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
;

554 i‡(
sdev
->
sbs
[
sb_num
].
£q_num
 <
sb
->seq_num) {

556 
	`£t_vÆid
(
sdev
, 
mëa_¨øy
[
ödex
].
lun
, mëa_¨øy[ödex].
lun_pba
);

557 *
mëa_¨øy
[
ödex
].
m≠_èbÀ_pos
 = 
	`m≠_èbÀ_d©a
(mëa_¨øy[ödex].
lun
, mëa_¨øy[ödex].
lun_pba
);

558 *
mëa_¨øy
[
ödex
].
ãmp_èbÀ_pos
 = 
	`ãmp_èbÀ_d©a
(mëa_¨øy[ödex].
ãmp
, mëa_¨øy[ödex].
lun
);

559 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

562 
	`Õmt_u∆ock_ö_ªcovî_Õmt
(
sdev
, 
mëa_¨øy
[
ödex
].
sdisk
, mëa_¨øy[ödex].
¶Ÿ
);

564 
	}
}

566 
	$ªcovî_lm±_group
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_ïûog
 *
ïûog
, 
∑ge_°rùe
, 
group_ödex
)

568 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

569 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

570 
sh™n⁄_«me•a˚
 *
ns
;

571 
sb_num
;

572 
ödex
 = 0;

573 
sub_group
 *
group
 = &
sb
->sub_group[
group_ödex
];

574 
logicb64_t
 
sb_pba
, 
lun_pba
, 
mëad©a
;

575 
lun
, 
lun_off£t
, 
∂™e
, 
logicb
;

576 
lun_ö_group
;

577 
ãmp
;

578 
ªt
 = 0;

579 
mëad©a_íåy
 *
mëa_¨øy
 = 
NULL
;

582 
mëa_¨øy
 = 
	`sh™n⁄_kzÆloc
((
mëad©a_íåy
Ë* 
METADATA_ARRAY_SIZE
, 
GFP_SHANNON
);

583 } 
mëa_¨øy
 =
NULL
);

585 i‡(
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
Ë=
HOT_INDEX
)

586 
ãmp
 = 
INIT_HOT_STATE
;

588 
ãmp
 = 
COLD_STATE
;

591 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

592 
lun_ö_group
 = -1;

595 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

596 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

597 } 
	`is_bad_lun
(
sb
, 
lun
));

598 
lun_ö_group
++;

600 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

601 
logicb
 = 0;Üogicb < 
sdev
->
logicbs_ö_∑ge
;Üogicb++) {

603 i‡(
sdev
->
com∑˘_ïûog
)

604 
sb_pba
 = 
group
->
phy_ödex
 * 
sb
->
mö_d©a_luns
 * 
sdev
->
logicbs_ö_siblög_eblock
 + \

605 
lun_ö_group
 * 
sdev
->
logicbs_ö_siblög_eblock
 + \

606 
∂™e
 * 
sdev
->
logicbs_ö_siblög_eblock
 / sdev->
∂™es
 + \

607 
∑ge_°rùe
 * 
sdev
->
logicbs_ö_∑ge
 + \

608 
logicb
;

610 
sb_pba
 = 
group
->
phy_ödex
 * 
sdev
->
max_luns_ö_group
 * sdev->
logicbs_ö_siblög_eblock
 + \

611 
lun_off£t
 * 
sdev
->
logicbs_ö_siblög_eblock
 + \

612 
∂™e
 * 
sdev
->
logicbs_ö_siblög_eblock
 / sdev->
∂™es
 + \

613 
∑ge_°rùe
 * 
sdev
->
logicbs_ö_∑ge
 + \

614 
logicb
;

616 
lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + \

617 
∂™e
 * 
sdev
->
logicbs_ö_siblög_eblock
/sdev->
∂™es
 + \

618 
∑ge_°rùe
 * 
sdev
->
logicbs_ö_∑ge
 + \

619 
logicb
;

620 
mëad©a
 = 
	`ïûog_gë_mëad©a
(
sdev
, 
ïûog
, 
sb_pba
);

621 i‡(
	`ïûog_d©a_is_övÆid
(
sdev
, 
mëad©a
))

624 
mëa_¨øy
[
ödex
].
lba
 = 
mëad©a
 & 
LONG_LBA_MASK
;

625 
mëa_¨øy
[
ödex
].
lun
 =Üun;

626 
mëa_¨øy
[
ödex
].
lun_pba
 =Üun_pba;

627 
mëa_¨øy
[
ödex
].
ns_id
 = (
mëad©a
 >> 
NS_ID_SHIFT
Ë& 
NS_ID_MASK
;

628 
mëa_¨øy
[
ödex
].
ns_£q_num
 = (
mëad©a
 >> 
NS_SEQ_NUM_SHIFT
Ë& 
NS_SEQ_NUM_MASK
;

629 
mëa_¨øy
[
ödex
].
d©©y≥
 = (
mëad©a
 >> 
DATATYPE_SHIFT
Ë& 
DATATYPE_MASK
;

630 
mëa_¨øy
[
ödex
].
ãmp
 =Åemp;

631 
mëa_¨øy
[
ödex
].
sb_pba
 = sb_pba;

633 i‡(
•oﬁ
) {

634 
ns
 = 
•oﬁ
->ns[
mëa_¨øy
[
ödex
].
ns_id
];

635 i‡((
ns
 =
NULL
Ë|| (
mëa_¨øy
[
ödex
].
ns_id
 >
SHANNON_NS_NUM
)) {

636 
	`debugs1
("mëad©a=0x%lx, Wr⁄gÇs_id=%d.\n", 
mëad©a
, 
mëa_¨øy
[
ödex
].
ns_id
);

639 i‡(
mëa_¨øy
[
ödex
].
ns_£q_num
 !
ns
->
£q_num
) {

640 
	`debugs1
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

641 
sb
->
sb_ödex
, 
mëa_¨øy
[
ödex
].
ns_£q_num
, mëa_¨øy[ödex].
ns_id
, 
ns
->
£q_num
);

644 i‡(
mëa_¨øy
[
ödex
].
lba
 =
övÆid_lba
[
sdev
->
lba_f‹m©
] && sdev->
sdev_id
 == 0) {

645 
lun_pba
 
Õ
 = {.
lun
 = 
mëa_¨øy
[
ödex
].lun, .lun_pba = meta_array[index].lun_pba};

646 
sb_num
 = 
ns
->
d©a_pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
;

647 i‡(
ns
->
d©a_pba
.
lun_pba
 == 0x03ffffff ||

648 
sdev
->
sbs
[
sb_num
].
£q_num
 <
sb
->seq_num) {

649 
	`£t_vÆid
(
sdev
, 
mëa_¨øy
[
ödex
].
lun
, mëa_¨øy[ödex].
lun_pba
);

650 i‡(
ns
->
d©a_pba
.
lun_pba
 != 0x03ffffff)

651 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ns
->
d©a_pba
.
lun
,Çs->d©a_pba.
lun_pba
);

652 
ns
->
d©a_pba
 = 
Õ
;

656 
mëa_¨øy
[
ödex
].
sdisk
 = &
ns
->sdisk;

659 i‡((
mëa_¨øy
[
ödex
].
ns_id
 !0Ë|| (mëa_¨øy[ödex].
ns_£q_num
 != 0)) {

660 
	`sh™n⁄_îr
("Wrong metadata inÇon-namespace mode. metadata=0x%lx,Çs_id=%d,Çs_seq_num=%d.\n",

661 
mëad©a
, 
mëa_¨øy
[
ödex
].
ns_id
, mëa_¨øy[ödex].
ns_£q_num
);

664 
mëa_¨øy
[
ödex
].
sdisk
 = &
sdev
->sdisk;

666 i‡(
mëa_¨øy
[
ödex
].
lba
 > mëa_¨øy[ödex].
sdisk
->
tŸÆ_m≠_èbÀ_size
 / (
u32
)) {

667 
	`sh™n⁄_îr
("Wrong Epilog data: sb_index=%d, sb_pba=0x%x,Üba=0x%lx.\n",

668 
sb
->
sb_ödex
, 
mëa_¨øy
[
ödex
].
sb_pba
, mëa_¨øy[ödex].
lba
);

669 
ªt
 = -
EIO
;

670 
out
;

672 i‡(
	`check_™d_Æloc_m≠èbÀ
(
mëa_¨øy
[
ödex
].
sdisk
, mëa_¨øy[ödex].
lba
)) {

673 
ªt
 = -
EIO
;

674 
out
;

676 
mëa_¨øy
[
ödex
].
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(mëa_¨øy[ödex].
sdisk
, mëa_¨øy[ödex].
lba
);

677 
mëa_¨øy
[
ödex
].
ãmp_èbÀ_pos
 = 
	`ãmp_èbÀ_gë_posôi⁄
(&mëa_¨øy[ödex].
sdisk
->
Õmt_¨øy
[
sdev
->
sdev_id
], mëa_¨øy[ödex].
¶Ÿ
);

678 
mëa_¨øy
[
ödex
].
m≠_èbÀ_pos
 = 
	`m≠_èbÀ_gë_posôi⁄
(&mëa_¨øy[ödex].
sdisk
->
Õmt_¨øy
[
sdev
->
sdev_id
], mëa_¨øy[ödex].
¶Ÿ
);

679 i‡(
mëa_¨øy
[
ödex
].
ãmp_èbÀ_pos
 =
NULL
 || mëa_¨øy[ödex].
m≠_èbÀ_pos
 == NULL) {

680 
	`sh™n⁄_îr
("sdev->sdev_id=%d, index=%d, mëad©a=0x%lx,Üba=0x%lx.\n", 
sdev
->
sdev_id
, 
ödex
, 
mëad©a
, 
mëa_¨øy
[ödex].
lba
);

681 
	`BUG_ON
(1);

684 
ödex
++;

685 i‡(
ödex
 =
METADATA_ARRAY_SIZE
) {

686 
	`Á°_h™dÀ_mëad©a_¨øy
(
sdev
, 
sb
, 
mëa_¨øy
, 
ödex
);

687 
ödex
 = 0;

689 
	`sh™n⁄_¥e„tch
(&
mëa_¨øy
[
ödex
]);

692 } 
lun_off£t
 !
group
->
œ°_d©a_lun_off£t
);

694 i‡(
ödex
)

695 
	`Á°_h™dÀ_mëad©a_¨øy
(
sdev
, 
sb
, 
mëa_¨øy
, 
ödex
);

697 
out
:

698 
	`sh™n⁄_k‰ì
(
mëa_¨øy
);

699  
ªt
;

700 
	}
}

702 
	$ªcovî_lm±
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_ïûog
 *
ïûog
)

704 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

705 
sub_group
 *
group
;

706 
∑ge
, 
group_ödex
;

708 
∑ge
 = 0;Öagê< 
sdev
->
∑ges_ö_eblock
;Öage++){

709 
group_ödex
 = 0; group_ödex < 
sdev
->
∑rôy_groups
; group_index++) {

710 
group
 = &
sb
->
sub_group
[
group_ödex
];

711 i‡(
group
->
phy_ödex
 < 0)

713 i‡(
	`ªcovî_lm±_group
(
sb
, 
ïûog
, 
∑ge
, 
group_ödex
) < 0)

714  -
EIO
;

715 
	`sh™n⁄_c⁄d_ªsched
();

720 
	}
}

722 
	$add_to_li°_by_£q_num
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_li°_hód
 *
sb_li°
)

724 
sh™n⁄_sb
 *
tmp
;

725 
sh™n⁄_li°_hód
 *
li°
;

727 i‡(
	`sh™n⁄_li°_em±y
(
sb_li°
)) {

728 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, 
sb_li°
);

732 
li°
 = 
sb_li°
->
√xt
;

733 
li°
 !
sb_li°
) {

734 
tmp
 = 
	`sh™n⁄_li°_íåy
(
li°
, 
sh™n⁄_sb
,Üist);

735 i‡(
tmp
->
£q_num
 > 
sb
->seq_num)

737 
li°
 =Üi°->
√xt
;

739 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
,Üist);

740 
	}
}

742 
	$ªad_ïûog_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

744 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

745 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

746 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

747 
sh™n⁄_ïûog
 *
ïûog
 = 
sb
->epilog;

748 
i
, 
bœnk_logicbs
 = 0;

749 
√ed_ªsˇn
 = 0, 
off£t
;

750 
∑rôy_is_em±y
 = 0, 
d©a_lun_is_em±y
 = 0;

751 
sub_group
 *
group
;

752 
logicbs_ö_∑ge_°rùe
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
;

753 
∑ge_°rùes
 = (
sb
->
logicbs_ö_ïûog
 + 
logicbs_ö_∑ge_°rùe
 - 1) /Üogicbs_in_page_stripe;

754 
d©a_logicbs
 = 
sbio
->
logicbs
;

755 
u8
 
hód_ecc
 = 0;

756 i‡(
sdev
->
øid5_suµ‹ãd
)

757 
d©a_logicbs
 = 
sbio
->
logicbs
 - 
∑ge_°rùes
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_chunk
;

759 
d©a_logicbs
 = 
sbio
->
logicbs
;

761 
off£t
 = 0;

762 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

763 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

764 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

765 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

766 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

769 
group
 = &
sb
->
sub_group
[
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
];

770 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
) {

771 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)))

772 
∑rôy_is_em±y
 = 1;

774 
d©a_lun_is_em±y
 = 1;

775 
bœnk_logicbs
++;

778 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)))

780 i‡(((
ªq
->
d©©y≥
 =
SHORT_LBA
Ë&& (ªq->
_mëad©a
 =
INVALID_LBA2
)) ||

781 (
ªq
->
d©©y≥
 =
NEED_RESCAN
))

782 
√ed_ªsˇn
 = 1;

783 
i
 = 
off£t
 - (
d©a_logicbs
 - 
sb
->
logicbs_ö_ïûog
);

784 i‡(
i
 >= 0) {

785 i‡(
i
 == 0)

786 
hód_ecc
 = 
ªq
->
_ecc
;

787 
	`sh™n⁄_mem˝y
(
	`ïûog_gë_addr
(
ïûog
, 
i
, 
sdev
), 
ªq
->
vút_addr
, sdev->
logicb_size
);

789 
off£t
++;

792 i‡((
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
Ë=
EPILOG_WATERMARK
Ë&& (
hód_ecc
 < 
SH_FAKE_ERR
)) {

794 
sb
->
£q_num
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.seq_num);

795 
sb
->
îa£_cou¡î
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog
->
ïûog_hód
->
hód
.erase_counter);

796 
sb
->
hód_ödex
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.head_index);

797 
sb
->
√xt_sb
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.next_sb);

798 
	`£t_ªcovîed_ïûog_hód
(
sb
);

801 i‡(
sbio
->
°©us
 & 
HAVE_ERROR_SECTOR
) {

802 
group
 = -1, 
max_îr_logicbs
 = 0;

803 
cur_îr_logicbs
 = 0;

804 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
)

805 i‡((
ªq
->
_ecc
 >
SH_FAKE_ERR
Ë&& (ªq->_ec¯!
SH_FRESH_ERASED
)) {

806 
	`sh™n⁄_w¨n
("sb(sb_ödex=%dËha†badÜun=%d.\n", 
sb
->
sb_ödex
, 
ªq
->
pba
.
lun
);

807 i‡(
group
 < 0)

808 
group
 = 
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
;

809 i‡(
group
 !
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
) {

810 i‡(
cur_îr_logicbs
 > 
max_îr_logicbs
)

811 
max_îr_logicbs
 = 
cur_îr_logicbs
;

812 
cur_îr_logicbs
 = 1;

813 
group
 = 
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
;

815 
cur_îr_logicbs
++;

819 
	`sh™n⁄_öfo
("sb=%d, sbio->status=0x%x, sbio->logicbs=%d, data_logicbs=%d, blank_logicbs=%d, max_err_logicbs==%d.\n",

820 
sb
->
sb_ödex
, 
sbio
->
°©us
, sbio->
logicbs
, 
d©a_logicbs
, 
bœnk_logicbs
, 
max_îr_logicbs
);

822 i‡((
max_îr_logicbs
 <
sdev
->
logicbs_ö_chunk
) && \

823 (
bœnk_logicbs
 >(
sbio
->
logicbs
 - 
sdev
->
logicbs_ö_chunk
 * sdev->
max_avaûabÀ_groups
 * 
∑ge_°rùes
))) {

824 
	`sh™n⁄_öfo
("%s(): sb(sb_ödex=%dËi†®‰ì su≥∏block.\n", 
__func__
, 
sb
->
sb_ödex
);

826 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

827 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

828 
	`sh™n⁄_îr
("sb=%d,Üun=%d,Öba=%d,Écc=0x%x.\n",

829 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
,Ñeq->pba.
lun
,Ñeq->pba.lun_pba,Ñeq->
_ecc
);

832 
	`sh™n⁄_îr
("Ród Eº‹ºººº∏!. sb_ödex=0x%x,Üa°_d©a_lun=%d.\n", 
sb
->
sb_ödex
, 
	`œ°_d©a_lun
(&sb->
sub_group
[0]));

833 
	`ªmove_sb_‰om_‰ì_blk_li°
(
sdev
, 
sb
);

834 
sb
->
°©e
 = 
RECOVER_ERR_BLOCK
;

835 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

837 } i‡(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
 && 
d©a_lun_is_em±y
) {

838 i‡(
bœnk_logicbs
 !
sbio
->
logicbs
) {

839 
	`sh™n⁄_öfo
("sb=%d, sbio->status=0x%x, sbio->logicbs=%d, data_logicbs=%d, blank_logicbs=%d.\n", \

840 
sb
->
sb_ödex
, 
sbio
->
°©us
, sbio->
logicbs
, 
d©a_logicbs
, 
bœnk_logicbs
);

841 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

842 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

843 
	`sh™n⁄_öfo
("%s(): sb=%d,Üun=%d,Öba=%d,Écc=0x%x.\n",

844 
__func__
, 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
,Ñeq->pba.
lun
,Ñeq->pba.lun_pba,Ñeq->
_ecc
);

846 
	`sh™n⁄_log
("BlankÖage inÉpilog! MightÖower failure whenÉrase sb_index=%d,Üast_data_lun=%d.\n",

847 
sb
->
sb_ödex
, 
	`œ°_d©a_lun
(&sb->
sub_group
[0]));

848 
	`ªmove_sb_‰om_‰ì_blk_li°
(
sdev
, 
sb
);

849 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

850 
	`sh™n⁄_•ö_lock
(&
sdev
->
waô_îa£d_lock
);

851 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_îa£d
);

852 
sdev
->
waô_îa£d_blk˙t
++;

853 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
waô_îa£d_lock
);

855 
	`debugs4
("sb(sb_ödex=%dËi†bœnk su≥∏block.\n", 
sb
->
sb_ödex
);

857 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


858 
	`c›y_ïûog_buf
(
sdev
, 
sb
->
sb_ödex
, 
ïûog
);

860 
	`ªmove_sb_‰om_‰ì_blk_li°
(
sdev
, 
sb
);

861 i‡((
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
Ë!
EPILOG_WATERMARK
) ||

862 ((
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
Ë!
HOT_INDEX
Ë&& (sh™n⁄_mem_ªadw(&ïûog->ïûog_hód->hód.hód_ödexË!
COLD_INDEX
))) {

863 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

864 
sb
->
°©e
 = 
RECOVER_ERR_BLOCK
;

865 
	`sh™n⁄_îr
("sb_index=%d, watermark=0x%lx, head_index=%d!\n",

866 
sb
->
sb_ödex
, ()
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
),

867 
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
));

870 i‡(
∑rôy_is_em±y
)

871 
sb
->
ªcovî_°©us
 |
NEED_RECLAIM
;

872 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
£quí˚_numbî_lock
);

873 i‡(
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.
£q_num
Ë>
sdev
->
£quí˚_numbî
)

874 
sdev
->
£quí˚_numbî
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog
->
ïûog_hód
->
hód
.
£q_num
) + 1;

875 
	`ªåõve_sm¨t_‰om_ïûog_hód
(
sdev
, &
ïûog
->
ïûog_hód
->
hód
);

876 i‡((
sdev
->
œ°_blk
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)] =
NULL
) || \

877 (
sdev
->
œ°_blk
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)]->
£q_num
 < 
sb
->seq_num))

878 
sdev
->
œ°_blk
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)] = 
sb
;

879 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
£quí˚_numbî_lock
);

881 i‡(
√ed_ªsˇn
 || 
∑rôy_is_em±y
) {

882 
	`put_öto_waô_c›y_li°
(
sb
);

884 i‡(0 !
	`ªcovî_lm±
(
sb
, 
ïûog
)) {

885 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

886 
sb
->
°©e
 = 
RECOVER_ERR_BLOCK
;

888 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) == 0) {

889 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

890 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_îa£d_lock
);

891 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_îa£d
);

892 
sdev
->
waô_îa£d_blk˙t
++;

893 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_îa£d_lock
);

895 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)]);

896 
sb
->
°©e
 = 
u£d_blk_°©e
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)];

897 
	`add_to_li°_by_£q_num
(
sb
, &
sdev
->
u£d_blocks
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)]);

898 
sdev
->
u£d_blk˙t
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)]++;

899 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
	`sh™n⁄_mem_ªadw
(&
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
)]);

906 i‡(
sb
->
°©e
 =
RECOVER_ERR_BLOCK
) {

907 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
ªcovî_îr_blocks
);

908 
sdev
->
ªcovî_îr_blk˙t
++;

911 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

912 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

913 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

914 
	`‰ì_ªq
(
ªq
);

916 
	`sb_‰ì_ïûog
(
sb
);

917 
	`‰ì_sbio
(
sbio
);

919 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

920 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

922 
__echo_out
;

923 
	}
}

925 
	$ªad_ïûog
(
sh™n⁄_sb
 *
sb
)

927 
sh™n⁄_bio
 *
sbio
;

928 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

929 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

930 
sh™n⁄_ïûog
 *
ïûog
;

931 
sub_group
 *
group
;

932 
°rùe
, 
∑ge_°rùes
, 
group_ödex
, 
lun
, 
lun_off£t
, 
lun_ö_group
, 
∂™e
, 
i
;

933 
logicbs_ö_∑ge_°rùe
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
;

934 
sb_lun_pba
, 
logicbs_ö_eblk
;

936 
__echo_ö
;

937 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

938 
	`£t_sbio_debug_èg
(
sbio
, 
READ_LAST_EPILOG_TAG
);

940 
ïûog
 = 
	`ïûog_Æloc
(
sb
->
ïûog_size
, 
sdev
);

941 i‡(
NULL
 =
ïûog
) {

942 
	`sh™n⁄_w¨n
("epilog_alloc failed, sleep 5msándÅryágain.\n");

943 
	`sh™n⁄_m¶ìp
(5);

945 } 
NULL
 =
ïûog
);

946 
	`sh™n⁄_mem_wrôeq
(0, &
ïûog
->
ïûog_hód
->
hód
.
ïûog_w©îm¨k
);

947 
sb
->
ïûog
 =Épilog;

948 
∑ge_°rùes
 = (
sb
->
logicbs_ö_ïûog
 + 
logicbs_ö_∑ge_°rùe
 - 1) /Üogicbs_in_page_stripe;

949 i‡(
sdev
->
øid5_suµ‹ãd
)

950 
sbio
->
logicbs
 = 
∑ge_°rùes
 * (
logicbs_ö_∑ge_°rùe
 + 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_chunk
);

952 
sbio
->
logicbs
 = 
∑ge_°rùes
 * 
logicbs_ö_∑ge_°rùe
;

953 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

954 
sbio
->
ˇŒback
 = 
ªad_ïûog_ˇŒback
;

955 
sbio
->
may_¶ìp_ö_ˇŒback
 = 99;

956 
sbio
->
d©a
 = 
sb
;

958 
sb_lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
;

959 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

960 
°rùe
 = 
sdev
->
∑ges_ö_eblock
 - 
∑ge_°rùes
; stripe < sdev->pages_in_eblock; stripe++) {

961 
group_ödex
 = 0; group_ödex < 
sdev
->
∑rôy_groups
; group_index++) {

962 
group
 = &
sb
->
sub_group
[
group_ödex
];

963 i‡(
group
->
phy_ödex
 < 0)

965 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

966 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

967 
lun_ö_group
 = 0;

969 i‡(
lun_ö_group
 =
sb
->
mö_d©a_luns
) {

970 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

971 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

974 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

975 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

976 } 
	`is_bad_lun
(
sb
, 
lun
));

979 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

980 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

981 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

982 
	`£t_ªq_debug_èg
(
ªq
, 
READ_LAST_EPILOG_TAG
, 0);

983 
ªq
->
›code
 = 
sh_cmd_ªad
;

984 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

985 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

986 
ªq
->
pba
.
lun
 =Üun;

987 
ªq
->
pba
.
lun_pba
 = 
sb_lun_pba
 + 
∂™e
 * 
logicbs_ö_eblk
 + 
°rùe
 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

988 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

989 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

990 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

991 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

992 
dma_Áûed
;

994 
ªq
->
sbio
 = sbio;

995 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

996 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

997 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

1001 
lun_ö_group
++;

1002 } 
lun_off£t
 !
group
->
∑rôy_lun_off£t
);

1006 
	`sh™n⁄_pick_ªque°
(
sdev
, 0xffffffff);

1008 
__echo_out
;

1012 
dma_Áûed
:

1013 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1014 
	`‰ì_ªq
(
ªq
);

1015 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1016 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1017 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1018 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1019 
	`‰ì_ªq
(
ªq
);

1021 
	`‰ì_sbio
(
sbio
);

1022 
	`sb_‰ì_ïûog
(
sb
);

1024  -
ENOMEM
;

1025 
	}
}

	@shannon_err_handler.c

12 
	~"sh™n⁄.h
"

15 
	$sb_m¨k_îr‹_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
)

17 
sh™n⁄_lun
 *
lu≈
 = 
dev
->
lun
[lun];

18 
ödex
, 
off£t
;

19 
bôs
 = (*
sb
->
îr‹_lun
)*8;

21 
ödex
 = (
lun
 * 
dev
->
∂™es
Ë/ 
bôs
;

22 
off£t
 = (
lun
 * 
dev
->
∂™es
Ë% 
bôs
;

24 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
off£t
 + 
∂™e
, 
sb
->
îr‹_lun
 + 
ödex
) == 0) {

25 
	`sh™n⁄_©omic_öc
(&
lu≈
->
îr_blocks
);

26 i‡(
dev
->
îr_check_debug
)

27 
	`debugs0
("%s:Üun=%d,Éº_blocks=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
lun
, 
	`sh™n⁄_©omic_ªad
(&
lu≈
->
îr_blocks
));

28 i‡(
dev
->
su•icious_bad_lun_ödiˇt‹
 && (
	`sh™n⁄_©omic_ªad
(&
lu≈
->
îr_blocks
) >= dev->suspicious_bad_lun_indicator)) {

29 i‡((
lu≈
->
bad
 =1Ë|| 
	`sh™n⁄_ã°_bô
÷u≈->
phy_lun_num
, (*)
dev
->
mbr
.
bad_phy_lun_m≠
))

31 i‡(!
	`sh™n⁄_ã°_™d_£t_bô
(
lun
, (*)
dev
->
îr_check_bôm≠
)) {

32 
lu≈
->
su•icious_bad_lun
 = 1;

33 i‡(
dev
->
îr_check_debug
)

34 
	`debugs0
("%s: sèπ checkögÜun=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
lun
);

36 
	`sh™n⁄_queue_w‹k
(
dev
->
misc_wq
, &
lu≈
->
îr_checkög_w‹k
);

40 
	}
}

42 
	$sb_˛ór_îr‹_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
)

44 
sh™n⁄_lun
 *
lu≈
 = 
dev
->
lun
[lun];

45 
ödex
, 
off£t
;

46 
bôs
 = (*
sb
->
îr‹_lun
)*8;

48 
ödex
 = (
lun
 * 
dev
->
∂™es
Ë/ 
bôs
;

49 
off£t
 = (
lun
 * 
dev
->
∂™es
Ë% 
bôs
;

51 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô
(
off£t
 + 
∂™e
, 
sb
->
îr‹_lun
 + 
ödex
)) {

52 i‡(
dev
->
îr_check_debug
)

53 
	`debugs0
("%s:Üun=%d,Éº_blocks=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
lun
, 
	`sh™n⁄_©omic_ªad
(&
lu≈
->
îr_blocks
));

54 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
lu≈
->
îr_blocks
)) {

55 i‡(
lu≈
->
su•icious_bad_lun
 && 
	`sh™n⁄_ã°_™d_˛ór_bô
(
lun
, (*)
dev
->
îr_check_bôm≠
)) {

56 i‡(
dev
->
îr_check_debug
)

57 
	`debugs0
("%s:Éº checkögágaö !!!Üun=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
lun
);

59 
	`sh™n⁄_queue_w‹k
(
dev
->
misc_wq
, &
lu≈
->
îr_checkög_w‹k
);

63 
	}
}

65 
	$is_îr‹_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
)

67 
ödex
, 
off£t
;

68 
bôs
 = (*
sb
->
îr‹_lun
)*8;

70 
ödex
 = (
lun
 * 
dev
->
∂™es
Ë/ 
bôs
;

71 
off£t
 = (
lun
 * 
dev
->
∂™es
Ë% 
bôs
;

73  
	`sh™n⁄_ã°_bô
(
off£t
 + 
∂™e
, 
sb
->
îr‹_lun
 + 
ödex
);

74 
	}
}

76 
	$sb_m¨k_îr‹_lun_bad
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
)

78 
lun
, 
∂™e
;

80 
lun
 = 0;Üu¿< 
dev
->
lun_cou¡
;Üun++) {

81 
∂™e
 = 0;Öœ√ < 
dev
->
∂™es
;Ölane++) {

82 i‡(
	`is_îr‹_lun
(
dev
, 
sb
, 
lun
, 
∂™e
)) {

83 
	`debugs1
("sb=%d,Üun=%d,Öœ√=%d.\n", 
sb
->
sb_ödex
, 
lun
, 
∂™e
);

84 
	`sb_m¨k_bad_lun
(
sb
, 
lun
);

88 
	}
}

90 
	$m¨k_sb_îr_f‹_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
)

92 
sh™n⁄_sb
 *
sb
;

93 
∂™e
, 
i
;

95 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

96 
sb
 = 
sdev
->
sbs
 + 
i
;

97 i‡(
	`sh™n⁄_ã°_bô
(
lun
->
lun_num
, 
sb
->
bad_lun
))

99 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

100 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
lun
->
lun_num
, 
∂™e
)) {

101 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
lun
->
lun_num
, 
∂™e
);

104 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0)

105 
	`sh™n⁄_©omic_öc
(&
sdev
->
≥ndög_îr_blks
);

107 
	}
}

109 
	$sb_m¨k_bad_lun
(
sh™n⁄_sb
 *
sb
, 
lun_num
)

111 
ödex
, 
off£t
;

112 
bôs
 = (*
sb
->
bad_lun
)*8;

113 
sub_group
 *
group
 = &
sb
->sub_group[
lun_num
/sb->
sdev
->
max_luns_ö_group
];

115 
ödex
 = 
lun_num
/
bôs
;

116 
off£t
 = 
lun_num
%
bôs
;

117 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
off£t
, 
sb
->
bad_lun
 + 
ödex
) == 0) {

118 
	`sh™n⁄_©omic_dec
(&
sb
->
avaûabÀ_luns
);

119 i‡(
	`sh™n⁄_©omic_dec_ªtu∫
(&
group
->
avaûabÀ_luns
) == 3) {

120 
group
->
phy_ödex
 = -1;

121 
	`sh™n⁄_©omic_dec
(&
sb
->
avaûabÀ_groups
);

123 i‡(
sb
->
sb_ödex
 >sb->
sdev
->
mbr_eblocks
/sb->sdev->
∂™es
) {

124 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sb
->
sdev
->
lun
[
lun_num
]->
avaû_d©a_sbs
)) {

125 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

126 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
lun_num
];

127 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
lun
->
phy_lun_num
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
) == 0) {

128 
lun
->
bad
 = 1;

129 
	`sh™n⁄_öfo
("£àbad_phy_lun_m≠:Üun=%d,Öhy_lun_num=%d.\n", 
lun
->
lun_num
,Üun->
phy_lun_num
);

130 i‡(
sdev
->
öô_d⁄e
 >
STAGE9_DONE
) {

131 
	`sh™n⁄_queue_w‹k
(
sdev
->
ª‰esh_wq
, &sdev->
ª‰esh_w‹k
);

132 
sdev
->
ª‰esh_£quí˚
 = sdev->
powî_⁄_£c⁄ds
 / 
MBR_REFRESH_INTERVAL
;

133 
	`sh™n⁄_öfo
("%s:ª‰esh_£quí˚=%d.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
ª‰esh_£quí˚
);

139 
	}
}

141 
	$m¨k_bad_block_dev
(
sh™n⁄_dev
 *
dev
, 
lun
, 
sb_ödex
)

143 
	`sb_m¨k_bad_lun
(
dev
->
sbs
 + 
sb_ödex
, 
lun
);

144 
	}
}

146 
	$is_bad_lun
(
sh™n⁄_sb
 *
sb
, 
lun
)

148 
ödex
, 
off£t
;

149 
bôs
 = (*
sb
->
bad_lun
)*8;

151 
ödex
 = 
lun
/
bôs
;

152 
off£t
 = 
lun
%
bôs
;

154  
	`sh™n⁄_ã°_bô
(
off£t
, 
sb
->
bad_lun
 + 
ödex
);

155 
	}
}

157 
	$is_°©ic_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

159  
	`sh™n⁄_ã°_bô
(
lun
, (*)
sdev
->
°©ic_bad_lun_m≠
);

160 
	}
}

162 
	$is_bad_block_dev
(
sh™n⁄_dev
 *
dev
, 
lun
, 
sb_ödex
)

164  
	`is_bad_lun
(
dev
->
sbs
 + 
sb_ödex
, 
lun
);

165 
	}
}

167 
	$m¨k_su≥r_block_bad
(
sh™n⁄_sb
 *
sb
)

169 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

170 
i
;

172 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

173 
	`sb_m¨k_bad_lun
(
sb
, 
i
);

174 
	}
}

176 
	$ªad_su•icious_bad_lun_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

178 
sh™n⁄_lun
 *
lun
 = (sh™n⁄_lu¿*)
sbio
->
d©a
;

179 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

180 
sb_ödex
 = 0;

181 
sh™n⁄_ªque°
 *
tmp
, *
ªq
 = 
NULL
;

183 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

184 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

186 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

188 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

189 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
,

190 
sdev
->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

191 
sb_ödex
 = 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
;

192 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

193 
	`‰ì_ªq
(
ªq
);

196 
	`‰ì_sbio
(
sbio
);

198 
lun
->
°¨t_sb
 = 
sb_ödex
 + 1;

199 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &
lun
->
ªad_su•icious_bad_lun_w‹k
);

200 
	}
}

202 
	$ªad_su•icious_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
,

203 
sb_ödex
)

205 
i
, 
∂™e
;

206 
sh™n⁄_sb
 *
sb
;

207 
sh™n⁄_bio
 *
sbio
;

208 
sh™n⁄_ªque°
 *
ªq
;

210 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
))) {

211 
	`sh™n⁄_•ö_lock
(&
lun
->
check_lock
);

212 
lun
->
îr_checkög
 = 0;

213 
	`sh™n⁄_•ö_u∆ock
(&
lun
->
check_lock
);

217 
i
 = 
sb_ödex
; i < 
sdev
->
sb_cou¡
; i++) {

218 i‡(
i
 < 
sdev
->
mbr_eblocks
/sdev->
∂™es
)

220 
sb
 = &
sdev
->
sbs
[
i
];

221 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
 || sb->°©ê=
COLD_BLOCK_LIST
) {

223 i‡(
	`is_bad_lun
(
sb
, 
lun
->
lun_num
))

231 i‡(
i
 =
sdev
->
sb_cou¡
) {

232 
	`sh™n⁄_log
("checkög f‹Üu¿%d föished\n", 
lun
->
lun_num
);

233 
	`sh™n⁄_•ö_lock
(&
lun
->
check_lock
);

234 
lun
->
îr_checkög
 = 0;

235 
	`sh™n⁄_•ö_u∆ock
(&
lun
->
check_lock
);

239 i‡(
sdev
->
îr_check_debug
)

240 
	`debugs0
("%s: checkÜun=%d, sb=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
->
lun_num
, 
i
);

242 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

243 
sbio
->
logicbs
 = 0;

244 
sbio
->
ˇŒback
 = 
ªad_su•icious_bad_lun_ˇŒback
;

245 
sbio
->
d©a
 = 
lun
;

246 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

247 
sbio
->
logicbs
 = 
sdev
->
∂™es
;

248 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

250 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

251 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

252 
	`£t_ªq_debug_èg
(
ªq
, 
BAD_LUN_CHECKING_TAG
, 
∂™e
);

253 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

254 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

255 
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

256 
	`sh™n⁄_îr
("dma_map_single failed!\n");

257 
	`sh™n⁄_m¶ìp
(100);

258 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

260 
ªq
->
sbio
 = sbio;

261 
ªq
->
›code
 = 
sh_cmd_ªad
;

262 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

263 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

264 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

265 
ªq
->
pba
.
lun_pba
 = 
sdev
->
logicbs_ö_siblög_eblock
 * 
i
 + sdev->
logicbs_ö_eblock
 * 
∂™e
 + sdev->
logicbs_ö_∑ge
;

266 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

267 
	`add_lun_ªque°_queue_èû
(
lun
, 
ªq
);

270 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &
lun
->
lun£t
->
submô_w‹k
);

271 
	}
}

273 
	$ªad_su•icious_bad_lun_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

275 
sh™n⁄_lun
 *
lun
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_lun, 
ªad_su•icious_bad_lun_w‹k
);

276 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

278 
	`ªad_su•icious_bad_lun
(
sdev
, 
lun
,Üun->
°¨t_sb
);

279 
	}
}

281 
	$sh™n⁄_lun_îr_checkög_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

283 
sh™n⁄_lun
 *
lun
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_lun, 
îr_checkög_w‹k
);

284 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

286 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

289 
	`sh™n⁄_•ö_lock
(&
lun
->
check_lock
);

290 i‡(
lun
->
îr_checkög
) {

291 
	`sh™n⁄_•ö_u∆ock
(&
lun
->
check_lock
);

294 
lun
->
îr_checkög
 = 1;

295 
	`sh™n⁄_•ö_u∆ock
(&
lun
->
check_lock
);

296 
	`sh™n⁄_log
("wakög u∞checkögÅask f‹Üu¿%d\n", 
lun
->
lun_num
);

298 
lun
->
°¨t_sb
 = 0;

299 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &
lun
->
ªad_su•icious_bad_lun_w‹k
);

300 
	}
}

302 
	$£t_√w_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
)

304 
group_ödex
 = 
lun
->
lun_num
 / 
sdev
->
max_luns_ö_group
;

305 
	`sh™n⁄_öfo
("%s():Çew_bad_lun=%d.\n", 
__func__
, 
lun
->
lun_num
);

306 
lun
->
bad
 = 1;

307 i‡(
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] == 0)

308 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] = 
lun
->
lun_num
 + 1;

309 i‡(
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] !(
lun
->
lun_num
 + 1))

310 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] = ~0;

311 
sdev
->
√w_bad_lun
->
bad_lun_Êag
 |sdev->√w_bad_lun->
group_bad_lun
[
group_ödex
];

312 
	}
}

314 
	$£t_fuŒ_dy«mic_bad_blocks
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
)

316 
group_ödex
 = 
lun
->
lun_num
 / 
sdev
->
max_luns_ö_group
;

318 i‡(
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] == 0)

319 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] = 
lun
->
lun_num
 + 1;

320 i‡(
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] !(
lun
->
lun_num
 + 1)) {

321 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] = ~0;

323 
sdev
->
√w_bad_lun
->
bad_lun_Êag
 |sdev->√w_bad_lun->
group_bad_lun
[
group_ödex
];

324 
	}
}

326 
	$move_blks_to_îr_blks_li°
(
sh™n⁄_dev
 *
sdev
)

328 
sh™n⁄_sb
 *
sb
;

329 
i
;

331 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

332 
sb
 = 
sdev
->
sbs
 + 
i
;

334 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

335 i‡((
sb
->
°©e
 !
HOT_BLOCK_LIST
Ë&& (sb->°©ê!
COLD_BLOCK_LIST
)) {

336 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

339 i‡(!
	`sh™n⁄_ã°_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
)) {

340 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

344 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
) {

345 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

346 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

347 
sdev
->
u£d_blk˙t
[
HOT_INDEX
]--;

348 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

349 } i‡(
sb
->
°©e
 =
COLD_BLOCK_LIST
) {

350 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


351 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

353 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

354 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

355 
sdev
->
u£d_blk˙t
[
COLD_INDEX
]--;

356 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

358 
	`BUG
();

359 
sb
->
°©e
 = 
ERROR_BLOCK
;

360 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

361 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
îr_blks
);

362 
sdev
->
îr_blk˙t
++;

363 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

364 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

365 
	`sh™n⁄_öfo
("%s: change sb=%dÅoÇew state %d.\n",

366 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
ERROR_BLOCK
);

368 
	}
}

370 
	$eblk_is_bad_block
(
sh™n⁄_lun
 *
lun
, 
eblk
)

372 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

373 
u16
 *
bbt
 = 
lun
->bbt;

374 
i
 = 0;

376 i‡(
	`bbt_usög_bôm≠
(
bbt
, 
sdev
)) {

377 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

378 i‡(
sdev
->
p£udo_∂™e
)

379  
	`sh™n⁄_ã°_bô_À
(
eblk
 / 
sdev
->
∂™es
, (*)
lun
->
bbt
);

381  
	`sh™n⁄_ã°_bô_À
(
eblk
, (*)
lun
->
bbt
);

383  
	`sh™n⁄_ã°_bô_À
(
eblk
, (*)((
u64
 *)
lun
->
bbt
 + 1));

385 
bbt
[
i
] != 0xFFFF) {

386 i‡(
bbt
[
i
] =
eblk
)

388 
i
++;

393 
	}
}

395 
	$Æl_mbr_block_¨e_bad
(
sh™n⁄_lun
 *
lun
)

397 
eblk
;

399 
eblk
 = 0;Éblk < 
lun
->
sdev
->
mbr_eblocks
;Éblk++)

400 i‡(!
	`eblk_is_bad_block
(
lun
, 
eblk
))

404 
	}
}

406 
	$add_bad_eblk_to_lun_bbt
(
sh™n⁄_lun
 *
lun
, 
bad_eblk
)

408 i‡(
lun
->
bad_blk_cou¡
 >2048 && !
	`bbt_usög_bôm≠
÷un->
bbt
,Üun->
sdev
)) {

409 
i
;

410 
u16
 *
tmp_bbt
 = 
	`sh™n⁄_kmÆloc
(
LUN_BBT_SIZE
, 
GFP_ATOMIC
);

411 i‡(!
tmp_bbt
) {

412 
	`sh™n⁄_îr
("cannotállocateÉnough memory for bbt switchÅo bitmap.\n");

414 
	`sh™n⁄_•ö_lock_bh
(&
lun
->
bbt_lock
);

415 i‡(!
	`bbt_usög_bôm≠
(
lun
->
bbt
,Üun->
sdev
)) {

416 
	`sh™n⁄_mem˝y
(
tmp_bbt
, 
lun
->
bbt
, 
LUN_BBT_SIZE
);

417 
	`sh™n⁄_mem£t
(
lun
->
bbt
, 0, 
LUN_BBT_SIZE
);

418 ((
u64
 *)
lun
->
bbt
)[0] = 
BBT_BITMAP_WATERMARK
;

419 
i
 = 0; i < 
lun
->
bad_blk_cou¡
; i++)

420 
	`sh™n⁄_£t_bô_À
(
tmp_bbt
[
i
] + 64, 
lun
->
bbt
);

422 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun
->
bbt_lock
);

423 
	`sh™n⁄_k‰ì
(
tmp_bbt
);

427 
	`sh™n⁄_•ö_lock_bh
(&
lun
->
bbt_lock
);

428 i‡(
	`eblk_is_bad_block
(
lun
, 
bad_eblk
)) {

429 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun
->
bbt_lock
);

432 i‡(
	`bbt_usög_bôm≠
(
lun
->
bbt
,Üun->
sdev
)) {

433 i‡(
	`sh™n⁄_dev_is_g5
(
lun
->
sdev
)) {

434 i‡(
lun
->
sdev
->
p£udo_∂™e
)

435 
	`sh™n⁄_£t_bô_À
(
bad_eblk
 / 
lun
->
sdev
->
∂™es
,Üun->
bbt
);

437 
	`sh™n⁄_£t_bô_À
(
bad_eblk
, 
lun
->
bbt
);

439 
	`sh™n⁄_£t_bô_À
(
bad_eblk
 + 64, 
lun
->
bbt
);

440 
lun
->
bad_blk_cou¡
++;

442 
lun
->
bbt
[lun->
bad_blk_cou¡
++] = 
bad_eblk
;

443 
lun
->
bbt
[lun->
bad_blk_cou¡
] = 0xFFFF;

445 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun
->
bbt_lock
);

447 
	}
}

449 
	$add_dy«mic_bbt_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

451 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

452 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

453 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

454 
‰ì_Êag
 = ()
sbio
->
d©a2
;

456 
	`debugs1
("sb=%d,Üogicbs=%d.\n", 
sb
->
sb_ödex
, 
sbio
->
logicbs
);

457 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

458 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

459 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

460 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

461 
	`‰ì_ªq
(
ªq
);

463 
	`‰ì_sbio
(
sbio
);

465 i‡(
‰ì_Êag
 && (
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
)) {

466 
	`add_sb_to_‰ì_li°
(
sdev
, 
sb
);

468 
	}
}

470 
	$ªc‹d_bad_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
, 
bad_eblk
)

472 i‡(
	`add_bad_eblk_to_lun_bbt
(
lun
, 
bad_eblk
) < 0)

475 
	`sh™n⁄_©omic_öc
(&
sdev
->
dy«mic_bad_blk˙t
);

476 
	`sh™n⁄_©omic_öc
(&
lun
->
dy«mic_bad_blk˙t
);

478 i‡(
sdev
->
îr_check_debug
)

479 
	`sh™n⁄_öfo
("dy«mi¯bad block: %s:lun=%d,Éblk=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
->
lun_num
, 
bad_eblk
);

481 i‡((
bad_eblk
 < 
sdev
->
mbr_eblocks
Ë&& 
	`Æl_mbr_block_¨e_bad
(
lun
)) {

482 
	`sh™n⁄_öfo
("Æ»mb∏block†öÜu¿%dáª brokí.\n", 
lun
->
lun_num
);

483 
	`£t_√w_bad_lun
(
sdev
, 
lun
);

484 
	`m¨k_sb_îr_f‹_bad_lun
(
sdev
, 
lun
);

485 
	`move_blks_to_îr_blks_li°
(
sdev
);

486 
	`check_îr_blk˙t_öc
(
sdev
);

489 
	}
}

491 
lun_ª‰esh_mbr_eblks
(
sh™n⁄_lun
 *
lun
);

493 
	$lun_add_dy«mic_bbt
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_lun
 *
lun
, 
bad_eblk
)

495 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

496 
sh™n⁄_ªque°
 *
ªq
, *
fú°_ªq
;

497 
sh™n⁄_poﬁ
 *
•oﬁ
;

498 
eblk
, 
i
, 
cuºít_∑ge
;

500 i‡(
	`ªc‹d_bad_block
(
sdev
, 
lun
, 
bad_eblk
) < 0)

504 i‡(
bad_eblk
 < 
sdev
->
mbr_eblocks
)

507 
	`sh™n⁄_muãx_lock
(&
lun
->
ª‰esh_£m
);

508 i‡(
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
Ë> 
LUN_REFRESH_MBR_THRESHOLD
) {

509 
	`lun_ª‰esh_mbr_eblks
(
lun
);

510 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
ª‰esh_£m
);

514 
cuºít_∑ge
 = 
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
);

515 
	`sh™n⁄_©omic_öc
(&
lun
->
√xt_em±y_∑ge
);

517 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_∑ge
 * sdev->
mbr_eblocks
, &
sbio
->
u£r_cou¡
);

518 
sbio
->
logicbs
 +
sdev
->
logicbs_ö_∑ge
 * sdev->
mbr_eblocks
;

520 
eblk
 = 0;Éblk < 
sdev
->
mbr_eblocks
;Éblk++) {

521 
fú°_ªq
 = 
NULL
;

522 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

523 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

524 
	`£t_ªq_debug_èg
(
ªq
, 
ADD_BBT_TO_MBR_TAG
, 
i
);

525 
ªq
->
›code
 = 
sh_cmd_wrôe
;

526 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

527 
ªq
->
hód
 = 
MBR_HEAD
;

528 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

529 
ªq
->
lba
 = 
MBR_WATERMARK
;

530 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

531 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

532 
ªq
->
pba
.
lun_pba
 = 
eblk
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
logicbs_ö_∑ge
 + \

533 
cuºít_∑ge
 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

534 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

535 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0xFF, 
sdev
->
logicb_size
);

536 
	`sh™n⁄_mem_wrôew
(
bad_eblk
, 
ªq
->
vút_addr
);

537 
ªm≠
:

538 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

539 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

540 
	`sh™n⁄_w¨n
("shannon_dma_map_singleÉrror.\n");

541 
	`sh™n⁄_m¶ìp
(5 * 
	`gë_HZ
());

542 
ªm≠
;

544 
ªq
->
sbio
 = sbio;

545 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

546 i‡(
i
 == 0) {

547 
fú°_ªq
 = 
ªq
;

548 
	`SHANNON_INIT_LIST_HEAD
(&
fú°_ªq
->
chunk_li°
);

550 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
fú°_ªq
->chunk_list);

553 
	`sh™n⁄_muãx_lock
(&
lun
->
lun£t
->
sq_£m
);

554 
	`__sh™n⁄_wrôe_cmd
(
lun
->
lun£t
, 
fú°_ªq
);

555 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
lun£t
->
sq_£m
);

556 
	`upd©e_lun£t_sq_hód
(
lun
->
lun£t
);

559 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
ª‰esh_£m
);

561 
sdev
->
ovî¥ovisi⁄_øã
 = 
	`ˇlcuœã_ovî¥ovisi⁄_øã
(sdev);

562 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

563 i‡(
•oﬁ
) {

564 
ªt
 = 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

565 i‡((
ªt
 =0Ë&& (
•oﬁ
->
ovî¥ovisi⁄
 < 
SHN_OVERPROVISION_THRESHOLD
)) {

566 
	`sh™n⁄_w¨n
("pool overprovision is below %d%% dueÅo dynamic bad block, setÖoolÑeadonly.\n",

567 
SHN_OVERPROVISION_THRESHOLD
/100);

568 
	`sh™n⁄_£t_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
•oﬁ
->
ªad⁄ly_ªas⁄
);

569 
	`•oﬁ_upd©e_ac˚ss_mode
(
•oﬁ
);

571 
	`•oﬁ_put_ª„ªn˚
(
•oﬁ
);

574 i‡(
sdev
->
ovî¥ovisi⁄_øã
 < 
SHN_OVERPROVISION_THRESHOLD
) {

575 
	`sh™n⁄_w¨n
("overprovision is below %d%% dueÅo dynamic bad block, set diskÑeadonly.\n",

576 
SHN_OVERPROVISION_THRESHOLD
/100);

577 
	`sh™n⁄_£t_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
sdev
->
ªad⁄ly_ªas⁄
);

578 
	`upd©e_ac˚ss_mode
(
sdev
);

582 
	}
}

584 
	$add_dy«mic_bbt
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
‰ì_Êag
)

586 
lun
, 
∂™e
;

587 
sh™n⁄_bio
 *
sbio
;

589 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

590 
	`£t_sbio_debug_èg
(
sbio
, 
ADD_BBT_TO_MBR_TAG
);

591 
sbio
->
ˇŒback
 = 
add_dy«mic_bbt_ˇŒback
;

592 
sbio
->
d©a
 = 
sb
;

593 
sbio
->
d©a2
 = (*)
‰ì_Êag
;

596 
sbio
->
logicbs
 = 1;

597 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

599 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

600 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

601 i‡(
	`is_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
)) {

602 
	`sh™n⁄_öfo
("add_dynamic_bbt(): %s: sb=%d,Üun=%d,Ölane=%d.\n",

603 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
lun
, 
∂™e
);

604 
	`lun_add_dy«mic_bbt
(
sbio
, 
sdev
->
lun
[lun], 
sb
->
sb_ödex
 * sdev->
∂™es
 + 
∂™e
);

605 
	`sb_˛ór_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
);

610 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

611 
	}
}

614 
	$check_îr_blk˙t_öc
(
sh™n⁄_dev
 *
sdev
)

616 i‡(
sdev
->
îr_blk˙t
 == 0)

619 i‡(
sdev
->
ªcovî_thªad
)

620 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
ªcovî_thªad
);

622 i‡(
sdev
->
îr_blk˙t
 > 5) {

624 
	`sh™n⁄_£t_bô
(
SHN_REASON_MANY_BAD_BLOCKS
, &
sdev
->
ªdu˚d_wrôe_ªas⁄
);

625 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
ac˚ss_mode_w‹k
);

627 
	}
}

629 
	$check_îr_blk˙t_dec
(
sh™n⁄_dev
 *
sdev
)

631 i‡(
sdev
->
îr_blk˙t
 == 0) {

632 
	`sh™n⁄_˛ór_bô
(
SHN_REASON_MANY_BAD_BLOCKS
, &
sdev
->
ªdu˚d_wrôe_ªas⁄
);

633 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
ac˚ss_mode_w‹k
);

635 
	}
}

637 
ölöe
 
	$__add_sb_to_îr_blks_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

639 
	`sh™n⁄_öfo
("%s: ch™gêsb=%d sèã=%dÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
,

640 
sb
->
sb_ödex
, sb->
°©e
, 
ERROR_BLOCK
);

641 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

642 
sb
->
°©e
 = 
ERROR_BLOCK
;

644 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0) {

645 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
)

646 
	`sh™n⁄_©omic_öc
(&
sdev
->
≥ndög_îr_blks
);

648 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
îr_blks
);

649 
sdev
->
îr_blk˙t
++;

650 
	`check_îr_blk˙t_öc
(
sdev
);

651 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

652 
	}
}

654 
	$h™dÀ_wrôe_îr‹
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
sh™n⁄_cmd_öfo
 *
öfo
)

656 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0) {

657 i‡(
sb
->
sb_ödex
 >
dev
->
mbr_eblocks
/dev->
∂™es
)

658 
	`sh™n⁄_©omic_öc
(&
dev
->
≥ndög_îr_blks
);

660 
	}
}

662 
	$ª˛aim_ªad_îr‹_sb
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

664 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

665 i‡((
sb
->
°©e
 !
HOT_BLOCK_LIST
Ë&& (sb->°©ê!
COLD_BLOCK_LIST
)) {

666 
	`sh™n⁄_öfo
("%s: sb=%d, state=%d, in_write_logicbs=%d.\n",

667 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
ö_wrôe_logicbs
));

668 
out
;

670 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
) {

671 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

672 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

673 
sdev
->
u£d_blk˙t
[
HOT_INDEX
]--;

674 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

675 } i‡(
sb
->
°©e
 =
COLD_BLOCK_LIST
) {

676 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


677 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

679 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

680 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

681 
sdev
->
u£d_blk˙t
[
COLD_INDEX
]--;

682 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

684 
	`__add_sb_to_îr_blks_li°
(
sdev
, 
sb
);

685 
out
:

686 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

687 
	}
}

689 
	$check_ªªad_Áûed_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

691 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
NULL
;

692 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

693 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

694 
sh™n⁄_sb
 *
sb
;

695 
lun
, 
ªt
;

697 i‡(
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)) {

699 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
)

700 
ªq
->
sbio
->
°©us
 |
HAVE_BLANK_SECTOR
;

701 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

702 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

703 
ªq
->
°©e
 = 
REQ_DONE
;

704 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

707 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

708 i‡(
•oﬁ
) {

709 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

710 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

711 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

712 
	`BUG
();

714 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

715 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

716 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

717 
	`BUG
();

719 
sdisk
 = &
ns
->sdisk;

722 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

723 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

724 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

725 i‡(
ªt
 < 0) {

726 
	`sh™n⁄_log
("%s:Üb®%x i†disˇrdÇow. Ju° cÀ¨ iàtÿzîo.\n", 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

728 
ªq
->
_ecc
 = 0;

729 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0,Ñeq->
Àngth
);

730 
ªq
->
°©e
 = 
REQ_DONE
;

731 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

732 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

735 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

736 
ªq
->
£q_num
 = 
sb
->seq_num;

738 
ªq
->
ªªad
 = 0;

739 
ªq
->
ªad_luns_f‹_ªcovî
 = 0;

740 
ªq
->
_ecc
 = 0;

741 
ªq
->
_mëad©a
 = 0;

742 
lun
 = 
ªq
->
pba
.lun;

743 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

744 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

745 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

748 
	}
}

750 
	$ªq_is_ö_a˘ive_chunks_ønge
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
,

751 *
phód
)

753 
di°
, 
hód_ödex
;

754 
ö_ønge
 = 
sdev
->
dummy_w‹dlöe
 ? sdev->dummy_w‹dlöê: sdev->
sh¨ed_∑ges
 * 2 - 1;

755 
sb_ödex
 = 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
;

756 
chunk
 = (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
;

758 i‡(
sb_ödex
 =
sdev
->
wr_sb
[
HOT_INDEX
])

759 
hód_ödex
 = 
HOT_INDEX
;

760 i‡(
sdev
->
u£_duÆ_hód
 && (
sb_ödex
 =sdev->
wr_sb
[
COLD_INDEX
]))

761 
hód_ödex
 = 
COLD_INDEX
;

765 
di°
 = 
sdev
->
wr_chunk
[
hód_ödex
] - 
chunk
;

767 i‡((0 <
di°
Ë&& (di° < 
ö_ønge
Ë&& (
sb_ödex
 =
sdev
->
wr_sb
[
hód_ödex
])) {

768 i‡(
phód
)

769 *
phód
 = (
hód_ödex
 =
HOT_INDEX
Ë? 
HOT_HEAD
 : 
COLD_HEAD
;

774 
	}
}

776 
	$fûl_thí_ªad_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

778 
sh™n⁄_îr‹_h™dÀr
 *
h™dÀr
 = 
	`c⁄èöî_of
(
w‹k
, shannon_error_handler, work);

779 
sh™n⁄_dev
 *
sdev
 = 
h™dÀr
->
dev
;

780 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

781 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

782 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

783 
sh™n⁄_ªque°
 *
ªq
 = 
h™dÀr
->req;

784 
sh™n⁄_sb
 *
sb
;

785 
lun_pba
Üun_pba;

786 
ªt
, 
lun
, 
fûl
 = 0;

788 
	`BUG_ON
(
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
));

789 i‡(
•oﬁ
) {

790 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

791 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

792 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

793 
	`BUG
();

795 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

796 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

797 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

798 
	`BUG
();

800 
sdisk
 = &
ns
->sdisk;

804 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

805 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, 
NULL
, 
sdisk
);

806 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

807 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

809 i‡(
ªt
 < 0) {

810 
	`sh™n⁄_log
("%s:Üb®%x ha†Æªady bì¿ovîwrôãn.\n", 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

811 
ªq
->
°©e
 = 
REQ_DONE
;

812 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

813 
	`sh™n⁄_k‰ì
(
h™dÀr
);

817 i‡((
lun_pba
.lun_pb®!
ªq
->
pba
.lun_pbaË|| (lun_pba.
lun
 !=Ñeq->pba.lun)) {

818 
	`sh™n⁄_log
("%s:Üba=%ld has beenÑe-written: oldÜun=%dÜun_pba=%d,ÇewÜun=%dÜun_pba=%d.\n",

819 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Üun_pba.lun,Üun_pba.lun_pba);

820 
ªq
->
pba
 = 
lun_pba
;

821 
fûÀd_ªad
;

824 i‡(
	`ªq_is_ö_a˘ive_chunks_ønge
(
sdev
, 
ªq
, 
NULL
)) {

825 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

826 
hód
;

827 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

828 i‡(
	`ªq_is_ö_a˘ive_chunks_ønge
(
sdev
, 
ªq
, &
hód
)) {

829 
logicbs_˙t
 = 0, 
max_logicbs
;

830 
°rùe_˙t
 = 
sdev
->
dummy_w‹dlöe
 ? sdev->dummy_w‹dlöê: (sdev->
sh¨ed_∑ges
 - 1);

831 
sb
 = 
sdev
->
sbs
 + sdev->
wr_sb
[
hód
 & 
HEAD_INDEX_MASK
];

832 
max_logicbs
 = 
°rùe_˙t
 * (
sb
->
mö_d©a_luns
 * 
	`sh™n⁄_©omic_ªad
(&sb->
avaûabÀ_groups
Ë* 
sdev
->
logicbs_ö_chunk
);

833 
	`sh™n⁄_öfo
("filláctive chunks:Üba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x, wr_sb=%d,"

835 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
, 
sdev
->
wr_sb
[
hód
 & 
HEAD_INDEX_MASK
],

836 
sdev
->
wr_chunk
[
hód
 & 
HEAD_INDEX_MASK
], sdev->
wr_group
[head & HEAD_INDEX_MASK], head);

837 
	`ªq_is_ö_a˘ive_chunks_ønge
(
sdev
, 
ªq
, &
hód
Ë&& (
logicbs_˙t
 < 
max_logicbs
)) {

838 
	`£nd_dummy_ªq
(
sdev
, 
hód
);

839 
logicbs_˙t
++;

842 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

843 
fûl
 = 1;

846 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

847 
ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

848 
ªq
->
°©e
 = 
REQ_DONE
;

849 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

850 
	`sh™n⁄_k‰ì
(
h™dÀr
);

855 
fûÀd_ªad
:

856 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

857 
ªq
->
£q_num
 = 
sb
->seq_num;

858 
ªq
->
ªªad
 &~
REREAD_NUM_MASK
;

859 
ªq
->
_ecc
 = 0;

860 
ªq
->
_mëad©a
 = 0;

861 
lun
 = 
ªq
->
pba
.lun;

862 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

863 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

865 i‡(
fûl
 && !
	`Æl_ªq_queue_is_em±y
(
sdev
))

866 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

868 
	`sh™n⁄_k‰ì
(
h™dÀr
);

869 
	}
}

871 
	$fûl_thí_ªad_w‹k
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

874 
sh™n⁄_îr‹_h™dÀr
 *
h™dÀr
 = 
	`sh™n⁄_kmÆloc
((sh™n⁄_îr‹_h™dÀr), 
GFP_ATOMIC
);

875 i‡(
h™dÀr
) {

876 
	`sh™n⁄_öô_w‹k
(&
h™dÀr
->
w‹k
, 
fûl_thí_ªad_èsk
);

877 
h™dÀr
->
dev
 = 
sdev
;

878 
h™dÀr
->
ªq
 =Ñeq;

879 
	`sh™n⁄_queue_w‹k
(
sdev
->
ªad_îr_wq
, &
h™dÀr
->
w‹k
);

881 
	`sh™n⁄_îr
("Allocate memory failed!\n");

882 
ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

883 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

884 
ªq
->
°©e
 = 
REQ_DONE
;

885 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

887 
	}
}

889 
£nd_øid5_ªcovîy_ªq
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
, sh™n⁄_ªque° *
Áûed_ªq
);

890 
	$øid5_ªcovîy_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

892 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

893 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

894 
sh™n⁄_ªque°
 *
ªq
, *
Áûed_ªq
 = (sh™n⁄_ªque° *)
sbio
->
d©a2
;

895 
sub_group
 *
group
 = &
sb
->sub_group[
Áûed_ªq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

896 
√xt_lun
, 
lun_off£t
;

898 
Áûed_ªq
->
ªad_luns_f‹_ªcovî
++;

899 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

900 i‡(
Áûed_ªq
->
ªcovî_buf
 =
NULL
) {

901 
Áûed_ªq
->
ªcovî_buf
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

902 i‡(
Áûed_ªq
->
ªcovî_buf
 =
NULL
) {

903 
	`sh™n⁄_îr
("cannotállocate memory forÑecover_buf!\n");

904 
Áûed_ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

905 
Áûed_ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

906 
Áûed_ªq
->
°©e
 = 
REQ_DONE
;

907 
	`sbio_ªÀa£
(
sdev
, 
Áûed_ªq
->
sbio
);

908 
out
;

912 i‡((
Áûed_ªq
->
£q_num
 !0Ë&& (Áûed_ªq->£q_num !
sb
->seq_num) && \

913 (
Áûed_ªq
->
£q_num
 !
MAX_SEQ_NUM
) && \

914 (
sdev
->
öô_d⁄e
 >
STAGE9_DONE
)) {

915 
	`sh™n⁄_log
("%s():Üba=%d,Üun=%d,Üun_pba=%d, seq_num=0x%x, sb=%d, sb->seq_num=0x%x.\n",

916 
__func__
, 
Áûed_ªq
->
lba
, faûed_ªq->
pba
.
lun
, faûed_ªq->pba.
lun_pba
,

917 
Áûed_ªq
->
£q_num
, 
sb
->
sb_ödex
, sb->seq_num);

918 
Áûed_ªq
->
ªªad
 &~
RAID_READ_MASK
;

919 i‡(
Áûed_ªq
->
ªcovî_buf
 !
NULL
) {

920 
	`‰ì_logicb_buf
(
sdev
, 
Áûed_ªq
->
ªcovî_buf
);

921 
Áûed_ªq
->
ªcovî_buf
 = 
NULL
;

923 
	`check_ªªad_Áûed_ªq
(
sdev
, 
Áûed_ªq
);

924 
‰ì
;

927 i‡(
Áûed_ªq
->
£q_num
 =
MAX_SEQ_NUM
)

928 
Áûed_ªq
->
£q_num
 = 
sb
->seq_num;

930 i‡(
sbio
->
°©us
) {

931 
Áûed_ªq
->
ªªad
 &~
RAID_READ_MASK
;

932 i‡(
Áûed_ªq
->
ªcovî_buf
 !
NULL
) {

933 
	`‰ì_logicb_buf
(
sdev
, 
Áûed_ªq
->
ªcovî_buf
);

934 
Áûed_ªq
->
ªcovî_buf
 = 
NULL
;

940 i‡((
sb
->
°©e
 =
WAIT_ERASE_BLOCK
Ë|| (sb->°©ê=
DISCARDED_BLOCK
) || \

941 ((
sb
->
°©e
 =
FREE_BLOCK
Ë&& (
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
))) {

942 
	`check_ªªad_Áûed_ªq
(
sdev
, 
Áûed_ªq
);

944 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

945 
Áûed_ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

946 
Áûed_ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

947 
	`sh™n⁄_îr
("%s:Ñaid5_recovery failed! setÅhe failed_req's ECCÅo 0xF2,Üba=0x%lx,Üun=%d,Üun_pba=%d.\n",

948 
sdev
->
sdisk
.
disk_«me
, 
Áûed_ªq
->
lba
, faûed_ªq->
pba
.
lun
, faûed_ªq->pba.
lun_pba
);

949 
	`sh™n⁄_îr
("... because %s: sb_index=%d, state=0x%x,Üun=%d,Üun_pba=%d,Écc=0x%x.\n",

950 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
);

952 
Áûed_ªq
->
°©e
 = 
REQ_DONE
;

953 
	`sbio_ªÀa£
(
sdev
, 
Áûed_ªq
->
sbio
);

956 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

957 
	`__sh™n⁄_bôm≠_x‹
(
Áûed_ªq
->
ªcovî_buf
, faûed_ªq->ªcovî_buf, 
ªq
->
vút_addr
, 
sdev
->
logicb_size
 * 8);

958 
Áûed_ªq
->
_mëad©a
 = 
ªq
->_metadata ^ failed_req->_metadata;

960 i‡(
Áûed_ªq
->
ªad_luns_f‹_ªcovî
 =
sb
->
mö_d©a_luns
) {

962 
Áûed_ªq
->
_ecc
 = 0;

963 i‡(
	`decom¥ess_mëad©a
(
Áûed_ªq
)) {

964 
sh™n⁄_sb
 *
tmp_sb
 = 
sdev
->
sbs
 + 
Áûed_ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

965 
	`sh™n⁄_îr
("%s:Übaánd metadata don't match.Üun=%d,Üun_pba=%d,Üba=0x%lx, metadata=0x%lx, sb=%d, state=%d, seq_num=0x%lx.\n",

966 
sdev
->
sdisk
.
disk_«me
, 
Áûed_ªq
->
pba
.
lun
, faûed_ªq->pba.
lun_pba
, faûed_ªq->
lba
,

967 ()
Áûed_ªq
->
_mëad©a
, 
tmp_sb
->
sb_ödex
,Åmp_sb->
°©e
,Åmp_sb->
£q_num
);

968 
Áûed_ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

970 
Áûed_ªq
->
°©e
 = 
REQ_DONE
;

971 
	`sbio_ªÀa£
(
sdev
, 
Áûed_ªq
->
sbio
);

974 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& ((
sb
->
°©e
 =
HOT_BLOCK_LIST
Ë|| (sb->°©ê=
COLD_BLOCK_LIST
)))

975 
	`ª˛aim_ªad_îr‹_sb
(
sdev
, 
sb
);

978 
lun_off£t
 = (
ªq
->
pba
.
lun
 + 
sdev
->
max_luns_ö_group
 - 
group
->
°¨t_lun
) % sdev->max_luns_in_group;

980 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

981 
√xt_lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

982 } 
	`is_bad_lun
(
sb
, 
√xt_lun
Ë|| (√xt_lu¿=
Áûed_ªq
->
pba
.
lun
));

984 
sbio
->
logicbs
 = 1;

985 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

986 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

987 
	`£t_ªq_debug_èg
(
ªq
, 
RAID5_RECOVERY_TAG
, 
√xt_lun
);

988 
ªq
->
pba
.
lun
 = 
√xt_lun
;

989 
	`£nd_øid5_ªcovîy_ªq
(
sb
, 
sbio
, 
ªq
, 
Áûed_ªq
);

994 
‰ì
:

995 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

996 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

997 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

998 
	`‰ì_ªq
(
ªq
);

1000 
out
:

1001 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

1002 
	`‰ì_sbio
(
sbio
);

1003 
	}
}

1005 
	$øid5_ªcovîy
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
Áûed_ªq
)

1007 
sh™n⁄_bio
 *
sbio
;

1008 
sh™n⁄_ªque°
 *
ªq
;

1009 
lun
, 
lun_off£t
;

1010 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + 
Áûed_ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1011 
sub_group
 *
group
 = &
sb
->sub_group[
Áûed_ªq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

1013 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1014 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1015 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1016 
sbio
->
logicbs
 = 1;

1017 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

1018 
sbio
->
ˇŒback
 = 
øid5_ªcovîy_ˇŒback
;

1019 
sbio
->
d©a
 = 
sb
;

1020 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

1021 
sbio
->
d©a2
 = 
Áûed_ªq
;

1023 
Áûed_ªq
->
_mëad©a
 = 0;

1024 
Áûed_ªq
->
ªad_luns_f‹_ªcovî
 = 0;

1026 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1027 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1028 
	`is_bad_lun
(
sb
, 
lun
Ë|| (lu¿=
Áûed_ªq
->
pba
.lun)) {

1029 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

1030 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1033 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1034 
ªq
->
sbio
 = sbio;

1035 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1036 
	`£t_ªq_debug_èg
(
ªq
, 
RAID5_RECOVERY_TAG
, 
lun
);

1037 
ªq
->
pba
.
lun
 =Üun;

1038 
	`£nd_øid5_ªcovîy_ªq
(
sb
, 
sbio
, 
ªq
, 
Áûed_ªq
);

1039 
	}
}

1042 
	$£nd_øid5_ªcovîy_ªq
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
, sh™n⁄_ªque° *
Áûed_ªq
)

1044 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1045 
sh™n⁄_ªque°
 *
tmp
;

1046 
lun
;

1048 
ªq
->
›code
 = 
sh_cmd_ªad
;

1049 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1050 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

1051 
ªq
->
pba
.
lun_pba
 = 
Áûed_ªq
->pba.lun_pba;

1052 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

1053 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

1054 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1055 
ªq
->
ªªad
 = 
RAID_READ_MASK
;

1059 i‡((
sb
->
°©e
 =
WAIT_ERASE_BLOCK
Ë|| (sb->°©ê=
DISCARDED_BLOCK
) || \

1060 ((
sb
->
°©e
 =
FREE_BLOCK
Ë&& (
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
))) {

1061 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1062 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1063 
	`‰ì_ªq
(
ªq
);

1065 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
 * sdev->
lun_cou¡
, 
SHANNON_DMA_FROMDEVICE
);

1066 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

1067 
	`‰ì_sbio
(
sbio
);

1069 
Áûed_ªq
->
ªªad
 &~
RAID_READ_MASK
;

1070 i‡(
Áûed_ªq
->
ªcovî_buf
 !
NULL
) {

1071 
	`‰ì_logicb_buf
(
sdev
, 
Áûed_ªq
->
ªcovî_buf
);

1072 
Áûed_ªq
->
ªcovî_buf
 = 
NULL
;

1074 
	`check_ªªad_Áûed_ªq
(
sdev
, 
Áûed_ªq
);

1077 
lun
 = 
ªq
->
pba
.lun;

1078 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

1079 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

1080 
	}
}

1082 
	$Á°_øid5_ªcovîy_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1084 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

1085 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1086 
sh™n⁄_ªque°
 *
ªq
, *
tmp
, *
Áûed_ªq
 = (sh™n⁄_ªque° *)
sbio
->
d©a2
;

1088 
Áûed_ªq
->
_mëad©a
 = 0;

1089 
	`sh™n⁄_mem£t
(
Áûed_ªq
->
ªcovî_buf
, 0, 
sdev
->
logicb_size
);

1090 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1091 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1092 
	`__sh™n⁄_bôm≠_x‹
(
Áûed_ªq
->
ªcovî_buf
, faûed_ªq->ªcovî_buf, 
ªq
->
vút_addr
, 
sdev
->
logicb_size
 * 8);

1093 
Áûed_ªq
->
_mëad©a
 = 
ªq
->_metadata ^ failed_req->_metadata;

1096 i‡((
Áûed_ªq
->
£q_num
 !0Ë&& (Áûed_ªq->£q_num !
sb
->seq_num) && \

1097 (
Áûed_ªq
->
£q_num
 !
MAX_SEQ_NUM
) && \

1098 (
sdev
->
öô_d⁄e
 >
STAGE9_DONE
)) {

1099 
	`sh™n⁄_log
("%s():Üba=%d,Üun=%d,Üun_pba=%d, seq_num=0x%x, sb=%d, sb->seq_num=0x%x.\n",

1100 
__func__
, 
Áûed_ªq
->
lba
, faûed_ªq->
pba
.
lun
, faûed_ªq->pba.
lun_pba
,

1101 
Áûed_ªq
->
£q_num
, 
sb
->
sb_ödex
, sb->seq_num);

1102 
Áûed_ªq
->
ªªad
 &~
RAID_READ_MASK
;

1103 i‡(
Áûed_ªq
->
ªcovî_buf
 !
NULL
) {

1104 
	`‰ì_logicb_buf
(
sdev
, 
Áûed_ªq
->
ªcovî_buf
);

1105 
Áûed_ªq
->
ªcovî_buf
 = 
NULL
;

1108 
	`check_ªªad_Áûed_ªq
(
sdev
, 
Áûed_ªq
);

1109 
‰ì
;

1112 i‡(
Áûed_ªq
->
£q_num
 =
MAX_SEQ_NUM
)

1113 
Áûed_ªq
->
£q_num
 = 
sb
->seq_num;

1115 i‡(
sbio
->
°©us
) {

1116 
Áûed_ªq
->
ªªad
 &~
RAID_READ_MASK
;

1117 i‡(
Áûed_ªq
->
ªcovî_buf
 !
NULL
) {

1118 
	`‰ì_logicb_buf
(
sdev
, 
Áûed_ªq
->
ªcovî_buf
);

1119 
Áûed_ªq
->
ªcovî_buf
 = 
NULL
;

1125 i‡((
sb
->
°©e
 =
WAIT_ERASE_BLOCK
Ë|| (sb->°©ê=
DISCARDED_BLOCK
) || \

1126 ((
sb
->
°©e
 =
FREE_BLOCK
Ë&& (
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
))) {

1127 
	`check_ªªad_Áûed_ªq
(
sdev
, 
Áûed_ªq
);

1129 
	`sh™n⁄_ªcovî_îr
("%s:Ñaid5_recovery failed! setÅhe failed_req's ECC from 0x%xÅo 0xF2,Üba=0x%lx,Üun=%d,Üun_pba=%d.\n",

1130 
sdev
->
sdisk
.
disk_«me
, 
Áûed_ªq
->
_ecc
, faûed_ªq->
lba
, faûed_ªq->
pba
.
lun
, faûed_ªq->pba.
lun_pba
);

1131 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1132 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

1133 
	`sh™n⁄_ªcovî_öfo
("... because %s: sb_index=%d, state=0x%x,Üun=%d,Üun_pba=%d,Écc=0x%x, metadata=0x%lx.\n",

1134 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
_mëad©a
);

1136 i‡(
Áûed_ªq
->
ªªad
 & 
FILL_READ_MASK
) {

1137 
	`sh™n⁄_öfo
("%s:Üba=%ldÜun=%dÜun_pba=%dÅryÅo fillÅhenÑead.\n",

1138 
sdev
->
sdisk
.
disk_«me
, 
Áûed_ªq
->
lba
, faûed_ªq->
pba
.
lun
, faûed_ªq->pba.
lun_pba
);

1139 
	`fûl_thí_ªad_w‹k
(
sdev
, 
Áûed_ªq
);

1140 
‰ì
;

1143 
Áûed_ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

1144 
Áûed_ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

1145 
Áûed_ªq
->
°©e
 = 
REQ_DONE
;

1146 
	`sbio_ªÀa£
(
sdev
, 
Áûed_ªq
->
sbio
);

1151 
Áûed_ªq
->
_ecc
 = 0;

1152 i‡(
	`decom¥ess_mëad©a
(
Áûed_ªq
)) {

1153 
sh™n⁄_sb
 *
tmp_sb
 = 
sdev
->
sbs
 + 
Áûed_ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1154 
	`sh™n⁄_îr
("%s:Übaánd metadata don't match.Üun=%d,Üun_pba=%d,Üba=0x%lx, metadata=0x%lx, sb=%d, state=%d, seq_num=0x%lx.\n",

1155 
sdev
->
sdisk
.
disk_«me
, 
Áûed_ªq
->
pba
.
lun
, faûed_ªq->pba.
lun_pba
, faûed_ªq->
lba
,

1156 ()
Áûed_ªq
->
_mëad©a
, 
tmp_sb
->
sb_ödex
,Åmp_sb->
°©e
,Åmp_sb->
£q_num
);

1157 
Áûed_ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

1159 
Áûed_ªq
->
°©e
 = 
REQ_DONE
;

1160 
	`sbio_ªÀa£
(
sdev
, 
Áûed_ªq
->
sbio
);

1163 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& ((
sb
->
°©e
 =
HOT_BLOCK_LIST
Ë|| (sb->°©ê=
COLD_BLOCK_LIST
)))

1164 
	`ª˛aim_ªad_îr‹_sb
(
sdev
, 
sb
);

1167 
‰ì
:

1168 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1169 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1170 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1171 
	`‰ì_ªq
(
ªq
);

1173 
	`‰ì_sbio
(
sbio
);

1174 
	}
}

1176 
	$Á°_øid5_ªcovîy
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
Áûed_ªq
)

1178 
sh™n⁄_bio
 *
sbio
;

1179 
sh™n⁄_ªque°
 *
ªq
;

1180 
lun
, 
lun_off£t
;

1181 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + 
Áûed_ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1182 
sub_group
 *
group
 = &
sb
->sub_group[
Áûed_ªq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

1183 
lun_ö_group
;

1185 
Áûed_ªq
->
°©e
 = 
REQ_WAIT_RAID5
;

1186 
Áûed_ªq
->
ªcovî_buf
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1188 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1189 
sbio
->
logicbs
 = 
sb
->
mö_d©a_luns
;;

1190 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

1191 
sbio
->
ˇŒback
 = 
Á°_øid5_ªcovîy_ˇŒback
;

1192 
sbio
->
d©a
 = 
sb
;

1193 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

1194 
sbio
->
d©a2
 = 
Áûed_ªq
;

1196 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1197 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1198 
lun_ö_group
 = 0;

1200 
	`is_bad_lun
(
sb
, 
lun
Ë|| (lu¿=
Áûed_ªq
->
pba
.lun)) {

1201 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

1202 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1205 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1206 
ªq
->
sbio
 = sbio;

1207 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1208 
	`£t_ªq_debug_èg
(
ªq
, 
RAID5_RECOVERY_TAG
, 
lun
);

1209 
ªq
->
pba
.
lun
 =Üun;

1210 
ªq
->
›code
 = 
sh_cmd_ªad
;

1211 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1212 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

1213 
ªq
->
pba
.
lun_pba
 = 
Áûed_ªq
->pba.lun_pba;

1214 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1215 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1216 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1217 
ªq
->
ªªad
 = 
RAID_READ_MASK
;

1219 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

1220 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

1222 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

1223 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1224 
lun_ö_group
++;

1225 } 
lun_ö_group
 < 
sb
->
mö_d©a_luns
);

1226 
	}
}

1228 
	$£t_ªad_îr‹_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

1230 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1231 
eblk
 = 
ªq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_eblock
;

1232 
∂™e
 = 
eblk
 % 
sdev
->
∂™es
;

1233 
lun
 = 
ªq
->
pba
.lun;

1235 i‡((
sb
->
£q_num
 =
MAX_SEQ_NUM
Ë|| ((sb->£q_num >
sdev
->
powî_⁄_£q_num
) &&

1236 ((
sb
->
£q_num
 + 
sdev
->
sb_cou¡
 * 50Ë> sdev->
£quí˚_numbî
)) ||

1237 
sdev
->
lun
[lun]->
su•icious_bad_lun
) {

1238 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
)) {

1239 
	`sh™n⁄_log
("%s: markÑead block! sb=%d, state=%d,Üun=%d,Ölane=%d.\n",

1240 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
, 
lun
, 
∂™e
);

1241 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0) {

1242 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
)

1243 
	`sh™n⁄_©omic_öc
(&
sdev
->
≥ndög_îr_blks
);

1245 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
);

1248 
	}
}

1250 
	$__ªq_is_ö_œã°_two_groups
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, 
hód_ödex
)

1252 
sb_ödex
 = 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
;

1253 i‡(
sb_ödex
 =
sdev
->
wr_sb
[
hód_ödex
]) {

1254 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
sb_ödex
];

1255 
chunk
 = (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
;

1256 
group
 = 
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
;

1257 
groups
 = 
chunk
 * 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_groups
Ë+ sb->
sub_group
[
group
].
phy_ödex
;

1258 
wr_groups
 = 
sdev
->
wr_chunk
[
hód_ödex
] * 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_groups
Ë+ sb->
sub_group
[sdev->
wr_group
[hód_ödex]].
phy_ödex
;

1259 i‡((
groups
 =
wr_groups
) || (groups == wr_groups - 1))

1263 
	}
}

1265 
	$ªq_is_ö_œã°_two_groups
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, *
phód
)

1267 
i
;

1269 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

1270 i‡(
	`__ªq_is_ö_œã°_two_groups
(
sdev
, 
ªq
, 
i
)) {

1271 *
phód
 = 
wrôe_hód
[
i
];

1277 
	}
}

1279 
	$ªq_is_ö_a˘ive_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, *
phód
)

1281 
sb_ödex
 = 
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
;

1282 
chunk
 = (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
;

1283 
group
 = 
ªq
->
pba
.
lun
 / 
sdev
->
max_luns_ö_group
;

1284 
i
;

1286 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

1287 i‡((
sb_ödex
 =
sdev
->
wr_sb
[
i
]Ë&& (
chunk
 =sdev->
wr_chunk
[i]Ë&& (
group
 =sdev->
wr_group
[i])) {

1288 *
phód
 = 
wrôe_hód
[
i
];

1294 
	}
}

1296 
	$øid5_ªcovîy_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

1298 
sh™n⁄_îr‹_h™dÀr
 *
h™dÀr
 = 
	`c⁄èöî_of
(
w‹k
, shannon_error_handler, work);

1299 
sh™n⁄_dev
 *
sdev
 = 
h™dÀr
->
dev
;

1300 
sh™n⁄_ªque°
 *
ªq
 = 
h™dÀr
->req;

1301 
hód
 = 0, 
ªåõs
 = 0, 
do_fûl
 = 0;

1303 
ªq
->
°©e
 = 
REQ_IN_RAID5
;

1304 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& (sdev->
ac˚ss_mode
 !
SHN_MODE_READONLY
)) {

1305 i‡(
	`ªq_is_ö_œã°_two_groups
(
sdev
, 
ªq
, &
hód
)) {

1306 
	`sh™n⁄_öfo
("fillÖarity group:Üun=%d,Üun_pba=%d,Écc=0x%x, wr_sb=%d, wr_chunk=%d, wr_group=%d, head=%d.\n",

1307 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
, 
sdev
->
wr_sb
[
hód
 & 
HEAD_INDEX_MASK
],

1308 
sdev
->
wr_chunk
[
hód
 & 
HEAD_INDEX_MASK
], sdev->
wr_group
[head & HEAD_INDEX_MASK], head);

1309 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

1310 
	`ªq_is_ö_a˘ive_∑rôy_group
(
sdev
, 
ªq
, &
hód
))

1311 
	`£nd_dummy_ªq
(
sdev
, 
hód
);

1312 i‡(
	`ªq_is_ö_œã°_two_groups
(
sdev
, 
ªq
, &
hód
))

1313 
	`£nd_dummy_ªq
(
sdev
, 
hód
);

1314 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

1315 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

1316 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

1318 
do_fûl
 = 1;

1319 } i‡(
	`ªq_is_ö_a˘ive_chunks_ønge
(
sdev
, 
ªq
, &
hód
))

1320 
do_fûl
 = 1;

1328 i‡(
do_fûl
) {

1329 i‡(
ªq
->
ªªad
 & 
FILL_READ_MASK
) {

1330 
	`sh™n⁄_log
("%s: hitsáctive blockágain!:Üun=%d,Üun_pba=%d,Écc=0x%x, wr_sb=%d, wr_chunk=%d, wr_group=%d, head=%d.\n",

1331 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
, sdev->
wr_sb
[
hód
 & 
HEAD_INDEX_MASK
],

1332 
sdev
->
wr_chunk
[
hód
 & 
HEAD_INDEX_MASK
], sdev->
wr_group
[head & HEAD_INDEX_MASK], head);

1334 
	`sh™n⁄_öfo
("%s: hitsáctive block:Üun=%d,Üun_pba=%d,Écc=0x%x, wr_sb=%d, wr_chunk=%d, wr_group=%d, head=%d.\n",

1335 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
, sdev->
wr_sb
[
hód
 & 
HEAD_INDEX_MASK
],

1336 
sdev
->
wr_chunk
[
hód
 & 
HEAD_INDEX_MASK
], sdev->
wr_group
[head & HEAD_INDEX_MASK], head);

1337 
ªq
->
ªªad
 |
FILL_READ_MASK
;

1339 } i‡(
ªq
->
ªªad
 & 
FILL_READ_MASK
)

1340 
ªq
->
ªªad
 &~
FILL_READ_MASK
;

1342 
ªq
->
ªªad
 |
RAID_READ_MASK
;

1344 i‡(
ªq
->
£ndî
 =
FROM_HOST
) {

1345 
	`sh™n⁄_©omic_ªad
(&
sdev
->
logicb_buf_cou¡
Ë> 
MAX_LOGICB_BUF_COUNT
)

1346 
	`sh™n⁄_m¶ìp
(1);

1347 
	`Á°_øid5_ªcovîy
(
sdev
, 
ªq
);

1348 } i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
logicb_buf_cou¡
) < 25000)

1349 
	`Á°_øid5_ªcovîy
(
sdev
, 
ªq
);

1351 
	`øid5_ªcovîy
(
sdev
, 
ªq
);

1353 
	`sh™n⁄_©omic_ªad
(&
sdev
->
logicb_buf_cou¡
Ë> 
MAX_LOGICB_BUF_COUNT
) {

1354 
	`sh™n⁄_m¶ìp
(1);

1355 
ªåõs
++;

1356 i‡((
ªåõs
 % 10000) == 5000)

1357 
	`sh™n⁄_öfo
("%s, waôÜogicb_buf_cou¡=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
	`sh™n⁄_©omic_ªad
(&sdev->
logicb_buf_cou¡
));

1359 
	`Á°_øid5_ªcovîy
(
sdev
, 
ªq
);

1362 
	`sh™n⁄_k‰ì
(
h™dÀr
);

1363 
	}
}

1365 
	$queue_øid5_ªcovîy_èsk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

1367 
sh™n⁄_îr‹_h™dÀr
 *
h™dÀr
 = 
	`sh™n⁄_kmÆloc
((sh™n⁄_îr‹_h™dÀr), 
GFP_ATOMIC
);

1368 i‡(
h™dÀr
) {

1369 
	`sh™n⁄_öô_w‹k
(&
h™dÀr
->
w‹k
, 
øid5_ªcovîy_èsk
);

1370 
h™dÀr
->
dev
 = 
sdev
;

1371 
h™dÀr
->
ªq
 =Ñeq;

1372 
	`sh™n⁄_queue_w‹k
(
sdev
->
ªad_îr_wq
, &
h™dÀr
->
w‹k
);

1374 
	`sh™n⁄_îr
("Allocate memory failed!\n");

1375 
ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

1376 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

1377 
ªq
->
°©e
 = 
REQ_DONE
;

1378 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

1380 
	}
}

1382 
	$is_îr_msg_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
)

1384 
ödex
, 
off£t
;

1385 
bôs
 = (*
sb
->
îr_msg_lun
) * 8;

1387 
ödex
 = (
lun
 * 
dev
->
∂™es
Ë/ 
bôs
;

1388 
off£t
 = (
lun
 * 
dev
->
∂™es
Ë% 
bôs
;

1389  
	`sh™n⁄_ã°_bô
(
off£t
 + 
∂™e
, 
sb
->
îr_msg_lun
 + 
ödex
);

1390 
	}
}

1392 
	$sb_m¨k_îr_msg_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∂™e
)

1394 
ödex
, 
off£t
;

1395 
bôs
 = (*
sb
->
îr_msg_lun
) * 8;

1397 
ödex
 = (
lun
 * 
dev
->
∂™es
Ë/ 
bôs
;

1398 
off£t
 = (
lun
 * 
dev
->
∂™es
Ë% 
bôs
;

1399 
	`sh™n⁄_£t_bô
(
off£t
 + 
∂™e
, 
sb
->
îr_msg_lun
 + 
ödex
);

1400 
	}
}

1402 
	$h™dÀ_ªad_îr‹
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
)

1404 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
NULL
;

1405 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

1406 
sh™n⁄_disk
 *
sdisk
 = &
dev
->sdisk;

1407 
lun
, 
∂™e
, 
eblk
, 
ªt
;

1408 
sh™n⁄_sb
 *
sb
;

1410 
ªq
->
°©e
 = 
REQ_ERROR
;

1411 
sb
 = 
dev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/dev->
logicbs_ö_siblög_eblock
;

1412 i‡(
ªq
->
£q_num
 == 0)

1413 
ªq
->
£q_num
 = 
sb
->seq_num;

1415 i‡(
dev
->
adv™˚d_ªad_°©e
 & 
ADV_READ_SUPPORT_MASK
)

1416 
ªq
->
›code
 = 
sh_cmd_adv™˚d_ªad
;

1418 i‡(
dev
->
ªad_îr_msg_Àvñ
 >
MSG_ON_EACH_READ_FAIL
)

1419 
	`sh™n⁄_log
("%s:Ñeread=%d,Üun=%d,Üun_pba=%d,Üba=0x%lx,Écc=0x%x, metadata=0x%lx,Åag=0x%lx.\n",

1420 
dev
->
sdisk
.
disk_«me
, 
ªq
->
ªªad
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
lba
,Ñeq->
_ecc
,

1421 (
ul⁄g
)
ªq
->
_mëad©a
, (ul⁄gÏeq->
èg
);

1423 
ªq
->
ªªad
++;

1424 i‡((
ªq
->
£q_num
 !0Ë&& (ªq->£q_num !
sb
->£q_numË&& (ªq->£q_num !
MAX_SEQ_NUM
)) {

1425 
	`sh™n⁄_öfo
("reread=%d,Üba=0x%lx,Üun=%d,Üun_pba=%d, seq_num=%lx, sb=%d, sb->state=%d, sb->seq_num=0x%lx.\n",

1426 
ªq
->
ªªad
,Ñeq->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
£q_num
,

1427 
sb
->
sb_ödex
, sb->
°©e
, sb->
£q_num
);

1428 
	`check_ªªad_Áûed_ªq
(
dev
, 
ªq
);

1431 
∂™e
 = ((
ªq
->
pba
.
lun_pba
 / 
dev
->
logicbs_ö_∑ge
Ë/ dev->
∑ges_ö_eblock
Ë% dev->
∂™es
;

1433 i‡(
	`is_îr‹_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
))

1434 
ªq
->
ªªad
 += 2;

1436 i‡((
ªq
->
ªªad
 & 
REREAD_NUM_MASK
Ë> 
dev
->
ªåy_times_⁄_îr‹
) {

1437 
sb_ödex
 = 
ªq
->
pba
.
lun_pba
/
dev
->
logicbs_ö_siblög_eblock
;

1439 i‡((
sb_ödex
 < 
dev
->
mbr_eblocks
/dev->
∂™es
Ë|| (dev->
ovîœp_wrôe
 && (sb_ödex =dev->
mbr
.
ovîœp_sblk
))) {

1441 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
)

1442 
ªq
->
sbio
->
°©us
 |
HAVE_BLANK_SECTOR
;

1443 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

1444 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

1445 i‡(
dev
->
öô_d⁄e
 >
STAGE9_DONE
) {

1449 
	`ªc‹d_bad_block
(
dev
, dev->
lun
[
ªq
->
pba
.lun],

1450 
ªq
->
pba
.
lun_pba
/(
dev
->
logicbs_ö_∑ge
 * dev->
∑ges_ö_eblock
));

1453 
ªq
->
°©e
 = 
REQ_DONE
;

1454 
	`sbio_ªÀa£
(
dev
, 
ªq
->
sbio
);

1459 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
dev
->
logicbs_ö_∑ge
 * dev->
∑ges_ö_eblock
);

1460 i‡(!
	`is_îr_msg_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
eblk
 % dev->
∂™es
Ë|| (dev->
ªad_îr_msg_Àvñ
 > 
ONE_MSG_PER_BLK
)) {

1461 i‡(
dev
->
ªad_îr_msg_Àvñ
 > 
NO_READ_ERR_MSG
)

1462 
	`sh™n⁄_log
("%s:Üun=%d,Üun_pba=%d,Üba=0x%lx,Écc=0x%x,Éblk=%d, metadata=0x%lx,Åag=0x%lx.\n",

1463 
dev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
lba
,Ñeq->
_ecc
,

1464 
eblk
, (
ul⁄g
)
ªq
->
_mëad©a
, (ul⁄gÏeq->
èg
);

1465 
	`sb_m¨k_îr_msg_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
eblk
 % dev->
∂™es
);

1467 i‡(!((
dev
->
öô_d⁄e
 =
STAGE_RECOVER_USED_DONE
Ë&& 
	`is_a˘ive_blk
(
sb
))) {

1468 i‡(!
	`ªq_is_ö_a˘ive_chunks_ønge
(
dev
, 
ªq
, 
NULL
))

1469 
	`£t_ªad_îr‹_block
(
dev
, 
ªq
);

1472 i‡(
dev
->
øid5_suµ‹ãd
 && ((
ªq
->
ªªad
 & 
RAID_READ_MASK
Ë=0Ë&& (dev->
öô_d⁄e
 >
STAGE_BBT_DONE
)) {

1473 
	`queue_øid5_ªcovîy_èsk
(
dev
, 
ªq
);

1475 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
)

1476 
ªq
->
sbio
->
°©us
 |
HAVE_BLANK_SECTOR
;

1477 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

1478 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

1479 
ªq
->
°©e
 = 
REQ_DONE
;

1480 
	`sbio_ªÀa£
(
dev
, 
ªq
->
sbio
);

1484 i‡(!
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)) {

1485 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
dev
->spool);

1486 i‡(
•oﬁ
) {

1487 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

1488 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

1489 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

1490 
	`BUG
();

1492 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

1493 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

1494 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

1495 
	`BUG
();

1497 
sdisk
 = &
ns
->sdisk;

1500 
	`Õmt_lock
(
dev
, 
sdisk
, 
ªq
->
lba
);

1501 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

1502 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

1503 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

1504 i‡(
ªt
 < 0) {

1505 
	`sh™n⁄_log
("%s:Üb®%x may bêdisˇrded. Ju° ign‹êô.\n", 
dev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

1506 
ªq
->
°©e
 = 
REQ_DONE
;

1507 
	`sbio_ªÀa£
(
dev
, 
ªq
->
sbio
);

1510 
sb
 = 
dev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/dev->
logicbs_ö_siblög_eblock
;

1511 
ªq
->
£q_num
 = 
sb
->seq_num;

1514 
ªq
->
_ecc
 = 0;

1515 
ªq
->
_mëad©a
 = 0;

1516 
lun
 = 
ªq
->
pba
.lun;

1517 
	`add_lun_ªque°_queue_èû
(
dev
->
lun
[lun], 
ªq
);

1518 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_ªad_wq
, &dev->
lun
[lun]->
lun£t
->
submô_w‹k
);

1520 
	}
}

	@shannon_err_injection.c

12 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


15 
	$m¨k_Áke_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

17 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

20 
	`sh™n⁄_£t_bô
(
lun
, 
sdev
->
Áke_bad_lun
);

21 
	}
}

23 
	$m¨k_Áke_cmd_timeout_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

25 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

28 
	`sh™n⁄_£t_bô
(
lun
, 
sdev
->
Áke_cmd_timeout_lun
);

29 
	}
}

31 
	$is_Áke_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

33 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

36  
	`sh™n⁄_ã°_bô
(
lun
, 
sdev
->
Áke_bad_lun
);

37 
	}
}

39 
	$is_Áke_cmd_timeout_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

41 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

44  
	`sh™n⁄_ã°_bô
(
lun
, 
sdev
->
Áke_cmd_timeout_lun
);

45 
	}
}

48 
	$m¨k_Áke_rd_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

50 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

53 
	`sh™n⁄_£t_bô
(
lun
, 
sdev
->
Áke_rd_bad_lun
);

54 
	}
}

56 
	$is_Áke_rd_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
lun
)

58 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

61  
	`sh™n⁄_ã°_bô
(
lun
, 
sdev
->
Áke_rd_bad_lun
);

62 
	}
}

65 
	$m¨k_Áke_wr_bad_lu≈∑
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
µa
)

67 
off£t
, 
bô_off£t
;

68 *
bô_ba£
;

70 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

73 
off£t
 = ()
lun
 * 
sdev
->
sb_cou¡
 * sdev->
∂™es
 * sdev->
∑ges_ö_eblock
 + 
µa
;

74 
bô_off£t
 = 
off£t
 % 64;

75 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_wr_bad_lu≈∑
 + 
off£t
/64;

77 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

78 
	}
}

80 
	$is_Áke_wr_bad_lu≈∑
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
µa
)

82 
off£t
, 
bô_off£t
;

83 *
bô_ba£
;

84 
blk_ödex
 = 
µa
 / 
sdev
->
∑ges_ö_eblock
;

86 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

89 
off£t
 = ()
lun
 * 
sdev
->
sb_cou¡
 * sdev->
∂™es
 * sdev->
∑ges_ö_eblock
 + 
µa
;

90 
bô_off£t
 = 
off£t
 % 64;

91 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_wr_bad_lu≈∑
 + 
off£t
/64;

93 i‡(
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
))

96 i‡(
	`is_Áke_bad_lun
(
sdev
, 
lun
)) {

97 i‡((
blk_ödex
 < 
sdev
->
mbr_eblocks
Ë&& sdev->
Áke_bad_lun_skùmbr
)

103 
	}
}

106 
	$m¨k_Áke_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
)

108 
off£t
, 
bô_off£t
;

109 *
bô_ba£
;

111 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

114 
off£t
 = ()
lun
 * 
sdev
->
sb_cou¡
 * sdev->
logicbs_ö_siblög_eblock
 + 
pba
;

115 
bô_off£t
 = 
off£t
 % 64;

116 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_rd_bad_lu≈ba
 + 
off£t
/64;

118 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

119 
	}
}

121 
	$is_Áke_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
)

123 
off£t
, 
bô_off£t
;

124 *
bô_ba£
;

125 
blk_ödex
 = (
pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
;

127 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

130 
off£t
 = ()
lun
 * 
sdev
->
sb_cou¡
 * sdev->
logicbs_ö_siblög_eblock
 + 
pba
;

131 
bô_off£t
 = 
off£t
 % 64;

132 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_rd_bad_lu≈ba
 + 
off£t
/64;

134 i‡(
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
))

137 i‡(
	`is_Áke_bad_lun
(
sdev
, 
lun
)) {

138 i‡((
blk_ödex
 < 
sdev
->
mbr_eblocks
Ë&& sdev->
Áke_bad_lun_skùmbr
)

142 } i‡(
	`is_Áke_rd_bad_lun
(
sdev
, 
lun
)) {

143 i‡((
blk_ödex
 < 
sdev
->
mbr_eblocks
Ë&& sdev->
Áke_bad_lun_skùmbr
)

149 
	}
}

151 
	$m¨k_Áke_rd_bad_lu≈ba_øidmuãx
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
)

153 
i
;

154 
begölun
 = (
lun
 / 
sdev
->
max_luns_ö_group
) * sdev->max_luns_in_group;

155 
ídlun
 = 
begölun
 + 
sdev
->
max_luns_ö_group
;

157 
i
 = 
begölun
; i < 
ídlun
; i++)

158 i‡(
	`is_Áke_rd_bad_lu≈ba
(
sdev
, 
i
, 
pba
))

161 
	`m¨k_Áke_rd_bad_lu≈ba
(
sdev
, 
lun
, 
pba
);

162 
	}
}

165 
	$m¨k_Áke_î_bad_block
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
blk
)

167 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

170 
	`sh™n⁄_£t_bô
(
lun
 * 
sdev
->
eblocks_ö_lun
 + 
blk
, sdev->
Áke_î_bad_block
);

171 
	}
}

173 
	$is_Áke_î_bad_block
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
blk
)

175 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

178 i‡(
	`sh™n⁄_ã°_bô
(
lun
 * 
sdev
->
eblocks_ö_lun
 + 
blk
, sdev->
Áke_î_bad_block
))

181 i‡(
	`is_Áke_bad_lun
(
sdev
, 
lun
)) {

182 i‡((
blk
 < 
sdev
->
mbr_eblocks
Ë&& sdev->
Áke_bad_lun_skùmbr
)

188 
	}
}

191 
	$m¨k_Áke_twö_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
, 
hód_ödex
)

193 
off£t
, 
bô_off£t
, 
ba£_off£t
;

194 *
bô_ba£
;

196 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

199 
pba
 =Öb®% 
sdev
->
logicbs_ö_siblög_eblock
;

200 
off£t
 = ()
lun
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
pba
;

201 
bô_off£t
 = 
off£t
 % 64;

202 
ba£_off£t
 = (
hód_ödex
 =0Ë? 0 : (()
sdev
->
lun_cou¡
 * sdev->
logicbs_ö_siblög_eblock
/64);

203 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_twö_rd_bad_lu≈ba
 + 
ba£_off£t
 + 
off£t
/64;

205 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

206 
	}
}

208 
	$is_Áke_twö_rd_bad_lu≈ba
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
pba
, 
hód_ödex
)

210 
off£t
, 
bô_off£t
, 
ba£_off£t
;

211 *
bô_ba£
;

213 i‡(!
	`sh™n⁄_©omic_ªad
(&
sdev
->
rwe_îr_buf_d⁄e
))

216 i‡(
sdev
->
twö_ªad_îr
 == 0)

219 
pba
 =Öb®% 
sdev
->
logicbs_ö_siblög_eblock
;

220 
off£t
 = ()
lun
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
pba
;

221 
bô_off£t
 = 
off£t
 % 64;

222 
ba£_off£t
 = (
hód_ödex
 =0Ë? 0 : (()
sdev
->
lun_cou¡
 * sdev->
logicbs_ö_siblög_eblock
/64);

223 
bô_ba£
 = (
u64
 *)
sdev
->
Áke_twö_rd_bad_lu≈ba
 + 
ba£_off£t
 + 
off£t
/64;

225 i‡(
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
))

229 
	}
}

231 
ölöe
 
	$gë_øndom
(
mö
, 
max
)

233 
ønd
;

235 i‡(
mö
 >
max
)

236  
max
;

238 
	`sh™n⁄_gë_øndom_byãs
(&
ønd
, (rand));

239 
ønd
 =Ñ™d % (
max
 - 
mö
 + 1) + min;

240  
ønd
;

241 
	}
}

243 
	$upd©e_Áke_∑âîn
(
sh™n⁄_dev
 *
sdev
, 
√xt_sb
, 
hód_ödex
)

245 
ch
, 
∂
, 
°ï
;

246 
luns
[2], 
lun
, 
luns_√eded
 = 2;

247 
sh™n⁄_sb
 *
sb
;

248 
sub_group
 *
group
;

249 
limô
;

250 
gΩ
, 
off£t
, 
£˘‹
, 
pba
;

251 
u64
 
luns_mask
[4];

253 i‡(
sdev
->
twö_ªad_îr
 == 0)

256 
sb
 = 
sdev
->
sbs
 + 
√xt_sb
;

259 
gΩ
 = 
	`gë_øndom
(0, 
sdev
->
∑rôy_groups
 - 1);

260 
limô
 = 0;

261 
group
 = &
sb
->
sub_group
[
gΩ
];

262 
group
->
phy_ödex
 < 0 || 
	`sh™n⁄_©omic_ªad
(&group->
avaûabÀ_luns
Ë< 
luns_√eded
) {

263 i‡(++
limô
 >
sdev
->
∑rôy_groups
) {

264 
	`sh™n⁄_öfo
("NÿvÆid grou∞f‹Åwö_ªad_î∏found i¿sb_ödex=%d\n", 
sb
->
sb_ödex
);

267 
gΩ
 = (gΩ + 1Ë% 
sdev
->
∑rôy_groups
;

268 
group
 = &
sb
->
sub_group
[
gΩ
];

270 
	`sh™n⁄_öfo
("%s: simuœãÑódÉº‹†© sb_ödex=%d,group=%d,hód=%d,", 
__func__
, 
sb
->
sb_ödex
, 
gΩ
, 
hód_ödex
);

273 
	`sh™n⁄_mem£t
(
luns_mask
, 0, (luns_mask));

274 
limô
 = 0;

275 
lun
 = 0;Üu¿< 
luns_√eded
;Üun++) {

276 
off£t
 = 
	`gë_øndom
(0, 
sdev
->
max_luns_ö_group
 - 1);

278 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + 
off£t
Ë|| 
	`sh™n⁄_ã°_™d_£t_bô
(off£t%64, (*)((
u64
 *)
luns_mask
 + offset/64))) {

279 i‡(++
limô
 >
sdev
->
max_luns_ö_group
) {

280 
	`sh™n⁄_öfo
("NÿvÆidÜun†f‹Åwö_ªad_î∏found i¿group=%d, sb_ödex=%d\n", 
gΩ
, 
sb
->
sb_ödex
);

283 
off£t
 = (off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

286 
luns
[
lun
] = (
group
->
°¨t_lun
 + 
off£t
Ë% 
sdev
->
max_luns_ö_group
;

287 
limô
 = 0;

289 
	`sh™n⁄_öfo
("lun0=%d,lun1=%d,\n", 
luns
[0],Üuns[1]);

291 
	`sh™n⁄_öfo
("pbaÜist:\n");

293 
°ï
 = 
	`gë_øndom
(0, 
sdev
->
sh¨ed_∑ges
 - 1);

294 
ch
 = 
°ï
; ch < 
sdev
->
mbr
.
∑ges_ö_eblock
; ch += step) {

295 
°ï
 = 
	`gë_øndom
(0, 
sdev
->
sh¨ed_∑ges
 * 4);

296 
°ï
 = 
	`gë_øndom
(°ï, 
sdev
->
sh¨ed_∑ges
 * 8) ? : 1;

297 
∂
 = (
sdev
->
∂™es
 =1Ë? 0 : 
	`gë_øndom
(0, sdev->planes - 1);

298 
£˘‹
 = 
	`gë_øndom
(0, 
sdev
->
logicbs_ö_∑ge
 - 1);

300 
pba
 = 
ch
 * 
sdev
->
logicbs_ö_∑ge
 + 
∂
 * sdev->
logicbs_ö_eblock
 + 
£˘‹
;

301 
	`m¨k_Áke_twö_rd_bad_lu≈ba
(
sdev
, 
luns
[0], 
pba
, 
hód_ödex
);

302 
	`m¨k_Áke_twö_rd_bad_lu≈ba
(
sdev
, 
luns
[1], 
pba
, 
hód_ödex
);

303 
	`sh™n⁄_öfo
("%d ", 
pba
);

307 
	}
}

310 
	$öô_îr_öje˘i⁄
(
sh™n⁄_dev
 *
sdev
)

312 
Áke_bad_lun_size
, 
Áke_rd_bad_lu≈ba_size
, 
Áke_wr_bad_lu≈∑_size
, 
Áke_î_bad_block_size
, 
Áke_twö_rd_bad_lu≈ba_size
;

314 
	`sh™n⁄_öfo
("%s:Öages_in_eblock=%d,Üun_count=%d, sb_count=%d,Üogicbs_in_sibling_eblock=%d,Ölanes=%d.\n",

315 
sdev
->
cdev_«me
, sdev->
∑ges_ö_eblock
, sdev->
lun_cou¡
, sdev->
sb_cou¡
, sdev->
logicbs_ö_siblög_eblock
, sdev->
∂™es
);

317 
Áke_bad_lun_size
 = ((()
sdev
->
lun_cou¡
 + 8 * () - 1) / (8 * ())) * ();

318 
sdev
->
Áke_bad_lun
 = 
	`sh™n⁄_vmÆloc
(
Áke_bad_lun_size
);

319 i‡(
NULL
 =
sdev
->
Áke_bad_lun
) {

320 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld f‹ fake_bad_lu¿Áûed!\n", 
Áke_bad_lun_size
);

321 
‰ì
;

323 
	`sh™n⁄_mem£t
(
sdev
->
Áke_bad_lun
, 0x00, 
Áke_bad_lun_size
);

325 
sdev
->
Áke_cmd_timeout_lun
 = 
	`sh™n⁄_vmÆloc
(
Áke_bad_lun_size
);

326 i‡(
NULL
 =
sdev
->
Áke_cmd_timeout_lun
) {

327 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld f‹ fake_cmd_timeout_lu¿Áûed!\n", 
Áke_bad_lun_size
);

328 
‰ì
;

330 
	`sh™n⁄_mem£t
(
sdev
->
Áke_cmd_timeout_lun
, 0x00, 
Áke_bad_lun_size
);

332 
sdev
->
Áke_rd_bad_lun
 = 
	`sh™n⁄_vmÆloc
(
Áke_bad_lun_size
);

333 i‡(
NULL
 =
sdev
->
Áke_rd_bad_lun
) {

334 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld f‹ fake_rd_bad_lu¿Áûed!\n", 
Áke_bad_lun_size
);

335 
‰ì
;

337 
	`sh™n⁄_mem£t
(
sdev
->
Áke_rd_bad_lun
, 0x00, 
Áke_bad_lun_size
);

339 
Áke_rd_bad_lu≈ba_size
 = (()
sdev
->
lun_cou¡
 * sdev->
sb_cou¡
 * sdev->
logicbs_ö_siblög_eblock
/8UL + 4095) & ~4095UL;

340 
sdev
->
Áke_rd_bad_lu≈ba
 = 
	`sh™n⁄_vmÆloc
(
Áke_rd_bad_lu≈ba_size
);

341 i‡(
NULL
 =
sdev
->
Áke_rd_bad_lu≈ba
) {

342 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld, f‹ fake_rd_bad_lu≈b®Áûed!\n", 
Áke_rd_bad_lu≈ba_size
);

343 
‰ì
;

345 
	`sh™n⁄_mem£t
(
sdev
->
Áke_rd_bad_lu≈ba
, 0, 
Áke_rd_bad_lu≈ba_size
);

347 
Áke_wr_bad_lu≈∑_size
 = (()
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
 * sdev->
sb_cou¡
 * sdev->
lun_cou¡
/8UL + 4095) & ~4095;

348 
sdev
->
Áke_wr_bad_lu≈∑
 = 
	`sh™n⁄_vmÆloc
(
Áke_wr_bad_lu≈∑_size
);

349 i‡(
NULL
 =
sdev
->
Áke_wr_bad_lu≈∑
) {

350 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld f‹ fake_wr_bad_lu≈∑ faûed!\n", 
Áke_wr_bad_lu≈∑_size
);

351 
‰ì
;

353 
	`sh™n⁄_mem£t
(
sdev
->
Áke_wr_bad_lu≈∑
, 0x00, 
Áke_wr_bad_lu≈∑_size
);

355 
Áke_î_bad_block_size
 = ((()
sdev
->
eblocks_ö_lun
 * sdev->
lun_cou¡
 + 7)/8UL + 4095) & ~4095;

356 
sdev
->
Áke_î_bad_block
 = 
	`sh™n⁄_vmÆloc
(
Áke_î_bad_block_size
);

357 i‡(
NULL
 =
sdev
->
Áke_î_bad_block
) {

358 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld f‹ fake_î_bad_block!\n", 
Áke_î_bad_block_size
);

359 
‰ì
;

361 
	`sh™n⁄_mem£t
(
sdev
->
Áke_î_bad_block
, 0x00, 
Áke_î_bad_block_size
);

364 
Áke_twö_rd_bad_lu≈ba_size
 = (()
sdev
->
lun_cou¡
 * sdev->
logicbs_ö_siblög_eblock
 * 2/8UL + 4095) & ~4095UL;

365 
sdev
->
Áke_twö_rd_bad_lu≈ba
 = 
	`sh™n⁄_vmÆloc
(
Áke_twö_rd_bad_lu≈ba_size
);

366 i‡(
NULL
 =
sdev
->
Áke_twö_rd_bad_lu≈ba
) {

367 
	`sh™n⁄_îr
("AŒoˇã mem‹yÜígth=%ld, f‹ fake_twö_rd_bad_lu≈b®Áûed!\n", 
Áke_twö_rd_bad_lu≈ba_size
);

368 
‰ì
;

370 
	`sh™n⁄_mem£t
(
sdev
->
Áke_twö_rd_bad_lu≈ba
, 0x00, 
Áke_twö_rd_bad_lu≈ba_size
);

372 
	`sh™n⁄_©omic_£t
(&
sdev
->
rwe_îr_buf_d⁄e
, 1);

375 
‰ì
:

376 i‡(
sdev
->
Áke_î_bad_block
)

377 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_î_bad_block
);

378 i‡(
sdev
->
Áke_wr_bad_lu≈∑
)

379 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_wr_bad_lu≈∑
);

380 i‡(
sdev
->
Áke_rd_bad_lu≈ba
)

381 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_rd_bad_lu≈ba
);

382 i‡(
sdev
->
Áke_rd_bad_lun
)

383 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_rd_bad_lun
);

384 i‡(
sdev
->
Áke_bad_lun
)

385 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_bad_lun
);

386 i‡(
sdev
->
Áke_cmd_timeout_lun
)

387 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_cmd_timeout_lun
);

388 i‡(
sdev
->
Áke_twö_rd_bad_lu≈ba
)

389 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_twö_rd_bad_lu≈ba
);

391  -
ENOMEM
;

392 
	}
}

394 
	$ªÀa£_îr_öje˘i⁄
(
sh™n⁄_dev
 *
sdev
)

396 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_bad_lun
);

397 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_cmd_timeout_lun
);

398 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_rd_bad_lun
);

399 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_rd_bad_lu≈ba
);

400 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_wr_bad_lu≈∑
);

401 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_î_bad_block
);

402 
	`sh™n⁄_v‰ì
(
sdev
->
Áke_twö_rd_bad_lu≈ba
);

403 
	}
}

405 
ölöe
 
	$öô_îr_öje˘i⁄
(
sh™n⁄_dev
 *
sdev
)

408 
	}
}

410 
	$ªÀa£_îr_öje˘i⁄
(
sh™n⁄_dev
 *
sdev
Ë{
	}
}

	@shannon_file.c

1 
	~"sh™n⁄_fûe.h
"

2 
	~"sh™n⁄_li°.h
"

3 
	~<löux/moduÀ.h
>

4 
	~<löux/£q_fûe.h
>

5 
	~<löux/debugfs.h
>

6 
	~<löux/vîsi⁄.h
>

8 
	$sh™n⁄_loff_t
 (*
	tfûe_›s_Œ£ek_‚
Ë(
	tfûe
 *, 
	tsh™n⁄_loff_t
, );

9 
	$sh™n⁄_ssize_t
 (*
	tfûe_›s_ªad_‚
Ë(
	tfûe
 *, *, 
	tsh™n⁄_size_t
, 
	tsh™n⁄_loff_t
 *);

10 
	$sh™n⁄_ssize_t
 (*
	tfûe_›s_wrôe_‚
Ë(
	tfûe
 *, c⁄° *, 
	tsh™n⁄_size_t
, 
	tsh™n⁄_loff_t
 *);

11 (*
	tfûe_›s_›í_‚
Ë(
	töode
 *, 
	tfûe
 *);

12 (*
	tfûe_›s_ªÀa£_‚
Ë(
	töode
 *, 
	tfûe
 *);

14 * (*
	t£q_›s_°¨t_‚
Ë(
	t£q_fûe
 *
	tm
, 
	tsh™n⁄_loff_t
 *
	tpos
);

15 (*
	t£q_›s_°›_‚
Ë(
	t£q_fûe
 *
	tm
, *
	tv
);

16 * (*
	t£q_›s_√xt_‚
Ë(
	t£q_fûe
 *
	tm
, *
	tv
, 
	tsh™n⁄_loff_t
 *
	tpos
);

17 (*
	t£q_›s_show_‚
Ë(
	t£q_fûe
 *
	tm
, *
	tv
);

19 
	$sh™n⁄_£q_›í
(
sh™n⁄_fûe_t
 *
fûe
, 
sh™n⁄_£q_›î©i⁄s_t
 *
›
)

21  
	`£q_›í
((
fûe
 *)fûe, (
£q_›î©i⁄s
 *)
›
);

22 
	}
}

24 
sh™n⁄_ssize_t
 
	$sh™n⁄_£q_ªad
(
sh™n⁄_fûe_t
 *
fûe
, 
__u£r
 *
buf
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_loff_t
 *
µos
)

26  
	`£q_ªad
((
fûe
 *)fûe, 
buf
, 
size
, 
µos
);

27 
	}
}

29 
	$sh™n⁄_£q_puts
(
sh™n⁄_£q_fûe_t
 *
m
, c⁄° *
s
)

31 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 3, 0)

32  
	`£q_puts
((
£q_fûe
 *)
m
, 
s
);

34 
	`£q_puts
((
£q_fûe
 *)
m
, 
s
);

38 
	}
}

40 
	$sh™n⁄_£q_¥ötf
(
sh™n⁄_£q_fûe_t
 *
m
, c⁄° *
f
, ...)

42 
va_li°
 
¨gs
;

43 
Àn
;

44 
£q_fûe
 *
mm
 = (£q_fûê*)
m
;

46 i‡(
mm
->
cou¡
 < mm->
size
) {

47 
	`va_°¨t
(
¨gs
, 
f
);

48 
Àn
 = 
	`v¢¥ötf
(
mm
->
buf
 + mm->
cou¡
, mm->
size
 - mm->cou¡, 
f
, 
¨gs
);

49 
	`va_íd
(
¨gs
);

50 i‡(
mm
->
cou¡
 + 
Àn
 < mm->
size
) {

51 
mm
->
cou¡
 +
Àn
;

55 
mm
->
cou¡
 = mm->
size
;

57 
	}
}

59 
sh™n⁄_sögÀ_›í
(
sh™n⁄_fûe_t
 *
fûe
, (*
show
)(
sh™n⁄_£q_fûe_t
 *, *), *
d©a
)

61  
	`sögÀ_›í
((
fûe
 *)fûe, (
£q_›s_show_‚
)
show
, 
d©a
);

62 
	}
}

64 
	$sh™n⁄_sögÀ_ªÀa£
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

66  
	`sögÀ_ªÀa£
((
öode
 *)öode, (
fûe
 *)file);

67 
	}
}

69 
sh™n⁄_loff_t
 
	$sh™n⁄_£q_l£ek
(
sh™n⁄_fûe_t
 *
fûe
, 
sh™n⁄_loff_t
 
off£t
, 
‹igö
)

71  
	`£q_l£ek
((
fûe
 *)fûe, 
off£t
, 
‹igö
);

72 
	}
}

74 
	$sh™n⁄_£q_ªÀa£
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
)

76  
	`£q_ªÀa£
((
öode
 *)öode, (
fûe
 *)file);

77 
	}
}

79 
sh™n⁄_li°_hód
 *
	$sh™n⁄_£q_li°_°¨t
(
sh™n⁄_li°_hód
 *
hód
, 
sh™n⁄_loff_t
 
pos
)

81 
sh™n⁄_li°_hód
 *
lh
;

83 
	`sh™n⁄_li°_f‹_óch
(
lh
, 
hód
)

84 i‡(
pos
-- == 0)

85  
lh
;

87  
NULL
;

88 
	}
}

90 
sh™n⁄_li°_hód
 *
	$sh™n⁄_£q_li°_°¨t_hód
(
sh™n⁄_li°_hód
 *
hód
, 
sh™n⁄_loff_t
 
pos
)

92 i‡(!
pos
)

93  
hód
;

95  
	`sh™n⁄_£q_li°_°¨t
(
hód
, 
pos
 - 1);

96 
	}
}

98 
sh™n⁄_li°_hód
 *
	$sh™n⁄_£q_li°_√xt
(*
v
, 
sh™n⁄_li°_hód
 *
hód
, 
sh™n⁄_loff_t
 *
µos
)

100 
sh™n⁄_li°_hód
 *
lh
;

102 
lh
 = ((
sh™n⁄_li°_hód
 *)
v
)->
√xt
;

103 ++*
µos
;

104  
lh
 =
hód
 ? 
NULL
 :Üh;

105 
	}
}

107 * 
	$sh™n⁄_fûe_¥iv©e_d©a
(
sh™n⁄_fûe_t
 *
Â
)

109  ((
fûe
 *)
Â
)->
¥iv©e_d©a
;

110 
	}
}

112 
	$sh™n⁄_£t_fûe_¥iv©e_d©a
(
sh™n⁄_fûe_t
 *
fûe
, *
pv
)

114 ((
fûe
 *)fûe)->
¥iv©e_d©a
 = 
pv
;

115 
	}
}

117 * 
	$sh™n⁄_£q_fûe_¥iv©e
(
sh™n⁄_£q_fûe_t
 *
f•
)

119  ((
£q_fûe
 *)
f•
)->
¥iv©e
;

120 
	}
}

122 
	$sh™n⁄_£t_£q_fûe_¥iv©e
(
sh™n⁄_£q_fûe_t
 *
•
, *
pv
)

124 ((
£q_fûe
 *)
•
)->
¥iv©e
 = 
pv
;

125 
	}
}

127 *
	$sh™n⁄_öode_i_¥iv©e
(
sh™n⁄_öode_t
 *
öode
)

129  ((
öode
 *)öode)->
i_¥iv©e
;

130 
	}
}

133 
	$sh™n⁄_£t_fûe_›s_ow√r
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ow√r
)

135 ((
fûe_›î©i⁄s
 *)
f›s
)->
ow√r
 = (
moduÀ
 *)owner;

136 
	}
}

138 
	$sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
Œ£ek
)

140 ((
fûe_›î©i⁄s
 *)
f›s
)->
Œ£ek
 = (
fûe_›s_Œ£ek_‚
)llseek;

141 
	}
}

143 
	$sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ªad
)

145 ((
fûe_›î©i⁄s
 *)
f›s
)->
ªad
 = (
fûe_›s_ªad_‚
)read;

146 
	}
}

148 
	$sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
wrôe
)

150 ((
fûe_›î©i⁄s
 *)
f›s
)->
wrôe
 = (
fûe_›s_wrôe_‚
)write;

151 
	}
}

153 
	$sh™n⁄_£t_fûe_›s_›í_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
›í
)

155 ((
fûe_›î©i⁄s
 *)
f›s
)->
›í
 = (
fûe_›s_›í_‚
)open;

156 
	}
}

158 
	$sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ªÀa£
)

160 ((
fûe_›î©i⁄s
 *)
f›s
)->
ªÀa£
 = (
fûe_›s_ªÀa£_‚
)release;

161 
	}
}

163 
	$sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
°¨t
)

165 ((
£q_›î©i⁄s
 *)
s›s
)->
°¨t
 = (
£q_›s_°¨t_‚
)start;

166 
	}
}

168 
	$sh™n⁄_£t_£q_›s_°›_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
°›
)

170 ((
£q_›î©i⁄s
 *)
s›s
)->
°›
 = (
£q_›s_°›_‚
)stop;

171 
	}
}

173 
	$sh™n⁄_£t_£q_›s_√xt_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
√xt
)

175 ((
£q_›î©i⁄s
 *)
s›s
)->
√xt
 = (
£q_›s_√xt_‚
)next;

176 
	}
}

178 
	$sh™n⁄_£t_£q_›s_show_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
show
)

180 ((
£q_›î©i⁄s
 *)
s›s
)->
show
 = (
£q_›s_show_‚
)show;

181 
	}
}

185 
sh™n⁄_díåy_t
 *
	$sh™n⁄_debugfs_¸óã_dú
(c⁄° *
«me
, 
sh™n⁄_díåy_t
 *
∑ª¡
)

187  
	`debugfs_¸óã_dú
(
«me
, (
díåy
 *)
∑ª¡
);

188 
	}
}

190 
sh™n⁄_díåy_t
 *
	$sh™n⁄_debugfs_¸óã_fûe
(c⁄° *
«me
, 
sh™n⁄_mode_t
 
mode
, 
sh™n⁄_díåy_t
 *
∑ª¡
, *
d©a
, c⁄° 
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
){

191  
	`debugfs_¸óã_fûe
(
«me
, 
mode
, (
díåy
 *)
∑ª¡
, 
d©a
, (
fûe_›î©i⁄s
 *)
f›s
);

192 
	}
}

194 
	$sh™n⁄_debugfs_ªmove
(
sh™n⁄_díåy_t
 *
díåy
)

196 
	`debugfs_ªmove
((
díåy
 *)dentry);

197 
	}
}

	@shannon_file.h

1 #i‚de‡
__SHANNON_FILE_H


2 
	#__SHANNON_FILE_H


	)

3 
	~"sh™n⁄_kc‹e.h
"

5 
	s__sh™n⁄_fûe_›î©i⁄s
 {

6 
RESERVE_MEM
(248);

9 
	s__sh™n⁄_£q_›î©i⁄s
 {

10 
RESERVE_MEM
(64);

14 
	tsh™n⁄_fûe_t
;

15 
	tsh™n⁄_öode_t
;

16 
	tsh™n⁄_díåy_t
;

17 
	tsh™n⁄_£q_fûe_t
;

18 
__sh™n⁄_£q_›î©i⁄s
 
	tsh™n⁄_£q_›î©i⁄s_t
;

19 
__sh™n⁄_fûe_›î©i⁄s
 
	tsh™n⁄_fûe_›î©i⁄s_t
;

23 
sh™n⁄_£q_›í
(
sh™n⁄_fûe_t
 *
fûe
, 
sh™n⁄_£q_›î©i⁄s_t
 *
›
);

24 
sh™n⁄_ssize_t
 
sh™n⁄_£q_ªad
(
sh™n⁄_fûe_t
 *
fûe
, 
__u£r
 *
buf
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_loff_t
 *
µos
);

25 
sh™n⁄_£q_puts
(
sh™n⁄_£q_fûe_t
 *
m
, c⁄° *
s
);

26 
sh™n⁄_£q_¥ötf
(
sh™n⁄_£q_fûe_t
 *
m
, c⁄° *
f
, ...);

27 
sh™n⁄_sögÀ_›í
(
sh™n⁄_fûe_t
 *
fûe
, (*
show
)(
sh™n⁄_£q_fûe_t
 *, *), *
d©a
);

28 
	`sh™n⁄_sögÀ_ªÀa£
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
);

29 
sh™n⁄_li°_hód
 *
	`sh™n⁄_£q_li°_°¨t
(sh™n⁄_li°_hód *
hód
, 
sh™n⁄_loff_t
 
pos
);

30 
sh™n⁄_li°_hód
 *
	`sh™n⁄_£q_li°_°¨t_hód
(sh™n⁄_li°_hód *
hód
, 
sh™n⁄_loff_t
 
pos
);

31 
sh™n⁄_li°_hód
 *
	`sh™n⁄_£q_li°_√xt
(*
v
, sh™n⁄_li°_hód *
hód
, 
sh™n⁄_loff_t
 *
µos
);

32 
sh™n⁄_loff_t
 
	`sh™n⁄_£q_l£ek
(
sh™n⁄_fûe_t
 *
fûe
, sh™n⁄_loff_à
off£t
, 
‹igö
);

33 
	`sh™n⁄_£q_ªÀa£
(
sh™n⁄_öode_t
 *
öode
, 
sh™n⁄_fûe_t
 *
fûe
);

35 *
	`sh™n⁄_fûe_¥iv©e_d©a
(
sh™n⁄_fûe_t
 *
fûe
);

36 
	`sh™n⁄_£t_fûe_¥iv©e_d©a
(
sh™n⁄_fûe_t
 *
fûe
, *
pv
);

37 *
	`sh™n⁄_£q_fûe_¥iv©e
(
sh™n⁄_£q_fûe_t
 *
fûe
);

38 
	`sh™n⁄_£t_£q_fûe_¥iv©e
(
sh™n⁄_£q_fûe_t
 *
•
, *
pv
);

39 *
	`sh™n⁄_öode_i_¥iv©e
(
sh™n⁄_öode_t
 *
öode
);

41 
	`sh™n⁄_£t_fûe_›s_ow√r
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ow√r
);

42 
	`sh™n⁄_£t_fûe_›s_Œ£ek_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
Œ£ek
);

43 
	`sh™n⁄_£t_fûe_›s_ªad_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ªad
);

44 
	`sh™n⁄_£t_fûe_›s_wrôe_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
wrôe
);

45 
	`sh™n⁄_£t_fûe_›s_›í_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
›í
);

46 
	`sh™n⁄_£t_fûe_›s_ªÀa£_h™dÀr
(
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
, *
ªÀa£
);

48 
	`sh™n⁄_£t_£q_›s_°¨t_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
°¨t
);

49 
	`sh™n⁄_£t_£q_›s_°›_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
°›
);

50 
	`sh™n⁄_£t_£q_›s_√xt_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
√xt
);

51 
	`sh™n⁄_£t_£q_›s_show_h™dÀr
(
sh™n⁄_£q_›î©i⁄s_t
 *
s›s
, *
show
);

54 
sh™n⁄_díåy_t
 *
	`sh™n⁄_debugfs_¸óã_dú
(c⁄° *
«me
, sh™n⁄_díåy_à*
∑ª¡
);

55 
sh™n⁄_díåy_t
 *
	`sh™n⁄_debugfs_¸óã_fûe
(c⁄° *
«me
, 
sh™n⁄_mode_t
 
mode
, sh™n⁄_díåy_à*
∑ª¡
, *
d©a
, c⁄° 
sh™n⁄_fûe_›î©i⁄s_t
 *
f›s
);

56 
	`sh™n⁄_debugfs_ªmove
(
sh™n⁄_díåy_t
 *
díåy
);

	@shannon_fpga_emu.c

13 
	$¥eöô_emuœt‹_exec_cmd
(
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
, 
lun£t_ödex
)

15 
sh™n⁄_ªque°
 
ªq
;

16 
sh™n⁄_cmd
 *
cmd
;

17 
sq_èû
;

18 
u8
 *
ecc
, *
°©us
;

19 
u64
 *
mëad©a
, *
tmp
, 
sq_addr
, 
cq_addr
;

20 
cmd_Àn
 = 8;

21 
sh™n⁄_emu_lun
 *
emu_lun
;

23 
	`sh™n⁄_mem£t
(&
ªq
, 0, (
sh™n⁄_ªque°
));

24 
sq_èû
 = 
lun_£˘i⁄
->sq_tail;

25 
sq_addr
 = ((
u64
)
lun_£˘i⁄
->
sq_dma_addr1
 << 32)|lun_£˘i⁄->
sq_dma_addr0
;

26 
cq_addr
 = ((
u64
)
lun_£˘i⁄
->
cq_dma_addr1
 << 32)|lun_£˘i⁄->
cq_dma_addr0
;

27 
cmd
 = (
sh™n⁄_cmd
 *)(
sq_addr
 + 
sq_èû
);

28 
	`BUG_ON
(
cmd
->
phy_lun
 > 
emu_luns
[0].
max_ch™√ls
 *Ému_luns[0].
max_lun£t_ö_ch™√l
 *Ému_luns[0].
hw_lun_ö_lun£t
);

29 
emu_lun
 = &
emu_luns
[
cmd
->
phy_lun
];

30 
cmd
->
›code
) {

31 
sh_cmd_ª£t
:

32 
cmd_Àn
 = 8;

33 
°©us
 = (
__u8
 *)(
cq_addr
 + 
sq_èû
);

34 *
°©us
 = 0;

36 
sh_cmd_¥e_ªad
:

37 
cmd_Àn
 = 8;

38 
°©us
 = (
__u8
 *)(
cq_addr
 + 
sq_èû
);

39 *
°©us
 = 
emu_lun
->
	`¥e_ªad
”mu_lun, 
cmd
->
µa
);

41 
sh_cmd_ªad
:

42 
cmd_Àn
 = 16;

43 
ecc
 = (
__u8
 *)(
cq_addr
 + 
sq_èû
);

44 
mëad©a
 = 
	`cmd_queue_öc
(
ecc
, 1);

45 
ªq
.
pba
.
lun_pba
 = (
cmd
->
µa
 << 
emu_lun
->
logicb_shi·
Ë+ cmd->
fú°_logicb
;

46 
tmp
 = 
	`cmd_queue_öc
(
cmd
, 1);

47 
ªq
.
vút_addr
 = (*)(*
tmp
);

48 
ªq
.
lba
 = 
INVALID_LBA
;

49 
ecc
[0] = (
u8
)
emu_lun
->
	`ˇche_ªad
”mu_lun, 
ªq
.
pba
.
lun_pba
, &req);

50 *
mëad©a
 = 
ªq
.
emu_mëad©a
;

51 
	`sh™n⁄_öfo
("%s():Ñód:Écc=%d, mëad©a=0x%Œx.\n", 
__func__
, *
ecc
, *
mëad©a
);

54 
	`sh™n⁄_îr
("Unknown command.\n");

56 
lun_£˘i⁄
->
sq_èû
 = (lun_£˘i⁄->sq_èû + 
cmd_Àn
)%
QUEUE_SIZE
;

57 
lun_£˘i⁄
->
cq_hód
 =Üun_£˘i⁄->
sq_èû
;

60 
	}
}

62 
	$¥eöô_emuœt‹_thªad
(*
d©a
)

64 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
 = 
d©a
;

65 
sq_hód
, 
sq_èû
;

66 
i
, 
Êag
;

69 
Êag
 = 0;

70 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

72 
i
 = 0; i < 
MBR_MAX_TRY
; i++) {

73 
sq_hód
 = 
lun_£˘i⁄
[
i
].sq_head;

74 
sq_èû
 = 
lun_£˘i⁄
[
i
].sq_tail;

75 i‡(
sq_hód
 !
sq_èû
) {

76 
Êag
 = 1;

77 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

78 
	`¥eöô_emuœt‹_exec_cmd
(
lun_£˘i⁄
 + 
i
, i);

81 i‡(
Êag
 == 0)

82 
	`sh™n⁄_scheduÀ
();

83 } !
	`sh™n⁄_kthªad_should_°›
());

85 
	}
}

87 
	$gë_sq_èû
(
sh™n⁄_lun£t
 *
lun£t
)

89 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
lun£t
->
emu_waô
, (
	`sh™n⁄_kthªad_should_°›
(Ë|| (lun£t->
sq_hw_hód
 !lun£t->
sq_hw_èû
)));

90  
lun£t
->
sq_hw_èû
;

91 
	}
}

93 
u64
 *
	gmëad©a_∑rôy
[2];

94 *
	g∑rôy_buf
[2];

95 
•ölock_t
 
	g∑rôy_buf_lock
[2];

96 
	gœ°_sb_d⁄e
[2] = {1, 1};

97 
sh™n⁄_waô_queue_hód_t
 
	gsb_d⁄e_evít
[2];

98 
©omic_t
 
	gªmaöög_°rùe_∑ges
[2];

99 
	gcuºít_°rùe_∑ge
[2] = {-1, -1};

100 
©omic_t
 
	gªmaöög_∑ges
[2];

101 
	g∑ges_ö_group
[2];

102 
	gcuºít_∑rôy_group
[2] = {-1, -1};

103 
sh™n⁄_waô_queue_hód_t
 
	gwrôe_d⁄e_evít
[2];

104 
sh™n⁄_waô_queue_hód_t
 
	gœ°_∑rôy_d⁄e_evít
[2];

105 
	g∑rôy_cmd
[2];

107 
	ggroups_ö_°rùe
 = 1;

109 
	$buf_x‹
(*
de°
, *
§c
, 
size
)

111 *
d
 = 
de°
;

112 c⁄° *
s
 = 
§c
;

113 
k
;

115 
k
 = 0; k < 
size
; k++)

116 
d
[
k
] = 
s
[k] ^ d[k];

117 
	}
}

119 
	$logicb_buf_x‹
(
sh™n⁄_ªque°
 *
ªq
, *
buf
, 
sh™n⁄_dev
 *
sdev
)

121 
∂™e
 = (
ªq
->
pba
.
lun_pba
 % (
sdev
->
logicbs_ö_siblög_eblock
)Ë/ (sdev->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

122 
logicb_ödex
 = 
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
;

123 *
de°
 = 
buf
 + 
sdev
->
«nd_∑ge_ˇ∑côy
 * 
∂™e
 + sdev->
logicb_size
 * 
logicb_ödex
;

124 *
§c
 = (*)
ªq
->
dma_addªss
;

126 i‡(
ªq
->
dma_addªss_2
) {

127 
fú°_size
, 
œ°_size
;

128 
œ°_size
 = ()
ªq
->
dma_addªss
 & (
sdev
->
logicb_size
 - 1);

129 
fú°_size
 = 
sdev
->
logicb_size
 - 
œ°_size
;

130 
	`BUG_ON
(
œ°_size
 == 0);

131 
	`BUG_ON
(
fú°_size
 == 0);

132 
	`buf_x‹
(
de°
, 
§c
, 
fú°_size
);

133 
§c
 = (*)
ªq
->
dma_addªss_2
;

134 
	`buf_x‹
(
de°
 + 
fú°_size
, 
§c
, 
œ°_size
);

136 
	`buf_x‹
(
de°
, 
§c
, 
sdev
->
logicb_size
);

137 
	}
}

139 
	$emuœt‹_thªad
(*
d©a
)

141 
sh™n⁄_lun£t
 *
lun£t
 = (sh™n⁄_lun£à*)
d©a
;

142 
sh™n⁄_emu_lun
 *
emu_lun
;

143 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

144 
sh™n⁄_ªque°
 *
ªq
;

145 
sh™n⁄_cmd
 *
cmd
;

146 
sh™n⁄_cmd_öfo
 *
öfo
;

147 
sh™n⁄_sb
 *
sb
;

148 
sh™n⁄_li°_hód
 
li°_hód
;

149 
sq_hw_èû
;

150 
i
, 
hód_ödex
, 
°rùe_∑ge
, 
∂™e
, 
∑rôy_group
;

151 
u8
 *
ecc
, *
°©us
;

152 
u64
 *
mëad©a
;

153 
∂™e_mask
 = (
sdev
->
∂™es
 - 1Ë* sdev->
∑ges_ö_eblock
;

155 
__echo_ö
;

157 
sq_hw_èû
 = 
	`gë_sq_èû
(
lun£t
);

159 i‡(
sq_hw_èû
 =
lun£t
->
sq_hw_hód
)

161 
cmd
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + (
sq_hw_èû
>>3));

162 
öfo
 = &
lun£t
->
cmd_öfo
[
sq_hw_èû
>>3];

163 
	`BUG_ON
(
cmd
->
phy_lun
 > 
emu_luns
[0].
max_ch™√ls
 *Ému_luns[0].
max_lun£t_ö_ch™√l
 *Ému_luns[0].
hw_lun_ö_lun£t
);

164 
emu_lun
 = &
emu_luns
[
cmd
->
phy_lun
];

165 
cmd
->
›code
) {

166 
sh_cmd_ª£t
:

167 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

168 *
°©us
 = 0;

170 
sh_cmd_no_›
:

171 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

172 *
°©us
 = 0xe0;

174 
sh_cmd_¥e_ªad
:

175 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

176 *
°©us
 = 
emu_lun
->
	`¥e_ªad
”mu_lun, 
cmd
->
µa
);

178 
sh_cmd_ªad
:

179 
sh_cmd_adv™˚d_ªad
:

180 
sh_cmd_ªad_íd
:

181 i‡(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

182 
	`sh™n⁄_îr
("Nÿªque°†öÑód comm™d info.Üígth=%d. !!!!! ----\n", 
öfo
->
cmd_Àn
);

183 
	`BUG
();

185 
ecc
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

186 
mëad©a
 = 
	`cmd_queue_öc
(
ecc
, 1);

187 
i
 = 0;

188 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
öfo
->
ªq_li°
, 
li°
) {

189 
ecc
[
i
] = (
u8
)
emu_lun
->
	`ˇche_ªad
”mu_lun, 
ªq
->
pba
.
lun_pba
,Ñeq);

190 *
mëad©a
 = 
ªq
->
emu_mëad©a
;

191 
mëad©a
 = 
	`cmd_queue_öc
(metadata, 1);

192 
i
++;

195 
sh_cmd_wrôe
:

196 i‡(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

197 
	`sh™n⁄_îr
("Nÿªque°†ö wrôêcomm™d info.Üígth=%d. !!! ---\n", 
öfo
->
cmd_Àn
);

198 
	`BUG
();

200 
hód_ödex
 = 
cmd
->
hód
 & 
HEAD_INDEX_MASK
;

201 i‡(
sdev
->
øid5_suµ‹ãd
 && (
cmd
->
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
mbr_eblocks
)) {

202 
°rùe_∑ge
 = 
cmd
->
µa
 & ~
∂™e_mask
;

203 
∑rôy_group
 = 
cmd
->
øid_°rùe
;

204 
	`BUG_ON
(
∑rôy_group
 !
cmd
->
phy_lun
/
sdev
->
max_luns_ö_group
);

205 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
œ°_∑rôy_d⁄e_evít
[
hód_ödex
], \

206 (
cuºít_°rùe_∑ge
[
hód_ödex
] =
°rùe_∑ge
Ë&& (
cuºít_∑rôy_group
[hód_ödex] =
∑rôy_group
));

209 
mëad©a
 = (
u64
 *)
cmd
;

210 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
öfo
->
ªq_li°
, 
li°
) {

211 i‡(
ªq
->
dma_addªss_2
)

212 
mëad©a
 = 
	`cmd_queue_öc
(metadata, 3);

214 
mëad©a
 = 
	`cmd_queue_öc
(metadata, 2);

215 
ªq
->
emu_mëad©a
 = *
mëad©a
;

216 
	`BUG_ON
(
ªq
->
emu_mëad©a
 !ªq->
lba
);

217 
∂™e
 = (
ªq
->
pba
.
lun_pba
 % (
sdev
->
logicbs_ö_siblög_eblock
)Ë/ (sdev->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

218 i‡(
sdev
->
øid5_suµ‹ãd
 && (
cmd
->
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
mbr_eblocks
)) {

219 
	`•ö_lock
(&
∑rôy_buf_lock
[
hód_ödex
]);

220 
mëad©a_∑rôy
[
hód_ödex
][
∂™e
 * 
sdev
->
logicbs_ö_∑ge
 + 
ªq
->
pba
.
lun_pba
 % sdev->logicbs_ö_∑ge] ^ªq->
emu_mëad©a
;

221 
	`logicb_buf_x‹
(
ªq
, 
∑rôy_buf
[
hód_ödex
], 
sdev
);

222 
	`•ö_u∆ock
(&
∑rôy_buf_lock
[
hód_ödex
]);

225 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

226 i‡(
cmd
->
hód
 & 
DUMMY_WRITE_MASK
)

227 *
°©us
 = 0xe0;

229 *
°©us
 = 
emu_lun
->
	`wrôe
”mu_lun, 
cmd
->
µa
, &
öfo
->
ªq_li°
);

231 i‡(
sdev
->
øid5_suµ‹ãd
 && (
cmd
->
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
mbr_eblocks
)) {

232 
	`©omic_ªad
(&
ªmaöög_∑ges
[
hód_ödex
]) <= 0)

233 
	`sh™n⁄_m¶ìp
(1);

234 i‡(
	`©omic_dec_™d_ã°
(&
ªmaöög_∑ges
[
hód_ödex
]))

235 
	`sh™n⁄_wake_up
(&
wrôe_d⁄e_evít
[
hód_ödex
]);

238 
sh_cmd_îa£
:

239 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

240 *
°©us
 = 
emu_lun
->
	`îa£
”mu_lun, 
cmd
->
µa
/
sdev
->
∑ges_ö_eblock
);

242 
sh_cmd_∑rôy_öô
:

243 
hód_ödex
 = 
cmd
->
hód
 & 
HEAD_INDEX_MASK
;

244 i‡(
∑rôy_buf
[
hód_ödex
] =
NULL
) {

245 
mëad©a_∑rôy
[
hód_ödex
] = 
	`sh™n⁄_kzÆloc
(8 * 
sdev
->
logicbs_ö_chunk
, 
GFP_SHANNON
);

246 
∑rôy_buf
[
hód_ödex
] = 
	`sh™n⁄_kzÆloc
(
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
GFP_SHANNON
);

247 i‡(
∑rôy_buf
[
hód_ödex
] =
NULL
) {

248 
	`sh™n⁄_îr
("Æloˇã %†∑rôy_bu‡Áûed!\n", 
hód_ödex
?"cold":"hot");

249 
	`BUG
();

252 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sb_d⁄e_evít
[
hód_ödex
], 
œ°_sb_d⁄e
[head_index] == 1);

253 
œ°_sb_d⁄e
[
hód_ödex
] = 0;

254 
	`©omic_£t
(&
ªmaöög_°rùe_∑ges
[
hód_ödex
], 
sdev
->
∑ges_ö_eblock
 - (
cmd
->
µa
 % (sdev->∑ges_ö_eblock * sdev->
∂™es
)));

255 
∑rôy_cmd
[
hód_ödex
] = 
sdev
->
∂™es
;

256 
sb
 = 
sdev
->
sbs
 + 
cmd
->
µa
 / (sdev->
∑ges_ö_eblock
 * sdev->
∂™es
);

257 
∑ges_ö_group
[
hód_ödex
] = 
cmd
->
d©a_luns
 * 
sdev
->
∂™es
;

259 
	`©omic_£t
(&
ªmaöög_∑ges
[
hód_ödex
], 
∑ges_ö_group
[head_index]);

260 
cuºít_°rùe_∑ge
[
hód_ödex
] = 
cmd
->
µa
 & ~
∂™e_mask
;

261 
cuºít_∑rôy_group
[
hód_ödex
] = 
cmd
->
øid_°rùe
;

262 
	`BUG_ON
(
cmd
->
øid_°rùe
 !cmd->
phy_lun
/
sdev
->
max_luns_ö_group
);

263 
	`sh™n⁄_wake_up
(&
œ°_∑rôy_d⁄e_evít
[
hód_ödex
]);

265 
sh_cmd_∑rôy
:

266 
hód_ödex
 = 
cmd
->
hód
 & 
HEAD_INDEX_MASK
;

267 
°rùe_∑ge
 = 
cmd
->
µa
 & ~
∂™e_mask
;

268 
∑rôy_group
 = 
cmd
->
øid_°rùe
;

269 
	`BUG_ON
(
∑rôy_group
 !
cmd
->
phy_lun
/
sdev
->
max_luns_ö_group
);

270 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
œ°_∑rôy_d⁄e_evít
[
hód_ödex
], \

271 (
cuºít_°rùe_∑ge
[
hód_ödex
] =
°rùe_∑ge
Ë&& (
cuºít_∑rôy_group
[hód_ödex] =
∑rôy_group
));

272 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
wrôe_d⁄e_evít
[
hód_ödex
], 
	`©omic_ªad
(&
ªmaöög_∑ges
[head_index]) == 0);

273 
∂™e
 = (
cmd
->
µa
 % (
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
)) / sdev->pages_in_eblock;

274 
	`SHANNON_INIT_LIST_HEAD
(&
li°_hód
);

275 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

276 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

277 
ªq
->
emu_mëad©a
 = 
mëad©a_∑rôy
[
hód_ödex
][
∂™e
 * 
sdev
->
logicbs_ö_∑ge
 + 
i
];

278 
ªq
->
lba
 = (
logicb_t
Ïeq->
emu_mëad©a
;

279 
ªq
->
pba
.
lun
 = 
emu_lun
->
logiˇl_lun
;

280 
ªq
->
pba
.
lun_pba
 = 
cmd
->
µa
 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

281 
ªq
->
vút_addr
 = 
∑rôy_buf
[
hód_ödex
] + 
sdev
->
«nd_∑ge_ˇ∑côy
 * 
∂™e
 + sdev->
logicb_size
 * 
i
;

282 
ªq
->
dma_addªss
 = (
dma_addr_t
Ïeq->
vút_addr
;

283 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
li°_hód
);

285 
°©us
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (
sq_hw_èû
>>3));

286 *
°©us
 = 
emu_lun
->
	`wrôe
”mu_lun, 
cmd
->
µa
, &
li°_hód
);

287 
	`mem£t
(
mëad©a_∑rôy
[
hód_ödex
] + 
sdev
->
logicbs_ö_∑ge
 * 
∂™e
, 0, 8 * sdev->logicbs_in_page);

288 
	`mem£t
(
∑rôy_buf
[
hód_ödex
] + 
sdev
->
«nd_∑ge_ˇ∑côy
 * 
∂™e
, 0, sdev->nand_page_capacity);

289 !
	`sh™n⁄_li°_em±y
(&
li°_hód
)) {

290 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
li°_hód
, 
sh™n⁄_ªque°
, 
li°
);

291 
	`sh™n⁄_li°_dñ
(&
ªq
->
li°
);

292 
	`‰ì_ªq
(
ªq
);

295 
∑rôy_cmd
[
hód_ödex
]--;

296 i‡(
∑rôy_cmd
[
hód_ödex
] == 0) {

297 
∑rôy_cmd
[
hód_ödex
] = 
sdev
->
∂™es
;

298 
	`©omic_£t
(&
ªmaöög_∑ges
[
hód_ödex
], 
∑ges_ö_group
[head_index]);

299 
cuºít_∑rôy_group
[
hód_ödex
]++;

300 i‡(
cuºít_∑rôy_group
[
hód_ödex
] =
groups_ö_°rùe
) {

301 
cuºít_∑rôy_group
[
hód_ödex
] = 0;

302 i‡(
	`©omic_dec_™d_ã°
(&
ªmaöög_°rùe_∑ges
[
hód_ödex
])) {

303 
œ°_sb_d⁄e
[
hód_ödex
] = 1;

304 
	`sh™n⁄_wake_up
(&
sb_d⁄e_evít
[
hód_ödex
]);

306 
cuºít_°rùe_∑ge
[
hód_ödex
]++;

307 
	`sh™n⁄_wake_up
(&
œ°_∑rôy_d⁄e_evít
[
hód_ödex
]);

310 
	`sh™n⁄_wake_up
(&
œ°_∑rôy_d⁄e_evít
[
hód_ödex
]);

315 
	`sh™n⁄_îr
("Uƒecognized opcodê0x%x.\n", 
cmd
->
›code
);

317 
lun£t
->
sq_hw_èû
 = (lun£t->sq_hw_èû + 
öfo
->
cmd_Àn
)%
QUEUE_SIZE
;

318 
lun£t
->
cq_hw_hód
 =Üun£t->
sq_hw_èû
;

319 
	`•ö_lock_bh
(&
emu_öt_lock
);

320 
emu_öãºu±_ve˘‹
 |(1 << 
lun£t
->
ödex
);

321 i‡(
emu_dißbÀ_úq
 == 0) {

322 
emu_dißbÀ_úq
 = 1;

323 
	`sh™n⁄_èskÀt_scheduÀ
(&
sdev
->
comp_èskÀt
);

325 
	`•ö_u∆ock_bh
(&
emu_öt_lock
);

327 
__echo_out
;

329 
	}
}

331 #ifde‡
SHANNON_USE_WRITE_BUFFER


332 
	$gë_bufq_sq_èû
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

334 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
bufq_emu_waô
[
hód_ödex
], \

335 (
	`sh™n⁄_kthªad_should_°›
(Ë|| (
sdev
->
bufq_sq_hw_hód
[
hód_ödex
] !sdev->
bufq_sq_hw_èû
[head_index])));

336  
sdev
->
bufq_sq_hw_èû
[
hód_ödex
];

337 
	}
}

339 *
	gwr_buf
[2];

340 
	#BUFQ_VECT_LUN
 0

	)

341 
	#BUFQ_VECT_CHUNK
 1

	)

342 
	#BUFQ_VECT_LOGICB
 2

	)

343 
	gbuf_ödex
[2][3] = {{0, 0, 0}, {0, 0, 0}};

344 
u64
 *
	gbufq_mëad©a
[2];

346 
	$bufq_emuœt‹_thªad
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

348 
sh™n⁄_buf_cmd
 *
cmd
;

349 
sh™n⁄_cmd_öfo
 *
öfo
;

350 
u64
 *
mëad©a
, *
d©a_±r
;

351 
u8
 *
°©us
;

352 
bufq_sq_hw_èû
;

353 
µa
, 
∂™e
, 
°rùe_∑ge
, 
∑rôy_group
;

354 
∂™e_mask
 = (
sdev
->
∂™es
 - 1Ë* sdev->
∑ges_ö_eblock
;

355 
fú°_size
, 
œ°_size
;

358 
bufq_sq_hw_èû
 = 
	`gë_bufq_sq_èû
(
sdev
, 
hód_ödex
);

360 i‡(
bufq_sq_hw_èû
 =
sdev
->
bufq_sq_hw_hód
[
hód_ödex
])

362 
°©us
 = (
__u8
 *)(
sdev
->
bufq_cq_addr
[
hód_ödex
] + (
bufq_sq_hw_èû
 >> 3));

363 
cmd
 = (
sh™n⁄_buf_cmd
 *)(
sdev
->
bufq_sq_addr
[
hód_ödex
] + (
bufq_sq_hw_èû
 >> 3));

364 
d©a_±r
 = 
	`cmd_queue_öc
(
cmd
, 1);

365 
öfo
 = &
sdev
->
cmd_öfo
[
hód_ödex
][
bufq_sq_hw_èû
 >> 3];

366 
cmd
->
›code
) {

367 
sh_cmd_buf_wrôe
:

368 
sh_cmd_buf_wrôe_no_commô
:

369 
	`BUG_ON
(
cmd
->
logicb_ödex
 !
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LOGICB
]);

370 i‡(
cmd
->
logicb_ödex
 == 0) {

371 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LUN
] = 
cmd
->
phy_lun
;

372 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_CHUNK
] = 
cmd
->
µa
 & ~
∂™e_mask
;

374 
	`BUG_ON
(
cmd
->
phy_lun
 !
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LUN
]);

375 
	`BUG_ON
((
cmd
->
µa
 & ~
∂™e_mask
Ë!
buf_ödex
[
hód_ödex
][
BUFQ_VECT_CHUNK
]);

376 i‡(
cmd
->
±es
) {

377 
œ°_size
 = ()*
d©a_±r
 & (
sdev
->
logicb_size
 - 1);

378 
fú°_size
 = 
sdev
->
logicb_size
 - 
œ°_size
;

379 
	`BUG_ON
(
œ°_size
 == 0);

380 
	`BUG_ON
(
fú°_size
 == 0);

381 
	`mem˝y
(
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
, (*)*
d©a_±r
, 
fú°_size
);

382 
d©a_±r
 = 
	`cmd_queue_öc
(data_ptr, 1);

383 
	`mem˝y
(
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
 + 
fú°_size
, (*)*
d©a_±r
, 
œ°_size
);

385 
	`mem˝y
(
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
, (*)*
d©a_±r
, sdev->logicb_size);

387 
mëad©a
 = 
	`cmd_queue_öc
(
d©a_±r
, 1);

388 
bufq_mëad©a
[
hód_ödex
][
cmd
->
logicb_ödex
] = *
mëad©a
;

389 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LOGICB
]++;

391 i‡(
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LOGICB
] =
sdev
->
logicbs_ö_chunk
) {

392 i‡(
sdev
->
øid5_suµ‹ãd
) {

393 
°rùe_∑ge
 = 
cmd
->
µa
 & ~
∂™e_mask
;

394 
∑rôy_group
 = 
cmd
->
øid_°rùe
;

395 
	`BUG_ON
(
∑rôy_group
 !
cmd
->
phy_lun
/
sdev
->
max_luns_ö_group
);

396 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
œ°_∑rôy_d⁄e_evít
[
hód_ödex
], \

397 (
cuºít_°rùe_∑ge
[
hód_ödex
] =
°rùe_∑ge
Ë&& (
cuºít_∑rôy_group
[hód_ödex] =
∑rôy_group
));

400 
	`•ö_lock
(&
∑rôy_buf_lock
[
hód_ödex
]);

401 
	`buf_x‹
(
mëad©a_∑rôy
[
hód_ödex
], 
bufq_mëad©a
[hód_ödex], 
sdev
->
logicbs_ö_chunk
 * (
u64
));

402 
	`buf_x‹
(
∑rôy_buf
[
hód_ödex
], 
wr_buf
[hód_ödex], 
sdev
->
logicbs_ö_chunk
 * sdev->
logicb_size
);

403 
	`•ö_u∆ock
(&
∑rôy_buf_lock
[
hód_ödex
]);

404 
µa
 = 
cmd
->ppa;

405 
∂™e
 = 
sdev
->
∂™es
 - 1;

407 
emu_luns
[
cmd
->
phy_lun
].
	`bufq_wrôe
”mu_lun†+ cmd->phy_lun, 
µa
, 
wr_buf
[
hód_ödex
] + 
sdev
->
«nd_∑ge_ˇ∑côy
 * 
∂™e
, 
bufq_mëad©a
[hód_ödex] + sdev->
logicbs_ö_∑ge
 *Ölane);

408 
µa
 -
sdev
->
∑ges_ö_eblock
;

409 
∂™e
--;

411 i‡(
sdev
->
øid5_suµ‹ãd
) {

412 
	`©omic_ªad
(&
ªmaöög_∑ges
[
hód_ödex
]) <= 0)

413 
	`sh™n⁄_m¶ìp
(1);

414 i‡(
	`©omic_dec_™d_ã°
(&
ªmaöög_∑ges
[
hód_ödex
]))

415 
	`sh™n⁄_wake_up
(&
wrôe_d⁄e_evít
[
hód_ödex
]);

417 } 
∂™e
 >= 0);

419 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LOGICB
] = 0;

420 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LUN
] = 0;

421 
buf_ödex
[
hód_ödex
][
BUFQ_VECT_CHUNK
] = 0;

423 *
°©us
 = 0;

425 
sh_cmd_buf_ªad
:

426 
mëad©a
 = 
	`cmd_queue_öc
(
°©us
, 1);

427 i‡((
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LUN
] !
cmd
->
phy_lun
) ||

428 (
buf_ödex
[
hód_ödex
][
BUFQ_VECT_CHUNK
] !(
cmd
->
µa
 & ~
∂™e_mask
)) ||

429 (
buf_ödex
[
hód_ödex
][
BUFQ_VECT_LOGICB
] <
cmd
->
logicb_ödex
)) {

430 
°©us
[0] = 0xfe;

431 
°©us
[1] = 0xff;

432 
°©us
[2] = 0xff;

433 
°©us
[3] = 0xff;

434 
°©us
[4] = 0xff;

435 
°©us
[5] = 0xff;

436 
°©us
[6] = 0xff;

437 
°©us
[7] = 0xff;

438 *
mëad©a
 = 0xffffffffffffffff;

439 
	`debugs1
("bufq_ªad:Åhi†pb®i†nŸ i¿buf„∏queue.....phy_lun=%d,Ö∑=%d, index=%d.\n", 
cmd
->
phy_lun
, cmd->
µa
, cmd->
logicb_ödex
);

442 i‡(
cmd
->
±es
) {

443 
œ°_size
 = ()*
d©a_±r
 & (
sdev
->
logicb_size
 - 1);

444 
fú°_size
 = 
sdev
->
logicb_size
 - 
œ°_size
;

445 
	`BUG_ON
(
œ°_size
 == 0);

446 
	`BUG_ON
(
fú°_size
 == 0);

447 
	`mem˝y
((*)*
d©a_±r
, 
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
, 
fú°_size
);

448 
d©a_±r
 = 
	`cmd_queue_öc
(data_ptr, 1);

449 
	`mem˝y
((*)*
d©a_±r
, 
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
 + 
fú°_size
, 
œ°_size
);

451 
	`mem˝y
((*)*
d©a_±r
, 
wr_buf
[
hód_ödex
] + 
cmd
->
logicb_ödex
 * 
sdev
->
logicb_size
, sdev->logicb_size);

452 *
mëad©a
 = 
bufq_mëad©a
[
hód_ödex
][
cmd
->
logicb_ödex
];

453 
°©us
[0] = 0;

454 
°©us
[1] = 0;

455 
°©us
[2] = 0;

456 
°©us
[3] = 0;

457 
°©us
[4] = 0;

458 
°©us
[5] = 0;

459 
°©us
[6] = 0;

460 
°©us
[7] = 0;

463 
	`sh™n⁄_îr
("unknow¿›code=0x%x.\n", 
cmd
->
›code
);

465 
sdev
->
bufq_sq_hw_èû
[
hód_ödex
] = (sdev->bufq_sq_hw_èû[hód_ödex] + 
öfo
->
cmd_Àn
)%
QUEUE_SIZE
;

466 
sdev
->
bufq_cq_hw_hód
[
hód_ödex
] = sdev->
bufq_sq_hw_èû
[head_index];

468 
	`•ö_lock_bh
(&
emu_öt_lock
);

469 
emu_öãºu±_ve˘‹
 |(1UL << 
sdev
->
öå_big_shi·
[
hód_ödex
]);

470 i‡(
emu_dißbÀ_úq
 == 0) {

471 
emu_dißbÀ_úq
 = 1;

472 
	`sh™n⁄_èskÀt_scheduÀ
(&
sdev
->
comp_èskÀt
);

474 
	`•ö_u∆ock_bh
(&
emu_öt_lock
);

477 
	}
}

479 
	$hŸ_bufq_emuœt‹_thªad
(*
d©a
)

481 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
d©a
;

482 
	`bufq_emuœt‹_thªad
(
sdev
, 
HOT_INDEX
);

484 
	}
}

486 
	$cﬁd_bufq_emuœt‹_thªad
(*
d©a
)

488 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
d©a
;

489 
	`bufq_emuœt‹_thªad
(
sdev
, 
COLD_INDEX
);

491 
	}
}

495 
	$öô_Âga_emu_v¨übÀs
(
sh™n⁄_dev
 *
sdev
)

497 
	`•ö_lock_öô
(&
∑rôy_buf_lock
[0]);

498 
	`•ö_lock_öô
(&
∑rôy_buf_lock
[1]);

499 
	`sh™n⁄_öô_waôqueue_hód
(&
sb_d⁄e_evít
[0]);

500 
	`sh™n⁄_öô_waôqueue_hód
(&
sb_d⁄e_evít
[1]);

501 
	`©omic_£t
(&
ªmaöög_°rùe_∑ges
[0], 0);

502 
	`©omic_£t
(&
ªmaöög_°rùe_∑ges
[1], 0);

503 
	`©omic_£t
(&
ªmaöög_∑ges
[0], 0xffffffff);

504 
	`©omic_£t
(&
ªmaöög_∑ges
[1], 0xffffffff);

505 
	`sh™n⁄_öô_waôqueue_hód
(&
wrôe_d⁄e_evít
[0]);

506 
	`sh™n⁄_öô_waôqueue_hód
(&
wrôe_d⁄e_evít
[1]);

507 
	`sh™n⁄_öô_waôqueue_hód
(&
œ°_∑rôy_d⁄e_evít
[0]);

508 
	`sh™n⁄_öô_waôqueue_hód
(&
œ°_∑rôy_d⁄e_evít
[1]);

510 #ifde‡
SHANNON_USE_WRITE_BUFFER


512 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
bufq_emu_waô
[0]);

513 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
bufq_emu_waô
[1]);

514 
sdev
->
bufq_emu_thªad
[
HOT_INDEX
] = 
	`sh™n⁄_kthªad_run
(
hŸ_bufq_emuœt‹_thªad
, sdev, "shannon_hot_bufq");

515 i‡(
	`SHANNON_IS_ERR
(
sdev
->
bufq_emu_thªad
[
HOT_INDEX
])) {

516 
	`sh™n⁄_îr
("create hot_bufqÉmulatorÅhread failed.\n");

517 
	`BUG
();

519 
sdev
->
bufq_emu_thªad
[
COLD_INDEX
] = 
	`sh™n⁄_kthªad_run
(
cﬁd_bufq_emuœt‹_thªad
, sdev, "shannon_cold_bufq");

520 i‡(
	`SHANNON_IS_ERR
(
sdev
->
bufq_emu_thªad
[
COLD_INDEX
])) {

521 
	`sh™n⁄_îr
("create cold_bufqÉmulatorÅhread failed.\n");

522 
	`BUG
();

525 
wr_buf
[0] = 
	`sh™n⁄_kzÆloc
(
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
GFP_SHANNON
);

526 i‡(!
wr_buf
[0]) {

527 
	`sh™n⁄_îr
("CanÇotállocateÉnough memory for hot_buf.\n");

528 
	`BUG
();

530 
wr_buf
[1] = 
	`sh™n⁄_kzÆloc
(
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
, 
GFP_SHANNON
);

531 i‡(!
wr_buf
[1]) {

532 
	`sh™n⁄_îr
("CanÇotállocateÉnough memory for cold_buf.\n");

533 
	`BUG
();

536 
bufq_mëad©a
[0] = 
	`sh™n⁄_kzÆloc
(
sdev
->
logicbs_ö_chunk
 * (
u64
), 
GFP_SHANNON
);

537 
bufq_mëad©a
[1] = 
	`sh™n⁄_kzÆloc
(
sdev
->
logicbs_ö_chunk
 * (
u64
), 
GFP_SHANNON
);

539 
	}
}

541 
	$‰ì_Âga_emu_v¨übÀs
(
sh™n⁄_dev
 *
sdev
)

543 i‡(
∑rôy_buf
[0]) {

544 
	`sh™n⁄_k‰ì
(
mëad©a_∑rôy
[0]);

545 
	`sh™n⁄_k‰ì
(
∑rôy_buf
[0]);

547 i‡(
∑rôy_buf
[1]) {

548 
	`sh™n⁄_k‰ì
(
mëad©a_∑rôy
[1]);

549 
	`sh™n⁄_k‰ì
(
∑rôy_buf
[1]);

552 #ifde‡
SHANNON_USE_WRITE_BUFFER


553 
	`sh™n⁄_kthªad_°›
(
sdev
->
bufq_emu_thªad
[0]);

554 
	`sh™n⁄_kthªad_°›
(
sdev
->
bufq_emu_thªad
[1]);

555 
	`sh™n⁄_k‰ì
(
wr_buf
[0]);

556 
	`sh™n⁄_k‰ì
(
wr_buf
[1]);

557 
	`sh™n⁄_k‰ì
(
bufq_mëad©a
[0]);

558 
	`sh™n⁄_k‰ì
(
bufq_mëad©a
[1]);

560 
	}
}

	@shannon_ftl.c

12 
	~"sh™n⁄_ªgs.h
"

13 
	~"sh™n⁄.h
"

15 
	gwl_debug
 = 0;

16 
sh™n⁄_memblock_¥óŒoc
;

17 
sh™n⁄_öô_ãmp
;

18 
sh™n⁄_memblock_poﬁ
 
m≠_èbÀ_poﬁ
;

19 
sh™n⁄_memblock_poﬁ
 
ãmp_èbÀ_poﬁ
;

20 
sh™n⁄_f‹˚_ª˛aim_a˘iveblock
;

21 
sh™n⁄_dy«mic_úq_dñay
;

23 
	$gë_∑rôy_lun
(
sub_group
 *
group
)

25  
group
->
°¨t_lun
 + group->
∑rôy_lun_off£t
;

26 
	}
}

28 
	$fú°_lun
(
sub_group
 *
group
)

30  
group
->
°¨t_lun
 + group->
fú°_lun_off£t
;

31 
	}
}

33 
	$œ°_d©a_lun
(
sub_group
 *
group
)

35  
group
->
°¨t_lun
 + group->
œ°_d©a_lun_off£t
;

36 
	}
}

38 #ifde‡
CONFIG_SHANNON_DEBUG


39 
	~"sh™n⁄_debug.c
"

42 
	$Õmt_lock_öô
(
m≠_èbÀ_°ru˘
 *
Õmt
)

44 
i
;

45 
i
 = 0; i < 
LOCK_COUNT
; i++) {

46 
	`sh™n⁄_•ö_lock_öô
(&
Õmt
->
m≠_èbÀ_lock
[
i
]);

49 
	}
}

51 
	$sdisk_m≠_èbÀ_lock_öô
(
sh™n⁄_disk
 *
sdisk
)

53 
i
;

55 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++)

56 
	`Õmt_lock_öô
(&
sdisk
->
Õmt_¨øy
[
i
]);

57 
	}
}

59 
	$£t_pba_èbÀ_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
, 
°©e
)

61 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
°©e
;

62 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

63 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

64 
	}
}

66 
	$˛ór_pba_èbÀ_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
, 
°©e
)

68 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
°©e
;

69 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

70 
	`sh™n⁄_˛ór_bô
(
bô_off£t
, 
bô_ba£
);

71 
	}
}

73 
	$ã°_pba_èbÀ_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
, 
°©e
)

75 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
°©e
;

76 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

77  
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
);

78 
	}
}

80 
	$ã°_™d_£t_pba_èbÀ_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
, 
°©e
)

82 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
°©e
;

83 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

84  
	`sh™n⁄_ã°_™d_£t_bô
(
bô_off£t
, 
bô_ba£
);

85 
	}
}

87 
	$£t_pba_√xt_hód
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
logicb_t
 
lun_pba
, 
hód
)

89 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

91 
	`BUG_ON
((
hód_ödex
 !=0) && (head_index != 1));

92 i‡(
hód_ödex
) {

93 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


94 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

96 
	`£t_pba_èbÀ_°©e
(
sdev
, 
lun
, 
lun_pba
, 
NEXT_HEAD_SHIFT
);

98 
	`˛ór_pba_èbÀ_°©e
(
sdev
, 
lun
, 
lun_pba
, 
NEXT_HEAD_SHIFT
);

99 
	}
}

102 
	$gë_pba_√xt_hód
(
sh™n⁄_dev
 *
sdev
, 
lun
, 
logicb_t
 
lun_pba
)

104  
	`ã°_pba_èbÀ_°©e
(
sdev
, 
lun
, 
lun_pba
, 
NEXT_HEAD_SHIFT
);

105 
	}
}

107 
	$£t_gc_ªad_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

109 
	`£t_pba_èbÀ_°©e
(
dev
, 
lun
, 
lun_pba
, 
STATE_GC_READ
);

110 
	}
}

112 
	$ã°_gc_ªad_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

114  
	`ã°_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_GC_READ
);

115 
	}
}

117 
	$£t_gc_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun_pba
 *
pba
)

119 
	`sh™n⁄_©omic_öc
(&
dev
->
gc_ö_Êight
);

120 
sb
->
gc_ö_Êight
++;

121 
	`£t_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_GC_WRITE
);

122 
	}
}

124 
	$ã°_™d_£t_gc_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun_pba
 *
pba
)

126 
ﬁd_°©e
;

127 
ﬁd_°©e
 = 
	`ã°_™d_£t_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_GC_WRITE
);

128 i‡(
ﬁd_°©e
 == 0) {

129 
	`sh™n⁄_©omic_öc
(&
dev
->
gc_ö_Êight
);

130 
sb
->
gc_ö_Êight
++;

132  
ﬁd_°©e
;

133 
	}
}

135 
	$ã°_gc_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

137  
	`ã°_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_GC_WRITE
);

138 
	}
}

140 
	$£t_gc_wrôe_d⁄e
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
lun_pba
 *
pba
)

142 
	`sh™n⁄_©omic_dec
(&
dev
->
gc_ö_Êight
);

143 
sb
->
gc_ö_Êight
--;

144 
	}
}

146 
	$£t_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
, 
hód_ödex
)

148 
	`BUG_ON
((
hód_ödex
 != 0) && (head_index != 1));

149 
	`£t_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_IN_HOT_BUFQ
 + 
hód_ödex
);

150 
	}
}

152 
	$˛ór_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun
, 
lun_pba
, 
hód_ödex
)

154 
	`BUG_ON
((
hód_ödex
 != 0) && (head_index != 1));

155 
	`˛ór_pba_èbÀ_°©e
(
dev
, 
lun
, 
lun_pba
, 
STATE_IN_HOT_BUFQ
 + 
hód_ödex
);

156 
	}
}

158 
	$ã°_pba_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun
, 
lun_pba
)

160  
	`ã°_pba_èbÀ_°©e
(
dev
, 
lun
, 
lun_pba
, 
STATE_IN_HOT_BUFQ
) ||

161 
	`ã°_pba_èbÀ_°©e
(
dev
, 
lun
, 
lun_pba
, 
STATE_IN_COLD_BUFQ
);

162 
	}
}

164 
	$gë_hód_ödex_ö_bufq
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

166 if(
	`ã°_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_IN_HOT_BUFQ
))

167  
HOT_INDEX
;

168 if(
	`ã°_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_IN_COLD_BUFQ
)) {

169 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


170 
	`BUG_ON
(!
dev
->
u£_duÆ_hód
);

172  
COLD_INDEX
;

175 
	}
}

177 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


178 
	$£t_ho°_wrôe_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

180 
	`£t_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_HOST_INVALID_WR
);

181 
	}
}

183 
	$£t_gc_wrôe_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

185 
	`£t_pba_èbÀ_°©e
(
dev
, 
pba
->
lun
,Öba->
lun_pba
, 
STATE_GC_INVALID_WR
);

186 
	}
}

188 
	$£t_ho°_wrôe_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

191 
	}
}

193 
	$£t_gc_wrôe_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

196 
	}
}

199 
	$£t_ho°_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
ﬁd
)

201 
bô_off£t
 = (
ﬁd
->
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_HOST_WRITE
;

202 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[
ﬁd
->lun]->
pba_èbÀ
 + (ﬁd->
lun_pba
*
PBA_ENTRY_LEN
)/64;

203 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

204 
	}
}

206 
	$˛ór_ho°_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
ﬁd
)

208 
bô_off£t
 = (
ﬁd
->
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_HOST_WRITE
;

209 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[
ﬁd
->lun]->
pba_èbÀ
 + (ﬁd->
lun_pba
*
PBA_ENTRY_LEN
)/64;

210 
	`sh™n⁄_˛ór_bô
(
bô_off£t
, 
bô_ba£
);

211 
	}
}

213 
	$ã°_ho°_wrôe_°©e
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

215 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_HOST_WRITE
;

216 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

218  
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
);

219 
	}
}

221 
	$ã°_wrôe_ö_¥o˚ss
(
sh™n⁄_dev
 *
dev
, 
lun_pba
 *
pba
)

223  
	`ã°_gc_wrôe_°©e
(
dev
, 
pba
Ë|| 
	`ã°_ho°_wrôe_°©e
(dev,Öba->
lun
,Öba->
lun_pba
);

224 
	}
}

226 
	$is_°Æe
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

228 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_STALE_SHIFT
;

229 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

231  
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
);

232 
	}
}

234 
	$£t_vÆid
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

236 
sb_ödex
;

237 
sh™n⁄_sb
 *
sb
;

238 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_STALE_SHIFT
;

239 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

241 
sb_ödex
 = 
lun_pba
/
dev
->
logicbs_ö_siblög_eblock
;

242 i‡(!
	`sh™n⁄_dev_is_g5
(
dev
))

243 
	`BUG_ON
(
sb_ödex
==0);

244 
sb
 = 
dev
->
sbs
 + 
sb_ödex
;

246 
	`sh™n⁄_˛ór_bô
(
bô_off£t
, 
bô_ba£
);

247 
	`sh™n⁄_©omic_öc
(&
sb
->
vÆid_∑ges
);

248 
	}
}

252 
	$£t_ﬁd_pba_°Æe
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

254 
sb_ödex
;

255 
sh™n⁄_sb
 *
sb
;

256 
sh™n⁄_•ölock_t
 *
lock
;

257 
bô_off£t
 = (
lun_pba
*
PBA_ENTRY_LEN
)%64 + 
STATE_STALE_SHIFT
;

258 *
bô_ba£
 = (
u64
 *)
dev
->
lun
[lun]->
pba_èbÀ
 + (
lun_pba
*
PBA_ENTRY_LEN
)/64;

260 
	`BUG_ON
(
	`sh™n⁄_ã°_bô
(
bô_off£t
, 
bô_ba£
));

262 
sb_ödex
 = 
lun_pba
/
dev
->
logicbs_ö_siblög_eblock
;

263 i‡(!
	`sh™n⁄_dev_is_g5
(
dev
))

264 
	`BUG_ON
(
sb_ödex
==0);

265 
sb
 = 
dev
->
sbs
 + 
sb_ödex
;

267 
	`sh™n⁄_£t_bô
(
bô_off£t
, 
bô_ba£
);

268 i‡(
	`u∆ikñy
(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sb
->
vÆid_∑ges
Ë&& (
	`sh™n⁄_©omic_ªad
(&sb->
ö_wrôe_logicbs
) == 0))) {

269 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

270 
sb
->
°©e
) {

271 
COPY_ERR_BLOCK
:

272 
	`sh™n⁄_öfo
("%†:block wôhÅy≥ %d become†em±y. sb_ödex=%d.\n", 
dev
->
sdisk
.
disk_«me
,

273 
COPY_ERR_BLOCK
, 
sb
->
sb_ödex
);

274 
	`sb_m¨k_îr‹_lun_bad
(
dev
, 
sb
);

275 
	`ªmove_‰om_gc_°©e_li°
(
sb
);

276 
lock
 = &
dev
->
c›y_îr_lock
;

278 
ERROR_BLOCK
:

279 
	`sh™n⁄_öfo
("%s: block wôhÅy≥ %d become†em±y. sb_ödex=%d.\n", 
dev
->
sdisk
.
disk_«me
,

280 
ERROR_BLOCK
, 
sb
->
sb_ödex
);

281 
lock
 = &
dev
->
îr_blks_lock
;

283 
IN_RECOVER_BLOCK
:

284 
	`debugs1
("%s: A in_ªcovî_block föished. sb_ödex=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
);

285 
îa£
;

286 
IN_GC_BLOCK
:

288 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_blk˙t
);

289 
	`ªmove_‰om_gc_°©e_li°
(
sb
);

290 
îa£
;

291 
IN_WL_BLOCK
:

293 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_wl_blk˙t
);

294 
îa£
;

296 
LAST_HOT_BLOCK
:

297 
LAST_COLD_BLOCK
:

298 
îa£
;

299 
HOT_BLOCK_LIST
:

300 
lock
 = &
dev
->
u£d_blocks_lock
[
HOT_INDEX
];

302 
COLD_BLOCK_LIST
:

303 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


304 
	`BUG_ON
(!
dev
->
u£_duÆ_hód
);

306 
lock
 = &
dev
->
u£d_blocks_lock
[
COLD_INDEX
];

308 
WAIT_COPY_BLOCK
:

309 
	`debugs3
("A waô_c›y_block(sb_ödex=%dËbecomê0 vÆid_∑ges.\n", 
sb
->
sb_ödex
);

310 
lock
 = &
dev
->
waô_c›y_lock
;

312 
WAIT_WL_BLOCK
:

313 
	`debugs3
("A waô_wl_block(sb_ödex=%dËbecomê0 vÆid_∑ges.\n", 
sb
->
sb_ödex
);

314 
lock
 = &
dev
->
waô_wl_lock
;

321 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

324 
	`sh™n⁄_•ö_lock_bh
(
lock
);

325 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

326 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
)

327 
dev
->
u£d_blk˙t
[
HOT_INDEX
]--;

328 i‡(
sb
->
°©e
 =
COLD_BLOCK_LIST
)

329 
dev
->
u£d_blk˙t
[
COLD_INDEX
]--;

330 i‡(
sb
->
°©e
 =
COPY_ERR_BLOCK
)

331 
dev
->
c›y_îr_blk˙t
--;

332 i‡(
sb
->
°©e
 =
WAIT_COPY_BLOCK
)

333 
dev
->
waô_c›y_blk˙t
--;

334 i‡(
sb
->
°©e
 =
ERROR_BLOCK
) {

335 
dev
->
îr_blk˙t
--;

336 
	`check_îr_blk˙t_dec
(
dev
);

338 
	`sh™n⁄_•ö_u∆ock_bh
(
lock
);

339 
îa£
:

341 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

342 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_îa£d_lock
);

343 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
dev
->
waô_îa£d
);

344 
dev
->
waô_îa£d_blk˙t
++;

345 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_îa£d_lock
);

346 i‡(
	`likñy
((
dev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& dev->
gc_thªad
))

347 
	`sh™n⁄_wake_up_¥o˚ss
(
dev
->
gc_thªad
);

348 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

350 
	}
}

352 
	$pba_is_övÆid
(
sh™n⁄_dev
 *
dev
, 
lun
, 
logicb_t
 
lun_pba
)

354  
	`is_°Æe
(
dev
, 
lun
, 
lun_pba
Ë|| 
	`ã°_ho°_wrôe_°©e
(dev,Üun,Üun_pba);

355 
	}
}

357 
	$˛ór_pba_èbÀ
(
sh™n⁄_dev
 *
dev
, 
sb_ödex
)

359 
off£t
 = (
sb_ödex
*
dev
->
logicbs_ö_siblög_eblock
*
PBA_ENTRY_LEN
)/8;

360 
Àn
 = (
dev
->
logicbs_ö_siblög_eblock
*
PBA_ENTRY_LEN
)/8;

361 
i
;

363 
i
 = 0; i < 
dev
->
lun_cou¡
; i++) {

364 i‡(!
dev
->
lun
[
i
]->
pba_èbÀ
)

366 
	`sh™n⁄_mem£t
((*)
dev
->
lun
[
i
]->
pba_èbÀ
 + 
off£t
, 
ALL_STALE
, 
Àn
);

368 
	}
}

370 
	ssh™n⁄_chunk_ªq
 {

371 
sh™n⁄_ªque°
 *
	mfú°
;

372 
	mcou¡
;

376 
	$g©hî_chunk_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_chunk_ªq
 *
chunk
, 
sh™n⁄_ªque°
 *
ªq
)

378 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
) | \

379 (((
u64
)
ªq
->
ns_id
 & 
NS_ID_MASK
Ë<< 
NS_ID_SHIFT
) | \

380 (((
u64
)
ªq
->
ns_£q_num
 & 
NS_SEQ_NUM_MASK
Ë<< 
NS_SEQ_NUM_SHIFT
) | \

381 (
ªq
->
lba
 & 
LONG_LBA_MASK
);

382 i‡(
chunk
->
fú°
 =
NULL
) {

383 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

384 
chunk
->
fú°
 = 
ªq
;

386 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
chunk
->
fú°
->chunk_list);

387 
chunk
->
cou¡
++;

388 i‡(
chunk
->
cou¡
 =
sdev
->
logicbs_ö_chunk
) {

389 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[1]);

390 
	`sh™n⁄_li°_add_èû
(&
chunk
->
fú°
->
li°
, &
sdev
->
ªq_queue
[1]);

391 
chunk
->
fú°
 = 
NULL
;

392 
chunk
->
cou¡
 = 0;

393 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªq_queue_lock
[1]);

394 
	`sh™n⁄_©omic_öc
(&
sdev
->
wrôe_ªqs
[1]);

396 
	}
}

400 
	$ªmove_sb_‰om_‰ì_blk_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

402 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

403 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

404 
sdev
->
‰ì_blk˙t
--;

405 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

406 
	}
}

408 
	$__put_öto_waô_c›y_li°
(
sh™n⁄_sb
 *
sb
)

410 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

411 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_c›y_lock
);

412 
sb
->
°©e
 = 
WAIT_COPY_BLOCK
;

413 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_c›y
);

414 
sdev
->
waô_c›y_blk˙t
++;

415 
	`sh™n⁄_öfo
("%s(): Add sb_ödex=%dÅÿwaô_c›yÜi°.\n", 
__func__
, 
sb
->
sb_ödex
);

416 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_c›y_lock
);

417 
	}
}

420 
	$put_öto_waô_c›y_li°
(
sh™n⁄_sb
 *
sb
)

422 
	`sh™n⁄_öfo
("%s():É¡î, sb=%d.\n", 
__func__
, 
sb
->
sb_ödex
);

423 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

424 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

425 
	`__put_öto_waô_c›y_li°
(
sb
);

426 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

427 
	}
}

429 
ölöe
 
	$add_wr_group_poöt
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
hód_ödex
)

431 
sub_group
 *
group
;

433 
	`BUG_ON
(
sdev
->
wr_group
[
hód_ödex
] >sdev->
∑rôy_groups
);

434 
	`BUG_ON
(
sdev
->
wr_chunk
[
hód_ödex
] >sdev->
∑ges_ö_eblock
);

436 
sdev
->
wr_group
[
hód_ödex
]++;

437 i‡(
sdev
->
wr_group
[
hód_ödex
] =sdev->
∑rôy_groups
) {

438 
sdev
->
wr_group
[
hód_ödex
] = 0;

439 
sdev
->
wr_chunk
[
hód_ödex
]++;

441 i‡(
	`likñy
(
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_ACTIVE_DONE
)) {

442 i‡((
sdev
->
∑ges_ö_eblock
 - sdev->
wr_chunk
[
hód_ödex
]) < sdev->pages_in_eblock / 4) {

443 
sb
->
√xt_sb
 =
INVALID_SB_INDEX
) {

444 
sb
->
√xt_sb
 = 
	`gë_√xt_sb
(
sdev
, 
hód_ödex
);

445 i‡(
sb
->
√xt_sb
 !
INVALID_SB_INDEX
)

447 
	`sh™n⁄_m¶ìp
(5);

448 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
waô_‰ì_blk
, (sdev->
‰ì_blk˙t
 != 0));

450 
	`check_îa£d_°©e
(&
sdev
->
sbs
[
sb
->
√xt_sb
]);

454 i‡(
sdev
->
wr_chunk
[
hód_ödex
] =sdev->
∑ges_ö_eblock
) {

458 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[
hód_ödex
]];

459 } 
group
->
phy_ödex
 < 0);

462 
	}
}

464 
	$£nd_dummy_∑rôy_ªq
(
sh™n⁄_sb
 *
sb
, 
∑rôy_lun
, 
µa
)

466 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

467 
sh™n⁄_ªque°
 *
ªq
, *
∑rôy
;

468 
∂™e
;

471 
∑rôy
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

472 
	`£t_ªq_debug_èg
(
∑rôy
, 
WRITE_PARITY_TAG
, 0);

473 
∑rôy
->
›code
 = 
sh_cmd_∑rôy
;

474 
∑rôy
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
] | (1 << 
DUMMY_WRITE_SHIFT
Ë| (1 << 
PHANTOM_WRITE_SHIFT
);

475 
∑rôy
->
pba
.
lun
 = 
∑rôy_lun
;

476 
∑rôy
->
µa
 =Öpa;

477 
∑rôy
->
pba
.
lun_pba
 = 
µa
 * 
sdev
->
logicbs_ö_∑ge
;

478 
	`SHANNON_INIT_LIST_HEAD
(&
∑rôy
->
chunk_li°
);

480 
∂™e
 = 1;

481 
∂™e
 < 
sdev
->
∂™es
) {

482 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

483 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_PARITY_TAG
, 
∂™e
);

484 
ªq
->
›code
 = 
sh_cmd_∑rôy
;

485 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
] | (1 << 
DUMMY_WRITE_SHIFT
Ë| (1 << 
PHANTOM_WRITE_SHIFT
);

486 
ªq
->
pba
.
lun
 = 
∑rôy_lun
;

487 
ªq
->
µa
 = 
∑rôy
->µ®+ 
sdev
->
∑ges_ö_eblock
 * 
∂™e
;

488 
ªq
->
pba
.
lun_pba
 =Ñeq->
µa
 * 
sdev
->
logicbs_ö_∑ge
;

489 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
∑rôy
->chunk_list);

490 
∂™e
++;

492 
	`add_ªque°_queue_èû
(
sb
->
sdev
, 
∑rôy
, 1);

493 
	}
}

495 
	$£nd_∑rôy_ªq
(
sh™n⁄_sb
 *
sb
, 
∑rôy_lun
, 
µa
)

497 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

498 
sh™n⁄_ªque°
 *
ªq
, *
∑rôy
;

499 
∂™e
;

502 
∑rôy
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

503 
	`£t_ªq_debug_èg
(
∑rôy
, 
WRITE_PARITY_TAG
, 0);

504 
∑rôy
->
›code
 = 
sh_cmd_∑rôy
;

505 
∑rôy
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

506 
∑rôy
->
pba
.
lun
 = 
∑rôy_lun
;

507 
∑rôy
->
µa
 =Öpa;

508 
∑rôy
->
pba
.
lun_pba
 = 
µa
 * 
sdev
->
logicbs_ö_∑ge
;

509 
	`SHANNON_INIT_LIST_HEAD
(&
∑rôy
->
chunk_li°
);

511 
∂™e
 = 1;

512 
∂™e
 < 
sdev
->
∂™es
) {

513 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

514 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_PARITY_TAG
, 
∂™e
);

515 
ªq
->
›code
 = 
sh_cmd_∑rôy
;

516 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

517 
ªq
->
pba
.
lun
 = 
∑rôy_lun
;

518 
ªq
->
µa
 = 
∑rôy
->µ®+ 
sdev
->
∑ges_ö_eblock
 * 
∂™e
;

519 
ªq
->
pba
.
lun_pba
 =Ñeq->
µa
 * 
sdev
->
logicbs_ö_∑ge
;

520 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
∑rôy
->chunk_list);

521 
∂™e
++;

523 
	`add_ªque°_queue_èû
(
sb
->
sdev
, 
∑rôy
, 1);

524 
	}
}

526 
	$__fûl_Æl_bœnk_ïûog_∑rôy_group_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

528 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

529 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

530 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

532 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

533 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

534 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

535 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

536 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

537 
	`‰ì_ªq
(
ªq
);

539 
	`‰ì_sbio
(
sbio
);

541 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

542 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

543 
	}
}

545 
	$__fûl_Æl_bœnk_ïûog_∑rôy_group
(
sh™n⁄_sb
 *
sb
)

547 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

548 
sh™n⁄_bio
 *
sbio
;

549 
sh™n⁄_ªque°
 *
ªq
;

550 
sub_group
 *
group
 = &
sb
->sub_group[
sdev
->
wr_group
[sb->
hód_ödex
]];

551 
wr_off£t
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

552 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

553 
ïûog_°¨t
 = 
sdev
->
logicbs_ö_siblög_eblock
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 - sb->
logicbs_ö_ïûog
;

554 
sh™n⁄_chunk_ªq
 
ªq_hód
;

555 
i
, 
∂™e
, 
fú°_pba
, 
lun_off£t
, 
lun_ö_group
;

556 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

558 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

559 
ªq_hód
.
fú°
 = 
NULL
;

560 
ªq_hód
.
cou¡
 = 0;

562 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

563 
	`£t_sbio_debug_èg
(
sbio
, 
FILL_BLANK_EPILOG_TAG
);

564 
sbio
->
ˇŒback
 = 
__fûl_Æl_bœnk_ïûog_∑rôy_group_ˇŒback
;

565 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

566 
sbio
->
d©a
 = 
sb
;

568 
fú°_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + sdev->
logicbs_ö_∑ge
 * sdev->
wr_chunk
[sb->
hód_ödex
];

569 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

570 
lun_ö_group
 = 0;

572 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

573 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + 
lun_off£t
))

574 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

576 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_chunk
, &
sbio
->
u£r_cou¡
);

577 
sbio
->
logicbs
 +
sdev
->
logicbs_ö_chunk
;

579 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

580 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

581 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

582 
	`£t_ªq_debug_èg
(
ªq
, 
FILL_BLANK_EPILOG_TAG
, 
i
);

583 
ªq
->
›code
 = 
sh_cmd_wrôe
;

584 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

585 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

586 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

587 
ªq
->
pba
.
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

588 
ªq
->
pba
.
lun_pba
 = 
fú°_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
;

589 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

590 
ªq
->
wr_off£t
 = wr_offset++;

591 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

592 i‡(
ªq
->
wr_off£t
 >
ïûog_°¨t
)

593 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
	`ïûog_gë_addr
(
sb
->
ïûog
,Ñeq->
wr_off£t
 - 
ïûog_°¨t
, 
sdev
), sdev->
logicb_size
);

594 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

595 
ªq
->
sbio
 = sbio;

596 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

597 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

598 
	`g©hî_chunk_ªq
(
sdev
, &
ªq_hód
, 
ªq
);

601 
lun_ö_group
++;

602 } 
lun_ö_group
 !
sb
->
mö_d©a_luns
);

603 
	`BUG_ON
(
ªq_hód
.
cou¡
 != 0);

604 i‡(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
)

605 
	`£nd_dummy_∑rôy_ªq
(
sb
, 
	`gë_∑rôy_lun
(
group
), sb->
sb_ödex
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->
hód_ödex
]);

607 
	`£nd_∑rôy_ªq
(
sb
, 
	`gë_∑rôy_lun
(
group
), sb->
sb_ödex
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->
hód_ödex
]);

608 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

609 
	}
}

611 
ölöe
 
	$£t_a˘ive_fú°_vÆid_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

613 
sub_group
 *
group
;

615 
sdev
->
wr_lun_off£t
[
sb
->
hód_ödex
] = sb->
sub_group
[sdev->
wr_group
[sb->hód_ödex]].
fú°_lun_off£t
;

616 
sdev
->
wr_∑ge
[
sb
->
hód_ödex
] = sdev->
wr_chunk
[sb->head_index];

617 
sdev
->
wr_∂™e
[
sb
->
hód_ödex
] = 0;

618 
sdev
->
wr_logicb
[
sb
->
hód_ödex
] = 0;

619 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

620 
sb
->
wr_off£t
 = 
sdev
->
logicbs_ö_chunk
 * sb->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

621 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

622 
	}
}

624 
	$fûl_hÆf_bœnk_a˘ive_∑rôy_group_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

626 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

627 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

628 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

630 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

631 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

632 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

633 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

634 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

635 
	`‰ì_ªq
(
ªq
);

637 
	`‰ì_sbio
(
sbio
);

639 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

640 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

641 
	}
}

643 
	$fûl_hÆf_bœnk_a˘ive_∑rôy_group
(
sh™n⁄_bio
 *
sbio
, 
ö_ïûog
, 
fûl_îr_∑ge
)

645 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

646 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

647 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

648 
sub_group
 *
group
 = &
sb
->sub_group[
sdev
->
wr_group
[sb->
hód_ödex
]];

649 
sh™n⁄_chunk_ªq
 
chunk
;

650 
ïûog_off£t
 = 
sb
->
mö_d©a_luns
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_siblög_eblock
 - sb->
logicbs_ö_ïûog
;

652 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

653 
chunk
.
fú°
 = 
NULL
;

654 
chunk
.
cou¡
 = 0;

656 i‡(
ö_ïûog
) {

658 
sh™n⁄_ªque°
 *
fú°_ªq
 = 
NULL
;

659 
i
;

661 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
)

662 i‡(
ªq
->
pba
.
lun
 =
	`fú°_lun
(
group
)) {

663 
fú°_ªq
 = 
ªq
;

666 
fú°_ªq
->
wr_off£t
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

667 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

668 
i
 = 1;

669 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
fú°_ªq
->
bio_li°
, bio_list) {

670 i‡(&
ªq
->
bio_li°
 =&
sbio
->
ªq_li°
)

672 i‡(
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
))

674 
ªq
->
wr_off£t
 = 
fú°_ªq
->wr_off£à+ 
i
;

675 
i
++;

677 i‡(
ªq
->
wr_off£t
 =
ïûog_off£t
) {

678 i‡(
ªq
->
_ecc
 < 
SH_FAKE_ERR
) {

679 
sh™n⁄_ïûog_hód
 *
ïûog_hód
 = (sh™n⁄_ïûog_hód *)
ªq
->
vút_addr
;

680 i‡((
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ïûog_w©îm¨k
Ë!
EPILOG_WATERMARK
) || \

681 (
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->
hód_ödex
Ë!
sb
->head_index)) {

682 
	`sh™n⁄_îr
("sb_index=%d, watermark=0x%lx, head_index=%d!\n",

683 
sb
->
sb_ödex
, ()
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ïûog_w©îm¨k
),

684 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->
hód_ödex
));

686 
sb
->
£q_num
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->seq_num);

687 
sb
->
îa£_cou¡î
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->erase_counter);

688 
sb
->
hód_ödex
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->head_index);

689 
sb
->
√xt_sb
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->next_sb);

690 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
£quí˚_numbî_lock
);

691 i‡(
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
£q_num
Ë>
sdev
->
£quí˚_numbî
)

692 
sdev
->
£quí˚_numbî
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
£q_num
) + 1;

693 
	`ªåõve_sm¨t_‰om_ïûog_hód
(
sdev
, 
ïûog_hód
);

694 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
£quí˚_numbî_lock
);

695 
	`WARN_ON
(
sdev
->
sbs
[
sb
->
√xt_sb
].
°©e
 !
√xt_blk_°©e
[sb->
hód_ödex
]);

699 
√xt_sb
 = 
sb
->next_sb;

700 
	`BUG_ON
(
√xt_sb
 !
INVALID_SB_INDEX
);

701 
√xt_sb
 = 
	`gë_√xt_sb
(
sdev
, 
sb
->
hód_ödex
);

702 
	`BUG_ON
(
√xt_sb
 =
INVALID_SB_INDEX
);

703 
sb
->
√xt_sb
 =Çext_sb;

704 
	`upd©e_ïûog_hód
(
sdev
, 
sb
);

710 
sbio
->
°©us
 = 0;

711 
sbio
->
logicbs
 = 
sb
->
mö_d©a_luns
 * 
sdev
->
logicbs_ö_chunk
;

712 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

713 
sbio
->
ˇŒback
 = 
fûl_hÆf_bœnk_a˘ive_∑rôy_group_ˇŒback
;

714 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

716 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

717 i‡(
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)) {

718 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

719 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

720 
	`‰ì_ªq
(
ªq
);

724 i‡(
ªq
->
_ecc
 < 
SH_FAKE_ERR
) {

725 
	`debugs3
("dummy wrôe:Üun=%d,Üun_pba=%d.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

727 
ªq
->
›code
 = 
sh_cmd_wrôe
;

728 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

730 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

731 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
] | (1 << 
DUMMY_WRITE_SHIFT
Ë| (1 << 
PHANTOM_WRITE_SHIFT
);

732 
	`g©hî_chunk_ªq
(
sdev
, &
chunk
, 
ªq
);

733 } i‡((
ªq
->
_ecc
 =
SH_ECC_UNCORRECTABLE
Ë|| (ªq->_ec¯=
SH_SOFT_ERR_2
)) {

734 
	`debugs3
("dummy wrôêötÿîr‹Öage:Üun=%d,Üun_pba=%d.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

736 
ªq
->
›code
 = 
sh_cmd_wrôe
;

737 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

739 i‡(
ö_ïûog
 && (
ªq
->
wr_off£t
 - 
ïûog_off£t
) == 0) {

740 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
	`ïûog_gë_addr
(
sb
->
ïûog
, 0, 
sdev
), sdev->
logicb_size
);

741 
ªq
->
›code
 = 
sh_cmd_wrôe
;

742 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

743 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

744 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

745 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

746 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

748 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

749 i‡(
fûl_îr_∑ge
) {

750 i‡(
ö_ïûog
)

751 
ªq
->
d©©y≥
 = 
NEED_RESCAN
;

753 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

754 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

755 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

757 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
] | (1 << 
DUMMY_WRITE_SHIFT
Ë| (1 << 
PHANTOM_WRITE_SHIFT
);

759 
	`g©hî_chunk_ªq
(
sdev
, &
chunk
, 
ªq
);

760 } i‡(
ö_ïûog
 && 
	`is_ïûog_pba
(
sb
, 
ªq
->
wr_off£t
)) {

761 
off£t_ö_ïûog
 = 
ªq
->
wr_off£t
 - 
ïûog_off£t
;

763 
	`debugs1
("bœnkÉpûogÖage:Üun=%d,Üun_pba=%d.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

764 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
	`ïûog_gë_addr
(
sb
->
ïûog
, 
off£t_ö_ïûog
, 
sdev
), sdev->
logicb_size
);

766 
ªq
->
›code
 = 
sh_cmd_wrôe
;

767 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

768 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

769 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

770 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

771 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

772 
	`g©hî_chunk_ªq
(
sdev
, &
chunk
, 
ªq
);

774 
	`debugs3
("bœnk d©®∑ge:Üun=%d,Üun_pba=%d.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

776 
ªq
->
›code
 = 
sh_cmd_wrôe
;

777 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

778 i‡(
ö_ïûog
) {

779 i‡(
sdev
->
lba_f‹m©
) {

780 
ªq
->
d©©y≥
 = 
NEED_RESCAN
;

781 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

783 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

784 
ªq
->
lba
 = 
INVALID_LBA2
;

787 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

788 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

790 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

791 
ªq
->
hód
 = 
wrôe_hód
[
sb
->
hód_ödex
];

792 
	`g©hî_chunk_ªq
(
sdev
, &
chunk
, 
ªq
);

795 
	`BUG_ON
(
chunk
.
cou¡
 != 0);

796 i‡(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
)

797 
	`£nd_dummy_∑rôy_ªq
(
sb
, 
	`gë_∑rôy_lun
(
group
), sb->
sb_ödex
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->
hód_ödex
]);

799 
	`£nd_∑rôy_ªq
(
sb
, 
	`gë_∑rôy_lun
(
group
), sb->
sb_ödex
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->
hód_ödex
]);

800 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

802 i‡(
ö_ïûog
) {

804 i‡(
	`add_wr_group_poöt
(
sdev
, 
sb
, sb->
hód_ödex
) < 0)

806 
	`__fûl_Æl_bœnk_ïûog_∑rôy_group
(
sb
);

810 
	}
}

812 
£t_œ°_a˘ive_blk
(
sh™n⁄_dev
 *
dev
, 
hód_ödex
);

813 
	$a·î_fûl_ïûog_of_a˘ive_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

815 
sh™n⁄_sb
 *
a˘ive_sb
;

817 
	`sb_‰ì_ïûog
(
sb
);

818 
	`£t_œ°_a˘ive_blk
(
sdev
, 
sb
->
hód_ödex
);

819 
	`put_öto_waô_c›y_li°
(
sb
);

820 i‡(
sb
->
√xt_sb
 =
INVALID_SB_INDEX
) {

821 
	`debugs0
("theÜastÖage ofáctive sb isállÉrror. cannot getÇext_sb.\n");

822 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

826 
a˘ive_sb
 = &
sdev
->
sbs
[
sb
->
√xt_sb
];

828 i‡(
a˘ive_sb
->
°©e
 =
FREE_BLOCK
) {

829 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

830 
	`sh™n⁄_li°_dñ_öô
(&
a˘ive_sb
->
li°
);

831 
sdev
->
‰ì_blk˙t
--;

832 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

833 
a˘ive_sb
->
hód_ödex
 = 
sb
->head_index;

834 
a˘ive_sb
->
°©e
 = 
a˘ive_blk_°©e
[a˘ive_sb->
hód_ödex
];

835 
a˘ive_sb
->
ïûog
 = 
	`ïûog_Æloc
◊˘ive_sb->
ïûog_size
, 
sdev
);

836 i‡(
a˘ive_sb
->
ïûog
 =
NULL
)

837 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

839 
sdev
->
wr_sb
[
sb
->
hód_ödex
] = sb->
√xt_sb
;

840 
sdev
->
a˘ive_blk
[
sb
->
hód_ödex
] = &sdev->
sbs
[sb->
√xt_sb
];

841 
sdev
->
a˘ive_blk
[
sb
->
hód_ödex
]->
°©e
 = 
a˘ive_blk_°©e
[sb->head_index];

842 
sdev
->
wr_group
[
sb
->
hód_ödex
] = 0;

843 
sdev
->
lun_ö_group
[
sb
->
hód_ödex
] = 0;

844 
sdev
->
wr_lun_off£t
[
sb
->
hód_ödex
] = sdev->
a˘ive_blk
[sb->hód_ödex]->
sub_group
[0].
fú°_lun_off£t
;

845 
sdev
->
wr_chunk
[
sb
->
hód_ödex
] = 0;

846 
sdev
->
wr_∂™e
[
sb
->
hód_ödex
] = 0;

847 
sdev
->
wr_∑ge
[
sb
->
hód_ödex
] = 0;

848 
sdev
->
wr_logicb
[
sb
->
hód_ödex
] = 0;

849 
a˘ive_sb
->
wr_off£t
 = 0;

851 i‡(
	`u∆ikñy
(
sdev
->
∑rôy_öô_d⁄e
[
sb
->
hód_ödex
] == 0))

852 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
∑rôy_öô_d⁄e_evít
[
sb
->
hód_ödex
], sdev->
∑rôy_öô_d⁄e
[sb->head_index] == 1);

854 i‡(
sdev
->
øid5_suµ‹ãd
 && (
a˘ive_sb
->
∑rôy_öô_d⁄e
 == 0)) {

855 
	`∑rôy_öô
(
a˘ive_sb
, 
sdev
->
wr_group
[
sb
->
hód_ödex
], sdev->
wr_sb
[sb->hód_ödex] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->head_index],

856 
wrôe_hód
[
sb
->
hód_ödex
]);

857 
sb
->
∑rôy_öô_d⁄e
 = 1;

859 
	}
}

861 
	$check_d©a_ªcovîabûôy
(
sh™n⁄_bio
 *
sbio
)

863 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

864 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

865 
sub_group
 *
group
 = &
sb
->sub_group[
sdev
->
wr_group
[sb->
hód_ödex
]];

866 
sh™n⁄_ªque°
 *
ªq
;

867 
ªt
 = 0;

868 
lun
 = -1;

869 
ecc
 = 0, 
ecc2
;

871 i‡(
sh™n⁄_f‹˚_ª˛aim_a˘iveblock
)

872  
ªt
;

873 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

874 i‡((
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)Ë&& (ªq->
_ecc
 < 
SH_FAKE_ERR
)) {

875 
ªt
 = -1;

876 
	`debugs0
("parity_lun=%d has data(ecc=0x%x) iná half blank group. sb=%d, chunk=%d, group=%d.\n",

877 
ªq
->
pba
.
lun
,Ñeq->
_ecc
, 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], 
group
->
phy_ödex
);

878  
ªt
;

880 i‡(
ªq
->
pba
.
lun
 !=Üun) {

881 
lun
 = 
ªq
->
pba
.lun;

882 
ecc
 = (
ªq
->
_ecc
 == 0xFB)?0xFB:0;

884 
ecc2
 = (
ªq
->
_ecc
 == 0xFB)?0xFB:0;

885 i‡(
ecc2
 !
ecc
) {

886 
ªt
 = -2;

887 
	`debugs0
("blankÖageánd dataÖage mixed iná chunk! sb=%d, chunk=%d,Üun=%d.\n",

888 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], 
ªq
->
pba
.
lun
);

889  
ªt
;

893  
ªt
;

895 
	}
}

896 
ªcovî_a˘ive_blk
(
sh™n⁄_dev
 *, 
sh™n⁄_sb
 *);

898 
	$__check_a˘ive_√xt_∑rôy_group_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

900 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

901 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

902 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

903 
sub_group
 *
group
;

904 
d©a_∑ge
 = 0;

906 i‡(
sbio
->
°©us
)

907 
	`debugs3
("enter, sb_index=%d, chunk=%d, status=0x%x.\n",

908 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], 
sbio
->
°©us
);

910 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

911 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

912 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

913 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

914 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

915 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

918 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

921 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)))

924 i‡(++
d©a_∑ge
 && (
	`sh™n⁄_©omic_ªad
(&
sdev
->
a˘ive_waô_°©us
Ë=
WAIT_NEXT_GROUP_STATUS
))

925 
sb
->
ªcovî_°©us
 |
NEXT_GROUP_HAS_DATA
;

929 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
a˘ive_waô_°©us
Ë=
WAIT_NEXT_GROUP_STATUS
) {

930 
	`sh™n⁄_©omic_£t
(&
sdev
->
a˘ive_waô_°©us
, 
GET_NEXT_GROUP_STATUS_FINISH
);

931 
	`sh™n⁄_wake_up
(&
sdev
->
a˘ive_waô_evít
);

934 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

935 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

936 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

937 
	`‰ì_ªq
(
ªq
);

939 
	`‰ì_sbio
(
sbio
);

940 
	}
}

942 
	$__check_a˘ive_√xt_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

944 
sh™n⁄_bio
 *
sbio
;

945 
sh™n⁄_ªque°
 *
tmp
, *
ªq
 = 
NULL
;

946 
sub_group
 *
group
;

947 
i
, 
chunk
, 
∂™e
, 
fú°_pba
, 
lun_ö_group
, 
lun_off£t
, 
lun
, 
group_ödex
;

948 
ªt
 = 0;

949 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

950 
	`BUG_ON
((
	`sh™n⁄_©omic_ªad
(&
sdev
->
a˘ive_waô_°©us
Ë!
IDLE
Ë|| (
sb
->
ªcovî_°©us
 & 
NEXT_GROUP_HAS_DATA
));

951 
	`BUG_ON
((
sb
->
hód_ödex
 !
HOT_INDEX
Ë&& (sb->hód_ödex !
COLD_INDEX
));

952 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


953 
	`BUG_ON
((
sdev
->
u£_duÆ_hód
 =0Ë&& (
sb
->
hód_ödex
 =
COLD_INDEX
));

956 
chunk
 = 
sdev
->
wr_chunk
[
sb
->
hód_ödex
];

957 
group_ödex
 = 
sdev
->
wr_group
[
sb
->
hód_ödex
];

959 
group_ödex
++;

960 i‡(
group_ödex
 =
sdev
->
∑rôy_groups
) {

961 
group_ödex
 = 0;

962 
chunk
++;

963 i‡(
chunk
 =
sdev
->
∑ges_ö_eblock
) {

964 
ªt
 = -1;

965 
out
;

968 
group
 = &
sb
->
sub_group
[
group_ödex
];

969 } 
group
->
phy_ödex
 < 0);

971 
sb
->
ªcovî_°©us
 &~
NEXT_GROUP_HAS_DATA
;

972 
	`sh™n⁄_©omic_£t
(&
sdev
->
a˘ive_waô_°©us
, 
WAIT_NEXT_GROUP_STATUS
);

974 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

975 
	`£t_sbio_debug_èg
(
sbio
, 
CHECK_NEXT_GROUP_TAG
);

976 
sbio
->
ˇŒback
 = 
__check_a˘ive_√xt_∑rôy_group_ˇŒback
;

977 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

978 
sbio
->
d©a
 = 
sb
;

980 
fú°_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + sdev->
logicbs_ö_∑ge
 * 
chunk
;

981 
lun_ö_group
 = 0;

982 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;;

984 i‡(
lun_ö_group
 =
sb
->
mö_d©a_luns
) {

985 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

986 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

989 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

990 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

991 } 
	`is_bad_lun
(
sb
, 
lun
));

994 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_chunk
, &
sbio
->
u£r_cou¡
);

995 
sbio
->
logicbs
 +
sdev
->
logicbs_ö_chunk
;

996 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

997 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

998 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

999 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_ACTIVE_BLK_TAG
, 
i
);

1000 
ªq
->
›code
 = 
sh_cmd_ªad
;

1001 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1002 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

1003 
ªq
->
pba
.
lun
 =Üun;

1004 
ªq
->
pba
.
lun_pba
 = 
fú°_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
;

1006 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1007 i‡(!
ªq
->
vút_addr
) {

1008 
	`sh™n⁄_îr
("kmalloc failed.\n");

1009 
kmÆloc_Áû
;

1011 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1012 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

1013 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

1014 
dma_Áû
;

1016 
ªq
->
sbio
 = sbio;

1017 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1018 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1019 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

1022 
lun_ö_group
++;

1023 } 
lun_off£t
 !
group
->
∑rôy_lun_off£t
);

1026 i‡(
sbio
->
logicbs
 != 0) {

1027 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

1028 
	`sh™n⁄_waô_evít
(
sdev
->
a˘ive_waô_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
a˘ive_waô_°©us
Ë=
GET_NEXT_GROUP_STATUS_FINISH
);

1029 
	`sh™n⁄_©omic_£t
(&
sdev
->
a˘ive_waô_°©us
, 
IDLE
);

1030 
ªt
 = 0;

1032 
ªt
 = -1;

1033 
	`‰ì_sbio
(
sbio
);

1035  
ªt
;

1037 
dma_Áû
:

1038 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1039 
kmÆloc_Áû
:

1040 
	`‰ì_ªq
(
ªq
);

1041 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1042 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1043 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1044 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1045 
	`‰ì_ªq
(
ªq
);

1047 
	`‰ì_sbio
(
sbio
);

1049 
ªt
 = -
EIO
;

1050 
out
:

1051 
sb
->
ªcovî_°©us
 &~
NEXT_GROUP_HAS_DATA
;

1052 
	`sh™n⁄_©omic_£t
(&
sdev
->
a˘ive_waô_°©us
, 
IDLE
);

1053  
ªt
;

1054 
	}
}

1056 
ölöe
 
	$check_a˘ive_√xt_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

1058 
ªt
 = 0;

1060 
	`debugs1
("active %s sb(%d): start checkÇextÖarity_group. wr_chunk=%d, wr_group=%d.\n", \

1061 (
sb
->
hód_ödex
 =
HOT_INDEX
Ë? "hŸ": "cﬁd", sb->
sb_ödex
, 
sdev
->
wr_chunk
[sb->hód_ödex], sdev->
wr_group
[sb->head_index]);

1062 
ªt
 = 
	`__check_a˘ive_√xt_∑rôy_group
(
sdev
, 
sb
);

1063 i‡(
ªt
 == -1) {

1064 
	`debugs1
("this isÅheÜast group\n");

1066 } i‡(
ªt
 =-
EIO
){

1067 
	`sh™n⁄_îr
("checkáctive blockÇextÖarity group failed.\n");

1068 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1071 
	`debugs1
("check_a˘ive_√xt_∑rôy_g‹u∞i†föish.Çexàgrou∞%s.\n", (
sb
->
ªcovî_°©us
 & 
NEXT_GROUP_HAS_DATA
) ? "has data" : "isÉmpty");

1072 i‡((
sb
->
ªcovî_°©us
 & 
NEXT_GROUP_HAS_DATA
)) {

1077 
	}
}

1079 
ölöe
 
	$fûl_Æl_bœnk_ïûog_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

1081 
√xt_sb
;

1083 i‡(
sdev
->
‰ì_blk˙t
 == 0) {

1084 
	`sh™n⁄_îr
("No free blocks!\n");

1085 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1086 } i‡(
sdev
->
ªad⁄ly_ªas⁄
) {

1089 i‡(
sb
->
√xt_sb
 =
INVALID_SB_INDEX
) {

1091 
√xt_sb
 = 
	`gë_√xt_sb
(
sdev
, 
sb
->
hód_ödex
);

1092 
	`BUG_ON
(
√xt_sb
 =
INVALID_SB_INDEX
);

1093 
sb
->
√xt_sb
 =Çext_sb;

1094 
	`upd©e_ïûog_hód
(
sdev
, 
sb
);

1098 
	`__fûl_Æl_bœnk_ïûog_∑rôy_group
(
sb
);

1099 } 
	`add_wr_group_poöt
(
sdev
, 
sb
, sb->
hód_ödex
) >= 0);

1100 
	`a·î_fûl_ïûog_of_a˘ive_block
(
sdev
, 
sb
);

1102 
	}
}

1104 
fûl_a˘ive_blk
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
°¨t
);

1105 
	$fûl_a˘ive_blk_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1107 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

1108 
hód_ödex
 = ()
sbio
->
d©a2
;

1109 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

1110 
sh™n⁄_sb
 *
sb
;

1111 
ªt
 = 0;

1113 i‡(
hód_ödex
 >= 2) {

1114 
	`debugs0
("hód_ödex=%d.\n", 
hód_ödex
);

1115 
	`BUG
();

1118 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1119 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1120 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1121 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

1122 
	`‰ì_ªq
(
ªq
);

1124 
	`‰ì_sbio
(
sbio
);

1126 
sb
 = 
sdev
->
a˘ive_blk
[
hód_ödex
];

1128 i‡((
	`sh™n⁄_©omic_ªad
(&
sdev
->
waô_blk
Ë=
sb
->
sb_ödex
Ë&& (sb->
wr_off£t
 < 
	`fú°_ïûog_pba
(sdev, sb))) {

1129 
ªt
 = 
	`fûl_a˘ive_blk
(
sdev
, 
hód_ödex
, 0);

1130 i‡(
ªt
) {

1131 
	`sh™n⁄_îr
("filláctive blk failed.\n");

1132 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, -1);

1133 
	`sh™n⁄_wake_up
(&
sdev
->
waô_blk_d⁄e_evít
);

1136 
	}
}

1144 
	$fûl_a˘ive_blk
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
°¨t
)

1146 
sh™n⁄_ªque°
 *
ªq
;

1147 
sh™n⁄_bio
 *
sbio
;

1148 
dñè
;

1150 
dñè
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
hód_ödex
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[head_index];

1151 i‡(
dñè
 == 0)

1152 
dñè
 = 
sdev
->
logicbs_ö_chunk
;

1153 i‡((
dñè
 <0Ë|| (dñè > 
sdev
->
logicbs_ö_chunk
))

1156 i‡(
°¨t
) {

1157 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
sdev
->
waô_blk
) != -1);

1158 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, sdev->
a˘ive_blk
[
hód_ödex
]->
sb_ödex
);

1160 
sbio
 = 
	`Æloc_sbio
(
GFP_NOWAIT
);

1161 
	`£t_sbio_debug_èg
(
sbio
, 
FILL_ACTIVE_BLK_TAG
);

1162 
sbio
->
ˇŒback
 = 
fûl_a˘ive_blk_ˇŒback
;

1163 
sbio
->
d©a
 = 
sdev
;

1164 
sbio
->
d©a2
 = (*)()
hód_ödex
;

1165 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

1166 
sbio
->
logicbs
 = 
dñè
;

1167 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

1168 
	`debugs1
("hód_ödex=%d, dñè=%d.\n", 
hód_ödex
, 
dñè
);

1169 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

1170 
dñè
) {

1171 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

1172 
	`£t_ªq_debug_èg
(
ªq
, 
FILL_BUFFER_WRITE_CHUNK_TAG
, 
dñè
);

1173 
ªq
->
›code
 = 
sh_cmd_wrôe
;

1174 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

1175 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

1176 
ªq
->
hód
 = 
wrôe_hód
[
hód_ödex
];

1177 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

1178 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

1179 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

1180 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1181 
ªq
->
sbio
 = sbio;

1182 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1183 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

1184 
dñè
--;

1185 
sdev
->
fûl_›í_chunk_logicbs
++;

1187 
	`debugs1
("exit: head_index=%d, wr_plane=%d, wr_logicb=%d.\n",

1188 
hód_ödex
, 
sdev
->
wr_∂™e
[hód_ödex], sdev->
wr_logicb
[head_index]);

1189 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

1190 i‡(
°¨t
)

1191 
	`sh™n⁄_waô_evít
(
sdev
->
waô_blk_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
waô_blk
) == -1);

1194 
	}
}

1196 
	$ªcovî_√xt_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

1198 
sub_group
 *
group
 = 
NULL
;

1200 i‡(
	`add_wr_group_poöt
(
sdev
, 
sb
, sb->
hód_ödex
) == 0) {

1201 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

1202 
sb
->
wr_off£t
 = 
sdev
->
logicbs_ö_chunk
 * sb->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

1203 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

1204 
	`ªcovî_a˘ive_blk
(
sdev
, 
sb
);

1207 
	`a·î_fûl_ïûog_of_a˘ive_block
(
sdev
, 
sb
);

1210 
	}
}

1218 
	$check_™d_fûl_hÆf_bœnk_∑rôy_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
,

1219 
sh™n⁄_bio
 *
sbio
, 
fûl_îr_∑ge
)

1221 
ªt
 = 0;

1222 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

1224 i‡((!
fûl_îr_∑ge
Ë&& (
	`check_d©a_ªcovîabûôy
(
sbio
) < 0)) {

1226 
	`sh™n⁄_îr
("Data ináctiveÖage_stripe isÇotÑecoverable.\n");

1227 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1228 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1229 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1230 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1231 
	`‰ì_ªq
(
ªq
);

1233 
	`‰ì_sbio
(
sbio
);

1234 
ªt
 = -1;

1236 i‡(
sdev
->
ªad⁄ly_ªas⁄
) {

1237 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1238 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1239 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

1240 
	`sh™n⁄_îr
("lun=%d,Üun_pba=%d,Écc=0x%x.\n", \

1241 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
);

1242 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1243 
	`‰ì_ªq
(
ªq
);

1245 
	`‰ì_sbio
(
sbio
);

1246 
ªt
 = -1;

1248 i‡(
	`is_ïûog_∑ge_°rùe
(
sb
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], sdev->
wr_group
[sb->head_index])) {

1249 i‡(
sdev
->
‰ì_blk˙t
 == 0) {

1250 
	`sh™n⁄_îr
("No free blocks!\n");

1251 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1252 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1253 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1254 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1255 
	`‰ì_ªq
(
ªq
);

1257 
	`‰ì_sbio
(
sbio
);

1258 
ªt
 = -1;

1260 
	`fûl_hÆf_bœnk_a˘ive_∑rôy_group
(
sbio
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], 
fûl_îr_∑ge
);

1261 
	`a·î_fûl_ïûog_of_a˘ive_block
(
sdev
, 
sb
);

1262 
ªt
 = 1;

1265 
	`fûl_hÆf_bœnk_a˘ive_∑rôy_group
(
sbio
, 0, 
fûl_îr_∑ge
);

1266 
ªt
 = 
	`ªcovî_√xt_∑rôy_group
(
sdev
, 
sb
);

1271  
ªt
;

1272 
	}
}

1279 
	$h™dÀ_a˘ive_blk_bœnk_group
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
sh™n⁄_bio
 *
sbio
)

1281 
ªt
 = 1;

1282 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

1283 
sub_group
 *
group
 = &
sb
->sub_group[
sdev
->
wr_group
[sb->
hód_ödex
]];

1284 
fú°_off£t
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

1285 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

1286 
ïûog_off£t
 = 
sb
->
mö_d©a_luns
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_siblög_eblock
 - sb->
logicbs_ö_ïûog
;

1289 i‡(
sdev
->
øid5_suµ‹ãd
 && (
sb
->
∑rôy_öô_d⁄e
 == 0)) {

1290 
	`∑rôy_öô
(
sb
, 
sdev
->
wr_group
[sb->
hód_ödex
],

1291 
sdev
->
wr_sb
[
sb
->
hód_ödex
] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->hód_ödex], 
wrôe_hód
[sb->head_index]);

1292 
sb
->
∑rôy_öô_d⁄e
 = 1;

1296 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1297 i‡((
ªq
->
_ecc
 >
SH_FAKE_ERR
Ë&& (ªq->_ec¯!
SH_FRESH_ERASED
)) {

1298 
	`sh™n⁄_log
("a˘ive_blk %d ha†badÜu¿%d i¿em±y group.\n", 
sb
->
sb_ödex
, 
ªq
->
pba
.
lun
);

1299 
	`£t_ªad_îr‹_block
(
sdev
, 
ªq
);

1303 i‡(
fú°_off£t
 >
ïûog_off£t
) {

1304 
	`fûl_Æl_bœnk_ïûog_∑rôy_group
(
sdev
, 
sb
);

1305 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1306 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1307 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1308 
	`‰ì_ªq
(
ªq
);

1310 
	`‰ì_sbio
(
sbio
);

1311 
ªt
 = 1;

1312 } i‡(
	`is_ïûog_∑ge_°rùe
(
sb
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], sdev->
wr_group
[sb->hód_ödex]Ë|| (sb->
ªcovî_°©us
 & 
NEED_FILL
)) {

1313 
ªt
 = 
	`check_™d_fûl_hÆf_bœnk_∑rôy_group
(
sdev
, 
sb
, 
sbio
, 1);

1314 
ªt
 = !!ret;

1317 
	`£t_a˘ive_fú°_vÆid_group
(
sdev
, 
sb
);

1318 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1319 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1320 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1321 
	`‰ì_ªq
(
ªq
);

1323 
	`‰ì_sbio
(
sbio
);

1324 
ªt
 = 1;

1327  
ªt
;

1328 
	}
}

1330 
	$ªcovî_a˘ive_blk_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1332 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

1333 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1334 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

1335 
sh™n⁄_«me•a˚
 *
ns
;

1336 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

1337 
sub_group
 *
group
;

1338 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

1339 
ãmp
;

1340 
lun_pba
 
ﬁd_pba
;

1341 
∑rôy_is_em±y
 = 0;

1342 
ªt
, 
eblk_pba
, 
sb_pba
, 
bœnk_logicbs
 = 0;

1343 
√xt_group_has_d©a
 = 0;

1344 
fú°_off£t
 = 0;

1345 
i
 = 0, 
lun_ö_group
;

1346 
fûl
 = 0;

1347 
ïûog_off£t
 = 
sb
->
mö_d©a_luns
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_siblög_eblock
 - sb->
logicbs_ö_ïûog
;

1349 i‡(
sbio
->
°©us
)

1350 
	`debugs3
("enter, sb_index=%d, chunk=%d, status=0x%x.\n",

1351 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], 
sbio
->
°©us
);

1353 i‡(
sb
->
hód_ödex
 =
HOT_INDEX
)

1354 
ãmp
 = 
INIT_HOT_STATE
;

1356 
ãmp
 = 
COLD_STATE
;

1358 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

1359 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1360 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1361 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

1362 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

1363 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

1364 i‡(!
sdev
->
lun
[
ªq
->
pba
.lun]->
bad
) {

1365 
fûl
 = 1;

1366 
sb
->
ªcovî_°©us
 |
NEED_FILL
;

1370 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

1371 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
) {

1372 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
))) {

1373 
∑rôy_is_em±y
 = 1;

1375 
bœnk_logicbs
++;

1377 i‡(!
sdev
->
lun
[
ªq
->
pba
.lun]->
bad
)

1378 
fûl
 = 1;

1383 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(
group
)))

1386 
	`debugs1
("datatype=0x%lx,Çs_id=0x%x,Çs_seq_num=0x%x,Üba=0x%lx.\n",

1387 
ªq
->
d©©y≥
,Ñeq->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
lba
);

1388 
lun_ö_group
 = 
	`gë_ªq_ödex
(
ªq
Ë/ 
sdev
->
logicbs_ö_chunk
;

1389 
eblk_pba
 = 
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_siblög_eblock
;

1390 i‡(
sdev
->
com∑˘_ïûog
)

1391 
sb_pba
 = 
group
->
phy_ödex
 * 
sb
->
mö_d©a_luns
 * 
sdev
->
logicbs_ö_siblög_eblock
 + \

1392 
lun_ö_group
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
eblk_pba
;

1394 
sb_pba
 = 
group
->
phy_ödex
 * 
sdev
->
max_luns_ö_group
 * sdev->
logicbs_ö_siblög_eblock
 + \

1395 ((
ªq
->
pba
.
lun
 + 
sdev
->
max_luns_ö_group
 - 
group
->
°¨t_lun
Ë% sdev->max_luns_ö_groupË* sdev->
logicbs_ö_siblög_eblock
 + \

1396 
eblk_pba
;

1397 i‡(!
	`ªq_has_övÆid_lba
(
ªq
)) {

1398 i‡(
•oﬁ
) {

1399 
ns
 = 
•oﬁ
->ns[
ªq
->
ns_id
];

1400 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

1401 
	`debugs1
("WrongÇs_id=%d, metadata=0x%lx, datatype=0x%x,Üba=0x%lx,Üun=%d,Üun_pba=%lu, chunk=%d.\n",

1402 
ªq
->
ns_id
,Ñeq->
_mëad©a
,Ñeq->
d©©y≥
,Ñeq->
lba
,

1403 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
]);

1406 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

1407 
	`debugs1
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

1408 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

1411 
sdisk
 = &
ns
->sdisk;

1414 i‡(
ªq
->
ns_id
 ||Ñeq->
ns_£q_num
) {

1415 
	`sh™n⁄_îr
("%s: Wrong data,Çs_id=%d,Çs_seq_num=%d, metadata=0x%lx,Üun=%d,Üun_pba=%d.\n",

1416 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
_mëad©a
,

1417 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1421 i‡(
ªq
->
lba
 > 
sdisk
->
tŸÆ_m≠_èbÀ_size
 / (
u32
)) {

1422 
	`sh™n⁄_îr
("Wrong data:Üun=%d,Üun_pba=%d,Écc=%d, datatype=0x%x,Üba=0x%lx.\n",

1423 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
d©©y≥
,Ñeq->
lba
);

1428 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

1429 i‡(
ªt
 == 0)

1430 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

1432 i‡(
sdev
->
•oﬁ
)

1433 
	`sh™n⁄_©omic64_öc
(&
sdev
->
•oﬁ
->
u£d_logicbs
);

1434 i‡(
	`check_™d_Æloc_m≠èbÀ
(
sdisk
, 
ªq
->
lba
)) {

1435 i‡(
sdev
->
ªcovî_°©e
 > 
RECOVER_ERROR
)

1436 
sdev
->
ªcovî_°©e
 = 
RECOVER_ERROR
;

1437 
	`sh™n⁄_£t_bô
(
SHN_REASON_EPILOG_FAILURE
, &
sdev
->
ªad⁄ly_ªas⁄
);

1438 
	`sh™n⁄_îr
("mapÅableÉrror.\n");

1439 
ªÀa£_ªqs
;

1443 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1444 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1445 
	`ïûog_£t_mëad©a
(
sdev
, 
sb
->
ïûog
, 
sb_pba
, 
ªq
->
_mëad©a
);

1446 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

1448 i‡(!
•oﬁ
 || 
ªq
->
lba
 !
övÆid_lba
[
sdev
->
lba_f‹m©
]

1449 || 
ªq
->
ns_£q_num
 =0 || 
sdev
->
mbr
.
sdev_id
 != 0) {

1450 
	`ªcovî_d©a_‰om_dummy_∑ge
(
sdev
, 
ªq
->
vút_addr
);

1453 
ns
 = 
•oﬁ
->ns[
ªq
->
ns_id
];

1454 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

1455 
	`debugs1
("WrongÇs_id=%d, metadata=0x%lx, datatype=0x%x,Üba=0x%lx,Üun=%d,Üun_pba=%lu, chunk=%d.\n",

1456 
ªq
->
ns_id
,Ñeq->
_mëad©a
,Ñeq->
d©©y≥
,Ñeq->
lba
,

1457 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
]);

1460 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

1461 
	`debugs1
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

1462 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

1465 
	`ªcovî_ns_d©a_‰om_ªq
(
ns
, 
ªq
, 
sdev
);

1466 
	`ïûog_£t_mëad©a
(
sdev
, 
sb
->
ïûog
, 
sb_pba
, 
ªq
->
_mëad©a
);

1470 i‡(
sbio
->
°©us
 & 
HAVE_ERROR_SECTOR
) {

1471 i‡(
bœnk_logicbs
 >(
sbio
->
logicbs
 - 
sdev
->
logicbs_ö_chunk
)) {

1472 i‡(
	`h™dÀ_a˘ive_blk_bœnk_group
(
sdev
, 
sb
, 
sbio
))

1473 
föish
;

1475 
out
;

1480 i‡(
fûl
) {

1481 
sb
->
ªcovî_°©us
 |
NEED_FILL
;

1482 i‡(
∑rôy_is_em±y
) {

1483 i‡(!(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
))

1484 
	`sh™n⁄_öfo
("%s:Åhe chunk %d of sb_index %d isÇot filled up,ánd it hasÉrrorÜogicb.!\n", \

1485 
__func__
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], sb->
sb_ödex
);

1486 
sb
->
ªcovî_°©us
 |
SKIP_PARITY
;

1487 
sb
->
ªcovî_°©us
 |
NEED_RECLAIM
;

1490 i‡(
bœnk_logicbs
 == 0) {

1492 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1493 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1494 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1495 
	`‰ì_ªq
(
ªq
);

1497 
	`‰ì_sbio
(
sbio
);

1498 i‡(
	`ªcovî_√xt_∑rôy_group
(
sdev
, 
sb
))

1499 
föish
;

1501 
out
;

1503 
	`debugs1
("active %s sb(%d):Åhis group has dataándÉrrorÖage,Çow fill it upÅhis super block.\n", \

1504 (
sb
->
hód_ödex
 =
HOT_INDEX
Ë? "hŸ" : "cﬁd", sb->
sb_ödex
);

1506 i‡(
sdev
->
øid5_suµ‹ãd
 && (
sb
->
∑rôy_öô_d⁄e
 == 0)) {

1507 
	`∑rôy_öô
(
sb
, 
sdev
->
wr_group
[sb->
hód_ödex
],

1508 
sdev
->
wr_sb
[
sb
->
hód_ödex
] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->hód_ödex], 
wrôe_hód
[sb->head_index]);

1509 
sb
->
∑rôy_öô_d⁄e
 = 1;

1511 
ªt
 = 
	`check_™d_fûl_hÆf_bœnk_∑rôy_group
(
sdev
, 
sb
, 
sbio
, 0);

1512 i‡(
ªt
 == 0)

1513 
out
;

1515 
föish
;

1518 } i‡(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
) {

1519 i‡(
sdev
->
øid5_suµ‹ãd
 && (
sb
->
∑rôy_öô_d⁄e
 == 0)) {

1520 
	`∑rôy_öô
(
sb
, 
sdev
->
wr_group
[sb->
hód_ödex
],

1521 
sdev
->
wr_sb
[
sb
->
hód_ödex
] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[sb->hód_ödex], 
wrôe_hód
[sb->head_index]);

1522 
sb
->
∑rôy_öô_d⁄e
 = 1;

1525 i‡(
bœnk_logicbs
 =
sbio
->
logicbs
) {

1526 i‡(
	`h™dÀ_a˘ive_blk_bœnk_group
(
sdev
, 
sb
, 
sbio
))

1527 
föish
;

1529 
out
;

1532 
	`debugs1
("active %s sb(%d):Åhis group has data butÇot full,Çeed fill=%d. wr_chunk=%d, wr_group=%d.\n", \

1533 (
sb
->
hód_ödex
 =
HOT_INDEX
Ë? "hŸ": "cﬁd", sb->
sb_ödex
, sb->
ªcovî_°©us
 & 
NEED_FILL
, \

1534 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], sdev->
wr_group
[sb->head_index]);

1535 i‡(
∑rôy_is_em±y
 && !(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
)) {

1536 
√xt_group_has_d©a
 = 
	`check_a˘ive_√xt_∑rôy_group
(
sdev
, 
sb
);

1538 i‡(
√xt_group_has_d©a
) {

1539 
sb
->
ªcovî_°©us
 &~
NEXT_GROUP_HAS_DATA
;

1540 i‡(!(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
))

1541 
	`sh™n⁄_öfo
("%s: sb_index %d start hasÉmptyÖarity in chunk %d.\n", \

1542 
__func__
, 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
]);

1543 
sb
->
ªcovî_°©us
 |
SKIP_PARITY
;

1544 
sb
->
ªcovî_°©us
 |
NEED_FILL
;

1545 
sb
->
ªcovî_°©us
 |
NEED_RECLAIM
;

1549 i‡((
bœnk_logicbs
 > 
sdev
->
logicbs_ö_chunk
Ë|| !(
sb
->
ªcovî_°©us
 & 
SKIP_PARITY
))

1550 
	`sh™n⁄_öfo
("%s:Åhêchunk %d o‡sb_ödex %d i†nŸ fûÀd up!\n", 
__func__
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], sb->
sb_ödex
);

1551 i‡((
bœnk_logicbs
 <(
sdev
->
logicbs_ö_chunk
)Ë&& 
∑rôy_is_em±y
) {

1552 
ªt
 = 
	`check_™d_fûl_hÆf_bœnk_∑rôy_group
(
sdev
, 
sb
, 
sbio
, 0);

1553 i‡(
ªt
)

1554 
föish
;

1556 
out
;

1558 i‡(
√xt_group_has_d©a
) {

1559 
	`sh™n⁄_îr
("active %s sb(%d) group(wr_chunk=%d, wr_group=%d) isÇot full,ándÇext group has data.\n", \

1560 (
sb
->
hód_ödex
 =
HOT_INDEX
Ë? "hŸ" : "cﬁd", sb->
sb_ödex
, \

1561 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], sdev->
wr_group
[sb->head_index]);

1562 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1563 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1564 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1565 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1566 
	`‰ì_ªq
(
ªq
);

1568 
	`‰ì_sbio
(
sbio
);

1569 
föish
;

1571 
	`debugs1
("active %s sb(%d):Åhis group isÇot filled upándÇext group isÉmpty.Çow fillÅhis group up. wr_chunk=%d, wr_group=%d\n", \

1572 (
sb
->
hód_ödex
 =
HOT_INDEX
Ë? "hŸ" : "cﬁd", sb->
sb_ödex
, \

1573 
sdev
->
wr_chunk
[
sb
->
hód_ödex
], sdev->
wr_group
[sb->head_index]);

1574 
ªt
 = 
	`check_™d_fûl_hÆf_bœnk_∑rôy_group
(
sdev
, 
sb
, 
sbio
, 0);

1575 i‡(
ªt
)

1576 
föish
;

1578 
out
;

1584 
fú°_off£t
 = 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

1585 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

1587 i‡(
sb
->
∑rôy_öô_d⁄e
) {

1588 
	`sh™n⁄_îr
("sb=%d isÖarity_init_done! chunk=%d, group=%d.\n",

1589 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
], sdev->
wr_group
[sb->head_index]);

1590 
	`£t_ªcovî_°©e_¥obÀm©ic
(
sdev
);

1592 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1593 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1594 
ªq
->
wr_off£t
 = 
fú°_off£t
 + 
i
++;

1595 i‡(
ªq
->
wr_off£t
 =
ïûog_off£t
) {

1596 
sh™n⁄_ïûog_hód
 *
ïûog_hód
 = (sh™n⁄_ïûog_hód *)
ªq
->
vút_addr
;

1597 i‡((
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ïûog_w©îm¨k
Ë!
EPILOG_WATERMARK
) || \

1598 (
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->
hód_ödex
Ë!
sb
->head_index)) {

1599 
	`sh™n⁄_îr
("sb_index=%d, watermark=0x%lx,Åemp=%d, metadata=0x%llx!\n",

1600 
sb
->
sb_ödex
, ()
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
ïûog_w©îm¨k
),

1601 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->
hód_ödex
), 
ªq
->
_mëad©a
);

1603 
sb
->
£q_num
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->seq_num);

1604 
sb
->
îa£_cou¡î
 = 
	`sh™n⁄_mem_ªadl
(&
ïûog_hód
->erase_counter);

1605 
sb
->
hód_ödex
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->head_index);

1606 
sb
->
√xt_sb
 = 
	`sh™n⁄_mem_ªadw
(&
ïûog_hód
->next_sb);

1607 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
£quí˚_numbî_lock
);

1608 i‡(
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
£q_num
Ë>
sdev
->
£quí˚_numbî
)

1609 
sdev
->
£quí˚_numbî
 = 
	`sh™n⁄_mem_ªadq
(&
ïûog_hód
->
£q_num
) + 1;

1610 
	`ªåõve_sm¨t_‰om_ïûog_hód
(
sdev
, 
ïûog_hód
);

1611 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
£quí˚_numbî_lock
);

1612 
	`WARN_ON
(
sdev
->
sbs
[
sb
->
√xt_sb
].
°©e
 !
√xt_blk_°©e
[sb->
hód_ödex
]);

1615 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1616 
	`‰ì_ªq
(
ªq
);

1618 
	`add_wr_group_poöt
(
sdev
, 
sb
, sb->
hód_ödex
);

1619 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

1620 
sb
->
wr_off£t
 = 
sdev
->
logicbs_ö_chunk
 * sb->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
 * sdev->
wr_chunk
[sb->
hód_ödex
] + \

1621 
sdev
->
logicbs_ö_chunk
 * 
sb
->
mö_d©a_luns
 * 
group
->
phy_ödex
;

1622 i‡(
sdev
->
wr_chunk
[
sb
->
hód_ödex
] >sdev->
∑ges_ö_eblock
) {

1624 
	`£t_ªcovî_°©e_dód
(
sdev
);

1625 
	`sh™n⁄_îr
("a˘ivêblock i†fûÀd up!!! sb_ödex=%d, chunk=%d.\n", 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
]);

1626 
	`‰ì_sbio
(
sbio
);

1627 
föish
;

1629 
	`ªcovî_a˘ive_blk
(
sdev
, 
sb
);

1630 
	`‰ì_sbio
(
sbio
);

1635 
föish
:

1636 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

1637 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

1638 
out
:

1639 
__echo_out
;

1642 
ªÀa£_ªqs
:

1643 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1644 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1645 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1646 
	`‰ì_ªq
(
ªq
);

1648 
	`‰ì_sbio
(
sbio
);

1649 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

1650 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

1652 
	}
}

1654 
	$ªcovî_a˘ive_blk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

1656 
sh™n⁄_bio
 *
sbio
;

1657 
sh™n⁄_ªque°
 *
tmp
, *
ªq
 = 
NULL
;

1658 
sub_group
 *
group
;

1659 
i
, 
chunk
, 
∂™e
, 
fú°_pba
, 
lun_ö_group
, 
lun_off£t
, 
lun
;

1660 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

1662 
chunk
 = 
sdev
->
wr_chunk
[
sb
->
hód_ödex
];

1663 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

1664 
group
->
phy_ödex
 < 0) {

1665 i‡(
	`add_wr_group_poöt
(
sdev
, 
sb
, sb->
hód_ödex
) < 0) {

1667 
	`£t_ªcovî_°©e_dód
(
sdev
);

1668 
	`sh™n⁄_îr
("active block is filled up!!! sb_index=%d, chunk=%d.\n",

1669 
sb
->
sb_ödex
, 
sdev
->
wr_chunk
[sb->
hód_ödex
]);

1670 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

1671 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

1673 
chunk
 = 
sdev
->
wr_chunk
[
sb
->
hód_ödex
];

1674 
group
 = &
sb
->
sub_group
[
sdev
->
wr_group
[sb->
hód_ödex
]];

1677 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1678 
	`£t_sbio_debug_èg
(
sbio
, 
RECOVER_ACTIVE_BLK_TAG
);

1679 
sbio
->
ˇŒback
 = 
ªcovî_a˘ive_blk_ˇŒback
;

1680 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

1681 
sbio
->
d©a
 = 
sb
;

1683 
fú°_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + sdev->
logicbs_ö_∑ge
 * 
chunk
;

1684 
lun_ö_group
 = 0;

1685 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1687 i‡(
lun_ö_group
 =
sb
->
mö_d©a_luns
) {

1688 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1689 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1692 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

1693 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1694 } 
	`is_bad_lun
(
sb
, 
lun
));

1697 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_chunk
, &
sbio
->
u£r_cou¡
);

1698 
sbio
->
logicbs
 +
sdev
->
logicbs_ö_chunk
;

1699 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

1700 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

1701 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1702 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_ACTIVE_BLK_TAG
, 
i
);

1703 
	`£t_ªq_ödex
(
ªq
, 
lun_ö_group
 * 
sdev
->
logicbs_ö_chunk
 + 
∂™e
 * sdev->
logicbs_ö_∑ge
 + 
i
);

1704 
ªq
->
›code
 = 
sh_cmd_ªad
;

1705 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1706 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

1707 
ªq
->
pba
.
lun
 =Üun;

1708 
ªq
->
pba
.
lun_pba
 = 
fú°_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
;

1710 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1711 i‡(!
ªq
->
vút_addr
) {

1712 
	`sh™n⁄_îr
("kmalloc failed.\n");

1713 
kmÆloc_Áû
;

1715 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1716 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

1717 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

1718 
dma_Áû
;

1720 
ªq
->
sbio
 = sbio;

1721 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1722 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1723 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

1726 
lun_ö_group
++;

1727 } 
lun_off£t
 !
group
->
∑rôy_lun_off£t
);

1729 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

1733 
dma_Áû
:

1734 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1735 
kmÆloc_Áû
:

1736 
	`‰ì_ªq
(
ªq
);

1737 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1738 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1739 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1740 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1741 
	`‰ì_ªq
(
ªq
);

1743 
	`‰ì_sbio
(
sbio
);

1745 
	`£t_ªcovî_°©e_dód
(
sdev
);

1746 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

1747 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

1749  -
EIO
;

1750 
	}
}

1752 
sˇn_su≥r_block
(
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
group_ödex
);

1753 
	$sˇn_su≥r_block_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1755 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

1756 
group_ödex
 = ()
sbio
->
d©a2
;

1757 
sub_group
 *
group
 = &
sb
->sub_group[
group_ödex
];

1758 
∑ge_°rùe
 = -1;

1759 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1760 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

1761 
sh™n⁄_«me•a˚
 *
ns
;

1762 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

1763 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

1764 
lun_pba
 
ﬁd_pba
;

1765 
ªt
;

1766 
∑rôy_is_em±y
 = 0;

1767 
d©a_is_îr‹
 = 0;

1769 
	`BUG_ON
(
group
->
phy_ödex
 == -1);

1770 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

1771 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1772 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

1773 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

1774 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

1775 
ªq
->
ªcovî_buf
 = 
NULL
;

1777 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

1779 i‡(
∑ge_°rùe
 == -1) {

1780 
∑ge_°rùe
 = (
ªq
->
pba
.
lun_pba
 - 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
Ë/ sdev->
logicbs_ö_∑ge
;

1781 
	`debugs1
("%s:Öagê°rùe=%d, group=%d.\n", 
__func__
, 
∑ge_°rùe
, 
group_ödex
);

1784 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
) {

1785 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(&
sb
->
sub_group
[ªq->pba.lun/sdev->
max_luns_ö_group
]))) {

1786 i‡(!(
sb
->
ªcovî_°©us
 & 
NEED_RECLAIM
))

1787 
	`sh™n⁄_öfo
("%s:ÖarityÜun isÉmpty, sb_index=%d, sb_state=%d,Öage_stripe=%d, group=%d.\n", \

1788 
__func__
, 
sb
->
sb_ödex
, sb->
°©e
, 
∑ge_°rùe
, 
group_ödex
);

1789 
∑rôy_is_em±y
 = 1;

1791 
	`sh™n⁄_öfo
("%s: blankÜogicb in dataÜun, sb_index=%d, sb_state=%d,Üun=%d,Öba=%d.\n", \

1792 
__func__
, 
sb
->
sb_ödex
, sb->
°©e
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1794 
sb
->
ªcovî_°©us
 |
NEED_RECLAIM
;

1795 
‰ì_ªque°
;

1798 i‡(
sdev
->
øid5_suµ‹ãd
 && (
ªq
->
pba
.
lun
 =
	`gë_∑rôy_lun
(&
sb
->
sub_group
[ªq->pba.lun/sdev->
max_luns_ö_group
]))) {

1800 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
)

1801 
sb
->
ªcovî_°©us
 |
NEED_RECLAIM
;

1802 
‰ì_ªque°
;

1805 i‡(
ªq
->
_ecc
 < 
SH_FAKE_ERR
) {

1806 
is_ns_d©a
 = (
ªq
->
lba
 =
övÆid_lba
[
sdev
->
lba_f‹m©
] && sdev->
mbr
.
sdev_id
 == 0);

1807 i‡(
•oﬁ
) {

1808 
ns
 = 
•oﬁ
->ns[
ªq
->
ns_id
];

1809 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

1810 i‡(!
	`ªq_has_övÆid_lba
(
ªq
))

1811 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

1812 
‰ì_ªque°
;

1814 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

1815 i‡(!
	`ªq_has_övÆid_lba
(
ªq
))

1816 
	`sh™n⁄_îr
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

1817 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

1818 
‰ì_ªque°
;

1820 
sdisk
 = &
ns
->sdisk;

1821 i‡(
is_ns_d©a
) {

1822 
sb_num
 = 
ns
->
d©a_pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
;

1823 i‡(
ns
->
d©a_pba
.
lun_pba
 == 0x03ffffff ||

1824 
sdev
->
sbs
[
sb_num
].
£q_num
 <
sb
->seq_num)

1825 
	`ªcovî_ns_d©a_‰om_ªq
(
ns
, 
ªq
, 
sdev
);

1826 
‰ì_ªque°
;

1829 i‡(
	`ªq_has_övÆid_lba
(
ªq
))

1830 
‰ì_ªque°
;

1831 i‡(
ªq
->
lba
 > 
sdisk
->
tŸÆ_m≠_èbÀ_size
 / (
u32
)) {

1832 
	`sh™n⁄_îr
("Wrong data: sb_index=%d,Üba=0x%lx,Üun=%d,Üun_pba=%d,Écc=0x%x, datatype=0x%x.\n",

1833 
sb
->
sb_ödex
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
d©©y≥
);

1834 
‰ì_ªque°
;

1836 i‡(
	`check_™d_Æloc_m≠èbÀ
(
sdisk
, 
ªq
->
lba
)) {

1837 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1838 
‰ì_ªque°
;

1840 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1841 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

1842 i‡(
ªt
 < 0) {

1844 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1845 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1846 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1847 i‡(
sdev
->
•oﬁ
)

1848 
	`sh™n⁄_©omic64_öc
(&
sdev
->
•oﬁ
->
u£d_logicbs
);

1850 
blk_num
 = 
ﬁd_pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
;

1851 i‡((
sdev
->
sbs
[
blk_num
].
£q_num
 > 
sb
->£q_numË|| ((
ﬁd_pba
.
lun
 =
ªq
->
pba
.lunË&& (ﬁd_pba.
lun_pba
 ==Ñeq->pba.lun_pba))) {

1853 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1856 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1857 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1858 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

1859 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1863 
d©a_is_îr‹
 = 1;

1864 
‰ì_ªque°
:

1865 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

1866 
	`‰ì_ªq
(
ªq
);

1869 i‡(
d©a_is_îr‹
) {

1870 
	`sh™n⁄_îr
("D©®îr‹ i¿su≥rblock %d.\n", 
sb
->
sb_ödex
);

1871 i‡(
∑rôy_is_em±y
 && 
sh™n⁄_f‹˚_ª˛aim_a˘iveblock
)

1872 
	`sh™n⁄_log
("f‹˚Ñe˛aimá˘iveblock i†íabÀ, drivî wû»ª˛aim su≥rblock %d.\n", 
sb
->
sb_ödex
);

1874 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1876 
	`‰ì_sbio
(
sbio
);

1878 i‡(
∑rôy_is_em±y
) {

1879 
	`sh™n⁄_log
("%s():Ö¨ôyÜu¿i†em±y, sˇ¿i†föish, sb=%d,Öage_°rùe=%d, group_ödex=%d.\n", 
__func__
, 
sb
->
sb_ödex
, 
∑ge_°rùe
, 
group_ödex
);

1880 
föish
;

1884 
group_ödex
++;

1885 i‡(
group_ödex
 =
sdev
->
∑rôy_groups
) {

1886 
group_ödex
 = 0;

1887 
∑ge_°rùe
++;

1888 i‡(
∑ge_°rùe
 =
sdev
->
∑ges_ö_eblock
)

1889 
föish
;

1891 
group
 = &
sb
->
sub_group
[
group_ödex
];

1892 
	`debugs1
("%s:Öage_°rùe=%d, group_ödex=%d, grou∞phy_ödex=%d.\n", 
__func__
, 
∑ge_°rùe
, 
group_ödex
, 
group
->
phy_ödex
);

1893 } 
group
->
phy_ödex
 < 0);

1895 i‡(
sdev
->
∂ug_out
)

1896 
föish
;

1897 
	`debugs1
("%s:Öages_ö_eblock=%d,Öage_°rùe=%d,Ö¨ôy_groups=%d, group_ödex=%d", 
__func__
, \

1898 
sdev
->
∑ges_ö_eblock
, 
∑ge_°rùe
, sdev->
∑rôy_groups
, 
group_ödex
);

1899 i‡(
	`sˇn_su≥r_block
(
sb
, 
∑ge_°rùe
, 
group_ödex
))

1900 
föish
;

1903 
föish
:

1904 
	`debugs1
("%s: föish.\n", 
__func__
);

1905 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

1906 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

1907 
	}
}

1916 
	$sˇn_su≥r_block
(
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
group_ödex
)

1918 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1919 
sh™n⁄_bio
 *
sbio
;

1920 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

1921 
i
, 
∂™e
, 
lun
, 
lun_off£t
, 
lun_ö_group
, 
fú°_pba
;

1922 
sub_group
 *
group
;

1923 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

1924 
ªt
 = 0;

1926 i‡(
sb
->
£q_num
 == 0) {

1927 
	`sh™n⁄_îr
("sb_ödex=%d, seq_num=%Œx.\n", 
sb
->
sb_ödex
, sb->
£q_num
);

1928 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

1929 
ªt
 = -1;

1930 
out
;

1933 
group
 = &
sb
->
sub_group
[
group_ödex
];

1934 
group
->
phy_ödex
 < 0) {

1935 
group_ödex
++;

1936 i‡(
group_ödex
 =
sdev
->
∑rôy_groups
) {

1937 
group_ödex
 = 0;

1938 
∑ge_°rùe
++;

1939 i‡(
∑ge_°rùe
 =
sdev
->
∑ges_ö_eblock
) {

1940 
ªt
 = 1;

1941 
out
;

1944 
group
 = &
sb
->
sub_group
[
group_ödex
];

1947 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1948 
	`£t_sbio_debug_èg
(
sbio
, 
RECOVER_ACTIVE_BLK_TAG
);

1949 
sbio
->
logicbs
 = 
sb
->
mö_avaûabÀ_luns
 * 
sdev
->
logicbs_ö_chunk
;

1950 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

1951 
sbio
->
ˇŒback
 = 
sˇn_su≥r_block_ˇŒback
;

1952 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

1953 
sbio
->
d©a
 = 
sb
;

1954 
sbio
->
d©a2
 = (*)
group_ödex
;

1956 
fú°_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + sdev->
logicbs_ö_∑ge
 * 
∑ge_°rùe
;

1957 
lun_ö_group
 = 0;

1958 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1959 
	`debugs1
("%s: sb(%dË∑gê°rùe=%d, group=%d.\n", 
__func__
, 
sb
->
sb_ödex
, 
∑ge_°rùe
, 
group_ödex
);

1961 i‡(
lun_ö_group
 =
sb
->
mö_d©a_luns
) {

1962 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

1963 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1966 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

1967 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

1968 } 
	`is_bad_lun
(
sb
, 
lun
));

1971 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

1972 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

1973 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1974 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_ACTIVE_BLK_TAG
, 
i
);

1975 
ªq
->
›code
 = 
sh_cmd_ªad
;

1976 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1977 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

1978 
ªq
->
pba
.
lun
 =Üun;

1979 
ªq
->
pba
.
lun_pba
 = 
fú°_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
;

1980 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1981 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1982 
ªq
->
sbio
 = sbio;

1983 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1984 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1985 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

1988 
lun_ö_group
++;

1989 } 
lun_off£t
 !
group
->
∑rôy_lun_off£t
);

1991 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

1992 
ªt
 = 0;

1994 
out
:

1995  
ªt
;

1996 
	}
}

1998 
	$ªˇlcuœã_∑rôy_lun
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
)

2000 
g
, 
phy_ödex
;

2001 
sub_group
 *
group
;

2003 
sb
->
mö_avaûabÀ_luns
 = 
dev
->
max_luns_ö_group
;

2004 
phy_ödex
 = 0;

2005 
g
 = 0; g < 
dev
->
∑rôy_groups
; g++) {

2006 
group
 = &
sb
->
sub_group
[
g
];

2007 i‡(
group
->
phy_ödex
 < 0)

2009 
group
->
phy_ödex
 =Öhy_index++;

2010 i‡(
sb
->
mö_avaûabÀ_luns
 > 
	`sh™n⁄_©omic_ªad
(&
group
->
avaûabÀ_luns
))

2011 
sb
->
mö_avaûabÀ_luns
 = 
	`sh™n⁄_©omic_ªad
(&
group
->
avaûabÀ_luns
);

2012 i‡(
dev
->
øid5_suµ‹ãd
)

2013 
group
->
d©a_luns
 = 
	`sh™n⁄_©omic_ªad
(&group->
avaûabÀ_luns
) - 1;

2015 
group
->
d©a_luns
 = 
	`sh™n⁄_©omic_ªad
(&group->
avaûabÀ_luns
);

2016 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + group->
fú°_lun_off£t
))

2017 
group
->
fú°_lun_off£t
 = (group->fú°_lun_off£à+ 1Ë% 
dev
->
max_luns_ö_group
;

2018 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + group->
∑rôy_lun_off£t
))

2019 
group
->
∑rôy_lun_off£t
 = (group->∑rôy_lun_off£à+ 
dev
->
max_luns_ö_group
 - 1) % dev->max_luns_in_group;

2020 i‡(
dev
->
øid5_suµ‹ãd
) {

2021 
group
->
œ°_d©a_lun_off£t
 = (group->
∑rôy_lun_off£t
 + 
dev
->
max_luns_ö_group
 - 1) % dev->max_luns_in_group;

2022 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + group->
œ°_d©a_lun_off£t
))

2023 
group
->
œ°_d©a_lun_off£t
 = (group->œ°_d©a_lun_off£à+ 
dev
->
max_luns_ö_group
 - 1) % dev->max_luns_in_group;

2025 
group
->
œ°_d©a_lun_off£t
 = group->
∑rôy_lun_off£t
;

2027 
sb
->
mö_d©a_luns
 = 
dev
->
øid5_suµ‹ãd
?(sb->
mö_avaûabÀ_luns
 - 1):sb->min_available_luns;

2028 
	}
}

2030 
	$ªöôülize_sb
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
)

2032 
sb
->
£q_num
 = 
MAX_SEQ_NUM
;

2033 
sb
->
wr_off£t
 = 0;

2034 
	`˛ór_pba_èbÀ
(
dev
, 
sb
->
sb_ödex
);

2035 
	`sh™n⁄_©omic_£t
(&
sb
->
vÆid_∑ges
, 0);

2036 
	`sh™n⁄_©omic_£t
(&
sb
->
unföished_wrôes
, 0);

2037 
	`sh™n⁄_©omic_£t
(&
sb
->
≥riod_ªad_d⁄e
, 0);

2038 
sb
->
max_lun_ecc_Áûuª_times
 = 0;

2039 
	`sh™n⁄_mem£t
(
sb
->
ecc_Áûuª_times
, 0, (Ë* 
MAX_LUN_COUNT
);

2040 
	`ªˇlcuœã_∑rôy_lun
(
dev
, 
sb
);

2041 
sb
->
°©e
 = 
FREE_BLOCK
;

2042 
sb
->
gc_ö_Êight
 = 0;

2043 
sb
->
ª˛aim_köd
 = 0;

2044 
sb
->
√xt_sb
 = 
INVALID_SB_INDEX
;

2045 
	`sh™n⁄_mem£t
(
sb
->
ªad_cou¡
, 0, (
u32
Ë* 
dev
->
lun_cou¡
);

2046 
sb
->
max_ªad_cou¡
 = 0;

2047 
sb
->
fûl_sb
 = 0;

2048 
sb
->
max_ecc
 = 0;

2049 
sb
->
ªcovî_°©us
 = 0;

2050 
	`sh™n⁄_mem£t
(
sb
->
îr_msg_lun
, 0, (sb->err_msg_lun));

2051 i‡(
dev
->
com∑˘_ïûog
) {

2052 
chunk_size
 = 
dev
->
logicb_size
 * dev->
logicbs_ö_chunk
;

2053 
sb
->
ïûog_size
 = 
	`sh™n⁄_©omic_ªad
(&sb->
avaûabÀ_groups
Ë* sb->
mö_d©a_luns
 * 
dev
->
logicbs_ö_siblög_eblock
 * dev->
ïûog_íåy_size
 + dev->
ïûog_hód_size
;

2054 
sb
->
ïûog_size
 = ((sb->ïûog_sizê+ 
chunk_size
 - 1) / chunk_size) * chunk_size;

2055 
sb
->
logicbs_ö_ïûog
 = sb->
ïûog_size
/
dev
->
logicb_size
;

2057 
sb
->
ïûog_size
 = 
dev
->
max_ïûog_size
;

2058 
sb
->
logicbs_ö_ïûog
 = 
dev
->
max_logicbs_ö_ïûog
;

2060 
	}
}

2062 
	$add_sb_to_‰ì_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
√w_sb
)

2064 
sh™n⁄_sb
 *
p
;

2066 
	`BUG_ON
(
√w_sb
->
°©e
 !
FREE_BLOCK
);

2067 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
√w_sb
->
li°
));

2068 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

2069 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdev
->
‰ì_blocks
, 
li°
) {

2070 i‡(
p
->
îa£_cou¡î
 > 
√w_sb
->erase_counter)

2073 
	`sh™n⁄_li°_add_èû
(&
√w_sb
->
li°
, &
p
->list);

2074 
sdev
->
‰ì_blk˙t
++;

2076 i‡(
sdev
->
‰ì_blk˙t
 =
GC_THRESHOLD_N3
)

2077 
	`sh™n⁄_wake_up
(&
sdev
->
block_ho°_wr
);

2078 i‡(
sdev
->
‰ì_blk˙t
 == 1)

2079 
	`sh™n⁄_wake_up
(&
sdev
->
waô_‰ì_blk
);

2081 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

2082 
	}
}

2084 
	$add_sb_îa£_cou¡î
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
)

2086 
sb
->
îa£_cou¡î
++;

2090 i‡(
	`u∆ikñy
(
dev
->
max_îa£_cou¡
 < 
sb
->
îa£_cou¡î
))

2091 
dev
->
max_îa£_cou¡
 = 
sb
->
îa£_cou¡î
;

2092 
	}
}

2094 
add_dy«mic_bbt
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
‰ì_Êag
);

2095 
add_dy«mic_bbt_g5
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
‰ì_Êag
);

2096 
	$ª_îa£_su≥r_block_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2098 
sh™n⁄_sb
 *
sb
 = 
sbio
->
d©a
;

2099 
sh™n⁄_dev
 *
dev
 = 
sb
->
sdev
;

2100 
sh™n⁄_ªque°
 *
ªq
;

2102 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_îa£_blk˙t
);

2103 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
)

2104 
ªq
->
°©e
 = 
REQ_CALLBACK
;

2106 
	`add_sb_îa£_cou¡î
(
dev
, 
sb
);

2107 
dev
->
tŸÆ_îa£_cou¡
++;

2108 i‡(
	`should_upd©e_mi¸ocode
(
dev
))

2109 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
upd©e_mi¸ocode_w‹k
);

2110 
sb
->
œ°_îa£d_time°amp
 = 
	`gë_jiffõs
();

2111 
sb
->
°©e
 = sb->
ﬁd_°©e
;

2113 i‡(
sb
->
sb_ödex
 < 
dev
->
mbr_eblocks
/dev->
∂™es
) {

2114 
sb
->
°©e
 = 
MBR_BLOCK
;

2115 
sb
->
wr_off£t
 = ~0;

2118 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

2119 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

2120 
	`BUG_ON
(
ªq
->
sbio
 != sbio);

2121 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

2122 
	`‰ì_ªq
(
ªq
);

2125 
	`‰ì_sbio
(
sbio
);

2126 
	}
}

2128 
	$îa£_su≥r_block_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2130 
sh™n⁄_sb
 *
sb
 = 
sbio
->
d©a
;

2131 
sh™n⁄_dev
 *
dev
 = 
sb
->
sdev
;

2132 
sh™n⁄_ªque°
 *
ªq
;

2133 
ﬁd_ª˛aim_köd
 = 
sb
->
ª˛aim_köd
;

2134 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


2135 
lun
;

2138 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_îa£_blk˙t
);

2139 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
)

2140 
ªq
->
°©e
 = 
REQ_CALLBACK
;

2142 i‡(
ﬁd_ª˛aim_köd
 & (1UL << 
ERROR_SB_SHIFT
)) {

2143 
	`sh™n⁄_öfo
("%s:Ñe˛aim sb %d wôhÑe˛aim köd %d.\n", 
dev
->
sdisk
.
disk_«me
,

2144 
sb
->
sb_ödex
, 
ERROR_SB_SHIFT
);

2145 
	`sb_m¨k_îr‹_lun_bad
(
dev
, 
sb
);

2146 i‡(
sb
->
sb_ödex
 >
dev
->
mbr_eblocks
/dev->
∂™es
)

2147 
	`sh™n⁄_©omic_dec
(&
dev
->
≥ndög_îr_blks
);

2150 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_groups
Ë< 
dev
->
max_avaûabÀ_groups
) {

2151 
sb
->
°©e
 = 
DISCARDED_BLOCK
;

2152 
	`sh™n⁄_©omic_öc
(&
dev
->
disˇrded_blk˙t
);

2154 
	`m¨k_su≥r_block_bad
(
sb
);

2155 i‡(
ﬁd_ª˛aim_köd
 & (1UL << 
ERROR_SB_SHIFT
)) {

2156 i‡(
	`sh™n⁄_dev_is_g5
(
dev
))

2157 
	`add_dy«mic_bbt_g5
(
dev
, 
sb
, 0);

2159 
	`add_dy«mic_bbt
(
dev
, 
sb
, 0);

2161 
out
;

2164 
	`add_sb_îa£_cou¡î
(
dev
, 
sb
);

2165 
sb
->
œ°_îa£d_time°amp
 = 
	`gë_jiffõs
();

2167 
	`ªöôülize_sb
(
dev
, 
sb
);

2168 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


2169 
	`BUG_ON
(
dev
->
logicbs_ö_siblög_eblock
 % 64);

2170 
lun
 = 0;Üu¿< 
dev
->
lun_cou¡
;Üun++) {

2171 
u64
 
off£t
 = ()
lun
 * 
dev
->
sb_cou¡
 * dev->
logicbs_ö_siblög_eblock
;

2172 
	`sh™n⁄_mem£t
((
u8
 *)
dev
->
Áke_rd_bad_lu≈ba
 + 
off£t
/8, 0x00, dev->
logicbs_ö_siblög_eblock
/8);

2176 i‡(
sb
->
sb_ödex
 < 
dev
->
mbr_eblocks
/dev->
∂™es
) {

2177 
sb
->
°©e
 = 
MBR_BLOCK
;

2178 
sb
->
wr_off£t
 = ~0;

2179 
out
;

2182 
dev
->
tŸÆ_îa£_cou¡
++;

2183 i‡(
	`should_upd©e_mi¸ocode
(
dev
))

2184 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
upd©e_mi¸ocode_w‹k
);

2186 i‡(
ﬁd_ª˛aim_köd
 & (1UL << 
ERROR_SB_SHIFT
)) {

2187 i‡(
	`sh™n⁄_dev_is_g5
(
dev
))

2188 
	`add_dy«mic_bbt_g5
(
dev
, 
sb
, 1);

2190 
	`add_dy«mic_bbt
(
dev
, 
sb
, 1);

2192 
	`add_sb_to_‰ì_li°
(
dev
, 
sb
);

2194 i‡(
	`sh™n⁄_©omic_ªad
(&
dev
->
îa£_dummy_d⁄e
) != 0)

2195 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
dev
->
îa£_dummy_d⁄e
))

2196 
	`sh™n⁄_wake_up
(&
dev
->
îa£_dummy_d⁄e_evít
);

2198 
out
:

2199 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

2200 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

2201 
	`BUG_ON
(
ªq
->
sbio
 != sbio);

2202 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

2203 
	`‰ì_ªq
(
ªq
);

2206 
	`‰ì_sbio
(
sbio
);

2207 
	}
}

2209 
	$îa£_su≥r_block
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
‰om_gc
, 
√ed_ªöô
)

2211 
i
, 
∂™e
;

2212 
sh™n⁄_bio
 *
sbio
;

2213 
sh™n⁄_ªque°
 *
ªq
, *
p
;

2216 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
unföished_wrôes
))

2217 
	`sh™n⁄_îr
("sb->sb_ödex=%d, sb->°©e=%d, sb->unföished_wrôes=%d.\n", 
sb
->
sb_ödex
, sb->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
unföished_wrôes
));

2218 
	`sh™n⁄_©omic_öc
(&
dev
->
ö_îa£_blk˙t
);

2219 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

2220 
	`£t_sbio_debug_èg
(
sbio
, 
ERASE_BLOCK_TAG
);

2221 
sbio
->
logicbs
 = 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
Ë* 
dev
->
∂™es
;

2222 i‡(
dev
->
p£udo_∂™e
)

2223 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
));

2225 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
Ë* 
dev
->
∂™es
);

2226 
sbio
->
ˇŒback
 = (
‰om_gc
 || 
√ed_ªöô
Ë? 
îa£_su≥r_block_ˇŒback
 : 
ª_îa£_su≥r_block_ˇŒback
;

2227 
sbio
->
d©a
 = 
sb
;

2233 
sbio
->
may_¶ìp_ö_ˇŒback
 = 3;

2235 
i
=0; i<
dev
->
lun_cou¡
; i++) {

2236 i‡(!
	`is_bad_lun
(
sb
, 
i
)) {

2237 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

2238 
	`£t_ªq_debug_èg
(
ªq
, 
ERASE_BLOCK_TAG
, 0);

2239 
ªq
->
›code
 = 
sh_cmd_îa£
;

2240 
ªq
->
pba
.
lun
 = 
i
;

2241 
ªq
->
µa
 = 
sb
->
sb_ödex
 * 
dev
->
∑ges_ö_eblock
 * dev->
∂™es
;

2242 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

2243 
ªq
->
sbio
 = sbio;

2244 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

2245 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

2247 i‡(!
dev
->
p£udo_∂™e
) {

2248 
∂™e
 = 1;

2249 
∂™e
 < 
dev
->
∂™es
) {

2250 
p
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

2251 
	`£t_ªq_debug_èg
(
p
, 
ERASE_BLOCK_TAG
, 
∂™e
);

2252 
p
->
›code
 = 
sh_cmd_îa£
;

2253 
p
->
pba
.
lun
 = 
i
;

2254 
p
->
µa
 = 
ªq
->µ®+ 
dev
->
∑ges_ö_eblock
 * 
∂™e
;

2255 
p
->
lba
 = 
LONG_INVALID_LBA
;

2256 
p
->
sbio
 = sbio;

2257 
	`sh™n⁄_li°_add_èû
(&
p
->
bio_li°
, &
sbio
->
ªq_li°
);

2258 
	`sh™n⁄_li°_add_èû
(&
p
->
chunk_li°
, &
ªq
->chunk_list);

2260 
∂™e
++;

2263 
	`add_lun_ªque°_queue_èû
(
dev
->
lun
[
i
], 
ªq
);

2267 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

2270 i‡(
‰om_gc
 && 
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

2272 
	`lun£t_pick_ªque°
(&
dev
->
lun£ts
[
i
], dev->
cfg_lun_ö_lun£t
 * dev->
∂™es
);

2274 
	}
}

2277 
	$gc_gë_√xt_hód
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
)

2279 i‡(
dev
->
u£_duÆ_hód
 == 0) {

2280 
ªq
->
hód
 = (
sh™n⁄_öô_ãmp
 > 
HIGHEST_COLD_STATE
)? 
HOT_HEAD
 : 
COLD_HEAD
;

2282 
sh™n⁄_sb
 *
sb
 = 
dev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/dev->
logicbs_ö_siblög_eblock
;

2284 
ªq
->
hód
 = 
COLD_HEAD
;

2287 i‡(
sb
->
sb_ödex
 =
dev
->
wr_sb
[
HOT_INDEX
])

2288 
ªq
->
hód
 = 
HOT_HEAD
;

2289 i‡(
sb
->
sb_ödex
 =
dev
->
wr_sb
[
COLD_INDEX
])

2290 
ªq
->
hód
 = 
COLD_HEAD
;

2292 
	}
}

2294 
	$gc_wrôe_ˇn˚l_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2296 
sh™n⁄_sb
 *
ﬁd_sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

2297 
sh™n⁄_dev
 *
dev
 = 
ﬁd_sb
->
sdev
;

2298 
sh™n⁄_ªque°
 *
ªq
;

2300 
	`sh™n⁄_dma_unm≠_sögÀ
(
dev
->
pci_dev
, 
sbio
->
dma_addªss
, dev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

2301 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

2302 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

2303 
ªq
->
°©e
 = 
REQ_CALLBACK
;

2304 
	`£t_gc_wrôe_d⁄e
(
dev
, 
ﬁd_sb
, &
ªq
->
ﬁd_pba
);

2306 
	`‰ì_ªq
(
ªq
);

2307 
	`‰ì_logicb_buf
(
dev
, 
sbio
->
vút_addr
);

2308 i‡(
sbio
->
èg
 =
WL_TAG
)

2309 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_wl_logicbs
);

2310 i‡(
	`sh™n⁄_ã°_bô
(
GC_SB_SHIFT
, &
ﬁd_sb
->
ª˛aim_köd
))

2311 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2313 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2314 
	`‰ì_sbio
(
sbio
);

2315 
	}
}

2317 
	$gc_wrôe_ˇn˚l
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

2319 
	`BUG_ON
(
ªq
->
sbio
->
logicbs
 != 1);

2321 
ªq
->
sbio
->
ˇŒback
 = 
gc_wrôe_ˇn˚l_ˇŒback
;

2322 
ªq
->
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

2323 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

2324 
	}
}

2326 
	$gc_wrôe_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2328 
sh™n⁄_sb
 *
√w_sb
, *
ﬁd_sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

2329 
sh™n⁄_dev
 *
dev
 = 
ﬁd_sb
->
sdev
;

2330 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
dev
->spool);

2331 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

2332 
sh™n⁄_disk
 *
sdisk
 = &
dev
->sdisk;

2333 
sh™n⁄_ªque°
 *
ªq
;

2334 
lun_pba
 
ﬁd_pba
;

2335 
is_ns_d©a
 = 0;

2337 
	`sh™n⁄_dma_unm≠_sögÀ
(
dev
->
pci_dev
, 
sbio
->
dma_addªss
, dev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

2338 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

2339 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

2340 
ªq
->
°©e
 = 
REQ_CALLBACK
;

2341 
	`£t_gc_wrôe_d⁄e
(
dev
, 
ﬁd_sb
, &
ªq
->
ﬁd_pba
);

2343 i‡(
•oﬁ
) {

2344 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

2345 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

2346 
	`sh™n⁄_öfo
("%s():Çame•a˚Çs_id=%d mighàbêªmoved ju°Çow.\n", 
__func__
, 
ªq
->
ns_id
);

2347 
out
;

2349 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

2350 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

2351 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

2352 
out
;

2354 
sdisk
 = &
ns
->sdisk;

2355 
is_ns_d©a
 = (
dev
->
mbr
.
sdev_id
 =0 && 
ªq
->
lba
 =
övÆid_lba
[dev->
lba_f‹m©
]);

2358 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

2359 i‡(
is_ns_d©a
)

2360 
	`sh™n⁄_•ö_lock_bh
(&
ns
->
d©a_lock
);

2362 
	`Õmt_lock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2363 i‡(!
	`pba_is_övÆid
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
)) {

2364 i‡(
is_ns_d©a
)

2365 
ﬁd_pba
 = 
ns
->
d©a_pba
;

2367 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

2368 i‡((
ﬁd_pba
.
lun
 !
ªq
->ﬁd_pba.lunË|| (ﬁd_pba.
lun_pba
 !=Ñeq->old_pba.lun_pba)) {

2369 
u8
 *
pba_èbÀ1
, *
pba_èbÀ2
;

2370 
pba_èbÀ1
 = (
u8
 *)
dev
->
lun
[
ﬁd_pba
.lun]->
pba_èbÀ
;

2371 
pba_èbÀ2
 = (
u8
 *)
dev
->
lun
[
ªq
->
ﬁd_pba
.lun]->
pba_èbÀ
;

2372 
	`sh™n⁄_öfo
("%s(): old_pba.lun=%d, old_pba.lun_pba=%d;Ñeq->old_pba.lun=%d,Ñeq->old_pba.lun_pba=%d.\n",

2373 
__func__
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
, 
ªq
->old_pba.lun,Ñeq->old_pba.lun_pba);

2374 
	`sh™n⁄_öfo
("%s(): old_pba status=0x%x,Ñeq->old_pba status=0x%x.\n",

2375 
__func__
, 
pba_èbÀ1
[
ﬁd_pba
.
lun_pba
], 
pba_èbÀ2
[
ªq
->old_pba.lun_pba]);

2377 
	`BUG_ON
((
ﬁd_pba
.
lun
 !
ªq
->ﬁd_pba.lunË|| (ﬁd_pba.
lun_pba
 !=Ñeq->old_pba.lun_pba));

2378 
	`£t_vÆid
(
dev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

2379 i‡(
is_ns_d©a
)

2380 
ns
->
d©a_pba
 = 
ªq
->
pba
;

2382 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

2383 i‡(
dev
->
ovîœp_wrôe
) {

2384 
	`BUG_ON
(
	`pba_is_equÆ
(&
ªq
->
ﬁd_pba
, &
dev
->
ovîœp
->
pba
));

2385 
	`BUG_ON
(
	`pba_is_equÆ
(&
ªq
->
pba
, &
dev
->
ovîœp
->pba));

2387 
	`£t_ﬁd_pba_°Æe
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
);

2389 
	`£t_gc_wrôe_övÆid
(
dev
, &
ªq
->
pba
);

2391 i‡(
is_ns_d©a
)

2392 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

2394 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2396 
out
:

2397 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

2399 
√w_sb
 = 
dev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/dev->
logicbs_ö_siblög_eblock
;

2400 
	`sh™n⁄_©omic_dec
(&
√w_sb
->
ö_wrôe_logicbs
);

2403 
	`‰ì_ªq
(
ªq
);

2404 
	`‰ì_logicb_buf
(
dev
, 
sbio
->
vút_addr
);

2405 i‡(
sbio
->
èg
 =
WL_TAG
) {

2406 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_wl_logicbs
);

2407 
dev
->
tŸÆ_wl_logicbs
++;

2408 } i‡(
	`sh™n⁄_ã°_bô
(
GC_SB_SHIFT
, &
ﬁd_sb
->
ª˛aim_köd
)) {

2409 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2410 
dev
->
tŸÆ_gc_logicbs
++;

2412 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2413 
dev
->
tŸÆ_îr_ªcovî_logicbs
++;

2415 
	`‰ì_sbio
(
sbio
);

2416 i‡((((
	`sh™n⁄_©omic_ªad
(&
dev
->
waô_blk
Ë=
ﬁd_sb
->
sb_ödex
Ë&& (dev->
öô_d⁄e
 =
STAGE_RECOVER_ACTIVE_DONE
)) \

2417 && (
	`sh™n⁄_©omic_ªad
(&
ﬁd_sb
->
vÆid_∑ges
Ë=0)Ë|| 
dev
->
∂ug_out
) {

2418 
	`sh™n⁄_©omic_£t
(&
dev
->
waô_blk
, -1);

2419 
	`sh™n⁄_wake_up
(&
dev
->
waô_blk_d⁄e_evít
);

2422 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

2423 
	}
}

2425 
	$£t_sb_c›y_îr_°©e
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

2427 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

2428 
sb
->
°©e
) {

2429 
IN_GC_BLOCK
:

2430 
	`sh™n⁄_©omic_dec
(&
sdev
->
ö_gc_blk˙t
);

2432 
IN_RECOVER_BLOCK
:

2434 
COPY_ERR_BLOCK
:

2435 
WAIT_ERASE_BLOCK
:

2436 
FREE_BLOCK
:

2437 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2440 
	`sh™n⁄_öfo
("%s: Might beáÖroactive gc. sb=%d, state=%d.\n",

2441 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
);

2442 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2445 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
c›y_îr_lock
);

2446 
sb
->
°©e
 = 
COPY_ERR_BLOCK
;

2447 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
c›y_îr_blocks
);

2448 
sdev
->
c›y_îr_blk˙t
++;

2449 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
c›y_îr_lock
);

2450 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2451 i‡(
	`likñy
((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& sdev->
gc_thªad
))

2452 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
gc_thªad
);

2453 
	`sh™n⁄_öfo
("%s: change sb=%dÅoÇew state %d. Total blocksÇow: %d\n",

2454 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
COPY_ERR_BLOCK
, sdev->
c›y_îr_blk˙t
);

2455 
	}
}

2457 
	$gc_ªad_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2459 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

2460 
sh™n⁄_dev
 *
dev
 = 
sb
->
sdev
;

2461 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
dev
->spool);

2462 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

2463 
sh™n⁄_disk
 *
sdisk
 = &
dev
->sdisk;

2464 
sh™n⁄_ªque°
 *
ªq
;

2465 
lun_pba
 
ﬁd_pba
;

2466 
∂™e
, 
fûl_hód
 = 0;

2467 
is_ns_d©a
 = 0;

2469 
	`sh™n⁄_dma_unm≠_sögÀ
(
dev
->
pci_dev
, 
sbio
->
dma_addªss
, dev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

2470 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

2471 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

2472 
ªq
->
°©e
 = 
REQ_CALLBACK
;

2473 
	`BUG_ON
(
sb
->
sb_ödex
 !
ªq
->
pba
.
lun_pba
/
dev
->
logicbs_ö_siblög_eblock
);

2474 i‡(
ªq
->
ªªad
 & 
RAID_READ_MASK
) {

2475 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
dev
->
logicb_size
);

2476 
	`‰ì_logicb_buf
(
dev
, 
ªq
->
ªcovî_buf
);

2479 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
))

2480 
k‰ì
;

2482 i‡(
	`pba_is_övÆid
(
dev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
))

2483 
k‰ì
;

2485 i‡(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
) {

2486 
	`sh™n⁄_log
("%s:Åhêaddªs†lun=%d,Üun_pba=0x%x i†bœnk!\n", 
dev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

2487 
k‰ì
;

2490 i‡(
sbio
->
°©us
 & 
HAVE_ERROR_SECTOR
) {

2491 i‡(!(
dev
->
°©e
 & 
SHN_STATE_ERROR_BIT
)) {

2492 
	`sh™n⁄_îr
("TheáddressÜun=%d,Üun_pba=0x%x canÇot beÑead out correctly! status=0x%x.\n",

2493 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
sbio
->
°©us
);

2494 
∂™e
 = ((
ªq
->
pba
.
lun_pba
/
dev
->
logicbs_ö_∑ge
)/dev->
∑ges_ö_eblock
Ë% dev->
∂™es
;

2495 i‡(!
	`is_îr‹_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
))

2496 
	`sb_m¨k_îr‹_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
);

2497 i‡((
dev
->
öô_d⁄e
 > 
STAGE_BBT_DONE
Ë&& (dev->öô_d⁄ê<
STAGE_RECOVER_DONE
)) {

2498 
	`sh™n⁄_îr
("%s: Recovîá˘ivêsb(%d), Ród Eº‹ººººººººººr.\n", 
dev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
);

2499 
	`£t_ªcovî_°©e_îr‹
(
dev
);

2501 
	`£t_sb_c›y_îr_°©e
(
dev
, 
sb
);

2503 
k‰ì
;

2506 i‡(
•oﬁ
) {

2507 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

2508 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

2509 
	`sh™n⁄_öfo
("%s():Çame•a˚Çs_id=%d mighàbêªmoved ju°Çow.\n", 
__func__
, 
ªq
->
ns_id
);

2510 
k‰ì
;

2512 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

2513 
	`sh™n⁄_îr
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

2514 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

2515 
k‰ì
;

2517 
sdisk
 = &
ns
->sdisk;

2518 
is_ns_d©a
 = (
dev
->
mbr
.
sdev_id
 =0 && 
ªq
->
lba
 =
övÆid_lba
[dev->
lba_f‹m©
]);

2522 i‡(
	`u∆ikñy
((
ªq
->
ns_id
 !0Ë|| (ªq->
ns_£q_num
 != 0))) {

2523 
	`sh™n⁄_w¨n
("%s:spool might beÑemoved justÇow.Çs_id=%d,Çs_seq_num=%d, metadata=0x%lx,Üun=%d,Üun_pba=%d.\n",

2524 
dev
->
sdisk
.
disk_«me
, 
ªq
->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
_mëad©a
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

2525 
k‰ì
;

2529 i‡(
ªq
->
lba
 > 
sdisk
->
tŸÆ_m≠_èbÀ_size
/(
u32
Ë&& !
is_ns_d©a
) {

2530 
	`sh™n⁄_îr
("Data Corrupted on Disk:Üba=0x%lx,Üun=%d,Üun_pba=%d,Ñeread=%d,Écc=0x%x.\n",

2531 ()
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
ªªad
,Ñeq->
_ecc
);

2532 
	`£t_sb_c›y_îr_°©e
(
dev
, 
sb
);

2533 
k‰ì
;

2536 
sbio
->
ˇŒback
 = 
gc_wrôe_ˇŒback
;

2537 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

2538 
sbio
->
logicbs
 = 1;

2539 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

2540 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
dev
->
pci_dev
, sbio->
vút_addr
, dev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

2541 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
dev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

2542 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

2543 
k‰ì
;

2546 
ªq
->
›code
 = 
sh_cmd_wrôe
;

2547 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

2548 
ªq
->
d©©y≥
 = 
lba_ty≥
[
dev
->
lba_f‹m©
];

2549 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

2550 
ªq
->
ﬁd_pba
.
lun
 =Ñeq->
pba
.lun;

2551 
ªq
->
ﬁd_pba
.
lun_pba
 =Ñeq->
pba
.lun_pba;

2553 i‡(
	`u∆ikñy
(
is_ns_d©a
)) {

2554 
	`sh™n⁄_•ö_lock_bh
(&
ns
->
d©a_lock
);

2555 i‡(
	`pba_is_övÆid
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
)) {

2556 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

2557 
out
;

2559 i‡(
	`ã°_™d_£t_gc_wrôe_°©e
(
dev
, 
sb
, &
ªq
->
ﬁd_pba
)) {

2560 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

2561 
out
;

2563 i‡(
dev
->
u£_duÆ_hód
)

2564 
ªq
->
hód
 = 
COLD_HEAD
;

2566 
ªq
->
hód
 = 
HOT_HEAD
;

2567 
	`£t_pba_√xt_hód
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
,Ñeq->
hód
);

2568 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

2569 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

2571 
	`Õmt_lock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2572 i‡(
	`pba_is_övÆid
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
)) {

2573 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2574 
out
;

2576 
	`BUG_ON
(
	`ªq_has_övÆid_lba
(
ªq
));

2577 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

2578 i‡((
ﬁd_pba
.
lun
 !
ªq
->ﬁd_pba.lunË|| (ﬁd_pba.
lun_pba
 !=Ñeq->old_pba.lun_pba)) {

2579 
	`sh™n⁄_îr
("lba mismatch:Üba=0x%lx,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n\n",

2580 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

2581 
∂™e
 = ((
ªq
->
pba
.
lun_pba
/
dev
->
logicbs_ö_∑ge
)/dev->
∑ges_ö_eblock
Ë% dev->
∂™es
;

2582 i‡(!
	`is_îr‹_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
))

2583 
	`sb_m¨k_îr‹_lun
(
dev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
);

2584 
	`£t_sb_c›y_îr_°©e
(
dev
, 
sb
);

2585 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2586 
out
;

2588 i‡(
	`ã°_™d_£t_gc_wrôe_°©e
(
dev
, 
sb
, &
ªq
->
ﬁd_pba
)) {

2589 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2590 
out
;

2592 
	`gc_gë_√xt_hód
(
dev
, 
ªq
);

2593 
	`£t_pba_√xt_hód
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
,Ñeq->
hód
);

2594 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

2595 
	`Õmt_u∆ock
(
dev
, 
sdisk
, 
ªq
->
lba
);

2597 #ifde‡
CONFIG_SHANNON_STATISTICS


2598 
	`sh™n⁄_©omic_öc
(&
dev
->
‰om_gc
);

2600 i‡((
ªq
->
hód
 & 
HEAD_INDEX_MASK
Ë=
HOT_INDEX
)

2601 
fûl_hód
 |1 << 
HOT_INDEX
;

2603 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


2604 
	`BUG_ON
(!
dev
->
u£_duÆ_hód
);

2606 
fûl_hód
 |1 << 
COLD_INDEX
;

2608 
	`add_ªq_to_gc_wrôe_queue_èû
(
dev
, 
ªq
);

2609 
	`mod_fûl_chunk_timî
(
dev
, 
fûl_hód
);

2611 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
w‹k
);

2613 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

2615 
out
:

2616 
	`sh™n⁄_dma_unm≠_sögÀ
(
dev
->
pci_dev
, 
sbio
->
dma_addªss
, dev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

2617 
k‰ì
:

2618 
	`‰ì_ªq
(
ªq
);

2619 
	`‰ì_logicb_buf
(
dev
, 
sbio
->
vút_addr
);

2620 i‡(
sbio
->
èg
 =
WL_TAG
) {

2621 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_wl_logicbs
);

2622 
dev
->
tŸÆ_wl_logicbs
++;

2623 } i‡(
	`sh™n⁄_ã°_bô
(
GC_SB_SHIFT
, &
sb
->
ª˛aim_köd
)) {

2624 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2625 
dev
->
tŸÆ_gc_logicbs
++;

2627 
	`sh™n⁄_©omic_dec
(&
dev
->
ö_gc_logicbs
);

2628 
dev
->
tŸÆ_îr_ªcovî_logicbs
++;

2630 
	`‰ì_sbio
(
sbio
);

2632 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

2634 
	}
}

2636 
	$gc_ªad_logicb
(
sh™n⁄_sb
 *
sb
, 
lun
, 
logicb_t
 
lun_pba
, 
is_wl
)

2638 
sh™n⁄_bio
 *
sbio
;

2639 
sh™n⁄_ªque°
 *
ªq
;

2640 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

2642 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

2643 i‡(
is_wl
)

2644 
	`£t_sbio_debug_èg
(
sbio
, 
WL_TAG
);

2646 
	`£t_sbio_debug_èg
(
sbio
, 
GC_TAG
);

2647 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

2648 
sbio
->
logicbs
 = 1;

2649 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

2650 
sbio
->
ˇŒback
 = 
gc_ªad_ˇŒback
;

2651 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

2652 
sbio
->
d©a
 = 
sb
;

2653 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

2654 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

2655 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

2656 
	`BUG
();

2657 
out
;

2660 i‡(
is_wl
)

2661 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_wl_logicbs
);

2663 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_gc_logicbs
);

2664 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

2665 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 0);

2666 
ªq
->
›code
 = 
sh_cmd_ªad
;

2667 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

2668 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

2669 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

2670 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

2671 
ªq
->
£q_num
 = 
sb
->seq_num;

2672 
ªq
->
pba
.
lun
 =Üun;

2673 
ªq
->
pba
.
lun_pba
 =Üun_pba;

2674 
ªq
->
sbio
 = sbio;

2675 
ªq
->
£ndî
 = 
FROM_GC
;

2676 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

2677 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

2678 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

2679 
	`£t_gc_ªad_°©e
(
sdev
, 
lun
, 
lun_pba
);

2682 
out
:

2683  -
EIO
;

2684 
	}
}

2686 
	$c›y_∑ge_°rùe
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
cur_°©e
)

2688 
i
, 
lun
, 
lun_off£t
, 
∂™e
, 
group
, 
logicbs_ö_eblk
, 
avaûabÀ_logicbs
 = 0;

2689 
logicb_t
 
lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
∑ge_°rùe
 * sdev->
logicbs_ö_∑ge
;

2691 
	`debugs1
("sb=%d, sèã=%d,Öage_°rùe=%d.\n", 
sb
->
sb_ödex
, sb->
°©e
, 
∑ge_°rùe
);

2692 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

2693 
group
 = 0; grou∞< 
sdev
->
∑rôy_groups
; group++) {

2694 i‡(
sb
->
sub_group
[
group
].
phy_ödex
 < 0)

2696 
lun_off£t
 = 
sb
->
sub_group
[
group
].
∑rôy_lun_off£t
;

2701 i‡(
sb
->
°©e
 !
cur_°©e
)

2702  
avaûabÀ_logicbs
;

2705 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

2706 
lun
 = 
sb
->
sub_group
[
group
].
°¨t_lun
 + 
lun_off£t
;

2707 } 
	`is_bad_lun
(
sb
, 
lun
));

2709 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

2710 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

2711 i‡(!
	`pba_is_övÆid
(
sdev
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
)) {

2712 
	`gc_ªad_logicb
(
sb
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
, 0);

2713 
avaûabÀ_logicbs
++;

2717 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, sdev->
logicbs_ö_chunk
);

2718 } 
lun_off£t
 !
sb
->
sub_group
[
group
].
œ°_d©a_lun_off£t
);

2724  
avaûabÀ_logicbs
;

2725 
	}
}

2727 
	$c›y_chunk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
lun
)

2729 
i
, 
∂™e
, 
logicbs_ö_eblk
, 
avaûabÀ_logicbs
 = 0;

2730 
logicb_t
 
lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
∑ge_°rùe
 * sdev->
logicbs_ö_∑ge
;

2732 
	`debugs1
("sb=%d, sèã=%d,Öage_°rùe=%dÜun=%d.\n", 
sb
->
sb_ödex
, sb->
°©e
, 
∑ge_°rùe
, 
lun
);

2733 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

2735 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

2736 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

2737 i‡(!
	`pba_is_övÆid
(
sdev
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
)) {

2738 
	`gc_ªad_logicb
(
sb
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
, 0);

2739 
avaûabÀ_logicbs
++;

2743 i‡(
avaûabÀ_logicbs
) {

2744 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, sdev->
logicbs_ö_chunk
);

2747  
avaûabÀ_logicbs
;

2748 
	}
}

2750 
	$upd©e_gc_Á˘‹
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

2752 
vÆid_logicbs
, 
tŸÆ_logicbs
;

2753 
Á˘‹
, 
œ°_gc_Á˘‹
;

2754 
avaû_tŸÆ_logicbs
;

2756 
vÆid_logicbs
 = 
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
);

2757 
tŸÆ_logicbs
 = 
sdev
->
logicbs_ö_siblög_eblock
 * 
sb
->
mö_d©a_luns
 * sdev->
max_avaûabÀ_groups
;

2758 
avaû_tŸÆ_logicbs
 = 
sdev
->
logicbs_ö_siblög_eblock
 * (
sb
->
mö_d©a_luns
 - 1Ë* sdev->
max_avaûabÀ_groups
;

2759 
Á˘‹
 = (
vÆid_logicbs
 * 
GC_DIVIDE_FACTOR
)/(
tŸÆ_logicbs
 - valid_logicbs);

2760 i‡(
vÆid_logicbs
 >
avaû_tŸÆ_logicbs
)

2761 
sdev
->
îr_gc_Á˘‹
 = 4000000;

2763 
sdev
->
îr_gc_Á˘‹
 = (
vÆid_logicbs
 * 
GC_DIVIDE_FACTOR
)/(
avaû_tŸÆ_logicbs
 - valid_logicbs);

2764 
	`debugs1
("valid_logicbs=%d,ávail_total_logicbs=%d,Åotal_logicbs=%d, factor=%d,Érr_gc_factor=%d.\n",

2765 
vÆid_logicbs
, 
avaû_tŸÆ_logicbs
, 
tŸÆ_logicbs
, 
Á˘‹
, 
sdev
->
îr_gc_Á˘‹
);

2766 
œ°_gc_Á˘‹
 = 
sdev
->
gc_Á˘‹
;

2767 
sdev
->
gc_Á˘‹
 = (
Á˘‹
 + (
GC_THROTTLE_FACTOR
 - 1Ë* 
œ°_gc_Á˘‹
 + GC_THROTTLE_FACTOR/2) / GC_THROTTLE_FACTOR;

2768 
	}
}

2770 
sh™n⁄_sb
 *
	$gë_waô_wl_sb
(
sh™n⁄_dev
 *
sdev
)

2772 
sh™n⁄_sb
 *
sb
;

2774 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_wl_li°
))

2775  
NULL
;

2777 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_wl_lock
);

2778 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_wl_li°
)) {

2779 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_wl_lock
);

2780  
NULL
;

2782 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
waô_wl_li°
, 
sh™n⁄_sb
, 
li°
);

2783 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_wl_lock
);

2786 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

2787 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_wl_lock
);

2788 i‡(
sb
->
°©e
 !
WAIT_WL_BLOCK
) {

2789 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_wl_lock
);

2790 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2791  
NULL
;

2793 
sdev
->
waô_wl_blk˙t
--;

2794 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

2795 
sb
->
°©e
 = 
IN_WL_BLOCK
;

2796 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_wl_blk˙t
);

2797 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_wl_lock
);

2798 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2799  
sb
;

2800 
	}
}

2802 
sh™n⁄_sb
 *
	$gë_waô_c›y_sb
(
sh™n⁄_dev
 *
sdev
)

2804 
sh™n⁄_sb
 *
sb
;

2806 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_c›y
))

2807  
NULL
;

2809 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_c›y_lock
);

2810 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_c›y
)) {

2811 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_c›y_lock
);

2812  
NULL
;

2814 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
waô_c›y
, 
sh™n⁄_sb
, 
li°
);

2815 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_c›y_lock
);

2818 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

2819 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_c›y_lock
);

2820 i‡(
sb
->
°©e
 !
WAIT_COPY_BLOCK
) {

2821 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_c›y_lock
);

2822 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2823  
NULL
;

2825 
sdev
->
waô_c›y_blk˙t
--;

2826 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

2827 
sb
->
°©e
 = 
IN_GC_BLOCK
;

2828 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_gc_blk˙t
);

2829 
	`add_to_gc_°©e_li°
(
sdev
, 
sb
);

2830 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_c›y_lock
);

2831 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

2832  
sb
;

2833 
	}
}

2835 
ölöe
 
	$ˇlc_lun_loˇti⁄
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

2837 
lun_off£t
 = 
sb
->
sub_group
[0].
∑rôy_lun_off£t
;

2838 
lun_off£t
 =Üun_off£à% 
sdev
->
max_luns_ö_group
;

2839 
sdev
->
this_lun
 = 
sb
->
sub_group
[0].
°¨t_lun
 + 
lun_off£t
;

2840 
sdev
->
this_∑ge_°rùe
++;

2841 
	}
}

2843 
	$gë_gc_ªad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
cur_°©e
)

2845 
group
, 
group_num
, 
lun_off£t
;

2846 
lun
 = -1;

2848 
group_num
 = 
sdev
->
this_lun
 / sdev->
max_luns_ö_group
;

2849 
lun_off£t
 = 
sdev
->
this_lun
 - 
sb
->
sub_group
[
group_num
].
°¨t_lun
;

2851 
group
 = 
group_num
; grou∞< 
sdev
->
∑rôy_groups
; group++) {

2855 i‡(
sb
->
°©e
 !
cur_°©e
)

2856  
lun
;

2858 i‡(
group
 !
group_num
)

2859 
lun_off£t
 = 
sb
->
sub_group
[
group
].
∑rôy_lun_off£t
;

2861 i‡(
sb
->
sub_group
[
group
].
phy_ödex
 < 0 || 
lun_off£t
 =sb->sub_group[group].
œ°_d©a_lun_off£t
) {

2862 i‡(
group
 =
sdev
->
∑rôy_groups
 - 1)

2863 
	`ˇlc_lun_loˇti⁄
(
sdev
, 
sb
);

2868 i‡(
sb
->
°©e
 !
cur_°©e
)

2870 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

2871 
lun
 = 
sb
->
sub_group
[
group
].
°¨t_lun
 + 
lun_off£t
;

2872 } 
	`is_bad_lun
(
sb
, 
lun
));

2873 
sdev
->
this_lun
 = 
lun
;

2877  
lun
;

2878 
	}
}

2880 
	$submô_gc_ªad
(
sh™n⁄_dev
 *
sdev
, 
cou¡
)

2882 
sh™n⁄_sb
 *
sb
;

2883 
∑ge_°rùe
;

2884 
submô_ªqs
 = 0;

2885 
lun_off£t
;

2886 
lun
;

2888 
submô_ªqs
 < 
cou¡
) {

2889 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
this_sb_lock
);

2890 i‡((
sdev
->
this_sb
 =
NULL
Ë|| (sdev->this_sb->
°©e
 !
IN_GC_BLOCK
Ë|| (sdev->
this_∑ge_°rùe
 >sdev->
∑ges_ö_eblock
)) {

2891 
sdev
->
this_sb
 = 
	`gë_waô_c›y_sb
(sdev);

2892 i‡(
sdev
->
this_sb
 =
NULL
) {

2893 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
this_sb_lock
);

2894 i‡(
	`likñy
(
sdev
->
gc_thªad
))

2895 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
gc_thªad
);

2896  
submô_ªqs
;

2898 
sdev
->
this_∑ge_°rùe
 = 0;

2899 
lun_off£t
 = 
sdev
->
this_sb
->
sub_group
[0].
∑rôy_lun_off£t
;

2900 
lun_off£t
 =Üun_off£à% 
sdev
->
max_luns_ö_group
;

2901 
sdev
->
this_lun
 = sdev->
this_sb
->
sub_group
[0].
°¨t_lun
 + 
lun_off£t
;

2902 
	`upd©e_gc_Á˘‹
(
sdev
, sdev->
this_sb
);

2903 
sdev
->
gc_sbs
++;

2905 
sb
 = 
sdev
->
this_sb
;

2906 
∑ge_°rùe
 = 
sdev
->
this_∑ge_°rùe
;

2907 
lun
 = 
	`gë_gc_ªad_lun
(
sdev
, 
sb
, 
IN_GC_BLOCK
);

2908 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
this_sb_lock
);

2909 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
Ë> 
MAX_IN_GC_LOGICBS
)

2910 
	`sh™n⁄_m¶ìp
(1);

2912 i‡(
lun
 >= 0) {

2913 
submô_ªqs
 +
	`c›y_chunk
(
sdev
, 
sb
, 
∑ge_°rùe
, 
lun
);

2916  
submô_ªqs
;

2917 
	}
}

2919 
	#sh™n⁄_max
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

2920 
	$gë_gc_ªad_ªqs
(
sh™n⁄_dev
 *
sdev
, 
logicbs
)

2922 
cou¡
, 
ªqs
, 
gc_Á˘‹
, 
dñè
;

2924 i‡(
sdev
->
gc_ªad_ªqs
 >
GC_DIVIDE_FACTOR
) {

2925 
	`sh™n⁄_îr
("gc_ªad_ªqs=%d.\n", 
sdev
->
gc_ªad_ªqs
);

2926 
	`BUG
();

2928 
	`BUG_ON
(
sdev
->
gc_Á˘‹
 == 0);

2930 
dñè
 = 
GC_THROTTLE_BAR
 - 
sdev
->
‰ì_blk˙t
;

2932 i‡((
sdev
->
‰ì_blk˙t
 < 
GC_THROTTLE_BAR
Ë&& sdev->
îr_blk˙t
)

2933 
gc_Á˘‹
 = 
sdev
->
îr_gc_Á˘‹
 + (
dñè
 * sdev->îr_gc_Á˘‹Ë/ 
GC_THROTTLE_FACTOR
;

2935 
gc_Á˘‹
 = 
sdev
->gc_Á˘‹ + (
dñè
 * sdev->gc_Á˘‹Ë/ 
GC_THROTTLE_FACTOR
;

2936 i‡(
gc_Á˘‹
 <= 0)

2937 
gc_Á˘‹
 = 1;

2939 
ªqs
 = 
sdev
->
gc_ªad_ªqs
 + 
logicbs
;

2941 i‡(
gc_Á˘‹
 <
GC_DIVIDE_FACTOR
) {

2942 i‡(
ªqs
 >
gc_Á˘‹
) {

2943 
cou¡
 = (
gc_Á˘‹
 > 
sdev
->
gc_ªad_ªqs
) ? (gc_factor - sdev->gc_read_reqs) : 0;

2944 
sdev
->
gc_ªad_ªqs
 = 
ªqs
;

2945 i‡(
ªqs
 >
GC_DIVIDE_FACTOR
) {

2946 
cou¡
 +(
ªqs
/
GC_DIVIDE_FACTOR
 - 1Ë* 
gc_Á˘‹
;

2947 
cou¡
 +(
ªqs
%
GC_DIVIDE_FACTOR
 > 
gc_Á˘‹
) ? gc_factor : (reqs%GC_DIVIDE_FACTOR);

2948 
sdev
->
gc_ªad_ªqs
 = 
ªqs
 % 
GC_DIVIDE_FACTOR
;

2951 
cou¡
 = 
logicbs
;

2952 
sdev
->
gc_ªad_ªqs
 = 
ªqs
;

2956 i‡(
ªqs
 >
GC_DIVIDE_FACTOR
) {

2957 
cou¡
 = 
logicbs
 + (
ªqs
/
GC_DIVIDE_FACTOR
Ë* (
gc_Á˘‹
 - GC_DIVIDE_FACTOR);

2958 
sdev
->
gc_ªad_ªqs
 = 
ªqs
 % 
GC_DIVIDE_FACTOR
;

2960 
cou¡
 = 
logicbs
;

2961 
sdev
->
gc_ªad_ªqs
 = 
ªqs
;

2965 i‡(
	`u∆ikñy
(
sdev
->
ac˚ss_mode
 =
SHN_MODE_REDUCED_WRITE
))

2966 
cou¡
 = 
	`sh™n⁄_max
(
logicbs
, count * 4);

2968 i‡(
cou¡
 < 0) {

2969 
	`sh™n⁄_îr
("logicbs=%d,Ñeqs=%d, gc_Á˘‹=%d, cou¡=%d.\n", 
logicbs
, 
ªqs
, 
sdev
->
gc_Á˘‹
, 
cou¡
);

2970 
	`BUG
();

2973  
cou¡
;

2974 
	}
}

2976 
	$bÆ™˚_gc
(
sh™n⁄_dev
 *
sdev
, 
logicbs
)

2978 
cou¡
, 
submô_ªqs
;

2979 
numbî
;

2981 i‡(
sdev
->
gc_thªad_°©e
 =
NO_RECLAIM
)

2984 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

2987 
	`sh™n⁄_©omic_add
(
logicbs
, &
sdev
->
wrôe_ªqs_f‹_gc
);

2988 
numbî
 = 
logicbs
;

2989 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs_f‹_gc
Ë< 
numbî
)

2992 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_ªqs_lock
);

2993 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs_f‹_gc
Ë>
numbî
)

2994 
	`sh™n⁄_©omic_sub
(
numbî
, &
sdev
->
wrôe_ªqs_f‹_gc
);

2996 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_ªqs_lock
);

3000 
cou¡
 = 
	`gë_gc_ªad_ªqs
(
sdev
, 
numbî
);

3001 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_ªqs_lock
);

3003 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
exåa_ªqs_lock
);

3004 i‡(
cou¡
 <
sdev
->
exåa_ªqs
) {

3005 
sdev
->
exåa_ªqs
 -
cou¡
;

3006 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
exåa_ªqs_lock
);

3009 
cou¡
 -
sdev
->
exåa_ªqs
;

3010 
sdev
->
exåa_ªqs
 = 0;

3012 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
exåa_ªqs_lock
);

3014 
	`sh™n⁄_©omic_öc
(&
sdev
->
gc_thªads
);

3015 
submô_ªqs
 = 
	`submô_gc_ªad
(
sdev
, 
cou¡
);

3016 
	`sh™n⁄_©omic_dec
(&
sdev
->
gc_thªads
);

3017 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
exåa_ªqs_lock
);

3018 
sdev
->
exåa_ªqs
 +
submô_ªqs
 - 
cou¡
;

3019 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
exåa_ªqs_lock
);

3020 
	}
}

3022 
sh™n⁄_sb
 *
	$gc_föd_vi˘im
(
sh™n⁄_dev
 *
dev
)

3024 
sh™n⁄_sb
 *
hŸ_sb
 = 
NULL
, *
cﬁd_sb
 = NULL, *
p
;

3025 
övÆid_logicbs
;

3026 
hŸ_max_övÆid
, 
cﬁd_max_övÆid
;

3027 
Á˘‹
;

3029 
hŸ_max_övÆid
 = 0;

3030 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
u£d_blocks_lock
[
HOT_INDEX
]);

3031 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
dev
->
u£d_blocks
[
HOT_INDEX
], 
li°
) {

3032 i‡(
	`sh™n⁄_©omic_ªad
(&
p
->
ö_wrôe_logicbs
) != 0)

3034 
övÆid_logicbs
 = 
p
->
mö_d©a_luns
 * 
dev
->
max_avaûabÀ_groups
 * dev->
logicbs_ö_siblög_eblock
 - 
	`sh™n⁄_©omic_ªad
(&p->
vÆid_∑ges
);

3035 i‡(
övÆid_logicbs
 > 
hŸ_max_övÆid
) {

3036 
hŸ_max_övÆid
 = 
övÆid_logicbs
;

3037 
hŸ_sb
 = 
p
;

3040 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
u£d_blocks_lock
[
HOT_INDEX
]);

3042 
cﬁd_max_övÆid
 = 0;

3043 i‡(
dev
->
u£_duÆ_hód
) {

3044 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
u£d_blocks_lock
[
COLD_INDEX
]);

3045 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
dev
->
u£d_blocks
[
COLD_INDEX
], 
li°
) {

3046 i‡(
	`sh™n⁄_©omic_ªad
(&
p
->
ö_wrôe_logicbs
) != 0)

3048 
övÆid_logicbs
 = 
p
->
mö_d©a_luns
 * 
dev
->
max_avaûabÀ_groups
 * dev->
logicbs_ö_siblög_eblock
 - 
	`sh™n⁄_©omic_ªad
(&p->
vÆid_∑ges
);

3049 i‡(
övÆid_logicbs
 > 
cﬁd_max_övÆid
) {

3050 
cﬁd_max_övÆid
 = 
övÆid_logicbs
;

3051 
cﬁd_sb
 = 
p
;

3054 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
u£d_blocks_lock
[
COLD_INDEX
]);

3058 i‡(
	`u∆ikñy
(
dev
->
îr_blk˙t
)) {

3059 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
îr_blks_lock
);

3060 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
dev
->
îr_blks
, 
li°
) {

3061 
övÆid_logicbs
 = 
p
->
mö_d©a_luns
 * 
dev
->
max_avaûabÀ_groups
 * dev->
logicbs_ö_siblög_eblock
 - 
	`sh™n⁄_©omic_ªad
(&p->
vÆid_∑ges
);

3062 i‡(
övÆid_logicbs
 > 
cﬁd_max_övÆid
) {

3063 
cﬁd_max_övÆid
 = 
övÆid_logicbs
;

3064 
cﬁd_sb
 = 
p
;

3067 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
îr_blks_lock
);

3070 #ifde‡
CONFIG_SHANNON_GC_GREEDY


3071 
Á˘‹
 = 100;

3073 
Á˘‹
 = 
dev
->
hŸ_block_ª˛aim_¥i‹ôy
;

3075 
hŸ_max_övÆid
 = (hŸ_max_övÆid * 
Á˘‹
) / 100;

3076 
p
 = (
hŸ_max_övÆid
 > 
cﬁd_max_övÆid
Ë? 
hŸ_sb
 : 
cﬁd_sb
;

3079 i‡(
p
 =
NULL
)

3080  
NULL
;

3082 i‡(
	`sh™n⁄_©omic_ªad
(&
p
->
ö_wrôe_logicbs
) != 0) {

3083 i‡(!
dev
->
•oﬁ
 || 
	`sh™n⁄_¥ötk_øãlimô
())

3084 
	`sh™n⁄_log
("%s: sb_index=%d, state=%d, in_write_logicbs=%d.\n",

3085 
dev
->
sdisk
.
disk_«me
, 
p
->
sb_ödex
,Ö->
°©e
, 
	`sh™n⁄_©omic_ªad
(&p->
ö_wrôe_logicbs
));

3086  
NULL
;

3089 i‡((
p
->
mö_d©a_luns
 * 
dev
->
max_avaûabÀ_groups
 * dev->
logicbs_ö_siblög_eblock
 -Ö->
logicbs_ö_ïûog
 - 
	`sh™n⁄_©omic_ªad
(&p->
vÆid_∑ges
)) < 3) {

3090 
	`sh™n⁄_log
("%s:Åoÿm™y vÆid_∑ges, së sbÅÿNULL.\n", 
dev
->
sdisk
.
disk_«me
);

3091 
	`sh™n⁄_m¶ìp
(500);

3092  
NULL
;

3094 
	`sh™n⁄_£t_bô
(
GC_SB_SHIFT
, &
p
->
ª˛aim_köd
);

3095  
p
;

3096 
	}
}

3098 
	$gc_thªad_‚
(*
d©a
)

3100 
sh™n⁄_sb
 *
sb
;

3101 
sh™n⁄_dev
 *
dev
 = 
d©a
;

3102 
sh™n⁄_•ölock_t
 *
lock
;

3103 
ª£rved_blocks
;

3106 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

3111 #i‚de‡
CONFIG_SHANNON_PLVERIFY


3112 i‡(!
	`sh™n⁄_li°_em±y
(&
dev
->
waô_îa£d
)) {

3114 i‡(!
	`sh™n⁄_li°_em±y
(&
dev
->
waô_îa£d
Ë&& !(dev->
∂˘æ
 & 0x02)) {

3117 
ª£rved_blocks
 = 0;

3118 
	`sh™n⁄_©omic_ªad
(&
dev
->
ö_îa£_blk˙t
Ë&& !
	`sh™n⁄_kthªad_should_°›
())

3119 
	`sh™n⁄_m¶ìp
(3);

3120 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

3122 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_îa£d_lock
);

3123 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
dev
->
waô_îa£d
));

3124 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
dev
->
waô_îa£d
, 
sh™n⁄_sb
, 
li°
);

3126 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

3127 (
sb
->
√xt_sb
 =
dev
->
wr_sb
[
HOT_INDEX
]Ë|| ((dev->
u£_duÆ_hód
Ë&& (sb->√xt_sb =dev->wr_sb[
COLD_INDEX
])) || \

3128 (
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_≥riod_ªad
Ë!0Ë|| (sh™n⁄_©omic_ªad(&sb->
unföished_wrôes
) != 0)) {

3129 #i‚de‡
SHANNON_RELEASE


3130 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
unföished_wrôes
))

3131 
	`sh™n⁄_öfo
("%s(): sb->sb_index=%d, sb->state=%d, sb->unfinished_writes=%d.\n",

3132 
__func__
, 
sb
->
sb_ödex
, sb->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
unföished_wrôes
));

3134 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
dev
->
waô_îa£d
);

3135 
ª£rved_blocks
++;

3136 
	`BUG_ON
(
ª£rved_blocks
 > 
dev
->
waô_îa£d_blk˙t
);

3137 i‡(
ª£rved_blocks
 =
dev
->
waô_îa£d_blk˙t
) {

3138 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_îa£d_lock
);

3139 
ª˛aim
;

3141 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
dev
->
waô_îa£d
, 
sh™n⁄_sb
, 
li°
);

3142 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

3144 
dev
->
waô_îa£d_blk˙t
--;

3145 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_îa£d_lock
);

3146 
	`îa£_su≥r_block
(
dev
, 
sb
, 1, 1);

3147 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

3149 } !
	`sh™n⁄_li°_em±y
(&
dev
->
waô_îa£d
));

3152 
ª˛aim
:

3153 i‡((
dev
->
waô_c›y_blk˙t
 >
WAIT_COPY_BLKCNT_MAX
Ë&& !
	`sh™n⁄_kthªad_should_°›
()) {

3154 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

3155 i‡((
dev
->
waô_c›y_blk˙t
 >
WAIT_COPY_BLKCNT_MAX
Ë&& !
	`sh™n⁄_kthªad_should_°›
())

3156 
	`sh™n⁄_scheduÀ
();

3158 
	`__sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

3163 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

3166 i‡(
dev
->
gc_thªad_°©e
 =
IN_GC_STATE
) {

3167 i‡(
dev
->
‰ì_blk˙t
 > 
GC_THRESHOLD_N1H
) {

3168 
dev
->
gc_thªad_°©e
 = 
NO_RECLAIM
;

3171 
sb
 = 
	`gc_föd_vi˘im
(
dev
);

3172 i‡(
sb
 =
NULL
) {

3173 i‡(!
dev
->
•oﬁ
 || 
	`sh™n⁄_¥ötk_øãlimô
())

3174 
	`sh™n⁄_log
("%s: gc_föd_vi˘im(Ëªtu∫ NULL.\n", 
dev
->
sdisk
.
disk_«me
);

3175 
	`sh™n⁄_c⁄d_ªsched
();

3181 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

3182 if(
dev
->
‰ì_blk˙t
 > 
GC_THRESHOLD_N1L
 && !
	`sh™n⁄_kthªad_should_°›
()) {

3183 i‡(
dev
->
waô_îa£d_blk˙t
)

3184 
	`debugs3
("waô_îa£d_blk˙t=%d.\n", 
dev
->
waô_îa£d_blk˙t
);

3185 
	`sh™n⁄_scheduÀ
();

3187 i‡(
dev
->
gc_thªad_°©e
 !
IN_GC_STATE
) {

3188 
	`sh™n⁄_w¨n
("ImpossibÀ! fªe_blk˙t=%d.\n", 
dev
->
‰ì_blk˙t
);

3189 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
gc_°©e_lock
);

3190 
dev
->
gc_thªad_°©e
 = 
IN_GC_STATE
;

3191 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
gc_°©e_lock
);

3193 
	`__sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

3198 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

3199 
sb
->
°©e
) {

3200 
HOT_BLOCK_LIST
:

3201 
lock
 = &
dev
->
u£d_blocks_lock
[
HOT_INDEX
];

3203 
COLD_BLOCK_LIST
:

3204 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


3205 
	`BUG_ON
(!
dev
->
u£_duÆ_hód
);

3207 
lock
 = &
dev
->
u£d_blocks_lock
[
COLD_INDEX
];

3209 
ERROR_BLOCK
:

3210 
lock
 = &
dev
->
îr_blks_lock
;

3213 
√xt
;

3215 
	`sh™n⁄_•ö_lock_bh
(
lock
);

3216 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

3217 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
)

3218 
dev
->
u£d_blk˙t
[
HOT_INDEX
]--;

3219 i‡(
sb
->
°©e
 =
COLD_BLOCK_LIST
)

3220 
dev
->
u£d_blk˙t
[
COLD_INDEX
]--;

3221 i‡(
sb
->
°©e
 =
ERROR_BLOCK
) {

3222 
dev
->
îr_blk˙t
--;

3223 
	`check_îr_blk˙t_dec
(
dev
);

3225 
	`sh™n⁄_•ö_u∆ock_bh
(
lock
);

3226 i‡(
	`likñy
(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) > 0)) {

3227 
sb
->
°©e
 = 
WAIT_COPY_BLOCK
;

3228 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_c›y_lock
);

3229 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
dev
->
waô_c›y
);

3230 
dev
->
waô_c›y_blk˙t
++;

3231 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_c›y_lock
);

3233 
	`debugs2
("wêgŸá zîÿvÆid_∑ge†su≥∏block from hŸ/cﬁd_blocks_li°! sèã=%d.\n", 
sb
->
°©e
);

3234 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

3235 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_îa£d_lock
);

3236 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
dev
->
waô_îa£d
);

3237 
dev
->
waô_îa£d_blk˙t
++;

3238 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_îa£d_lock
);

3240 
√xt
:

3241 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3242 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

3244 
	`sh™n⁄_c⁄d_ªsched
();

3247 
	}
}

3249 
	$d©a_ªã¡i⁄_timî_èsk
(
sh™n⁄_timî_li°
 *
timî
)

3251 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
d©a_ªã¡i⁄_timî
);

3253 i‡(
sdev
->
sdisk
.
exô
)

3256 
	`sh™n⁄_£t_bô
(
DATA_RETENTION
, &
sdev
->
wl_ªas⁄
);

3257 
	`sh™n⁄_queue_w‹k
(
sdev
->
wl_wq
, &sdev->
wl_föd_sb_w‹k
);

3258 
	`sh™n⁄_mod_timî
(&
sdev
->
d©a_ªã¡i⁄_timî
, 
	`gë_jiffõs
(Ë+ sdev->
d©a_ªã¡i⁄_öãrvÆ
 * 
	`gë_HZ
());

3259 
	}
}

3261 
	$wl_timî_èsk
(
sh™n⁄_timî_li°
 *
timî
)

3263 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
wl_timî
);

3265 i‡(
sdev
->
sdisk
.
exô
)

3268 
	`sh™n⁄_£t_bô
(
READ_DISTURB
, &
sdev
->
wl_ªas⁄
);

3269 
	`sh™n⁄_£t_bô
(
ERASE_BALANCE
, &
sdev
->
wl_ªas⁄
);

3270 
	`sh™n⁄_£t_bô
(
ECC_FAILURE
, &
sdev
->
wl_ªas⁄
);

3271 
	`sh™n⁄_queue_w‹k
(
sdev
->
wl_wq
, &sdev->
wl_föd_sb_w‹k
);

3272 
	}
}

3274 
	#MAX_IRQ_DELAY
 (0xFF)

	)

3275 
	#MIN_IRQ_DELAY
 (0x01)

	)

3276 
	$upd©e_úq_dñay_timeout
(
sh™n⁄_timî_li°
 *
timî
)

3278 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
úq_dñay
.
upd©e_úq_dñay_timî
);

3280 i‡(
sdev
->
sdisk
.
exô
)

3283 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
úq_dñay
.
upd©e_úq_dñay_w‹k
);

3284 
	}
}

3286 
	$upd©e_úq_dñay_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3288 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
úq_dñay
.
upd©e_úq_dñay_w‹k
);

3289 sig√d 
cur_dñay
;

3290 
u32
 
misc_ªg
;

3291 
u64
 
cuºít_wrôe_ios
;

3292 
u64
 
cuºít_wrôe_m£cs
;

3293 
u64
 
cuºít_ªad_ios
;

3294 
u64
 
cuºít_ªad_m£cs
;

3295 
u32
 
ho°_wrôe_œãncy
 = 0;

3296 
u32
 
ho°_ªad_œãncy
 = 0;

3297 
úq_dñay_Á˘‹
 = 
sdev
->
úq_dñay
.
Á˘‹
;

3298 
max_úq_dñay
 = 
sdev
->
úq_dñay
.max_irq_delay;

3299 
mö_úq_dñay
 = 
sdev
->
úq_dñay
.min_irq_delay;

3300 
u32
 
wrôe_œãncy_divide
 = 
sdev
->
úq_dñay
.write_latency_divide;

3301 
u32
 
ªad_œãncy_divide
 = 
sdev
->
úq_dñay
.read_latency_divide;

3302 
u32
 
ªad_thªshﬁd_Á˘‹
 = 
sdev
->
úq_dñay
.read_threshold_factor;

3303 
u32
 
wrôe_thªshﬁd_Á˘‹
 = 
sdev
->
úq_dñay
.write_threshold_factor;

3304 
u64
 
ho°_wrôe_ios_œ°
 = 
sdev
->
úq_dñay
.host_write_ios_last;

3305 
u64
 
ho°_wrôe_m£cs_œ°
 = 
sdev
->
úq_dñay
.host_write_msecs_last;

3306 
u64
 
ho°_ªad_ios_œ°
 = 
sdev
->
úq_dñay
.host_read_ios_last;

3307 
u64
 
ho°_ªad_m£cs_œ°
 = 
sdev
->
úq_dñay
.host_read_msecs_last;

3309 i‡(
sdev
->
sdisk
.
exô
 || !
	`sh™n⁄_dev_is_g5
(sdev))

3312 
misc_ªg
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
globÆ_b¨
->
misc
);

3313 
cur_dñay
 = 
misc_ªg
 & 0xFF;

3315 
cuºít_wrôe_ios
 = 
	`sh™n⁄_have_wrôãn_ios
(
sdev
);

3316 
cuºít_wrôe_m£cs
 = 
	`sh™n⁄_have_wrôãn_m£cs
(
sdev
);

3317 
cuºít_ªad_ios
 = 
	`sh™n⁄_have_ªad_ios
(
sdev
);

3318 
cuºít_ªad_m£cs
 = 
	`sh™n⁄_have_ªad_m£cs
(
sdev
);

3319 i‡((
cuºít_wrôe_ios
 > 
ho°_wrôe_ios_œ°
) &&

3320 ((
cuºít_wrôe_ios
 - 
ho°_wrôe_ios_œ°
Ë> (
sdev
->
úq_dñay
.
upd©e_úq_dñay_öãrvÆ
 * 
wrôe_thªshﬁd_Á˘‹
)))

3321 
ho°_wrôe_œãncy
 = (
cuºít_wrôe_m£cs
 > 
ho°_wrôe_m£cs_œ°
) ?

3322 ((
cuºít_wrôe_m£cs
 - 
ho°_wrôe_m£cs_œ°
Ë* 1000 / (
cuºít_wrôe_ios
 - 
ho°_wrôe_ios_œ°
)) : 0;

3323 i‡((
cuºít_ªad_ios
 > 
ho°_ªad_ios_œ°
) &&

3324 ((
cuºít_ªad_ios
 - 
ho°_ªad_ios_œ°
Ë> (
sdev
->
úq_dñay
.
upd©e_úq_dñay_öãrvÆ
 * 
ªad_thªshﬁd_Á˘‹
)))

3325 
ho°_ªad_œãncy
 = (
cuºít_ªad_m£cs
 > 
ho°_ªad_m£cs_œ°
) ?

3326 ((
cuºít_ªad_m£cs
 - 
ho°_ªad_m£cs_œ°
Ë* 1000 / (
cuºít_ªad_ios
 - 
ho°_ªad_ios_œ°
)) : 0;

3328 i‡(
ho°_wrôe_œãncy
) {

3329 i‡((
cur_dñay
 + 
úq_dñay_Á˘‹
Ë<(
ho°_wrôe_œãncy
 / 
wrôe_œãncy_divide
))

3330 
cur_dñay
 +
úq_dñay_Á˘‹
;

3331 i‡((
cur_dñay
 - 
úq_dñay_Á˘‹
Ë> (
ho°_wrôe_œãncy
 / 
wrôe_œãncy_divide
))

3332 
cur_dñay
 -
úq_dñay_Á˘‹
;

3333 } i‡(
ho°_ªad_œãncy
) {

3334 i‡((
cur_dñay
 + 
úq_dñay_Á˘‹
Ë<(
ho°_ªad_œãncy
 / 
ªad_œãncy_divide
))

3335 
cur_dñay
 +
úq_dñay_Á˘‹
;

3336 i‡((
cur_dñay
 - 
úq_dñay_Á˘‹
Ë> (
ho°_ªad_œãncy
 / 
ªad_œãncy_divide
))

3337 
cur_dñay
 -
úq_dñay_Á˘‹
;

3339 
cur_dñay
 -
úq_dñay_Á˘‹
;

3341 i‡(!
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 || !
sh™n⁄_dy«mic_úq_dñay
)

3344 i‡(
cur_dñay
 > 
max_úq_dñay
)

3345 
cur_dñay
 = (
max_úq_dñay
 < 
MAX_IRQ_DELAY
 ? max_irq_delay : MAX_IRQ_DELAY);

3346 i‡(
cur_dñay
 < 
mö_úq_dñay
)

3347 
cur_dñay
 = (
mö_úq_dñay
 < 
MIN_IRQ_DELAY
 ? MIN_IRQ_DELAY : min_irq_delay);

3348 i‡(
cur_dñay
 =(
misc_ªg
 & 0xFF))

3349 
√xt
;

3350 
misc_ªg
 &= ~0xFF;

3351 
misc_ªg
 |
cur_dñay
 & 0xFF;

3352 
	`wrôe_ªg_ß„
(
sdev
, 
misc_ªg
, &sdev->
globÆ_b¨
->
misc
);

3353 
sdev
->
úq_dñay
.úq_dñay = 
cur_dñay
;

3355 
√xt
:

3356 
sdev
->
úq_dñay
.
ho°_wrôe_ios_œ°
 = 
cuºít_wrôe_ios
;

3357 
sdev
->
úq_dñay
.
ho°_wrôe_m£cs_œ°
 = 
cuºít_wrôe_m£cs
;

3358 
sdev
->
úq_dñay
.
ho°_ªad_ios_œ°
 = 
cuºít_ªad_ios
;

3359 
sdev
->
úq_dñay
.
ho°_ªad_m£cs_œ°
 = 
cuºít_ªad_m£cs
;

3360 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

3361 
	}
}

3363 
	$check_îa£d_°©e
(
sh™n⁄_sb
 *
sb
)

3365 
dñè
 = 
	`gë_jiffõs
(Ë- 
sb
->
œ°_îa£d_time°amp
;

3367 i‡(
sb
->
sdev
->
öô_d⁄e
 < 
STAGE_RECOVER_ACTIVE_DONE
)

3370 i‡(!
sb
->
sdev
->
mbr
.
max_kìp_îa£d_hours
)

3373 i‡(
sb
->
°©e
 =
IN_ERASING_BLOCK
)

3376 i‡((
dñè
 / 
	`gë_HZ
(Ë/ 3600Ë>
sb
->
sdev
->
mbr
.
max_kìp_îa£d_hours
) {

3377 
	`debugs1
("ª-îa£ sb=%d, kì∞öÉø£d f‹ %u sec⁄ds.\n", 
sb
->
sb_ödex
, 
dñè
 / 
	`gë_HZ
());

3378 
sb
->
ﬁd_°©e
 = sb->
°©e
;

3379 
sb
->
°©e
 = 
IN_ERASING_BLOCK
;

3380 
	`îa£_su≥r_block
(
sb
->
sdev
, sb, 0, 0);

3382 
	}
}

3384 
sh™n⁄_sb
 *
	$föd_d©a_ªã¡i⁄_sb
(
sh™n⁄_dev
 *
sdev
)

3386 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

3387 
mö_£q_num
 = 
MAX_SEQ_NUM
;

3388 
hód
;

3390 
hód
 = 0; hód < 
sdev
->
hód_cou¡
; head++) {

3391 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3392 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
u£d_blocks
[
hód
])) {

3393 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3396 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
u£d_blocks
[
hód
], 
sh™n⁄_sb
, 
li°
);

3397 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
) != 0) {

3398 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3401 i‡(
sb
->
£q_num
 < 
mö_£q_num
) {

3402 
mö_£q_num
 = 
sb
->
£q_num
;

3403 
vi˘im
 = 
sb
;

3405 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3407 i‡(
vi˘im
) {

3408 i‡(((
	`gë_jiffõs
(Ë- 
vi˘im
->
œ°_îa£d_time°amp
Ë/ 
	`gë_HZ
()Ë< 
DO_DATA_RETENTION_THRESHOLD
)

3409 
vi˘im
 = 
NULL
;

3411  
vi˘im
;

3412 
	}
}

3414 
	#MAX_WL_FACTOR
 (8)

	)

3415 
sh™n⁄_sb
 *
	$wl_föd_vi˘im
(
sh™n⁄_dev
 *
sdev
)

3417 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

3418 
mö_îa£_cou¡
 = 0xFFFF;

3419 
hód
, 
sˇÀ
, 
avîage_îa£_cou¡
;

3420 
îa£_cou¡_sˇÀ
;

3421 
≥_thªshﬁd
;

3423 
îa£_cou¡_sˇÀ
 = 
sdev
->
wl_îa£_cou¡_dñè
[0] - sdev->wl_erase_count_delta[1] + 1;

3424 i‡(
îa£_cou¡_sˇÀ
 < 1)

3425  
NULL
;

3427 
hód
 = 0; hód < 
sdev
->
hód_cou¡
; head++) {

3428 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3429 
	`sh™n⁄_li°_f‹_óch_íåy
(
sb
, &
sdev
->
u£d_blocks
[
hód
], 
li°
) {

3430 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
) != 0)

3432 i‡((
sdev
->
£quí˚_numbî
 - 
sb
->
£q_num
Ë> (sdev->
sb_cou¡
 / 4)) {

3433 i‡(
sb
->
îa£_cou¡î
 < 
mö_îa£_cou¡
) {

3434 
mö_îa£_cou¡
 = 
sb
->
îa£_cou¡î
;

3435 
vi˘im
 = 
sb
;

3439 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3441 i‡(
vi˘im
 =
NULL
)

3442  
NULL
;

3443 
avîage_îa£_cou¡
 = 
sdev
->
tŸÆ_îa£_cou¡
/sdev->
sb_cou¡
;

3444 
sˇÀ
 = (
avîage_îa£_cou¡
 * 
îa£_cou¡_sˇÀ
)/
sdev
->
wl_max_îa£_cou¡
;

3445 i‡(
sˇÀ
 > (
îa£_cou¡_sˇÀ
 - 1))

3446 
sˇÀ
 = 
îa£_cou¡_sˇÀ
 - 1;

3447 
≥_thªshﬁd
 = 
sdev
->
wl_îa£_cou¡_dñè
[0] - 
sˇÀ
;

3448 i‡((
sdev
->
max_îa£_cou¡
 - 
mö_îa£_cou¡
Ë> 
≥_thªshﬁd
) {

3449 
dñè
, 
Á˘‹
;

3454 
dñè
 = 
≥_thªshﬁd
/10;

3455 i‡(
dñè
 == 0)

3456 
dñè
 = 1;

3457 
Á˘‹
 = (
sdev
->
max_îa£_cou¡
 - 
mö_îa£_cou¡
 - 
≥_thªshﬁd
)/
dñè
;

3458 i‡(
Á˘‹
 > 
MAX_WL_FACTOR
)

3459 
Á˘‹
 = 
MAX_WL_FACTOR
;

3460 
sdev
->
cuºít_max_ö_wl_logicbs
 = sdev->
max_ö_wl_logicbs
 * (1UL << 
Á˘‹
);

3461 i‡(
wl_debug
)

3462 
	`debugs0
("sb=%d, max_erase_count=%d, min_erase_count=%d, factor=%d.\n",

3463 
vi˘im
->
sb_ödex
, 
sdev
->
max_îa£_cou¡
, 
mö_îa£_cou¡
, 
Á˘‹
);

3464  
vi˘im
;

3466  
NULL
;

3467 
	}
}

3469 
sh™n⁄_sb
 *
	$ªad_di°urb_föd_vi˘im
(
sh™n⁄_dev
 *
sdev
)

3471 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

3472 
u32
 
max_ªad_cou¡
 = 0;

3473 
hód
;

3475 
hód
 = 0; hód < 
sdev
->
hód_cou¡
; head++) {

3476 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3477 
	`sh™n⁄_li°_f‹_óch_íåy
(
sb
, &
sdev
->
u£d_blocks
[
hód
], 
li°
) {

3478 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
) != 0)

3480 i‡(
sb
->
max_ªad_cou¡
 > 
sdev
->
ªad_di°urb_thªshﬁd
) {

3481 i‡(
sb
->
max_ªad_cou¡
 > max_read_count) {

3482 
max_ªad_cou¡
 = 
sb
->max_read_count;

3483 
vi˘im
 = 
sb
;

3487 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3489  
vi˘im
;

3490 
	}
}

3492 
sh™n⁄_sb
 *
	$föd_ecc_Áûuª_sb
(
sh™n⁄_dev
 *
sdev
)

3494 
sh™n⁄_sb
 *
sb
, *
vi˘im
 = 
NULL
;

3495 
hód
, 
i
, 
tŸÆ_ecc_Áûuª_times
, 
tŸÆ_ªad_cou¡
;

3496 
ecc_Áûuª_øã
, 
max_ecc_Áûuª_øã
 = 0;

3497 
vi˘im_ecc_Áûuª_times
 = 0, 
vi˘im_ªad_cou¡
 = 0;

3499 
hód
 = 0; hód < 
sdev
->
hód_cou¡
; head++) {

3500 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3501 
	`sh™n⁄_li°_f‹_óch_íåy
(
sb
, &
sdev
->
u£d_blocks
[
hód
], 
li°
) {

3502 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_wrôe_logicbs
) != 0)

3504 
tŸÆ_ecc_Áûuª_times
 = 0;

3505 
tŸÆ_ªad_cou¡
 = 0;

3506 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

3507 
tŸÆ_ecc_Áûuª_times
 +
sb
->
ecc_Áûuª_times
[
i
];

3508 
tŸÆ_ªad_cou¡
 +
sb
->
ªad_cou¡
[
i
];

3510 i‡(
tŸÆ_ªad_cou¡
 > 1000)

3511 
ecc_Áûuª_øã
 = (
tŸÆ_ecc_Áûuª_times
 * 100)/
tŸÆ_ªad_cou¡
;

3513 
ecc_Áûuª_øã
 = 0;

3514 i‡((
ecc_Áûuª_øã
 >
sdev
->
ecc_Áûuª_øã_thªshﬁd
) && \

3515 (
ecc_Áûuª_øã
 > 
max_ecc_Áûuª_øã
)) {

3516 
max_ecc_Áûuª_øã
 = 
ecc_Áûuª_øã
;

3517 
vi˘im_ecc_Áûuª_times
 = 
tŸÆ_ecc_Áûuª_times
;

3518 
vi˘im_ªad_cou¡
 = 
tŸÆ_ªad_cou¡
;

3519 
vi˘im
 = 
sb
;

3522 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód
]);

3525 i‡(
wl_debug
) {

3526 i‡(
vi˘im
)

3527 
	`debugs0
("sb=%d, state=%d, seq_num=%d,Åotal_ecc_failure_times=%d,Åotal_read_count=%d.\n",

3528 
vi˘im
->
sb_ödex
, vi˘im->
°©e
, vi˘im->
£q_num
,

3529 
vi˘im_ecc_Áûuª_times
, 
vi˘im_ªad_cou¡
);

3531 
	`debugs0
("findÇothing.\n");

3534  
vi˘im
;

3535 
	}
}

3537 
	$sh™n⁄_wl_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3539 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
wl_föd_sb_w‹k
);

3540 
sh™n⁄_sb
 *
sb
 = 
NULL
;

3541 
sh™n⁄_•ölock_t
 *
lock
;

3542 
i
;

3544 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
 || sdev->
°›_Æl
 || sdev->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

3547 
i
 = 0; i < 
TOTAL_REASON
; i++) {

3548 
sdev
->
√xt_wl_ªas⁄
 = (sdev->√xt_wl_ªas⁄ + 1Ë% 
TOTAL_REASON
;

3549 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô
(
sdev
->
√xt_wl_ªas⁄
, &sdev->
wl_ªas⁄
)) {

3550 
sdev
->
√xt_wl_ªas⁄
) {

3551 
DATA_RETENTION
:

3552 
sb
 = 
	`föd_d©a_ªã¡i⁄_sb
(
sdev
);

3553 i‡(
sb
)

3554 
sdev
->
d©a_ªã¡i⁄_sbs
++;

3555 i‡(
wl_debug
) {

3556 i‡(
sb
)

3557 
	`debugs0
("föd d©®ªãsi⁄ sb=%d.\n", 
sb
->
sb_ödex
);

3559 
	`debugs0
("find_data_retention_sbÑeturn NULL.\n");

3562 
READ_DISTURB
:

3563 
sb
 = 
	`ªad_di°urb_föd_vi˘im
(
sdev
);

3564 i‡(
sb
)

3565 
sdev
->
ªad_di°urb_sbs
++;

3566 i‡(
wl_debug
) {

3567 i‡(
sb
)

3568 
	`debugs0
("findÑead_disturb sb=%d, max_read_count=%u.\n",

3569 
sb
->
sb_ödex
, sb->
max_ªad_cou¡
);

3571 
	`debugs0
("findÑead_disturbÑeturn NULL.\n");

3574 
ERASE_BALANCE
:

3575 
sb
 = 
	`wl_föd_vi˘im
(
sdev
);

3576 i‡(
sb
)

3577 
sdev
->
îa£_bÆ™˚_sbs
++;

3578 i‡(
wl_debug
) {

3579 i‡(
sb
)

3580 
	`debugs0
("wl_föd_vi˘imÑëu∫ sb=%d.\n", 
sb
->
sb_ödex
);

3582 
	`debugs0
("wl_find_victimÑeturn NULL.\n");

3585 
ECC_FAILURE
:

3586 
sb
 = 
	`föd_ecc_Áûuª_sb
(
sdev
);

3587 i‡(
sb
)

3588 
sdev
->
ecc_Áûuª_sbs
++;

3589 i‡(
wl_debug
) {

3590 i‡(
sb
)

3591 
	`debugs0
("föd_ecc_Áûuª_sbÑëu∫ sb=%d.\n", 
sb
->
sb_ödex
);

3593 
	`debugs0
("find_ecc_failure_sbÑeturn NULL.\n");

3597 
	`sh™n⁄_w¨n
("unknow¿ªas⁄=%d.\n", 
sdev
->
√xt_wl_ªas⁄
);

3600 i‡(
sb
)

3604 i‡(
sb
) {

3605 
	`debugs1
("sb->ödex=%d, sèã=%d.\n", 
sb
->
sb_ödex
, sb->
°©e
);

3606 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

3607 
sb
->
°©e
) {

3608 
HOT_BLOCK_LIST
:

3609 
lock
 = &
sdev
->
u£d_blocks_lock
[
HOT_INDEX
];

3611 
COLD_BLOCK_LIST
:

3612 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


3613 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

3615 
lock
 = &
sdev
->
u£d_blocks_lock
[
COLD_INDEX
];

3617 
ERROR_BLOCK
:

3618 
lock
 = &
sdev
->
îr_blks_lock
;

3621 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3622 
	`sh™n⁄_w¨n
("unknow¿°©e: sb=%d, sèã=%d.\n", 
sb
->
sb_ödex
, sb->
°©e
);

3625 
	`sh™n⁄_•ö_lock_bh
(
lock
);

3626 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

3627 i‡(
sb
->
°©e
 =
HOT_BLOCK_LIST
)

3628 
sdev
->
u£d_blk˙t
[
HOT_INDEX
]--;

3629 i‡(
sb
->
°©e
 =
COLD_BLOCK_LIST
)

3630 
sdev
->
u£d_blk˙t
[
COLD_INDEX
]--;

3631 i‡(
sb
->
°©e
 =
ERROR_BLOCK
) {

3632 
sdev
->
îr_blk˙t
--;

3633 
	`check_îr_blk˙t_dec
(
sdev
);

3635 
	`sh™n⁄_•ö_u∆ock_bh
(
lock
);

3637 i‡(
	`likñy
(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) > 0)) {

3638 
	`sh™n⁄_£t_bô
(
WL_SB_SHIFT
, &
sb
->
ª˛aim_köd
);

3639 
sb
->
°©e
 = 
WAIT_WL_BLOCK
;

3640 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_wl_lock
);

3641 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_wl_li°
);

3642 
sdev
->
waô_wl_blk˙t
++;

3643 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_wl_lock
);

3645 
	`debugs2
("wêgŸá zîÿvÆid_∑ge†su≥∏block from hŸ/cﬁd_blocks_li°! sèã=%d.\n", 
sb
->
°©e
);

3646 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

3647 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_îa£d_lock
);

3648 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_îa£d
);

3649 
sdev
->
waô_îa£d_blk˙t
++;

3650 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_îa£d_lock
);

3652 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3655 i‡(
sdev
->
wl_this_sb
 =
NULL
) {

3656 
sb
 = 
	`gë_waô_wl_sb
(
sdev
);

3657 i‡(
sb
) {

3658 
sdev
->
wl_this_sb
 = 
sb
;

3659 i‡(
wl_debug
)

3660 
	`debugs0
("gë waô_w»sb=%d.\n", 
sb
->
sb_ödex
);

3662 i‡(
wl_debug
)

3663 
	`debugs0
("get_wait_wl_sbÑeturn NULL.\n");

3667 i‡(
sdev
->
wl_this_sb
) {

3668 
	`sh™n⁄_queue_w‹k
(
sdev
->
wl_wq
, &sdev->
wl_ªad_w‹k
);

3670 
	`sh™n⁄_mod_timî
(&
sdev
->
wl_timî
, 
	`gë_jiffõs
(Ë+ sdev->
wl_timî_öãrvÆ
 * 
	`gë_HZ
());

3671 
	}
}

3673 
	$sh™n⁄_wl_ªad_chunk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
lun
, 
∑ge_°rùe
)

3675 
∂™e
, 
i
;

3676 
u64
 
lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
 + 
∑ge_°rùe
 * sdev->
logicbs_ö_∑ge
;

3677 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

3678 
avaûabÀ_logicbs
 = 0;

3680 
	`debugs1
("sb=%d,Öage_°rùe=%d,Üun=%d.\n", 
sb
->
sb_ödex
, 
∑ge_°rùe
, 
lun
);

3681 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

3682 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

3683 i‡(!
	`pba_is_övÆid
(
sdev
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
)) {

3684 
	`gc_ªad_logicb
(
sb
, 
lun
, 
lun_pba
 + 
i
 + 
∂™e
 * 
logicbs_ö_eblk
, 1);

3685 
avaûabÀ_logicbs
++;

3689 i‡(
avaûabÀ_logicbs
) {

3690 
	`lun£t_pick_ªque°
(
sdev
->
lun
[lun]->
lun£t
, sdev->
logicbs_ö_chunk
);

3692  
avaûabÀ_logicbs
;

3693 
	}
}

3695 
	$sh™n⁄_wl_ªad_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3697 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
wl_ªad_w‹k
);

3698 
sh™n⁄_sb
 *
sb
 = 
sdev
->
wl_this_sb
;

3699 
∑ge_°rùe
, 
group
, 
lun
, 
lun_off£t
;

3700 
ªad_logicbs
;

3702 i‡(
sb
 =
NULL
)

3705 
∑ge_°rùe
 = 0;Öage_°rùê< 
sdev
->
∑ges_ö_eblock
;Öage_stripe++) {

3706 
group
 = 0; grou∞< 
sdev
->
∑rôy_groups
; group++) {

3707 i‡(
sb
->
sub_group
[
group
].
phy_ödex
 < 0)

3709 
lun_off£t
 = 
sb
->
sub_group
[
group
].
∑rôy_lun_off£t
;

3711 i‡(
sb
->
°©e
 !
IN_WL_BLOCK
)

3712 
out
;

3714 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

3715 
lun
 = 
sb
->
sub_group
[
group
].
°¨t_lun
 + 
lun_off£t
;

3716 } 
	`is_bad_lun
(
sb
, 
lun
));

3717 
ªad_logicbs
 = 
	`sh™n⁄_wl_ªad_chunk
(
sdev
, 
sb
, 
lun
, 
∑ge_°rùe
);

3718 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
 || sdev->
°›_Æl
 || sdev->
∂ug_out
 || \

3719 (
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
))) {

3720 i‡(
wl_debug
)

3721 
	`debugs0
("stop wearÜeveling sb=%d becauseÉxit=%d or stop_all=%d orÖlug_out=%d or state=%d.\n",

3722 
sb
->
sb_ödex
, 
sdev
->
sdisk
.
exô
, sdev->
°›_Æl
, sdev->
∂ug_out
, sdev->
°©e
);

3725 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_wl_logicbs
Ë> sdev->
cuºít_max_ö_wl_logicbs
)

3726 
	`sh™n⁄_m¶ìp
(1);

3727 } 
lun_off£t
 !
sb
->
sub_group
[
group
].
œ°_d©a_lun_off£t
);

3730 
out
:

3731 i‡(
wl_debug
)

3732 
	`debugs0
("föishÑe˛aim wl_sb=%d.\n", 
sb
->
sb_ödex
);

3733 
sdev
->
wl_this_sb
 = 
NULL
;

3734 
sdev
->
wl_sbs
++;

3737 
	`sh™n⁄_£t_bô
(
READ_DISTURB
, &
sdev
->
wl_ªas⁄
);

3738 
	`sh™n⁄_£t_bô
(
ERASE_BALANCE
, &
sdev
->
wl_ªas⁄
);

3739 
	`sh™n⁄_£t_bô
(
ECC_FAILURE
, &
sdev
->
wl_ªas⁄
);

3740 
	`sh™n⁄_queue_w‹k
(
sdev
->
wl_wq
, &sdev->
wl_föd_sb_w‹k
);

3741 
	}
}

3743 
sh™n⁄_sb
 *
	$îr_föd_vi˘im
(
sh™n⁄_dev
 *
sdev
)

3745 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
p
;

3746 
övÆid_logicbs
, 
max_övÆid_logicbs
 = -1;

3747 
ªåõs
 = 0;

3749 
ªåy
:

3750 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

3751 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
îr_blks
)) {

3752 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

3753  
NULL
;

3756 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdev
->
îr_blks
, 
li°
) {

3757 i‡(
	`sh™n⁄_©omic_ªad
(&
p
->
ö_wrôe_logicbs
) != 0) {

3758 i‡(!
sdev
->
•oﬁ
 || 
	`sh™n⁄_¥ötk_øãlimô
())

3759 
	`sh™n⁄_w¨n
("sb=%d, state=%d, in_write_logicbs=%d.\n",

3760 
p
->
sb_ödex
,Ö->
°©e
, 
	`sh™n⁄_©omic_ªad
(&p->
ö_wrôe_logicbs
));

3763 
övÆid_logicbs
 = 
p
->
mö_d©a_luns
 * 
sdev
->
max_avaûabÀ_groups
 * sdev->
logicbs_ö_siblög_eblock
 - 
	`sh™n⁄_©omic_ªad
(&p->
vÆid_∑ges
);

3764 i‡(
övÆid_logicbs
 > 
max_övÆid_logicbs
) {

3765 
max_övÆid_logicbs
 = 
övÆid_logicbs
;

3766 
sb
 = 
p
;

3769 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

3771 i‡(
sb
 =
NULL
) {

3772 i‡(!
sdev
->
•oﬁ
 || 
	`sh™n⁄_¥ötk_øãlimô
())

3773 
	`sh™n⁄_w¨n
("%s: sb i†NULL,Ñërõs=%d!\n", 
sdev
->
sdisk
.
disk_«me
, 
ªåõs
);

3774 
	`sh™n⁄_m¶ìp
(20);

3775 
ªåõs
++;

3776 i‡(
ªåõs
 < 300)

3777 
ªåy
;

3779  
NULL
;

3782 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

3783 i‡(
sb
->
°©e
 !
ERROR_BLOCK
) {

3784 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3785 
	`sh™n⁄_log
("%s: sb=%d, sèã=%d,Ñërõs=%d!\n", 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, sb->
°©e
, 
ªåõs
);

3786 
	`sh™n⁄_m¶ìp
(20);

3787 
ªåõs
++;

3788 i‡(
ªåõs
 < 300)

3789 
ªåy
;

3791  
NULL
;

3794 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

3795 
sdev
->
îr_blk˙t
--;

3796 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

3797 
sb
->
°©e
 = 
IN_RECOVER_BLOCK
;

3798 
	`check_îr_blk˙t_dec
(
sdev
);

3799 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

3800 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

3802  
sb
;

3803 
	}
}

3805 
	#ERR_RECOVER_INTERVAL
 10

	)

3806 
	#ERR_RECOVER_FREQUENCY
 (1000/
ERR_RECOVER_INTERVAL
)

	)

3807 
	$ªcovî_thªad_‚
(*
d©a
)

3809 
sh™n⁄_dev
 *
sdev
 = 
d©a
;

3810 
submô_ªqs
;

3811 
À·
 = 0;

3812 
ªcovî_cou¡
;

3813 
jiffõs_°¨t
, 
jiffõs_dñè
;

3814 
m£c_ñ≠£d
;

3817 i‡(
	`sh™n⁄_kthªad_should_°›
())

3820 i‡(!(
sdev
->
îr_blk˙t
 || sdev->
this_îr_sb
Ë&& !
	`sh™n⁄_kthªad_should_°›
()) {

3821 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

3822 i‡(!(
sdev
->
îr_blk˙t
 || sdev->
this_îr_sb
Ë&& !
	`sh™n⁄_kthªad_should_°›
())

3823 
	`sh™n⁄_scheduÀ
();

3825 
	`__sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

3829 i‡((
sdev
->
this_îr_sb
 =
NULL
Ë|| (sdev->this_îr_sb->
°©e
 !
IN_RECOVER_BLOCK
)) {

3830 i‡(
sdev
->
îr_blk˙t
 == 0) {

3831 
sdev
->
this_îr_sb
 = 
NULL
;

3832 
sdev
->
this_îr_sb_ödex
 = ~0;

3835 
sdev
->
this_îr_sb
 = 
	`îr_föd_vi˘im
(sdev);

3836 i‡(
sdev
->
this_îr_sb
 =
NULL
) {

3837 i‡(!
sdev
->
•oﬁ
 || 
	`sh™n⁄_¥ötk_øãlimô
())

3838 
	`sh™n⁄_w¨n
("ImpossibÀ!Éº_blk˙t=%d.\n", 
sdev
->
îr_blk˙t
);

3839 
sdev
->
this_îr_sb_ödex
 = ~0;

3842 
sdev
->
this_îr_sb_ödex
 = sdev->
this_îr_sb
->
sb_ödex
;

3843 
sdev
->
this_îr_°rùe
 = 0;

3846 
	`debugs1
("%s: in_gc_logicbs=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
	`sh™n⁄_©omic_ªad
(&sdev->
ö_gc_logicbs
));

3847 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
Ë> 
MAX_LOGICB_BUF_COUNT
/2) {

3848 
submô_ªqs
 = 0;

3849 
	`sh™n⁄_m¶ìp
(1);

3853 
ªcovî_cou¡
 = (
sdev
->
ªcovî_øã
 * 1024 / 4Ë/ 
ERR_RECOVER_FREQUENCY
;

3854 
À·
 +
ªcovî_cou¡
;

3855 
jiffõs_°¨t
 = ()
	`gë_jiffõs
();

3856 
À·
 > 0) {

3857 
submô_ªqs
 = 
	`c›y_∑ge_°rùe
(
sdev
, sdev->
this_îr_sb
, sdev->
this_îr_°rùe
, 
IN_RECOVER_BLOCK
);

3858 
	`debugs2
("%s: submô_ªqs=%d,Åime=%ld.\n", 
sdev
->
sdisk
.
disk_«me
, 
submô_ªqs
, ()
	`gë_jiffõs
(Ë- 
jiffõs_°¨t
);

3859 
sdev
->
this_îr_°rùe
++;

3860 
À·
 -
submô_ªqs
;

3861 i‡(
sdev
->
this_îr_°rùe
 =sdev->
∑ges_ö_eblock
) {

3862 
sdev
->
îr_ªcovîed_sbs
++;

3863 
sdev
->
this_îr_sb
 = 
	`îr_föd_vi˘im
(sdev);

3864 
sdev
->
this_îr_°rùe
 = 0;

3866 i‡(
sdev
->
this_îr_sb
) {

3867 
sdev
->
this_îr_sb_ödex
 = sdev->
this_îr_sb
->
sb_ödex
;

3868 
	`debugs1
("this_îr_sb=%d,this_îr_°rùe=%d.\n", 
sdev
->
this_îr_sb
->
sb_ödex
, sdev->
this_îr_°rùe
);

3870 
sdev
->
this_îr_sb_ödex
 = ~0;

3871 
	`debugs1
("this_err_sb is NULL.\n");

3876 i‡(
À·
 <= 0) {

3877 
jiffõs_dñè
 = ()
	`gë_jiffõs
(Ë- 
jiffõs_°¨t
;

3878 
m£c_ñ≠£d
 = 
	`sh™n⁄_jiffõs_to_m£cs
(
jiffõs_dñè
);

3879 
	`debugs2
("m£c_ñ≠£d=%ld,Üe·=%d\n", 
m£c_ñ≠£d
, 
À·
);

3880 i‡(
m£c_ñ≠£d
 < 
ERR_RECOVER_INTERVAL
)

3881 
	`sh™n⁄_m¶ìp
(
ERR_RECOVER_INTERVAL
 - 
m£c_ñ≠£d
);

3883 
	`sh™n⁄_c⁄d_ªsched
();

3885 
	`debug_¥öt
("exit.\n");

3887 
	}
}

3889 
	#DYNAMIC_BBT_SIZE
 16384

	)

3890 
ªad_dy«mic_bbt
(
sh™n⁄_lun
 *
lun
, 
eblk
);

3891 
	$ªad_dy«mic_bbt_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

3893 
sh™n⁄_lun
 *
lun
 = (sh™n⁄_lu¿*)
sbio
->
d©a
;

3894 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

3895 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

3896 
eblk
;

3897 
u16
 *
±r
;

3899 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, 
DYNAMIC_BBT_SIZE
, 
SHANNON_DMA_FROMDEVICE
);

3900 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

3901 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

3903 i‡(
sbio
->
°©us
 & 
HAVE_ERROR_SECTOR
) {

3904 i‡(
eblk
 =(
sdev
->
mbr_eblocks
 - 1)) {

3905 
	`sh™n⁄_w¨n
("îr‹Öage:Üun=%d,Üun_pba=%d,Écc=0x%x.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
);

3906 
	`£t_√w_bad_lun
(
sdev
, 
lun
);

3907 
	`£t_ªcovî_°©e_w¨nög
(
sdev
);

3908 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

3909 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

3912 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

3913 
sbio
->
°©us
 = 0;

3914 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

3915 
ªq
->
_ecc
 = 0;

3916 
ªq
->
ªªad
 = 0;

3917 
ªq
->
›code
 = 
sh_cmd_ªad
;

3918 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

3919 
ªq
->
pba
.
lun_pba
 +
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

3920 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

3922 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

3925 } i‡(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
) {

3926 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

3927 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

3928 } i‡(
ªq
->
_mëad©a
 =
POOL_INFO_METADATA
) {

3929 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

3930 
	`ªcovî_poﬁ_öfo
(
•oﬁ
, 
sbio
->
vút_addr
);

3931 
	`sh™n⁄_©omic_öc
(&
lun
->
√xt_em±y_∑ge
);

3932 i‡(
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
Ë=
sdev
->
∑ges_ö_eblock
) {

3933 
	`sh™n⁄_îr
("Error: Never get here!\n");

3935 
ªt
 = 
	`ªad_dy«mic_bbt
(
lun
, 
eblk
);

3936 i‡(
ªt
) {

3937 
	`£t_ªcovî_°©e_dód
(
sdev
);

3938 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

3939 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

3943 
±r
 = 
sbio
->
vút_addr
;

3944 i‡(
	`bbt_usög_bôm≠
(
lun
->
bbt
, 
sdev
)) {

3945 
	`sh™n⁄_£t_bô_À
(
	`sh™n⁄_mem_ªadw
(
±r
Ë+ 64, 
lun
->
bbt
);

3946 
lun
->
bad_blk_cou¡
++;

3948 
lun
->
bbt
[lun->
bad_blk_cou¡
++] = 
	`sh™n⁄_mem_ªadw
(
±r
);

3949 
lun
->
bbt
[lun->
bad_blk_cou¡
] = 0xFFFF;

3951 
	`sh™n⁄_©omic_öc
(&
sdev
->
dy«mic_bad_blk˙t
);

3952 
	`sh™n⁄_©omic_öc
(&
lun
->
dy«mic_bad_blk˙t
);

3953 
	`sh™n⁄_©omic_öc
(&
lun
->
√xt_em±y_∑ge
);

3954 i‡(
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
Ë=
sdev
->
∑ges_ö_eblock
) {

3955 
	`£t_fuŒ_dy«mic_bad_blocks
(
sdev
, 
lun
);

3956 
	`£t_ªcovî_°©e_w¨nög
(
sdev
);

3957 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

3958 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

3959 } i‡((
	`sh™n⁄_mem_ªadw
(
±r
) == 0xFFFF) || \

3960 (
lun
->
bad_blk_cou¡
 > 
sdev
->
eblocks_ö_lun
) || \

3961 ((!
	`bbt_usög_bôm≠
(
lun
->
bbt
, 
sdev
)Ë&& (lun->
bad_blk_cou¡
 > 
LUN_BBT_SIZE
 / 2 - 1)) || \

3962 
	`ªad_dy«mic_bbt
(
lun
, 
eblk
) != 0) {

3963 
	`£t_ªcovî_°©e_dód
(
sdev
);

3964 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

3965 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

3969 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

3970 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

3971 
	`‰ì_ªq
(
ªq
);

3973 
	`sh™n⁄_k‰ì
(
sbio
->
vút_addr
);

3974 
	`‰ì_sbio
(
sbio
);

3975 
	}
}

3977 
	$ªad_dy«mic_bbt
(
sh™n⁄_lun
 *
lun
, 
eblk
)

3979 
sh™n⁄_bio
 *
sbio
;

3980 
sh™n⁄_ªque°
 *
ªq
;

3981 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

3982 
i
, 
logicbs
;

3984 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

3985 
	`£t_sbio_debug_èg
(
sbio
, 
READ_BBT_TAG
);

3986 
sbio
->
vút_addr
 = 
	`sh™n⁄_kmÆloc
(
DYNAMIC_BBT_SIZE
, 
GFP_SHANNON
);

3987 i‡(
sbio
->
vút_addr
 =
NULL
) {

3988 
	`‰ì_sbio
(
sbio
);

3991 
sbio
->
logicbs
 = 
DYNAMIC_BBT_SIZE
/
sdev
->
logicb_size
;

3992 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

3993 
sbio
->
ˇŒback
 = 
ªad_dy«mic_bbt_ˇŒback
;

3994 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

3995 
sbio
->
d©a
 = 
lun
;

3996 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, 
DYNAMIC_BBT_SIZE
, 
SHANNON_DMA_FROMDEVICE
);

3997 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

3998 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

3999 
	`BUG
();

4002 
logicbs
 = 
sbio
->logicbs;

4003 
i
 = 0; i < 
logicbs
; i++) {

4004 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

4005 
	`BUG_ON
(
ªq
 =
NULL
);

4006 
	`£t_ªq_debug_èg
(
ªq
, 
READ_BBT_TAG
, 0);

4007 
ªq
->
›code
 = 
sh_cmd_ªad
;

4008 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

4009 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

4010 
ªq
->
vút_addr
 = 
sbio
->vút_add∏+ 
sdev
->
logicb_size
 * 
i
;

4011 
ªq
->
dma_addªss
 = 
sbio
->dma_addªs†+ 
sdev
->
logicb_size
 * 
i
;

4012 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

4013 
ªq
->
pba
.
lun_pba
 = 
eblk
 * 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
 + 
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
Ë* sdev->logicbs_ö_∑gê+ 
i
;

4014 
ªq
->
sbio
 = sbio;

4015 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4016 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4017 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

4020 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4022 
	}
}

4024 
	$ªad_°©ic_bbt_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

4026 
sh™n⁄_lun
 *
lun
 = (sh™n⁄_lu¿*)
sbio
->
d©a
;

4027 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

4028 
sh™n⁄_ªque°
 *
ªq
;

4029 
eblk
;

4030 
u16
 *
±r
;

4032 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

4033 i‡(
sbio
->
°©us
) {

4035 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

4036 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

4037 i‡(
eblk
 =(
sdev
->
mbr_eblocks
 - 1)) {

4038 
	`sh™n⁄_w¨n
("bœnk o∏îr‹Öage:Üun=%d,Üun_pba=%d,Écc=0x%x.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
);

4040 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
«nd_∑ge_size
, 
SHANNON_DMA_FROMDEVICE
);

4042 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

4043 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

4044 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4045 
	`‰ì_ªq
(
ªq
);

4048 
	`‰ì_sbio
(
sbio
);

4050 
	`£t_√w_bad_lun
(
sdev
, 
lun
);

4051 
	`£t_ªcovî_°©e_w¨nög
(
sdev
);

4053 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

4054 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

4056 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

4057 
sbio
->
°©us
 = 0;

4059 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4060 
ªq
->
_ecc
 = 0;

4061 
ªq
->
ªªad
 = 0;

4062 
ªq
->
›code
 = 
sh_cmd_ªad
;

4063 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

4064 
ªq
->
pba
.
lun_pba
 +
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

4065 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

4067 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4070 
eblk
 = 0;

4071 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, 
LUN_BBT_SIZE
, 
SHANNON_DMA_FROMDEVICE
);

4072 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

4073 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

4074 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4075 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

4076 
	`‰ì_ªq
(
ªq
);

4079 
	`‰ì_sbio
(
sbio
);

4081 
lun
->
bad_blk_cou¡
 = 0;

4082 
±r
 = 
lun
->
bbt
;

4083 i‡(
	`sh™n⁄_mem_ªadq
(
±r
Ë=
BBT_BITMAP_WATERMARK
) {

4084 
lun
->
bad_blk_cou¡
 = 
	`__sh™n⁄_bôm≠_weight
((
u64
 *)
±r
 + 1, 
LUN_BBT_SIZE
 * 8 - 64);

4086 
	`sh™n⁄_mem_ªadw
(
±r
) != 0xFFFF) {

4087 
±r
++;

4088 
lun
->
bad_blk_cou¡
 = 
±r
 -Üun->
bbt
;

4089 i‡(
lun
->
bad_blk_cou¡
 >
LUN_BBT_SIZE
/(
u16
)) {

4090 
	`sh™n⁄_îr
("too many bad blocks,Üun=%d, bad_blk_count=%d, sb_count=%d\n",

4091 
lun
->
lun_num
,Üun->
bad_blk_cou¡
, 
sdev
->
sb_cou¡
);

4092 
	`£t_ªcovî_°©e_dód
(
sdev
);

4097 
	`sh™n⁄_©omic_add
(
lun
->
bad_blk_cou¡
, &
sdev
->
°©ic_bad_blk˙t
);

4098 
	`sh™n⁄_©omic_£t
(&
lun
->
√xt_em±y_∑ge
, 2);

4099 i‡((
lun
->
bad_blk_cou¡
 > 
sdev
->
eblocks_ö_lun
) || \

4100 
	`ªad_dy«mic_bbt
(
lun
, 
eblk
) != 0) {

4102 
	`£t_√w_bad_lun
(
sdev
, 
lun
);

4103 
	`£t_ªcovî_°©e_w¨nög
(
sdev
);

4105 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

4106 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

4109 
	}
}

4111 
	$ªad_°©ic_bbt
(
sh™n⁄_lun
 *
lun
)

4113 
sh™n⁄_bio
 *
sbio
;

4114 
sh™n⁄_ªque°
 *
ªq
;

4115 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

4116 
i
, 
logicbs
;

4118 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

4119 
	`£t_sbio_debug_èg
(
sbio
, 
READ_BBT_TAG
);

4120 
sbio
->
vút_addr
 = 
lun
->
bbt
;

4121 
sbio
->
logicbs
 = 
LUN_BBT_SIZE
/
sdev
->
logicb_size
;

4122 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

4123 
sbio
->
ˇŒback
 = 
ªad_°©ic_bbt_ˇŒback
;

4124 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

4125 
sbio
->
d©a
 = 
lun
;

4126 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, 
LUN_BBT_SIZE
, 
SHANNON_DMA_FROMDEVICE
);

4127 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

4128 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

4129 
	`BUG
();

4132 
logicbs
 = 
sbio
->logicbs;

4133 
i
 = 0; i < 
logicbs
; i++) {

4134 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

4135 
	`£t_ªq_debug_èg
(
ªq
, 
READ_BBT_TAG
, 
i
);

4136 
ªq
->
›code
 = 
sh_cmd_ªad
;

4137 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

4138 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

4139 
ªq
->
vút_addr
 = 
sbio
->vút_add∏+ 
sdev
->
logicb_size
 * 
i
;

4140 
ªq
->
dma_addªss
 = 
sbio
->dma_addªs†+ 
sdev
->
logicb_size
 * 
i
;

4141 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

4142 
ªq
->
pba
.
lun_pba
 = 
sdev
->
logicbs_ö_∑ge
 + 
i
;

4143 
ªq
->
sbio
 = sbio;

4144 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4145 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4146 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

4149 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4151 
	}
}

4153 
	$™Æyze_bad_phy_lun_m≠
(
sh™n⁄_dev
 *
sdev
)

4155 
l
, 
b
;

4157 
sdev
->
max_avaûabÀ_luns
 = sdev->
lun_cou¡
;

4158 
l
 = 0;Ü < 
sdev
->
lun_cou¡
;Ü++) {

4159 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
l
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
)) {

4160 
	`debugs1
("lun=%d,Öhy_lun_num=%d i†physiˇŒy bad.\n", 
l
, 
sdev
->
lun
[l]->
phy_lun_num
);

4161 
	`sh™n⁄_£t_bô
(
l
, (*)
sdev
->
°©ic_bad_lun_m≠
);

4162 
sdev
->
max_avaûabÀ_luns
--;

4163 
b
 = 0; b < 
sdev
->
sb_cou¡
; b++)

4164 
	`m¨k_bad_block_dev
(
sdev
, 
l
, 
b
);

4167 
	}
}

4169 
	$is_Ælzîo
(*
addr
, 
size
)

4171 *
p
 = 
addr
 + 
size
;

4174 i‡(*--
p
)

4176 } 
p
 !
addr
);

4178 
	}
}

4180 
	$ªad_∑rôy_group_to_check_bad_block_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

4182 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

4183 
group_ödex
 = ()
sbio
->
d©a2
;

4184 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

4185 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

4186 
bad_lun
 = 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] - 1;

4187 
logicb64_t
 
lba
 = 0;

4188 *
vút_addr
;

4189 
∂™e
, 
bœnk_logicbs
 = 0;

4191 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4192 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

4193 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

4194 
	`debugs1
("sb=%d,Üun=%d,Üun_pba=%d,Écc=0x%x.\n",

4195 
sb
->
sb_ödex
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
);

4196 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0, 
sdev
->
logicb_size
);

4197 
ªq
->
lba
 = 0;

4199 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
)

4200 
bœnk_logicbs
++;

4203 i‡(
sbio
->
°©us
 & 
HAVE_ERROR_SECTOR
) {

4204 
	`sh™n⁄_îr
("D©®îr‹ i¿su≥rblock %d.\n", 
sb
->
sb_ödex
);

4205 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

4206 } i‡((
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
Ë&& (
bœnk_logicbs
 =sbio->
logicbs
)) {

4207 
	`sh™n⁄_öfo
("%s(): së badblock: bad_lun=%d, sb=%d.\n", 
__func__
, 
bad_lun
, 
sb
->
sb_ödex
);

4208 
	`sb_m¨k_bad_lun
(
sb
, 
bad_lun
);

4209 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++)

4210 
	`add_bad_eblk_to_lun_bbt
(
sdev
->
lun
[
bad_lun
], 
sb
->
sb_ödex
 * sdev->
∂™es
 + 
∂™e
);

4212 i‡(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
) {

4214 
	`sh™n⁄_öfo
("%s(): sb=%d,Üogicbs=%d, bœnk_logicbs=%d.\n", 
__func__
, 
sb
->
sb_ödex
, 
sbio
->
logicbs
, 
bœnk_logicbs
);

4217 
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_NOWAIT
);

4218 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4219 
lba
 =Üb®^ 
ªq
->lba;

4220 
	`__sh™n⁄_bôm≠_x‹
(
vút_addr
, vút_addr, 
ªq
->vút_addr, 
sdev
->
logicb_size
 * 8);

4223 i‡((
lba
 =0Ë&& 
	`is_Ælzîo
(
vút_addr
, 
sdev
->
logicb_size
)) {

4224 
	`sh™n⁄_öfo
("%s(): së badblock: bad_lun=%d, sb=%d.\n", 
__func__
, 
bad_lun
, 
sb
->
sb_ödex
);

4225 
	`sb_m¨k_bad_lun
(
sb
, 
bad_lun
);

4226 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++)

4227 
	`add_bad_eblk_to_lun_bbt
(
sdev
->
lun
[
bad_lun
], 
sb
->
sb_ödex
 * sdev->
∂™es
 + 
∂™e
);

4229 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d, sb=%d i†good.\n", 
__func__
, 
lba
, 
bad_lun
, 
sb
->
sb_ödex
);

4231 
	`‰ì_logicb_buf
(
sdev
, 
vút_addr
);

4234 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4235 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4236 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

4237 
	`‰ì_ªq
(
ªq
);

4239 
	`‰ì_sbio
(
sbio
);

4241 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

4242 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

4243 
	}
}

4245 
	$ªad_∑rôy_group_to_check_bad_block
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
group_ödex
)

4247 
sh™n⁄_bio
 *
sbio
;

4248 
sh™n⁄_ªque°
 *
ªq
;

4249 
lun_off£t
, 
lun
, 
logicbs
;

4250 
sub_group
 *
group
 = &
sb
->sub_group[
group_ödex
];

4251 
bad_lun
 = 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] - 1;

4253 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

4254 
	`£t_sbio_debug_èg
(
sbio
, 
RECOVER_BBT_TAG
);

4255 
sbio
->
ˇŒback
 = 
ªad_∑rôy_group_to_check_bad_block_ˇŒback
;

4256 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

4257 
sbio
->
d©a
 = 
sb
;

4258 
sbio
->
d©a2
 = (*)
group_ödex
;

4260 
sbio
->
logicbs
 = 
	`sh™n⁄_©omic_ªad
(&
group
->
avaûabÀ_luns
) - 1;

4261 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

4263 
logicbs
 = 0;

4264 
lun_off£t
 = 0;Üun_off£à< 
sdev
->
max_luns_ö_group
;Üun_offset++) {

4265 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

4266 i‡((
lun
 =
bad_lun
Ë|| 
	`is_bad_lun
(
sb
,Üun))

4268 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

4269 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_BBT_TAG
, 
lun
);

4270 
ªq
->
›code
 = 
sh_cmd_ªad
;

4271 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

4272 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

4273 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

4274 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

4275 
ªq
->
pba
.
lun
 =Üun;

4276 
ªq
->
pba
.
lun_pba
 = 
sdev
->
logicbs_ö_siblög_eblock
 * 
sb
->
sb_ödex
;

4277 
ªq
->
sbio
 = sbio;

4278 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4279 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4280 
logicbs
++;

4281 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

4283 
	`BUG_ON
(
logicbs
 !(
	`sh™n⁄_©omic_ªad
(&
group
->
avaûabÀ_luns
) - 1));

4285 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4288 
	}
}

4290 
	$ªcovî_bad_lun_bbt
(
sh™n⁄_dev
 *
sdev
, 
group_ödex
)

4292 
i
;

4293 
sh™n⁄_sb
 *
sb
;

4294 
sub_group
 *
group
;

4295 
bad_lun
 = 
sdev
->
√w_bad_lun
->
group_bad_lun
[
group_ödex
] - 1;

4297 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

4298 
sb
 = 
sdev
->
sbs
 + 
i
;

4299 
group
 = &
sb
->
sub_group
[
group_ödex
];

4301 i‡((
	`sh™n⁄_©omic_ªad
(&
group
->
avaûabÀ_luns
Ë< 3Ë|| 
	`is_bad_lun
(
sb
, 
bad_lun
)) {

4302 
	`sh™n⁄_öfo
("%s(): badblock ha†bì¿£t. bad_lun=%d, sb=%d.\n", 
__func__
, 
bad_lun
, 
sb
->
sb_ödex
);

4305 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

4306 i‡(
	`ªad_∑rôy_group_to_check_bad_block
(
sdev
, 
sb
, 
group_ödex
) < 0) {

4307 
	`£t_ªcovî_°©e_dód
(
sdev
);

4311 
	`sh™n⁄_waô_evít
(
sdev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
ªcovî_d⁄e
) == 0);

4313 
	}
}

4315 
	$∑rôy_öô
(
sh™n⁄_sb
 *
sb
, 
group_ödex
, 
µa
, 
u8
 
hód
)

4317 
sh™n⁄_ªque°
 *
ªq
;

4318 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

4320 
sb
->
sdev
->
∑rôy_öô_d⁄e
[
hód_ödex
] = 0;

4322 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

4323 
	`£t_ªq_debug_èg
(
ªq
, 
PARITY_INIT_TAG
, 0);

4324 
ªq
->
›code
 = 
sh_cmd_∑rôy_öô
;

4325 
ªq
->
d©a_luns
 = 
sb
->
mö_d©a_luns
;

4326 
ªq
->
pba
.
lun
 = 
	`gë_∑rôy_lun
(&
sb
->
sub_group
[
group_ödex
]);

4327 
ªq
->
pba
.
lun_pba
 = 
µa
 * 
sb
->
sdev
->
logicbs_ö_∑ge
;

4328 
ªq
->
hód
 = head;

4329 
ªq
->
µa
 =Öpa;

4330 
	`add_ªque°_queue_èû
(
sb
->
sdev
, 
ªq
, 1);

4331 
	`sh™n⁄_queue_w‹k
(
sb
->
sdev
->
sh™n⁄_wq
, &sb->sdev->
w‹k
);

4334 
	}
}

4336 
	$upd©e_îa£_cou¡
(
sh™n⁄_dev
 *
dev
)

4338 
i
, 
blk_num
 = 0;

4339 
v¨ün˚
 = 0;

4340 
sh™n⁄_sb
 *
sb
 = 
NULL
;

4341 
mö_îa£_cou¡
, 
max_îa£_cou¡
;

4343 
mö_îa£_cou¡
 = 
dev
->
Êash_≥_thªshﬁd
;

4344 
max_îa£_cou¡
 = 0;

4345 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

4346 
sb
 = 
dev
->
sbs
 + 
i
;

4347 i‡(
sb
->
°©e
 !
DISCARDED_BLOCK
) {

4348 i‡(
mö_îa£_cou¡
 > 
sb
->
îa£_cou¡î
)

4349 
mö_îa£_cou¡
 = 
sb
->
îa£_cou¡î
;

4350 i‡(
max_îa£_cou¡
 < 
sb
->
îa£_cou¡î
)

4351 
max_îa£_cou¡
 = 
sb
->
îa£_cou¡î
;

4352 
blk_num
++;

4356 
dev
->
mö_îa£_cou¡
 = min_erase_count;

4357 i‡(
dev
->
max_îa£_cou¡
 < max_erase_count)

4358 
dev
->
max_îa£_cou¡
 = max_erase_count;

4360 
dev
->
avîage_îa£_cou¡
 = dev->
tŸÆ_îa£_cou¡
 / 
blk_num
;

4361 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

4362 
sb
 = 
dev
->
sbs
 + 
i
;

4363 i‡(
sb
->
°©e
 !
DISCARDED_BLOCK
) {

4364 i‡(
sb
->
îa£_cou¡î
 >
dev
->
avîage_îa£_cou¡
)

4365 
v¨ün˚
 +((
sb
->
îa£_cou¡î
 - 
dev
->
avîage_îa£_cou¡
) * (sb->erase_counter - dev->average_erase_count));

4367 
v¨ün˚
 +((
dev
->
avîage_îa£_cou¡
 - 
sb
->
îa£_cou¡î
) * (dev->average_erase_count - sb->erase_counter));

4370 
dev
->
v¨ün˚_of_îa£_cou¡
 = 
v¨ün˚
 * 100 / 
blk_num
;

4371 
	`debugs4
("erase count statistics: max %d; min %d;áverage %d;Åotal %d; variance %d/100.\n",

4372 
dev
->
max_îa£_cou¡
, dev->
mö_îa£_cou¡
, dev->
avîage_îa£_cou¡
, dev->
tŸÆ_îa£_cou¡
, dev->
v¨ün˚_of_îa£_cou¡
);

4373 
	}
}

4375 
	$ªmove_sb_‰om_some_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

4377 
sb
->
°©e
) {

4378 
FREE_BLOCK
:

4379 
	`ªmove_sb_‰om_‰ì_blk_li°
(
sdev
, 
sb
);

4381 
WAIT_COPY_BLOCK
:

4382 
	`sh™n⁄_•ö_lock
(&
sdev
->
waô_c›y_lock
);

4383 
sdev
->
waô_c›y_blk˙t
--;

4384 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

4385 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
waô_c›y_lock
);

4387 
WAIT_ERASE_BLOCK
:

4388 
	`sh™n⁄_•ö_lock
(&
sdev
->
waô_îa£d_lock
);

4389 
sdev
->
waô_îa£d_blk˙t
--;

4390 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

4391 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
waô_îa£d_lock
);

4393 
RECOVER_ERR_BLOCK
:

4394 
	`sh™n⁄_•ö_lock
(&
sdev
->
ªcovî_îr_lock
);

4395 
sdev
->
ªcovî_îr_blk˙t
--;

4396 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

4397 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
ªcovî_îr_lock
);

4399 
HOT_BLOCK_LIST
:

4400 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

4401 
sdev
->
u£d_blk˙t
[
HOT_INDEX
]--;

4402 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

4403 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

4405 
COLD_BLOCK_LIST
:

4406 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


4407 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

4409 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

4410 
sdev
->
u£d_blk˙t
[
COLD_INDEX
]--;

4411 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

4412 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

4415 
	`sh™n⁄_îr
("Unknown state: sb_index=%d, state=%d.\n",

4416 
sb
->
sb_ödex
, sb->
°©e
);

4419 
	}
}

4421 
	$add_to_li°_by_îa£_cou¡
(
sh™n⁄_sb
 *
sb
, 
sh™n⁄_li°_hód
 *
sb_li°
)

4423 
sh™n⁄_sb
 *
tmp
;

4424 
sh™n⁄_li°_hód
 *
li°
;

4426 i‡(
	`sh™n⁄_li°_em±y
(
sb_li°
)) {

4427 
	`sh™n⁄_li°_add_èû
(&
sb
->
îa£_cou¡_li°
, 
sb_li°
);

4431 
li°
 = 
sb_li°
->
√xt
;

4432 
li°
 !
sb_li°
) {

4433 
tmp
 = 
	`sh™n⁄_li°_íåy
(
li°
, 
sh™n⁄_sb
, 
îa£_cou¡_li°
);

4434 i‡(
tmp
->
îa£_cou¡î
 > 
sb
->erase_counter)

4436 
li°
 =Üi°->
√xt
;

4438 
	`sh™n⁄_li°_add_èû
(&
sb
->
îa£_cou¡_li°
, 
li°
);

4439 
	}
}

4441 
u32
 
	$föd_medün_îa£_cou¡
(
sh™n⁄_dev
 *
dev
, 
£Æed_sb_cou¡
)

4443 
sh™n⁄_sb
 *
sb
, *
tmp
;

4444 
sh™n⁄_li°_hód
 
li°
;

4445 
sb_cou¡
 = 0, 
tmp_sb_cou¡
 = 0;

4446 
u32
 
medün_îa£_cou¡
 = 0;

4447 
i
;

4449 
	`BUG_ON
(
£Æed_sb_cou¡
 < 2);

4450 
	`SHANNON_INIT_LIST_HEAD
(&
li°
);

4451 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

4452 
sb
 = 
dev
->
sbs
 + 
i
;

4453 i‡(
	`gë_ªcovîed_ïûog_hód
(
sb
) != 0) {

4454 
sb_cou¡
++;

4455 
	`SHANNON_INIT_LIST_HEAD
(&
sb
->
îa£_cou¡_li°
);

4456 
	`add_to_li°_by_îa£_cou¡
(
sb
, &
li°
);

4460 
	`BUG_ON
(
sb_cou¡
 !
£Æed_sb_cou¡
);

4462 
tmp_sb_cou¡
 = 
sb_cou¡
;

4463 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
sb
, 
tmp
, &
li°
, 
îa£_cou¡_li°
) {

4464 
	`sh™n⁄_li°_dñ
(&
sb
->
îa£_cou¡_li°
);

4465 
tmp_sb_cou¡
--;

4466 i‡(
tmp_sb_cou¡
 =(
sb_cou¡
 / 2))

4467 
medün_îa£_cou¡
 = 
sb
->
îa£_cou¡î
;

4471  
medün_îa£_cou¡
;

4472 
	}
}

4474 
	$check_îa£_cou¡_øti⁄Æôy
(
sh™n⁄_dev
 *
sdev
)

4476 
sh™n⁄_sb
 *
sb
;

4477 
i
;

4478 
u64
 
tŸÆ_wrôe_logicbs
 = 0, 
tŸÆ_disk_logicbs
 = 0;

4479 
u32
 
avg_îa£_cou¡
 = 0;

4481 
tŸÆ_wrôe_logicbs
 = 
sdev
->
tŸÆ_wrôe_£˘‹s
 >> (sdev->
logicb_shi·
 - 9);

4482 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

4483 
sb
 = 
sdev
->
sbs
 + 
i
;

4484 i‡(
sb
->
°©e
 =
DISCARDED_BLOCK
)

4486 
tŸÆ_disk_logicbs
 +
	`fú°_ïûog_pba
(
sdev
, 
sb
);

4488 
avg_îa£_cou¡
 = 
tŸÆ_wrôe_logicbs
 / 
tŸÆ_disk_logicbs
;

4490 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

4491 
sb
 = 
sdev
->
sbs
 + 
i
;

4492 i‡(
sb
->
°©e
 =
DISCARDED_BLOCK
)

4494 i‡(
	`gë_ªcovîed_ïûog_hód
(
sb
)) {

4495 i‡(
sb
->
îa£_cou¡î
 > (
avg_îa£_cou¡
 + 1000)) {

4496 
	`sh™n⁄_Æ¨m
("sb=%d,Éø£_cou¡=%d,ávg_îa£_cou¡=%d\n", 
sb
->
sb_ödex
, sb->
îa£_cou¡î
, 
avg_îa£_cou¡
);

4497 
sdev
->
tŸÆ_îa£_cou¡
 -
sb
->
îa£_cou¡î
;

4498 
sb
->
îa£_cou¡î
 = 
avg_îa£_cou¡
;

4499 
sdev
->
tŸÆ_îa£_cou¡
 +
sb
->
îa£_cou¡î
;

4503 
	}
}

4505 
	$ª°‹e_îa£_cou¡î
(
sh™n⁄_dev
 *
dev
)

4507 
u32
 
un£Æed_sb_îa£_cou¡
, 
£Æed_sb_cou¡
 = 0, 
i
;

4508 
sh™n⁄_sb
 *
sb
;

4510 
dev
->
tŸÆ_îa£_cou¡
 = 0;

4511 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

4512 
sb
 = 
dev
->
sbs
 + 
i
;

4513 i‡(
	`gë_ªcovîed_ïûog_hód
(
sb
) != 0) {

4514 
£Æed_sb_cou¡
++;

4515 
dev
->
tŸÆ_îa£_cou¡
 +
sb
->
îa£_cou¡î
;

4518 
	`check_îa£_cou¡_øti⁄Æôy
(
dev
);

4520 i‡(
£Æed_sb_cou¡
 > 2)

4521 
un£Æed_sb_îa£_cou¡
 = 
	`föd_medün_îa£_cou¡
(
dev
, 
£Æed_sb_cou¡
);

4522 i‡(
£Æed_sb_cou¡
 == 0)

4523 
un£Æed_sb_îa£_cou¡
 = 
dev
->
mbr
.
hi°‹y_îa£_cou¡
;

4525 
un£Æed_sb_îa£_cou¡
 = 
dev
->
tŸÆ_îa£_cou¡
 / 
£Æed_sb_cou¡
;

4527 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

4528 
sb
 = 
dev
->
sbs
 + 
i
;

4529 i‡(
	`gë_ªcovîed_ïûog_hód
(
sb
) == 0) {

4530 
sb
->
îa£_cou¡î
 = 
un£Æed_sb_îa£_cou¡
;

4531 
dev
->
tŸÆ_îa£_cou¡
 +
sb
->
îa£_cou¡î
;

4534 
	`upd©e_îa£_cou¡
(
dev
);

4535 
	}
}

4537 
c›y_∑ge_°rùe
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
∑ge_°rùe
, 
cur_°©e
);

4538 
	$ª˛aim_èrgë_blk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

4540 
°rùe
 = 0;

4541 
submô_ªqs
 = 0;

4542 
u16
 
hód_ödex
;

4543 
ªt
 = 0;

4545 
	`sh™n⁄_öfo
("%s:Ñeclaim sb(%d), sb_state=0x%x, head_index=0x%x, valid_pages=%u.\n",\

4546 
__func__
, 
sb
->
sb_ödex
, sb->
°©e
, sb->
hód_ödex
, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
));

4547 
hód_ödex
 = 
sb
->head_index;

4548 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
sdev
->
waô_blk
) != -1);

4549 
	`BUG_ON
(
sb
->
sb_ödex
 > 
sdev
->
sb_cou¡
);

4550 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, 
sb
->
sb_ödex
);

4551 (
°rùe
 < 
sdev
->
∑ges_ö_eblock
Ë&& (
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) != 0)) {

4552 i‡(
sdev
->
∂ug_out
 || (sdev->
ªcovî_°©e
 =
RECOVER_ERROR
)) {

4553 
ªt
 = -1;

4554 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, -1);

4555 
out
;

4557 
submô_ªqs
 = 
	`c›y_∑ge_°rùe
(
sdev
, 
sb
, 
°rùe
, sb->
°©e
);

4558 
°rùe
++;

4560 
	`sh™n⁄_waô_evít
(
sdev
->
waô_blk_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
waô_blk
) == -1);

4561 
ªt
 = 0;

4562 i‡(
sdev
->
∂ug_out
 || (
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) != 0))

4563 
ªt
 = -1;

4565 
out
:

4566 i‡(
ªt
 == -1)

4567 
	`debugs1
("ª˛aimÅ¨gë blkÉº‹.Ölug_out=%d,Ñecovî_°©e=%d.\n", 
sdev
->
∂ug_out
, sdev->
ªcovî_°©e
);

4568  
ªt
;

4569 
	}
}

4571 
	$check_™d_ª˛aim_sb
(
sh™n⁄_dev
 *
sdev
)

4573 
sh™n⁄_sb
 *
sb
, *
a˘ive_sb
, *
sb_tmp
;

4574 
hód_ödex
;

4575 
ªt
 = 0;

4576 
ªåy
 = 10;

4578 
	`BUG_ON
(
sdev
->
öô_d⁄e
 !
STAGE_RECOVER_ACTIVE_DONE
);

4580 
hód_ödex
 = 0; hód_ödex < 
sdev
->
hód_cou¡
; head_index++) {

4581 i‡(
sdev
->
∂ug_out
)

4583 
sb
 = 
sdev
->
œ°_blk
[
hód_ödex
];

4584 i‡(
sb
 =
NULL
)

4586 i‡(
sb
->
ªcovî_°©us
 & (
NEED_RECLAIM
 | 
NEED_FILL
)) {

4587 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
sdev
->
ªcovî_d⁄e
) != 0);

4588 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

4589 
	`sh™n⁄_öfo
("%s:Ñesˇ¿su≥∏block %d.\n", 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
);

4590 i‡(
	`sˇn_su≥r_block
(
sb
, 0, 0))

4591 
	`sh™n⁄_©omic_dec
(&
sdev
->
ªcovî_d⁄e
);

4593 
	`sh™n⁄_waô_evít
(
sdev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
ªcovî_d⁄e
) == 0);

4595 i‡(
sb
->
ªcovî_°©us
 & 
NEED_RECLAIM
) {

4596 
	`debugs1
("%s:Üa° %†sb(%dËªcovî_°©e=%d,\n", 
__func__
, (
sb
->
hód_ödex
 =
HOT_INDEX
) ? "hot" : "cold", \

4597 
sb
->
sb_ödex
, sb->
ªcovî_°©us
);

4598 i‡(
sdev
->
ªad⁄ly_ªas⁄
)

4600 i‡(
sdev
->
∂ug_out
)

4602 i‡(
sdev
->
‰ì_blk˙t
 == 0) {

4603 
	`sh™n⁄_w¨n
("‰ì_blk˙t=%d!\n", 
sdev
->
‰ì_blk˙t
);

4606 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) != 0)

4607 i‡(
	`ª˛aim_èrgë_blk
(
sdev
, 
sb
))

4609 
a˘ive_sb
 = 
sdev
->
a˘ive_blk
[
hód_ödex
];

4610 
a˘ive_sb
->
fûl_sb
 = 1;

4611 
ªåy
--) {

4612 i‡(
sdev
->
∂ug_out
)

4614 
ªt
 = 
	`fûl_a˘ive_blk
(
sdev
, 
hód_ödex
, 1);

4615 i‡(!
ªt
)

4618 i‡(
ªåy
 == 0) {

4619 
	`sh™n⁄_îr
("%s: faûed.\n", 
__func__
);

4623 i‡((
sdev
->
a˘ive_blk
[
hód_ödex
]->
sb_ödex
 =
a˘ive_sb
->sb_ödexË|| sdev->
∂ug_out
) {

4626 
	`BUG_ON
(
a˘ive_sb
->
°©e
 !((
hód_ödex
 =
HOT_INDEX
Ë? 
LAST_HOT_BLOCK
 : 
LAST_COLD_BLOCK
));

4627 
	`debugs1
("%s:Üa°á˘ivê%†sb(%dË°©êi†%d.\n", 
__func__
, \

4628 
a˘ive_sb
->
hód_ödex
 =
HOT_INDEX
 ? "hot" : "cold", \

4629 
a˘ive_sb
->
sb_ödex
,á˘ive_sb->
°©e
);

4630 
	`debugs1
("%s:Ñe˛aim sb(%dË°©êi†%d, vÆidÖages=%d.\n", 
__func__
, 
sb
->
sb_ödex
, \

4631 
sb
->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
));

4635 
	`debugs1
("checkÜast hotánd cold block finish.\n");

4636 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
sb
, 
sb_tmp
, &
sdev
->
waô_c›y
, 
li°
) {

4637 i‡((
sb
->
ªcovî_°©us
 & 
NEED_RECLAIM
Ë&& !
sdev
->
ªad⁄ly_ªas⁄
 && !sdev->
∂ug_out
) {

4638 
	`debugs1
("%s: u£d %†sb(%dË√edÑe˛aim, sèã i†%d, vÆidÖages=%d,Çext_sb=%d.\n", 
__func__
, \

4639 
sb
->
°©e
 =
LAST_HOT_BLOCK
 ? "hŸ" : "cﬁd", sb->
sb_ödex
, \

4640 
sb
->
°©e
, 
	`sh™n⁄_©omic_ªad
(&sb->
vÆid_∑ges
), sb->
√xt_sb
);

4641 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) > 0) {

4642 i‡(
sdev
->
‰ì_blk˙t
 == 0) {

4643 
	`sh™n⁄_w¨n
("ª˛aim u£d_sb(%d), buà‰ì_blk˙t=%d!\n", 
sb
->
sb_ödex
, 
sdev
->
‰ì_blk˙t
);

4646 
	`ª˛aim_èrgë_blk
(
sdev
, 
sb
);

4652 
	}
}

4654 
	$ªwrôe_ovîœp_d©a_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

4656 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

4657 
sh™n⁄_ªque°
 *
ªq
;

4658 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

4659 
sh™n⁄_sb
 *
sb
;

4661 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

4662 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

4663 
ªq
->
°©e
 = 
REQ_CALLBACK
;

4664 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4665 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

4666 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

4667 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4668 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

4669 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4672 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

4673 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

4676 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
)) {

4677 
	`debugs0
("wake upÑecover done.\n");

4678 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

4680 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

4681 
	`‰ì_ªq
(
ªq
);

4682 
	`‰ì_sbio
(
sbio
);

4683 
	}
}

4685 
	$ªwrôe_ovîœp_d©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ovîœp_ªq
)

4687 
sh™n⁄_bio
 *
sbio
;

4689 
	`BUG_ON
(
ovîœp_ªq
 =
NULL
);

4691 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

4692 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

4693 
sbio
->
logicbs
 = 1;

4694 
sbio
->
ˇŒback
 = 
ªwrôe_ovîœp_d©a_ˇŒback
;

4695 
sbio
->
d©a
 = 
sdev
;

4696 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

4698 
	`SHANNON_INIT_LIST_HEAD
(&
ovîœp_ªq
->
bio_li°
);

4699 
	`SHANNON_INIT_LIST_HEAD
(&
ovîœp_ªq
->
chunk_li°
);

4700 
	`£t_lun_pba_övÆid
(&
ovîœp_ªq
->
pba
);

4702 
ovîœp_ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

4703 
ovîœp_ªq
->
›code
 = 
sh_cmd_wrôe
;

4704 
ovîœp_ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

4705 
ovîœp_ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4706 
	`£t_ªq_debug_èg
(
ovîœp_ªq
, 
RECOVER_OVERLAP_BLK_TAG
, 0);

4707 
	`£t_ªq_ödex
(
ovîœp_ªq
, 0);

4708 
ovîœp_ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, ovîœp_ªq->
vút_addr
, sdev->
logicb_size
, ovîœp_ªq->
dma_dú
);

4709 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ovîœp_ªq
->
dma_addªss
)) {

4710 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

4711 
dma_Áû
;

4713 
ovîœp_ªq
->
sbio
 = sbio;

4714 
	`sh™n⁄_li°_add_èû
(&
ovîœp_ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4715 
	`add_ªque°_queue_èû
(
sdev
, 
ovîœp_ªq
, 1);

4716 
	`sh™n⁄_pick_ªque°
(
sdev
, 0xffffffff);

4719 
dma_Áû
:

4720 
	`‰ì_logicb_buf
(
sdev
, 
ovîœp_ªq
->
vút_addr
);

4721 
	`‰ì_ªq
(
ovîœp_ªq
);

4722 
	`‰ì_sbio
(
sbio
);

4724 
	`£t_ªcovî_°©e_dód
(
sdev
);

4725 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

4726 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

4728  -
EIO
;

4729 
	}
}

4731 
	$√xt_ovîœp_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
°¨t_lun
)

4733 
lun
 = 
°¨t_lun
;

4735 
	`is_bad_lun
(
sb
, 
lun
Ë&& (lu¿< 
sdev
->
lun_cou¡
))

4736 
lun
++;

4737 i‡(
lun
 >
sdev
->
lun_cou¡
)

4740  
lun
;

4741 
	}
}

4743 
ölöe
 
sh™n⁄_sb
 *
gë_√w_‰ì_sb
(
sh™n⁄_dev
 *
dev
);

4744 
ªcovî_ovîœp_blk
(
sh™n⁄_dev
 *
sdev
, 
∑ge_°rùe
, 
sh™n⁄_ªque°
 *
ovîœp_ªq
);

4745 
	$ªcovî_ovîœp_blk_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

4747 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

4748 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

4749 
∑ge_°rùe
 = ()
sbio
->
d©a2
;

4750 
sh™n⁄_ªque°
 *
¥ev_ªq
 = 
NULL
, *
ªq
, *
tmp
, *
ovîœp_ªq
 = (sh™n⁄_ªque° *)
sbio
->
vút_addr
;

4751 
sh™n⁄_ªque°
 *
ovîœp_ªq_1
 = 
NULL
;

4752 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

4753 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

4754 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

4755 
sh™n⁄_«me•a˚
 *
ns
;

4756 
lun_pba
;

4757 
ªcovî_Áûed
 = 0;

4758 
bœnk_cou¡
 = 0;

4759 
ªt
;

4760 
√ed_îa£
 = 0;

4762 i‡(
sbio
->
°©us
)

4763 
	`debugs3
("enter, sb_index=%d,Öage_stripe=%d, status=0x%x.\n",

4764 
sb
->
sb_ödex
, 
∑ge_°rùe
, 
sbio
->
°©us
);

4766 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4767 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

4768 i‡(
ªq
->
_ecc
 !
SH_FRESH_ERASED
) {

4769 i‡(
bœnk_cou¡
 && 
ªq
->
_ecc
 < 
SH_FAKE_ERR
) {

4770 
	`sh™n⁄_îr
("%s: ha†d©®bëwì¿bœnkÜogicbs.\n", 
sdev
->
sdisk
.
disk_«me
);

4771 
	`£t_ªcovî_°©e_dód
(
sdev
);

4772 
ªcovî_Áûed
 = 1;

4776 i‡(
ªcovî_Áûed
)

4779 i‡(
ªq
->
_ecc
 < 
SH_FAKE_ERR
) {

4780 i‡(
ªq
->
lba
 =
övÆid_lba
[
sdev
->
lba_f‹m©
])

4781 
	`ªcovî_d©a_‰om_dummy_∑ge
(
sdev
, 
ªq
->
vút_addr
);

4784 
lun_pba
 = (
ªq
->
pba
.lun_pb®% 
sdev
->
logicbs_ö_siblög_eblock
);

4785 i‡((
lun_pba
 / 
sdev
->
logicbs_ö_eblock
 =0Ë&& (lun_pb®% sdev->
logicbs_ö_∑ge
 == 1))

4786 
ovîœp_ªq_1
 = 
ªq
;

4787 
¥ev_ªq
 = 
ªq
;

4790 
bœnk_cou¡
++;

4793 i‡(
sdev
->
ªcovî_°©e
 =
RECOVER_DEAD
)

4794 
d⁄e
;

4796 i‡(
¥ev_ªq
) {

4797 
	`debugs3
("stripe=%d,Örev_req:Üun=%d,Üun_pba=%d, overlap_req:Üun=%d,Üun_pba=%d.\n", \

4798 
∑ge_°rùe
, 
¥ev_ªq
->
pba
.
lun
,Öªv_ªq->pba.
lun_pba
, \

4799 
ovîœp_ªq_1
->
pba
.
lun
, ovîœp_ªq_1->pba.
lun_pba
);

4800 
	`BUG_ON
((
ovîœp_ªq_1
 =
NULL
Ë|| (ovîœp_ªq_1->
pba
.
lun
 !
¥ev_ªq
->pba.lun));

4803 i‡(!(
sbio
->
°©us
 & 
HAVE_BLANK_SECTOR
)) {

4804 
ªq
 = 
ovîœp_ªq_1
;

4805 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

4806 
	`sh™n⁄_îr
("error data: couldÇotÑecover.\n");

4807 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

4808 
d⁄e
;

4811 i‡(!
	`ªq_has_övÆid_lba
(
ªq
)) {

4812 i‡(
ovîœp_ªq
 =
NULL
) {

4813 
ovîœp_ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

4814 
ovîœp_ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

4816 
ovîœp_ªq
->
lba
 = 
ªq
->lba;

4817 
	`sh™n⁄_mem˝y
(
ovîœp_ªq
->
vút_addr
, 
ªq
->vút_addr, 
sdev
->
logicb_size
);

4819 i‡((
∑ge_°rùe
 + 1Ë=
sdev
->
∑ges_ö_eblock
) {

4821 
√ed_îa£
 = 1;

4823 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4824 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4825 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

4826 
	`‰ì_ªq
(
ªq
);

4828 
	`‰ì_sbio
(
sbio
);

4829 
	`ªcovî_ovîœp_blk
(
sdev
, 
∑ge_°rùe
 + 1, 
ovîœp_ªq
);

4832 } i‡(
bœnk_cou¡
 =
sbio
->
logicbs
) {

4834 
ﬁ
->
wr_lun
 = 
	`√xt_ovîœp_lun
(
sdev
, 
sb
, 0);

4835 i‡(
	`u∆ikñy
(
ﬁ
->
wr_lun
 < 0)) {

4836 
	`sh™n⁄_îr
("%s:Üine=%d, cannot findÇext_lun,ÜastÜun=%d,Üun_pba=%d.\n", \

4837 
sdev
->
sdisk
.
disk_«me
, 
__LINE__
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4838 
	`£t_ªcovî_°©e_dód
(
sdev
);

4840 
ﬁ
->
wr_chunk
 = 
∑ge_°rùe
;

4841 
ﬁ
->
wr_∑ge
 = 
∑ge_°rùe
;

4842 
ﬁ
->
wr_logicb
 = 0;

4843 
ﬁ
->
wr_∂™e
 = 0;

4845 
ªq
 = 
ovîœp_ªq_1
;

4846 i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

4847 
	`£t_ªcovî_°©e_îr‹
(
sdev
);

4848 
d⁄e
;

4851 i‡(!
	`ªq_has_övÆid_lba
(
ªq
)) {

4852 i‡(
ovîœp_ªq
 =
NULL
) {

4853 
ovîœp_ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

4854 
ovîœp_ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

4856 
ovîœp_ªq
->
lba
 = 
ªq
->lba;

4857 
	`sh™n⁄_mem˝y
(
ovîœp_ªq
->
vút_addr
, 
ªq
->vút_addr, 
sdev
->
logicb_size
);

4859 
ﬁ
->
wr_lun
 = 
	`√xt_ovîœp_lun
(
sdev
, 
sb
, 
ªq
->
pba
.
lun
 + 1);

4860 i‡(
	`u∆ikñy
(
ﬁ
->
wr_lun
 < 0)) {

4861 
	`sh™n⁄_îr
("%s:Üine=%d, cannot findÇext_lun,ÜastÜun=%d,Üun_pba=%d.\n", \

4862 
sdev
->
sdisk
.
disk_«me
, 
__LINE__
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4863 
	`£t_ªcovî_°©e_dód
(
sdev
);

4865 
ﬁ
->
wr_chunk
 = 
∑ge_°rùe
;

4866 
ﬁ
->
wr_∑ge
 = 
∑ge_°rùe
;

4867 
ﬁ
->
wr_logicb
 = 0;

4868 
ﬁ
->
wr_∂™e
 = 0;

4871 i‡(
ovîœp_ªq
) {

4872 
ªq
 = 
ovîœp_ªq
;

4873 
	`sh™n⁄_öfo
("%s:Öower failure.Ñestore overlap data:Üun=%d,Üun_pba=%d, _metadata=0x%16llx, _ecc=0x%x.\n", \

4874 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_mëad©a
,Ñeq->
_ecc
);

4875 i‡(!
	`ªq_has_övÆid_lba
(
ªq
)) {

4876 i‡(
•oﬁ
) {

4877 
ns
 = 
•oﬁ
->ns[
ªq
->
ns_id
];

4878 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

4879 
	`debugs1
("WrongÇs_id=%d, metadata=0x%lx, datatype=0x%x,Üba=0x%lx,Üun=%d,Üun_pba=%lu, chunk=%d.\n",

4880 
ªq
->
ns_id
,Ñeq->
_mëad©a
,Ñeq->
d©©y≥
,Ñeq->
lba
,

4881 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
sdev
->
wr_chunk
[
sb
->
hód_ödex
]);

4882 
‰ì_ovîœp_ªq
;

4884 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

4885 
	`debugs1
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

4886 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

4887 
‰ì_ovîœp_ªq
;

4889 
sdisk
 = &
ns
->sdisk;

4892 i‡(
ªq
->
ns_id
 ||Ñeq->
ns_£q_num
) {

4893 
	`sh™n⁄_îr
("%s: Wrong data,Çs_id=%d,Çs_seq_num=%d, metadata=0x%lx,Üun=%d,Üun_pba=%d.\n",

4894 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
_mëad©a
,

4895 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4896 
‰ì_ovîœp_ªq
;

4900 i‡(
ªq
->
lba
 > 
sdisk
->
tŸÆ_m≠_èbÀ_size
 / (
u32
)) {

4901 
	`sh™n⁄_îr
("Wrong data:Üun=%d,Üun_pba=%d,Écc=%d, datatype=0x%x,Üba=0x%lx.\n",

4902 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
d©©y≥
,Ñeq->
lba
);

4903 
‰ì_ovîœp_ªq
;

4907 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
ﬁd_pba
, 
NULL
, 
sdisk
);

4908 i‡(
ªt
 == 0)

4909 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
);

4911 i‡(
	`check_™d_Æloc_m≠èbÀ
(
sdisk
, 
ªq
->
lba
)) {

4912 i‡(
sdev
->
ªcovî_°©e
 > 
RECOVER_ERROR
)

4913 
sdev
->
ªcovî_°©e
 = 
RECOVER_ERROR
;

4914 
	`sh™n⁄_£t_bô
(
SHN_REASON_EPILOG_FAILURE
, &
sdev
->
ªad⁄ly_ªas⁄
);

4915 
	`sh™n⁄_îr
("mapÅableÉrror.\n");

4916 
‰ì_ovîœp_ªq
;

4920 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4921 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4922 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

4923 i‡(!
sdev
->
ªad⁄ly_ªas⁄
) {

4924 
ªq
->
hód
 = 
HOT_HEAD
;

4925 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

4926 
	`ªwrôe_ovîœp_d©a
(
sdev
, 
ªq
);

4927 
d⁄e
;

4930 i‡(!
•oﬁ
 || 
ªq
->
lba
 !
övÆid_lba
[
sdev
->
lba_f‹m©
]

4931 || 
ªq
->
ns_£q_num
 =0 || 
sdev
->
mbr
.
sdev_id
 != 0) {

4932 
‰ì_ovîœp_ªq
;

4934 
ns
 = 
•oﬁ
->ns[
ªq
->
ns_id
];

4935 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

4936 
	`debugs1
("WrongÇs_id=%d, metadata=0x%lx, datatype=0x%x,Üba=0x%lx,Üun=%d,Üun_pba=%lu.\n",

4937 
ªq
->
ns_id
,Ñeq->
_mëad©a
,Ñeq->
d©©y≥
,Ñeq->
lba
,

4938 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4939 
‰ì_ovîœp_ªq
;

4941 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

4942 
	`debugs1
("WrongÇs_seq_num: sb_index=%d,Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

4943 
sb
->
sb_ödex
, 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

4944 
‰ì_ovîœp_ªq
;

4947 
	`sh™n⁄_îr
("%s: i†n†d©a.\n", 
sdev
->
sdisk
.
disk_«me
);

4949 
‰ì_ovîœp_ªq
:

4950 
	`‰ì_logicb_buf
(
sdev
, 
ovîœp_ªq
->
vút_addr
);

4951 
	`‰ì_ªq
(
ovîœp_ªq
);

4954 
d⁄e
:

4955 i‡(
√ed_îa£
) {

4957 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

4958 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

4959 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
waô_îa£d_lock
);

4960 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
waô_îa£d
);

4961 
sdev
->
waô_îa£d_blk˙t
++;

4962 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
waô_îa£d_lock
);

4963 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

4964 
sb
 = 
	`gë_√w_‰ì_sb
(
sdev
);

4965 i‡(
sb
 =
NULL
) {

4966 
	`sh™n⁄_îr
("failedÅo getÇew free blk for overlap.\n");

4967 
	`£t_ªcovî_°©e_dód
(
sdev
);

4968 
d⁄e
;

4970 
	`sh™n⁄_öfo
("gëáÇew fªêsb_ödex=%dá†ovîœp_sblk.\n", 
sb
->
sb_ödex
);

4971 
sb
->
°©e
 = 
OVERLAP_BLOCK
;

4972 
sb
->
£q_num
 = 
MAX_SEQ_NUM
;

4973 
sdev
->
mbr
.
ovîœp_sblk
 = 
sb
->
sb_ödex
;

4974 i‡(
	`ª‰esh_mbr_g5
(
sdev
, 0) < 0) {

4975 
	`sh™n⁄_îr
("failedÅoÑefresh mbr for updating overlap write.\n");

4976 
	`£t_ªcovî_°©e_dód
(
sdev
);

4978 
ﬁ
->
wr_lun
 = 
	`√xt_ovîœp_lun
(
sdev
, 
sb
, 0);

4979 
ﬁ
->
wr_chunk
 = 0;

4980 i‡(
	`u∆ikñy
(
ﬁ
->
wr_lun
 < 0)) {

4981 
	`sh™n⁄_îr
("%s:Üine=%d, cannot findÇext_lun,ÜastÜun=%d,Üun_pba=%d.\n", \

4982 
sdev
->
sdisk
.
disk_«me
, 
__LINE__
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4983 
	`£t_ªcovî_°©e_dód
(
sdev
);

4985 
ﬁ
->
wr_∑ge
 = 0;

4986 
ﬁ
->
wr_logicb
 = 0;

4987 
ﬁ
->
wr_∂™e
 = 0;

4991 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

4992 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

4993 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

4994 
	`‰ì_ªq
(
ªq
);

4996 
	`‰ì_sbio
(
sbio
);

4997 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

4998 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

5000 
	}
}

5002 
	$ªcovî_ovîœp_blk
(
sh™n⁄_dev
 *
sdev
, 
∑ge_°rùe
, 
sh™n⁄_ªque°
 *
ovîœp_ªq
)

5004 
sh™n⁄_bio
 *
sbio
;

5005 
lun
, 
∂™e
, 
i
;

5006 
sb_lun_pba
, 
logicbs_ö_eblk
;

5007 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

5008 
sh™n⁄_sb
 *
sb
;

5010 
	`BUG_ON
(
sdev
->
ovîœp_wrôe
 == 0);

5011 i‡(
∑ge_°rùe
 < 0 ||Öage_°rùê>
sdev
->
mbr
.
∑ges_ö_eblock
) {

5012 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

5013 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

5017 
sb
 = 
sdev
->
sbs
 + sdev->
mbr
.
ovîœp_sblk
;

5018 
	`BUG_ON
(
sb
->
°©e
 !
OVERLAP_BLOCK
);

5020 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

5021 
	`£t_sbio_debug_èg
(
sbio
, 
RECOVER_OVERLAP_BLK_TAG
);

5023 
sbio
->
ˇŒback
 = 
ªcovî_ovîœp_blk_ˇŒback
;

5024 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

5025 
sbio
->
d©a
 = 
sb
;

5026 
sbio
->
d©a2
 = (*)
∑ge_°rùe
;

5028 
sbio
->
vút_addr
 = (*)
ovîœp_ªq
;

5029 
sbio
->
logicbs
 = 0;

5030 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 0);

5032 
sb_lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
;

5033 
logicbs_ö_eblk
 = 
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
;

5035 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

5036 i‡(
	`is_bad_lun
(
sb
, 
lun
))

5039 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_chunk
, &
sbio
->
u£r_cou¡
);

5040 
sbio
->
logicbs
 +
sdev
->
logicbs_ö_chunk
;

5041 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

5042 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

5043 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

5044 
	`£t_ªq_debug_èg
(
ªq
, 
RECOVER_OVERLAP_BLK_TAG
, 
i
);

5045 
ªq
->
›code
 = 
sh_cmd_ªad
;

5046 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

5047 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

5048 
ªq
->
pba
.
lun
 =Üun;

5049 
ªq
->
pba
.
lun_pba
 = 
sb_lun_pba
 + 
∂™e
 * 
logicbs_ö_eblk
 + 
∑ge_°rùe
 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

5050 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

5051 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
bio_li°
);

5052 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

5053 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

5054 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

5055 
	`sh™n⁄_îr
("dma_map_single failed!.\n");

5056 
dma_Áûed
;

5058 
ªq
->
sbio
 = sbio;

5059 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

5060 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

5061 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

5065 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

5068 
dma_Áûed
:

5069 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

5070 
	`‰ì_ªq
(
ªq
);

5071 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

5072 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

5073 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

5074 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

5075 
	`‰ì_ªq
(
ªq
);

5077 
	`‰ì_sbio
(
sbio
);

5079 
	`£t_ªcovî_°©e_dód
(
sdev
);

5080 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sdev
->
ªcovî_d⁄e
))

5081 
	`sh™n⁄_wake_up
(&
sdev
->
ªcovî_d⁄e_evít
);

5082  -
EIO
;

5083 
	}
}

5085 
	$¥ï¨e_ovîœp_pba
(
sh™n⁄_dev
 *
sdev
)

5087 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

5090 
	`£nd_dummy_ovîœp_ªq
(
sdev
, 0);

5091 
ﬁ
->
pba
.
lun
 = ol->
wr_lun
;

5092 
ﬁ
->
pba
.
lun_pba
 = 
sdev
->
mbr
.
ovîœp_sblk
 * sdev->
logicbs_ö_siblög_eblock
 + \

5093 
ﬁ
->
wr_∑ge
 * 
sdev
->
logicbs_ö_∑ge
 + ol->
wr_logicb
;

5094 
	`£nd_dummy_ovîœp_ªq
(
sdev
, 0);

5096 
	`debugs0
("ovîœ∞lun=%d,Üun_pba=%d.\n", 
ﬁ
->
pba
.
lun
, ol->pba.
lun_pba
);

5097 
	}
}

5099 
	$ªad_bbt_öfo
(
sh™n⁄_dev
 *
sdev
)

5101 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

5102  
	`ªad_bbt_öfo_g5
(
sdev
);

5104  
	`ªad_bbt_öfo_g4
(
sdev
);

5105 
	}
}

5107 
	$™Æyze_bbt_öfo
(
sh™n⁄_dev
 *
sdev
)

5109 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

5110 
	`™Æyze_bbt_öfo_g5
(
sdev
);

5112 
	`™Æyze_bbt_öfo_g4
(
sdev
);

5113 
	}
}

5115 
ªcovî_ns_d©a
(
sh™n⁄_«me•a˚
 *, 
lun_pba
);

5116 
	$buûd_d©a_°ru˘
(
sh™n⁄_dev
 *
dev
)

5118 
sh™n⁄_sb
 *
sb
, *
sb_tmp
;

5119 
i
, 
j
, 
hód_ödex
, 
∑rôy_lun_off£t
;

5120 
ªåõs
;

5122 
	`debugs3
("enter. ---------------------\n");

5123 
dev
->
sbs
 = 
	`sh™n⁄_vmÆloc
((
sh™n⁄_sb
Ë* dev->
sb_cou¡
);

5124 i‡(
dev
->
sbs
 =
NULL
)

5125  -
ENOMEM
;

5126 
	`sh™n⁄_mem£t
(
dev
->
sbs
, 0x00, (
sh™n⁄_sb
Ë* dev->
sb_cou¡
);

5128 
dev
->
sub_groups
 = 
	`sh™n⁄_vmÆloc
((
sub_group
Ë* (dev->
sb_cou¡
 + 1Ë* dev->
∑rôy_groups
);

5129 i‡(
dev
->
sub_groups
 =
NULL
)

5130  -
ENOMEM
;

5131 
	`sh™n⁄_mem£t
(
dev
->
sub_groups
, 0x0, (
sub_group
Ë* (dev->
sb_cou¡
 + 1Ë* dev->
∑rôy_groups
);

5132 
dev
->
√w_bad_lun
 = (√w_bad_lu¿*)(dev->
sub_groups
 + dev->
sb_cou¡
 * dev->
∑rôy_groups
);

5134 
dev
->
ªad_cou¡
 = 
	`sh™n⁄_vmÆloc
(((
u32
Ë* dev->
lun_cou¡
 * dev->
sb_cou¡
));

5135 i‡(
dev
->
ªad_cou¡
 =
NULL
)

5136  -
ENOMEM
;

5137 
	`sh™n⁄_mem£t
(
dev
->
ªad_cou¡
, 0, (
u32
Ë* dev->
lun_cou¡
 * dev->
sb_cou¡
);

5141 
∑rôy_lun_off£t
 = 
dev
->
max_luns_ö_group
 - 1 - dev->
mbr_eblocks
/dev->
∂™es
;

5142 
i
 = 0; i < 
dev
->
sb_cou¡
; i++) {

5143 
sb
 = 
dev
->
sbs
 + 
i
;

5144 
sb
->
sb_ödex
 = 
i
;

5145 
sb
->
sdev
 = 
dev
;

5146 i‡(
i
 < 
dev
->
mbr_eblocks
/dev->
∂™es
) {

5147 
sb
->
°©e
 = 
MBR_BLOCK
;

5148 
sb
->
wr_off£t
 = ~0;

5149 } i‡(
dev
->
ovîœp_wrôe
 && dev->
mbr
.
ovîœp_sblk
 =
i
) {

5150 
sb
->
°©e
 = 
OVERLAP_BLOCK
;

5151 
sb
->
wr_off£t
 = ~0;

5153 
	`sh™n⁄_©omic_£t
(&
sb
->
ö_wrôe_logicbs
, 0);

5154 
	`sh™n⁄_©omic_£t
(&
sb
->
vÆid_∑ges
, 0);

5155 
	`sh™n⁄_©omic_£t
(&
sb
->
ö_≥riod_ªad
, 0);

5156 
	`sh™n⁄_©omic_£t
(&
sb
->
≥riod_ªad_d⁄e
, 0);

5157 
	`sh™n⁄_•ö_lock_öô
(&
sb
->
lock
);

5158 
	`SHANNON_INIT_LIST_HEAD
(&
sb
->
li°
);

5159 
	`sh™n⁄_©omic_£t
(&
sb
->
avaûabÀ_luns
, 
dev
->
lun_cou¡
);

5160 
	`sh™n⁄_©omic_£t
(&
sb
->
avaûabÀ_groups
, 
dev
->
∑rôy_groups
);

5161 
sb
->
sub_group
 = 
dev
->
sub_groups
 + dev->
∑rôy_groups
 * 
i
;

5162 
j
 = 0; j < 
dev
->
∑rôy_groups
; j++) {

5163 
	`sh™n⁄_©omic_£t
(&
sb
->
sub_group
[
j
].
avaûabÀ_luns
, 
dev
->
max_luns_ö_group
);

5164 
sb
->
sub_group
[
j
].
°¨t_lun
 = j * 
dev
->
max_luns_ö_group
;

5165 
sb
->
sub_group
[
j
].
∑rôy_lun_off£t
 =Öarity_lun_offset;

5166 
sb
->
sub_group
[
j
].
fú°_lun_off£t
 = (
∑rôy_lun_off£t
 + 1 + 
dev
->
max_luns_ö_group
) % dev->max_luns_in_group;

5168 i‡(
dev
->
rŸ©e_∑rôy
)

5169 
∑rôy_lun_off£t
 = (∑rôy_lun_off£à+ 1Ë% 
dev
->
max_luns_ö_group
;

5171 
sb
->
ªad_cou¡
 = (
u32
 *)(
dev
->ªad_cou¡ + (u32Ë* dev->
lun_cou¡
 * 
i
);

5172 
sb
->
max_ªad_cou¡
 = 0;

5173 
sb
->
œ°_îa£d_time°amp
 = 
	`gë_jiffõs
();

5174 
sb
->
œ°_˛o£d_time°amp
 = 
	`gë_jiffõs
();

5177 
	`™Æyze_bad_phy_lun_m≠
(
dev
);

5178 
dev
->
max_avaûabÀ_groups
 = 
	`sh™n⁄_©omic_ªad
(&dev->
sbs
[2].
avaûabÀ_groups
);

5179 i‡(
dev
->
max_avaûabÀ_groups
 == 0) {

5180 
	`sh™n⁄_îr
("max_available_groups is 0.\n");

5183 
	`sh™n⁄_öfo
("%s: max_avaûabÀ_luns=%d, max_avaûabÀ_groups=%d.\n", 
dev
->
sdisk
.
disk_«me
, dev->
max_avaûabÀ_luns
, dev->
max_avaûabÀ_groups
);

5185 i‡(
	`sh™n⁄_dev_is_g5_ffß
(
dev
Ë&& (dev->
max_avaûabÀ_luns
 > 256Ë&& (dev->
∑rôy_groups
 < 2)) {

5186 
	`sh™n⁄_îr
("FFSA controller should haveátÜeast 2Ñaid groups.\n");

5190 
	`£t_avaûabÀ_øid_°rùes
(
dev
);

5191 
	`£t_ïûog_size
(
dev
);

5192 i‡(
	`sh™n⁄_Æloc_ïûogs
(
dev
) < 0) {

5193 
	`sh™n⁄_îr
("shannon_alloc_epilogs failed!\n");

5194  -
ENOMEM
;

5198 i‡(
	`ªad_bbt_öfo
(
dev
) < 0)

5201 i‡(
	`sh™n⁄_dev_is_g5
(
dev
Ë&& dev->
•oﬁ
) {

5202 i‡(
	`ªad_poﬁ_öfo_g5
(
dev
) < 0)

5206 i‡(
dev
->
ªcovî_°©e
 =
RECOVER_DEAD
) {

5207 
	`sh™n⁄_îr
("read bbt info failed.\n");

5211 
	`™Æyze_bbt_öfo
(
dev
);

5213 i‡(
dev
->
√w_bad_lun
->
bad_lun_Êag
 == ~0) {

5214 
	`sh™n⁄_îr
("moreÅhan oneÜunáre broken.\n");

5216 } i‡(
dev
->
√w_bad_lun
->
bad_lun_Êag
) {

5217 
i
 = 0; i < 
dev
->
∑rôy_groups
; i++)

5218 i‡(
dev
->
√w_bad_lun
->
group_bad_lun
[
i
])

5219 
	`ªcovî_bad_lun_bbt
(
dev
, 
i
);

5220 
	`£t_ªcovî_°©e_w¨nög
(
dev
);

5223 i‡(
dev
->
ªcovî_°©e
 =
RECOVER_DEAD
) {

5224 
	`sh™n⁄_îr
("%s:Ñecovî bad_lu¿Áûed.\n", 
dev
->
sdisk
.
disk_«me
);

5228 
dev
->
öô_d⁄e
 = 
STAGE_BBT_DONE
;

5230 i‡(
dev
->
•oﬁ
 && (dev->•oﬁ->
⁄löe_sdev_cou¡
 == 1)) {

5231 i‡(
	`öô_«me•a˚s
(
dev
->
•oﬁ
))

5234 
	`sdev_m≠_èbÀ_íabÀ
(
dev
);

5236 
	`sh™n⁄_öfo
("startÑecoverÉpilog.\n");

5237 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

5238 
sb
 = 
dev
->
sbs
 + 
i
;

5239 i‡(
dev
->
ovîœp_wrôe
 && dev->
mbr
.
ovîœp_sblk
 =
sb
->
sb_ödex
) {

5240 
	`debugs0
("skù ovîœ∞sblk sb_ödex=%d f‹ÑecovîögÉpûog.\n", 
sb
->
sb_ödex
);

5241 
	`ªöôülize_sb
(
dev
, 
sb
);

5242 
sb
->
°©e
 = 
OVERLAP_BLOCK
;

5243 
sb
->
wr_off£t
 = ~0;

5246 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_groups
Ë=
dev
->
max_avaûabÀ_groups
) {

5247 
	`ªöôülize_sb
(
dev
, 
sb
);

5248 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
‰ì_blocks_lock
);

5249 
	`sh™n⁄_li°_add_èû
(&
dev
->
sbs
[
i
].
li°
, &dev->
‰ì_blocks
);

5250 
dev
->
‰ì_blk˙t
++;

5251 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
‰ì_blocks_lock
);

5252 
ªåõs
 = 0;

5253 
	`sh™n⁄_©omic_ªad
(&
dev
->
logicb_buf_cou¡
Ë> 
MAX_LOGICB_BUF_COUNT
/2) {

5254 
	`sh™n⁄_m¶ìp
(1);

5255 
ªåõs
++;

5256 i‡((
ªåõs
 % 10000) == 5000)

5257 
	`sh™n⁄_öfo
("%s, waitÜogicb_buf_count=%d.\n",

5258 
dev
->
sdisk
.
disk_«me
, 
	`sh™n⁄_©omic_ªad
(&dev->
logicb_buf_cou¡
));

5260 i‡(
	`ªad_ïûog
(
sb
)) {

5261 
	`£t_ªcovî_°©e_dód
(
dev
);

5264 
	`sh™n⁄_©omic_öc
(&
dev
->
ªcovî_d⁄e
);

5265 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
Ë< 
INIT_EPILOG_COUNT
);

5266 i‡((
i
 % 100) == 0) {

5267 
	`sh™n⁄_öfo
("%s:Ñecovî %d su≥rblock'†ïûog d⁄e.\n", 
dev
->
sdisk
.
disk_«me
, 
i
);

5270 
sb
->
°©e
 = 
DISCARDED_BLOCK
;

5271 
	`sh™n⁄_©omic_öc
(&
dev
->
disˇrded_blk˙t
);

5272 
	`m¨k_su≥r_block_bad
(
sb
);

5274 
	`sh™n⁄_c⁄d_ªsched
();

5276 i‡(
dev
->
∂ug_out
) {

5277 
	`sh™n⁄_w¨n
("the disk isÖlug out whenÑecoveringÉpilog.\n");

5278 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
) == 0);

5283 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
) == 0);

5284 i‡(
dev
->
ªcovî_°©e
 =
RECOVER_DEAD
) {

5285 
	`sh™n⁄_îr
("%s:ÉpûogÑecovîy faûed.\n", 
dev
->
sdisk
.
disk_«me
);

5288 
	`sh™n⁄_ªÀa£_ªbuûd_ïûogs
(
dev
);

5290 
	`sh™n⁄_öfo
("recoverÉpilog done.\n");

5292 i‡(
dev
->
‰ì_blk˙t
 == 0) {

5293 
hód_ödex
 = 0; hód_ödex < 
dev
->
hód_cou¡
; head_index++) {

5294 i‡(!
dev
->
œ°_blk
[
hód_ödex
]) {

5295 
	`sh™n⁄_îr
("physiˇ»disk fuŒ, buàˇ¬Ÿ födÜa°_blk, hód_ödex=%d.\n", 
hód_ödex
);

5296 
	`£t_ªcovî_°©e_dód
(
dev
);

5297 
dód
;

5300 i‡((
dev
->
œ°_blk
[
hód_ödex
]->
°©e
 !
WAIT_ERASE_BLOCK
) &&

5301 (
dev
->
œ°_blk
[
hód_ödex
]->
°©e
 !
COLD_BLOCK_LIST
)) {

5302 
	`sh™n⁄_îr
("last_blk=%d should be wait_erase_blk, but state=%d, head_index=%d, valid_pages=%d,Çext_sb=%d.\n",

5303 
dev
->
œ°_blk
[
hód_ödex
]->
sb_ödex
, dev->œ°_blk[hód_ödex]->
°©e
, head_index,

5304 
	`sh™n⁄_©omic_ªad
(&
dev
->
œ°_blk
[
hód_ödex
]->
vÆid_∑ges
), dev->œ°_blk[hód_ödex]->
√xt_sb
);

5305 
	`£t_ªcovî_°©e_dód
(
dev
);

5306 
dód
;

5308 
	`ªmove_sb_‰om_some_li°
(
dev
, dev->
œ°_blk
[
hód_ödex
]);

5309 
dev
->
œ°_blk
[
hód_ödex
]->
°©e
 = 
œ°_blk_°©e
[head_index];

5311 !
	`sh™n⁄_li°_em±y
(&
dev
->
waô_îa£d
)) {

5312 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
dev
->
waô_îa£d
, 
sh™n⁄_sb
, 
li°
);

5313 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

5314 
dev
->
waô_îa£d_blk˙t
--;

5315 
	`sh™n⁄_©omic_öc
(&
dev
->
îa£_dummy_d⁄e
);

5316 
	`îa£_su≥r_block
(
dev
, 
sb
, 0, 1);

5318 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
dev
->
îa£_dummy_d⁄e_evít
,

5319 
	`sh™n⁄_©omic_ªad
(&
dev
->
îa£_dummy_d⁄e
) == 0);

5323 
hód_ödex
 = 0; head_index < 2; head_index++) {

5324 
dev
->
wr_sb
[
hód_ödex
] = -1;

5325 
dev
->
a˘ive_blk
[
hód_ödex
] = 
NULL
;

5327 
hód_ödex
 = 0; hód_ödex < 
dev
->
hód_cou¡
; head_index++) {

5328 
	`debugs3
("%s: Now wê°¨àtÿªcovîÅhêa˘ivê%†block >>>\n", 
dev
->
sdisk
.
disk_«me
, (
hód_ödex
 =
HOT_INDEX
)?"hot":"cold");

5329 i‡(
dev
->
œ°_blk
[
hód_ödex
]) {

5330 i‡(
dev
->
œ°_blk
[
hód_ödex
]->
°©e
 =
u£d_blk_°©e
[head_index]) {

5331 
	`sh™n⁄_li°_dñ_öô
(&
dev
->
œ°_blk
[
hód_ödex
]->
li°
);

5332 
dev
->
u£d_blk˙t
[
hód_ödex
]--;

5333 
dev
->
œ°_blk
[
hód_ödex
]->
°©e
 = 
œ°_blk_°©e
[head_index];

5335 
dev
->
wr_sb
[
hód_ödex
] = dev->
œ°_blk
[hód_ödex]->
√xt_sb
;

5337 
dev
->
wr_sb
[
hód_ödex
] = dev->
vîy_öôül_sblk
[head_index];

5340 i‡(
dev
->
wr_sb
[
hód_ödex
] > dev->
sb_cou¡
) {

5341 
	`sh™n⁄_îr
("active blk index is beyond superblock counts. head_index=%d,áctive_blk=%d, sb_count=%d.\n",

5342 
hód_ödex
, 
dev
->
wr_sb
[hód_ödex], dev->
sb_cou¡
);

5343 
	`£t_ªcovî_°©e_dód
(
dev
);

5344 
dód
;

5347 
dev
->
a˘ive_blk
[
hód_ödex
] = &dev->
sbs
[dev->
wr_sb
[head_index]];

5348 
dev
->
a˘ive_blk
[
hód_ödex
]->
°©e
) {

5349 
WAIT_COPY_BLOCK
:

5350 
WAIT_ERASE_BLOCK
:

5351 
RECOVER_ERR_BLOCK
:

5352 
	`sh™n⁄_w¨n
("active_blk head_index=%d, sb=%d, state=%d.\n",

5353 
hód_ödex
, 
dev
->
wr_sb
[hód_ödex], dev->
a˘ive_blk
[hód_ödex]->
°©e
);

5354 
FREE_BLOCK
:

5355 
	`ªmove_sb_‰om_some_li°
(
dev
, dev->
a˘ive_blk
[
hód_ödex
]);

5358 
	`sh™n⁄_îr
("sb_index=%d should beáctive block, but its state=%d.\n",

5359 
dev
->
a˘ive_blk
[
hód_ödex
]->
sb_ödex
, dev->a˘ive_blk[hód_ödex]->
°©e
);

5360 
	`£t_ªcovî_°©e_dód
(
dev
);

5361 
dód
;

5363 
dev
->
a˘ive_blk
[
hód_ödex
]->
°©e
 = 
a˘ive_blk_°©e
[head_index];

5364 
dev
->
a˘ive_blk
[
hód_ödex
]->head_index = head_index;

5366 
dev
->
a˘ive_blk
[
hód_ödex
]->
ïûog
 = 
	`ïûog_Æloc
(dev->a˘ive_blk[hód_ödex]->
ïûog_size
, dev);

5367 i‡(
dev
->
a˘ive_blk
[
hód_ödex
]->
ïûog
 =
NULL
) {

5368 
	`sh™n⁄_îr
("Can'tállocateÉnough memory forÉpilog.\n");

5369 
dód
;

5372 i‡(
dev
->
a˘ive_blk
[
hód_ödex
]->
√xt_sb
 !
INVALID_SB_INDEX
) {

5373 
sh™n⁄_sb
 *
√xt_sb
 = 
dev
->
sbs
 + dev->
a˘ive_blk
[
hód_ödex
]->next_sb;

5374 i‡(
√xt_sb
->
°©e
 !
FREE_BLOCK
)

5375 
	`sh™n⁄_w¨n
("head_index=%d,Çext_sb=%d, state=%d.\n",

5376 
hód_ödex
, 
√xt_sb
->
sb_ödex
,Çext_sb->
°©e
);

5377 
	`ªmove_sb_‰om_some_li°
(
dev
, 
√xt_sb
);

5378 
√xt_sb
->
°©e
 = 
√xt_blk_°©e
[
hód_ödex
];

5379 
√xt_sb
->
hód_ödex
 = head_index;

5380 
√xt_sb
->
ïûog
 = 
	`ïûog_Æloc
“ext_sb->
ïûog_size
, 
dev
);

5381 i‡(
√xt_sb
->
ïûog
 =
NULL
)

5382 
	`£t_ªcovî_°©e_îr‹
(
dev
);

5386 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
sb
, 
sb_tmp
, &
dev
->
waô_c›y
, 
li°
) {

5387 
	`sh™n⁄_öfo
("%s: sˇ¿su≥∏block %d.\n", 
dev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
);

5388 
	`sh™n⁄_©omic_öc
(&
dev
->
ªcovî_d⁄e
);

5389 i‡(
	`sˇn_su≥r_block
(
sb
, 0, 0)) {

5390 
	`sh™n⁄_©omic_dec
(&
dev
->
ªcovî_d⁄e
);

5392 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
) == 0);

5394 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
vÆid_∑ges
) == 0) {

5395 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

5396 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_c›y_lock
);

5397 
dev
->
waô_c›y_blk˙t
--;

5398 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

5399 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_c›y_lock
);

5400 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

5401 
	`sh™n⁄_•ö_lock
(&
dev
->
waô_îa£d_lock
);

5402 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
dev
->
waô_îa£d
);

5403 
dev
->
waô_îa£d_blk˙t
++;

5404 
	`sh™n⁄_•ö_u∆ock
(&
dev
->
waô_îa£d_lock
);

5405 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

5409 
dev
->
öô_d⁄e
 = 
STAGE_RECOVER_USED_DONE
;

5410 
	`ª°‹e_îa£_cou¡î
(
dev
);

5411 
dev
->
powî_⁄_jiffõs
 = 
	`gë_jiffõs
();

5412 
dev
->
powî_⁄_£c⁄ds_hi°‹y
 = dev->
powî_⁄_£c⁄ds
;

5413 
hód_ödex
 = 0; hód_ödex < 
dev
->
hód_cou¡
; head_index++) {

5415 
	`sh™n⁄_öfo
("%s: sèπÑecovî %†a˘ivêsu≥∏block.\n", 
dev
->
sdisk
.
disk_«me
, \

5416 (
hód_ödex
 =
HOT_INDEX
) ? "hot" : "cold");

5417 
dev
->
wr_group
[
hód_ödex
] = 0;

5418 
dev
->
lun_ö_group
[
hód_ödex
] = 0;

5419 
dev
->
wr_lun_off£t
[
hód_ödex
] = dev->
a˘ive_blk
[hód_ödex]->
sub_group
[0].
fú°_lun_off£t
;

5420 
dev
->
wr_∑ge
[
hód_ödex
] = dev->
wr_logicb
[head_index] = 0;

5421 
dev
->
wr_chunk
[
hód_ödex
] = 0;

5422 
dev
->
a˘ive_blk_°¨t_jiffõs
[
hód_ödex
] = 
	`gë_jiffõs
();

5424 
	`sh™n⁄_©omic_öc
(&
dev
->
ªcovî_d⁄e
);

5425 i‡(
	`ªcovî_a˘ive_blk
(
dev
, dev->
a˘ive_blk
[
hód_ödex
])) {

5426 
	`sh™n⁄_îr
("failedÅoÑecover %sáctive blkÖage.\n",

5427 (
hód_ödex
 =
HOT_INDEX
)?"hot":"cold");

5428 
dód
;

5431 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
) == 0);

5434 i‡(
dev
->
ªcovî_°©e
 =
RECOVER_DEAD
) {

5435 
	`sh™n⁄_îr
("%s:Ñecovîá˘ive_blk faûed.\n", 
dev
->
sdisk
.
disk_«me
);

5436 
dód
;

5439 
dev
->
öô_d⁄e
 = 
STAGE_RECOVER_ACTIVE_DONE
;

5440 
	`sh™n⁄_öfo
("recoveráctive super blocks done.\n");

5441 i‡(
dev
->
•oﬁ
 && dev =dev->•oﬁ->
sdevs
[0]) {

5442 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

5443 
sh™n⁄_«me•a˚
 *
ns
 = 
dev
->
•oﬁ
->ns[
i
];

5444 
lun_pba
 
pba
;

5445 i‡(!
ns
 ||Çs->
d©a_pba
.
lun_pba
 =0x03fffff‡||Çs->
d©a
->
vîsi⁄
)

5447 
pba
 = 
ns
->
d©a_pba
;

5448 
ns
->
d©a_pba
.
lun_pba
 = 0x03ffffff;

5449 
	`ªcovî_ns_d©a
(
ns
, 
pba
);

5451 
	`sh™n⁄_waô_evít
(
dev
->
•oﬁ
->
ªcovî_ns_d©a_d⁄e_evít
,

5452 
	`sh™n⁄_©omic_ªad
(&
dev
->
•oﬁ
->
ªcovî_ns_d©a_d⁄e
) == 0);

5455 i‡(
dev
->
ovîœp_wrôe
) {

5456 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&((
dev
->
sbs
 + dev->
mbr
.
ovîœp_sblk
)->
li°
)));

5457 
	`sh™n⁄_©omic_öc
(&
dev
->
ªcovî_d⁄e
);

5458 i‡(
	`ªcovî_ovîœp_blk
(
dev
, 0, 
NULL
)) {

5459 
	`sh™n⁄_îr
("%s:Ñecovî ovîœ∞block faûed.\n", 
dev
->
sdisk
.
disk_«me
);

5460 
	`£t_ªcovî_°©e_dód
(
dev
);

5461 
dód
;

5463 
	`sh™n⁄_waô_evít
(
dev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&dev->
ªcovî_d⁄e
) == 0);

5464 i‡(
dev
->
ªcovî_°©e
 =
RECOVER_DEAD
) {

5465 
	`sh™n⁄_îr
("%s:Ñecovî ovîœ∞block beˇmêdód.\n", 
dev
->
sdisk
.
disk_«me
);

5466 
dód
;

5469 i‡(!
dev
->
ªad⁄ly_ªas⁄
)

5470 
	`¥ï¨e_ovîœp_pba
(
dev
);

5471 } i‡(
dev
->
ovîœp
) {

5472 
sh™n⁄_sb
 *
ﬁ_sb
 = 
	`gë_√w_‰ì_sb
(
dev
);

5473 
sh™n⁄_ovîœp
 *
ﬁ
 = 
dev
->
ovîœp
;

5474 i‡(
ﬁ_sb
 =
NULL
) {

5475 
	`sh™n⁄_îr
("%s: faûedÅÿgë fªêblock f‹ ovîœ∞wrôe.\n", 
dev
->
sdisk
.
disk_«me
);

5476 
dód
;

5479 
ﬁ_sb
->
°©e
 = 
OVERLAP_BLOCK
;

5480 
ﬁ_sb
->
hód_ödex
 = 
OVERLAP_INDEX
;

5481 
ﬁ_sb
->
£q_num
 = 
MAX_SEQ_NUM
;

5482 
	`sh™n⁄_öfo
("%s: gë sb_ödex=%d f‹ ovîœ∞wrôe.\n", 
dev
->
sdisk
.
disk_«me
, 
ﬁ_sb
->
sb_ödex
);

5484 
dev
->
ovîœp_wrôe
 = 1;

5485 
dev
->
mbr
.
„©uª_Êags
 |
OVERLAP_WRITE
;

5486 
dev
->
mbr
.
ovîœp_sblk
 = 
ﬁ_sb
->
sb_ödex
;

5487 i‡(
	`ª‰esh_mbr_g5
(
dev
, 0) < 0) {

5488 
	`sh™n⁄_îr
("%s: faûedÅÿª‰esh mb∏f‹ upd©ög ovîœ∞wrôe.\n", 
dev
->
sdisk
.
disk_«me
);

5489 
dód
;

5491 
ﬁ
->
wr_lun
 = 
	`√xt_ovîœp_lun
(
dev
, 
ﬁ_sb
, 0);

5492 
ﬁ
->
wr_chunk
 = 0;

5493 
ﬁ
->
wr_∑ge
 = 0;

5494 
ﬁ
->
wr_logicb
 = 0;

5495 
ﬁ
->
wr_∂™e
 = 0;

5497 i‡(!
dev
->
ªad⁄ly_ªas⁄
)

5498 
	`¥ï¨e_ovîœp_pba
(
dev
);

5501 i‡(!
dev
->
ªad⁄ly_ªas⁄
) {

5503 i‡(
	`check_™d_ª˛aim_sb
(
dev
)) {

5504 
	`sh™n⁄_îr
("%s: checkándÑe˛aim blk faûed.\n", 
dev
->
sdisk
.
disk_«me
);

5505 
	`£t_ªcovî_°©e_dód
(
dev
);

5506 
dód
;

5509 
	`sh™n⁄_öfo
("%s: %†i†ªad⁄ly, C™àcheckándÑe˛aim sb.\n", 
__func__
, 
dev
->
sdisk
.
disk_«me
);

5511 i‡(
dev
->
•oﬁ
)

5512 
dev
->
max_£˘‹s
 = 
	`ˇlcuœã_physiˇl_ˇ∑côy
(dev);

5514 
	`sh™n⁄_b¨rõr
();

5515 
dev
->
öô_d⁄e
 = 
STAGE_RECOVER_DONE
;

5516 
	`debugs3
("RecoverÅheáctive blocks done. <<<\n");

5518 i‡(
dev
->
ªc⁄fig_suµ‹t
 == 0) {

5519 
	`ªad_£u_öfo
(
dev
);

5521 
dev
->
£u_¸c_îr‹
 = 0;

5522 
dev
->
£u_ecc_îr‹
 = 0;

5525 i‡(
dev
->
‰ì_blk˙t
 <
GC_THRESHOLD_N1L
)

5526 
dev
->
gc_thªad_°©e
 = 
IN_GC_STATE
;

5529 
	`debug_¥öt
("HOT: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

5530 
dev
->
wr_sb
[0], dev->
wr_lun_off£t
[0], dev->
wr_chunk
[0], dev->
wr_∂™e
[0], dev->
wr_∑ge
[0], dev->
wr_logicb
[0]);

5531 
	`debug_¥öt
("COLD: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

5532 
dev
->
wr_sb
[1], dev->
wr_lun_off£t
[1], dev->
wr_chunk
[1], dev->
wr_∂™e
[1], dev->
wr_∑ge
[1], dev->
wr_logicb
[1]);

5534 #ifde‡
CONFIG_SHANNON_PLVERIFY


5535 
	`sh™n⁄_mem£t
(
dev
->
boŸög_waô_îa£d
, 0xFF, (dev->booting_wait_erased));

5536 
i
 = 0;

5537 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
waô_îa£d_lock
);

5538 
	`sh™n⁄_li°_f‹_óch_íåy
(
sb
, &
dev
->
waô_îa£d
, 
li°
) {

5539 
dev
->
boŸög_waô_îa£d
[
i
++] = 
sb
->
sb_ödex
;

5540 i‡(
i
 =
	`ARRAY_SIZE
(
dev
->
boŸög_waô_îa£d
))

5543 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
waô_îa£d_lock
);

5548 
dód
:

5549 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

5550 i‡(
dev
->
a˘ive_blk
[
i
] !
NULL
 && dev->a˘ive_blk[i]->
ïûog
 != NULL)

5551 
	`sb_‰ì_ïûog
(
dev
->
a˘ive_blk
[
i
]);

5554 
	}
}

5556 
	$sbs_˛ón_≥riod_ªad_d⁄e
(
sh™n⁄_dev
 *
sdev
)

5558 
i
;

5559 
sh™n⁄_sb
 *
sb
;

5561 
i
 = 0; i < 
sdev
->
sb_cou¡
; i++) {

5562 
sb
 = &
sdev
->
sbs
[
i
];

5563 
	`sh™n⁄_©omic_£t
(&
sb
->
≥riod_ªad_d⁄e
, 0);

5566 
sdev
->
≥riod_ªad
.
a˘ive_d⁄e
[0] = 0;

5567 
sdev
->
≥riod_ªad
.
a˘ive_d⁄e
[1] = 0;

5568 
sdev
->
≥riod_ªad
.
œ°_blk_d⁄e
[0] = 0;

5569 
sdev
->
≥riod_ªad
.
œ°_blk_d⁄e
[1] = 0;

5570 
	}
}

5572 
	$≥riod_ªad_dißbÀ
(
sh™n⁄_dev
 *
sdev
)

5574 
sdev
->
≥riod_ªad
.
°©e
 = 
PERIOD_READ_DISABLE
;

5575 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_≥riod_ªad_wq
);

5576 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
≥riod_ªad_timî
);

5577 
sdev
->
≥riod_ªad
.
_öãrvÆ
 = 0;

5578 
	}
}

5580 
	$do_√xt_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
)

5582 
u32
 
tŸÆ_u£d_blk˙t
;

5583 
u64
 
≥riod
 = 
sdev
->
≥riod_ªad
.period;

5585 
tŸÆ_u£d_blk˙t
 = 
sdev
->
u£d_blk˙t
[0] + sdev->used_blkcnt[1] + 2;

5586 i‡(
tŸÆ_u£d_blk˙t
 > (
PERIOD_READ_THRESHOLD
 - 1))

5587 
sdev
->
≥riod_ªad
.
_öãrvÆ
 = (
≥riod
 * 
	`gë_HZ
(Ë* (
PERIOD_READ_THRESHOLD
 - 1) \

5588 / 
PERIOD_READ_THRESHOLD
Ë/ (
tŸÆ_u£d_blk˙t
 + 2);

5590 
sdev
->
≥riod_ªad
.
_öãrvÆ
 = 
≥riod
 * 
	`gë_HZ
(Ë/ 
PERIOD_READ_THRESHOLD
;

5591 
	`sh™n⁄_mod_timî
(&
sdev
->
≥riod_ªad_timî
, 
	`gë_jiffõs
(Ë+ sdev->
≥riod_ªad
.
_öãrvÆ
);

5592 
	}
}

5594 
	$≥riod_ªad_íabÀ
(
sh™n⁄_dev
 *
sdev
)

5596 i‡(
sdev
->
sdisk
.
exô
)

5598 i‡(
sdev
->
∂ug_out
)

5600 i‡((
sdev
->
≥riod_ªad
.
≥riod
 <= 0) || \

5601 (
sdev
->
≥riod_ªad
.
µa
 < 0) || \

5602 (
sdev
->
≥riod_ªad
.
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
∂™es
))

5604 i‡(
sdev
->
≥riod_ªad
.
°©e
 =
PERIOD_READ_DISABLE
) {

5605 
sdev
->
≥riod_ªad
.
°©e
 = 
PERIOD_READ_ENABLE
;

5606 
sdev
->
≥riod_ªad
.
mö_£q_num
 = 0;

5607 
sdev
->
≥riod_ªad
.
max_£q_num
 = ~0x0;

5608 
	`sbs_˛ón_≥riod_ªad_d⁄e
(
sdev
);

5609 
	`do_√xt_≥riod_ªad
(
sdev
);

5612 
	}
}

5614 
	#DEFAULT_PERIOD_READ_INTERVAL
 (10)

5615 
	`ªöô_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
)

	)

5617 i‡((
	gsdev
->
	g≥riod_ªad
.
	g≥riod
 <= 0) || \

5618 (
sdev
->
≥riod_ªad
.
µa
 < 0) || \

5619 (
sdev
->
≥riod_ªad
.
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
∂™es
)) {

5620 
sdev
->
≥riod_ªad
.
≥riod
 = 
DEFAULT_PERIOD_READ_INTERVAL
 * sdev->
sb_cou¡
;

5621 
	gsdev
->
	g≥riod_ªad
.
	gµa
 = 
sdev
->
∑ges_ö_eblock
 - 1;

5625 
	$ˇn_≥riod_ªad
(
sh™n⁄_dev
 *
sdev
)

5627 i‡(
sdev
->
sdisk
.
exô
)

5629 i‡(
sdev
->
∂ug_out
)

5631 i‡(
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
)

5633 i‡(
sdev
->
≥riod_ªad
.
°©e
 =
PERIOD_READ_DISABLE
)

5635 i‡((
sdev
->
≥riod_ªad
.
≥riod
 <= 0) || \

5636 (
sdev
->
≥riod_ªad
.
µa
 < 0) || \

5637 (
sdev
->
≥riod_ªad
.
µa
 >sdev->
∑ges_ö_eblock
 * sdev->
∂™es
))

5641 
	}
}

5643 
sh™n⁄_sb
 *
	$gë_≥riod_ªad_sb
(
sh™n⁄_dev
 *
dev
)

5645 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
p
, *
a˘ive_blk
;

5646 
i
;

5647 
u64
 
mö_£q_num
 = ~0x0;

5649 i‡((
dev
->
u£d_blk˙t
[0] == 0) && (dev->used_blkcnt[1] == 0))

5650 
gë_a˘ive_blk
;

5651 i‡(
dev
->
≥riod_ªad
.
mö_£q_num
 >dev->≥riod_ªad.
max_£q_num
)

5652 
gë_a˘ive_blk
;

5654 
i
 = 
dev
->
hód_cou¡
 - 1; i >= 0; i--) {

5655 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
u£d_blocks_lock
[
i
]);

5656 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
dev
->
u£d_blocks
[
i
], 
li°
) {

5657 i‡((
	`sh™n⁄_©omic_ªad
(&
p
->
≥riod_ªad_d⁄e
) != 0) || \

5658 (
	`sh™n⁄_©omic_ªad
(&
p
->
vÆid_∑ges
) == 0) || \

5659 (
	`sh™n⁄_©omic_ªad
(&
p
->
ö_≥riod_ªad
) != 0))

5661 i‡((
p
->
£q_num
 > 
dev
->
≥riod_ªad
.
mö_£q_num
) && \

5662 (
p
->
£q_num
 <
dev
->
≥riod_ªad
.
max_£q_num
) && \

5663 (
p
->
£q_num
 < 
mö_£q_num
)) {

5664 
mö_£q_num
 = 
p
->
£q_num
;

5665 
sb
 = 
p
;

5668 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
u£d_blocks_lock
[
i
]);

5671 
gë_a˘ive_blk
:

5672 i‡(!
sb
) {

5673 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

5674 
a˘ive_blk
 = 
dev
->
œ°_blk
[
i
];

5675 i‡(
a˘ive_blk
 =
NULL
)

5677 i‡(!
	`is_œ°_blk
(
a˘ive_blk
)) {

5678 
dev
->
≥riod_ªad
.
œ°_blk_d⁄e
[
i
] = 1;

5681 i‡((
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
≥riod_ªad_d⁄e
) == 0) && \

5682 (
dev
->
≥riod_ªad
.
œ°_blk_d⁄e
[
i
] == 0) && \

5683 (
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
ö_≥riod_ªad
) == 0)) {

5684 i‡(
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
vÆid_∑ges
) != 0) {

5685 
sb
 = 
a˘ive_blk
;

5686 
dev
->
≥riod_ªad
.
œ°_blk_d⁄e
[
i
] = 1;

5693 i‡(!
sb
) {

5694 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

5695 
a˘ive_blk
 = 
dev
->a˘ive_blk[
i
];

5696 i‡((
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
≥riod_ªad_d⁄e
) == 0) && \

5697 (
dev
->
≥riod_ªad
.
a˘ive_d⁄e
[
i
] == 0) && \

5698 (
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
ö_≥riod_ªad
) == 0)) {

5699 i‡((
dev
->
wr_chunk
[
i
] > (dev->
≥riod_ªad
.
µa
 % dev->
∑ges_ö_eblock
)) && \

5700 (
	`sh™n⁄_©omic_ªad
(&
a˘ive_blk
->
vÆid_∑ges
) != 0)) {

5701 
sb
 = 
a˘ive_blk
;

5702 
dev
->
≥riod_ªad
.
a˘ive_d⁄e
[
i
] = 1;

5709  
sb
;

5710 
	}
}

5712 
ölöe
 
sh™n⁄_sb
 *
	$gë_√w_‰ì_sb
(
sh™n⁄_dev
 *
dev
)

5714 
sh™n⁄_sb
 *
sb
 = 
NULL
;

5716 
__echo_ö
;

5717 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
‰ì_blocks_lock
);

5718 i‡(
	`sh™n⁄_li°_em±y
(&
dev
->
‰ì_blocks
)) {

5719 
	`sh™n⁄_w¨n
("Nÿm‹ê‰ì_block†!!! fªe_blk˙t=%d.\n", 
dev
->
‰ì_blk˙t
);

5720 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
‰ì_blocks_lock
);

5721  
NULL
;

5723 
	`BUG_ON
(
dev
->
‰ì_blk˙t
 == 0);

5724 
sb
 = 
	`sh™n⁄_li°_fú°_íåy
(&
dev
->
‰ì_blocks
, 
sh™n⁄_sb
, 
li°
);

5725 
	`sh™n⁄_li°_dñ_öô
(&
sb
->
li°
);

5726 
dev
->
‰ì_blk˙t
--;

5727 i‡(
dev
->
‰ì_blk˙t
 =
GC_THRESHOLD_N1L
) {

5728 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
gc_°©e_lock
);

5729 
dev
->
gc_thªad_°©e
 = 
IN_GC_STATE
;

5730 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
gc_°©e_lock
);

5731 i‡(
	`likñy
((
dev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& dev->
gc_thªad
)) {

5732 
	`sh™n⁄_wake_up_¥o˚ss
(
dev
->
gc_thªad
);

5733 i‡(!
	`sh™n⁄_timî_≥ndög
(&
dev
->
gc_timî
))

5734 
	`sh™n⁄_de„r_timî
(
dev
, 
	`gë_HZ
() * 10);

5737 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
‰ì_blocks_lock
);

5739  
sb
;

5740 
	}
}

5744 
	$gë_√w_hŸ_sb
(
sh™n⁄_dev
 *
dev
)

5746 
sh™n⁄_sb
 *
sb
;

5748 
sb
 = 
	`gë_√w_‰ì_sb
(
dev
);

5749 i‡(
sb
) {

5750 
sb
->
ïûog
 = 
	`ïûog_Æloc
(sb->
ïûog_size
, 
dev
);

5751 i‡(
sb
->
ïûog
 =
NULL
) {

5752 
	`sh™n⁄_w¨n
("Can'tállocateÉnough memory forÉpilog.\n");

5753 
	`add_sb_to_‰ì_li°
(
dev
, 
sb
);

5754  
INVALID_SB_INDEX
;

5756 
sb
->
°©e
 = 
NEXT_HOT_BLOCK
;

5757 
sb
->
hód_ödex
 = 
HOT_INDEX
;

5758  
sb
->
sb_ödex
;

5761  
INVALID_SB_INDEX
;

5762 
	}
}

5766 
	$gë_√w_cﬁd_sb
(
sh™n⁄_dev
 *
dev
)

5768 
sh™n⁄_sb
 *
sb
;

5770 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


5771 
	`BUG_ON
(!
dev
->
u£_duÆ_hód
);

5773 
sb
 = 
	`gë_√w_‰ì_sb
(
dev
);

5774 i‡(
sb
) {

5775 
sb
->
ïûog
 = 
	`ïûog_Æloc
(sb->
ïûog_size
, 
dev
);

5776 i‡(
sb
->
ïûog
 =
NULL
) {

5777 
	`sh™n⁄_w¨n
("Can'tállocateÉnough memory forÉpilog.\n");

5778 
	`add_sb_to_‰ì_li°
(
dev
, 
sb
);

5779  
INVALID_SB_INDEX
;

5781 
sb
->
°©e
 = 
NEXT_COLD_BLOCK
;

5782 
sb
->
hód_ödex
 = 
COLD_INDEX
;

5783  
sb
->
sb_ödex
;

5786  
INVALID_SB_INDEX
;

5787 
	}
}

5789 
	$gë_√xt_sb
(
sh™n⁄_dev
 *
sdev
, 
hód
)

5791 
sb_ödex
;

5792 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

5794 i‡(
hód_ödex
 =
HOT_INDEX
)

5795 
sb_ödex
 = 
	`gë_√w_hŸ_sb
(
sdev
);

5796 i‡(
hód_ödex
 =
COLD_INDEX
)

5797 
sb_ödex
 = 
	`gë_√w_cﬁd_sb
(
sdev
);

5799 
	`sh™n⁄_îr
("hód_ödex i†unknown. hód_ödex = %d.\n", 
hód_ödex
);

5800 
sb_ödex
 = 
INVALID_SB_INDEX
;

5803  
sb_ödex
;

5804 
	}
}

5806 
	$≥riod_ªad_sb_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

5808 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

5809 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

5810 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

5812 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

5813 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

5814 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

5815 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

5816 
ªq
->
ªcovî_buf
 = 
NULL
;

5818 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
,Ñeq->
dma_dú
);

5820 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

5821 
	`‰ì_ªq
(
ªq
);

5824 
	`‰ì_sbio
(
sbio
);

5825 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_≥riod_ªad
);

5826 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
sb
->
ö_≥riod_ªad
) != 0);

5828 
__echo_out
;

5829 
	}
}

5831 
	$≥riod_ªad_sb
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
)

5833 
sh™n⁄_bio
 *
sbio
;

5834 
sh™n⁄_ªque°
 *
ªq
;

5835 
sub_group
 *
group
;

5836 
sb_lun_pba
;

5837 
group_ödex
, 
lun
, 
lun_off£t
, 
lun_ö_group
;

5838 
µa
;

5839 
u32
 
pba
;

5841 
µa
 = 
sdev
->
≥riod_ªad
.ppa;

5842 i‡((
µa
 < 0Ë|| (µ®>(
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
)))

5845 
__echo_ö
;

5847 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

5848 
sbio
->
logicbs
 = 
sdev
->
max_avaûabÀ_groups
 * 
sb
->
mö_avaûabÀ_luns
;

5849 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

5850 
	`£t_sbio_debug_èg
(
sbio
, 
READ_LAST_EPILOG_TAG
);

5851 
sbio
->
ˇŒback
 = 
≥riod_ªad_sb_ˇŒback
;

5852 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

5853 
sbio
->
d©a
 = 
sb
;

5855 
sb_lun_pba
 = 
sb
->
sb_ödex
 * 
sdev
->
logicbs_ö_siblög_eblock
;

5856 
pba
 = 
sb_lun_pba
 + 
µa
 * 
sdev
->
logicbs_ö_∑ge
;

5857 
group_ödex
 = 0; group_ödex < 
sdev
->
∑rôy_groups
; group_index++) {

5858 
group
 = &
sb
->
sub_group
[
group_ödex
];

5859 i‡(
group
->
phy_ödex
 < 0)

5861 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

5862 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

5863 
lun_ö_group
 = 0;

5865 i‡(
lun_ö_group
 =
sb
->
mö_d©a_luns
) {

5866 
lun_off£t
 = 
group
->
∑rôy_lun_off£t
;

5867 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

5870 
lun_off£t
 = (lun_off£à+ 1Ë% 
sdev
->
max_luns_ö_group
;

5871 
lun
 = 
group
->
°¨t_lun
 + 
lun_off£t
;

5872 } 
	`is_bad_lun
(
sb
, 
lun
));

5875 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

5876 
	`£t_ªq_debug_èg
(
ªq
, 
PERIOD_READ_TAG
, 
lun
);

5877 
	`£t_dummyªad_ªq
(
ªq
);

5878 
ªq
->
›code
 = 
sh_cmd_ªad
;

5879 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

5880 
ªq
->
£ndî
 = 
FROM_PERIOD_READ
;

5881 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

5882 
ªq
->
pba
.
lun
 =Üun;

5883 
ªq
->
pba
.
lun_pba
 =Öba;

5884 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

5885 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

5886 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

5887 
ªq
->
sbio
 = sbio;

5888 
sdev
->
≥riod_ªad
.
blk˙t
++;

5889 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

5890 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

5891 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

5893 
lun_ö_group
++;

5894 } 
lun_off£t
 !
group
->
∑rôy_lun_off£t
);

5897 
	`sh™n⁄_©omic_öc
(&
sb
->
≥riod_ªad_d⁄e
);

5899 
	}
}

5901 
	$£t_œ°_a˘ive_blk
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

5903 
sh™n⁄_sb
 *
sb
;

5905 i‡(
sdev
->
œ°_blk
[
hód_ödex
]) {

5906 
sb
 = 
sdev
->
œ°_blk
[
hód_ödex
];

5907 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
lock
);

5908 i‡(
sb
->
°©e
 =
œ°_blk_°©e
[
hód_ödex
]) {

5909 i‡(
	`u∆ikñy
(
	`sh™n⁄_ã°_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
))) {

5910 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
îr_blks_lock
);

5911 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
îr_blks
);

5912 
sb
->
°©e
 = 
ERROR_BLOCK
;

5913 
sdev
->
îr_blk˙t
++;

5914 
	`check_îr_blk˙t_öc
(
sdev
);

5915 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
îr_blks_lock
);

5917 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
u£d_blocks_lock
[
hód_ödex
]);

5918 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
sdev
->
u£d_blocks
[
hód_ödex
]);

5919 
sb
->
°©e
 = 
u£d_blk_°©e
[
hód_ödex
];

5920 
sdev
->
u£d_blk˙t
[
hód_ödex
]++;

5921 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
u£d_blocks_lock
[
hód_ödex
]);

5924 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
lock
);

5925 
sdev
->
œ°_blk
[
hód_ödex
] = 
NULL
;

5928 i‡(
sdev
->
a˘ive_blk
[
hód_ödex
]) {

5929 
sdev
->
a˘ive_blk
[
hód_ödex
]->
œ°_˛o£d_time°amp
 = 
	`gë_jiffõs
();

5930 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
a˘ive_blk
[
hód_ödex
]->
lock
);

5931 
sdev
->
œ°_blk
[
hód_ödex
] = sdev->
a˘ive_blk
[head_index];

5932 
sdev
->
œ°_blk
[
hód_ödex
]->
°©e
 = 
œ°_blk_°©e
[head_index];

5933 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
a˘ive_blk
[
hód_ödex
]->
lock
);

5935 
	}
}

5937 
	$move_to_√xt_chunk
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
hód_ödex
)

5939 
sub_group
 *
group
;

5941 
dev
->
lun_ö_group
[
hód_ödex
]++;

5942 i‡(
dev
->
lun_ö_group
[
hód_ödex
] =
sb
->
mö_d©a_luns
) {

5943 
dev
->
lun_ö_group
[
hód_ödex
] = 0;

5945 i‡(
	`add_wr_group_poöt
(
dev
, 
sb
, 
hód_ödex
) < 0) {

5946 
	`£t_œ°_a˘ive_blk
(
dev
, 
hód_ödex
);

5948 
dev
->
wr_chunk
[
hód_ödex
] = 0;

5949 
group
 = &
sb
->
sub_group
[
dev
->
wr_group
[
hód_ödex
]];

5952 
group
 = &
sb
->
sub_group
[
dev
->
wr_group
[
hód_ödex
]];

5953 } 
group
->
phy_ödex
 < 0);

5954 
dev
->
wr_lun_off£t
[
hód_ödex
] = 
group
->
fú°_lun_off£t
;

5956 
group
 = &
sb
->
sub_group
[
dev
->
wr_group
[
hód_ödex
]];

5958 
dev
->
wr_lun_off£t
[
hód_ödex
] = (dev->wr_lun_off£t[hód_ödex] + 1Ë% dev->
max_luns_ö_group
;

5959 } 
	`is_bad_lun
(
sb
, 
group
->
°¨t_lun
 + 
dev
->
wr_lun_off£t
[
hód_ödex
]));

5961 
	}
}

5963 
	$move_to_√xt_∂™e
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
hód_ödex
)

5965 i‡(
dev
->
wr_∂™e
[
hód_ödex
] =dev->
∂™es
 - 1) {

5966 
	`move_to_√xt_chunk
(
dev
, 
sb
, 
hód_ödex
);

5967 
dev
->
wr_∂™e
[
hód_ödex
] = 0;

5969 
dev
->
wr_∂™e
[
hód_ödex
]++;

5971 
	}
}

5973 
	$move_to_√xt_∑ge
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
hód_ödex
)

5975 
	`move_to_√xt_∂™e
(
dev
, 
sb
, 
hód_ödex
);

5976 
dev
->
wr_∑ge
[
hód_ödex
] = dev->
wr_∂™e
[hód_ödex] * dev->
∑ges_ö_eblock
 + dev->
wr_chunk
[head_index];

5977 
	}
}

5979 
	$Æloc_lun_pba
(
sh™n⁄_dev
 *
dev
, 
u64
 
mëad©a
, 
hód
, 
lun_pba
 *
pba
)

5981 
logicb64_t
 
lba
 = 
mëad©a
 & 
LONG_LBA_MASK
;

5982 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

5983 
logicb_t
 
eblk_pba
;

5984 
logicb_t
 
sb_pba
;

5985 
sh™n⁄_sb
 *
sb
 = 
dev
->
a˘ive_blk
[
hód_ödex
];

5986 
sub_group
 *
group
 = &
sb
->sub_group[
dev
->
wr_group
[
hód_ödex
]];

5987 
u64
 
ns_£q_num
 = (
mëad©a
 >> 
NS_SEQ_NUM_SHIFT
Ë& 
NS_SEQ_NUM_MASK
;

5990 
eblk_pba
 = 
dev
->
wr_∑ge
[
hód_ödex
] * dev->
logicbs_ö_∑ge
 + dev->
wr_logicb
[head_index];

5991 
pba
->
lun_pba
 = 
dev
->
wr_sb
[
hód_ödex
] * dev->
logicbs_ö_siblög_eblock
 + 
eblk_pba
;

5992 
pba
->
lun
 = 
group
->
°¨t_lun
 + 
dev
->
wr_lun_off£t
[
hód_ödex
];

5993 
sb
->
wr_off£t
++;

5995 i‡(!
	`l⁄g_lba_is_övÆid
(
lba
Ë|| 
ns_£q_num
 != 0) {

5996 i‡(
dev
->
com∑˘_ïûog
)

5997 
sb_pba
 = 
group
->
phy_ödex
 * 
sb
->
mö_d©a_luns
 * 
dev
->
logicbs_ö_siblög_eblock
 + \

5998 
dev
->
lun_ö_group
[
hód_ödex
] * dev->
logicbs_ö_siblög_eblock
 + 
eblk_pba
;

6000 
sb_pba
 = 
group
->
phy_ödex
 * 
dev
->
max_luns_ö_group
 * dev->
logicbs_ö_siblög_eblock
 + \

6001 
dev
->
wr_lun_off£t
[
hód_ödex
] * dev->
logicbs_ö_siblög_eblock
 + 
eblk_pba
;

6002 
	`ïûog_£t_mëad©a
(
dev
, 
sb
->
ïûog
, 
sb_pba
, 
mëad©a
);

6005 i‡(
	`likñy
(
dev
->
öô_d⁄e
 >
STAGE_RECOVER_ACTIVE_DONE
)) {

6006 
	`sh™n⁄_©omic_öc
(&
sb
->
ö_wrôe_logicbs
);

6009 
dev
->
wr_logicb
[
hód_ödex
]++;

6010 i‡(
dev
->
wr_logicb
[
hód_ödex
] =dev->
logicbs_ö_∑ge
) {

6011 
	`move_to_√xt_∑ge
(
dev
, 
sb
, 
hód_ödex
);

6012 
dev
->
wr_logicb
[
hód_ödex
] = 0;

6015 
__echo_out
;

6017 
	}
}

	@shannon_g4.c

1 
	$lun_£t_„©uª_gíîÆ_g4
(
sh™n⁄_dev
 *
sdev
, 
„©uª_cfg
 *
cfg
)

3 
sh™n⁄_lun£t
 *
lun£t
;

4 
sh™n⁄_ªgi°î_cmd
 *
£t_„©uª
;

5 
cmdid
;

6 
u64
 *
d©a
;

7 
i
, 
j
;

9 i‡(
cfg
->
vÆid
 =
FEATURE_INVALID
)

12 
	`BUG_ON
(
cfg
->
nbyã
 > 
FEATURE_CFG_MAX_DATA
);

13 
j
 = 0; j < 
sdev
->
max_lun_ö_lun£t
; j+=sdev->
max_lun_ö_˚
) {

14 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

15 
lun£t
 = &
sdev
->
lun£ts
[
i
];

16 
cmdid
 = 
lun£t
->
sq_hód
 >> 3;

17 
£t_„©uª
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

18 
£t_„©uª
->
›code
 = 
sh_cmd_ªg_wrôe
;

19 
£t_„©uª
->
Êash_ªg
.
Êash_addr
 = 
cfg
->
addr
;

20 
£t_„©uª
->
Êash_ªg
.
byãs
 = ((
cfg
->
nbyã
 > 0 && cfg->nbyte <= 4) ? 4: cfg->nbyte);

21 
£t_„©uª
->
Êash_ªg
.
Êash_cmd
 = 
cfg
->
cmd
;

22 
£t_„©uª
->
Êash_ªg
.
phy_lun
 = 
lun£t
->
ödex
 * 
sdev
->
max_lun_ö_lun£t
 + 
j
;

23 i‡(
cfg
->
misc
 =
VENDOR_MODE
)

24 
£t_„©uª
->
hód
 |
VENDOR_MODE_MASK
;

25 i‡(
cfg
->
misc
 =
SECOND_ENABLE
)

26 
£t_„©uª
->
hód
 |
SECONDARY_CMD_ENABLE_MASK
;

28 
d©a
 = 
	`cmd_queue_öc
(
£t_„©uª
, 1);

30 
	`sh™n⁄_mem_wrôeq
(*((
u64
 *)
cfg
->
d©a
), data);

31 
lun£t
->
sq_hód
 = (lun£t->sq_hód + 16Ë% 
QUEUE_SIZE
;

32 
	`wrôe_ªg_ß„
(
sdev
, 
lun£t
->
sq_hód
, &lun£t->
lun_b¨
->sq_head);

34 
	`sh™n⁄_m¶ìp
(5);

36 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

37 
lun£t
 = &
sdev
->
lun£ts
[
i
];

38 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->cq_head);

39 
lun£t
->
sq_hód
 !lun£t->
cq_hód
) {

40 
	`sh™n⁄_m¶ìp
(1);

41 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->cq_head);

43 
lun£t
->
cq_èû
 =Üun£t->
cq_hód
;

44 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_hód
;

45 
lun£t
->
sq_hód_tmp
 =Üun£t->
sq_hód
;

46 
lun£t
->
sq_hw_hód
 =Üun£t->
sq_hód
;

47 
lun£t
->
cq_hw_hód
 =Üun£t->
cq_hód
;

50 
	}
}

52 
	$mi¸ocode_checksum
(
u32
 *
èbÀ
, u32 
Àngth
, u32 
checksum
)

54 
u32
 
i
;

55 
u32
 
tmp
 = 0;

57 
	`BUG_ON
(
èbÀ
 =
NULL
);

59 
i
 = 0; i < 
Àngth
; i++)

60 
tmp
 ^
èbÀ
[
i
];

62 
	`debugs1
("èrgë_checksum = 0x%lX cur_checksum = 0x%lX\n", 
checksum
, 
tmp
);

63 i‡(
tmp
 =
checksum
)

67 
	}
}

69 
	$gë_c⁄fig_‰om_n‹Êash
(
sh™n⁄_dev
 *
sdev
)

71 
sh™n⁄_n‹_mbr
 
öfo
 = {0};

72 
ªt
 = 0;

73 
i
;

75 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
NOR_MBR_ADDR
, (
sh™n⁄_n‹_mbr
), &
öfo
))

76 
Áûed
;

77 i‡(
öfo
.
w©îm¨k
 !
NOR_MBR_MAGIC
)

78 
Áûed
;

80 i‡(
öfo
.
vîsi⁄
 == 0) {

81 
	`BUG_ON
(
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
 !
NULL
);

82 
sdev
->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 = 0;

84 i‡((
öfo
.
mi¸ocode_addr
 =0Ë|| (öfo.
mi¸ocode_Àngth
 == 0)) {

86 
ªt
 = -1;

87 
i
 = 0; i < 
	`ARRAY_SIZE
(
suµ‹ãd_ids
); i++) {

88 i‡(
öfo
.
Êashid
 =
suµ‹ãd_ids
[
i
].flashid) {

89 
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
 = 
suµ‹ãd_ids
[
i
].
mi¸ocode_èbÀ
;

90 
sdev
->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 = 
suµ‹ãd_ids
[
i
].microcode_length;

91 
sdev
->
mi¸ocode_¨øy
[0].
°©e
 = 
MICROCODE_VALID_MASK
;

92 
sdev
->
mi¸ocode_¨øy
[0].
°¨t_ªg
 = 
SH_ADVANCED_READ_OFFSET
;

93 
ªt
 = 0;

97 i‡(
ªt
) {

98 
	`sh™n⁄_îr
("Can`t find microcode in driver.ÅryÅoÑead config from supported_ids.");

99 
Áûed
;

103 
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
 = 
	`sh™n⁄_kmÆloc
(
öfo
.
mi¸ocode_Àngth
 * (
u32
), 
GFP_SHANNON
);

104 i‡(
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
 =
NULL
)

105 
Áûed
;

107 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
öfo
.
mi¸ocode_addr
, info.
mi¸ocode_Àngth
 * (
u32
), sdev->
mi¸ocode_¨øy
[0].
èbÀ
)) {

108 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
);

109 
Áûed
;

112 
sdev
->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 = 
öfo
.microcode_length;

113 i‡(
	`mi¸ocode_checksum
(
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
, sdev->mi¸ocode_¨øy[0].
mi¸ocode_Àngth
, 
öfo
.
mi¸ocode_checksum
)) {

114 
	`sh™n⁄_îr
("microcode checksum is failed.ÅryÅoÑead config from supported_ids.\n");

115 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[0].
èbÀ
);

116 
sdev
->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 = 0;

117 
Áûed
;

119 
sdev
->
mi¸ocode_¨øy
[0].
°©e
 = (
MICROCODE_VALID_MASK
 | 
MICROCODE_FROM_NOR_MASK
);

120 
sdev
->
mi¸ocode_¨øy
[0].
°¨t_ªg
 = 
SH_ADVANCED_READ_OFFSET
;

121 
sdev
->
n‹_mbr_°©us
 |
MICROCODE_FROM_NORFLASH
;

124 
sdev
->
Êashid
 = 
öfo
.flashid;

125 
sdev
->
ifmode
 = 
öfo
.ifmode;

126 
sdev
->
mbr
.
˛k
 = 
öfo
.
if˛ock
;

127 
sdev
->
‰eq_mode
 = 
öfo
.freq_mode;

128 
sdev
->
sh¨ed_∑ges
 = 
öfo
.shared_pages;

129 
sdev
->
logicb_shi·
 = 
öfo
.
mbr_logicb_shi·
;

130 
sdev
->
ecc_codew‹ds_ö_logicb
 = 
öfo
.ecc_codewords_in_logicb;

132 i‡(
öfo
.
˛o£_block_ªad_cou¡
)

133 
sdev
->
ªad_di°urb_thªshﬁd
 = 
öfo
.
˛o£_block_ªad_cou¡
;

134 i‡(
öfo
.
›í_block_ªad_cou¡
)

135 
sdev
->
›í_block_ªad_di°urb_thªshﬁd
 = 
öfo
.
›í_block_ªad_cou¡
;

137 
	`sh™n⁄_mem˝y
(
sdev
->
„©uª_cfg_li°
, 
öfo
.
„©uª_¨øy
, (info.feature_array));

139 
Áûed
;

142 
	`sh™n⁄_öfo
("get config fromÇorflash successfully.\n");

143 
sdev
->
n‹_mbr_°©us
 |
READ_FROM_NORFLASH
;

146 
Áûed
:

147 
	`debugs1
("failedÅoÑead config info inÇorflash.\n");

148 
ªt
 = -1;

149 
sdev
->
n‹_mbr_°©us
 &~
READ_FROM_NORFLASH
;

150  
ªt
;

151 
	}
}

153 
	$ch™ge_öãºu±_öto_msi_mode
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
)

155 
ªsu…
;

157 
sdev
->
max_úq_ödex
 = -1;

158 
	`debugs1
("úq=%d.\n", 
	`gë_pci_úq_num
(
pdev
));

159 
ªsu…
 = 
	`sh™n⁄_pci_íabÀ_msi
(
pdev
);

160 i‡(
	`u∆ikñy
(
ªsu…
)) {

161 
	`sh™n⁄_îr
("cannotÉnable msi.\n");

164 
	`debugs1
("úq=%d.\n", 
	`gë_pci_úq_num
(
pdev
));

166 
ªsu…
 = 
	`sh™n⁄_ªque°_úq
(
	`gë_pci_úq_num
(
pdev
), "sh™n⁄", 
sdev
);

167 i‡(
	`u∆ikñy
(
ªsu…
)) {

168 
	`sh™n⁄_îr
("request interrupt failed.\n");

169 
	`sh™n⁄_pci_dißbÀ_msi
(
pdev
);

173 
sdev
->
öãºu±_¨g
[0].
dw‹d_ödex
 = -1;

174 
sdev
->
öãºu±_¨g
[0].sdev = sdev;

175 
	`sh™n⁄_öô_w‹k
(&
sdev
->
öãºu±_¨g
[0].
ªpﬁl_w‹k
, 
sh™n⁄_ªpﬁl_èsk
);

176 
	`sh™n⁄_öô_π_w‹k
(&
sdev
->
öãºu±_¨g
[0].
π_ªpﬁl_w‹k
, 
sh™n⁄_π_ªpﬁl_èsk
);

177 
	`sh™n⁄_èskÀt_öô
(&
sdev
->
comp_èskÀt
[0], 
com∂ëi⁄_èskÀt
, ()(&sdev->
öãºu±_¨g
[0]));

180 
	}
}

182 
	$sh™n⁄_dißbÀ_msi
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
)

184 
	`sh™n⁄_‰ì_úq
(
	`gë_pci_úq_num
(
pdev
), 
sdev
);

185 
	`sh™n⁄_pci_dißbÀ_msi
(
pdev
);

186 
	}
}

188 
	$sh™n⁄_öô_h¨dw¨e_g4
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
)

190 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
;

192 
sdev
->
mbr_eblocks
 = 4;

194 
lun_£˘i⁄
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)
sdev
->
b¨
 + 256);

196 i‡(
	`gë_c⁄fig_‰om_n‹Êash
(
sdev
)) {

197 
sdev
->
logicb_shi·
 = 
MBR_LOGICB_SHIFT
;

198 
sdev
->
ecc_codew‹ds_ö_logicb
 = 1;

200 
sdev
->
logicb_size
 = 1 << sdev->
logicb_shi·
;

202 
	`gë_ecc_codew‹d_size
(
sdev
);

203 
	`öô_globÆ_c⁄fig_ªgs_f‹_Êashid
(
sdev
);

204 
	`dump_b¨_•a˚
(
sdev
);

206 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

207 
	`sh™n⁄_dißbÀ_úq
(
	`gë_pci_úq_num
(
pdev
));

208 
	`ª£t_Æl_lun£t
(
sdev
, 
lun_£˘i⁄
);

210 i‡(
	`dëe˘_Êashid
(
sdev
, 
lun_£˘i⁄
) < 0) {

211 
	`sh™n⁄_îr
("can'tÑead flashid or flashid isn't supported.\n");

214 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

216 i‡((
sdev
->
h¨dw¨e_vîsi⁄
 >5Ë&& (sdev->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 > 0)) {

217 
	`wrôe_adv™˚d_ªad_mi¸ocode
(
sdev
, 0);

218 
sdev
->
adv™˚d_ªad_°©e
 |
ADV_READ_SUPPORT_MASK
;

221 
sdev
->
adv™˚d_ªad_°©e
 &~
ADV_READ_SUPPORT_MASK
;

223 i‡(
	`Æloc_lun£ts_°ru˘uª
(
sdev
) < 0) {

224 
	`sh™n⁄_îr
("cannotállocateÜunsets structure.\n");

228 
	`ªbuûd_Æl_„©uª_cfg
(
sdev
);

229 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 0);

231 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

232 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, sdev->
ifmode
);

233 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

234 
	`sh™n⁄_m¶ìp
(2);

235 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 1);

237 i‡(
	`dev_is_8639_wôh_ßndisk
(
sdev
)) {

238 
	`£t_˛k
(
sdev
, 
CLK_166M
 + 1);

239 
	`lun_£t_„©uª_ovî_drive
(
sdev
, 4);

240 
	`lun_£t_„©uª_odt
(
sdev
);

243 i‡(
	`dëe˘_comm⁄_öfo
(
sdev
) < 0) {

244 
	`sh™n⁄_îr
("cannotÑead mbr.\n");

245 
ªÀa£_lun£ts
;

247 
	`check_u£r_logicb_size
(
sdev
);

249 
	`sh™n⁄_öfo
("%s: fœsh id: %16.16Œx\n", 
sdev
->
cdev_«me
, sdev->
Êashid
);

250 
	`sh™n⁄_öfo
("%s: ifmode: %d, ovîdrive: %d, fªqmode: %d\n", 
sdev
->
cdev_«me
, sdev->
ifmode
, sdev->
ovîdrive
, sdev->
‰eq_mode
);

254 
ªÀa£_lun£ts
:

255 
	`ªÀa£_lun£ts_°ru˘uª
(
sdev
);

258 
	}
}

261 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

262 
	$sh™n⁄_öô_emu_h¨dw¨e_g4
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun_b¨
 **
lun_£˘i⁄
)

264 
i
 = 0;

266 
sdev
->
logicb_shi·
 = 
MBR_LOGICB_SHIFT
;

267 
sdev
->
logicb_size
 = 1 << sdev->
logicb_shi·
;

268 
sdev
->
ecc_codew‹ds_ö_logicb
 = 1;

269 
sdev
->
øid5_suµ‹ãd
 = 
RAID5_SUPPORTED
;

270 
sdev
->
rŸ©e_∑rôy
 = 
ROTATE_PARITY
;

271 
sdev
->
ecc_by∑ss
 = 
ECC_BYPASS
;

273 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

274 
emu_luns
[
i
].
logicb_size
 = 
sdev
->logicb_size;

275 
emu_luns
[
i
].
logicb_shi·
 = 
sdev
->logicb_shift;

276 
emu_luns
[
i
].
logicbs_ö_∑ge
 = 1;

278 
sdev
->
max_ch™√ls
 = 
emu_luns
[0].max_channels;

279 
sdev
->
max_lun£t_ö_ch™√l
 = 
emu_luns
[0].max_lunset_in_channel;

280 
sdev
->
max_lun_ö_lun£t
 = 
emu_luns
[0].
hw_lun_ö_lun£t
;

281 
sdev
->
lun£t_cou¡
 = sdev->
max_lun£t_ö_ch™√l
 * sdev->
max_ch™√ls
;

283 *
lun_£˘i⁄
 = 
	`sh™n⁄_kzÆloc
((**lun_£˘i⁄Ë* 
MBR_MAX_TRY
, 
GFP_SHANNON
);

284 
¥eöô_emu_thªad
 = 
	`sh™n⁄_kthªad_run
(
¥eöô_emuœt‹_thªad
, *
lun_£˘i⁄
, "sh_preinit_emu");

286 
	`check_u£r_logicb_size
(
sdev
);

287 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

290 
	}
}

293 
	$sh™n⁄_n‹Êash_îa£_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
)

295 
timeout
;

297 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

298 
	`sh™n⁄_iowrôe32
(
phyaddr
, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_ERASE_ADDR
);

299 
	`sh™n⁄_iowrôe32
(0, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_ERASE_CTRL
);

300 
	`sh™n⁄_iowrôe32
(1, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_ERASE_CTRL
);

301 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

303 
timeout
 = 0;

304 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
NORFLASH_ERASE_CTRL
) & 0x02)) {

305 
	`sh™n⁄_udñay
(10);

306 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

307 
	`sh™n⁄_îr
("timeout\n");

310 
	`sh™n⁄_c⁄d_ªsched
();

314 
	}
}

316 
	$sh™n⁄_n‹Êash_wrôe_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
)

318 
timeout
;

320 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

321 
	`sh™n⁄_iowrôe32
(
phyaddr
, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_WRITE_ADDR
);

322 
	`sh™n⁄_iowrôe32
(0, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_WRITE_CTRL
);

323 
	`sh™n⁄_iowrôe32
(1, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_WRITE_CTRL
);

324 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

326 
timeout
 = 0;

327 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
NORFLASH_WRITE_CTRL
) & 0x02)) {

328 
	`sh™n⁄_udñay
(10);

329 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

330 
	`sh™n⁄_îr
("timeout\n");

336 
	}
}

338 
	$sh™n⁄_n‹Êash_ªad_g4
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
, u32 
x„r_size
)

340 
timeout
;

342 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

343 
	`sh™n⁄_iowrôe32
(
phyaddr
, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_READ_ADDR
);

344 
	`sh™n⁄_iowrôe32
(
x„r_size
, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_READ_LENGTH
);

345 
	`sh™n⁄_iowrôe32
(0, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_READ_CTRL
);

346 
	`sh™n⁄_iowrôe32
(1, (
u32
 *)
sdev
->
b¨
 + 
NORFLASH_READ_CTRL
);

347 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

349 
timeout
 = 0;

350 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
NORFLASH_READ_CTRL
) & 0x02)) {

351 
	`sh™n⁄_udñay
(10);

352 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

353 
	`sh™n⁄_îr
("timeout\n");

359 
	}
}

361 
ªad_°©ic_bbt
(
sh™n⁄_lun
 *
lun
);

362 
	$ªad_bbt_öfo_g4
(
sh™n⁄_dev
 *
sdev
)

364 
l
;

366 
l
 = 0;Ü < 
sdev
->
lun_cou¡
;Ü++) {

367 i‡(!
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
l
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
)) {

368 i‡(
sdev
->
lun
[
l
]->
bad
) {

370 
	`£t_√w_bad_lun
(
sdev
, sdev->
lun
[
l
]);

372 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªcovî_d⁄e
);

373 
	`ªad_°©ic_bbt
(
sdev
->
lun
[
l
]);

376 
	`debugs1
("lun=%d,Öhy_lun_num=%d i†physiˇŒy bad.\n", 
l
, 
sdev
->
lun
[l]->
phy_lun_num
);

378 
	`sh™n⁄_waô_evít
(
sdev
->
ªcovî_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
ªcovî_d⁄e
) == 0);

380 
	}
}

382 
	$™Æyze_bbt_öfo_g4
(
sh™n⁄_dev
 *
sdev
)

384 
u16
* 
bbt
;

385 
i
, 
num
;

386 
bô
 = 0;

388 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

389 
num
 = 0;

390 
bbt
 = 
sdev
->
lun
[
i
]->bbt;

392 i‡(
sdev
->
lun
[
i
]->
bad
)

394 i‡(
	`bbt_usög_bôm≠
(
bbt
, 
sdev
)) {

395 
	`sh™n⁄_f‹_óch_£t_bô_À
(
bô
, (
u64
 *)
bbt
 + 1, 
sdev
->
eblocks_ö_lun
) {

396 i‡(
bô
/
sdev
->
∂™es
 >sdev->
sb_cou¡
) {

397 
	`sh™n⁄_îr
("bôm≠:Wr⁄g badblockÇumbî:Üun=%d, badblock=%d.\n", 
i
, 
bô
);

399 i‡(!
	`is_bad_block_dev
(
sdev
, 
i
, 
bô
/sdev->
∂™es
))

400 
	`m¨k_bad_block_dev
(
sdev
, 
i
, 
bô
/sdev->
∂™es
);

401 
	`debugs2
("%s: badblock:Üun=%d, badblock=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
i
, 
bô
);

405 
bbt
[
num
] != 0xFFFF) {

406 i‡(
bbt
[
num
]/
sdev
->
∂™es
 >sdev->
sb_cou¡
) {

407 
	`sh™n⁄_îr
("bbt:Wr⁄g badblockÇumbî:Üun=%d, badblock=%d.\n", 
i
, 
bbt
[
num
]);

409 i‡(!
	`is_bad_block_dev
(
sdev
, 
i
, 
bbt
[
num
]/sdev->
∂™es
))

410 
	`m¨k_bad_block_dev
(
sdev
, 
i
, 
bbt
[
num
]/sdev->
∂™es
);

411 
	`debugs2
("%s: badblock:Üun=%d, badblock=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
i
, 
bbt
[
num
]);

413 
num
++;

417 
	}
}

419 
	$lun_upd©e_poﬁ_öfo_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

421 
sh™n⁄_lun
 *
lun
 = (sh™n⁄_lu¿*)
sbio
->
d©a2
;

422 
lun
->
upd©e_poﬁ_öfo_d⁄e
 = 1;

423 
	`sh™n⁄_wake_up
(&
lun
->
upd©e_poﬁ_öfo_d⁄e_evít
);

424 
	}
}

427 
	$lun_upd©e_poﬁ_öfo
(
sh™n⁄_lun
 *
lun
, 
sh™n⁄_bio
 *
sbio
)

429 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

430 
°¨t_pba
, 
cuºít_∑ge
, 
eblk
, 
addr_off£t
 = 0;

431 
sh™n⁄_dev
 *
sdev
 = (*)
sbio
->
d©a
;

432 
	`sh™n⁄_muãx_lock
(&
lun
->
ª‰esh_£m
);

433 i‡(
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
Ë> 
LUN_REFRESH_MBR_THRESHOLD
) {

434 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
ª‰esh_£m
);

435 
	`lun_ª‰esh_mbr_eblks_sync
(
lun
);

438 
sbio
->
d©a2
 = 
lun
;

439 
cuºít_∑ge
 = 
	`sh™n⁄_©omic_ªad
(&
lun
->
√xt_em±y_∑ge
);

440 
	`sh™n⁄_©omic_öc
(&
lun
->
√xt_em±y_∑ge
);

441 
eblk
 = 0;Éblk < 
sdev
->
mbr_eblocks
;Éblk++) {

442 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
sdev
->
logicbs_ö_∑ge
);

443 
°¨t_pba
 = 
eblk
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
logicbs_ö_∑ge
 +

444 
cuºít_∑ge
 * 
sdev
->
logicbs_ö_∑ge
;

445 
addr_off£t
 = 0;

446 
tmp
 = 
NULL
;

447 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

448 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

449 
ªq
->
pba
.
lun_pba
 = 
°¨t_pba
++;

450 
ªq
->
vút_addr
 = 
sbio
->vút_add∏+ 
addr_off£t
;

451 
ªq
->
dma_addªss
 = 
sbio
->dma_addªs†+ 
addr_off£t
;

452 
addr_off£t
 +
sdev
->
logicb_size
;

454 i‡(!
tmp
) {

455 
tmp
 = 
ªq
;

456 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

458 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
tmp
->chunk_list);

461 
lun
->
upd©e_poﬁ_öfo_d⁄e
 = 0;

462 
	`sh™n⁄_muãx_lock
(&
lun
->
lun£t
->
sq_£m
);

463 
	`__sh™n⁄_wrôe_cmd
(
lun
->
lun£t
, 
tmp
);

464 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
lun£t
->
sq_£m
);

465 
	`upd©e_lun£t_sq_hód
(
lun
->
lun£t
);

466 
	`sh™n⁄_waô_evít
(
lun
->
upd©e_poﬁ_öfo_d⁄e_evít
,Üun->
upd©e_poﬁ_öfo_d⁄e
 != 0);

468 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
ª‰esh_£m
);

469 
	}
}

471 
sh™n⁄_bio
 *
	$¥ï¨e_upd©e_poﬁ_öfo
(
sh™n⁄_dev
 *
sdev
)

473 
sh™n⁄_bio
 *
sbio
;

474 
sh™n⁄_ªque°
 *
ªq
;

475 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
sdev
->spool;

476 
i
;

477 
wrôe_size
 = 
sdev
->
«nd_∑ge_ˇ∑côy
;

478 *
±r
;

480 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

481 
	`£t_sbio_debug_èg
(
sbio
, 
ADD_BBT_POOL_INFO_TAG
);

482 
sbio
->
logicbs
 = 
sdev
->
logicbs_ö_∑ge
;

483 
sbio
->
ˇŒback
 = 
lun_upd©e_poﬁ_öfo_ˇŒback
;

484 
ªåy
:

485 
sbio
->
vút_addr
 = 
	`sh™n⁄_kzÆloc
(
wrôe_size
, 
GFP_SHANNON
);

486 i‡(
sbio
->
vút_addr
 =
NULL
) {

487 
	`sh™n⁄_m¶ìp
(5);

488 
ªåy
;

490 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

491 
±r
 = 
sbio
->
vút_addr
;

492 
	`c›y_poﬁ_öfo
(
±r
, 
•oﬁ
->
poﬁ_öfo
);

493 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

494 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

495 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

496 
	`£t_ªq_debug_èg
(
ªq
, 
ADD_BBT_POOL_INFO_TAG
, 
i
);

497 
ªq
->
›code
 = 
sh_cmd_wrôe
;

498 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

499 
ªq
->
hód
 = 
MBR_HEAD
;

500 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

501 
ªq
->
lba
 = 
POOL_INFO_METADATA
;

502 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

503 
ªq
->
sbio
 = sbio;

504 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

506  
sbio
;

507 
	}
}

510 
	$upd©e_poﬁ_öfo_g4
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_poﬁ
 *
•oﬁ
)

512 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

513 
sh™n⁄_bio
 *
sbio
;

514 
sh™n⁄_lun
 *
lun
;

515 
i
;

517 
sbio
 = 
	`¥ï¨e_upd©e_poﬁ_öfo
(
sdev
);

519 
sbio
->
d©a
 = 
sdev
;

520 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
,

521 
sdev
->
«nd_∑ge_ˇ∑côy
, 
SHANNON_DMA_TODEVICE
);

522 
i
 = 0; i < 
POOL_INFO_LUNS
; i++) {

523 
lun
 = 
sdev
->lun[
i
];

524 i‡(
	`is_°©ic_bad_lun
(
sdev
, 
lun
->
lun_num
Ë&& (lun->
bad
 =0Ë&& (lun->
phy_lun_num
 != 0))

526 
	`lun_upd©e_poﬁ_öfo
(
sdev
->
lun
[
i
], 
sbio
);

528 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
,

529 
sdev
->
«nd_∑ge_ˇ∑côy
, 
SHANNON_DMA_TODEVICE
);

531 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

532 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

533 
	`‰ì_ªq
(
ªq
);

536 
	`sh™n⁄_k‰ì
(
sbio
->
vút_addr
);

537 
	`‰ì_sbio
(
sbio
);

538 
	}
}

	@shannon_g5.c

1 
˛ón_Æl_mi¸ocode_u£d_°©e
(
sh™n⁄_dev
 *
sdev
);

2 
wrôe_adv™˚d_ªad_mi¸ocode
(
sh™n⁄_dev
 *
sdev
, 
num
);

4 
u32
 
sh™n⁄_¸c32
(
sh™n⁄_dev
 *
sdev
, 
u8
 *
d©a
, 
Àn
, u32 
£ed
);

5 
	$should_upd©e_mi¸ocode
(
sh™n⁄_dev
 *
sdev
)

7 
èrgë
 = 0;

9 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
))

12 
èrgë
 = 
	`gë_upd©e_mi¸ocode
(
sdev
);

13 i‡((
èrgë
 < 0Ë|| (èrgë >
MICROCODE_ARRAY_SIZE
))

15 i‡(
sdev
->
mi¸ocode_¨øy
[
èrgë
].
≥_cy˛e
 == 0)

17 i‡(!(
sdev
->
mi¸ocode_¨øy
[
èrgë
].
°©e
 & 
MICROCODE_IN_USE_MASK
))

21 
	}
}

23 
	$gë_upd©e_mi¸ocode
(
sh™n⁄_dev
 *
sdev
)

25 
i
;

26 
èrgë
 = -1;

27 
vÆid_sbs
 = (
sdev
->
sb_cou¡
 - 
	`sh™n⁄_©omic_ªad
(&sdev->
disˇrded_blk˙t
Ë- (sdev->
mbr_eblocks
 / sdev->
∂™es
));

28 
avg_îa£_cou¡
;

30 i‡(
vÆid_sbs
 == 0)

31  
èrgë
;

33 
avg_îa£_cou¡
 = 
sdev
->
tŸÆ_îa£_cou¡
 / 
vÆid_sbs
;

34 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++) {

35 i‡(!(
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 & 
MICROCODE_VALID_MASK
))

37 i‡(
sdev
->
mi¸ocode_¨øy
[
i
].
≥_cy˛e
 == 0)

39 i‡((
i
 =
sdev
->
cuºít_mi¸ocode_ödex
Ë&& (!(sdev->
mi¸ocode_¨øy
[i].
°©e
 & 
MICROCODE_IN_USE_MASK
)))

40  
sdev
->
cuºít_mi¸ocode_ödex
;

41 i‡(
sdev
->
mi¸ocode_¨øy
[
i
].
≥_cy˛e
 < 
avg_îa£_cou¡
) {

42 i‡(
èrgë
 == -1)

43 
èrgë
 = 
i
;

45 i‡(
sdev
->
mi¸ocode_¨øy
[
i
].
≥_cy˛e
 > sdev->mi¸ocode_¨øy[
èrgë
].pe_cycle)

46 
èrgë
 = 
i
;

51  
èrgë
;

52 
	}
}

54 
	$gë_mbr_‰om_n‹
(
sh™n⁄_dev
 *
sdev
)

56 
sh™n⁄_mbr
 *
mbr
 = 
NULL
;

57 *
buf
 = 
NULL
;

58 
block_size
, 
i
;

59 
u32
 
phyaddr
, 
¸c
;

61 
block_size
 = 
NOR_PAGE_SIZE
 * 16;

63 
buf
 = 
	`sh™n⁄_vmÆloc
(
block_size
);

64 i‡(!
buf
) {

65 
	`sh™n⁄_îr
("CanÇotállocate memory forÑeading mbr.\n");

66  -
ENOMEM
;

68 
	`sh™n⁄_mem£t
(
buf
, 0, 
block_size
);

70 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

72 
i
 = 0; i < 2; i++) {

73 
phyaddr
 = (
i
 =0Ë? 
sdev
->
n‹Êash
.
mbr_addr
 : sdev->n‹Êash.
mbr_backup_addr
;

74 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
phyaddr
, 
block_size
, 
buf
)) {

75 
	`sh™n⁄_w¨n
("ªad mbr%†‰om NOR Fœsh faûed.\n", (
i
 == 0) ? "" : "_backup");

76 i‡(
i
 == 1) {

77 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

78 
	`sh™n⁄_v‰ì
(
buf
);

82 
¸c
 = *(
u32
*)(
buf
 + 
block_size
 - (crc));

83 i‡(
¸c
 !
	`sh™n⁄_¸c32
(
sdev
, 
buf
, 
block_size
 - (crc), 0)) {

84 
	`sh™n⁄_w¨n
("CRC check faûed f‹ mbr%s.\n", (
i
 == 0) ? "" : "_backup");

85 i‡(
i
 == 1) {

86 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

87 
	`sh™n⁄_v‰ì
(
buf
);

93 
mbr
 = (
sh™n⁄_mbr
*)
buf
;

94 
	`sh™n⁄_öfo
("gë mb∏öf‹m©i⁄ from NOR Fœsh suc˚ssfuŒy, mbr_upd©e=%d\n", 
mbr
->
mbr_upd©e
);

95 
	`™Æyze_mbr_öfo
(
sdev
, 
mbr
);

97 
	`sh™n⁄_mem£t
(
buf
, 0, 
block_size
);

98 
phyaddr
 = 
sdev
->
n‹Êash
.
„©uª_addr
;

99 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
phyaddr
, 
NOR_PAGE_SIZE
, 
buf
)) {

100 
	`sh™n⁄_w¨n
("read features from NOR failed.\n");

101 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

102 
	`sh™n⁄_v‰ì
(
buf
);

105 
¸c
 = *(
u32
*)(
buf
 + 
NOR_PAGE_SIZE
 - (crc));

106 i‡(
¸c
 !
	`sh™n⁄_¸c32
(
sdev
, 
buf
, 
NOR_PAGE_SIZE
 - (crc), 0)) {

107 
	`sh™n⁄_w¨n
("CRC check failed for features.\n");

108 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

109 
	`sh™n⁄_v‰ì
(
buf
);

112 
	`sh™n⁄_mem˝y
(
sdev
->
„©uª_cfg_li°
, 
buf
, (sdev->feature_cfg_list));

114 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

116 i‡(
	`check_„©uª_cfg_li°
(
sdev
)) {

117 
	`sh™n⁄_v‰ì
(
buf
);

121 
	`sh™n⁄_v‰ì
(
buf
);

123 
	}
}

125 
	$™Æyze_n‹Êash_mi¸ocode
(
sh™n⁄_dev
 *
sdev
, 
mi¸ocode_öfo
 *
öfo
)

127 
i
 = 0;

128 
¨øy_ödex
 = 0;

129 
mi¸ocode_èbÀ_öfo
 *
èbÀ_öfo
 = 
NULL
;

130 
u32
 
¸c
;

131 
u32
 
èbÀ_Àngth
;

132 
u32
 
èbÀ_¸c
;

134 
èbÀ_öfo
 = (
mi¸ocode_èbÀ_öfo
 *)(((*)(&
öfo
->
èbÀ_˙t
)) + 1);

135 
i
 = 0; i < 
öfo
->
èbÀ_˙t
; i++) {

136 
	`BUG_ON
(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
°©e
 & (
MICROCODE_VALID_MASK
 | 
MICROCODE_IN_USE_MASK
));

137 
	`BUG_ON
(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 !
NULL
);

139 i‡(
èbÀ_öfo
[
i
].
≥_cy˛e
 == 0)

142 i‡(
èbÀ_öfo
[
i
].
°¨t_ªg
 < 0) {

143 
	`sh™n⁄_îr
("microcodeÅable infoÉrror. index=%d,Öe_cycle=%d, start_reg=%d.\n", \

144 
i
, 
èbÀ_öfo
[i].
≥_cy˛e
,ÅabÀ_öfo[i].
°¨t_ªg
);

148 
	`BUG_ON
(
èbÀ_öfo
[
i
].
Àngth
 % (
u32
));

149 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 = 
	`sh™n⁄_kzÆloc
(
èbÀ_öfo
[
i
].
Àngth
, 
GFP_SHANNON
);

150 i‡(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 =
NULL
) {

151 
	`sh™n⁄_îr
("alloc microcodeÅable memory failed.\n");

152 
Áûed
;

155 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
èbÀ_öfo
[
i
].
off£t
 * 
NOR_PAGE_SIZE
,ÅabÀ_öfo[i].
Àngth
, sdev->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
)) {

156 
	`sh™n⁄_îr
("read microcodeÅable from NOR Flash failed.\n");

157 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
);

158 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 = 
NULL
;

159 
Áûed
;

162 
èbÀ_Àngth
 = 
èbÀ_öfo
[
i
].
Àngth
 / (
u32
);

163 
èbÀ_¸c
 = (
u32
)
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
[
èbÀ_Àngth
 - 1];

164 
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
 *)sdev->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
, 
èbÀ_öfo
[
i
].
Àngth
 - (crc), 0);

165 i‡(
¸c
 !
èbÀ_¸c
) {

166 
	`sh™n⁄_îr
("CRC check faûed f‹ mi¸ocodêèbÀ %d,ÅabÀ crc=0x%x, cÆ crc=0x%x.\n", 
i
, 
èbÀ_¸c
, 
¸c
);

167 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
);

168 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 = 
NULL
;

169 
Áûed
;

172 
	`sh™n⁄_öfo
("%s: föd mi¸ocodêèbÀ %d.\n", 
sdev
->
cdev_«me
, 
¨øy_ödex
);

173 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
°©e
 = 
MICROCODE_VALID_MASK
 | 
MICROCODE_FROM_NOR_MASK
;

174 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
≥_cy˛e
 = 
èbÀ_öfo
[
i
].pe_cycle;

175 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
°¨t_ªg
 = 
èbÀ_öfo
[
i
].start_reg;

176 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
mi¸ocode_Àngth
 = 
èbÀ_Àngth
 - ((
¸c
Ë/ (
u32
));

178 
¨øy_ödex
++;

183 
Áûed
:

184 
¨øy_ödex
 -= 1;árray_index >= 0;árray_index--) {

185 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
);

186 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
èbÀ
 = 
NULL
;

187 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
°©e
 = 
MICROCODE_INVALID
;

188 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
≥_cy˛e
 = 0;

189 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
°¨t_ªg
 = -1;

190 
sdev
->
mi¸ocode_¨øy
[
¨øy_ödex
].
mi¸ocode_Àngth
 = 0;

193 
	}
}

195 
	$gë_mi¸ocode_‰om_n‹
(
sh™n⁄_dev
 *
sdev
)

197 
mi¸ocode_öfo
 *
öfo
 = 
NULL
;

198 
ªt
 = 0;

199 
u32
 
¸c
;

201 
öfo
 = (
mi¸ocode_öfo
*)
	`sh™n⁄_kzÆloc
((*öfo), 
GFP_SHANNON
);

202 i‡(!
öfo
) {

203 
	`sh™n⁄_îr
("CanÇotállocate memory forÑeading microcode info.\n");

204  -
ENOMEM
;

207 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

209 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, sdev->
n‹Êash
.
mi¸o_code_addr
, (*
öfo
), info)) {

210 
	`sh™n⁄_îr
("read microcode from NOR Flash failed.\n");

211 
ªt
 = -1;

212 
out
;

215 
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
 *)
öfo
, (*info) - (crc), 0);

216 i‡(
¸c
 !
öfo
->crc) {

217 
	`sh™n⁄_îr
("CRC check failed forÇorflash microcode.\n");

218 
ªt
 = -1;

219 
out
;

222 i‡(
öfo
->
èbÀ_˙t
 > 
MICROCODE_ARRAY_SIZE
) {

223 
	`sh™n⁄_öfo
("%s:Ñe£àmi¸ocodêèbÀ cou¡Åÿ%d.\n", 
sdev
->
cdev_«me
, 
MICROCODE_ARRAY_SIZE
);

224 
öfo
->
èbÀ_˙t
 = 
MICROCODE_ARRAY_SIZE
;

227 
	`sh™n⁄_öfo
("%s: gë mi¸ocodê‰om NOR Fœsh suc˚ssfuŒy\n", 
sdev
->
cdev_«me
);

228 i‡(
	`™Æyze_n‹Êash_mi¸ocode
(
sdev
, 
öfo
))

229 
ªt
 = -1;

231 
out
:

232 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

233 
	`sh™n⁄_k‰ì
(
öfo
);

235 i‡(
ªt
 == 0)

236 
sdev
->
n‹_mbr_°©us
 |
MICROCODE_FROM_NORFLASH
;

238  
ªt
;

239 
	}
}

241 
	$n‹Êash_ªad_modify_wrôe
(
sh™n⁄_dev
 *
sdev
, 
u32
 
addr
, u32 
Àngth
, *
d©a
)

243 
blk
, 
begö_blk
, 
íd_blk
, 
∑ges_ö_block
, 
block_size
;

244 
§c_off£t
, 
de°_off£t
, 
c›y_Àngth
;

245 
u8
 *
buf„r
 = 
NULL
;

246 
ªt
 = 0;

249 
∑ges_ö_block
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
 / 
NOR_PAGE_SIZE
;

250 
block_size
 = 
∑ges_ö_block
 * 
NOR_PAGE_SIZE
;

252 
begö_blk
 = 
addr
 / 
NOR_PAGE_SIZE
 / 
∑ges_ö_block
;

253 
íd_blk
 = (
addr
 + 
Àngth
 + 
block_size
 - 1) / block_size;

255 
buf„r
 = (
u8
*)
	`sh™n⁄_vmÆloc
(
block_size
);

256 i‡(!
buf„r
) {

257 
	`sh™n⁄_îr
("Cannotálloc memory forÑead old data inÇor flash.\n");

260 
	`sh™n⁄_mem£t
(
buf„r
, 0, 
block_size
);

262 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

264 
§c_off£t
 = 0;

265 
blk
 = 
begö_blk
; blk < 
íd_blk
; blk++) {

266 i‡(
blk
 =
begö_blk
) {

267 
de°_off£t
 = ((
addr
 / 
NOR_PAGE_SIZE
Ë- (
begö_blk
 * 
∑ges_ö_block
)) * NOR_PAGE_SIZE;

268 
c›y_Àngth
 = 
block_size
 - 
de°_off£t
;

269 i‡(
Àngth
 < 
c›y_Àngth
)

270 
c›y_Àngth
 = 
Àngth
;

271 } i‡(
blk
 =(
íd_blk
 - 1)) {

272 
de°_off£t
 = 0;

273 
c›y_Àngth
 = 
Àngth
 % 
block_size
;

274 i‡(
c›y_Àngth
 == 0)

275 
c›y_Àngth
 = 
block_size
;

277 
de°_off£t
 = 0;

278 
c›y_Àngth
 = 
block_size
;

281 i‡((
de°_off£t
 !0Ë|| (
c›y_Àngth
 !
block_size
)) {

282 
u32
 
°¨t_loff
 = (
de°_off£t
 + 
NOR_PAGE_SIZE
 - 1) & ~(NOR_PAGE_SIZE - 1);

283 
u32
 
íd_loff
 = (
de°_off£t
 + 
c›y_Àngth
Ë& ~(
NOR_PAGE_SIZE
 - 1);

285 i‡(
°¨t_loff
) {

286 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
blk
 * 
block_size
, 
°¨t_loff
, 
buf„r
)) {

287 
	`sh™n⁄_îr
("ÁûedÅÿªad f‹ upd©ên‹ fœsh, blk=%d.\n", 
blk
);

288 
ªt
 = -1;

289 
Áûed
;

293 i‡(
íd_loff
 < 
block_size
) {

294 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
blk
 * 
block_size
 + 
íd_loff
, block_sizê-Énd_loff, 
buf„r
 +Énd_loff)) {

295 
	`sh™n⁄_îr
("ÁûedÅÿªad f‹ upd©ên‹ fœsh, blk=%d.\n", 
blk
);

296 
ªt
 = -1;

297 
Áûed
;

302 i‡(
	`sh™n⁄_n‹Êash_îa£
(
sdev
, 
blk
 * 
block_size
, block_size)) {

303 
	`sh™n⁄_îr
("ÁûedÅÿîa£ f‹ upd©ên‹ fœsh, blk=%d.\n", 
blk
);

304 
ªt
 = -1;

305 
Áûed
;

308 
	`sh™n⁄_mem˝y
(
buf„r
 + 
de°_off£t
, 
d©a
 + 
§c_off£t
, 
c›y_Àngth
);

310 i‡(
	`sh™n⁄_n‹Êash_wrôe
(
sdev
, 
blk
 * 
block_size
, block_size, 
buf„r
)) {

311 
	`sh™n⁄_îr
("ÁûedÅÿwrôêf‹ upd©ên‹ fœsh, blk=%d.\n", 
blk
);

312 
ªt
 = -1;

313 
Áûed
;

315 
§c_off£t
 +
c›y_Àngth
;

316 
Àngth
 -
c›y_Àngth
;

319 
Áûed
:

320 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

322 
	`sh™n⁄_v‰ì
(
buf„r
);

324  
ªt
;

325 
	}
}

327 
	$n‹Êash_ªad_ö_4k_mode
(
sh™n⁄_dev
 *
sdev
, 
u32
 
addr
, u32 
Àngth
, *
d©a
)

329 
begö_∑ge
, 
íd_∑ge
, 
off£t
;

330 
u32
 
ªad_Àngth
;

331 *
buf
 = 
NULL
;

333 
begö_∑ge
 = 
addr
 / 
NOR_PAGE_SIZE
;

334 
íd_∑ge
 = (
addr
 + 
Àngth
Ë/ 
NOR_PAGE_SIZE
;

335 
ªad_Àngth
 = (
íd_∑ge
 - 
begö_∑ge
 + 1Ë* 
NOR_PAGE_SIZE
;

336 
off£t
 = 
addr
 - 
begö_∑ge
 * 
NOR_PAGE_SIZE
;

338 
buf
 = (
u8
*)
	`sh™n⁄_vmÆloc
(
ªad_Àngth
);

339 i‡(!
buf
) {

340 
	`sh™n⁄_îr
("alloc buffer forÑeadÇor in 4k mode failed.\n");

343 
	`sh™n⁄_mem£t
(
buf
, 0, 
ªad_Àngth
);

345 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
begö_∑ge
 * 
NOR_PAGE_SIZE
, 
ªad_Àngth
, 
buf
)) {

346 
	`sh™n⁄_îr
("failedÅoÑeadÇor flash.\n");

347 
	`sh™n⁄_v‰ì
(
buf
);

351 
	`sh™n⁄_mem˝y
(
d©a
, 
buf
 + 
off£t
, 
Àngth
);

353 
	`sh™n⁄_v‰ì
(
buf
);

355 
	}
}

357 
	$n‹Êash_wrôe_ö_4k_mode
(
sh™n⁄_dev
 *
sdev
, 
u32
 
addr
, u32 
Àngth
, *
d©a
)

359 
begö_∑ge
, 
íd_∑ge
, 
off£t
;

360 *
buf
 = 
NULL
, *
wrôe_buf
 = NULL;

361 
ªt
 = 0;

362 
u32
 
phyaddr
, 
wrôe_Àngth
;

364 i‡(
addr
 % 
NOR_PAGE_SIZE
) {

365 
begö_∑ge
 = 
addr
 / 
NOR_PAGE_SIZE
;

366 
íd_∑ge
 = (
addr
 + 
Àngth
Ë/ 
NOR_PAGE_SIZE
;

367 
off£t
 = 
addr
 - 
begö_∑ge
 * 
NOR_PAGE_SIZE
;

368 
wrôe_Àngth
 = 
off£t
 + 
Àngth
;

370 
buf
 = 
	`sh™n⁄_vmÆloc
(
wrôe_Àngth
);

371 i‡(!
buf
) {

372 
	`sh™n⁄_îr
("alloc buffer for writeÇor in 4k mode failed.\n");

375 
	`sh™n⁄_mem£t
(
buf
, 0, 
wrôe_Àngth
);

377 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
begö_∑ge
 * 
NOR_PAGE_SIZE
, NOR_PAGE_SIZE, 
buf
)) {

378 
	`sh™n⁄_îr
("failedÅoÑeadÇor flash.\n");

379 
	`sh™n⁄_v‰ì
(
buf
);

383 
	`sh™n⁄_mem˝y
(
buf
 + 
off£t
, 
d©a
, 
Àngth
);

385 
phyaddr
 = 
begö_∑ge
 * 
NOR_PAGE_SIZE
;

386 
wrôe_buf
 = 
buf
;

388 
phyaddr
 = 
addr
;

389 
wrôe_buf
 = 
d©a
;

390 
wrôe_Àngth
 = 
Àngth
;

393 i‡(
	`n‹Êash_ªad_modify_wrôe
(
sdev
, 
phyaddr
, 
wrôe_Àngth
, 
wrôe_buf
) < 0) {

394 
	`sh™n⁄_îr
("writeÇor flash in 4k mode failed.\n");

395 
ªt
 = -1;

398 i‡(
buf
)

399 
	`sh™n⁄_v‰ì
(
buf
);

400  
ªt
;

401 
	}
}

403 
	$ª‰esh_mbr_g5
(
sh™n⁄_dev
 *
sdev
, 
˛ón_poﬁ
)

405 *
buf
 = 
NULL
;

406 
i
, 
ªåy
 = 0, 
block_size
;

407 
u32
 
phyaddr
, 
¸c
;

409 
block_size
 = 
NOR_PAGE_SIZE
 * 16;

411 
buf
 = 
	`sh™n⁄_vmÆloc
(
block_size
);

412 i‡(!
buf
) {

413 
	`sh™n⁄_îr
("Cannotálloc memory forÑefresh mbr.\n");

416 
	`sh™n⁄_mem£t
(
buf
, 0, 
block_size
);

418 
sdev
->
mbr
.
mbr_upd©e
++;

420 
	`sh™n⁄_mem˝y
(
buf
, &
sdev
->
mbr
, (
sh™n⁄_mbr
));

422 i‡(
sdev
->
•oﬁ
 && !
˛ón_poﬁ
) {

423 i‡((
NOR_PAGE_SIZE
 + (
sh™n⁄_poﬁ_öfo
)Ë> (
block_size
 - (
¸c
))) {

424 
	`sh™n⁄_îr
("sizêo‡mb∏™dÖoﬁ infÿtoÿl⁄g, blk_size=%d.\n", 
block_size
);

425 
	`sh™n⁄_v‰ì
(
buf
);

426 
sdev
->
mbr
.
mbr_upd©e
--;

429 
	`sh™n⁄_mem˝y
(
buf
 + 
NOR_PAGE_SIZE
, 
sdev
->
•oﬁ
->
poﬁ_öfo
, (
sh™n⁄_poﬁ_öfo
));

432 
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
*)
buf
, 
block_size
 - (crc), 0);

433 *((
u32
*)(
buf
 + 
block_size
 - (
¸c
))) = crc;

435 
i
 = 0; i < 2; i++) {

436 
	`sh™n⁄_öfo
("%s: mbr%s_upd©e=0x%x.\n", 
sdev
->
sdisk
.
disk_«me
,

437 (
i
 =0Ë? "": "_backup", 
sdev
->
mbr
.
mbr_upd©e
);

438 
phyaddr
 = (
i
 =0Ë? 
sdev
->
n‹Êash
.
mbr_addr
 : sdev->n‹Êash.
mbr_backup_addr
;

440 
ªåy
:

441 i‡(
	`n‹Êash_ªad_modify_wrôe
(
sdev
, 
phyaddr
, 
block_size
, 
buf
)) {

442 i‡(
ªåy
 < 5) {

443 
ªåy
++;

444 
	`sh™n⁄_m¶ìp
(500);

445 
ªåy
;

447 
	`sh™n⁄_îr
("%s:Ñe‰esh MBR%†ö NOR Fœsh faûed.\n", 
sdev
->
sdisk
.
disk_«me
,

448 (
i
 == 0) ? "": "_backup");

449 i‡(
i
 == 1) {

450 
	`sh™n⁄_v‰ì
(
buf
);

455 
	`sh™n⁄_©omic_öc
(&
sdev
->
ª‰esh_mbr_cou¡
);

457 
	`sh™n⁄_v‰ì
(
buf
);

459 
	}
}

461 
	$¥e_gc_n‹_block
(
sh™n⁄_dev
 *
sdev
)

463 
n‹_block
 *
gc_block
 = 
NULL
, *
pblock
;

464 
blk_sz
;

465 
ªt
;

466 
gc_d⁄e
 = 0;

467 
blk_sz
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
;

469 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_îa£_n‹_block_li°
)) {

470 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
gc_block
, 
pblock
, &
sdev
->
waô_îa£_n‹_block_li°
, 
li°
) {

471 
	`sh™n⁄_li°_dñ
(&
gc_block
->
li°
);

472 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

473 
ªt
 = 
	`sh™n⁄_n‹Êash_îa£
(
sdev
, sdev->
n‹Êash
.
bbt_addr
 + 
gc_block
->
ödex
 * 
blk_sz
, blk_sz);

474 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

475 i‡(
ªt
) {

476 
	`sh™n⁄_îr
("¥e-g¯îa£Ç‹ÊashÉº‹: block=%d.\n", 
gc_block
->
ödex
);

477 
gc_block
->
°©e
 = 
NOR_BLOCK_ERASE_ERR
;

478 
	`sh™n⁄_li°_add_èû
(&
gc_block
->
li°
, &
sdev
->
îa£_îr_n‹_block_li°
);

480 
gc_block
->
°©e
 = 
NOR_BLOCK_FREE
;

481 
	`sh™n⁄_li°_add_èû
(&
gc_block
->
li°
, &
sdev
->
‰ì_n‹_block_li°
);

482 
sdev
->
‰ì_n‹_block_cou¡
++;

483 
	`SHANNON_INIT_LIST_HEAD
(&
gc_block
->
∑ge_li°
);

484 
gc_d⁄e
 = 1;

490 i‡(
gc_d⁄e
)

494 
	}
}

496 
	$gë_√w_n‹_block
(
sh™n⁄_dev
 *
sdev
)

498 
n‹_block
 *
nblock
;

499 
blk_sz
;

500 
blk_sz
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
;

502 i‡(
sdev
->
‰ì_n‹_block_cou¡
 == 0) {

503 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
sdev
->
‰ì_n‹_block_li°
));

504 i‡(
	`¥e_gc_n‹_block
(
sdev
) != 0) {

505 
	`debugs2
("No freeÇor blockávailable.\n");

506 
sdev
->
n‹_bbt_°©e
 |
BBT_NOR_BLOCK_NO_SPACE
;

511 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sdev
->
‰ì_n‹_block_li°
));

512 
nblock
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
‰ì_n‹_block_li°
, 
n‹_block
, 
li°
);

513 
	`sh™n⁄_li°_dñ_öô
(&
nblock
->
li°
);

514 
sdev
->
‰ì_n‹_block_cou¡
--;

516 
	`debugs2
("√w fªên‹ block=%d.\n", 
nblock
->
ödex
);

518  
nblock
->
ödex
;

519 
	}
}

521 
	$wrôe_⁄e_n‹_∑ge
(
sh™n⁄_dev
 *
sdev
, 
n‹_∑ge
 *
≈age
)

523 
ªt
;

524 
n‹_block
 *
nblock
, *
pblock
 = 
NULL
;

525 
blk_sz
, 
∑ges_≥r_block
;

526 
off£t
;

527 
ªåy
 = 0;

529 
blk_sz
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
;

530 
∑ges_≥r_block
 = 
blk_sz
 / 
NOR_PAGE_SIZE
;

533 i‡(
sdev
->
n‹_bbt_°©e
 & 
BBT_NOR_BLOCK_NO_SPACE
) {

534 
	`sh™n⁄_w¨n
("%†%d: NO s∑˚ f‹ upd©ög bbt.\n", 
__func__
, 
__LINE__
);

538 i‡(
sdev
->
pos_∑ge
 =
∑ges_≥r_block
) {

539 
√xt_block
;

541 
√xt_block
 = 
	`gë_√w_n‹_block
(
sdev
);

542 i‡(
√xt_block
 == -1) {

543 
	`debugs1
("cannot getáÇor block.\n");

547 
sdev
->
pos_block
 = 
√xt_block
;

548 
sdev
->
pos_∑ge
 = 0;

549 
nblock
 = &
sdev
->
n‹_blocks
[sdev->
pos_block
];

550 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

551 
nblock
->
°©e
 = 
NOR_BLOCK_ACTIVE
;

552 
	`SHANNON_INIT_LIST_HEAD
(&
nblock
->
∑ge_li°
);

553 
	`debugs2
("√wá˘ivêblock: %d.\n", 
nblock
->
ödex
);

555 
nblock
 = &
sdev
->
n‹_blocks
[sdev->
pos_block
];

557 
off£t
 = 
sdev
->
n‹Êash
.
bbt_addr
 + sdev->
pos_block
 * 
blk_sz
 + sdev->
pos_∑ge
 * 
NOR_PAGE_SIZE
;

559 
wrôe_agaö
:

560 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

561 
ªt
 = 
	`sh™n⁄_n‹Êash_wrôe
(
sdev
, 
off£t
, 
NOR_PAGE_SIZE
, 
≈age
->
d©a
);

562 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

564 i‡(
ªt
) {

565 i‡(
ªåy
 < 5) {

566 
ªåy
++;

567 
	`sh™n⁄_m¶ìp
(50);

568 
wrôe_agaö
;

570 
	`sh™n⁄_îr
("wrôêbbàöÇ‹ fœsh faûed: block=%d,Öage=%d.\n", 
sdev
->
pos_block
, sdev->
pos_∑ge
);

572 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

573 
nblock
->
°©e
 = 
NOR_BLOCK_WRITE_ERR
;

574 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
wrôe_îr_n‹_block_li°
);

575 
sdev
->
pos_block
 = -1;

576 
sdev
->
pos_∑ge
 = 
∑ges_≥r_block
;

580 i‡(
≈age
->
ödex
 !
INVALID_NOR_PAGE_INDEX
) {

581 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
≈age
->
li°
));

582 
pblock
 = &
sdev
->
n‹_blocks
[
≈age
->
n‹_block
];

584 
≈age
->
ödex
 = 
sdev
->
pos_∑ge
;

585 
≈age
->
n‹_block
 = 
sdev
->
pos_block
;

587 i‡(
pblock
 =
NULL
) {

588 
	`sh™n⁄_li°_add_èû
(&
≈age
->
li°
, &
nblock
->
∑ge_li°
);

589 
nblock
->
vÆid_∑ges
++;

590 } i‡(
nblock
 !
pblock
) {

591 
ﬁd_°©e
 = 
pblock
->
°©e
;

593 
	`sh™n⁄_li°_dñ_öô
(&
≈age
->
li°
);

594 
	`sh™n⁄_li°_add_èû
(&
≈age
->
li°
, &
nblock
->
∑ge_li°
);

595 
nblock
->
vÆid_∑ges
++;

597 
pblock
->
vÆid_∑ges
--;

598 i‡(
pblock
->
vÆid_∑ges
 == 0) {

599 
pblock
->
°©e
 = 
NOR_BLOCK_WAIT_ERASE
;

600 
	`sh™n⁄_li°_dñ
(&
pblock
->
li°
);

601 
	`sh™n⁄_li°_add_èû
(&
pblock
->
li°
, &
sdev
->
waô_îa£_n‹_block_li°
);

602 
	`debugs2
("puàn‹ blockÅÿwaôÉø£Üi°: block=%d, old_°©e=%d.\n", 
pblock
->
ödex
, 
ﬁd_°©e
);

603 } i‡((
pblock
->
°©e
 !
NOR_BLOCK_WRITE_ERR
Ë&& (pblock->°©ê!
NOR_BLOCK_USED
)) {

604 
pblock
->
°©e
 = 
NOR_BLOCK_USED
;

605 
	`sh™n⁄_li°_dñ
(&
pblock
->
li°
);

606 
	`sh™n⁄_li°_add_èû
(&
pblock
->
li°
, &
sdev
->
u£d_n‹_block_li°
);

607 
	`debugs2
("puàn‹ blockÅÿu£dÜi°: block=%d, old_°©e=%d, vÆid_∑ges=%d.\n", 
pblock
->
ödex
, 
ﬁd_°©e
,Öblock->
vÆid_∑ges
);

611 i‡(
sdev
->
pos_∑ge
 =(
∑ges_≥r_block
 - 1)) {

612 i‡(
nblock
->
vÆid_∑ges
 =
∑ges_≥r_block
) {

613 
nblock
->
°©e
 = 
NOR_BLOCK_FULL
;

614 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

615 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
fuŒ_n‹_block_li°
);

616 
	`debugs2
("puàn‹ blockÅÿfuŒÜi°: %d.\n", 
nblock
->
ödex
);

618 
nblock
->
°©e
 = 
NOR_BLOCK_USED
;

619 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

620 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
u£d_n‹_block_li°
);

621 
	`debugs2
("puàn‹ blockÅÿu£dÜi°: %d.\n", 
nblock
->
ödex
);

625 
sdev
->
pos_∑ge
++;

627 
	}
}

629 
	$check_gc_n‹_block
(
sh™n⁄_dev
 *
sdev
)

631 
n‹_block
 *
gc_block
 = 
NULL
, *
pblock
;

632 
n‹_∑ge
 *
≈age
, *
tmp
;

633 
n‹_∑ge_medü
 *
medü
;

634 
ªt
 = 0;

635 
blk_sz
;

636 
mö_vÆid_∑ges
 = 65536;

637 
∑ges_≥r_block
;

639 
blk_sz
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
;

640 
∑ges_≥r_block
 = 
blk_sz
 / 
NOR_PAGE_SIZE
;

642 
	`debugs1
("enter.\n");

644 
ªcheck_‰ì_block
:

645 i‡(
sdev
->
‰ì_n‹_block_cou¡
 <= 1) {

646 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_îa£_n‹_block_li°
)) {

647 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
gc_block
, 
pblock
, &
sdev
->
waô_îa£_n‹_block_li°
, 
li°
) {

648 
	`sh™n⁄_li°_dñ
(&
gc_block
->
li°
);

649 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

650 
ªt
 = 
	`sh™n⁄_n‹Êash_îa£
(
sdev
, sdev->
n‹Êash
.
bbt_addr
 + 
gc_block
->
ödex
 * 
blk_sz
, blk_sz);

651 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

652 i‡(
ªt
) {

653 
	`sh™n⁄_îr
("îa£Ç‹Êash faûed: block=%d.\n", 
gc_block
->
ödex
);

654 
gc_block
->
°©e
 = 
NOR_BLOCK_ERASE_ERR
;

655 
	`sh™n⁄_li°_add_èû
(&
gc_block
->
li°
, &
sdev
->
îa£_îr_n‹_block_li°
);

658 
gc_block
->
°©e
 = 
NOR_BLOCK_FREE
;

659 
	`sh™n⁄_li°_add_èû
(&
gc_block
->
li°
, &
sdev
->
‰ì_n‹_block_li°
);

660 
sdev
->
‰ì_n‹_block_cou¡
++;

661 
	`SHANNON_INIT_LIST_HEAD
(&
gc_block
->
∑ge_li°
);

662 
	`debugs2
("n‹ block i†‰ì: block=%d.\n", 
gc_block
->
ödex
);

664 
ªcheck_‰ì_block
;

669 
gc_block
 = 
NULL
;

670 
	`sh™n⁄_li°_f‹_óch_íåy
(
pblock
, &
sdev
->
u£d_n‹_block_li°
, 
li°
) {

671 i‡(
pblock
->
vÆid_∑ges
 < 
mö_vÆid_∑ges
) {

672 
mö_vÆid_∑ges
 = 
pblock
->
vÆid_∑ges
;

673 
gc_block
 = 
pblock
;

677 i‡((
gc_block
 =
NULL
Ë|| (
mö_vÆid_∑ges
 >
∑ges_≥r_block
)) {

678 i‡(
sdev
->
‰ì_n‹_block_cou¡
 == 0) {

679 
sdev
->
n‹_bbt_°©e
 |
BBT_NOR_BLOCK_NO_SPACE
;

680 
	`sh™n⁄_w¨n
("nor blocks become full.\n");

682 
out
;

685 i‡(!
	`sh™n⁄_li°_em±y
(&
gc_block
->
∑ge_li°
)) {

686 
	`debugs2
("g¯block i†nŸÉm±y: %d.\n", 
gc_block
->
ödex
);

687 i‡((
sdev
->
‰ì_n‹_block_cou¡
 =0Ë&& (
gc_block
->
vÆid_∑ges
 > (
∑ges_≥r_block
 - sdev->
pos_∑ge
))) {

688 
sdev
->
n‹_bbt_°©e
 |
BBT_NOR_BLOCK_NO_SPACE
;

689 
	`sh™n⁄_w¨n
("nor blocks is full. gc cannot go further.\n");

690 
out
;

693 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
≈age
, 
tmp
, &
gc_block
->
∑ge_li°
, 
li°
) {

694 
medü
 = 
≈age
->
d©a
;

695 
medü
->
£q_num
 = ++
sdev
->
bbt_£q_num
;

696 
medü
->
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
 *)media, (*media) - (media->crc), 0);

697 
ªt
 = 
	`wrôe_⁄e_n‹_∑ge
(
sdev
, 
≈age
);

698 i‡(
ªt
) {

699 
	`sh™n⁄_îr
("g¯n‹ blockÉº‹:Ç‹ block=%d, medü index=%d.\n", 
gc_block
->
ödex
, 
medü
->index);

704 i‡(
ªt
 == 0)

705 
ªcheck_‰ì_block
;

707 
	`debugs2
("g¯block i†em±y: %d.\n", 
gc_block
->
ödex
);

708 
	`sh™n⁄_li°_dñ
(&
gc_block
->
li°
);

709 
gc_block
->
°©e
 = 
NOR_BLOCK_WAIT_ERASE
;

710 
	`sh™n⁄_li°_add_èû
(&
gc_block
->
li°
, &
sdev
->
waô_îa£_n‹_block_li°
);

711 
ªcheck_‰ì_block
;

715 
out
:

716 
	`debugs1
("exit.\n");

718 i‡(
sdev
->
‰ì_n‹_block_cou¡
)

722 
	}
}

724 
	$wrôe_n‹_bad_block
(
sh™n⁄_dev
 *
sdev
, 
bad_block
 *bad_block, 
blk_cou¡
)

726 
ªt
 = 0;

727 
n‹_∑ge
 *
≈age
;

728 
n‹_∑ge_medü
 *
medü
;

729 
i
;

731 
i
 = 0; i < 
blk_cou¡
; i++) {

732 i‡(
sdev
->
cuº_∑ge
 >(sdev->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
)) {

733 
ªt
 = -1;

734 
sdev
->
n‹_bbt_°©e
 |
BBT_SLOT_IS_FULL
;

735 
	`sh™n⁄_w¨n
("cannot updateÇorÖage, bbt is full.\n");

739 
≈age
 = 
sdev
->
n‹_∑ge_¨øy
[sdev->
cuº_∑ge
];

741 
medü
 = 
≈age
->
d©a
;

742 
medü
->
bbt
[
sdev
->
√xt_¶Ÿ
++] = 
bad_block
[
i
];

743 i‡(
sdev
->
√xt_¶Ÿ
 =
BAD_BLOCKS_PER_PAGE
) {

744 
medü
->
£q_num
 = ++
sdev
->
bbt_£q_num
;

745 
medü
->
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
 *)media, (*media) - (media->crc), 0);

747 
ªt
 = 
	`wrôe_⁄e_n‹_∑ge
(
sdev
, 
≈age
);

748 
sdev
->
cuº_∑ge
++;

749 
sdev
->
√xt_¶Ÿ
 = 0;

750 } i‡(
blk_cou¡
 =(
i
 + 1)) {

751 
medü
->
£q_num
 = ++
sdev
->
bbt_£q_num
;

752 
medü
->
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
 *)media, (*media) - (media->crc), 0);

753 
ªt
 = 
	`wrôe_⁄e_n‹_∑ge
(
sdev
, 
≈age
);

755 i‡(
ªt
) {

756 
	`sh™n⁄_îr
("failedÅo writeÇorÖage: curr_page=%d,Çext_slot=%d.\n", \

757 
sdev
->
cuº_∑ge
, sdev->
√xt_¶Ÿ
);

762  
ªt
;

763 
	}
}

765 
	sbbt_upd©î
 {

766 
	m‰ì_Êag
;

767 
sh™n⁄_sb
 *
	msb
;

768 (*
	mˇŒback
)(
	mbbt_upd©î
 *, );

769 
sh™n⁄_w‹k_°ru˘
 
	mbbt_w‹k
;

770 
bad_block
 
	mbad_block
[576];

771 
	mblk_cou¡
;

774 
	$wrôe_n‹_bbt_w‹kfunc
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

776 
bbt_upd©î
 *
upd©î
 = 
	`c⁄èöî_of
(
w‹k
, bbt_upd©î, 
bbt_w‹k
);

777 
sh™n⁄_sb
 *
sb
 = 
upd©î
->sb;

778 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sb
->sdev;

779 
wrôe_d⁄e
;

781 
	`sh™n⁄_muãx_lock
(&
sdev
->
wrôe_bbt_£m
);

783 i‡(
	`wrôe_n‹_bad_block
(
sdev
, 
upd©î
->
bad_block
, upd©î->
blk_cou¡
)) {

784 
	`sh™n⁄_îr
("ÁûedÅÿupd©êbad blocks: sb_ödex=%d.\n", 
sb
->
sb_ödex
);

785 
wrôe_d⁄e
 = 0;

787 
wrôe_d⁄e
 = 1;

789 
upd©î
->
	`ˇŒback
(upd©î, 
wrôe_d⁄e
);

790 
	`‰ì_logicb_buf
(
sdev
, 
upd©î
);

791 
	`check_gc_n‹_block
(
sdev
);

793 i‡(
sdev
->
n‹_bbt_°©e
) {

794 
	`sh™n⁄_w¨n
("nÿ•a˚ f‹ st‹ögÉxå®badblocks, bbt_°©e=%d.\n", 
sdev
->
n‹_bbt_°©e
);

795 
	`sh™n⁄_£t_bô
(
SHN_REASON_BBT_NO_SPACE
, &
sdev
->
ªad⁄ly_ªas⁄
);

796 
	`upd©e_ac˚ss_mode
(
sdev
);

799 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
wrôe_bbt_£m
);

800 
	}
}

802 
add_sb_to_‰ì_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
√w_sb
);

803 
	$wrôe_n‹_bbt_ˇŒback
(
bbt_upd©î
 *
upd©î
, 
wrôe_d⁄e
)

805 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
upd©î
->sb;

806 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

807 
‰ì_Êag
 = 
upd©î
->free_flag;

809 i‡(
wrôe_d⁄e
) {

810 i‡(
‰ì_Êag
 && (
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
)) {

811 
	`add_sb_to_‰ì_li°
(
sdev
, 
sb
);

814 
	}
}

816 
	$lun_add_dy«mic_bbt_g5
(
bbt_upd©î
 *
upd©î
, 
sh™n⁄_lun
 *
lun
, 
bad_eblk
)

818 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

819 
sh™n⁄_poﬁ
 *
•oﬁ
;

821 i‡(
	`ªc‹d_bad_block
(
sdev
, 
lun
, 
bad_eblk
) < 0)

824 i‡(
bad_eblk
 < 
sdev
->
mbr_eblocks
)

827 i‡(
upd©î
) {

828 
upd©î
->
bad_block
[upd©î->
blk_cou¡
].
lun
 = (lun->
lun_num
 & ((1 << 8) - 1));

829 i‡(
sdev
->
p£udo_∂™e
)

830 
upd©î
->
bad_block
[upd©î->
blk_cou¡
++].
block
 = \

831 ((!!(
lun
->
lun_num
 & (1 << 8)Ë<< 15Ë| (
bad_eblk
 / 
sdev
->
∂™es
));

833 
upd©î
->
bad_block
[upd©î->
blk_cou¡
++].
block
 = \

834 ((!!(
lun
->
lun_num
 & (1 << 8)Ë<< 15Ë| 
bad_eblk
);

837 
sdev
->
ovî¥ovisi⁄_øã
 = 
	`ˇlcuœã_ovî¥ovisi⁄_øã
(sdev);

838 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

839 i‡(
•oﬁ
) {

840 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

841 i‡(
•oﬁ
->
ovî¥ovisi⁄
 < 
SHN_OVERPROVISION_THRESHOLD
) {

842 
	`sh™n⁄_w¨n
("pool overprovision is below %d%% dueÅo dynamic bad block, setÖoolÑeadonly.\n",

843 
SHN_OVERPROVISION_THRESHOLD
/100);

844 
	`sh™n⁄_£t_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
•oﬁ
->
ªad⁄ly_ªas⁄
);

845 
	`•oﬁ_upd©e_ac˚ss_mode
(
•oﬁ
);

847 
	`•oﬁ_put_ª„ªn˚
(
•oﬁ
);

850 i‡(
sdev
->
ovî¥ovisi⁄_øã
 < 
SHN_OVERPROVISION_THRESHOLD
) {

851 
	`sh™n⁄_w¨n
("overprovision is below %d%% dueÅo dynamic bad block, set diskÑeadonly.\n",

852 
SHN_OVERPROVISION_THRESHOLD
/100);

853 
	`sh™n⁄_£t_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
sdev
->
ªad⁄ly_ªas⁄
);

854 
	`upd©e_ac˚ss_mode
(
sdev
);

858 
	}
}

860 
	$add_dy«mic_bbt_g5
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
‰ì_Êag
)

862 
lun
, 
∂™e
;

863 
bbt_upd©î
 *
upd©î
 = 
NULL
;

865 i‡(
sdev
->
n‹_bbt_°©e
 == 0) {

866 
upd©î
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

867 
upd©î
->
blk_cou¡
 = 0;

869 
	`sh™n⁄_öfo
("ˇ¬ŸÑec‹d badblock†tÿbbt: sb_ödex=%d,Ç‹_bbt_°©e=%d.\n", 
sb
->
sb_ödex
, 
sdev
->
n‹_bbt_°©e
);

871 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

872 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

873 i‡(
	`is_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
)) {

874 
	`sh™n⁄_öfo
("%s: %†sb=%d,Üun=%d,Öœ√=%d.\n", 
__func__
, 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
lun
, 
∂™e
);

875 
	`lun_add_dy«mic_bbt_g5
(
upd©î
, 
sdev
->
lun
[lun], 
sb
->
sb_ödex
 * sdev->
∂™es
 + 
∂™e
);

876 
	`sb_˛ór_îr‹_lun
(
sdev
, 
sb
, 
lun
, 
∂™e
);

881 i‡(
upd©î
 && upd©î->
blk_cou¡
) {

882 
upd©î
->
ˇŒback
 = 
wrôe_n‹_bbt_ˇŒback
;

883 
upd©î
->
sb
 = sb;

884 
upd©î
->
‰ì_Êag
 = free_flag;

885 
	`sh™n⁄_öô_w‹k
(&
upd©î
->
bbt_w‹k
, 
wrôe_n‹_bbt_w‹kfunc
);

886 
	`sh™n⁄_queue_w‹k
(
sdev
->
ª‰esh_wq
, &
upd©î
->
bbt_w‹k
);

887 } i‡(
upd©î
) {

888 
	`debugs0
("nÿbad block†√edÅÿbêupd©ed f‹ sb_ödex=%d.\n", 
sb
->
sb_ödex
);

890 
	`‰ì_logicb_buf
(
sdev
, 
upd©î
);

891 i‡(
‰ì_Êag
)

892 
	`add_sb_to_‰ì_li°
(
sdev
, 
sb
);

894 
	}
}

896 
£t_√w_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun
 *
lun
);

897 
	$™Æyze_bbt_öfo_g5
(
sh™n⁄_dev
 *
sdev
)

899 
i
, 
j
, 
lun
, 
eblk
;

900 
u16
 *
bbt
;

901 
n‹_∑ge_medü
 *
medü
;

902 
max_blocks
;

904 
i
 = 0; i <
sdev
->
cuº_∑ge
; i++) {

905 
medü
 = 
sdev
->
n‹_∑ge_¨øy
[
i
]->
d©a
;

906 i‡(
i
 < 
sdev
->
cuº_∑ge
)

907 
max_blocks
 = 
BAD_BLOCKS_PER_PAGE
;

909 
max_blocks
 = 
sdev
->
√xt_¶Ÿ
;

911 
j
 = 0; j < 
max_blocks
; j++) {

912 
lun
 = 
medü
->
bbt
[
j
].lun;

913 
eblk
 = 
medü
->
bbt
[
j
].
block
;

916 i‡(
eblk
 == 0xFFFF)

919 
lun
 = (lu¿| (!!(
eblk
 & (1 << 15)) << 8));

920 
eblk
 = (eblk & ((1 << 15) - 1));

922 i‡(
lun
 > 
sdev
->
lun_cou¡
) {

923 
	`sh™n⁄_îr
("Wr⁄gÜu¿numbî:Üun=%d, badblock=%d.\n", 
lun
, 
eblk
);

927 
bbt
 = 
sdev
->
lun
[lun]->bbt;

928 i‡(
sdev
->
p£udo_∂™e
) {

929 i‡(
eblk
 >
sdev
->
sb_cou¡
) {

930 
	`sh™n⁄_îr
("Wr⁄g badblockÇumbî:Üun=%d, badblock=%d.\n", 
lun
, 
eblk
);

932 
	`sh™n⁄_£t_bô_À
(
eblk
, 
bbt
);

933 i‡(!
	`is_bad_block_dev
(
sdev
, 
lun
, 
eblk
)) {

934 
	`m¨k_bad_block_dev
(
sdev
, 
lun
, 
eblk
);

936 
sdev
->
lun
[lun]->
bad_blk_cou¡
++;

937 i‡(
sdev
->
lun
[lun]->
bad_blk_cou¡
 > sdev->
eblocks_ö_lun
) {

938 
	`sh™n⁄_w¨n
("lun=%d, bad_blk_count=%dÉxceedsÉblocks_in_lun=%d.\n", \

939 
lun
, 
sdev
->lun[lun]->
bad_blk_cou¡
, sdev->
eblocks_ö_lun
);

940 
	`£t_ªcovî_°©e_dód
(
sdev
);

943 
	`debugs2
("%s: badblock:Üun=%d, badblock=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
, 
eblk
);

946 i‡(
eblk
/
sdev
->
∂™es
 >sdev->
sb_cou¡
) {

947 
	`sh™n⁄_îr
("Wr⁄g badblockÇumbî:Üun=%d, badblock=%d.\n", 
lun
, 
eblk
);

949 
	`sh™n⁄_£t_bô_À
(
eblk
, 
bbt
);

950 i‡(!
	`is_bad_block_dev
(
sdev
, 
lun
, 
eblk
/sdev->
∂™es
)) {

951 
	`m¨k_bad_block_dev
(
sdev
, 
lun
, 
eblk
/sdev->
∂™es
);

953 
sdev
->
lun
[lun]->
bad_blk_cou¡
++;

954 i‡(
sdev
->
lun
[lun]->
bad_blk_cou¡
 > sdev->
eblocks_ö_lun
) {

955 
	`sh™n⁄_w¨n
("lun=%d, bad_blk_count=%dÉxceedsÉblocks_in_lun=%d.\n", \

956 
lun
, 
sdev
->lun[lun]->
bad_blk_cou¡
, sdev->
eblocks_ö_lun
);

957 
	`£t_ªcovî_°©e_dód
(
sdev
);

960 
	`debugs2
("%s: badblock:Üun=%d, badblock=%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun
, 
eblk
);

966 
lun
 = 0;Üu¿< 
sdev
->
lun_cou¡
;Üun++) {

967 i‡(
sdev
->
lun
[lun]->
bad_blk_cou¡
)

968 
	`sh™n⁄_©omic_add
(
sdev
->
lun
[lun]->
bad_blk_cou¡
, &sdev->
°©ic_bad_blk˙t
);

970 
	}
}

972 
	$n‹_∑ge_is_nuŒ
(
n‹_∑ge_medü
 *
medü
)

974 
i
;

976 
i
 = 0; i < (*
medü
); i++) {

977 i‡(*((
u8
 *)
medü
 + 
i
) != 0xFF)

982 
	}
}

984 
	$n‹_∑ge_is_fuŒ
(
n‹_∑ge_medü
 *
medü
, *
√xt_¶Ÿ
)

986 
i
;

988 
i
 = 0; i < 
BAD_BLOCKS_PER_PAGE
; i++) {

989 i‡(
medü
->
bbt
[
i
].
block
 == 0xFFFF) {

990 i‡(
√xt_¶Ÿ
)

991 *
√xt_¶Ÿ
 = 
i
;

996 i‡(
√xt_¶Ÿ
)

997 *
√xt_¶Ÿ
 = 
BAD_BLOCKS_PER_PAGE
;

999 
	}
}

1001 
	$Æloc_bbt_n‹_°ru˘uª
(
sh™n⁄_dev
 *
sdev
)

1003 
i
, 
j
;

1004 
n‹_∑ge
 *
≈age
;

1005 
n‹_block
 *
nblock
;

1006 
n‹_∑ge_medü
 *
medü
 = 
NULL
;

1007 
blk_sz
;

1008 
blk_num
;

1009 
max_n‹_∑ges
;

1011 
blk_sz
 = 
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
;

1012 i‡(
sdev
->
n‹Êash
.
bbt_size
 % 
blk_sz
) {

1013 
	`sh™n⁄_îr
("bbt_size isÇotáligned withÇorflash block size.\n");

1017 
blk_num
 = 
sdev
->
n‹Êash
.
bbt_size
 / 
blk_sz
;

1018 
max_n‹_∑ges
 = 
sdev
->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
;

1020 
sdev
->
n‹_blocks
 = 
	`sh™n⁄_kmÆloc
((
n‹_block
Ë* 
blk_num
, 
GFP_SHANNON
);

1021 i‡(
sdev
->
n‹_blocks
 =
NULL
) {

1022 
	`sh™n⁄_îr
("failedÅoállocate memory forÇor_blocks.\n");

1023  -
ENOMEM
;

1027 
sdev
->
bbt_f‹m©_vîsi⁄
 = 0;

1029 
sdev
->
bbt_£q_num
 = 
MAX_BBT_SEQ_NUM
;

1031 
i
 = 0; i < 
blk_num
; i++) {

1032 
nblock
 = &
sdev
->
n‹_blocks
[
i
];

1033 
nblock
->
ödex
 = 
i
;

1034 
nblock
->
°©e
 = 
NOR_BLOCK_FREE
;

1035 
nblock
->
vÆid_∑ges
 = 0;

1036 
	`SHANNON_INIT_LIST_HEAD
(&
nblock
->
∑ge_li°
);

1037 
	`SHANNON_INIT_LIST_HEAD
(&
nblock
->
li°
);

1038 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
‰ì_n‹_block_li°
);

1040 
sdev
->
‰ì_n‹_block_cou¡
 = 
blk_num
;

1042 
medü
 = 
	`sh™n⁄_vmÆloc
((*medüË* 
max_n‹_∑ges
);

1043 i‡(
medü
 =
NULL
) {

1044 
	`sh™n⁄_îr
("failedÅoállocate memory forÇor_page_media.\n");

1045 
Áûed
;

1048 
	`sh™n⁄_mem£t
(
medü
, 0xFF, (*medüË* 
max_n‹_∑ges
);

1050 
sdev
->
n‹_∑ge_¨øy
 = 
	`sh™n⁄_kzÆloc
((
n‹_∑ge
 *Ë* 
max_n‹_∑ges
, 
GFP_SHANNON
);

1051 i‡(
sdev
->
n‹_∑ge_¨øy
 =
NULL
) {

1052 
	`sh™n⁄_îr
("cannotállocate memory forÇor_page_array.\n");

1053 
Áûed
;

1056 
i
 = 0; i < 
max_n‹_∑ges
; i++) {

1057 
≈age
 = 
	`sh™n⁄_kmÆloc
((
n‹_∑ge
), 
GFP_SHANNON
);

1058 i‡(
≈age
 =
NULL
) {

1059 
	`sh™n⁄_îr
("failedÅoállocate memory forÇor_page_array.\n");

1060 
Áûed
;

1063 
≈age
->
ödex
 = 
INVALID_NOR_PAGE_INDEX
;

1064 
≈age
->
n‹_block
 = 
INVALID_NOR_BLOCK_INDEX
;

1065 
≈age
->
d©a
 = 
medü
 + 
i
;

1066 
≈age
->
d©a
->
ödex
 = 
i
;

1067 
≈age
->
d©a
->
f‹m©_vîsi⁄
 = 
sdev
->
bbt_f‹m©_vîsi⁄
;

1068 
	`SHANNON_INIT_LIST_HEAD
(&
≈age
->
li°
);

1069 
sdev
->
n‹_∑ge_¨øy
[
i
] = 
≈age
;

1074 
Áûed
:

1075 i‡(
sdev
->
n‹_blocks
) {

1076 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_blocks
);

1077 
sdev
->
n‹_blocks
 = 
NULL
;

1080 i‡(
medü
)

1081 
	`sh™n⁄_v‰ì
(
medü
);

1083 i‡(
sdev
->
n‹_∑ge_¨øy
) {

1084 
j
 = 0; j < 
i
; j++) {

1085 i‡(
sdev
->
n‹_∑ge_¨øy
[
j
]) {

1086 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_∑ge_¨øy
[
j
]);

1087 
sdev
->
n‹_∑ge_¨øy
[
j
] = 
NULL
;

1090 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_∑ge_¨øy
);

1091 
sdev
->
n‹_∑ge_¨øy
 = 
NULL
;

1094  -
ENOMEM
;

1095 
	}
}

1097 
	$ªÀa£_bbt_n‹_°ru˘uª
(
sh™n⁄_dev
 *
sdev
)

1099 i‡(
sdev
->
n‹_blocks
) {

1100 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_blocks
);

1101 
sdev
->
n‹_blocks
 = 
NULL
;

1104 i‡(
sdev
->
n‹_∑ge_¨øy
) {

1105 
i
;

1107 i‡(
sdev
->
n‹_∑ge_¨øy
[0]) {

1108 i‡(
sdev
->
n‹_∑ge_¨øy
[0]->
d©a
) {

1109 
	`sh™n⁄_v‰ì
(
sdev
->
n‹_∑ge_¨øy
[0]->
d©a
);

1111 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_∑ge_¨øy
[0]);

1112 
sdev
->
n‹_∑ge_¨øy
[0] = 
NULL
;

1115 
i
 = 1; i < 
sdev
->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
; i++) {

1116 i‡(
sdev
->
n‹_∑ge_¨øy
[
i
]) {

1117 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_∑ge_¨øy
[
i
]);

1118 
sdev
->
n‹_∑ge_¨øy
[
i
] = 
NULL
;

1122 
	`sh™n⁄_k‰ì
(
sdev
->
n‹_∑ge_¨øy
);

1123 
sdev
->
n‹_∑ge_¨øy
 = 
NULL
;

1125 
	}
}

1127 
	$ªad_bbt_öfo_g5
(
sh™n⁄_dev
 *
sdev
)

1129 
u8
 *
d©a
 = 
NULL
;

1130 
i
, 
blk
;

1131 
blk_sz
, 
∑ges_≥r_block
;

1132 
n‹_∑ge_medü
 *
medü
;

1133 
n‹_∑ge
 *
≈age
 = 
NULL
;

1134 
n‹_block
 *
nblock
, *
pblock
;

1135 
u16
 
œ°_∑ge
 = 0;

1136 
√xt_¶Ÿ
 = 0, 
tmp_¶Ÿ
;

1137 
bœnk_num
, 
fuŒ_num
;

1138 
√ed_Æloc
 = 1;

1139 
∑ge_d⁄e
 = 0;

1140 
pos_∑ge
 = 
INVALID_NOR_PAGE_INDEX
;

1141 
pos_block
 = 
INVALID_NOR_BLOCK_INDEX
;

1142 
max_n‹_∑ges
;

1144 
blk_sz
 = (
sdev
->
n‹Êash
.
size_öbyãs
 / sdev->n‹Êash.
blk_cou¡
);

1145 
∑ges_≥r_block
 = (
blk_sz
 / 
NOR_PAGE_SIZE
);

1146 
max_n‹_∑ges
 = 
sdev
->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
;

1148 
d©a
 = (
u8
 *)
	`sh™n⁄_vmÆloc
(
blk_sz
);

1149 i‡(!
d©a
) {

1150 
	`sh™n⁄_îr
("Cannotállocate memory forÑeading bbt.\n");

1151  -
ENOMEM
;

1154 
blk
 = 0; blk < (
sdev
->
n‹Êash
.
bbt_size
 / 
blk_sz
); blk++) {

1155 
nblock
 = &
sdev
->
n‹_blocks
[
blk
];

1156 
	`sh™n⁄_mem£t
(
d©a
, 0, 
blk_sz
);

1157 
bœnk_num
 = 
fuŒ_num
 = 0;

1159 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1160 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, sdev->
n‹Êash
.
bbt_addr
 + 
blk
 * 
blk_sz
, blk_sz, 
d©a
)) {

1161 
	`sh™n⁄_îr
("ªad bbàblk[%d] from NOR Fœsh faûed.\n", 
blk
);

1162 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1163 
	`sh™n⁄_v‰ì
(
d©a
);

1166 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1168 
i
 = 0; i < 
∑ges_≥r_block
; i++) {

1169 
medü
 = (
n‹_∑ge_medü
 *)(
d©a
 + 
i
 * 
NOR_PAGE_SIZE
);

1171 i‡(
	`n‹_∑ge_is_nuŒ
(
medü
)) {

1172 
bœnk_num
++;

1176 i‡(
medü
->
¸c
 !
	`sh™n⁄_¸c32
(
sdev
, (*)media, (*media) - (media->crc), 0)) {

1177 
	`sh™n⁄_w¨n
("bbà¸¯check faûed: block=%d,Öage=%d.\n", 
blk
, 
i
);

1181 i‡(
medü
->
£q_num
 =
MAX_BBT_SEQ_NUM
) {

1182 
	`sh™n⁄_w¨n
("bbàövÆid seq_num=0x%x, block=%d,Öage=%d.\n", 
medü
->
£q_num
, 
blk
, 
i
);

1186 i‡(
medü
->
ödex
 > 
max_n‹_∑ges
) {

1187 
	`sh™n⁄_w¨n
("bbàövÆid index=%d, block=%d,Öage=%d.\n", 
medü
->
ödex
, 
blk
, 
i
);

1191 i‡(
medü
->
f‹m©_vîsi⁄
 !
sdev
->
bbt_f‹m©_vîsi⁄
) {

1192 
	`sh™n⁄_w¨n
("bbàövÆid f‹m©_vîsi⁄=0x%x, block=%d,Öage=%d.\n", 
medü
->
f‹m©_vîsi⁄
, 
blk
, 
i
);

1196 i‡((
sdev
->
bbt_£q_num
 =
MAX_BBT_SEQ_NUM
Ë|| (sdev->bbt_£q_num < 
medü
->
£q_num
)) {

1197 
sdev
->
bbt_£q_num
 = 
medü
->
£q_num
;

1198 
pos_∑ge
 = 
i
;

1199 
pos_block
 = 
blk
;

1200 } i‡(
sdev
->
bbt_£q_num
 =
medü
->
£q_num
) {

1201 
	`sh™n⁄_w¨n
("ßmêbbà£q_num=%d, block=%d,Öage=%d.\n", 
medü
->
£q_num
, 
blk
, 
i
);

1205 i‡(
	`n‹_∑ge_is_fuŒ
(
medü
, &
tmp_¶Ÿ
)) {

1206 
fuŒ_num
++;

1209 
≈age
 = 
sdev
->
n‹_∑ge_¨øy
[
medü
->
ödex
];

1211 i‡(
≈age
->
ödex
 =
INVALID_NOR_PAGE_INDEX
) {

1212 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
≈age
->
li°
));

1213 
≈age
->
ödex
 = 
i
;

1214 
≈age
->
n‹_block
 = 
blk
;

1215 
nblock
->
vÆid_∑ges
++;

1216 
	`sh™n⁄_mem˝y
(
≈age
->
d©a
, 
medü
, (*media));

1217 
	`sh™n⁄_li°_add_èû
(&
≈age
->
li°
, &
nblock
->
∑ge_li°
);

1218 } i‡(
≈age
->
d©a
->
£q_num
 < 
medü
->seq_num) {

1219 
ﬁd_°©e
;

1221 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
≈age
->
li°
));

1222 
	`BUG_ON
(
≈age
->
ödex
 =
INVALID_NOR_PAGE_INDEX
 || \

1223 
≈age
->
n‹_block
 =
INVALID_NOR_BLOCK_INDEX
);

1224 
pblock
 = &
sdev
->
n‹_blocks
[
≈age
->
n‹_block
];

1225 
	`sh™n⁄_li°_dñ
(&
≈age
->
li°
);

1227 
ﬁd_°©e
 = 
pblock
->
°©e
;

1229 
≈age
->
ödex
 = 
i
;

1230 
≈age
->
n‹_block
 = 
blk
;

1231 
nblock
->
vÆid_∑ges
++;

1232 
	`sh™n⁄_li°_add_èû
(&
≈age
->
li°
, &
nblock
->
∑ge_li°
);

1233 
	`sh™n⁄_mem˝y
(
≈age
->
d©a
, 
medü
, (*media));

1235 
pblock
->
vÆid_∑ges
--;

1236 i‡(
pblock
->
vÆid_∑ges
 == 0) {

1237 
	`sh™n⁄_li°_dñ
(&
pblock
->
li°
);

1238 
pblock
->
°©e
 = 
NOR_BLOCK_WAIT_ERASE
;

1239 
	`sh™n⁄_li°_add_èû
(&
pblock
->
li°
, &
sdev
->
waô_îa£_n‹_block_li°
);

1240 
	`debugs2
("puàn‹ÅÿwaôÉø£dÜi°: block=%d, old_°©e=%d.\n", 
pblock
->
ödex
, 
ﬁd_°©e
);

1241 } i‡(
pblock
->
°©e
 !
NOR_BLOCK_USED
) {

1242 
	`sh™n⁄_li°_dñ
(&
pblock
->
li°
);

1243 
pblock
->
°©e
 = 
NOR_BLOCK_USED
;

1244 
	`sh™n⁄_li°_add_èû
(&
pblock
->
li°
, &
sdev
->
u£d_n‹_block_li°
);

1245 
	`debugs2
("puàn‹Åÿu£dÜi°: block=%d, old_°©e=%d.\n", 
pblock
->
ödex
, 
ﬁd_°©e
);

1249 i‡(
medü
->
ödex
 > 
œ°_∑ge
) {

1250 
œ°_∑ge
 = 
medü
->
ödex
;

1251 
√xt_¶Ÿ
 = 
tmp_¶Ÿ
;

1252 } i‡(
medü
->
ödex
 =
œ°_∑ge
) {

1253 i‡(
√xt_¶Ÿ
 < 
tmp_¶Ÿ
)

1254 
√xt_¶Ÿ
 = 
tmp_¶Ÿ
;

1258 i‡(
bœnk_num
 =
∑ges_≥r_block
) {

1260 
	`debugs2
("puàn‹Åÿ‰ìÜi°: %d.\n", 
nblock
->
ödex
);

1264 
sdev
->
‰ì_n‹_block_cou¡
--;

1265 i‡((
fuŒ_num
 =
∑ges_≥r_block
Ë|| (
nblock
->
vÆid_∑ges
 ==Öages_per_block)) {

1267 
nblock
->
°©e
 = 
NOR_BLOCK_FULL
;

1268 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

1269 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
fuŒ_n‹_block_li°
);

1270 
	`debugs2
("puàn‹ÅÿfuŒÜi°: %d.\n", 
nblock
->
ödex
);

1274 i‡(
nblock
->
vÆid_∑ges
 == 0) {

1275 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
nblock
->
∑ge_li°
));

1276 
nblock
->
°©e
 = 
NOR_BLOCK_WAIT_ERASE
;

1277 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

1278 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
waô_îa£_n‹_block_li°
);

1279 
	`debugs2
("puàn‹ÅÿwaôÉø£Üi°: %d.\n", 
nblock
->
ödex
);

1283 
nblock
->
°©e
 = 
NOR_BLOCK_USED
;

1284 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

1285 
	`sh™n⁄_li°_add_èû
(&
nblock
->
li°
, &
sdev
->
u£d_n‹_block_li°
);

1286 
	`debugs2
("puàn‹Åÿu£dÜi°: %d.\n", 
nblock
->
ödex
);

1289 i‡(
sdev
->
bbt_£q_num
 =
MAX_BBT_SEQ_NUM
)

1290 
sdev
->
bbt_£q_num
 = 0;

1292 
	`BUG_ON
(
œ°_∑ge
 >
max_n‹_∑ges
);

1294 i‡(
√xt_¶Ÿ
 =
BAD_BLOCKS_PER_PAGE
)

1295 
∑ge_d⁄e
 = 1;

1297 
∑ge_d⁄e
 = 0;

1299 i‡(
∑ge_d⁄e
 && (
œ°_∑ge
 =(
max_n‹_∑ges
 - 1))) {

1301 
	`sh™n⁄_w¨n
("bbtÖage is full.\n");

1302 
sdev
->
n‹_bbt_°©e
 |
BBT_SLOT_IS_FULL
;

1305 
sdev
->
cuº_∑ge
 = 
max_n‹_∑ges
 - 1;

1306 
sdev
->
√xt_¶Ÿ
 = 
BAD_BLOCKS_PER_PAGE
;

1309 i‡(
∑ge_d⁄e
) {

1310 
sdev
->
cuº_∑ge
 = 
œ°_∑ge
 + 1;

1311 
sdev
->
√xt_¶Ÿ
 = 0;

1313 
sdev
->
cuº_∑ge
 = 
œ°_∑ge
;

1314 
sdev
->
√xt_¶Ÿ
 =Çext_slot;

1319 i‡((
pos_∑ge
 !
INVALID_NOR_PAGE_INDEX
Ë&& (pos_∑gê< (
∑ges_≥r_block
 - 1))) {

1321 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1322 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, sdev->
n‹Êash
.
bbt_addr
 + 
pos_block
 * 
blk_sz
, blk_sz, 
d©a
)) {

1323 
	`sh™n⁄_îr
("re-checkÇorflash failed.\n");

1324 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1325 
	`sh™n⁄_v‰ì
(
d©a
);

1328 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1330 
i
 = (
pos_∑ge
 + 1); i < 
∑ges_≥r_block
; i++) {

1331 
medü
 = (
n‹_∑ge_medü
 *)
d©a
;

1332 i‡(
	`n‹_∑ge_is_nuŒ
(
medü
 + 
i
)) {

1333 
	`debugs1
("n‹Öagêi†nuŒ: block=%d,Öage=%d.\n", 
pos_block
, 
i
);

1337 i‡(
i
 < 
∑ges_≥r_block
) {

1338 
√ed_Æloc
 = 0;

1339 
sdev
->
pos_block
 =Öos_block;

1340 
sdev
->
pos_∑ge
 = 
i
;

1342 
nblock
 = &
sdev
->
n‹_blocks
[
pos_block
];

1343 
nblock
->
°©e
 = 
NOR_BLOCK_ACTIVE
;

1344 
	`sh™n⁄_li°_dñ
(&
nblock
->
li°
);

1345 
	`debugs2
("puàn‹ blockÅÿa˘ive: %d.\n", 
nblock
->
ödex
);

1350 i‡(
√ed_Æloc
) {

1351 
√xt_block
 = 
	`gë_√w_n‹_block
(
sdev
);

1352 i‡(
√xt_block
 == -1) {

1353 
	`sh™n⁄_w¨n
("failedÅo getÇewÇor block.\n");

1354 
sdev
->
pos_block
 = -1;

1355 
sdev
->
pos_∑ge
 = 
∑ges_≥r_block
;

1357 
sdev
->
n‹_blocks
[
√xt_block
].
°©e
 = 
NOR_BLOCK_ACTIVE
;

1358 
sdev
->
pos_block
 = 
√xt_block
;

1359 
sdev
->
pos_∑ge
 = 0;

1363 
	`check_gc_n‹_block
(
sdev
);

1365 i‡(
sdev
->
n‹_bbt_°©e
) {

1366 
	`sh™n⁄_w¨n
("nÿ•a˚ f‹ st‹ögÉxå®badblocks, bbt_°©e=%d.\n", 
sdev
->
n‹_bbt_°©e
);

1367 
	`sh™n⁄_£t_bô
(
SHN_REASON_BBT_NO_SPACE
, &
sdev
->
ªad⁄ly_ªas⁄
);

1370 
	`debugs1
("bbt initialized: curr_page=%d,Çext_slot=%d,Öos_block=%d,Öos_page=%d, state=%d.\n", \

1371 
sdev
->
cuº_∑ge
, sdev->
√xt_¶Ÿ
, sdev->
pos_block
, sdev->
pos_∑ge
, sdev->
n‹_bbt_°©e
);

1373 
	`sh™n⁄_v‰ì
(
d©a
);

1375 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

1376 i‡(!
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
)) {

1378 
	`sh™n⁄_mem£t
(
sdev
->
lun
[
i
]->
bbt
, 0, 
LUN_BBT_SIZE
);

1380 
	`debugs1
("lun=%d,Öhy_lun_num=%d i†physiˇŒy bad.\n", 
i
, 
sdev
->
lun
[i]->
phy_lun_num
);

1385 
	}
}

1387 
	$£t_ecc_‹g™iz©i⁄
(
sh™n⁄_dev
 *
sdev
)

1389 
u32
 
dw‹d
 = 0, 
vÆue
 = 0;

1391 
dw‹d
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
globÆ_b¨
 + 4);

1392 
vÆue
 = (
dw‹d
 & 
SH_ECC_CORRECT_POWER_MASK
Ë>> 
SH_ECC_CORRECT_POWER_SHIFT
;

1394 
vÆue
) {

1396 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 72;

1399 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 96;

1402 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 120;

1405 
	`sh™n⁄_îr
("UnsupportÉcc correctionÖower\n");

1408 i‡(
sdev
->
ecc_c‹ª˘i⁄_powî
 > 
ECC_CORRECTION_BITS_IN_SECTOR
) {

1409 
	`sh™n⁄_îr
("ec¯c‹ª˘i⁄Öowî gª©îÅh™Üimô, %d > %d\n", 
sdev
->
ecc_c‹ª˘i⁄_powî
, 
ECC_CORRECTION_BITS_IN_SECTOR
);

1413 
vÆue
 = (
dw‹d
 & 
SH_ECC_CODEWORD_SIZE_MASK
Ë>> 
SH_ECC_CODEWORD_SIZE_SHIFT
;

1414 
sdev
->
ecc_codew‹d_size
 = 
vÆue
;

1416 
dw‹d
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
globÆ_b¨
 + 1);

1417 
vÆue
 = (
dw‹d
 & 
SH_FIRST_CODEWORD_OFFSET_MASK
Ë>> 
SH_FIRST_CODEWORD_OFFSET_SHIFT
;

1418 
sdev
->
fú°_codew‹d_off£t
 = 
vÆue
;

1419 
dw‹d
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
globÆ_b¨
 + 3);

1420 
vÆue
 = (
dw‹d
 & 
SH_PER_BYTE_DISABLE_MASK
Ë>> 
SH_PER_BYTE_DISABLE_SHIFT
;

1421 
sdev
->
bô_mode
 = 
vÆue
 ? 
MODE_8BIT
 : 
MODE_16BIT
;

1424 
	}
}

1426 
	$sh™n⁄_£t_˘æ_∑øm
(
sh™n⁄_dev
 *
sdev
)

1428 
∑øm_lök
 *
∂
;

1429 
u32
 *
buf
 = 
NULL
, *
˝s_£gmít
 = NULL, *
èû
;

1430 
u32
 
i
, 
∑ge
, 
˛k
, 
¸c
;

1431 
ªt
 = 0;

1432 
ªmaö_dw‹d
, 
cou¡
, 
£gmít_ödex
 = 0;

1434 
buf
 = (
u32
*)
	`sh™n⁄_kzÆloc
(
NOR_PAGE_SIZE
, 
GFP_SHANNON
);

1435 i‡(!
buf
) {

1436 
	`sh™n⁄_öfo
("kzalloc failed");

1440 
˝s_£gmít
 = (
u32
*)
	`sh™n⁄_vmÆloc
(64 * 
NOR_PAGE_SIZE
);

1441 i‡(!
˝s_£gmít
) {

1442 
	`sh™n⁄_îr
("alloc memory failed for cps_segment.\n");

1443 
	`sh™n⁄_k‰ì
(
buf
);

1446 
	`sh™n⁄_mem£t
(
˝s_£gmít
, 0, 64 * 
NOR_PAGE_SIZE
);

1448 
sdev
->
˝s_¸c
 = 0;

1449 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1451 
∑ge
 = 
sdev
->
n‹Êash
.
˙é_∑øm_addr
 / 
NOR_PAGE_SIZE
;

1453 i‡(
∑ge
 =0 ||Öagê>
sdev
->
n‹Êash
.
size_öbyãs
 / 
NOR_PAGE_SIZE
)

1454 
out
;

1456 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
∑ge
 * 
NOR_PAGE_SIZE
, NOR_PAGE_SIZE, 
buf
)) {

1457 
	`sh™n⁄_îr
("ªad faûed,Öage=%d", 
∑ge
);

1458 
ªt
 = -1;

1459 
out
;

1462 
èû
 = 
˝s_£gmít
;

1463 
	`sh™n⁄_mem˝y
(
èû
, 
buf
, 
NOR_PAGE_SIZE
);

1464 
∂
 = (
∑øm_lök
*)
˝s_£gmít
;

1467 
ªmaö_dw‹d
 = (
∂
->
Àngth
 + ((
¸c
Ë/ (
u32
))Ë< ((
NOR_PAGE_SIZE
 - (*pl)) / (u32)) ?

1468 0 : ((
∂
->
Àngth
 + ((
¸c
Ë/ (
u32
))Ë- ((
NOR_PAGE_SIZE
 - (*pl)) / (u32)));

1470 
èû
 =Åaû + (
NOR_PAGE_SIZE
 / (
u32
));

1471 
ªmaö_dw‹d
 > 0) {

1472 i‡(++
∑ge
 >
sdev
->
n‹Êash
.
size_öbyãs
 / 
NOR_PAGE_SIZE
) {

1473 
	`sh™n⁄_îr
("ªadÖage=%d ovîÊow,Ç‹Êash_size=%d\n", 
∑ge
, 
sdev
->
n‹Êash
.
size_öbyãs
);

1474 
ªt
 = -1;

1475 
out
;

1477 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
∑ge
 * 
NOR_PAGE_SIZE
, NOR_PAGE_SIZE, 
buf
)) {

1478 
	`sh™n⁄_îr
("ªad o¿Áûed,Öage=%d", 
∑ge
);

1479 
ªt
 = -1;

1480 
out
;

1482 
cou¡
 = (
NOR_PAGE_SIZE
 / (
u32
)Ë> 
ªmaö_dw‹d
 ?Ñemain_dword : (NOR_PAGE_SIZE / (u32));

1483 
	`sh™n⁄_mem˝y
(
èû
, 
buf
, 
cou¡
 * (
u32
));

1484 
èû
 +
cou¡
;

1485 
ªmaö_dw‹d
 -
cou¡
;

1488 
¸c
 = (
u32
)
˝s_£gmít
[(*
∂
Ë/ (u32Ë+Öl->
Àngth
];

1489 i‡(
¸c
 !
	`sh™n⁄_¸c32
(
sdev
, (
u8
*)
˝s_£gmít
, (*
∂
Ë+Öl->
Àngth
 * (
u32
), 0)) {

1490 
	`sh™n⁄_îr
("CRC check o¿˝s_£gmít=%d faûed.\n", 
£gmít_ödex
);

1491 
ªt
 = -1;

1492 
out
;

1494 
sdev
->
˝s_¸c
 = 
	`sh™n⁄_¸c32
(sdev, (
u8
*)
˝s_£gmít
, (*
∂
Ë+Öl->
Àngth
 * (
u32
), sdev->cps_crc);

1496 
i
 = 0; i < 
∂
->
Àngth
; i++) {

1497 
	`debugs2
("wrôe: vÆue=0x%08x, off£t=%d", 
∂
->
vÆues
[
i
],Öl->
ªg_off£t
 + i);

1498 
	`wrôe_ªg_ß„
(
sdev
, 
∂
->
vÆues
[
i
], (
u32
*)sdev->
b¨
 +Öl->
ªg_off£t
 + i);

1501 i‡(
∂
->
p_√xt
 == 0)

1504 
∑ge
 = 
∂
->
p_√xt
;

1506 
£gmít_ödex
++;

1509 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1510 
˛k
 = 
	`sh™n⁄_i‹ód32
((
u32
 *)
sdev
->
b¨
 + 
SH_CORE_CLK_OFFSET
);

1511 
	`sh™n⁄_iowrôe32
(
˛k
 & 0xFFFFFFFE, (
u32
*)
sdev
->
b¨
 + 
SH_CORE_CLK_OFFSET
);

1512 
	`sh™n⁄_iowrôe32
(
˛k
 | 0x00000001, (
u32
*)
sdev
->
b¨
 + 
SH_CORE_CLK_OFFSET
);

1513 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1514 
	`sh™n⁄_m¶ìp
(5);

1516 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1517 
˛k
 = 
	`sh™n⁄_i‹ód32
((
u32
 *)
sdev
->
b¨
 + 
SH_DP_CLK_OFFSET
);

1518 
	`sh™n⁄_iowrôe32
(
˛k
 & 0xFFFFFFFE, (
u32
*)
sdev
->
b¨
 + 
SH_DP_CLK_OFFSET
);

1519 
	`sh™n⁄_iowrôe32
(
˛k
 | 0x00000001, (
u32
*)
sdev
->
b¨
 + 
SH_DP_CLK_OFFSET
);

1520 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1521 
	`sh™n⁄_m¶ìp
(5);

1523 
	`£t_ãm≥øtuª_£ns‹_thªshﬁds
(
sdev
);

1524 
out
:

1525 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1527 
	`sh™n⁄_v‰ì
(
˝s_£gmít
);

1528 
	`sh™n⁄_k‰ì
(
buf
);

1530 
	`˛ón_Æl_mi¸ocode_u£d_°©e
(
sdev
);

1531 i‡(
	`should_upd©e_mi¸ocode
(
sdev
))

1532 
	`wrôe_adv™˚d_ªad_mi¸ocode
(
sdev
, 
	`gë_upd©e_mi¸ocode
(sdev));

1533  
ªt
;

1534 
	}
}

1536 
	#SHANNON_G5_HANDLE_IN_TASKLET


	)

1537 
	$h™dÀ_com∂ëi⁄_èskÀt_g5
(
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
)

1539 
sh™n⁄_dev
 *
dev
 = 
öãr_¨g
->
sdev
;

1540 
dw‹d_ödex
 = 
öãr_¨g
->dword_index;

1542 #ifde‡
SHANNON_G5_HANDLE_IN_TASKLET


1543 
	`com∂ëi⁄_pﬁl_g5
(
dev
, 
dw‹d_ödex
);

1545 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

1547 
pﬁl_ªt
;

1548 
dev
->
pﬁl
[
dw‹d_ödex
] = 
sh™n⁄_pﬁl_times
;

1549 
pﬁl_ªt
 = 
	`com∂ëi⁄_pﬁl_g5
(
dev
, 
dw‹d_ödex
);

1550 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
)) {

1551 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

1552 
dev
->
ö_úq
[
dw‹d_ödex
] = 0;

1553 
	`sh™n⁄_b¨rõr
();

1557 i‡(
	`likñy
(
pﬁl_ªt
)) {

1558 i‡(!
sh™n⁄_u£_π_comp_thªad
)

1559 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_comp_wq
, &
öãr_¨g
->
ªpﬁl_w‹k
);

1561 
	`sh™n⁄_π_queue_w‹k
(
dev
->
sh™n⁄_π_comp_wq
, &
öãr_¨g
->
π_ªpﬁl_w‹k
);

1564 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

1565 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

1568 
	}
}

1571 
	$com∂ëi⁄_pﬁl_g5
(
sh™n⁄_dev
 *
dev
, 
dw‹d_ödex
)

1573 
i
, 
bôs
, 
check_begö
, 
check_íd
, 
ªt
 = 0;

1575 
	`BUG_ON
(
dw‹d_ödex
 < 0);

1577 
dev
->
u32_ve˘‹s
[
dw‹d_ödex
] = 
	`ªad_øw_ªg_ß„
(dev, &dev->
öãºu±_b¨
[dword_index]);

1579 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
 || (dev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

1582 #ifde‡
SHANNON_USE_WRITE_BUFFER


1583 i‡(
dw‹d_ödex
 =
dev
->
max_úq_ödex
) {

1584 i‡(!
	`sh™n⁄_dev_is_g5_ffß
(
dev
Ë&& (dev->
öô_d⁄e
 >
STAGE9_DONE
) &&

1585 
	`sh™n⁄_ã°_™d_˛ór_bô_À
(
dev
->
£u_öå_shi·
, dev->
öãºu±_ve˘
)) {

1586 
u32
 
£u
 = 
	`ªad_ªg_ß„
(
dev
, (u32 *)dev->
b¨
 + 
SH_SEU_OFFSET
);

1587 i‡(
£u
 == 0)

1588 
	`sh™n⁄_w¨n
("%s:£u i†mi§ï‹ãd!.\n", 
dev
->
sdisk
.
disk_«me
);

1590 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
ªc⁄fig_w‹k
);

1593 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

1594 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô_À
(
dev
->
öå_big_shi·
[
i
], dev->
öãºu±_ve˘
)) {

1595 
	`h™dÀ_bufq
(
dev
, 
i
);

1596 
ªt
++;

1599 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô_À
(
dev
->
bufq_ack_öå_shi·
, dev->
öãºu±_ve˘
)) {

1600 
	`h™dÀ_bufq_ack_öãºu±
(
dev
);

1601 
ªt
++;

1606 i‡(
dev
->
u32_ve˘‹s
[
dw‹d_ödex
] == 0)

1607  
ªt
;

1608 #ifde‡
SHANNON_USE_WRITE_BUFFER


1610 
	`upd©e_bufq_limô
(
dev
);

1613 
bôs
 = 
	`sh™n⁄_hweight32
(
dev
->
u32_ve˘‹s
[
dw‹d_ödex
]);

1614 i‡(
bôs
 == 0)

1615  
ªt
;

1617 
check_begö
 = 
dw‹d_ödex
 * 32;

1618 
check_íd
 = (
check_begö
 + 32Ë< 
dev
->
lun£t_cou¡
 ? (check_begin + 32) : dev->lunset_count;

1619 
i
 = 
check_begö
; i < 
check_íd
; i++) {

1620 i‡(
	`sh™n⁄_ã°_bô_À
(
dev
->
lun£ts
[
i
].
ödex
, dev->
öãºu±_ve˘
)) {

1621 #ifde‡
SHANNON_G5_HANDLE_IN_TASKLET


1622 
	`h™dÀ_lun£t
(
dev
, dev->
lun£ts
 + 
i
, 0);

1624 i‡(!
	`sh™n⁄_ö_so·úq
(Ë&& (
bôs
 <1Ë&& (
	`sh™n⁄_©omic_ªad
(&
dev
->
lun£ts
[
i
].
ö_wq
) == 0)) {

1625 
	`h™dÀ_lun£t
(
dev
, dev->
lun£ts
 + 
i
, 0);

1627 
	`sh™n⁄_©omic_öc
(&
dev
->
lun£ts
[
i
].
ö_wq
);

1628 i‡(
	`sh™n⁄_queue_w‹k
(
dev
->
h™dÀ_lun_wq
[
i
 % dev->
sh™n⁄_ƒ_wq
], &dev->
lun£ts
[i].
comp_w‹k
) == 0)

1629 
	`sh™n⁄_©omic_dec
(&
dev
->
lun£ts
[
i
].
ö_wq
);

1632 
bôs
--;

1636 
dev
->
u32_ve˘‹s
[
dw‹d_ödex
] = 0;

1639 
	}
}

1641 
	$ch™ge_öãºu±_öto_msix_mode
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
)

1643 
ªsu…
, 
ve˘‹
, 
i
;

1646 i‡(((
sdev
->
lun£t_cou¡
 + 3Ë/ 32Ë>
MAX_MSIX_INTERRUPTS
) {

1647 
	`sh™n⁄_îr
("too manyÜunsetsÅoállocate irqÇumber,Üunset_count=%d, MAX_MSIX_INTERRUPTS=%d",

1648 
sdev
->
lun£t_cou¡
, 
MAX_MSIX_INTERRUPTS
);

1651 
sdev
->
max_úq_ödex
 = (sdev->
lun£t_cou¡
 + 3) / 32;

1653 
ªsu…
 = 
	`sh™n⁄_pci_íabÀ_msix
(
pdev
, &
sdev
->
msix_d©a
, sdev->
max_úq_ödex
 + 1);

1654 i‡(
ªsu…
 == 0) {

1655 
i
 = 0; i < 
sdev
->
max_úq_ödex
 + 1; i++) {

1656 
ve˘‹
 = 
	`sh™n⁄_pci_gë_msix_ve˘‹
(
sdev
->
msix_d©a
, 
i
, sdev->
max_úq_ödex
 + 1);

1657 i‡(
ve˘‹
 < 0)

1658 
ªsu…
 = 
ve˘‹
;

1660 
ªsu…
 = 
	`sh™n⁄_ªque°_úq
(
ve˘‹
, "sh™n⁄", 
sdev
);

1661 i‡(
	`u∆ikñy
(
ªsu…
)) {

1662 
	`sh™n⁄_îr
("ªque° #%d i¡îru± faûed.Ñesu…=%d\n", 
i
, 
ªsu…
);

1663 
i
--) {

1664 
ve˘‹
 = 
	`sh™n⁄_pci_gë_msix_ve˘‹
(
sdev
->
msix_d©a
, 
i
, sdev->
max_úq_ödex
 + 1);

1665 i‡(
ve˘‹
 < 0)

1667 
	`sh™n⁄_‰ì_úq
(
ve˘‹
, 
sdev
);

1669 
	`sh™n⁄_pci_dißbÀ_msix
(
pdev
, &
sdev
->
msix_d©a
);

1672 
sdev
->
öãºu±_¨g
[
i
].
dw‹d_ödex
 = i;

1673 
sdev
->
öãºu±_¨g
[
i
].sdev = sdev;

1674 
	`sh™n⁄_öô_w‹k
(&
sdev
->
öãºu±_¨g
[
i
].
ªpﬁl_w‹k
, 
sh™n⁄_ªpﬁl_èsk
);

1675 
	`sh™n⁄_öô_π_w‹k
(&
sdev
->
öãºu±_¨g
[
i
].
π_ªpﬁl_w‹k
, 
sh™n⁄_π_ªpﬁl_èsk
);

1676 
	`sh™n⁄_èskÀt_öô
(&
sdev
->
comp_èskÀt
[
i
], 
com∂ëi⁄_èskÀt
, ()(&sdev->
öãºu±_¨g
[i]));

1680 
	`sh™n⁄_îr
("Enable MSI-X mode failed.");

1683 
	}
}

1685 
	$sh™n⁄_dißbÀ_msix
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_dev
 *
sdev
)

1687 
i
, 
ve˘‹
;

1689 
i
 = 
sdev
->
max_úq_ödex
 + 1;

1690 
i
--) {

1691 
ve˘‹
 = 
	`sh™n⁄_pci_gë_msix_ve˘‹
(
sdev
->
msix_d©a
, 
i
, sdev->
max_úq_ödex
 + 1);

1692 i‡(
ve˘‹
 < 0)

1694 
	`sh™n⁄_‰ì_úq
(
ve˘‹
, 
sdev
);

1696 
	`sh™n⁄_pci_dißbÀ_msix
(
pdev
, &
sdev
->
msix_d©a
);

1697 
	}
}

1699 
	$sh™n⁄_n‹Êash_îa£_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
)

1701 
u32
 
n‹_ígöe_°©e
;

1702 
timeout
;

1704 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1706 
n‹_ígöe_°©e
 = 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1707 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1708 
	`sh™n⁄_iowrôe32
(~
SH_NORFLASH_WRITE_PROTECT_MASK
 & 
n‹_ígöe_°©e
, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1709 
	`sh™n⁄_iowrôe32
(0, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1710 
	`sh™n⁄_iowrôe32
((1 << 
SH_NORFLASH_ERASE_SHIFT
Ë| ((
phyaddr
/
NOR_PAGE_SIZE
Ë& 
SH_NORFLASH_ADDR_MASK
), (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1711 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1713 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1715 
timeout
 = 0;

1716 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
*)sdev->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
Ë& 
SH_NORFLASH_STATE_MASK
)) {

1717 
	`sh™n⁄_udñay
(10);

1718 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

1719 
	`sh™n⁄_îr
("eraseÇor flashÅimeout\n");

1722 
	`sh™n⁄_c⁄d_ªsched
();

1724 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1726 
n‹_ígöe_°©e
 = 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1727 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1728 
	`sh™n⁄_iowrôe32
(
SH_NORFLASH_WRITE_PROTECT_MASK
 | 
n‹_ígöe_°©e
, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1729 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1731 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1734 
	}
}

1736 
	$sh™n⁄_n‹Êash_wrôe_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
)

1738 
u32
 
n‹_ígöe_°©e
;

1739 
timeout
;

1741 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1743 
n‹_ígöe_°©e
 = 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1744 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1745 
	`sh™n⁄_iowrôe32
(~
SH_NORFLASH_WRITE_PROTECT_MASK
 & 
n‹_ígöe_°©e
, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1746 
	`sh™n⁄_iowrôe32
(0, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1747 
	`sh™n⁄_iowrôe32
((1 << 
SH_NORFLASH_WRITE_SHIFT
Ë| ((
phyaddr
/
NOR_PAGE_SIZE
Ë& 
SH_NORFLASH_ADDR_MASK
), (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1748 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1750 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1752 
timeout
 = 0;

1753 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
*)sdev->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
Ë& 
SH_NORFLASH_STATE_MASK
)) {

1754 
	`sh™n⁄_udñay
(10);

1755 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

1756 
	`sh™n⁄_îr
("writeÇor flashÅimeout\n");

1760 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1762 
n‹_ígöe_°©e
 = 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1763 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1764 
	`sh™n⁄_iowrôe32
(
SH_NORFLASH_WRITE_PROTECT_MASK
 | 
n‹_ígöe_°©e
, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1765 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1767 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1770 
	}
}

1772 
	$sh™n⁄_n‹Êash_ªad_g5
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
)

1774 
timeout
;

1776 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1778 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1779 
	`sh™n⁄_iowrôe32
(0, (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1780 
	`sh™n⁄_iowrôe32
((1 << 
SH_NORFLASH_READ_SHIFT
Ë| ((
phyaddr
/
NOR_PAGE_SIZE
Ë& 
SH_NORFLASH_ADDR_MASK
), (
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_OPT_OFFSET
);

1781 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

1783 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1785 
timeout
 = 0;

1786 !(
	`ªad_ªg_ß„
(
sdev
, (
u32
*)sdev->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
Ë& 
SH_NORFLASH_STATE_MASK
)) {

1787 
	`sh™n⁄_udñay
(10);

1788 i‡(
timeout
++ > 
NORFLASH_TIMEOUT
) {

1789 
	`sh™n⁄_îr
("readÇor flashÅimeout\n");

1795 
	}
}

1797 
u32
 
	$sh™n⁄_¸c32
(
sh™n⁄_dev
 *
sdev
, 
u8
 *
d©a
, 
Àn
, 
u32
 
£ed
)

1799 
u32
 *
èbÀ
 = 
sdev
->
¸c_èbÀ
;

1800 
u32
 
¸c
 = ~
£ed
;

1801 
i
;

1803 
i
 = 0; i < 
Àn
; i++)

1804 
¸c
 = (¸¯>> 8Ë^ 
èbÀ
[(¸¯^ 
d©a
[
i
]) & 0xFF];

1806  ~
¸c
;

1807 
	}
}

1809 
	$gë_n‹_∑ge_ödex
(
sh™n⁄_dev
 *
sdev
)

1811 
n‹Êash_ödex_node
 *
ödex
 = 
NULL
;

1812 
u32
 
¸c
;

1814 
sdev
->
n‹Êash
.
ödex_node_addr
 = sdev->n‹Êash.
pcõ_phy_addr
 + 
NOR_PAGE_SIZE
;

1815 
sdev
->
n‹Êash
.
˙é_∑øm_addr
 = sdev->n‹Êash.
pcõ_phy_addr
 + 
NOR_PAGE_SIZE
 * 16;

1816 
ödex
 = (
n‹Êash_ödex_node
*)
	`sh™n⁄_kzÆloc
((*ödex), 
GFP_SHANNON
);

1817 i‡(!
ödex
) {

1818 
	`sh™n⁄_îr
("CanÇotállocate memory forÑeadingÇor indexÇode.\n");

1819  -
ENOMEM
;

1822 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, sdev->
n‹Êash
.
ödex_node_addr
, (*
ödex
), index)) {

1823 
	`sh™n⁄_îr
("read indexÇode from NOR Flash failed.\n");

1824 
	`sh™n⁄_k‰ì
(
ödex
);

1828 
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
*)
ödex
, (*index) - (index->crc), 0);

1829 i‡(
¸c
 !
ödex
->crc) {

1830 
	`sh™n⁄_îr
("CRC check failed forÇorÖage index.\n");

1831 
	`sh™n⁄_k‰ì
(
ödex
);

1835 
sdev
->
n‹Êash
.
mbr_addr
 = 
ödex
->
mbr_∑ge
 * 
NOR_PAGE_SIZE
;

1836 
sdev
->
n‹Êash
.
mbr_backup_addr
 = 
ödex
->
mbr_backup_∑ge
 * 
NOR_PAGE_SIZE
;

1837 
sdev
->
n‹Êash
.
bbt_addr
 = 
ödex
->
bbt_°¨t_∑ge
 * 
NOR_PAGE_SIZE
;

1838 
sdev
->
n‹Êash
.
bbt_size
 = (
ödex
->
bbt_íd_∑ge
 - index->
bbt_°¨t_∑ge
 + 1Ë* 
NOR_PAGE_SIZE
;

1839 
sdev
->
n‹Êash
.
„©uª_addr
 = 
ödex
->
„©uª_∑ge
 * 
NOR_PAGE_SIZE
;

1840 
sdev
->
n‹Êash
.
mi¸o_code_addr
 = 
ödex
->
mi¸o_code_∑ge
 * 
NOR_PAGE_SIZE
;

1841 
sdev
->
n‹Êash
.
poﬁ_öfo_addr
 = sdev->n‹Êash.
mbr_addr
 + 
NOR_PAGE_SIZE
;

1842 
sdev
->
n‹Êash
.
poﬁ_öfo_backup_addr
 = sdev->n‹Êash.
mbr_backup_addr
 + 
NOR_PAGE_SIZE
;

1844 
	`sh™n⁄_k‰ì
(
ödex
);

1847 
	}
}

1849 
	$sh™n⁄_öô_h¨dw¨e_g5
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
)

1851 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
;

1852 
u32
 
dw‹d
 = 0x0;

1854 
sdev
->
mbr_eblocks
 = 0;

1856 
lun_£˘i⁄
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)
sdev
->
b¨
 + 256);

1858 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1859 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
RESET
, 1);

1860 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1861 
	`sh™n⁄_m¶ìp
(1);

1862 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1863 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
RESET
, 0);

1864 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1866 i‡(
	`gë_n‹_∑ge_ödex
(
sdev
) < 0)

1869 i‡(
	`gë_mbr_‰om_n‹
(
sdev
) < 0)

1872 i‡(
	`gë_mi¸ocode_‰om_n‹
(
sdev
) < 0)

1873 
	`sh™n⁄_öfo
("%s: D⁄`àsuµ‹ãd upd©êmi¸ocodêfun˘i⁄.\n", 
sdev
->
cdev_«me
);

1876 i‡(
	`sh™n⁄_£t_˘æ_∑øm
(
sdev
) < 0) {

1877 
	`sh™n⁄_îr
("set controllerÖarametre failed.\n");

1880 
	`sh™n⁄_m¶ìp
(2);

1882 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1883 
sdev
->
ifmode
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)sdev->
globÆ_b¨
 + 0, 
FLASH_MODE
);

1884 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, 
ONFI_ASYNC_MODE
);

1885 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1887 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

1888 
	`ª£t_Æl_lun£t
(
sdev
, 
lun_£˘i⁄
);

1889 
	`sh™n⁄_dißbÀ_úq
(
	`gë_pci_úq_num
(
pdev
));

1891 i‡(
	`dëe˘_Êashid
(
sdev
, 
lun_£˘i⁄
) < 0) {

1892 
	`sh™n⁄_îr
("can'tÑead flashid or flashid isn't supported.\n");

1895 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

1897 
sdev
->
adv™˚d_ªad_°©e
 |
ADV_READ_SUPPORT_MASK
;

1899 i‡(
	`Æloc_lun£ts_°ru˘uª
(
sdev
) < 0) {

1900 
	`sh™n⁄_îr
("cannotállocateÜunsets structure.\n");

1904 i‡(
	`√ed_víd‹_mode_cmd
(
sdev
))

1905 
	`víd‹_mode_cmd_£quí˚
(
sdev
);

1907 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 0);

1909 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1910 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, sdev->
ifmode
);

1911 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1912 
	`sh™n⁄_m¶ìp
(2);

1914 i‡(
sdev
->
p£udo_∂™e
 && (sdev->
∂™es
 == 2)) {

1915 
dw‹d
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 0xc2);

1916 i‡((
dw‹d
 & 0xff00) == 0x2000)

1917 
sdev
->
¥efix_no_›_cmd
 = 1;

1919 i‡(
	`£t_ecc_‹g™iz©i⁄
(
sdev
) < 0)

1920 
ªÀa£_lun£ts
;

1922 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 1);

1924 i‡(
	`dev_is_8639_wôh_ßndisk
(
sdev
)) {

1925 
	`£t_˛k
(
sdev
, 
CLK_166M
 + 1);

1926 
	`lun_£t_„©uª_ovî_drive
(
sdev
, 4);

1927 
	`lun_£t_„©uª_odt
(
sdev
);

1929 
	`check_u£r_logicb_size
(
sdev
);

1931 
	`sh™n⁄_öfo
("%s: fœsh id: %16.16Œx\n", 
sdev
->
cdev_«me
, sdev->
Êashid
);

1932 
	`sh™n⁄_öfo
("%s: ifmode: %d, ovîdrive: %d, fªqmode: %d\n", 
sdev
->
cdev_«me
, sdev->
ifmode
, sdev->
ovîdrive
, sdev->
‰eq_mode
);

1936 
ªÀa£_lun£ts
:

1937 
	`ªÀa£_lun£ts_°ru˘uª
(
sdev
);

1940 
	}
}

1942 
	$ªad_poﬁ_öfo_g5
(
sh™n⁄_dev
 *
sdev
)

1944 *
buf
 = 
NULL
, *
pi
;

1945 
block_size
, 
i
;

1946 
u32
 
phyaddr
, 
poﬁ_öfo_addr
, 
¸c
;

1948 
block_size
 = 
NOR_PAGE_SIZE
 * 16;

1950 
buf
 = 
	`sh™n⁄_vmÆloc
(
block_size
);

1951 i‡(!
buf
) {

1952 
	`sh™n⁄_îr
("CanÇotállocate memory forÑeading mbr.\n");

1953  -
ENOMEM
;

1955 
	`sh™n⁄_mem£t
(
buf
, 0, 
block_size
);

1957 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1959 
i
 = 0; i < 2; i++) {

1960 
poﬁ_öfo_addr
 = (
i
 =0Ë? 
sdev
->
n‹Êash
.poﬁ_öfo_add∏: sdev->n‹Êash.
poﬁ_öfo_backup_addr
;

1961 
phyaddr
 = (
poﬁ_öfo_addr
 / 
block_size
) * block_size;

1962 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
phyaddr
, 
block_size
, 
buf
)) {

1963 
	`sh™n⁄_w¨n
("ªadÖoﬁ_öfo%†‰om NOR Fœsh faûed.\n", (
i
 == 0) ? "" : "_backup");

1964 i‡(
i
 == 1) {

1965 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1966 
	`sh™n⁄_v‰ì
(
buf
);

1970 
¸c
 = *(
u32
*)(
buf
 + 
block_size
 - (crc));

1971 i‡(
¸c
 !
	`sh™n⁄_¸c32
(
sdev
, 
buf
, 
block_size
 - (crc), 0)) {

1972 
	`sh™n⁄_w¨n
("CRC check faûed f‹Öoﬁ_öfo%s.\n", (
i
 == 0) ? "" : "_backup");

1973 i‡(
i
 == 1) {

1974 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1975 
	`sh™n⁄_v‰ì
(
buf
);

1981 
pi
 = 
buf
 + 
poﬁ_öfo_addr
 - 
phyaddr
;

1983 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1985 
	`ªcovî_poﬁ_öfo
(
sdev
->
•oﬁ
, 
pi
);

1987 
	`sh™n⁄_v‰ì
(
buf
);

1989 
	}
}

1991 
	$upd©e_n‹_ödex_node
(
sh™n⁄_dev
 *
sdev
)

1993 
n‹Êash_ödex_node
 *
ödex
 = 
NULL
;

1994 
ªåy
 = 0;

1996 
ödex
 = (
n‹Êash_ödex_node
*)
	`sh™n⁄_kzÆloc
((*ödex), 
GFP_SHANNON
);

1997 i‡(!
ödex
) {

1998 
	`sh™n⁄_îr
("CanÇotállocate memory for updateÇor indexÇode.\n");

1999  -
ENOMEM
;

2002 
ödex
->
mbr_∑ge
 = 
sdev
->
n‹Êash
.
mbr_addr
 / 
NOR_PAGE_SIZE
;

2003 
ödex
->
mbr_backup_∑ge
 = 
sdev
->
n‹Êash
.
mbr_backup_addr
 / 
NOR_PAGE_SIZE
;

2004 
ödex
->
bbt_°¨t_∑ge
 = 
sdev
->
n‹Êash
.
bbt_addr
 / 
NOR_PAGE_SIZE
;

2005 
ödex
->
bbt_íd_∑ge
 = index->
bbt_°¨t_∑ge
 + 
sdev
->
n‹Êash
.
bbt_size
 / 
NOR_PAGE_SIZE
 - 1;

2006 
ödex
->
„©uª_∑ge
 = 
sdev
->
n‹Êash
.
„©uª_addr
 / 
NOR_PAGE_SIZE
;

2007 
ödex
->
mi¸o_code_∑ge
 = 
sdev
->
n‹Êash
.
mi¸o_code_addr
 / 
NOR_PAGE_SIZE
;

2008 
ödex
->
¸c
 = 
	`sh™n⁄_¸c32
(
sdev
, (
u8
*)index, (*index) - (index->crc), 0);

2010 
ªåy
:

2011 i‡(
	`n‹Êash_ªad_modify_wrôe
(
sdev
, sdev->
n‹Êash
.
ödex_node_addr
, (*
ödex
), index)) {

2012 i‡(
ªåy
 < 5) {

2013 
ªåy
++;

2014 
	`sh™n⁄_m¶ìp
(500);

2015 
ªåy
;

2017 
	`sh™n⁄_îr
("update indexÇode in NOR Flash failed.\n");

2018 
	`sh™n⁄_k‰ì
(
ödex
);

2022 
	`sh™n⁄_k‰ì
(
ödex
);

2024 
	}
}

2026 
	$upd©e_poﬁ_öfo_g5
(
sh™n⁄_dev
 *
sdev
, 
˛ón_poﬁ
)

2028  
	`ª‰esh_mbr_g5
(
sdev
, 
˛ón_poﬁ
);

2029 
	}
}

2031 
	$lun_£t_„©uª_gíîÆ_g5
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun_num
, 
„©uª_cfg
 *
cfg
)

2033 
sh™n⁄_ªgi°î_cmd
 *
£t_„©uª
;

2034 
cmd_off£t
, 
cmdid
;

2035 
cou¡
 = (
cfg
->
nbyã
 > 1) ? 2 : 1;

2036 
u64
 *
d©a
;

2038 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

2039 i‡(
cmd_off£t
 < 0) {

2040 
	`sh™n⁄_îr
("weáre killed.\n");

2041 
	`BUG
();

2044 
cmdid
 = 
cmd_off£t
 >> 3;

2045 
£t_„©uª
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

2046 
£t_„©uª
->
›code
 = 
sh_cmd_ªg_wrôe
;

2047 i‡(
cfg
->
nbyã
 == 1)

2048 
£t_„©uª
->
d©a_byã
 = 
cfg
->
d©a
[0];

2049 
£t_„©uª
->
hód
 = 
cfg
->
misc
;

2050 i‡(
cfg
->
misc
 & 
SECONDARY_CMD_ENABLE_MASK
)

2051 
£t_„©uª
->
£c⁄d¨y_cmd
 = 
cfg
->secondary_cmd;

2052 
£t_„©uª
->
Êash_ªg
.
Êash_addr
 = 
cfg
->
addr
;

2053 
£t_„©uª
->
Êash_ªg
.
byãs
 = 
cfg
->
nbyã
;

2054 
£t_„©uª
->
Êash_ªg
.
Êash_cmd
 = 
cfg
->
cmd
;

2055 
£t_„©uª
->
Êash_ªg
.
phy_lun
 = 
phy_lun_num
;

2057 i‡(
cou¡
 > 1) {

2058 
d©a
 = 
	`cmd_queue_öc
(
£t_„©uª
, 1);

2060 
	`sh™n⁄_mem_wrôeq
(*((
u64
 *)
cfg
->
d©a
), data);

2062 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

2063 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

2064 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

2065 
	`upd©e_lun£t_sq_hód
(
lun£t
);

2066 
	}
}

2068 
	$lun_gë_„©uª_gíîÆ_g5
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun_num
, 
„©uª_cfg
 *
cfg
)

2070 
sh™n⁄_ªgi°î_cmd
 *
gë_„©uª
;

2071 
cmd_off£t
, 
cmdid
;

2072 
cou¡
 = (
cfg
->
nbyã
 > 1) ? 2 : 1;

2074 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

2075 i‡(
cmd_off£t
 < 0) {

2076 
	`sh™n⁄_îr
("weáre killed.\n");

2077 
	`BUG
();

2080 
cmdid
 = 
cmd_off£t
 >> 3;

2081 
gë_„©uª
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

2082 
gë_„©uª
->
›code
 = 
sh_cmd_ªg_ªad
;

2083 
gë_„©uª
->
Êash_ªg
.
Êash_addr
 = 
cfg
->
addr
;

2084 
gë_„©uª
->
Êash_ªg
.
byãs
 = 
cfg
->
nbyã
;

2085 
gë_„©uª
->
Êash_ªg
.
Êash_cmd
 = 
cfg
->
cmd
;

2086 
gë_„©uª
->
Êash_ªg
.
phy_lun
 = 
phy_lun_num
;

2088 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

2089 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

2090 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

2091 
	`upd©e_lun£t_sq_hód
(
lun£t
);

2092 
	}
}

2094 
	$h¨dw¨e_dñay_g5
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun_num
)

2096 
sh™n⁄_ªgi°î_cmd
 *
£t_„©uª
;

2097 
cmd_off£t
, 
cmdid
;

2098 
cou¡
 = 1;

2100 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

2101 i‡(
cmd_off£t
 < 0) {

2102 
	`sh™n⁄_îr
("weáre killed.\n");

2103 
	`BUG
();

2106 
cmdid
 = 
cmd_off£t
 >> 3;

2107 
£t_„©uª
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

2108 
£t_„©uª
->
›code
 = 
sh_cmd_ªg_wrôe
;

2109 
£t_„©uª
->
hód
 = 0xA0;

2110 
£t_„©uª
->
Êash_ªg
.
Êash_addr
 = 0x0;

2111 
£t_„©uª
->
Êash_ªg
.
byãs
 = 4;

2112 
£t_„©uª
->
Êash_ªg
.
Êash_cmd
 = 0x0;

2113 
£t_„©uª
->
Êash_ªg
.
phy_lun
 = 
phy_lun_num
;

2115 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

2116 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

2117 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

2118 
	`upd©e_lun£t_sq_hód
(
lun£t
);

2119 
	}
}

2121 
	$sh™n⁄_pﬁlög_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
, 
logicb_t
 
lun_pba
, 
u8
 
©å
, u8 
hód
)

2123 
sh™n⁄_cmd
 *
no_›
;

2124 
cmd_off£t
, 
cmdid
;

2125 
cou¡
 = 1;

2127 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

2128 i‡(
cmd_off£t
 < 0) {

2129 
	`sh™n⁄_îr
("weáre killed.\n");

2130 
	`BUG
();

2133 
cmdid
 = 
cmd_off£t
 >> 3;

2134 
no_›
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

2135 
no_›
->
›code
 = 
sh_cmd_no_›
;

2136 
no_›
->
fú°_logicb
 = 
©å
;

2137 
no_›
->
hód
 = head;

2139 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
lun£t
->
sdev
, 
lun_pba
/lun£t->sdev->
logicbs_ö_∑ge
, 
phy_lun
), &
no_›
->
dw‹d1
);

2141 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

2142 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

2143 
lun£t
->
cmd_öfo
[
cmdid
].
lun_pba
 =Üun_pba;

2144 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

2145 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

2146 
	`upd©e_lun£t_sq_hód
(
lun£t
);

2147 
	}
}

2149 
	$¢≠_ªad_pﬁlög_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
, 
logicb_t
 
lun_pba
, 
u8
 
©å
, u8 
hód
)

2151 
	`sh™n⁄_pﬁlög_cmd
(
lun£t
, 
phy_lun
, 
lun_pba
, 
©å
, 
hód
);

2152 
	}
}

2154 
	#gë_ecc_∑rôy_size
(
_sdev
Ë(((_sdev)->
ecc_c‹ª˘i⁄_powî
 * 14Ë/ 8)

	)

2155 
	#SECTOR_PAYLOAD
 (4110)

	)

2156 
	$gë_codew‹d_ödex
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
)

2158 
cw_∑ylﬂd
;

2159 
cw_off£t
 = 
sdev
->
fú°_codew‹d_off£t
;

2161 
cw_∑ylﬂd
 = 
sdev
->
ecc_codew‹d_size
 - 
	`gë_ecc_∑rôy_size
(sdev);

2162  ((
£˘‹_ödex
 * 
SECTOR_PAYLOAD
Ë+ 
cw_off£t
Ë/ 
cw_∑ylﬂd
;

2163 
	}
}

2165 
	$gë_codew‹d_addr
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
)

2167 
cw_ödex
 = 
	`gë_codew‹d_ödex
(
sdev
, 
£˘‹_ödex
);

2168 
iow
 = (
sdev
->
bô_mode
 =
MODE_8BIT
) ? 1 : 2;

2170 i‡(!
cw_ödex
)

2173  (
cw_ödex
 * 
sdev
->
ecc_codew‹d_size
 - sdev->
fú°_codew‹d_off£t
Ë/ 
iow
;

2174 
	}
}

2176 
ölöe
 
u32
 
	$gë_cﬁumn_addr
(
sh™n⁄_dev
 *
sdev
, 
u32
 
pba
)

2178  
sdev
->
£˘‹s_codew‹d_addr
[
pba
 % sdev->
logicbs_ö_∑ge
];

2179 
	}
}

2181 
ölöe
 
	$gë_£˘‹_ncodew‹d
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
)

2183 
cw_off£t
 = 
sdev
->
fú°_codew‹d_off£t
;

2184 
phy∑ge_size
 = 
sdev
->
«nd_∑ge_size
;

2185 
tŸÆ_codew‹d
 = (
phy∑ge_size
 + 
cw_off£t
Ë/ 
sdev
->
ecc_codew‹d_size
;

2186 
ncodew‹d
 = 0;

2188 i‡(
£˘‹_ödex
 =(
sdev
->
logicbs_ö_∑ge
 - 1))

2189 
ncodew‹d
 = 
tŸÆ_codew‹d
 - 
	`gë_codew‹d_ödex
(
sdev
, 
£˘‹_ödex
);

2191 
ncodew‹d
 = 
	`gë_codew‹d_ödex
(
sdev
, 
£˘‹_ödex
 + 1) - get_codeword_index(sdev, sector_index) + 1;

2193  
ncodew‹d
;

2194 
	}
}

2196 
	$gë_£˘‹s_cou¡
(
sh™n⁄_dev
 *
sdev
, 
£˘‹_ödex
)

2198 
iow
 = (
sdev
->
bô_mode
 =
MODE_8BIT
) ? 1 : 2;

2199 
∑πül_∑ge_size
 = 9344 * 
iow
;

2200 
∑πül_∑ge_ncw
 = 
∑πül_∑ge_size
 / 
sdev
->
ecc_codew‹d_size
;

2201 
off£t
 = 0;

2202 
n£˘‹s
 = 0;

2204 
∑πül_∑ge_ncw
 -
	`gë_£˘‹_ncodew‹d
(
sdev
, 
£˘‹_ödex
);

2205 
∑πül_∑ge_ncw
 >= 0) {

2206 
n£˘‹s
++;

2207 
off£t
++;

2208 i‡((
£˘‹_ödex
 + 
off£t
Ë>
sdev
->
logicbs_ö_∑ge
)

2211 
∑πül_∑ge_ncw
++;

2212 
∑πül_∑ge_ncw
 -
	`gë_£˘‹_ncodew‹d
(
sdev
, 
£˘‹_ödex
 + 
off£t
);

2215  
n£˘‹s
;

2216 
	}
}

2218 
	$¢≠_ªad_íabÀ
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_lun
 *
lun
, 
sh™n⁄_ªque°
 *
fú°_ªq
)

2220 
„©uª_cfg
 
cfg
 = 
	`GENERAL_CFG_4
(0xF5, 0x00245006);

2222 i‡((
lun
->
˚
->
„©uª_Êags
 & 
SNAPREAD_ENABLE_MASK
) == 0) {

2223 
lun
->
˚
->
„©uª_Êags
 |
SNAPREAD_ENABLE_MASK
;

2224 
	`BUG_ON
(
lun£t
->
sdev
->
¢≠_ªad_íabÀ
 == 0);

2225 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2226 
	`h¨dw¨e_dñay_g5
(
lun£t
, 
lun
->
phy_lun_num
);

2227 
	`h¨dw¨e_dñay_g5
(
lun£t
, 
lun
->
phy_lun_num
);

2229 
	}
}

2231 
	$¢≠_ªad_£t_cﬁ_addr
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, 
u32
 
cﬁ_addr
)

2233 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

2234 
sh™n⁄_lun£t
 *
lun£t
 = 
lun
->lunset;

2235 
u32
 
∑ge
 = (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
;

2236 
u32
 
block
 = (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
;

2238 
u8
 
c1
 = 
cﬁ_addr
 & 0xFF;

2239 
u8
 
c2
 = (
cﬁ_addr
 >> 8) & 0x7F;

2240 
u8
 
r1
 = 
∑ge
 & 0xFF;

2241 
u8
 
r2
 = ((
block
 & 0x3FË<< 2Ë| ((
∑ge
 >> 8) & 0x3);

2242 
u8
 
r3
 = ((
lun
->
phy_lun_num
 % 2Ë<< 6Ë| ((
block
 >> 6) & 0x3F);

2243 
u32
 
µa
 = ((
r3
 & 0x3F)<< 16Ë| (
r2
 << 8Ë| 
r1
;

2244 
„©uª_cfg
 
cfg
 = {

2245 .
vÆid
 = 
FEATURE_VALID_MASK
,

2246 .
cmd
 = 0x0,

2247 .
addr
 = 
c1
,

2248 .
misc
 = 0x26,

2249 .
nbyã
 = 0,

2250 .
£c⁄d¨y_cmd
 = 0,

2253 
	`BUG_ON
(
block
 >
sdev
->
mbr
.
eblocks_ö_lun
);

2254 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2256 
cfg
.
addr
 = 
c2
;

2257 
cfg
.
misc
 = 0x2E;

2258 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2260 
cfg
.
addr
 = 
r1
;

2261 
cfg
.
misc
 = 0x2E;

2262 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2264 
cfg
.
addr
 = 
r2
;

2265 
cfg
.
misc
 = 0x2E;

2266 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2268 
cfg
.
addr
 = 
r3
;

2269 
cfg
.
misc
 = 0x6C;

2270 
cfg
.
£c⁄d¨y_cmd
 = 0x30;

2271 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2278 i‡(
µa
 !
	`c⁄vît_µa
(
sdev
, 
ªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_∑ge
))

2279 
	`sh™n⁄_îr
("¢≠_ªad:Ö∑=%ld,Ñeq->µa=%ld\n", 
µa
, 
	`c⁄vît_µa
(
sdev
, 
ªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_∑ge
));

2281 
	`¢≠_ªad_pﬁlög_cmd
(
lun£t
, 
lun
->
phy_lun_num
, 
ªq
->
pba
.
lun_pba
, 0x40, 0x22);

2282 
	}
}

2284 
	$__¢≠_ªad_dißbÀ
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_lun
 *
lun
, 
f‹˚
)

2286 
„©uª_cfg
 
cfg
 = 
	`GENERAL_CFG_4
(0xF5, 0x00);

2288 i‡((
lun
->
˚
->
„©uª_Êags
 & 
SNAPREAD_ENABLE_MASK
Ë|| 
f‹˚
) {

2289 
lun
->
˚
->
„©uª_Êags
 &~
SNAPREAD_ENABLE_MASK
;

2290 
	`BUG_ON
(
lun£t
->
sdev
->
¢≠_ªad_íabÀ
 == 0);

2291 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2292 
	`h¨dw¨e_dñay_g5
(
lun£t
, 
lun
->
phy_lun_num
);

2293 
	`h¨dw¨e_dñay_g5
(
lun£t
, 
lun
->
phy_lun_num
);

2295 
	}
}

2297 
	$¢≠_ªad_dißbÀ
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_lun
 *
lun
, 
f‹˚
, 
has_lock
)

2299 i‡(!
has_lock
)

2300 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

2302 
	`__¢≠_ªad_dißbÀ
(
lun£t
, 
lun
, 
f‹˚
);

2304 i‡(!
has_lock
)

2305 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

2306 
	}
}

2308 
	$ˇn_¢≠_ªad
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
fú°_ªq
)

2310 
u32
 
fú°_pba
 = 
fú°_ªq
->
pba
.
lun_pba
;

2311 
u32
 
œ°_pba
 = 
fú°_ªq
->
pba
.
lun_pba
;

2312 
pba_ödex
;

2313 
lun
 = 
fú°_ªq
->
pba
.lun;

2314 
u32
 
µa
 = 
fú°_ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
;

2315 
u32
 
œ°_µa
;

2316 
u32
 
fú°_µa
;

2317 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + (
µa
 / sdev->
∑ges_ö_siblög_eblock
);

2318 
sh™n⁄_ªque°
 *
ªq
;

2320 i‡(!
sh™n⁄_do_¢≠ªad
)

2323 i‡(!
sdev
->
¢≠_ªad_íabÀ
)

2326 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
))

2329 i‡(
sdev
->
öô_d⁄e
 < 
STAGE9_DONE
)

2332 i‡(
sdev
->
°©e
 =
SHN_STATE_RECONFIG
)

2335 i‡(
sdev
->
°©e
 =
SHN_STATE_RESET
)

2338 i‡(
sb
->
°©e
 =
FREE_BLOCK
 || sb->°©ê=
MBR_BLOCK
) {

2342 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
fú°_ªq
->
chunk_li°
, chunk_list) {

2343 
	`BUG_ON
(
ªq
->
pba
.
lun
 !=Üun);

2344 i‡(
ªq
->
pba
.
lun_pba
 < 
fú°_pba
)

2345 
fú°_pba
 = 
ªq
->
pba
.
lun_pba
;

2346 i‡(
ªq
->
pba
.
lun_pba
 > 
œ°_pba
)

2347 
œ°_pba
 = 
ªq
->
pba
.
lun_pba
;

2350 
œ°_µa
 = 
œ°_pba
 / 
sdev
->
logicbs_ö_∑ge
;

2351 
fú°_µa
 = 
fú°_pba
 / 
sdev
->
logicbs_ö_∑ge
;

2352 i‡(
œ°_µa
 !
fú°_µa
)

2355 i‡((
sdev
->
a˘ive_blk
[0]->
sb_ödex
 =
sb
->sb_index) && \

2356 (
sdev
->
wr_chunk
[0] - (
µa
 % sdev->
∑ges_ö_eblock
) <= 64)) {

2360 i‡((
sdev
->
a˘ive_blk
[1]->
sb_ödex
 =
sb
->sb_index) && \

2361 (
sdev
->
wr_chunk
[1] - (
µa
 % sdev->
∑ges_ö_eblock
) <= 64)) {

2365 
pba_ödex
 = 
fú°_pba
 % 
sdev
->
logicbs_ö_∑ge
;

2366 i‡((
œ°_pba
 - 
fú°_pba
Ë< 
	`gë_£˘‹s_cou¡
(
sdev
, 
pba_ödex
))

2370 
	}
}

2373 
	$do_¢≠_ªad
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
fú°_ªq
, 
∂™es
)

2375 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

2376 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
fú°_ªq
->
pba
.lun];

2377 
u32
 
cﬁ_addr
 = 0x0;

2379 
	`BUG_ON
(
lun£t
->
ödex
 !
lun
->lunset->index);

2380 i‡(
∂™es
 > 1)

2381 
out
;

2382 i‡(
	`ˇn_¢≠_ªad
(
sdev
, 
lun£t
, 
fú°_ªq
)) {

2383 
cﬁ_addr
 = 
	`gë_cﬁumn_addr
(
sdev
, 
fú°_ªq
->
pba
.
lun_pba
);

2385 
	`¢≠_ªad_íabÀ
(
lun£t
, 
lun
, 
fú°_ªq
);

2386 
	`¢≠_ªad_£t_cﬁ_addr
(
sdev
, 
fú°_ªq
, 
cﬁ_addr
);

2387 
	`sh™n⁄_©omic64_öc
(&
sdev
->
¢≠_ªad_cou¡î
);

2391 
out
:

2392 
	`¢≠_ªad_dißbÀ
(
lun£t
, 
lun
, 0, 1);

2394 
	}
}

2396 
	$víd‹_mode_íãr
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
)

2398 
„©uª_cfg
 
cfg
;

2400 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2401 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2402 
cfg
.
cmd
 = 0x5C;

2403 
cfg
.
£c⁄d¨y_cmd
 = 0xC5;

2404 
cfg
.
misc
 |
SECONDARY_CMD_ENABLE_MASK
;

2405 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2407 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2408 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2409 
cfg
.
cmd
 = (
phy_lun
 % 2) ? 0xF2 : 0xF1;

2410 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2412 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2413 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2414 
cfg
.
cmd
 = 0x56;

2415 
cfg
.
d©a
[0] = 0x01;

2416 
cfg
.
nbyã
 = 1;

2417 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2418 
	}
}

2420 
	$víd‹_mode_exô
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
)

2422 
„©uª_cfg
 
cfg
;

2424 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2425 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2426 
cfg
.
cmd
 = (
phy_lun
 % 2) ? 0xF2 : 0xF1;

2427 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2429 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2430 
cfg
.
cmd
 = 0x56;

2431 
cfg
.
addr
 = 0x0;

2432 
cfg
.
nbyã
 = 1;

2433 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2435 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2436 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2437 
cfg
.
cmd
 = 0xFF;

2438 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2439 
	}
}

2441 
	$víd‹_mode_£t_èbÀ1
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
)

2443 
„©uª_cfg
 
cmd_cfg
, 
cfg
;

2444 
i
;

2446 
víd‹_mode_èbÀ
 
èbÀ1
[
VENDOR_MODE_CMD_SEQ_TABLE1_LEN
] = {

2447 {.
addr
 = 0x46, .
d©a
 = 0xE5},

2448 {.
addr
 = 0x47, .
d©a
 = 0x80},

2449 {.
addr
 = 0x5B, .
d©a
 = 0xC5},

2450 {.
addr
 = 0x97, .
d©a
 = 0x03},

2451 {.
addr
 = 0x9A, .
d©a
 = 0x4F},

2452 {.
addr
 = 0x9C, .
d©a
 = 0xF0},

2453 {.
addr
 = 0x9D, .
d©a
 = 0x0D}

2456 
	`sh™n⁄_mem£t
(&
cmd_cfg
, 0, (cmd_cfg));

2457 
cmd_cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2458 
cmd_cfg
.
cmd
 = (
phy_lun
 % 2) ? 0xF2 : 0xF1;

2460 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2461 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2462 
cfg
.
cmd
 = 0x56;

2463 
cfg
.
nbyã
 = 1;

2465 
i
 = 0; i < 
VENDOR_MODE_CMD_SEQ_TABLE1_LEN
; i++) {

2466 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
);

2467 
cfg
.
addr
 = 
èbÀ1
[
i
].addr & 0xFF;

2468 
cfg
.
d©a
[0] = 
èbÀ1
[
i
].data & 0xFF;

2469 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2471 
	}
}

2473 
	$víd‹_mode_£t_èbÀ2
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
)

2475 
„©uª_cfg
 
cmd_cfg
[5], 
cfg
;

2476 
u8
 
ªadout_d©a
[
VENDOR_MODE_CMD_SEQ_TABLE2_LEN
];

2477 
u8
 
check_èbÀ2
[
VENDOR_MODE_CMD_SEQ_TABLE2_LEN
];

2478 
i
, 
w©ch_cmdid
;

2480 
víd‹_mode_èbÀ
 
èbÀ2
[
VENDOR_MODE_CMD_SEQ_TABLE2_LEN
] = {

2481 {.
addr
 = 0x27, .
d©a
 = 2},

2482 {.
addr
 = 0x28, .
d©a
 = 4},

2483 {.
addr
 = 0x29, .
d©a
 = 1},

2484 {.
addr
 = 0x2A, .
d©a
 = 2},

2485 {.
addr
 = 0x2B, .
d©a
 = 0},

2486 {.
addr
 = 0x3B, .
d©a
 = -2},

2487 {.
addr
 = 0x3C, .
d©a
 = 96},

2488 {.
addr
 = 0x2D, .
d©a
 = -2},

2489 {.
addr
 = 0x2F, .
d©a
 = -1},

2490 {.
addr
 = 0x31, .
d©a
 = -3},

2491 {.
addr
 = 0x33, .
d©a
 = -1}

2494 
	`sh™n⁄_mem£t
(
cmd_cfg
, 0, (cmd_cfg));

2495 
cmd_cfg
[0].
vÆid
 = 
FEATURE_VALID_MASK
;

2496 
cmd_cfg
[0].
cmd
 = (
phy_lun
 % 2) ? 0xF2 : 0xF1;

2498 
cmd_cfg
[1].
vÆid
 = 
FEATURE_VALID_MASK
;

2499 
cmd_cfg
[1].
cmd
 = 0x56;

2500 
cmd_cfg
[1].
addr
 = 0x01;

2501 
cmd_cfg
[1].
nbyã
 = 1;

2502 
cmd_cfg
[1].
d©a
[0] = 0x06;

2504 
cmd_cfg
[2].
vÆid
 = 
FEATURE_VALID_MASK
;

2505 
cmd_cfg
[2].
cmd
 = 0x00;

2506 
cmd_cfg
[2].
misc
 |(
PREFIX_CMD_MASK
 | 
FORCE_ADDR_CYCLE_MASK
);

2508 
cmd_cfg
[3].
vÆid
 = 
FEATURE_VALID_MASK
;

2509 
cmd_cfg
[3].
cmd
 = 0x5F;

2510 
cmd_cfg
[3].
nbyã
 = 1;

2512 
cmd_cfg
[4].
vÆid
 = 
FEATURE_VALID_MASK
;

2513 
cmd_cfg
[4].
cmd
 = 0x56;

2514 
cmd_cfg
[4].
addr
 = 0x01;

2515 
cmd_cfg
[4].
nbyã
 = 1;

2516 
cmd_cfg
[4].
d©a
[0] = 0x00;

2518 
	`sh™n⁄_mem£t
(&
cfg
, 0, (cfg));

2519 
cfg
.
vÆid
 = 
FEATURE_VALID_MASK
;

2520 
cfg
.
cmd
 = 0x56;

2521 
cfg
.
nbyã
 = 1;

2524 
i
 = 0; i < 
VENDOR_MODE_CMD_SEQ_TABLE2_LEN
; i++) {

2525 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2526 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[1]);

2528 
cmd_cfg
[2].
addr
 = 
èbÀ2
[
i
].addr & 0xFF;

2529 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[2]);

2531 
w©ch_cmdid
 = 
lun£t
->
sq_hód
 >> 3;

2532 
	`lun_gë_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[3]);

2534 
lun£t
->
sq_hód
 !
	`ªad_ªg_ß„
÷un£t->
sdev
, &lun£t->
lun_b¨
->
cq_hód
))

2535 
	`sh™n⁄_m¶ìp
(1);

2536 
ªadout_d©a
[
i
] = 
	`sh™n⁄_mem_ªadq
(
lun£t
->
cq_addr
 + 
w©ch_cmdid
) & 0xFF;

2538 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2539 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[4]);

2541 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2542 
cfg
.
addr
 = 
èbÀ2
[
i
].addr & 0xFF;

2543 
cfg
.
d©a
[0] = (
ªadout_d©a
[
i
] + 
èbÀ2
[i].data) & 0xFF;

2544 
check_èbÀ2
[
i
] = 
cfg
.
d©a
[0];

2545 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cfg
);

2549 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2550 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[1]);

2552 
i
 = 0; i < 
VENDOR_MODE_CMD_SEQ_TABLE2_LEN
; i++) {

2553 
cmd_cfg
[2].
addr
 = 
èbÀ2
[
i
].addr & 0xFF;

2554 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[2]);

2556 
w©ch_cmdid
 = 
lun£t
->
sq_hód
 >> 3;

2557 
	`lun_gë_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[3]);

2559 
lun£t
->
sq_hód
 !
	`ªad_ªg_ß„
÷un£t->
sdev
, &lun£t->
lun_b¨
->
cq_hód
))

2560 
	`sh™n⁄_m¶ìp
(1);

2561 
ªadout_d©a
[
i
] = 
	`sh™n⁄_mem_ªadq
(
lun£t
->
cq_addr
 + 
w©ch_cmdid
) & 0xFF;

2562 i‡(
ªadout_d©a
[
i
] !
check_èbÀ2
[i])

2563 
	`sh™n⁄_w¨n
("víd‹ modêcmd sequí˚ check faûed, 0x%02X - 0x%02X.\n", 
ªadout_d©a
[
i
], 
check_èbÀ2
[i]);

2566 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2567 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[4]);

2568 
	}
}

2570 
	$√ed_víd‹_mode_cmd
(
sh™n⁄_dev
 *
sdev
)

2572 
sh™n⁄_lun£t
 *
lun£t
 = 
NULL
;

2573 
„©uª_cfg
 
cmd_cfg
[4];

2574 
i
, 
ªt
, 
w©ch_cmdid
, 
phy_lun
 = 0;

2576 i‡(!
sh™n⁄_víd‹_cmd
)

2579 i‡(!(
sdev
->
mbr
.
„©uª_Êags
 & 
VENDOR_MODE_CMD_ENABLE
))

2582 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

2583 
phy_lun
 = 
logiˇl_lun_to_phy_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
i
);

2584 
lun£t
 = &
sdev
->
lun£ts
[
phy_lun
 / sdev->
max_lun_ö_lun£t
];

2585 i‡(!
	`sh™n⁄_ã°_bô
(
phy_lun
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
))

2588 i‡(
i
 =
sdev
->
lun_cou¡
)

2591 
	`sh™n⁄_mem£t
(
cmd_cfg
, 0, (cmd_cfg));

2592 
cmd_cfg
[0].
vÆid
 = 
FEATURE_VALID_MASK
;

2593 
cmd_cfg
[0].
cmd
 = (
phy_lun
 % 2) ? 0xF2 : 0xF1;

2595 
cmd_cfg
[1].
vÆid
 = 
FEATURE_VALID_MASK
;

2596 
cmd_cfg
[1].
cmd
 = 0x56;

2597 
cmd_cfg
[1].
addr
 = 0x01;

2598 
cmd_cfg
[1].
nbyã
 = 1;

2599 
cmd_cfg
[1].
d©a
[0] = 0x06;

2601 
cmd_cfg
[2].
vÆid
 = 
FEATURE_VALID_MASK
;

2602 
cmd_cfg
[2].
cmd
 = 0x00;

2603 
cmd_cfg
[2].
addr
 = 0x9A;

2604 
cmd_cfg
[2].
misc
 |(
PREFIX_CMD_MASK
 | 
FORCE_ADDR_CYCLE_MASK
);

2606 
cmd_cfg
[3].
vÆid
 = 
FEATURE_VALID_MASK
;

2607 
cmd_cfg
[3].
cmd
 = 0x5F;

2608 
cmd_cfg
[3].
nbyã
 = 1;

2610 
	`víd‹_mode_íãr
(
lun£t
, 
phy_lun
);

2612 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[0]);

2613 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[1]);

2615 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[2]);

2617 
w©ch_cmdid
 = 
lun£t
->
sq_hód
 >> 3;

2618 
	`lun_gë_„©uª_gíîÆ_g5
(
lun£t
, 
phy_lun
, &
cmd_cfg
[3]);

2620 
lun£t
->
sq_hód
 !
	`ªad_ªg_ß„
÷un£t->
sdev
, &lun£t->
lun_b¨
->
cq_hód
))

2621 
	`sh™n⁄_m¶ìp
(1);

2622 i‡((
	`sh™n⁄_mem_ªadq
(
lun£t
->
cq_addr
 + 
w©ch_cmdid
) & 0xFF) == 0x0F)

2623 
ªt
 = 1;

2625 
ªt
 = 0;

2627 
	`víd‹_mode_exô
(
lun£t
, 
phy_lun
);

2629  
ªt
;

2630 
	}
}

2632 
	$víd‹_mode_cmd_£quí˚
(
sh™n⁄_dev
 *
sdev
)

2634 
sh™n⁄_lun£t
 *
lun£t
;

2635 
i
, 
phy_lun
;

2637 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

2638 
phy_lun
 = 
logiˇl_lun_to_phy_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
i
);

2639 
lun£t
 = &
sdev
->
lun£ts
[
phy_lun
 / sdev->
max_lun_ö_lun£t
];

2640 i‡(
	`sh™n⁄_ã°_bô
(
phy_lun
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
))

2643 
	`víd‹_mode_íãr
(
lun£t
, 
phy_lun
);

2645 
	`víd‹_mode_£t_èbÀ1
(
lun£t
, 
phy_lun
);

2647 
	`víd‹_mode_£t_èbÀ2
(
lun£t
, 
phy_lun
);

2649 
	`víd‹_mode_exô
(
lun£t
, 
phy_lun
);

2651 
	}
}

2653 
	$sh™n⁄_Á°_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

2655 
sh™n⁄_lun
 *
lun
 = 
lun£t
->
sdev
->lun[
ªq
->
pba
.lun];

2656 
„©uª_cfg
 
cfg
 = {

2657 .
vÆid
 = 
FEATURE_VALID_MASK
,

2658 .
addr
 = 0,

2659 .
cmd
 = 0x36,

2660 .
£c⁄d¨y_cmd
 = 0,

2661 .
misc
 = 
VENDOR_MODE_MASK
 | 
PREFIX_CMD_MASK
,

2662 .
nbyã
 = 0

2664 
	`lun_£t_„©uª_gíîÆ_g5
(
lun£t
, 
lun
->
phy_lun_num
, &
cfg
);

2665 
	}
}

	@shannon_ioctl.c

12 
	~"sh™n⁄.h
"

13 
	~"sh™n⁄_io˘l.h
"

14 
	~"sh™n⁄_ªgs.h
"

15 
	~"sh™n⁄_scsi.h
"

17 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

18 
œ°_sb_d⁄e
[2];

19 
cuºít_°rùe_∑ge
[2];

20 
u64
 *
mëad©a_∑rôy
[2];

21 *
∑rôy_buf
[2];

22 
•ölock_t
 
∑rôy_buf_lock
[2];

23 
waô_queue_hód_t
 
sb_d⁄e_evít
[2];

24 
©omic_t
 
ªmaöög_°rùe_∑ges
[2];

25 
©omic_t
 
ªmaöög_∑ges
[2];

26 
∑ges_ö_°rùe
[2];

27 
waô_queue_hód_t
 
wrôe_d⁄e_evít
[2];

28 
waô_queue_hód_t
 
œ°_∑rôy_d⁄e_evít
[2];

29 
∑rôy_cmd
[2];

31 
sh™n⁄_memblock_poﬁ
 
m≠_èbÀ_poﬁ
;

32 
sh™n⁄_memblock_poﬁ
 
ãmp_èbÀ_poﬁ
;

33 
sh™n⁄_¥e„tch_íabÀ
;

35 
wrôe_adv™˚d_ªad_mi¸ocode
(
sh™n⁄_dev
 *
sdev
, 
num
);

37 
	$lun_ª‰esh_mbr_eblks_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

39 
sh™n⁄_lun
 *
lun
 = (sh™n⁄_lu¿*)
sbio
->
d©a
;

40 
lun
->
ª‰esh_⁄e_mbr_eblk_d⁄e
 = 1;

41 
	`sh™n⁄_wake_up
(&
lun
->
ª‰esh_⁄e_mbr_eblk_d⁄e_evít
);

42 
	}
}

44 
sh™n⁄_bio
 *
	$¥ï¨e_ª‰esh_mbr
(
sh™n⁄_lun
 *
lun
)

46 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

47 
sh™n⁄_poﬁ
 *
•oﬁ

sdev
->spool;

48 
sh™n⁄_bio
 *
sbio
 = 
NULL
;

49 
sh™n⁄_ªque°
 *
ªq
;

50 *
mbr_±r
 = 
NULL
;

51 
__u16
 *
bbt_±r
 = 
NULL
;

52 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
 = 
NULL
;

53 
logicbs_ö_poﬁ_öfo
 = 0;

54 
∑ges
, 
u£_bôm≠
, 
i
 = 0;

56 i‡(
•oﬁ
) {

57 
poﬁ_öfo
 = 
	`sh™n⁄_kmÆloc
((*poﬁ_öfo), 
GFP_SHANNON
);

58 i‡(
poﬁ_öfo
 =
NULL
) {

59 
	`sh™n⁄_îr
("allocateÖool_info failed.\n");

60 
out
;

62 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

63 
	`c›y_poﬁ_öfo
(
poﬁ_öfo
, 
•oﬁ
->pool_info);

64 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

65 
logicbs_ö_poﬁ_öfo
 = ((*
poﬁ_öfo
Ë+ 
sdev
->
logicb_size
 - 1) / sdev->logicb_size;

67 
bbt_±r
 = 
	`sh™n⁄_kmÆloc
(
LUN_BBT_SIZE
, 
GFP_SHANNON
);

68 i‡(
bbt_±r
 =
NULL
) {

69 
	`sh™n⁄_îr
("allocate bbt_ptr failed!\n");

70 
out
;

72 
mbr_±r
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

74 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

75 
	`£t_sbio_debug_èg
(
sbio
, 
REFRESH_MBR_EBLKS_TAG
);

77 i‡(
•oﬁ
 && (
lun
->
lun_num
 < 
POOL_INFO_LUNS
))

78 
∑ges
 = 3;

80 
∑ges
 = 2;

81 
sbio
->
logicbs
 = 1 + 
sdev
->
logicbs_ö_∑ge
 * 
∑ges
;

82 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

84 
sbio
->
ˇŒback
 = 
lun_ª‰esh_mbr_eblks_ˇŒback
;

85 
sbio
->
d©a
 = 
lun
;

86 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

88 
	`sh™n⁄_muãx_lock
(&
sdev
->
modify_mbr_£m
);

89 
	`c›y_mbr_to_mem‹y
((
sh™n⁄_mbr
 *)
mbr_±r
, &
sdev
->
mbr
);

90 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
modify_mbr_£m
);

92 
	`sh™n⁄_•ö_lock_bh
(&
lun
->
bbt_lock
);

93 i‡(
	`bbt_usög_bôm≠
(
lun
->
bbt
, 
sdev
)) {

94 
	`sh™n⁄_mem£t
(
bbt_±r
, 0, 
LUN_BBT_SIZE
);

95 
	`sh™n⁄_mem˝y
(
bbt_±r
, 
lun
->
bbt
, 
LUN_BBT_SIZE
);

97 i‡(
lun
->
bad_blk_cou¡
 >= 2048) {

98 
	`sh™n⁄_mem˝y
(
bbt_±r
, 
lun
->
bbt
, 
LUN_BBT_SIZE
);

99 
	`sh™n⁄_mem£t
(
lun
->
bbt
, 0, 
LUN_BBT_SIZE
);

100 ((
u64
 *)
lun
->
bbt
)[0] = 
BBT_BITMAP_WATERMARK
;

101 
i
 = 0; i < 
lun
->
bad_blk_cou¡
; i++)

102 
	`sh™n⁄_£t_bô_À
(
bbt_±r
[
i
] + 64, 
lun
->
bbt
);

103 
	`sh™n⁄_mem˝y
(
bbt_±r
, 
lun
->
bbt
, 
LUN_BBT_SIZE
);

105 
	`sh™n⁄_mem£t
(
bbt_±r
, 0xFF, 
LUN_BBT_SIZE
);

106 
i
 = 0; i < 
LUN_BBT_SIZE
 / 2; i++)

107 
	`sh™n⁄_mem_wrôew
(
lun
->
bbt
[
i
], 
bbt_±r
 + i);

110 
u£_bôm≠
 = 
	`bbt_usög_bôm≠
(
lun
->
bbt
, 
sdev
);

111 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun
->
bbt_lock
);

115 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

116 
	`£t_ªq_debug_èg
(
ªq
, 
ERASE_BLOCK_TAG
, 0);

117 
ªq
->
›code
 = 
sh_cmd_îa£
;

118 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

119 
ªq
->
µa
 = 0;

120 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

121 
ªq
->
sbio
 = sbio;

122 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

123 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

127 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

128 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

129 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_MBR_TAG
, 
i
);

130 
ªq
->
›code
 = 
sh_cmd_wrôe
;

131 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

132 
ªq
->
hód
 = 
MBR_HEAD
;

133 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

134 
ªq
->
lba
 = 
MBR_WATERMARK
;

135 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

136 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

137 
ªq
->
pba
.
lun_pba
 = 
i
;

138 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

139 i‡(
i
 == 0)

140 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
mbr_±r
 + 
i
 * 
sdev
->
logicb_size
, sdev->logicb_size);

141 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

142 
ªq
->
sbio
 = sbio;

143 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

147 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

148 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

149 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_STATIC_BBT_TAG
, 
i
);

150 
ªq
->
›code
 = 
sh_cmd_wrôe
;

151 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

152 
ªq
->
hód
 = 
MBR_HEAD
;

153 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

154 
ªq
->
lba
 = 
MBR_WATERMARK
;

155 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

156 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

157 
ªq
->
pba
.
lun_pba
 = 1 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

158 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

159 i‡(
i
 < 
LUN_BBT_SIZE
/
sdev
->
logicb_size
)

160 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, (*)
bbt_±r
 + 
sdev
->
logicb_size
 * 
i
, sdev->logicb_size);

162 i‡(
u£_bôm≠
)

163 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0, 
sdev
->
logicb_size
);

165 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0xFF, 
sdev
->
logicb_size
);

167 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

168 
ªq
->
sbio
 = sbio;

169 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

172 i‡(!
•oﬁ
 || (
lun
->
lun_num
 >
POOL_INFO_LUNS
))

173 
out
;

175 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

176 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

177 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_BBT_POOL_INFO_TAG
, 
i
);

178 
ªq
->
›code
 = 
sh_cmd_wrôe
;

179 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

180 
ªq
->
hód
 = 
MBR_HEAD
;

181 
ªq
->
d©©y≥
 = 
SHORT_LBA
;

182 
ªq
->
lba
 = 
POOL_INFO_METADATA
;

183 
ªq
->
_mëad©a
 = (((
u64
Ïeq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
Ë| (ªq->
lba
 & 
LONG_LBA_MASK
);

184 
ªq
->
pba
.
lun
 =Üun->
lun_num
;

185 
ªq
->
pba
.
lun_pba
 = 2 * 
sdev
->
logicbs_ö_∑ge
 + 
i
;

186 
ªq
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

187 i‡(
i
 < 
logicbs_ö_poﬁ_öfo
)

188 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, (*)
poﬁ_öfo
 + 
sdev
->
logicb_size
 * 
i
, sdev->logicb_size);

189 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
,Ñeq->
vút_addr
, sdev->
logicb_size
,Ñeq->
dma_dú
);

190 
ªq
->
sbio
 = sbio;

191 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

194 
out
:

195 i‡(
poﬁ_öfo
)

196 
	`sh™n⁄_k‰ì
(
poﬁ_öfo
);

197 i‡(
bbt_±r
)

198 
	`sh™n⁄_k‰ì
(
bbt_±r
);

199 i‡(
mbr_±r
)

200 
	`‰ì_logicb_buf
(
sdev
, 
mbr_±r
);

202  
sbio
;

203 
	}
}

206 
	$lun_ª‰esh_mbr_eblks
(
sh™n⁄_lun
 *
lun
)

208 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

209 
sh™n⁄_poﬁ
 *
•oﬁ

sdev
->spool;

210 
sh™n⁄_bio
 *
sbio
;

211 
sh™n⁄_ªque°
 *
ªq
, *
tmp
, *
fú°_ªq
 = 
NULL
;

212 
ªq_cou¡
, 
∑ges
, 
eblk
;

214 
sbio
 = 
	`¥ï¨e_ª‰esh_mbr
(
lun
);

215 i‡(
sbio
 =
NULL
)

216  -
ENOMEM
;

218 
eblk
 = 0;Éblk < 
sdev
->
mbr_eblocks
;Éblk++) {

219 
ªq_cou¡
 = 0;

220 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

221 
lun
->
ª‰esh_⁄e_mbr_eblk_d⁄e
 = 0;

223 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
sbio
->
ªq_li°
, 
bio_li°
) {

224 i‡(
ªq
->
›code
 =
sh_cmd_îa£
) {

226 
ªq
->
µa
 = 
eblk
 * 
sdev
->
∑ges_ö_eblock
;

228 
	`sh™n⁄_muãx_lock
(&
lun
->
lun£t
->
sq_£m
);

229 
	`__sh™n⁄_îa£_cmd
(
lun
->
lun£t
, 
ªq
, 0);

230 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
lun£t
->
sq_£m
);

231 
	`upd©e_lun£t_sq_hód
(
lun
->
lun£t
);

232 } i‡(
ªq
->
›code
 =
sh_cmd_wrôe
) {

234 i‡(
eblk
)

235 
ªq
->
pba
.
lun_pba
 +
sdev
->
∑ges_ö_eblock
 * sdev->
logicbs_ö_∑ge
;

236 i‡((
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
) == 0) {

237 
fú°_ªq
 = 
ªq
;

238 
	`SHANNON_INIT_LIST_HEAD
(&
fú°_ªq
->
chunk_li°
);

239 
ªq_cou¡
 = 1;

241 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
fú°_ªq
->chunk_list);

242 
ªq_cou¡
++;

243 i‡(
ªq_cou¡
 =
sdev
->
logicbs_ö_∑ge
) {

244 
	`sh™n⁄_wrôe_cmd
(
lun
->
lun£t
, 
fú°_ªq
);

245 
ªq_cou¡
 = 0;

246 
fú°_ªq
 = 
NULL
;

251 
	`sh™n⁄_waô_evít
(
lun
->
ª‰esh_⁄e_mbr_eblk_d⁄e_evít
,Üun->
ª‰esh_⁄e_mbr_eblk_d⁄e
 != 0);

254 i‡(
•oﬁ
 && (
lun
->
lun_num
 < 
POOL_INFO_LUNS
))

255 
∑ges
 = 3;

257 
∑ges
 = 2;

258 
	`sh™n⁄_©omic_£t
(&
lun
->
√xt_em±y_∑ge
, 
∑ges
);

259 
	`sh™n⁄_©omic_öc
(&
sdev
->
ª‰esh_mbr_cou¡
);

261 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

262 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

263 i‡(
ªq
->
›code
 =
sh_cmd_wrôe
) {

264 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
,Ñeq->
dma_dú
);

265 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

267 
	`‰ì_ªq
(
ªq
);

269 
	`‰ì_sbio
(
sbio
);

272 
	}
}

274 
	$lun_ª‰esh_mbr_eblks_sync
(
sh™n⁄_lun
 *
lun
)

276 
sh™n⁄_dev
 *
sdev
 = 
lun
->sdev;

277 
ªt
;

279 i‡(
	`is_°©ic_bad_lun
(
sdev
, 
lun
->
lun_num
Ë&& (lun->
bad
 =0Ë&& (lun->
phy_lun_num
 != 0)) {

280 
	`sh™n⁄_©omic_öc
(&
sdev
->
ª‰esh_mbr_d⁄e
);

284 
	`sh™n⁄_muãx_lock
(&
lun
->
ª‰esh_£m
);

285 
ªt
 = 
	`lun_ª‰esh_mbr_eblks
(
lun
);

286 
	`sh™n⁄_muãx_u∆ock
(&
lun
->
ª‰esh_£m
);

287 i‡(
ªt
)

290 
	`sh™n⁄_©omic_öc
(&
sdev
->
ª‰esh_mbr_d⁄e
);

293 
	}
}

295 
	$ª‰esh_mbr_f‹_sdev_sync
(
sh™n⁄_dev
 *
sdev
)

297 
i
 = 0;

299 
sdev
->
mbr
.
mbr_upd©e
++;

300 
	`sh™n⁄_öfo
("%s: mbr_upd©e=0x%x.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
mbr
.
mbr_upd©e
);

301 
	`sh™n⁄_©omic_£t
(&
sdev
->
ª‰esh_mbr_d⁄e
, 0);

303 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

304 
	`lun_ª‰esh_mbr_eblks_sync
(
sdev
->
lun
[
i
]);

307 
	}
}

309 
	$ª£t_hw_c⁄åﬁÀr
(
sh™n⁄_dev
 *
dev
)

311 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

312 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
RESET
, 1);

313 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
RESET
, 0);

314 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

315 
	}
}

317 
	$ªöôülize_‰ì_blocks
(
sh™n⁄_dev
 *
sdev
)

319 
sh™n⁄_sb
 *
sb
;

321 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

322 
	`sh™n⁄_li°_f‹_óch_íåy
(
sb
, &
sdev
->
‰ì_blocks
, 
li°
) {

323 
	`ªöôülize_sb
(
sdev
, 
sb
);

325 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

326 
	}
}

328 
	$ª£t_d©a_°ru˘
(
sh™n⁄_dev
 *
sdev
)

330 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

331 
sh™n⁄_sb
 *
sb
;

332 
i
 = 0;

333 
u64
 
√w_size
 = 
sdisk
->
‹ig_m≠_èbÀ_size
;

335 
sdev
->
√w_bad_lun
->
bad_lun_Êag
 = 0;

336 
i
 = 0; i < 
sdev
->
∑rôy_groups
; i++)

337 
sdev
->
√w_bad_lun
->
group_bad_lun
[
i
] = 0;

340 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


341 
	`ïûog_cdev_exô
(
sdev
);

343 
	`sh™n⁄_ªÀa£_ïûogs
(
sdev
);

344 
	`£t_ïûog_size
(
sdev
);

345 
	`sh™n⁄_Æloc_ïûogs
(
sdev
);

346 
	`sh™n⁄_ªÀa£_ªbuûd_ïûogs
(
sdev
);

347 
	`ªöôülize_‰ì_blocks
(
sdev
);

349 
√w_size
 = 
	`SHN_PAGE_ALIGN
((
sdev
->
sdisk
.
£˘‹s
 >> (sdev->
logicb_shi·
 - 9)Ë* (
logicb_t
));

350 i‡(
sdisk
->
‹ig_m≠_èbÀ_size
 !
√w_size
) {

351 
	`sh™n⁄_m≠_èbÀ_‰ì
(&
sdev
->
sdisk
);

352 
sdisk
->
tŸÆ_m≠_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
sdev
->sdisk.
£˘‹s
 >> (sdev->
logicb_shi·
 - 9)Ë* (
logicb_t
));

353 
sdisk
->
tŸÆ_ãmp_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
sdev
->sdisk.
£˘‹s
 >> (sdev->
logicb_shi·
 - 9)Ë* (
u8
));

355 i‡(
	`sh™n⁄_Æloc_m≠_èbÀ
(&
sdev
->
sdisk
, sdev->sdisk.
£˘‹s
, sdev->
logicb_shi·
)) {

356 
	`sh™n⁄_îr
("cannotállocateÉnough memory for map_table!\n");

360 
	`sh™n⁄_m≠_èbÀ_˛ór
(&
sdisk
->
Õmt_¨øy
[0]);

362 
	`sdev_m≠_èbÀ_íabÀ
(
sdev
);

363 
	`sdisk_vÆid_logicbs_˛ór
(&
sdev
->
sdisk
);

364 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


365 
	`ïûog_cdev_öô
(
sdev
);

368 
	`comm™d_cdev_ªÀa£
(
sdev
);

369 
	`com∂ëi⁄_cdev_ªÀa£
(
sdev
);

370 
	`pba_èbÀ_cdev_ªÀa£
(
sdev
);

371 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

372 i‡(!
sdev
->
lun
[
i
]->
pba_èbÀ
)

374 
	`sh™n⁄_mem£t
(
sdev
->
lun
[
i
]->
pba_èbÀ
, 
ALL_STALE
, sdev->
pba_èbÀ_size
);

376 
	`pba_èbÀ_cdev_öô
(
sdev
, sdev->
pba_èbÀ_size
);

377 
	`comm™d_cdev_öô
(
sdev
);

378 
	`com∂ëi⁄_cdev_öô
(
sdev
);

380 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

381 
œ°_sb_d⁄e
[0] = 1;

382 
œ°_sb_d⁄e
[1] = 1;

383 
cuºít_°rùe_∑ge
[0] = -1;

384 
cuºít_°rùe_∑ge
[1] = -1;

385 
	`•ö_lock_öô
(&
∑rôy_buf_lock
[0]);

386 
	`•ö_lock_öô
(&
∑rôy_buf_lock
[1]);

387 
	`öô_waôqueue_hód
(&
sb_d⁄e_evít
[0]);

388 
	`öô_waôqueue_hód
(&
sb_d⁄e_evít
[1]);

389 
	`©omic_£t
(&
ªmaöög_°rùe_∑ges
[0], 0);

390 
	`©omic_£t
(&
ªmaöög_°rùe_∑ges
[1], 0);

391 
	`©omic_£t
(&
ªmaöög_∑ges
[0], 0xffffffff);

392 
	`©omic_£t
(&
ªmaöög_∑ges
[1], 0xffffffff);

393 
	`öô_waôqueue_hód
(&
wrôe_d⁄e_evít
[0]);

394 
	`öô_waôqueue_hód
(&
wrôe_d⁄e_evít
[1]);

395 
	`öô_waôqueue_hód
(&
œ°_∑rôy_d⁄e_evít
[0]);

396 
	`öô_waôqueue_hód
(&
œ°_∑rôy_d⁄e_evít
[1]);

399 
	`sh™n⁄_mem£t
(
sdev
->
dummy_∑ge
, 0, sdev->
«nd_∑ge_size
);

401 
sdev
->
œ°_blk
[
HOT_INDEX
] = 
NULL
;

402 
sdev
->
wr_sb
[
HOT_INDEX
] = sdev->
mbr
.
öô_hŸ_sblk
;

403 
sdev
->
a˘ive_blk_°¨t_jiffõs
[
HOT_INDEX
] = 
	`gë_jiffõs
();

404 
sdev
->
a˘ive_blk
[
HOT_INDEX
] = &sdev->
sbs
[sdev->
wr_sb
[HOT_INDEX]];

405 
	`sh™n⁄_li°_dñ_öô
(&
sdev
->
a˘ive_blk
[
HOT_INDEX
]->
li°
);

406 
sdev
->
‰ì_blk˙t
--;

407 
sdev
->
a˘ive_blk
[
HOT_INDEX
]->
°©e
 = 
a˘ive_blk_°©e
[HOT_INDEX];

408 
sdev
->
a˘ive_blk
[
HOT_INDEX
]->
ïûog
 = 
	`ïûog_Æloc
(sdev->a˘ive_blk[HOT_INDEX]->
ïûog_size
, sdev);

409 i‡(
sdev
->
a˘ive_blk
[
HOT_INDEX
]->
ïûog
 =
NULL
) {

410 
	`sh™n⁄_w¨n
("Can'tállocateÉnough memory forÉpilog.\n");

413 
sb
 = 
sdev
->
a˘ive_blk
[
HOT_INDEX
];

414 
	`sh™n⁄_mem_wrôew
(
HOT_INDEX
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
);

415 
sb
->
hód_ödex
 = 
HOT_INDEX
;

416 
sdev
->
wr_group
[
HOT_INDEX
] = 0;

417 
sdev
->
lun_ö_group
[
HOT_INDEX
] = 0;

418 
sdev
->
wr_lun_off£t
[
HOT_INDEX
] = 
sb
->
sub_group
[0].
fú°_lun_off£t
;

419 
sdev
->
wr_chunk
[
HOT_INDEX
] = sdev->
wr_∂™e
[HOT_INDEX] = sdev->
wr_∑ge
[HOT_INDEX] = sdev->
wr_logicb
[HOT_INDEX] = 0;

420 i‡(
sdev
->
øid5_suµ‹ãd
)

421 
	`∑rôy_öô
(
sb
, 
sdev
->
wr_group
[
HOT_INDEX
], sdev->
wr_sb
[HOT_INDEX] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
, 
HOT_HEAD
);

422 
sdev
->
chunk_ªq
[
HOT_INDEX
] = 
NULL
;

423 
sdev
->
chunk_ªq˙t
[
HOT_INDEX
] = 0;

425 i‡(
sdev
->
u£_duÆ_hód
) {

426 
sdev
->
œ°_blk
[
COLD_INDEX
] = 
NULL
;

427 
sdev
->
wr_sb
[
COLD_INDEX
] = sdev->
mbr
.
öô_cﬁd_sblk
;

428 
sdev
->
a˘ive_blk_°¨t_jiffõs
[
COLD_INDEX
] = 
	`gë_jiffõs
();

429 
sdev
->
a˘ive_blk
[
COLD_INDEX
] = &sdev->
sbs
[sdev->
wr_sb
[COLD_INDEX]];

430 
	`sh™n⁄_li°_dñ_öô
(&
sdev
->
a˘ive_blk
[
COLD_INDEX
]->
li°
);

431 
sdev
->
‰ì_blk˙t
--;

432 
sdev
->
a˘ive_blk
[
COLD_INDEX
]->
°©e
 = 
a˘ive_blk_°©e
[COLD_INDEX];

433 
sdev
->
a˘ive_blk
[
COLD_INDEX
]->
ïûog
 = 
	`ïûog_Æloc
(sdev->a˘ive_blk[COLD_INDEX]->
ïûog_size
, sdev);

434 i‡(
sdev
->
a˘ive_blk
[
COLD_INDEX
]->
ïûog
 =
NULL
) {

435 
	`sh™n⁄_w¨n
("Can'tállocateÉnough memory forÉpilog.\n");

438 
sb
 = 
sdev
->
a˘ive_blk
[
COLD_INDEX
];

439 
	`sh™n⁄_mem_wrôew
(
COLD_INDEX
, &
sb
->
ïûog
->
ïûog_hód
->
hód
.
hód_ödex
);

440 
sb
->
hód_ödex
 = 
COLD_INDEX
;

441 
sdev
->
wr_group
[
COLD_INDEX
] = 0;

442 
sdev
->
lun_ö_group
[
COLD_INDEX
] = 0;

443 
sdev
->
wr_lun_off£t
[
COLD_INDEX
] = 
sb
->
sub_group
[0].
fú°_lun_off£t
;

444 
sdev
->
wr_chunk
[
COLD_INDEX
] = sdev->
wr_∂™e
[COLD_INDEX] = sdev->
wr_∑ge
[COLD_INDEX] = sdev->
wr_logicb
[COLD_INDEX] = 0;

445 i‡(
sdev
->
øid5_suµ‹ãd
)

446 
	`∑rôy_öô
(
sb
, 
sdev
->
wr_group
[
COLD_INDEX
], sdev->
wr_sb
[COLD_INDEX] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
, 
COLD_HEAD
);

448 
sdev
->
chunk_ªq
[
COLD_INDEX
] = 
NULL
;

449 
sdev
->
chunk_ªq˙t
[
COLD_INDEX
] = 0;

451 
sdev
->
œ°_blk
[
COLD_INDEX
] = 
NULL
;

452 
sdev
->
wr_sb
[
COLD_INDEX
] = -1;

453 
sdev
->
a˘ive_blk
[
COLD_INDEX
] = 
NULL
;

454 
sdev
->
wr_group
[
COLD_INDEX
] = 0;

455 
sdev
->
lun_ö_group
[
COLD_INDEX
] = 0;

458 
	`sh™n⁄_©omic_add
(
	`sh™n⁄_©omic_ªad
(&
sdev
->
dy«mic_bad_blk˙t
), &sdev->
°©ic_bad_blk˙t
);

459 
	`sh™n⁄_©omic_£t
(&
sdev
->
dy«mic_bad_blk˙t
, 0);

463 
	}
}

465 
wrôe_n‹_bad_block
(
sh™n⁄_dev
 *
sdev
, 
bad_block
 *bad_block, 
blk_cou¡
);

466 
check_gc_n‹_block
(
sh™n⁄_dev
 *
sdev
);

467 
	$îa£_su≥r_block_quõt_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

469 
sh™n⁄_sb
 *
p
, *
sb
 = 
sbio
->
d©a
;

470 
sh™n⁄_dev
 *
dev
 = 
sb
->
sdev
;

471 
sh™n⁄_ªque°
 *
ªq
;

472 
ﬁd_ª˛aim_köd
 = 
sb
->
ª˛aim_köd
;

473 
mis£d
 = 0;

475 i‡(
ﬁd_ª˛aim_köd
 & (1 << 
ERROR_SB_SHIFT
)) {

476 
lun
, 
∂™e
, 
bad_eblk
;

477 
bad_block
 *bad_block = 
NULL
;

478 
blk_cou¡
 = 0;

480 
	`sh™n⁄_öfo
("%s:Ñe˛aim sb %d,Ñe˛aim köd=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
ERROR_SB_SHIFT
);

482 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

483 i‡(
dev
->
n‹_bbt_°©e
 == 0)

484 
bad_block
 = (bad_block *)
	`Æloc_logicb_buf
(
dev
, 
GFP_SHANNON
);

486 
	`sh™n⁄_öfo
("ˇ¬ŸÑec‹d badblock†tÿbbt: sb_ödex=%d,Ç‹_bbt_°©e=%d.\n", 
sb
->
sb_ödex
, 
dev
->
n‹_bbt_°©e
);

489 
lun
 = 0;Üu¿< 
dev
->
lun_cou¡
;Üun++) {

490 
∂™e
 = 0;Öœ√ < 
dev
->
∂™es
;Ölane++) {

491 i‡(
	`is_îr‹_lun
(
dev
, 
sb
, 
lun
, 
∂™e
)) {

492 
bad_eblk
 = 
sb
->
sb_ödex
 * 
dev
->
∂™es
 + 
∂™e
;

493 
	`sh™n⁄_öfo
("sb=%d,Üun=%d,Öœ√=%d.\n", 
sb
->
sb_ödex
, 
lun
, 
∂™e
);

494 
	`sb_m¨k_bad_lun
(
sb
, 
lun
);

495 i‡(
	`add_bad_eblk_to_lun_bbt
(
dev
->
lun
[lun], 
bad_eblk
) == 0) {

496 
	`sh™n⁄_©omic_öc
(&
dev
->
dy«mic_bad_blk˙t
);

497 
	`sh™n⁄_©omic_öc
(&
dev
->
lun
[lun]->
dy«mic_bad_blk˙t
);

499 i‡(
dev
->
îr_check_debug
)

500 
	`sh™n⁄_öfo
("dy«mi¯bad block: %s:lun=%d,Éblk=%d.\n", 
dev
->
sdisk
.
disk_«me
, dev->
lun
[lun]->
lun_num
, 
bad_eblk
);

502 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

503 i‡(
bad_block
) {

504 
bad_block
[
blk_cou¡
].
lun
 = (
dev
->lun[lun]->
lun_num
 & ((1 << 8) - 1));

505 i‡(
dev
->
p£udo_∂™e
)

506 
bad_block
[
blk_cou¡
++].
block
 = \

507 ((!!(
dev
->
lun
[lun]->
lun_num
 & (1 << 8)Ë<< 15Ë| (
bad_eblk
 / dev->
∂™es
));

509 
bad_block
[
blk_cou¡
++].
block
 = \

510 ((!!(
dev
->
lun
[lun]->
lun_num
 & (1 << 8)Ë<< 15Ë| 
bad_eblk
);

511 } i‡(
mis£d
 == 0)

512 
mis£d
 = 1;

515 
	`sb_˛ór_îr‹_lun
(
dev
, 
sb
, 
lun
, 
∂™e
);

520 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

521 i‡(
blk_cou¡
) {

522 
	`sh™n⁄_muãx_lock
(&
dev
->
wrôe_bbt_£m
);

523 i‡(
	`wrôe_n‹_bad_block
(
dev
, 
bad_block
, 
blk_cou¡
)) {

524 
	`sh™n⁄_îr
("ÁûedÅÿwrôêbad blocks: sb_ödex=%d.\n", 
sb
->
sb_ödex
);

525 
mis£d
 = 1;

528 
	`check_gc_n‹_block
(
dev
);

530 i‡(
dev
->
n‹_bbt_°©e
) {

531 
	`sh™n⁄_w¨n
("nÿ•a˚ f‹Ç‹Êash bbt, bbt_°©e=%d.\n", 
dev
->
n‹_bbt_°©e
);

532 
	`sh™n⁄_£t_bô
(
SHN_REASON_BBT_NO_SPACE
, &
dev
->
ªad⁄ly_ªas⁄
);

535 
	`sh™n⁄_muãx_u∆ock
(&
dev
->
wrôe_bbt_£m
);

538 i‡(
bad_block
)

539 
	`‰ì_logicb_buf
(
dev
, 
bad_block
);

542 i‡(
sb
->
sb_ödex
 >
dev
->
mbr_eblocks
/dev->
∂™es
)

543 
	`sh™n⁄_©omic_dec
(&
dev
->
≥ndög_îr_blks
);

546 
dev
->
tŸÆ_îa£_cou¡
++;

548 i‡(
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_groups
Ë< 
dev
->
max_avaûabÀ_groups
) {

549 
sb
->
°©e
 = 
DISCARDED_BLOCK
;

550 
	`sh™n⁄_©omic_öc
(&
dev
->
disˇrded_blk˙t
);

552 
	`m¨k_su≥r_block_bad
(
sb
);

553 
out
;

556 
	`add_sb_îa£_cou¡î
(
dev
, 
sb
);

557 
	`ªöôülize_sb
(
dev
, 
sb
);

558 
sb
->
œ°_îa£d_time°amp
 = 
	`gë_jiffõs
();

560 i‡(
sb
->
sb_ödex
 < 
dev
->
mbr_eblocks
/dev->
∂™es
) {

561 
sb
->
°©e
 = 
MBR_BLOCK
;

562 
sb
->
wr_off£t
 = ~0;

563 
out
;

566 i‡(
	`sh™n⁄_dev_is_g5
(
dev
Ë&& 
mis£d
)

567 
out
;

569 
	`sh™n⁄_•ö_lock_bh
(&
sb
->
sdev
->
‰ì_blocks_lock
);

570 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
dev
->
‰ì_blocks
, 
li°
) {

571 i‡(
p
->
îa£_cou¡î
 > 
sb
->erase_counter)

574 
	`sh™n⁄_li°_add_èû
(&
sb
->
li°
, &
p
->list);

576 
sb
->
sdev
->
‰ì_blk˙t
++;

577 
	`sh™n⁄_•ö_u∆ock_bh
(&
sb
->
sdev
->
‰ì_blocks_lock
);

579 
out
:

580 !
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
)) {

581 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

582 
	`BUG_ON
(
ªq
->
sbio
 != sbio);

583 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

584 
	`‰ì_ªq
(
ªq
);

587 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
dev
->
îa£_d⁄e
))

588 
	`sh™n⁄_wake_up
(&
dev
->
îa£_d⁄e_evít
);

590 
	`‰ì_sbio
(
sbio
);

591 
	}
}

593 
	$îa£_su≥r_block_quõt
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
)

595 
i
, 
∂™e
;

596 
sh™n⁄_bio
 *
sbio
;

597 
sh™n⁄_ªque°
 *
ªq
, *
p
;

600 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

601 
	`£t_sbio_debug_èg
(
sbio
, 
ERASE_BLOCK_TAG
);

602 
sbio
->
logicbs
 = 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
Ë* 
dev
->
∂™es
;

603 i‡(
dev
->
p£udo_∂™e
)

604 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
));

606 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
	`sh™n⁄_©omic_ªad
(&
sb
->
avaûabÀ_luns
Ë* 
dev
->
∂™es
);

607 
sbio
->
ˇŒback
 = 
îa£_su≥r_block_quõt_ˇŒback
;

608 
sbio
->
d©a
 = 
sb
;

609 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

611 
	`sh™n⁄_©omic_öc
(&
dev
->
îa£_d⁄e
);

613 
i
=0; i<
dev
->
lun_cou¡
; i++) {

614 i‡(!
	`is_bad_lun
(
sb
, 
i
)) {

615 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

616 
	`£t_ªq_debug_èg
(
ªq
, 
ERASE_BLOCK_TAG
, 0);

617 
ªq
->
›code
 = 
sh_cmd_îa£
;

618 
ªq
->
pba
.
lun
 = 
i
;

619 
ªq
->
µa
 = 
sb
->
sb_ödex
 * 
dev
->
∑ges_ö_eblock
 * dev->
∂™es
;

620 
ªq
->
lba
 = 
LONG_INVALID_LBA
;

621 
ªq
->
sbio
 = sbio;

622 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

623 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

625 i‡(!
dev
->
p£udo_∂™e
) {

626 
∂™e
 = 1;

627 
∂™e
 < 
dev
->
∂™es
) {

628 
p
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

629 
	`£t_ªq_debug_èg
(
p
, 
ERASE_BLOCK_TAG
, 
∂™e
);

630 
p
->
›code
 = 
sh_cmd_îa£
;

631 
p
->
pba
.
lun
 = 
i
;

632 
p
->
µa
 = 
ªq
->µ®+ 
dev
->
∑ges_ö_eblock
 * 
∂™e
;

633 
p
->
lba
 = 
LONG_INVALID_LBA
;

634 
p
->
sbio
 = sbio;

635 
	`sh™n⁄_li°_add_èû
(&
p
->
bio_li°
, &
sbio
->
ªq_li°
);

636 
	`sh™n⁄_li°_add_èû
(&
p
->
chunk_li°
, &
ªq
->chunk_list);

638 
∂™e
++;

641 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªq_queue_lock
[0]);

642 
	`sh™n⁄_li°_add
(&
ªq
->
li°
, &
dev
->
ªq_queue
[0]);

643 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªq_queue_lock
[0]);

644 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
w‹k
);

647 
	}
}

649 
¥ï¨e_ovîœp_pba
(
sh™n⁄_dev
 *
sdev
);

650 
√xt_ovîœp_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
°¨t_lun
);

656 
	$ªf‹m©
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_f‹m©_¨g2
 *
Árg
)

658 
sh™n⁄_sb
 *
sb
;

659 
i
, 
b
;

661 
	`sh™n⁄_öfo
("%s: sèπÑef‹m© d⁄e.\n", 
sdev
->
sdisk
.
disk_«me
);

663 
sdev
->
ho°_ac˚ss_blocked
 = 1;

665 i‡(
sdev
->
¥e„tch_thªad
) {

666 
	`£t_¥e„tch_dißbÀ
(&
sdev
->
sdisk
.
¥e„tch
);

667 
	`sh™n⁄_kthªad_°›
(
sdev
->
¥e„tch_thªad
);

668 
sdev
->
¥e„tch_thªad
 = 
NULL
;

670 i‡(
sdev
->
ªcovî_thªad
) {

671 
	`sh™n⁄_kthªad_°›
(
sdev
->
ªcovî_thªad
);

672 
sdev
->
ªcovî_thªad
 = 
NULL
;

673 
sdev
->
this_îr_sb
 = 
NULL
;

674 
sdev
->
this_îr_sb_ödex
 = ~0;

675 
sdev
->
this_îr_°rùe
 = 0;

677 i‡(
sdev
->
gc_thªad
) {

678 
	`sh™n⁄_kthªad_°›
(
sdev
->
gc_thªad
);

679 
sdev
->
gc_thªad
 = 
NULL
;

680 
sdev
->
gc_thªad_°©e
 = 
NO_RECLAIM
;

682 
	`sh™n⁄_¥e„tch_de°roy
(&
sdev
->
sdisk
.
¥e„tch
);

684 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
gc_timî
);

685 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
bÆ™˚_gc_timî
);

686 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
wl_timî
);

687 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++)

688 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_sb_timî
[
i
]);

689 #ifde‡
SHANNON_USE_WRITE_BUFFER


690 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++)

691 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_chunk_timî
[
i
]);

693 
	`døö_comm™d_queue
(
sdev
, 0);

694 #ifde‡
SHANNON_USE_WRITE_BUFFER


695 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

696 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_chunk_timî
[
i
]);

697 
sdev
->
chunk_°¨t_jiffõs
[
i
] = 0;

700 
	`debugs1
("reformat step 1: flushállÖending work done.\n");

703 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

704 i‡(
sdev
->
lun
[
i
]->
bad
) {

705 
sdev
->
max_avaûabÀ_luns
--;

706 
b
 = 0; b < 
sdev
->
sb_cou¡
; b++)

707 
	`sb_m¨k_bad_lun
(
sdev
->
sbs
 + 
b
, 
i
);

709 
sdev
->
‰ì_blk˙t
 = 0;

710 
i
 = 
sdev
->
sb_cou¡
 - 1; i >sdev->
mbr_eblocks
 / sdev->
∂™es
; i--) {

711 
sb
 = 
sdev
->
sbs
 + 
i
;

712 i‡(
sdev
->
sbs
[
i
].
°©e
 !
DISCARDED_BLOCK
) {

717 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
sbs
[
i
].
lock
);

720 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

721 
	`sh™n⁄_li°_dñ_öô
(&
sdev
->
sbs
[
i
].
li°
);

722 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

723 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
sbs
[
i
].
lock
);

724 i‡(
sb
->
ïûog
)

725 
	`sb_‰ì_ïûog
(
sb
);

726 #ifde‡
CONFIG_SHANNON_DEBUG


727 i‡(
sb
->
gc_°©e
 !
NULL
)

728 
	`ªmove_‰om_gc_°©e_li°
(
sb
);

730 
sb
->
°©e
 = 
WAIT_ERASE_BLOCK
;

731 
	`îa£_su≥r_block_quõt
(
sdev
, &sdev->
sbs
[
i
]);

734 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_VALID
;

737 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
îa£_d⁄e_evít
, 
	`sh™n⁄_©omic_ªad
(&sdev->
îa£_d⁄e
) == 0);

738 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
îa£_d⁄e
) == 0)

740 } (
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
) == 0);

742 i‡(
	`u∆ikñy
(
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
))

745 
sdev
->
u£d_blk˙t
[
HOT_INDEX
] = 0;

746 
sdev
->
u£d_blk˙t
[
COLD_INDEX
] = 0;

747 
sdev
->
waô_îa£d_blk˙t
 = 0;

748 
sdev
->
waô_c›y_blk˙t
 = 0;

749 
sdev
->
waô_wl_blk˙t
 = 0;

750 
sdev
->
îr_blk˙t
 = 0;

751 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
u£d_blocks
[
HOT_INDEX
]);

752 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
u£d_blocks
[
COLD_INDEX
]);

753 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_îa£d
);

754 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_c›y
);

755 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_wl_li°
);

756 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
îr_blks
);

757 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_gc_blk˙t
, 0);

758 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_wl_blk˙t
, 0);

759 
sdev
->
this_sb
 = 
NULL
;

760 
sdev
->
this_∑ge_°rùe
 = 0;

761 
sdev
->
this_lun
 = 0;

762 
sdev
->
exåa_ªqs
 = 0;

763 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_ªqs_f‹_gc
, 0);

764 
sdev
->
wl_this_sb
 = 
NULL
;

766 
	`debugs1
("reformat step 2:Éraseáll superblocks done.\n");

768 
	`sh™n⁄_muãx_lock
(&
sdev
->
modify_mbr_£m
);

770 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++)

771 i‡(
sdev
->
lun
[
i
]->
bad
)

772 
	`sh™n⁄_£t_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, sdev->
mbr
.
bad_phy_lun_m≠
);

774 i‡(
Árg
->
ˇ∑côy
)

775 
sdev
->
mbr
.
ˇ∑côy
 = 
Árg
->capacity;

776 i‡(
Árg
->
u£r_logicb_shi·
)

777 
sdev
->
mbr
.
u£r_logicb_shi·
 = 
Árg
->user_logicb_shift;

779 i‡(
Árg
->
Êags
 & (1 << 
PRIO_WRITE_SHIFT
))

780 
sdev
->
mbr
.
„©uª_Êags
 |
PRIORITIZE_WRITE
;

782 
sdev
->
mbr
.
„©uª_Êags
 &~
PRIORITIZE_WRITE
;

783 i‡(
Árg
->
Êags
 & (1 << 
ATOMIC_WRITE_SHIFT
))

784 
sdev
->
mbr
.
„©uª_Êags
 |
ATOMIC_WRITE
;

786 
sdev
->
mbr
.
„©uª_Êags
 &~
ATOMIC_WRITE
;

787 i‡(
Árg
->
Êags
 & (1 << 
SET_WRITE_BW_SHIFT
)) {

788 
sdev
->
mbr
.
max_wrôe_bw
 = 
Árg
->max_write_bw;

789 i‡(
Árg
->
limô_bw_whí_diskfuŒ
)

790 
sdev
->
mbr
.
„©uª_Êags
 |
LIMIT_BW_WHEN_DISKFULL
;

794 i‡(!(
Árg
->
Êags
 & (1UL << 
KEEP_MBR_PARAS_SHIFT
))) {

795 
sdev
->
mbr
.
„©uª_Êags
 |
BIG_EPILOG
;

796 
sdev
->
lba_f‹m©
 = 
LONG_LBA_FORMAT
;

797 
sdev
->
mbr
.
„©uª_Êags
 |
COMPACT_EPILOG
;

798 
sdev
->
com∑˘_ïûog
 = 1;

801 i‡(
sdev
->
‰ì_blk˙t
 < 2) {

802 
	`sh™n⁄_îr
("‰ì block cou¡=%d.\n", 
sdev
->
‰ì_blk˙t
);

806 
sdev
->
mbr
.
öô_hŸ_sblk
 = sdev->
mbr_eblocks
/sdev->
∂™es
;

807 
sdev
->
mbr
.
öô_cﬁd_sblk
 = sdev->
sb_cou¡
 - 1;

808 
sdev
->
mbr
.
öô_hŸ_sblk
 < sdev->
sb_cou¡
 && sdev->
sbs
[sdev->mbr.öô_hŸ_sblk].
°©e
 =
DISCARDED_BLOCK
)

809 
sdev
->
mbr
.
öô_hŸ_sblk
++;

810 
sdev
->
mbr
.
öô_cﬁd_sblk
 >0 && sdev->
sbs
[sdev->mbr.öô_cﬁd_sblk].
°©e
 =
DISCARDED_BLOCK
)

811 
sdev
->
mbr
.
öô_cﬁd_sblk
--;

813 i‡(
Árg
->
Êags
 & (1 << 
OVERLAP_WRITE_SHIFT
)) {

814 
sh™n⁄_sb
 *
ovîœp_sb
 = 
NULL
;

816 
sdev
->
mbr
.
„©uª_Êags
 |
OVERLAP_WRITE
;

817 
sdev
->
mbr
.
ovîœp_sblk
 = sdev->mbr.
öô_cﬁd_sblk
 - 1;

818 
sdev
->
mbr
.
ovîœp_sblk
 < sdev->
sb_cou¡
 && sdev->
sbs
[sdev->mbr.ovîœp_sblk].
°©e
 =
DISCARDED_BLOCK
)

819 
sdev
->
mbr
.
ovîœp_sblk
--;

821 i‡(
sdev
->
mbr
.
ovîœp_sblk
 =sdev->mbr.
öô_hŸ_sblk
 || sdev->mbr.ovîœp_sblk =sdev->mbr.
öô_cﬁd_sblk
)

824 
sdev
->
ovîœp_wrôe
 = 1;

825 i‡(
sdev
->
ovîœp
 =
NULL
) {

826 
sdev
->
ovîœp
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_ovîœp
), 
GFP_SHANNON
);

827 i‡(
sdev
->
ovîœp
 =
NULL
) {

828 
	`sh™n⁄_îr
("failedÅoállocate memory for overlap.\n");

831 
	`sh™n⁄_mem£t
(
sdev
->
ovîœp
, 0, (
sh™n⁄_ovîœp
));

832 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
ovîœp
->
waô_ovîœp_evít
);

835 
ovîœp_sb
 = 
sdev
->
sbs
 + sdev->
mbr
.
ovîœp_sblk
;

836 
	`sh™n⁄_•ö_lock_bh
(&
ovîœp_sb
->
lock
);

837 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
‰ì_blocks_lock
);

838 
	`sh™n⁄_li°_dñ_öô
(&
ovîœp_sb
->
li°
);

839 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
‰ì_blocks_lock
);

840 
ovîœp_sb
->
°©e
 = 
OVERLAP_BLOCK
;

841 
ovîœp_sb
->
£q_num
 = 
MAX_SEQ_NUM
;

842 
ovîœp_sb
->
hód_ödex
 = 
OVERLAP_INDEX
;

843 
	`sh™n⁄_•ö_u∆ock_bh
(&
ovîœp_sb
->
lock
);

845 
sdev
->
ovîœp
->
wr_lun
 = 
	`√xt_ovîœp_lun
(sdev, sdev->
sbs
 + sdev->
mbr
.
ovîœp_sblk
, 0);

846 
sdev
->
ovîœp
->
wr_chunk
 = 0;

847 
sdev
->
ovîœp
->
wr_∑ge
 = 0;

848 
sdev
->
ovîœp
->
wr_logicb
 = 0;

849 
sdev
->
ovîœp
->
wr_∂™e
 = 0;

850 
sdev
->
ovîœp
->
_mëad©a
 = 
övÆid_mëad©a
[sdev->
lba_f‹m©
];

851 
sdev
->
ovîœp
->
buf„d_mëad©a
 = 
övÆid_mëad©a
[sdev->
lba_f‹m©
];

853 
sdev
->
mbr
.
„©uª_Êags
 &~
OVERLAP_WRITE
;

854 
sdev
->
ovîœp_wrôe
 = 0;

859 
	`upd©e_îa£_cou¡
(
sdev
);

860 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

861 i‡(
Árg
->
Êags
 & (1 << 
CLEAR_ERASE_COUNT_SHIFT
)) {

862 
	`debugs0
("Áked hi°‹y_îa£_cou¡=%d.\n", 
Árg
->
îa£_cou¡
);

863 
sdev
->
mbr
.
hi°‹y_îa£_cou¡
 = 
Árg
->
îa£_cou¡
;

864 
sdev
->
tŸÆ_îa£_cou¡
 = 0;

865 
i
 = 
sdev
->
mbr_eblocks
/sdev->
∂™es
; i < sdev->
sb_cou¡
; i++) {

866 
sb
 = 
sdev
->
sbs
 + 
i
;

867 
sb
->
îa£_cou¡î
 = 
sdev
->
mbr
.
hi°‹y_îa£_cou¡
;

868 
sdev
->
tŸÆ_îa£_cou¡
 +
sb
->
îa£_cou¡î
;

871 
sdev
->
mbr
.
hi°‹y_îa£_cou¡
 = sdev->
avîage_îa£_cou¡
;

872 
sdev
->
mbr
.
powî_⁄_£c⁄ds
 = sdev->power_on_seconds;

873 
sdev
->
mbr
.
powî_cy˛e_cou¡
 = sdev->power_cycle_count;

874 
sdev
->
mbr
.
ho°_wrôe_£˘‹s
 = sdev->host_write_sectors;

875 
sdev
->
mbr
.
tŸÆ_wrôe_£˘‹s
 = sdev->total_write_sectors;

876 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

877 
sdev
->
mbr
.
ho°_ªad_£˘‹s
 = sdev->host_read_sectors;

878 i‡((
sdev
->
mbr
.
„©uª_Êags
 & (
BIG_EPILOG
 | 
COMPACT_EPILOG
)Ë&& !(
Árg
->
Êags
 & (1UL << 
KEEP_MBR_PARAS_SHIFT
)))

879 
sdev
->
mbr
.
mbr_f‹m©_vîsi⁄
 = 
CURRENT_MBR_FORMAT_VERSION
;

880 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
modify_mbr_£m
);

882 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_REFRESH_MBR
;

883 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

884 i‡(
sdev
->
mbr
.
poﬁ_w©îm¨k
) {

885 i‡(
	`upd©e_poﬁ_öfo_g5
(
sdev
, 0) < 0) {

886 
	`sh™n⁄_îr
("upd©êpoﬁ infÿf‹ %†Áûed.\n", 
sdev
->
cdev_«me
);

890 i‡(
	`upd©e_poﬁ_öfo_g5
(
sdev
, 1) < 0) {

891 
	`sh™n⁄_îr
("˛ó¿poﬁ infÿf‹ %†Áûed.\n", 
sdev
->
cdev_«me
);

896 i‡(
	`ª‰esh_mbr_f‹_sdev_sync
(
sdev
)) {

897 
	`sh™n⁄_îr
("ª‰esh mb∏f‹ %†Áûed.\n", 
sdev
->
cdev_«me
);

901 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

902 
	`debugs1
("reformat step 3: write mbr done.\n");

905 
sdev
->
sdev_id
 = sdev->
mbr
.sdev_id;

906 
sdev
->
sdisk
.
£˘‹s
 = sdev->
mbr
.
ˇ∑côy
;

907 
sdev
->
p£udo_∂™e
 = sdev->
mbr
.pseudo_plane;

908 i‡(
sdev
->
mbr
.
∂™e_cou¡
)

909 
sdev
->
∂™es
 = sdev->
mbr
.
∂™e_cou¡
;

911 
sdev
->
∂™es
 = 1 << sdev->
mbr
.
∂™e_‹dî
;

912 i‡(
sdev
->
mbr
.
sh¨ed_∑ges
)

913 
sdev
->
sh¨ed_∑ges
 = sdev->
mbr
.shared_pages;

914 i‡(
sdev
->
mbr
.
dummy_w‹dlöe
)

915 
sdev
->
dummy_w‹dlöe
 = sdev->
mbr
.dummy_wordline;

916 i‡(
sdev
->
mbr
.
p£udo_∂™e
)

917 
sdev
->
eblocks_ö_lun
 = sdev->
mbr
.eblocks_ö_lu¿* sdev->
∂™es
;

919 
sdev
->
eblocks_ö_lun
 = sdev->
mbr
.eblocks_in_lun;

920 
sdev
->
∑ges_ö_eblock
 = sdev->
mbr
.pages_in_eblock;

921 
sdev
->
«nd_∑ge_shi·
 = sdev->
mbr
.nand_page_shift;

922 
sdev
->
oob_size
 = sdev->
mbr
.oob_size;

923 
sdev
->
logicb_shi·
 = sdev->
mbr
.logicb_shift;

924 
sdev
->
u£r_logicb_shi·
 = sdev->
mbr
.user_logicb_shift;

925 
sdev
->
∂™e_‹dî
 = sdev->
mbr
.plane_order;

926 
sdev
->
öãºu±_dñay
 = sdev->
mbr
.interrupt_delay;

927 
sdev
->
cfg_ch™√ls
 = sdev->
mbr
.cfg_channels;

928 
sdev
->
cfg_lun£t_ö_ch™√l
 = sdev->
mbr
.cfg_lunset_in_channel;

929 
sdev
->
cfg_lun_ö_lun£t
 = sdev->
mbr
.cfg_lun_in_lunset;

930 
sdev
->
¥i‹ôize_wrôe
 = sdev->
mbr
.
„©uª_Êags
 & 
PRIORITIZE_WRITE
;

931 
sdev
->
©omic_wrôe
 = sdev->
mbr
.
„©uª_Êags
 & 
ATOMIC_WRITE
;

932 
sdev
->
max_wrôe_bw
 = 1024*1024ULL * sdev->
mbr
.max_write_bw;

933 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_bw
, 0);

934 
	`ˇlcuœã_globÆ_v¨übÀ
(
sdev
);

935 
sdev
->
ovî¥ovisi⁄_øã
 = 
	`ˇlcuœã_ovî¥ovisi⁄_øã
(sdev);

936 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

937 
i
 = 0; i < 
emu_lun_amou¡
; i++) {

938 
emu_luns
[
i
].
logicb_size
 = 
sdev
->logicb_size;

939 
emu_luns
[
i
].
logicb_shi·
 = 
sdev
->logicb_shift;

940 
emu_luns
[
i
].
logicbs_ö_∑ge
 = 
sdev
->logicbs_in_page;

943 
	`ª£t_hw_c⁄åﬁÀr
(
sdev
);

944 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

945 
	`sh™n⁄_£t_˘æ_∑øm
(
sdev
);

947 
	`öô_globÆ_c⁄fig_ªgs
(
sdev
);

948 
	`£t_avaûabÀ_øid_°rùes
(
sdev
);

949 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

950 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

951 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
sq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr0
);

952 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
sq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr1
);

953 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
cq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr0
);

954 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
cq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr1
);

955 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 0;

956 
sdev
->
lun£ts
[
i
].
sq_hód
 = 0;

957 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = 0;

958 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 0;

959 
sdev
->
lun£ts
[
i
].
cq_hód
 = 0;

960 
sdev
->
lun£ts
[
i
].
cq_èû
 = 0;

961 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = 0;

963 #ifde‡
SHANNON_USE_WRITE_BUFFER


964 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

965 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[
i
], &sdev->
bufq_b¨
[i]->
sq_dma_addr0
);

966 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[
i
] >> 32Ë: 0, &sdev->
bufq_b¨
[i]->
sq_dma_addr1
);

967 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[
i
], &sdev->
bufq_b¨
[i]->
cq_dma_addr0
);

968 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[
i
] >> 32Ë: 0, &sdev->
bufq_b¨
[i]->
cq_dma_addr1
);

969 
sdev
->
bufq_sq_hw_hód
[
i
] = 0;

970 
sdev
->
bufq_sq_hód
[
i
] = 0;

971 
sdev
->
bufq_sq_hód_tmp
[
i
] = 0;

972 
sdev
->
bufq_cq_hw_hód
[
i
] = 0;

973 
sdev
->
bufq_cq_hód
[
i
] = 0;

974 
sdev
->
bufq_cq_èû
[
i
] = 0;

976 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_ack_cq_dma_addr
, &sdev->
bufq_ack_b¨
->
cq_dma_addr0
);

977 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_ack_cq_dma_addr
 >> 32Ë: 0, &sdev->
bufq_ack_b¨
->
cq_dma_addr1
);

978 
sdev
->
bufq_ack_cq_hw_hód
 = 0;

979 
sdev
->
bufq_ack_cq_hód
 = 0;

980 
sdev
->
bufq_ack_cq_èû
 = 0;

982 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

983 
	`dump_b¨_•a˚
(
sdev
);

985 
	`debugs1
("reformat step 4:Ñeset hw controlleránd core data structs done.\n");

988 i‡(
	`ª£t_d©a_°ru˘
(
sdev
)) {

989 
	`sh™n⁄_îr
("reset data struct failed.\n");

993 i‡(
sdev
->
ovîœp_wrôe
)

994 
	`¥ï¨e_ovîœp_pba
(
sdev
);

996 i‡(
sh™n⁄_¥e„tch_íabÀ
)

997 
	`sh™n⁄_¥e„tch_öô
(&
sdev
->
sdisk
.
¥e„tch
, sdev->
logicb_size
);

999 
sdev
->
gc_thªad
 = 
	`sh™n⁄_kthªad_run
(
gc_thªad_‚
, sdev, "shn_gc_thªad%c", 'a' + sdev->
drive_no
);

1000 i‡(
	`SHANNON_IS_ERR
(
sdev
->
gc_thªad
))

1001 
	`sh™n⁄_îr
("create garbage collectionÅhread failed!\n");

1002 
sdev
->
ªcovî_thªad
 = 
	`sh™n⁄_kthªad_run
(
ªcovî_thªad_‚
, sdev, "shn_ªcovî/%c", 'a' + sdev->
drive_no
);

1003 i‡(
	`SHANNON_IS_ERR
(
sdev
->
ªcovî_thªad
))

1004 
	`sh™n⁄_îr
("createÑecoverÅhread failed!\n");

1005 
sdev
->
¥e„tch_thªad
 = 
	`sh™n⁄_kthªad_run
(
¥e„tch_thªad_‚
, sdev, "shn_¥e„tch/%c", 'a' + sdev->
drive_no
);

1006 i‡(
	`SHANNON_IS_ERR
(
sdev
->
¥e„tch_thªad
)) {

1007 
	`sh™n⁄_îr
("createÖrefetchÅhread failed!\n");

1008 
	`£t_¥e„tch_dißbÀ
(&
sdev
->
sdisk
.
¥e„tch
);

1010 
	`sh™n⁄_mod_timî
(&
sdev
->
wl_timî
, 
	`gë_jiffõs
(Ë+ sdev->
wl_timî_öãrvÆ
 * 
	`gë_HZ
());

1011 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++)

1012 
	`mod_fûl_sb_timî
(
sdev
, 
i
, sdev->
a˘ive_blk
[i]);

1013 
sdev
->
ho°_ac˚ss_blocked
 = 0;

1014 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1016 
	`≥riod_ªad_íabÀ
(
sdev
);

1018 
	`debugs1
("reformat step 5:Ñenaissance done.\n");

1019 
	`sh™n⁄_öfo
("%s:Ñef‹m© d⁄e.\n", 
sdev
->
sdisk
.
disk_«me
);

1022 
	}
}

1024 
	$˛ór_hi°‹ic_ãm≥øtuª_n_vﬁège
(
sh™n⁄_dev
 *
sdev
)

1026 
sdev
->
ãm≥øtuª_öt_max
 = 0;

1027 
sdev
->
ãm≥øtuª_bﬂrd_max
 = 0;

1028 
sdev
->
ãm≥øtuª_Êash_max
 = 0;

1029 
sdev
->
vﬁège_öt_max
 = 0;

1030 
sdev
->
vﬁège_aux_max
 = 0;

1031 
	}
}

1033 
ölöe
 
	$f‹m©_¨g_to_¨g2
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_f‹m©_¨g
 *
¨g1
, 
sh™n⁄_f‹m©_¨g2
 *
¨g2
)

1035 i‡(
¨g1
->
f‹˚_f‹m©
)

1036 
¨g2
->
Êags
 |1 << 
FORCE_FORMAT_SHIFT
;

1037 i‡(
¨g1
->
˛ór_hi°‹y
)

1038 
¨g2
->
Êags
 |1 << 
CLEAR_HISTORY_SHIFT
;

1039 i‡(0 =
¨g1
->
©omic_wrôe
) {

1040 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
ATOMIC_WRITE
)

1041 
¨g2
->
Êags
 |1 << 
ATOMIC_WRITE_SHIFT
;

1043 i‡(
¨g1
->
©omic_wrôe
 =
SHN_SET_FEATURE
)

1044 
¨g2
->
Êags
 |1 << 
ATOMIC_WRITE_SHIFT
;

1046 i‡(0 =
¨g1
->
¥i‹ôize_wrôe
) {

1047 i‡(
sdev
->
mbr
.
„©uª_Êags
 & 
PRIORITIZE_WRITE
)

1048 
¨g2
->
Êags
 |1 << 
PRIO_WRITE_SHIFT
;

1050 if(
¨g1
->
¥i‹ôize_wrôe
 =
SHN_SET_FEATURE
)

1051 
¨g2
->
Êags
 |1 << 
PRIO_WRITE_SHIFT
;

1054 
¨g2
->
ˇ∑côy
 = 
¨g1
->capacity;

1055 
¨g2
->
u£r_logicb_shi·
 = 
¨g1
->user_logicb_shift;

1056 
	}
}

1058 
	$sh™n⁄_io˘l_n‹Êash_›s
(
sh™n⁄_dev
 *
sdev
, 
cmd
, 
¨g
)

1060 
sh™n⁄_n‹Êash_›s
 
n‹Êash_›s
;

1062 
u8
 *
d©a_buf
 = 
NULL
;

1063 
ªt
 = -
ENOTTY
;

1065 
	`sh™n⁄_mem£t
(&
n‹Êash_›s
, 0xff, (
sh™n⁄_n‹Êash_›s
));

1067 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
n‹Êash_›s
, (
sh™n⁄_n‹Êash_›s
 * 
__u£r
)
¨g
, (shannon_norflash_ops))) {

1068 
	`sh™n⁄_îr
("couldÇot copyÇorflash_ops from userspace.\n");

1069  -
ENOTTY
;

1072 
cmd
) {

1073 
SHANNON_IOCWNORERASE
:

1075 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1076 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

1077 
ªt
 = 0;

1081 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1083 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_NORFLASH_ERASE
;

1084 
ªt
 = 
	`sh™n⁄_n‹Êash_îa£
(
sdev
, 
n‹Êash_›s
.
off£t
,Ç‹Êash_›s.
Àngth
);

1086 i‡(
ªt
) {

1087 
	`sh™n⁄_îr
("%s:Ç‹ÊashÉø£ faûed!\n", 
sdev
->
sdisk
.
disk_«me
);

1088 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1090 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

1092 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1095 
SHANNON_IOCWNORWRITE
:

1096 
d©a_buf
 = 
	`sh™n⁄_vmÆloc
(
n‹Êash_›s
.
Àngth
);

1097 i‡(!
d©a_buf
) {

1098 
	`sh™n⁄_îr
("vmalloc data_buf failed!\n");

1101 
	`sh™n⁄_mem£t
(
d©a_buf
, 0x0, 
n‹Êash_›s
.
Àngth
);

1103 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
d©a_buf
, (
u8
 * 
__u£r
)
n‹Êash_›s
.
d©a
,Ç‹Êash_›s.
Àngth
)) {

1104 
	`sh™n⁄_îr
("couldÇot copy data_buf from userspace.\n");

1108 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1109 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_NORFLASH_WRITE
;

1110 
ªt
 = 
	`n‹Êash_wrôe_ö_4k_mode
(
sdev
, 
n‹Êash_›s
.
off£t
,Ç‹Êash_›s.
Àngth
, 
d©a_buf
);

1112 i‡(
ªt
) {

1113 
	`sh™n⁄_îr
("%s:Ç‹Êash wrôêÁûed!\n", 
sdev
->
sdisk
.
disk_«me
);

1114 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1116 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

1118 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1120 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_NORFLASH_WRITE
;

1121 
ªt
 = 
	`sh™n⁄_n‹Êash_wrôe
(
sdev
, 
n‹Êash_›s
.
off£t
,Ç‹Êash_›s.
Àngth
, 
d©a_buf
);

1123 i‡(
ªt
) {

1124 
	`sh™n⁄_îr
("%s:Ç‹Êash wrôêÁûed!\n", 
sdev
->
sdisk
.
disk_«me
);

1125 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1127 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

1129 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1133 
SHANNON_IOCRNORREAD
:

1134 
d©a_buf
 = 
	`sh™n⁄_vmÆloc
(
n‹Êash_›s
.
Àngth
);

1135 i‡(!
d©a_buf
) {

1136 
	`sh™n⁄_îr
("vmalloc data_buf failed!\n");

1139 
	`sh™n⁄_mem£t
(
d©a_buf
, 0x0, 
n‹Êash_›s
.
Àngth
);

1141 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1143 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_NORFLASH_READ
;

1144 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

1145 
ªt
 = 
	`n‹Êash_ªad_ö_4k_mode
(
sdev
, 
n‹Êash_›s
.
off£t
,Ç‹Êash_›s.
Àngth
, 
d©a_buf
);

1147 
ªt
 = 
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
n‹Êash_›s
.
off£t
,Ç‹Êash_›s.
Àngth
, 
d©a_buf
);

1149 i‡(
ªt
) {

1150 
	`sh™n⁄_îr
("%s:Ç‹ÊashÑód faûed!\n", 
sdev
->
sdisk
.
disk_«me
);

1151 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1153 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_DONE
;

1155 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1157 i‡(
	`sh™n⁄_c›y_to_u£r
((
u8
 * 
__u£r
)
n‹Êash_›s
.
d©a
, 
d©a_buf
,Ç‹Êash_›s.
Àngth
)) {

1158 
	`sh™n⁄_îr
("couldÇot copy data_bufÅo userspace.\n");

1159 
ªt
 = -
ENOTTY
;

1163 
	`sh™n⁄_îr
("wrong ioctl.\n");

1167 i‡(
d©a_buf
)

1168 
	`sh™n⁄_v‰ì
(
d©a_buf
);

1169  
ªt
;

1170 
	}
}

1172 
	$sh™n⁄_io˘l_m™agemít
(
sh™n⁄_dev
 *
sdev
, 
cmd
, 
¨g
)

1174 
ªt
 = -
ENOTTY
;

1175 
__u32
 
ªque°_mode
 = 0;

1177 i‡((
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
Ë&& (
cmd
 !
SHANNON_IOCSFORMAT
)) {

1178 
	`sh™n⁄_îr
("Dúe˘-IO PCIêFœsh /dev/%†i†ö ERROR sèã! NìdÑef‹m©áà⁄˚.\n", 
sdev
->
cdev_«me
);

1179  -
ENOTTY
;

1182 i‡(
sdev
->
•oﬁ
) {

1183 
	`sh™n⁄_öfo
("OperationÇot supported, device /dev/%s belongsÅoáÖool!\n",

1184 
sdev
->
sdisk
.
disk_«me
);

1185  -
EINVAL
;

1188 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1190 
cmd
) {

1191 
SHANNON_IOCSATTACH
:

1192 
ªque°_mode
 = (
__u32
)
¨g
;

1195 
	`sh™n⁄_˛ór_bô
(
SHN_REASON_USER_REQUESTED
, &
sdev
->
ªad⁄ly_ªas⁄
);

1196 
	`sh™n⁄_˛ór_bô
(
SHN_REASON_USER_REQUESTED
, &
sdev
->
ªdu˚d_wrôe_ªas⁄
);

1197 i‡(
ªque°_mode
 =
SHN_MODE_READONLY
)

1198 
	`sh™n⁄_£t_bô
(
SHN_REASON_USER_REQUESTED
, &
sdev
->
ªad⁄ly_ªas⁄
);

1199 i‡(
ªque°_mode
 =
SHN_MODE_REDUCED_WRITE
)

1200 
	`sh™n⁄_£t_bô
(
SHN_REASON_USER_REQUESTED
, &
sdev
->
ªdu˚d_wrôe_ªas⁄
);

1202 i‡((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_DETACHED
) {

1204 i‡((
ªt
 = 
	`sh™n⁄_©èch
(
sdev
))) {

1205 
	`sh™n⁄_îr
("FaûedÅÿ©èch Dúe˘-IO PCIêFœsh /dev/%s.\n", 
sdev
->
cdev_«me
);

1208 } i‡((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_ATTACHED
) {

1210 
	`upd©e_ac˚ss_mode
(
sdev
);

1211 
	`sh™n⁄_öfo
("Dúe˘-IO PCIêFœsh /dev/%†i†Æªadyáâached.\n", 
sdev
->
cdev_«me
);

1214 
ªt
 = 
sdev
->
ac˚ss_mode
;

1216 
SHANNON_IOCCDETACH
:

1217 i‡((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_DETACHED
) {

1219 
	`sh™n⁄_öfo
("Dúe˘-IO PCIêFœsh /dev/%†i†Æªady dëached.\n", 
sdev
->
sdisk
.
disk_«me
);

1220 } i‡(
sh™n⁄_scsi_mode
) {

1221 
	`sh™n⁄_îr
("scsi_mode doesn't support detach/attach operation.\n");

1222 
ªt
 = -
EPERM
;

1224 } i‡((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_ATTACHED
) {

1226 
ªt
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
u£rs
);

1227 i‡((
ªt
 > 1Ë|| (
	`sh™n⁄_bio_ö_Êight
(
sdev
Ë+ 
	`sh™n⁄_©omic_ªad
(&sdev->
gc_ö_Êight
))) {

1229 
	`sh™n⁄_îr
("FaûedÅÿdëach Dúe˘-IO PCIêFœsh /dev/%s, devi˚ i†busy(u£rcou¡=%d).\n", 
sdev
->
sdisk
.
disk_«me
, 
ªt
 - 1);

1232 
sdev
->
°©e
 = ((sdev->°©ê& 
SHN_STATE_MASK
Ë& ~
SHN_STATE_ATTACHED
Ë| 
SHN_STATE_DETACHED
;

1233 
	`sh™n⁄_b¨rõr
();

1234 
ªt
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
u£rs
);

1235 i‡((
ªt
 > 1Ë|| (
	`sh™n⁄_bio_ö_Êight
(
sdev
Ë+ 
	`sh™n⁄_©omic_ªad
(&sdev->
gc_ö_Êight
))) {

1237 
	`sh™n⁄_îr
("FaûedÅÿdëach Dúe˘-IO PCIêFœsh /dev/%s, devi˚ i†busy(u£rcou¡=%d).\n", 
sdev
->
sdisk
.
disk_«me
, 
ªt
 - 1);

1238 
sdev
->
°©e
 = (sdev->°©ê& 
SHN_STATE_MASK
Ë| 
SHN_STATE_ATTACHED
;

1242 
	`sh™n⁄_dëach
(
sdev
);

1245 
ªt
 = 0;

1247 
SHANNON_IOCSFORMAT
:

1248 
SHANNON_IOC_FORMAT
:

1250 
sh™n⁄_f‹m©_¨g
 
f‹m©_¨g
;

1251 
sh™n⁄_f‹m©_¨g2
 
f‹m©_¨g2
;

1253 i‡(
cmd
 =
SHANNON_IOCSFORMAT
) {

1254 
	`sh™n⁄_mem£t
(&
f‹m©_¨g
, 0x00, (
sh™n⁄_f‹m©_¨g
));

1255 
	`sh™n⁄_mem£t
(&
f‹m©_¨g2
, 0x00, (
sh™n⁄_f‹m©_¨g2
));

1256 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
f‹m©_¨g
, (
sh™n⁄_f‹m©_¨g
 * 
__u£r
)
¨g
, (shannon_format_arg))) {

1257 
	`sh™n⁄_îr
("failedÅo copy format_arg2 from userspace.\n");

1260 
	`f‹m©_¨g_to_¨g2
(
sdev
, &
f‹m©_¨g
, &
f‹m©_¨g2
);

1262 
	`sh™n⁄_mem£t
(&
f‹m©_¨g2
, 0x00, (
sh™n⁄_f‹m©_¨g2
));

1263 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
f‹m©_¨g2
, (
sh™n⁄_f‹m©_¨g2
 * 
__u£r
)
¨g
, (shannon_format_arg2))) {

1264 
	`sh™n⁄_îr
("failedÅo copy format_arg2 from userspace.\n");

1269 i‡((0 =(
f‹m©_¨g2
.
Êags
 & (1 << 
FORCE_FORMAT_SHIFT
))Ë&& ((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_ATTACHED
)) {

1270 
	`sh™n⁄_îr
("C™ÇŸÑef‹m© Dúe˘-IO PCIêFœsh /dev/%s, devi˚ i†busy.\n", 
sdev
->
cdev_«me
);

1274 i‡(
f‹m©_¨g2
.
Êags
 & (1 << 
CLEAR_ERASE_COUNT_SHIFT
) && \

1275 (
f‹m©_¨g2
.
îa£_cou¡
 > 10000)) {

1276 
	`sh™n⁄_îr
("C™ÇŸÑef‹m© /dev/%s,Éø£ cou¡ i†övÆid.\n", 
sdev
->
cdev_«me
);

1280 i‡(
	`sh™n⁄_bio_ö_Êight
(
sdev
)) {

1281 
	`sh™n⁄_îr
("C™ÇŸÑef‹m© /dev/%s, devi˚ ha†IOs.\n", 
sdev
->
cdev_«me
);

1286 i‡(
f‹m©_¨g2
.
ˇ∑côy
 >
sdev
->
max_£˘‹s
) {

1287 
	`sh™n⁄_îr
("capacityÑequested is beyondÖhysical capacity.\n");

1292 
sdev
->
sdisk
.
‹ig_m≠_èbÀ_size
 = sdev->sdisk.
tŸÆ_m≠_èbÀ_size
;

1294 
sdev
->
¥ogªss_b¨_vÆid
 = 
SHN_PROGRESS_INVALID
;

1296 i‡((
ªt
 = 
	`ªf‹m©
(
sdev
, &
f‹m©_¨g2
))) {

1297 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

1299 
	`sh™n⁄_îr
("FaûedÅÿªf‹m© Dúe˘-IO PCIêFœsh /dev/%s, së disk sèãÅÿERROR.\n", 
sdev
->
cdev_«me
);

1303 i‡(
f‹m©_¨g2
.
Êags
 & (1 << 
CLEAR_HISTORY_SHIFT
))

1304 
	`˛ór_hi°‹ic_ãm≥øtuª_n_vﬁège
(
sdev
);

1306 i‡(
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
)

1307 
sdev
->
°©e
 &~
SHN_STATE_ERROR_BIT
;

1308 
	`sh™n⁄_˛ór_bô
(
SHN_REASON_EPILOG_FAILURE
, &
sdev
->
ªad⁄ly_ªas⁄
);

1309 
	`sh™n⁄_˛ór_bô
(
SHN_REASON_MANY_BAD_BLOCKS
, &
sdev
->
ªdu˚d_wrôe_ªas⁄
);

1310 
	`sh™n⁄_mem£t
(
sdev
->
îr_check_bôm≠
, 0, 
LUN_BITMAP_LEN
);

1311 
	`upd©e_ac˚ss_mode
(
sdev
);

1313 i‡((
sh™n⁄_scsi_mode
 =0Ë&& ((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_ATTACHED
)) {

1314 
	`sh™n⁄_blk_queue_block_size
(
sdev
->
sdisk
.
queue
, sdev->
u£r_logicb_size
, sdev->
logicb_size
);

1315 
	`sh™n⁄_£t_ˇ∑côy
(
sdev
->
sdisk
.
gd
, sdev->sdisk.
£˘‹s
);

1318 
	`sh™n⁄_öfo
("Reformatted Direct-IO PCIe Flash /dev/%s: sector size:Üogical %d /Öhysical %d, capacity: %d GB, overprovision: %d.%d%%.\n", \

1319 
sdev
->
cdev_«me
, sdev->
u£r_logicb_size
, sdev->
logicb_size
,

1320 ()(
sdev
->
sdisk
.
£˘‹s
 * 512 / 1000000000), sdev->
ovî¥ovisi⁄_øã
 / 100,

1321 
sdev
->
ovî¥ovisi⁄_øã
 % 100);

1326 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1327  
ªt
;

1328 
	}
}

1330 
sh™n⁄_f‹˚_rw
;

1333 
	$sh™n⁄_io˘l_sm¨t
(
sh™n⁄_dev
 *
sdev
, 
cmd
, 
¨g
)

1335 
sh™n⁄_sm¨t
 *
sm¨t
 = 
NULL
;

1337 
sm¨t
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_sm¨t
), 
GFP_SHANNON
);

1338 i‡(
sm¨t
 =
NULL
) {

1339 
	`sh™n⁄_îr
("kmalloc smart failed.\n");

1340  -
ENOMEM
;

1343 
	`sh™n⁄_mem£t
(
sm¨t
, 0xFF, (
sh™n⁄_sm¨t
));

1345 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

1346 
sm¨t
->
powî_⁄_£c⁄ds
 = 
sdev
->power_on_seconds;

1347 
sm¨t
->
powî_cy˛e_cou¡
 = 
sdev
->power_cycle_count;

1349 
sm¨t
->
ˇ∑côy
 = 
sdev
->
sdisk
.
£˘‹s
;

1350 
sm¨t
->
physiˇl_ˇ∑côy
 = 
sdev
->
max_£˘‹s
;

1351 
sm¨t
->
ovî¥ovisi⁄
 = 
sdev
->
ovî¥ovisi⁄_øã
;

1352 
sm¨t
->
‰ì_blk˙t
 = 
sdev
->free_blkcnt;

1354 
sm¨t
->
 k°a
 = 
sdev
->
pci_öfo
.lnksta;

1355 
sm¨t
->
 kˇp
 = 
sdev
->
pci_öfo
.lnkcap;

1356 
sm¨t
->
devi˚_id
 = 
sdev
->
pci_öfo
.device_id;

1357 
sm¨t
->
subsy°em_devi˚_id
 = 
sdev
->
pci_öfo
.subsystem_device_id;

1358 
sm¨t
->
subsy°em_víd‹_id
 = 
sdev
->
pci_öfo
.subsystem_vendor_id;

1359 
sm¨t
->
pci_bus_numbî
 = 
sdev
->
pci_öfo
.pci_bus_number;

1360 
sm¨t
->
pci_¶Ÿ_numbî
 = 
sdev
->
pci_öfo
.pci_slot_number;

1361 
sm¨t
->
pci_func_numbî
 = 
sdev
->
pci_öfo
.pci_func_number;

1363 
	`upd©e_îa£_cou¡
(
sdev
);

1364 
sm¨t
->
max_îa£_cou¡
 = 
sdev
->max_erase_count;

1365 
sm¨t
->
mö_îa£_cou¡
 = 
sdev
->min_erase_count;

1366 
sm¨t
->
avîage_îa£_cou¡
 = 
sdev
->average_erase_count;

1367 
sm¨t
->
tŸÆ_îa£_cou¡
 = 
sdev
->total_erase_count;

1368 
sm¨t
->
v¨ün˚_of_îa£_cou¡
 = 
sdev
->variance_of_erase_count;

1369 i‡(
sdev
->
avîage_îa£_cou¡
 >sdev->
Êash_≥_thªshﬁd
)

1370 
sm¨t
->
e°im©ed_li„_À·
 = 0UL;

1372 
sm¨t
->
e°im©ed_li„_À·
 = (
sdev
->
Êash_≥_thªshﬁd
 - sdev->
avîage_îa£_cou¡
) * 100000 / sdev->flash_pe_threshold;

1374 
sm¨t
->
°©ic_bad_blk˙t
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->static_bad_blkcnt);

1375 
sm¨t
->
dy«mic_bad_blk˙t
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->dynamic_bad_blkcnt);

1376 
sm¨t
->
ecc_Áûuª_times
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->ecc_failure_times);

1378 
	`upd©e_io_°©i°ics
(
sdev
);

1379 
sm¨t
->
ho°_wrôe_£˘‹s
 = 
sdev
->host_write_sectors;

1380 
sm¨t
->
ho°_wrôe_b™dwidth
 = 
sdev
->host_write_bandwidth;

1381 
sm¨t
->
ho°_wrôe_ios
 = 
sdev
->host_write_ios;

1382 
sm¨t
->
ho°_wrôe_i›s
 = 
sdev
->host_write_iops;

1383 
sm¨t
->
ho°_wrôe_m£cs
 = 
sdev
->host_write_msecs;

1384 
sm¨t
->
ho°_wrôe_œãncy
 = 
sdev
->host_write_latency;

1385 
sm¨t
->
tŸÆ_wrôe_£˘‹s
 = 
sdev
->total_write_sectors;

1386 
sm¨t
->
tŸÆ_wrôe_b™dwidth
 = 
sdev
->total_write_bandwidth;

1387 
sm¨t
->
ho°_ªad_£˘‹s
 = 
sdev
->host_read_sectors;

1388 
sm¨t
->
ho°_ªad_b™dwidth
 = 
sdev
->host_read_bandwidth;

1389 
sm¨t
->
ho°_ªad_ios
 = 
sdev
->host_read_ios;

1390 
sm¨t
->
ho°_ªad_i›s
 = 
sdev
->host_read_iops;

1391 
sm¨t
->
ho°_ªad_m£cs
 = 
sdev
->host_read_msecs;

1392 
sm¨t
->
ho°_ªad_œãncy
 = 
sdev
->host_read_latency;

1393 
sm¨t
->
buf„r_wrôe_≥r˚¡
 = 
sdev
->buffer_write_percent;

1394 
sm¨t
->
wrôe_am∂ifõr
 = 
sdev
->write_amplifier;

1395 
sm¨t
->
wrôe_am∂ifõr_li„time
 = 
sdev
->write_amplifier_lifetime;

1397 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

1398 
sm¨t
->
ãm≥øtuª_öt
 = 
sdev
->temperature_int;

1399 
sm¨t
->
ãm≥øtuª_öt_max
 = 
sdev
->temperature_int_max;

1400 
sm¨t
->
ãm≥øtuª_bﬂrd
 = 
sdev
->temperature_board;

1401 
sm¨t
->
ãm≥øtuª_bﬂrd_max
 = 
sdev
->temperature_board_max;

1402 
sm¨t
->
ãm≥øtuª_Êash
 = 
sdev
->temperature_flash;

1403 
sm¨t
->
ãm≥øtuª_Êash_max
 = 
sdev
->temperature_flash_max;

1404 
sm¨t
->
vﬁège_öt
 = 
sdev
->voltage_int;

1405 
sm¨t
->
vﬁège_öt_max
 = 
sdev
->voltage_int_max;

1406 
sm¨t
->
vﬁège_aux
 = 
sdev
->voltage_aux;

1407 
sm¨t
->
vﬁège_aux_max
 = 
sdev
->voltage_aux_max;

1409 i‡(
	`sh™n⁄_dev_is_g5_ffß
(
sdev
)) {

1410 
sm¨t
->
£u_¸c_îr‹
 = 0;

1411 
sm¨t
->
£u_¸c_îr‹_hi°‹y
 = 0;

1412 
sm¨t
->
£u_ecc_îr‹
 = 0;

1413 
sm¨t
->
£u_ecc_îr‹_hi°‹y
 = 0;

1415 
	`ªad_£u_öfo
(
sdev
);

1416 
sm¨t
->
£u_¸c_îr‹
 = 
sdev
->seu_crc_error;

1417 
sm¨t
->
£u_¸c_îr‹_hi°‹y
 = 
sdev
->seu_crc_error_history;

1418 
sm¨t
->
£u_ecc_îr‹
 = 
sdev
->seu_ecc_error;

1419 
sm¨t
->
£u_ecc_îr‹_hi°‹y
 = 
sdev
->seu_ecc_error_history;

1422 
sm¨t
->
ecc_c‹ª˘i⁄_powî
 = 
sdev
->ecc_correction_power;

1423 
sm¨t
->
ecc_codew‹d_size
 = 
sdev
->ecc_codeword_size;

1425 
sm¨t
->
buf„r_wrôe_cou¡î
 = 
sdev
->buffer_write_counter;

1426 
sm¨t
->
dúe˘_wrôe_cou¡î
 = 
sdev
->direct_write_counter;

1428 
sm¨t
->
hw_cfg_ch™√ls
 = 
sdev
->
max_ch™√ls
;

1429 
sm¨t
->
hw_cfg_lun£t_ö_ch™√l
 = 
sdev
->
max_lun£t_ö_ch™√l
;

1430 
sm¨t
->
hw_cfg_lun_ö_lun£t
 = 
sdev
->
max_lun_ö_lun£t
 - 1;

1432 
sm¨t
->
Êashid
 = 
sdev
->flashid;

1433 
sm¨t
->
hÆ_vîsi⁄
 = 
sdev
->
h¨dw¨e_vîsi⁄
;

1434 
sm¨t
->
has_£rvi˚_èg
 = 1;

1435 
	`sh™n⁄_mem˝y
(
sm¨t
->
£rvi˚_èg
, 
sdev
->service_tag, 32);

1436 
	`sh™n⁄_mem˝y
(
sm¨t
->
modñ_id
, 
sdev
->model_id, 40);

1438 
	`sh™n⁄_mem˝y
(
sm¨t
->
udid
, 
sdev
->udid, 36);

1440 
sm¨t
->
Âga_ªc⁄fig_sup
 = 
sdev
->
ªc⁄fig_suµ‹t
;

1441 
sm¨t
->
Âga_ªc⁄fig_times
 = 
sdev
->
ªc⁄fig_times
;

1443 i‡(
sh™n⁄_scsi_mode
) {

1444 
sm¨t
->
scsi_mode
 = 1;

1445 
sm¨t
->
scsi_ho°_no
 = ((
sh™n⁄_scsi_¥iv©e
 *)(
sdev
->
sdisk
.
ho°d©a
))->scsi_host_no;

1447 
sm¨t
->
scsi_mode
 = 0;

1448 
sm¨t
->
scsi_ho°_no
 = 0;

1451 i‡(
sh™n⁄_f‹˚_rw
)

1452 
sm¨t
->
f‹˚_rw
 = 1;

1454 
sm¨t
->
f‹˚_rw
 = 0;

1456 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_sm¨t
 * 
__u£r
)
¨g
, 
sm¨t
, (shannon_smart))) {

1457 
	`sh™n⁄_îr
("couldÇot copy shannon smartáttributesÅo userspace.\n");

1458 
	`sh™n⁄_k‰ì
(
sm¨t
);

1459  -
ENOTTY
;

1462 
	`sh™n⁄_k‰ì
(
sm¨t
);

1464 
	}
}

1466 
	$sh™n⁄_gë_dev_°©us
(
sh™n⁄_dev
 *
sdev
, 
cmd
, 
¨g
)

1468 
sh™n⁄_dev_°©us
 *
°©us
 = 
NULL
;

1470 
°©us
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_dev_°©us
), 
GFP_SHANNON
);

1471 i‡(
°©us
 =
NULL
) {

1472 
	`sh™n⁄_îr
("kmalloc status failed.\n");

1473  -
ENOMEM
;

1476 
	`sh™n⁄_mem£t
(
°©us
, 0xFF, (
sh™n⁄_dev_°©us
));

1480 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

1481 
°©us
->
powî_⁄_£c⁄ds
 = 
sdev
->power_on_seconds;

1482 
°©us
->
powî_cy˛e_cou¡
 = 
sdev
->power_cycle_count;

1484 
°©us
->
ˇ∑côy
 = 
sdev
->
sdisk
.
£˘‹s
;

1485 
°©us
->
physiˇl_ˇ∑côy
 = 
sdev
->
max_£˘‹s
;

1486 
°©us
->
ovî¥ovisi⁄
 = 
sdev
->
ovî¥ovisi⁄_øã
;

1487 
°©us
->
‰ì_blk˙t
 = 
sdev
->free_blkcnt;

1489 
°©us
->
 k°a
 = 
sdev
->
pci_öfo
.lnksta;

1490 
°©us
->
devi˚_id
 = 
sdev
->
pci_öfo
.device_id;

1491 
°©us
->
subsy°em_devi˚_id
 = 
sdev
->
pci_öfo
.subsystem_device_id;

1492 
°©us
->
pci_bus_numbî
 = 
sdev
->
pci_öfo
.pci_bus_number;

1493 
°©us
->
pci_¶Ÿ_numbî
 = 
sdev
->
pci_öfo
.pci_slot_number;

1494 
°©us
->
pci_func_numbî
 = 
sdev
->
pci_öfo
.pci_func_number;

1496 
	`upd©e_îa£_cou¡
(
sdev
);

1497 i‡(
sdev
->
avîage_îa£_cou¡
 >sdev->
Êash_≥_thªshﬁd
)

1498 
°©us
->
e°im©ed_li„_À·
 = 0UL;

1500 
°©us
->
e°im©ed_li„_À·
 = (
sdev
->
Êash_≥_thªshﬁd
 - sdev->
avîage_îa£_cou¡
) * 100000 / sdev->flash_pe_threshold;

1502 
°©us
->
°©ic_bad_blk˙t
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->static_bad_blkcnt);

1503 
°©us
->
dy«mic_bad_blk˙t
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->dynamic_bad_blkcnt);

1504 
°©us
->
ecc_Áûuª_times
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->ecc_failure_times);

1506 
	`upd©e_io_°©i°ics
(
sdev
);

1507 
°©us
->
ho°_wrôe_£˘‹s
 = 
sdev
->host_write_sectors;

1508 
°©us
->
ho°_wrôe_b™dwidth
 = 
sdev
->host_write_bandwidth;

1509 
°©us
->
ho°_wrôe_i›s
 = 
sdev
->host_write_iops;

1510 
°©us
->
ho°_wrôe_œãncy
 = 
sdev
->host_write_latency;

1511 
°©us
->
tŸÆ_wrôe_£˘‹s
 = 
sdev
->total_write_sectors;

1512 
°©us
->
tŸÆ_wrôe_b™dwidth
 = 
sdev
->total_write_bandwidth;

1513 
°©us
->
ho°_ªad_£˘‹s
 = 
sdev
->host_read_sectors;

1514 
°©us
->
ho°_ªad_b™dwidth
 = 
sdev
->host_read_bandwidth;

1515 
°©us
->
ho°_ªad_i›s
 = 
sdev
->host_read_iops;

1516 
°©us
->
ho°_ªad_œãncy
 = 
sdev
->host_read_latency;

1517 
°©us
->
buf„r_wrôe_≥r˚¡
 = 
sdev
->buffer_write_percent;

1518 
°©us
->
wrôe_am∂ifõr
 = 
sdev
->write_amplifier;

1519 
°©us
->
wrôe_am∂ifõr_li„time
 = 
sdev
->write_amplifier_lifetime;

1520 
°©us
->
tŸÆ_gc_£˘‹s
 = 
sdev
->
tŸÆ_gc_logicbs
 * sdev->
£˘‹s_ö_logicb
;

1521 
°©us
->
tŸÆ_wl_£˘‹s
 = 
sdev
->
tŸÆ_wl_logicbs
 * sdev->
£˘‹s_ö_logicb
;

1522 
°©us
->
tŸÆ_îr_ªcovî_£˘‹s
 = 
sdev
->
tŸÆ_îr_ªcovî_logicbs
 * sdev->
£˘‹s_ö_logicb
;

1523 
°©us
->
gc_b™dwidth
 = 
sdev
->gc_bandwidth;

1524 
°©us
->
wl_b™dwidth
 = 
sdev
->wl_bandwidth;

1525 
°©us
->
îr_ªcovî_b™dwidth
 = 
sdev
->err_recover_bandwidth;

1527 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

1528 
°©us
->
ãm≥øtuª_öt
 = 
sdev
->temperature_int;

1529 
°©us
->
ãm≥øtuª_öt_max
 = 
sdev
->temperature_int_max;

1530 
°©us
->
ãm≥øtuª_bﬂrd
 = 
sdev
->temperature_board;

1531 
°©us
->
ãm≥øtuª_bﬂrd_max
 = 
sdev
->temperature_board_max;

1532 
°©us
->
ãm≥øtuª_Êash
 = 
sdev
->temperature_flash;

1533 
°©us
->
ãm≥øtuª_Êash_max
 = 
sdev
->temperature_flash_max;

1534 
°©us
->
vﬁège_öt
 = 
sdev
->voltage_int;

1535 
°©us
->
vﬁège_öt_max
 = 
sdev
->voltage_int_max;

1536 
°©us
->
vﬁège_aux
 = 
sdev
->voltage_aux;

1537 
°©us
->
vﬁège_aux_max
 = 
sdev
->voltage_aux_max;

1539 i‡(
	`sh™n⁄_dev_is_g5_ffß
(
sdev
)) {

1540 
°©us
->
£u_¸c_îr‹
 = 0;

1541 
°©us
->
£u_¸c_îr‹_hi°‹y
 = 0;

1542 
°©us
->
£u_ecc_îr‹
 = 0;

1543 
°©us
->
£u_ecc_îr‹_hi°‹y
 = 0;

1545 
	`ªad_£u_öfo
(
sdev
);

1546 
°©us
->
£u_¸c_îr‹
 = 
sdev
->seu_crc_error;

1547 
°©us
->
£u_¸c_îr‹_hi°‹y
 = 
sdev
->seu_crc_error_history;

1548 
°©us
->
£u_ecc_îr‹
 = 
sdev
->seu_ecc_error;

1549 
°©us
->
£u_ecc_îr‹_hi°‹y
 = 
sdev
->seu_ecc_error_history;

1552 
°©us
->
ecc_c‹ª˘i⁄_powî
 = 
sdev
->ecc_correction_power;

1553 
°©us
->
ecc_codew‹d_size
 = 
sdev
->ecc_codeword_size;

1555 
°©us
->
hw_cfg_ch™√ls
 = 
sdev
->
max_ch™√ls
;

1556 
°©us
->
hw_cfg_lun£t_ö_ch™√l
 = 
sdev
->
max_lun£t_ö_ch™√l
;

1557 
°©us
->
hw_cfg_lun_ö_lun£t
 = 
sdev
->
max_lun_ö_lun£t
 - 1;

1559 
°©us
->
Êashid
 = 
sdev
->flashid;

1560 
°©us
->
hÆ_vîsi⁄
 = 
sdev
->
h¨dw¨e_vîsi⁄
;

1561 
	`sh™n⁄_mem˝y
(
°©us
->
£rvi˚_èg
, 
sdev
->service_tag, 32);

1562 
	`sh™n⁄_mem˝y
(
°©us
->
modñ_id
, 
sdev
->model_id, 40);

1564 
	`sh™n⁄_mem˝y
(
°©us
->
udid
, 
sdev
->udid, 36);

1566 
°©us
->
Âga_ªc⁄fig_sup
 = 
sdev
->
ªc⁄fig_suµ‹t
;

1567 
°©us
->
Âga_ªc⁄fig_times
 = 
sdev
->
ªc⁄fig_times
;

1569 i‡(
sh™n⁄_scsi_mode
) {

1570 
°©us
->
scsi_mode
 = 1;

1571 
°©us
->
scsi_ho°_no
 = ((
sh™n⁄_scsi_¥iv©e
 *)(
sdev
->
sdisk
.
ho°d©a
))->scsi_host_no;

1573 
°©us
->
scsi_mode
 = 0;

1574 
°©us
->
scsi_ho°_no
 = 0;

1577 i‡(
sh™n⁄_f‹˚_rw
)

1578 
°©us
->
f‹˚_rw
 = 1;

1580 
°©us
->
f‹˚_rw
 = 0;

1582 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_dev_°©us
 * 
__u£r
)
¨g
, 
°©us
, (shannon_dev_status))) {

1583 
	`sh™n⁄_îr
("couldÇot copy shannon dev_statusáttributesÅo userspace.\n");

1584 
	`sh™n⁄_k‰ì
(
°©us
);

1585  -
ENOTTY
;

1588 
	`sh™n⁄_k‰ì
(
°©us
);

1590 
	}
}

1592 
	$ªgi°î_›
(
sh™n⁄_dev
 *
sdev
, 
cmd
, 
¨g
)

1594 
sh™n⁄_ªg
 
ªg
;

1595 
u32
 *
d©a_buf
 = 
NULL
;

1596 
u32
 *
addr
 = 
NULL
;

1597 
i
, 
ªt
 = -1;

1599 
addr
 = (
u32
 *)
sdev
->
b¨
;

1601 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
ªg
, (
sh™n⁄_ªg
 * 
__u£r
)
¨g


1602 , (
sh™n⁄_ªg
))) {

1603 
	`sh™n⁄_îr
("couldÇot copy givenÑeg from userspace.\n");

1604 
ªgi°î_›_Áûed
;

1607 i‡((
sdev
->
öãºu±_b¨
 <
addr
 + 
ªg
.reg)

1608 && ((
addr
 + 
ªg
.ªg +Ñeg.
Àn
Ë< (
sdev
->
öãºu±_b¨
 + 9))) {

1609 
	`sh™n⁄_log
("%s: invÆidác˚s†tÿöãºu±Ñegi°î.n", 
sdev
->
sdisk
.
disk_«me
);

1613 
d©a_buf
 = 
	`sh™n⁄_kmÆloc
((
u32
)*
ªg
.
Àn
, 
GFP_SHANNON
);

1614 i‡(
d©a_buf
 =
NULL
) {

1615 
	`sh™n⁄_îr
("kmalloc data buf failed.\n");

1616 
ªgi°î_›_Áûed
;

1619 
addr
 = (
u32
 *)
sdev
->
b¨
;

1620 i‡(
cmd
 =
SHANNON_IOCRDREG
) {

1621 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1622 
i
 = 0; i < 
ªg
.
Àn
; i++)

1623 
d©a_buf
[
i
] = 
	`sh™n⁄_i‹ód32
(
addr
 + 
ªg
.reg + i);

1624 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1626 i‡(
	`sh™n⁄_c›y_to_u£r
((
u32
 * 
__u£r
)
ªg
.
buf
,

1627 
d©a_buf
, (
u32
)*
ªg
.
Àn
)) {

1628 
	`sh™n⁄_îr
("couldÇot copyÑegÅo userspace.\n");

1629 
ªgi°î_›_Áûed
;

1632 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
d©a_buf
, (
u32
 * 
__u£r
)
ªg
.
buf
,

1633 (
u32
)*
ªg
.
Àn
)) {

1634 
	`sh™n⁄_îr
("couldÇot copyÑegÅo userspace.\n");

1635 
ªgi°î_›_Áûed
;

1638 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1639 
i
 = 0; i < 
ªg
.
Àn
; i++)

1640 
	`sh™n⁄_iowrôe32
(
d©a_buf
[
i
], 
addr
 + 
ªg
.reg + i);

1641 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1644 
ªt
 = 0;

1645 
ªgi°î_›_Áûed
:

1646 i‡(
d©a_buf
)

1647 
	`sh™n⁄_k‰ì
(
d©a_buf
);

1649  
ªt
;

1650 
	}
}

1652 
	$sh™n⁄_gë_ˇ∑bûôõs
(
sh™n⁄_dev
 *
sdev
, 
¨g
)

1654 
u64
 
ˇp
 = 0;

1656 
ˇp
 |
SUPPORT_NEW_FORMAT
;

1657 
ˇp
 |
SUPPORT_MARK_BAD_LUN
;

1658 
ˇp
 |
SUPPORT_MARK_BAD_EBLK
;

1659 
ˇp
 |
SUPPORT_CLEAR_ERASE_COUNT
;

1660 
ˇp
 |
SUPPORT_NEW_DEV_STATUS
;

1661 
ˇp
 |
SUPPORT_LARGE_ECC_POWER
;

1662 
ˇp
 |
SUPPORT_UPDATE_MICROCODE
;

1664 i‡(
	`sh™n⁄_c›y_to_u£r
((
u64
 * 
__u£r
)
¨g
, &
ˇp
, (u64))) {

1665 
	`sh™n⁄_îr
("copyÅo user faile!\n");

1666  -
EIO
;

1670 
	}
}

1672 
	$sh™n⁄_io˘l
(
sh™n⁄_fûe_t
 *
fûp
, 
cmd
, 
¨g
)

1674 
¨gumít
;

1675 
ªt
 = -
ENOTTY
;

1676 
sh™n⁄_dev
 *
sdev
;

1677 
sh™n⁄_disk_°©us
 
disk_°©us
;

1678 
sh™n⁄_vîsi⁄_öfo
 
vî_öfo
;

1679 
sh™n⁄_¥ogªss_b¨
 
¥ogªss_b¨
;

1680 
sh™n⁄_sb
 *
sb
;

1681 
sh™n⁄_m¨k_¨g
 
eblk
;

1682 
u32
 
code
;

1684 
	`debugs4
("enter ioctl.\n");

1686 i‡(
	`_IOC_TYPE
(
cmd
Ë!
SHANNON_IOCMAGIC
)

1687  -
ENOTTY
;

1688 i‡(
	`_IOC_NR
(
cmd
Ë>
SHANNON_IOCMAXNR
)

1689  -
ENOTTY
;

1691 
sdev
 = 
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûp
);

1692 i‡((
sdev
 =
NULL
Ë|| sdev->
sdisk
.
exô
) {

1693 
	`sh™n⁄_îr
("couldÇot get sdev.\n");

1694  -
ENOTTY
;

1697 
cmd
) {

1698 
SHANNON_IOC_GET_CAP
:

1699  
	`sh™n⁄_gë_ˇ∑bûôõs
(
sdev
, 
¨g
);

1700 
SHANNON_IOCRMBR
:

1701 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_mbr
 * 
__u£r
)
¨g
, &
sdev
->
mbr
, (shannon_mbr))) {

1702 
	`sh™n⁄_îr
("couldÇot copy mbrÅo userspace.\n");

1703  -
ENOTTY
;

1706 
SHANNON_IOCSATTACH
:

1707 
SHANNON_IOCCDETACH
:

1708 
SHANNON_IOCSFORMAT
:

1710 
SHANNON_IOC_FORMAT
:

1711  
	`sh™n⁄_io˘l_m™agemít
(
sdev
, 
cmd
, 
¨g
);

1712 
SHANNON_IOCCREATEPOOL
:

1713  
	`¸óã_poﬁ
(
¨g
);

1714 
SHANNON_IOCCRECONFIG
:

1715 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1716 
	`sh™n⁄_ªc⁄fig
(
sdev
);

1717 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1720 
SHANNON_IOCCRESET
:

1721 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1722 
	`sh™n⁄_ª£t
(
sdev
);

1723 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1726 
SHANNON_IOCCEJECT
:

1727 i‡(
sdev
->
hŸ_∂uggabÀ
 == 0)

1728  -
ENOTTY
;

1729 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1730 
	`sh™n⁄_scheduÀ_dñayed_w‹k
(&
sdev
->
eje˘_w‹k
, 
	`gë_HZ
());

1731 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1733 
SHANNON_IOCRSTATUS
:

1735 
	`sh™n⁄_mem£t
(&
disk_°©us
, 0xFF, (
sh™n⁄_disk_°©us
));

1736 
disk_°©us
.
°©e
 = 
sdev
->state;

1737 
disk_°©us
.
ac˚ss_mode
 = 
sdev
->access_mode;

1738 
disk_°©us
.
ªad⁄ly_ªas⁄
 = 
sdev
->readonly_reason;

1739 
disk_°©us
.
ªdu˚d_wrôe_ªas⁄
 = 
sdev
->reduced_write_reason;

1741 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_disk_°©us
 * 
__u£r
)
¨g
, &
disk_°©us
, (shannon_disk_status))) {

1742 
	`sh™n⁄_îr
("couldÇot copy disk_statusÅo userspace.\n");

1743  -
ENOTTY
;

1746 
SHANNON_IOCRSMART
:

1747  
	`sh™n⁄_io˘l_sm¨t
(
sdev
, 
cmd
, 
¨g
);

1748 
SHANNON_IOCRDEVSTATUS
:

1749  
	`sh™n⁄_gë_dev_°©us
(
sdev
, 
cmd
, 
¨g
);

1750 
SHANNON_IOCWLED
:

1751 
¨gumít
 = ()
¨g
;

1752 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1753 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1754 i‡(
¨gumít
) {

1755 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

1756 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
G5_LED
, 
YELLOW_BRIGHT
|
GREEN_FLASHING
);

1758 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
LED
, 
YELLOW_BRIGHT
|
GREEN_FLASHING
);

1760 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

1761 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
G5_LED
, 
YELLOW_DARK
|
GREEN_FLASHING
);

1763 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
LED
, 
YELLOW_DARK
|
GREEN_FLASHING
);

1765 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1766 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1768 
SHANNON_IOCRECC
:

1769 
SHANNON_IOCRECC_LARGE
:

1770 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_ecc_°©
 * 
__u£r
)
¨g
, &
sdev
->
ecc_°©i°ics
, (shannon_ecc_stat))) {

1771 
	`sh™n⁄_îr
("couldÇot copyÉcc correction statisticsÅo userspace.\n");

1772  -
ENOTTY
;

1776 
SHANNON_IOCRVERINFO
:

1777 
	`sh™n⁄_mem£t
(&
vî_öfo
, 0x00, (
sh™n⁄_vîsi⁄_öfo
));

1779 
vî_öfo
.
fúmw¨e_vîsi⁄
 = 
sdev
->firmware_version;

1780 
vî_öfo
.
fúmw¨e_èg
 = 
sdev
->firmware_tag;

1781 
vî_öfo
.
drivî_vîsi⁄
 = 
SHANNON_VERSION_CODE
;

1782 
vî_öfo
.
drivî_fix_vîsi⁄
 = 
SHANNON_FIX_VERSION_CODE
;

1783 
vî_öfo
.
£rül_numbî
 = 
sdev
->
d«
;

1784 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_vîsi⁄_öfo
 * 
__u£r
)
¨g
, &
vî_öfo
, (shannon_version_info))) {

1785 
	`sh™n⁄_îr
("couldÇot copy version informationÅo userspace.\n");

1786  -
ENOTTY
;

1790 
SHANNON_IOCRPROGRESS
:

1791 
	`sh™n⁄_mem£t
(&
¥ogªss_b¨
, 0x00, (
sh™n⁄_¥ogªss_b¨
));

1793 
¥ogªss_b¨
.
vÆid
 = 
sdev
->
¥ogªss_b¨_vÆid
;

1795 
¥ogªss_b¨
.
vÆid
) {

1796 
SHN_PROGRESS_VALID
:

1797 
¥ogªss_b¨
.
≥r˚¡
 = 100 * (
sdev
->
sb_cou¡
 - sdev->
mbr_eblocks
 / sdev->
∂™es
 - 
	`sh™n⁄_©omic_ªad
(&sdev->
îa£_d⁄e
)) / (sdev->sb_count - sdev->mbr_eblocks / sdev->planes);

1799 
SHN_PROGRESS_REFRESH_MBR
:

1800 
¥ogªss_b¨
.
≥r˚¡
 = 100 * (
	`sh™n⁄_©omic_ªad
(&
sdev
->
ª‰esh_mbr_d⁄e
Ë% sdev->
lun_cou¡
) / sdev->lun_count;

1802 
SHN_PROGRESS_NORFLASH_ERASE
:

1803 
SHN_PROGRESS_NORFLASH_WRITE
:

1804 
SHN_PROGRESS_NORFLASH_READ
:

1805 
¥ogªss_b¨
.
≥r˚¡
 = 
sdev
->
n‹Êash
.
¥ogªss
;

1811 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_¥ogªss_b¨
 * 
__u£r
)
¨g
, &
¥ogªss_b¨
, (shannon_progress_bar))) {

1812 
	`sh™n⁄_îr
("couldÇot copyÖrogress_barÅo userspace.\n");

1813  -
ENOTTY
;

1816 
SHANNON_IOCWNORERASE
:

1817 
SHANNON_IOCWNORWRITE
:

1818 
SHANNON_IOCRNORREAD
:

1819 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1820 
ªt
 = 
	`sh™n⁄_io˘l_n‹Êash_›s
(
sdev
, 
cmd
, 
¨g
);

1821 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1822  
ªt
;

1823 
SHANNON_IOCCRELOAD
:

1824 i‡(
	`sh™n⁄_dev_is_g5_ffß
(
sdev
)) {

1825 
	`sh™n⁄_îr
("FFSA controllerÇot supportÑeload.\n");

1828 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1829 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1830 
code
 = 
	`sh™n⁄_i‹ód32
((
u32
 *)
sdev
->
b¨
 + 0x33);

1831 
code
 |= 1 << 31;

1832 
	`sh™n⁄_iowrôe32
(
code
, (
u32
 *)
sdev
->
b¨
 + 0x33);

1833 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1834 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1836 
SHANNON_IOCRDREG
:

1837 
SHANNON_IOCWRREG
:

1838 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1839 
ªt
 = 
	`ªgi°î_›
(
sdev
, 
cmd
, 
¨g
);

1840 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1842 i‡(
ªt
)

1843  -
ENOTTY
;

1845 
SHANNON_IOCQATOMIC_SIZE
:

1846 i‡(
sdev
->
©omic_wrôe
)

1847  
sdev
->
logicb_size
 * sdev->
logicbs_ö_chunk
;

1849  
sdev
->
logicb_size
;

1850 
SHANNON_IOCNORINFO
:

1851 
	`sh™n⁄_muãx_lock
(&
sdev
->
°©e_£m
);

1852 
	`ªad_n‹Êash_öfo
(
sdev
);

1853 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
°©e_£m
);

1855 
SHANNON_IOCWBADLUN
:

1856 
¨gumít
 = ()
¨g
;

1857 i‡(
¨gumít
 < 0 ||árgumíà>
sdev
->
lun_cou¡
) {

1858 
	`sh™n⁄_îr
("InvalidÜunÇumber.\n");

1859  -
ENOTTY
;

1861 
	`m¨k_sb_îr_f‹_bad_lun
(
sdev
, sdev->
lun
[
¨gumít
]);

1863 
SHANNON_IOCWBADBLK
:

1864 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
eblk
, (
u32
 * 
__u£r
)
¨g
,

1865 (
eblk
))) {

1866 
	`sh™n⁄_îr
("couldÇot copyÉblockÇumber from userspace.\n");

1867  -
ENOTTY
;

1869 i‡(
eblk
.
lun_num
 >
sdev
->
lun_cou¡
) {

1870 
	`sh™n⁄_îr
("InvalidÜunÇumber.\n");

1871  -
ENOTTY
;

1873 i‡(
eblk
.
eblk_num
 < 
sdev
->
mbr_eblocks
 ||Éblk.eblk_num >sdev->
eblocks_ö_lun
) {

1874 
	`sh™n⁄_îr
("InvalidÉblockÇumber.\n");

1875  -
ENOTTY
;

1877 
sb
 = 
sdev
->
sbs
 + 
eblk
.
eblk_num
 / sdev->
∂™es
;

1878 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
eblk
.
lun_num
,Éblk.
eblk_num
 % sdev->
∂™es
);

1879 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0) {

1880 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
 / sdev->
∂™es
)

1881 
	`sh™n⁄_©omic_öc
(&
sdev
->
≥ndög_îr_blks
);

1885 
	`sh™n⁄_îr
("unsuµ‹ãd io˘»cmd=0x%08x., 0x%08x\n", 
cmd
, 
SHANNON_IOCRECC_LARGE
);

1886  -
ENOTTY
;

1889 
	`debugs4
("leave ioctl.\n");

1891 
	}
}

	@shannon_ioctl.h

10 #i‚de‡
__SHANNON_IOCTL_H


11 
	#__SHANNON_IOCTL_H


	)

13 
	~"sh™n⁄_mbr.h
"

15 
	#ECC_CORRECTION_BITS_IN_SECTOR
 120

	)

17 
	ssh™n⁄_ecc_°©
 {

18 
__u64
 
	mecc_°©i°ics
[
ECC_CORRECTION_BITS_IN_SECTOR
 + 1];

21 
	ssh™n⁄_disk_°©us
 {

22 
__u32
 
	m°©e
;

23 
__u32
 
	mac˚ss_mode
;

24 
__u64
 
	mªad⁄ly_ªas⁄
;

25 
__u64
 
	mªdu˚d_wrôe_ªas⁄
;

28 
	ssh™n⁄_vîsi⁄_öfo
 {

29 
__u32
 
	mfúmw¨e_vîsi⁄
;

30 
__u32
 
	mdrivî_vîsi⁄
;

31 
__u64
 
	m£rül_numbî
;

32 
__u32
 
	mdrivî_fix_vîsi⁄
;

33 
__u32
 
	mfúmw¨e_èg
;

39 
	#SHANNON_SMART_SIZE
 528

	)

41 
	ssh™n⁄_sm¨t
 {

42 
__u64
 
	mpowî_⁄_£c⁄ds
;

43 
__u64
 
	mpowî_cy˛e_cou¡
;

44 
__u64
 
	mˇ∑côy
;

45 
__u64
 
	mphysiˇl_ˇ∑côy
;

47 
__u32
 
	movî¥ovisi⁄
;

48 
__u32
 
	m‰ì_blk˙t
;

50 
__u32
 
	mmax_îa£_cou¡
;

51 
__u32
 
	mmö_îa£_cou¡
;

53 
__u32
 
	mavîage_îa£_cou¡
;

54 
__u32
 
	mtŸÆ_îa£_cou¡
;

56 
__u32
 
	mv¨ün˚_of_îa£_cou¡
;

57 
__u32
 
	me°im©ed_li„_À·
;

59 
__u32
 
	m°©ic_bad_blk˙t
;

60 
__u32
 
	mdy«mic_bad_blk˙t
;

62 
__u64
 
	mho°_wrôe_£˘‹s
;

63 
__u64
 
	mho°_wrôe_ios
;

64 
__u64
 
	mho°_wrôe_m£cs
;

65 
__u64
 
	mtŸÆ_wrôe_£˘‹s
;

66 
__u64
 
	mho°_ªad_£˘‹s
;

67 
__u64
 
	mho°_ªad_ios
;

68 
__u64
 
	mho°_ªad_m£cs
;

70 
__u32
 
	mecc_Áûuª_times
;

71 
__u32
 
	mãm≥øtuª_öt
;

73 
__u32
 
	mãm≥øtuª_Êash
;

74 
__u32
 
	mãm≥øtuª_bﬂrd
;

76 
__u32
 
	mvﬁège_öt
;

77 
__u32
 
	mvﬁège_öt_max
;

79 
__u32
 
	mvﬁège_aux
;

80 
__u32
 
	mvﬁège_aux_max
;

82 
__u64
 
	m£quí˚_numbî
;

84 
__u32
 
	mãm≥øtuª_öt_max
;

85 
__u32
 
	mãm≥øtuª_Êash_max
;

87 
__u32
 
	mãm≥øtuª_bﬂrd_max
;

88 
__u32
 
	m£u_¸c_îr‹
;

90 
__u32
 
	m£u_¸c_îr‹_hi°‹y
;

91 
__u32
 
	m£u_ecc_îr‹
;

93 
__u32
 
	m£u_ecc_îr‹_hi°‹y
;

94 
__u32
 
	mecc_c‹ª˘i⁄_powî
;

96 
__u32
 
	mecc_codew‹d_size
;

97 
__u32
 
	m∑d1
;

99 
__u64
 
	mbuf„r_wrôe_cou¡î
;

100 
__u64
 
	mdúe˘_wrôe_cou¡î
;

102 
__u32
 
	mhas_£rvi˚_èg
;

103 
__u8
 
	m£rvi˚_èg
[32];

104 
__u8
 
	mmodñ_id
[40];

105 
__u16
 
	m k°a
;

106 
__u16
 
	m∑d2
;

108 
__u32
 
	m kˇp
;

109 
__u32
 
	m∑d3
;

111 
__u64
 
	mÊashid
;

113 
__u16
 
	mhÆ_vîsi⁄
;

114 
__u8
 
	mudid
[36];

115 
__u8
 
	m∑d4
[2];

117 
__u32
 
	mhw_cfg_ch™√ls
;

118 
__u32
 
	mhw_cfg_lun£t_ö_ch™√l
;

120 
__u32
 
	mhw_cfg_lun_ö_lun£t
;

121 
__u16
 
	mdevi˚_id
;

122 
__u16
 
	msubsy°em_devi˚_id
;

124 
__u16
 
	msubsy°em_víd‹_id
;

125 
__u8
 
	mpci_bus_numbî
;

126 
__u8
 
	mpci_¶Ÿ_numbî
;

127 
__u8
 
	mpci_func_numbî
;

128 
__u8
 
	m∑d5
[3];

130 
__u32
 
	mho°_wrôe_b™dwidth
;

131 
__u32
 
	mho°_wrôe_i›s
;

133 
__u32
 
	mho°_wrôe_œãncy
;

134 
__u32
 
	mtŸÆ_wrôe_b™dwidth
;

136 
__u32
 
	mho°_ªad_b™dwidth
;

137 
__u32
 
	mho°_ªad_i›s
;

139 
__u32
 
	mho°_ªad_œãncy
;

140 
__u32
 
	mbuf„r_wrôe_≥r˚¡
;

142 
__u32
 
	mwrôe_am∂ifõr
;

143 
__u32
 
	mwrôe_am∂ifõr_li„time
;

145 
__u32
 
	mÂga_ªc⁄fig_sup
;

146 
__u32
 
	mÂga_ªc⁄fig_times
;

148 
__u16
 
	mscsi_mode
;

149 
__u16
 
	mscsi_ho°_no
;

151 
__u8
 
	mf‹˚_rw
;

152 
__u8
 
	m∑d6
;

153 
__u16
 
	mdummy_cou¡
;

154 
__u64
 
	møndom_num
;

155 
__u32
 
	mgc_sbs
;

156 
__u32
 
	mîr_ªcovîed_sbs
;

157 
__u32
 
	mwl_sbs
;

158 
__u32
 
	md©a_ªã¡i⁄_sbs
;

159 
__u32
 
	mªad_di°urb_sbs
;

160 
__u32
 
	mîa£_bÆ™˚_sbs
;

161 
__u32
 
	mecc_Áûuª_sbs
;

162 
__u8
 
	mª£rved
[50];

165 
	ssh™n⁄_dev_°©us
 {

166 
__u64
 
	mˇ∑bûôõs
[2];

168 
__u16
 
	mhÆ_vîsi⁄
;

169 
__u16
 
	mscsi_mode
;

170 
__u8
 
	mudid
[36];

172 
__u16
 
	mdevi˚_id
;

173 
__u16
 
	msubsy°em_devi˚_id
;

174 
__u32
 
	movî¥ovisi⁄
;

176 
__u32
 
	m‰ì_blk˙t
;

177 
__u32
 
	me°im©ed_li„_À·
;

179 
__u32
 
	m°©ic_bad_blk˙t
;

180 
__u32
 
	mdy«mic_bad_blk˙t
;

182 
__u32
 
	mãm≥øtuª_öt
;

183 
__u32
 
	mãm≥øtuª_öt_max
;

185 
__u32
 
	mãm≥øtuª_bﬂrd
;

186 
__u32
 
	mãm≥øtuª_bﬂrd_max
;

188 
__u32
 
	mãm≥øtuª_Êash
;

189 
__u32
 
	mãm≥øtuª_Êash_max
;

191 
__u32
 
	mvﬁège_öt
;

192 
__u32
 
	mvﬁège_öt_max
;

194 
__u32
 
	mvﬁège_aux
;

195 
__u32
 
	mvﬁège_aux_max
;

197 
__u32
 
	m£u_¸c_îr‹
;

198 
__u32
 
	m£u_¸c_îr‹_hi°‹y
;

200 
__u32
 
	m£u_ecc_îr‹
;

201 
__u32
 
	m£u_ecc_îr‹_hi°‹y
;

203 
__u32
 
	mecc_Áûuª_times
;

204 
__u32
 
	mhw_cfg_ch™√ls
;

205 
__u32
 
	mhw_cfg_lun£t_ö_ch™√l
;

206 
__u32
 
	mhw_cfg_lun_ö_lun£t
;

208 
__u8
 
	mpci_bus_numbî
;

209 
__u8
 
	mpci_¶Ÿ_numbî
;

210 
__u8
 
	mpci_func_numbî
;

211 
__u8
 
	mf‹˚_rw
;

212 
__u16
 
	mscsi_ho°_no
;

213 
__u16
 
	m k°a
;

215 
__u8
 
	m£rvi˚_èg
[32];

216 
__u8
 
	mmodñ_id
[40];

218 
__u64
 
	mÊashid
;

219 
__u64
 
	mho°_wrôe_£˘‹s
;

220 
__u64
 
	mtŸÆ_wrôe_£˘‹s
;

221 
__u64
 
	mho°_ªad_£˘‹s
;

222 
__u64
 
	mpowî_⁄_£c⁄ds
;

223 
__u64
 
	mpowî_cy˛e_cou¡
;

224 
__u64
 
	mˇ∑côy
;

225 
__u64
 
	mphysiˇl_ˇ∑côy
;

227 
__u32
 
	mho°_wrôe_b™dwidth
;

228 
__u32
 
	mho°_wrôe_i›s
;

230 
__u32
 
	mho°_wrôe_œãncy
;

231 
__u32
 
	mtŸÆ_wrôe_b™dwidth
;

233 
__u32
 
	mho°_ªad_b™dwidth
;

234 
__u32
 
	mho°_ªad_i›s
;

236 
__u32
 
	mho°_ªad_œãncy
;

237 
__u32
 
	mbuf„r_wrôe_≥r˚¡
;

239 
__u32
 
	mwrôe_am∂ifõr
;

240 
__u32
 
	mwrôe_am∂ifõr_li„time
;

242 
__u32
 
	mÂga_ªc⁄fig_sup
;

243 
__u32
 
	mÂga_ªc⁄fig_times
;

245 
__u32
 
	mecc_codew‹d_size
;

246 
__u32
 
	mecc_c‹ª˘i⁄_powî
;

248 
__u64
 
	mtŸÆ_gc_£˘‹s
;

249 
__u64
 
	mtŸÆ_wl_£˘‹s
;

250 
__u64
 
	mtŸÆ_îr_ªcovî_£˘‹s
;

252 
__u32
 
	mgc_b™dwidth
;

253 
__u32
 
	mwl_b™dwidth
;

254 
__u32
 
	mîr_ªcovî_b™dwidth
;

256 
__u8
 
	mª£rved
[636];

259 
	ssh™n⁄_¥ogªss_b¨
 {

260 
__u32
 
	mvÆid
;

261 
__u32
 
	m≥r˚¡
;

264 
	ssh™n⁄_¸óã_poﬁ_¨g
 {

265 
__u8
 
	mpoﬁ_id
;

266 
__u8
 
	mcou¡
;

267 
__u8
 
	mdev_id
[30];

268 
__u64
 
	mˇ∑côy
;

269 
__u8
 
	mª£rved
[80];

272 
	ssh™n⁄_ns_d©a
 {

273 
__u64
 
	mvîsi⁄
;

274 
	m«me
[256];

275 
	mª£rved
[3832];

277 
	#NS_PATH_LENGTH
 ((((
sh™n⁄_ns_d©a
 *)0)->
∑th
))

	)

279 
	#SUPPORT_SET_MAX_IOPS_BIT
 (0)

	)

280 
	#SUPPORT_SET_PRIORITY_BIT
 (1)

	)

281 
	#SUPPORT_SET_SECTORS_BIT
 (2)

	)

282 
	#SUPPORT_SET_MAX_IOPS_MASK
 (1 << 
SUPPORT_SET_MAX_IOPS_BIT
)

	)

283 
	#SUPPORT_SET_PRIORITY_MASK
 (1 << 
SUPPORT_SET_PRIORITY_BIT
)

	)

284 
	#SUPPORT_SET_SECTORS_MASK
 (1 << 
SUPPORT_SET_SECTORS_BIT
)

	)

285 
	#SET_MAX_IOPS_MASK
 
SUPPORT_SET_MAX_IOPS_MASK


	)

286 
	#SET_PRIORITY_MASK
 
SUPPORT_SET_PRIORITY_MASK


	)

287 
	#SET_SECTORS_MASK
 
SUPPORT_SET_SECTORS_MASK


	)

288 
	ssh™n⁄_ns_¨g
 {

289 
	m£âög
;

290 
	mpoﬁ_id
;

291 
	mvﬁ_idx
;

292 
	mmax_i›s
;

293 
	m¥i‹ôy
;

294 
	m£q_num
;

295 
__u64
 
	m£˘‹s
;

297 
	mblock_shi·
;

298 
	m°rùe_size
;

300 
sh™n⁄_ns_d©a
 *
	md©a
;

301 
__u64
 
	mn⁄e
;

303 
	m∑d
[4];

306 
	#MAX_DEVICE_NO
 26

	)

307 
	ssh™n⁄_poﬁ_°©us
 {

308 
	mid
;

309 
	m°©e
;

310 
	msdev_cou¡
;

311 
	m⁄löe_sdev_cou¡
;

312 
__u8
 
	msdev_id
[
MAX_DEVICE_NO
];

313 
	mns_cou¡
;

314 
	m∑d
;

315 
__u64
 
	mns_bôm≠
[16];

316 
u64
 
	mˇ∑côy
;

317 
u64
 
	mphysiˇl_£˘‹s
;

318 
__u64
 
	mu£d_£˘‹s
;

319 
__u32
 
	movî¥ovisi⁄
;

320 
__u32
 
	mac˚ss_mode
;

321 
__u32
 
	mªad⁄ly_ªas⁄
;

322 
	mª£rved
[36];

325 
	ssh™n⁄_ns_°©us
 {

326 
	midx
;

327 
	mpoﬁ_id
;

328 
	mmax_i›s
;

329 
	m¥i‹ôy
;

330 
__u64
 
	m£˘‹s
;

331 
	m£q_num
;

332 
	mblock_shi·
;

333 
	m°rù_size
;

334 
__u32
 
	m°©e
;

335 
u64
 
	mvÆid_£˘‹s
;

336 
__u32
 
	mho°_ªad_œãncy
;

337 
__u32
 
	mho°_ªad_b™dwidth
;

338 
__u32
 
	mho°_ªad_i›s
;

340 
__u32
 
	mho°_wrôe_œãncy
;

341 
__u32
 
	mho°_wrôe_b™dwidth
;

342 
__u32
 
	mho°_wrôe_i›s
;

344 
sh™n⁄_ns_d©a
 *
	md©a
;

345 
__u64
 
	mn⁄e
;

347 
	mª£rved
[48];

350 
	#SHN_PROGRESS_INVALID
 0

	)

351 
	#SHN_PROGRESS_VALID
 1

	)

352 
	#SHN_PROGRESS_DONE
 2

	)

353 
	#SHN_PROGRESS_NORFLASH_ERASE
 3

	)

354 
	#SHN_PROGRESS_NORFLASH_WRITE
 4

	)

355 
	#SHN_PROGRESS_NORFLASH_READ
 5

	)

356 
	#SHN_PROGRESS_REFRESH_MBR
 6

	)

358 
	ssh™n⁄_n‹Êash_›s
 {

359 *
	md©a
;

360 
__u32
 
	moff£t
;

361 
__u32
 
	mÀngth
;

362 
__u32
 
	mcmd
;

365 
	#SHN_NORFLASH_CMD_ERASE
 1

	)

366 
	#SHN_NORFLASH_CMD_WRITE
 2

	)

367 
	#SHN_NORFLASH_CMD_READ
 3

	)

370 
	#SHN_SET_FEATURE
 1

	)

371 
	#SHN_UNSET_FEATURE
 2

	)

373 
	ssh™n⁄_f‹m©_¨g
 {

374 
__u64
 
	mˇ∑côy
;

375 
__u32
 
	mu£r_logicb_shi·
;

376 
__u32
 
	m˛ór_hi°‹y
;

377 
__u32
 
	mf‹˚_f‹m©
;

378 
__u32
 
	m©omic_wrôe
;

379 
__u32
 
	m¥i‹ôize_wrôe
;

383 
	#ATOMIC_WRITE_SHIFT
 0

	)

384 
	#PRIO_WRITE_SHIFT
 1

	)

385 
	#FORCE_FORMAT_SHIFT
 2

	)

386 
	#CLEAR_HISTORY_SHIFT
 3

	)

387 
	#CLEAR_ERASE_COUNT_SHIFT
 4

	)

388 
	#SET_WRITE_BW_SHIFT
 5

	)

389 
	#OVERLAP_WRITE_SHIFT
 6

	)

390 
	#KEEP_MBR_PARAS_SHIFT
 63

	)

392 
	ssh™n⁄_f‹m©_¨g2
 {

393 
__u64
 
	mÊags
;

394 
__u64
 
	mˇ∑côy
;

395 
__u32
 
	mu£r_logicb_shi·
;

396 
__u32
 
	mîa£_cou¡
;

397 
__u16
 
	mmax_wrôe_bw
;

398 
__u8
 
	mlimô_bw_whí_diskfuŒ
;

399 
__u8
 
	m∑d
[5];

400 
__u64
 
	mª£rved
[12];

403 
	ssh™n⁄_ªg
 {

404 
__u32
 
	mªg
;

405 
__u32
 *
	mbuf
;

406 
__u32
 
	mÀn
;

409 
	ssh™n⁄_m¨k_¨g
 {

410 
__u32
 
	mlun_num
;

411 
__u32
 
	meblk_num
;

416 
	#SUPPORT_NEW_FORMAT_BIT
 0

	)

417 
	#SUPPORT_MARK_BAD_LUN_BIT
 1

	)

418 
	#SUPPORT_MARK_BAD_EBLK_BIT
 2

	)

419 
	#SUPPORT_CLEAR_ERASE_COUNT_BIT
 3

	)

420 
	#SUPPORT_NEW_DEV_STATUS_BIT
 4

	)

421 
	#SUPPORT_LARGE_ECC_POWER_BIT
 5

	)

422 
	#SUPPORT_UPDATE_MICROCODE_BIT
 6

	)

424 
	#SUPPORT_NEW_FORMAT
 (1 << 
SUPPORT_NEW_FORMAT_BIT
)

	)

425 
	#SUPPORT_MARK_BAD_LUN
 (1 << 
SUPPORT_MARK_BAD_LUN_BIT
)

	)

426 
	#SUPPORT_MARK_BAD_EBLK
 (1 << 
SUPPORT_MARK_BAD_EBLK_BIT
)

	)

427 
	#SUPPORT_CLEAR_ERASE_COUNT
 (1 << 
SUPPORT_CLEAR_ERASE_COUNT_BIT
)

	)

428 
	#SUPPORT_NEW_DEV_STATUS
 (1 << 
SUPPORT_NEW_DEV_STATUS_BIT
)

	)

429 
	#SUPPORT_LARGE_ECC_POWER
 (1 << 
SUPPORT_LARGE_ECC_POWER_BIT
)

	)

430 
	#SUPPORT_UPDATE_MICROCODE
 (1 << 
SUPPORT_UPDATE_MICROCODE_BIT
)

	)

436 
	#SHN_STATE_ATTACHED
 0

	)

437 
	#SHN_STATE_DETACHED
 1

	)

438 
	#SHN_STATE_RECONFIG
 8

	)

439 
	#SHN_STATE_RESET
 16

	)

440 
	#SHN_STATE_ERROR_BIT
 0x8000

	)

441 
	#SHN_STATE_MASK
 0x7FFF

	)

443 
	#SHN_MODE_READWRITE
 0

	)

444 
	#SHN_MODE_REDUCED_WRITE
 1

	)

445 
	#SHN_MODE_READONLY
 2

	)

447 
	#SHN_REASON_USER_REQUESTED
 0

	)

448 
	#SHN_REASON_LOW_OVERPROVISION
 1

	)

449 
	#SHN_REASON_HIGH_TEMPERATURE
 2

	)

450 
	#SHN_REASON_EPILOG_FAILURE
 3

	)

451 
	#SHN_REASON_MANY_BAD_BLOCKS
 4

	)

452 
	#SHN_REASON_SEU_ERROR
 5

	)

453 
	#SHN_REASON_SENTINEL
 6

	)

454 
	#SHN_REASON_ALLOC_FAILED
 7

	)

455 
	#SHN_REASON_BBT_NO_SPACE
 8

	)

458 
	#SHANNON_IOCMAGIC
 'x'

	)

460 
	#SHANNON_IOCRMBR
 
	`_IOR
(
SHANNON_IOCMAGIC
, 1, 
sh™n⁄_mbr
)

	)

463 
	#SHANNON_IOCSATTACH
 
	`_IOW
(
SHANNON_IOCMAGIC
, 4, )

	)

470 
	#SHANNON_IOCCDETACH
 
	`_IO
(
SHANNON_IOCMAGIC
, 5)

	)

473 
	#SHANNON_IOCRSTATUS
 
	`_IOR
(
SHANNON_IOCMAGIC
, 6, 
sh™n⁄_disk_°©us
)

	)

475 
	#SHANNON_IOCCEJECT
 
	`_IO
(
SHANNON_IOCMAGIC
, 8)

	)

494 
	#SHANNON_IOCSFORMAT
 
	`_IOW
(
SHANNON_IOCMAGIC
, 8, 
sh™n⁄_f‹m©_¨g
)

	)

497 
	#SHANNON_IOCRSMART
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 9, 
sh™n⁄_sm¨t
)

	)

504 
	#SHANNON_IOCWLED
 
	`_IOW
(
SHANNON_IOCMAGIC
, 10, )

	)

507 
	#SHANNON_IOCRECC
 
	`_IOR
(
SHANNON_IOCMAGIC
, 11, 
sh™n⁄_ecc_°©
)

	)

510 
	#SHANNON_IOCRVERINFO
 
	`_IOR
(
SHANNON_IOCMAGIC
, 12, 
sh™n⁄_vîsi⁄_öfo
)

	)

513 
	#SHANNON_IOCRPROGRESS
 
	`_IOR
(
SHANNON_IOCMAGIC
, 13, 
sh™n⁄_¥ogªss_b¨
)

	)

519 
	#SHANNON_IOCWNORERASE
 
	`_IOW
(
SHANNON_IOCMAGIC
, 14, 
sh™n⁄_n‹Êash_›s
)

	)

520 
	#SHANNON_IOCWNORWRITE
 
	`_IOW
(
SHANNON_IOCMAGIC
, 15, 
sh™n⁄_n‹Êash_›s
)

	)

521 
	#SHANNON_IOCRNORREAD
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 16, 
sh™n⁄_n‹Êash_›s
)

	)

526 
	#SHANNON_IOCCRELOAD
 
	`_IO
(
SHANNON_IOCMAGIC
, 18)

	)

531 
	#SHANNON_IOCRDREG
 
	`_IOR
(
SHANNON_IOCMAGIC
, 19, 
sh™n⁄_ªg
)

	)

532 
	#SHANNON_IOCWRREG
 
	`_IOR
(
SHANNON_IOCMAGIC
, 20, 
sh™n⁄_ªg
)

	)

534 
	#SHANNON_IOCQATOMIC_SIZE
 
	`_IO
(
SHANNON_IOCMAGIC
, 22)

	)

536 
	#SHANNON_IOCCRECONFIG
 
	`_IO
(
SHANNON_IOCMAGIC
, 23)

	)

537 
	#SHANNON_IOCCRESET
 
	`_IO
(
SHANNON_IOCMAGIC
, 24)

	)

539 
	#SHANNON_IOCNORINFO
 
	`_IO
(
SHANNON_IOCMAGIC
, 25)

	)

541 
	#SHANNON_IOCWBADLUN
 
	`_IOW
(
SHANNON_IOCMAGIC
, 26, )

	)

542 
	#SHANNON_IOCWBADBLK
 
	`_IOW
(
SHANNON_IOCMAGIC
, 27, 
sh™n⁄_m¨k_¨g
)

	)

544 
	#SHANNON_IOC_GET_CAP
 
	`_IOR
(
SHANNON_IOCMAGIC
, 30, 
__u64
 *)

	)

546 
	#SHANNON_IOC_FORMAT
 
	`_IOW
(
SHANNON_IOCMAGIC
, 31, 
sh™n⁄_f‹m©_¨g2
)

	)

548 
	#SHANNON_IOCRDEVSTATUS
 
	`_IOR
(
SHANNON_IOCMAGIC
, 32, 
sh™n⁄_dev_°©us
)

	)

553 
	#SHANNON_IOCCREATEPOOL
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 33, 
sh™n⁄_¸óã_poﬁ_¨g
)

	)

554 
	#SHANNON_IOCDELPOOL
 
	`_IO
(
SHANNON_IOCMAGIC
, 34)

	)

559 
	#SHANNON_IOCADDNS
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 35, 
sh™n⁄_ns_¨g
)

	)

560 
	#SHANNON_IOCDELNS
 
	`_IOW
(
SHANNON_IOCMAGIC
, 36, 
sh™n⁄_ns_¨g
)

	)

561 
	#SHANNON_IOCATTACHNS
 
	`_IOW
(
SHANNON_IOCMAGIC
, 37, 
sh™n⁄_ns_¨g
)

	)

562 
	#SHANNON_IOCDETACHNS
 
	`_IOW
(
SHANNON_IOCMAGIC
, 38, 
sh™n⁄_ns_¨g
)

	)

563 
	#SHANNON_IOCGETPOOL
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 39, 
sh™n⁄_poﬁ_°©us
)

	)

564 
	#SHANNON_IOCGETNS
 
	`_IOWR
(
SHANNON_IOCMAGIC
, 40, 
sh™n⁄_ns_°©us
)

	)

565 
	#SHANNON_IOCGETPOOLCAP
 
	`_IOR
(
SHANNON_IOCMAGIC
, 41, )

	)

566 
	#SHANNON_IOCSETNS
 
	`_IOW
(
SHANNON_IOCMAGIC
, 42, 
sh™n⁄_ns_¨g
)

	)

568 
	#SHANNON_IOCRECC_LARGE
 
	`_IOR
(
SHANNON_IOCMAGIC
, 43, 
sh™n⁄_ecc_°©
)

	)

570 
	#SHANNON_IOCMAXNR
 44

	)

	@shannon_kcore.c

1 
	~"sh™n⁄_kc‹e.h
"

2 
	~<löux/•ölock.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/muãx.h
>

5 
	~<löux/bô›s.h
>

6 
	~<löux/bôm≠.h
>

7 
	~<löux/io.h
>

8 
	~<löux/mm.h
>

9 
	~<asm/uac˚ss.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/mempoﬁ.h
>

12 
	~<löux/vîsi⁄.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/vmÆloc.h
>

15 
	~<löux/îr.h
>

16 
	~<löux/°rög.h
>

17 
	~<löux/øndom.h
>

18 
	~<löux/¥e„tch.h
>

21 #i‚de‡
CONFIG_PROVE_LOCKING


23 
	$sh™n⁄_•ö_lock_öô
(
sh™n⁄_•ölock_t
 *
lock
)

25 
	`•ö_lock_öô
((
•ölock_t
 *)
lock
);

26 
	}
}

28 
	$sh™n⁄_•ö_lock
(
sh™n⁄_•ölock_t
 *
lock
)

30 
	`•ö_lock
((
•ölock_t
 *)
lock
);

31 
	}
}

33 
	$sh™n⁄_•ö_lock_bh
(
sh™n⁄_•ölock_t
 *
lock
)

35 
	`•ö_lock_bh
((
•ölock_t
 *)
lock
);

36 
	}
}

38 
	$sh™n⁄_•ö_lock_úq
(
sh™n⁄_•ölock_t
 *
lock
)

40 
	`•ö_lock_úq
((
•ölock_t
 *)
lock
);

41 
	}
}

43 
	$sh™n⁄_•ö_lock_úqßve
(
sh™n⁄_•ölock_t
 *
lock
)

45 
Êags
;

46 
	`•ö_lock_úqßve
((
•ölock_t
 *)
lock
, 
Êags
);

47  
Êags
;

48 
	}
}

50 
	$sh™n⁄_•ö_u∆ock
(
sh™n⁄_•ölock_t
 *
lock
)

52 
	`•ö_u∆ock
((
•ölock_t
 *)
lock
);

53 
	}
}

55 
	$sh™n⁄_•ö_u∆ock_bh
(
sh™n⁄_•ölock_t
 *
lock
)

57 
	`•ö_u∆ock_bh
((
•ölock_t
 *)
lock
);

58 
	}
}

60 
	$sh™n⁄_•ö_u∆ock_úq
(
sh™n⁄_•ölock_t
 *
lock
)

62 
	`•ö_u∆ock_úq
((
•ölock_t
 *)
lock
);

63 
	}
}

65 
	$sh™n⁄_•ö_u∆ock_úqª°‹e
(
sh™n⁄_•ölock_t
 *
lock
, 
Êags
)

67 
	`•ö_u∆ock_úqª°‹e
((
•ölock_t
 *)
lock
, 
Êags
);

68 
	}
}

70 
	$sh™n⁄_•ö_åylock
(
sh™n⁄_•ölock_t
 *
lock
)

72  
	`•ö_åylock
((
•ölock_t
 *)
lock
);

73 
	}
}

75 
	$sh™n⁄_•ö_åylock_úq
(
sh™n⁄_•ölock_t
 *
lock
)

77  
	`•ö_åylock_úq
((
•ölock_t
 *)
lock
);

78 
	}
}

80 
	$sh™n⁄_rwlock_öô
(
sh™n⁄_rwlock_t
 *
lock
)

82 
	`rwlock_öô
((
rwlock_t
 *)
lock
);

83 
	}
}

85 
	$sh™n⁄_ªad_lock
(
sh™n⁄_rwlock_t
 *
lock
)

87 
	`ªad_lock
((
rwlock_t
 *)
lock
);

88 
	}
}

90 
	$sh™n⁄_ªad_lock_bh
(
sh™n⁄_rwlock_t
 *
lock
)

92 
	`ªad_lock_bh
((
rwlock_t
 *)
lock
);

93 
	}
}

95 
	$sh™n⁄_ªad_lock_úq
(
sh™n⁄_rwlock_t
 *
lock
)

97 
	`ªad_lock_úq
((
rwlock_t
 *)
lock
);

98 
	}
}

100 
	$sh™n⁄_ªad_lock_úqßve
(
sh™n⁄_rwlock_t
 *
lock
)

102 
Êags
;

103 
	`ªad_lock_úqßve
((
rwlock_t
 *)
lock
, 
Êags
);

104  
Êags
;

105 
	}
}

107 
	$sh™n⁄_ªad_u∆ock
(
sh™n⁄_rwlock_t
 *
lock
)

109 
	`ªad_u∆ock
((
rwlock_t
 *)
lock
);

110 
	}
}

112 
	$sh™n⁄_ªad_u∆ock_bh
(
sh™n⁄_rwlock_t
 *
lock
)

114 
	`ªad_u∆ock_bh
((
rwlock_t
 *)
lock
);

115 
	}
}

117 
	$sh™n⁄_ªad_u∆ock_úq
(
sh™n⁄_rwlock_t
 *
lock
)

119 
	`ªad_u∆ock_úq
((
rwlock_t
 *)
lock
);

120 
	}
}

122 
	$sh™n⁄_ªad_u∆ock_úqª°‹e
(
sh™n⁄_rwlock_t
 *
lock
, 
Êags
)

124 
	`ªad_u∆ock_úqª°‹e
((
rwlock_t
 *)
lock
, 
Êags
);

125 
	}
}

127 
	$sh™n⁄_ªad_åylock
(
sh™n⁄_rwlock_t
 *
lock
)

129  
	`ªad_åylock
((
rwlock_t
 *)
lock
);

130 
	}
}

132 
	$sh™n⁄_wrôe_lock
(
sh™n⁄_rwlock_t
 *
lock
)

134 
	`wrôe_lock
((
rwlock_t
 *)
lock
);

135 
	}
}

137 
	$sh™n⁄_wrôe_lock_bh
(
sh™n⁄_rwlock_t
 *
lock
)

139 
	`wrôe_lock_bh
((
rwlock_t
 *)
lock
);

140 
	}
}

142 
	$sh™n⁄_wrôe_lock_úq
(
sh™n⁄_rwlock_t
 *
lock
)

144 
	`wrôe_lock_úq
((
rwlock_t
 *)
lock
);

145 
	}
}

147 
	$sh™n⁄_wrôe_lock_úqßve
(
sh™n⁄_rwlock_t
 *
lock
)

149 
Êags
;

150 
	`wrôe_lock_úqßve
((
rwlock_t
 *)
lock
, 
Êags
);

151  
Êags
;

152 
	}
}

154 
	$sh™n⁄_wrôe_u∆ock
(
sh™n⁄_rwlock_t
 *
lock
)

156 
	`wrôe_u∆ock
((
rwlock_t
 *)
lock
);

157 
	}
}

159 
	$sh™n⁄_wrôe_u∆ock_bh
(
sh™n⁄_rwlock_t
 *
lock
)

161 
	`wrôe_u∆ock_bh
((
rwlock_t
 *)
lock
);

162 
	}
}

164 
	$sh™n⁄_wrôe_u∆ock_úq
(
sh™n⁄_rwlock_t
 *
lock
)

166 
	`wrôe_u∆ock_úq
((
rwlock_t
 *)
lock
);

167 
	}
}

169 
	$sh™n⁄_wrôe_u∆ock_úqª°‹e
(
sh™n⁄_rwlock_t
 *
lock
, 
Êags
)

171 
	`wrôe_u∆ock_úqª°‹e
((
rwlock_t
 *)
lock
, 
Êags
);

172 
	}
}

174 
	$sh™n⁄_wrôe_åylock
(
sh™n⁄_rwlock_t
 *
lock
)

176  
	`wrôe_åylock
((
rwlock_t
 *)
lock
);

177 
	}
}

182 #i‡
deföed
(
__LITTLE_ENDIAN
)

183 
	#BITOP_LE_MAGIC
 0

	)

184 #ñi‡
deföed
(
__BIG_ENDIAN
)

185 
	#BITOP_LE_MAGIC
 ((64-1Ë& ~0x7)

	)

189 #i‚de‡
CONFIG_PROVE_LOCKING


190 
	$sh™n⁄_muãx_öô
(
sh™n⁄_muãx_t
 *
lock
)

192 
	`muãx_öô
((
muãx
 *)
lock
);

193 
	}
}

195 
	$sh™n⁄_muãx_öô2
(
sh™n⁄_muãx_t
 *
lock
)

197 
	`muãx_öô
((
muãx
 *)
lock
);

198 
	}
}

200 
	$sh™n⁄_muãx_lock
(
sh™n⁄_muãx_t
 *
lock
)

202 
	`muãx_lock
((
muãx
 *)
lock
);

203 
	}
}

205 
	$sh™n⁄_muãx_åylock
(
sh™n⁄_muãx_t
 *
lock
)

207  
	`muãx_åylock
((
muãx
 *)
lock
);

208 
	}
}

210 
	$sh™n⁄_muãx_u∆ock
(
sh™n⁄_muãx_t
 *
lock
)

212 
	`muãx_u∆ock
((
muãx
 *)
lock
);

213 
	}
}

218 
	$sh™n⁄_©omic_£t
(
sh™n⁄_©omic_t
 *
v
, 
i
)

220 
	`©omic_£t
((
©omic_t
*)
v
, 
i
);

221 
	}
}

223 
	$sh™n⁄_©omic64_£t
(
sh™n⁄_©omic64_t
 *
v
, 
i
)

225 
	`©omic64_£t
((
©omic64_t
 *)
v
, 
i
);

226 
	}
}

228 
	$sh™n⁄_©omic_add
(
i
, 
sh™n⁄_©omic_t
 *
v
)

230 
	`©omic_add
(
i
, (
©omic_t
 *)
v
);

231 
	}
}

233 
	$sh™n⁄_©omic64_add
(
i
, 
sh™n⁄_©omic64_t
 *
v
)

235 
	`©omic64_add
(
i
, (
©omic64_t
 *)
v
);

236 
	}
}

238 
	$sh™n⁄_©omic_sub
(
i
, 
sh™n⁄_©omic_t
 *
v
)

240 
	`©omic_sub
(
i
, (
©omic_t
 *)
v
);

241 
	}
}

243 
	$sh™n⁄_©omic64_sub
(
i
, 
sh™n⁄_©omic64_t
 *
v
)

245 
	`©omic64_sub
(
i
, (
©omic64_t
 *)
v
);

246 
	}
}

248 
	$sh™n⁄_©omic_dec
(
sh™n⁄_©omic_t
 *
v
)

250 
	`©omic_dec
((
©omic_t
*)
v
);

251 
	}
}

253 
	$sh™n⁄_©omic64_dec
(
sh™n⁄_©omic64_t
 *
v
)

255 
	`©omic64_dec
((
©omic64_t
*)
v
);

256 
	}
}

258 
	$sh™n⁄_©omic_öc
(
sh™n⁄_©omic_t
 *
v
)

260 
	`©omic_öc
((
©omic_t
*)
v
);

261 
	}
}

263 
	$sh™n⁄_©omic64_öc
(
sh™n⁄_©omic64_t
 *
v
)

265 
	`©omic64_öc
((
©omic64_t
 *)
v
);

266 
	}
}

268 
	$sh™n⁄_©omic_ªad
(c⁄° 
sh™n⁄_©omic_t
 *
v
)

270  
	`©omic_ªad
((
©omic_t
*)
v
);

271 
	}
}

273 
	$sh™n⁄_©omic64_ªad
(c⁄° 
sh™n⁄_©omic64_t
 *
v
)

275  
	`©omic64_ªad
((
©omic64_t
 *)
v
);

276 
	}
}

278 
	$sh™n⁄_©omic_dec_™d_ã°
(
sh™n⁄_©omic_t
 *
v
)

280  
	`©omic_dec_™d_ã°
((
©omic_t
*)
v
);

281 
	}
}

283 
	$sh™n⁄_©omic_dec_ªtu∫
(
sh™n⁄_©omic_t
 *
v
)

285  
	`©omic_dec_ªtu∫
((
©omic_t
 *)
v
);

286 
	}
}

288 
	$sh™n⁄_©omic64_dec_™d_ã°
(
sh™n⁄_©omic64_t
 *
v
)

290  
	`©omic64_dec_™d_ã°
((
©omic64_t
*)
v
);

291 
	}
}

293 
	$sh™n⁄_©omic_öc_™d_ã°
(
sh™n⁄_©omic_t
 *
v
)

295  
	`©omic_öc_™d_ã°
((
©omic_t
*)
v
);

296 
	}
}

298 
	$sh™n⁄_©omic64_öc_ªtu∫
(
sh™n⁄_©omic64_t
 *
v
)

300  
	`©omic64_öc_ªtu∫
((
©omic64_t
 *)
v
);

301 
	}
}

303 
	$sh™n⁄_©omic64_öc_™d_ã°
(
sh™n⁄_©omic64_t
 *
v
)

305  
	`©omic64_öc_™d_ã°
((
©omic64_t
*)
v
);

306 
	}
}

310 
	$sh™n⁄_föd_fú°_zîo_bô
(c⁄° *
addr
, 
size
)

312  
	`föd_fú°_zîo_bô
(
addr
, 
size
);

313 
	}
}

315 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 25)

317 #ifde‡
__LITTLE_ENDIAN


319 
	#gíîic_föd_√xt_À_bô
(
addr
, 
size
, 
off£t
) \

320 
	`föd_√xt_bô
(
addr
, 
size
, 
off£t
)

	)

325 
ölöe
 
	$ext2_swabp
(c⁄° * 
x
)

327 #i‡
BITS_PER_LONG
 == 64

328  (Ë
	`__swab64p
((
u64
 *Ë
x
);

329 #ñi‡
BITS_PER_LONG
 == 32

330  (Ë
	`__swab32p
((
u32
 *Ë
x
);

332 #îr‹ 
BITS_PER_LONG
 
nŸ
 
deföed


334 
	}
}

337 
ölöe
 
	$ext2_swab
(c⁄° 
y
)

339 #i‡
BITS_PER_LONG
 == 64

340  (Ë
	`__swab64
((
u64
Ë
y
);

341 #ñi‡
BITS_PER_LONG
 == 32

342  (Ë
	`__swab32
((
u32
Ë
y
);

344 #îr‹ 
BITS_PER_LONG
 
nŸ
 
deföed


346 
	}
}

348 
	$gíîic_föd_√xt_À_bô
(c⁄° *
addr
, 

349 
size
, 
off£t
)

351 c⁄° *
p
 = 
addr
 + 
	`BITOP_WORD
(
off£t
);

352 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
 - 1);

353 
tmp
;

355 i‡(
off£t
 >
size
)

356  
size
;

357 
size
 -
ªsu…
;

358 
off£t
 &(
BITS_PER_LONG
 - 1UL);

359 i‡(
off£t
) {

360 
tmp
 = 
	`ext2_swabp
(
p
++);

361 
tmp
 &(~0UL << 
off£t
);

362 i‡(
size
 < 
BITS_PER_LONG
)

363 
found_fú°
;

364 i‡(
tmp
)

365 
found_middÀ
;

366 
size
 -
BITS_PER_LONG
;

367 
ªsu…
 +
BITS_PER_LONG
;

370 
size
 & ~(
BITS_PER_LONG
 - 1)) {

371 
tmp
 = *(
p
++);

372 i‡(
tmp
)

373 
found_middÀ_sw≠
;

374 
ªsu…
 +
BITS_PER_LONG
;

375 
size
 -
BITS_PER_LONG
;

377 i‡(!
size
)

378  
ªsu…
;

379 
tmp
 = 
	`ext2_swabp
(
p
);

380 
found_fú°
:

381 
tmp
 &(~0UL >> (
BITS_PER_LONG
 - 
size
));

382 i‡(
tmp
 == 0UL)

383  
ªsu…
 + 
size
;

384 
found_middÀ
:

385  
ªsu…
 + 
	`__ffs
(
tmp
);

387 
found_middÀ_sw≠
:

388  
ªsu…
 + 
	`__ffs
(
	`ext2_swab
(
tmp
));

389 
	}
}

395 
	$sh™n⁄_föd_fú°_bô_À
(c⁄° *
addr
, 
size
)

397 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 38)

398  
	`föd_√xt_bô_À
(
addr
, 
size
, 0);

400  
	`gíîic_föd_√xt_À_bô
(
addr
, 
size
, 0);

402 
	}
}

404 
	$sh™n⁄_föd_fú°_bô
(c⁄° *
addr
, 
size
)

406  
	`föd_√xt_bô
(
addr
, 
size
, 0);

407 
	}
}

409 
	$sh™n⁄_föd_√xt_bô_À
(c⁄° *
addr
, 
size
,

410 
off£t
)

412 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 38)

413  
	`föd_√xt_bô_À
(
addr
, 
size
, 
off£t
);

415  
	`gíîic_föd_√xt_À_bô
(
addr
, 
size
, 
off£t
);

417 
	}
}

419 
	$sh™n⁄_ã°_™d_˛ór_bô_À
(
ƒ
, *
addr
)

421  
	`ã°_™d_˛ór_bô
(
ƒ
 ^ 
BITOP_LE_MAGIC
, 
addr
);

422 
	}
}

424 
	$sh™n⁄_£t_bô_À
(
ƒ
, *
addr
)

426 
	`£t_bô
(
ƒ
 ^ 
BITOP_LE_MAGIC
, 
addr
);

427 
	}
}

429 
	$sh™n⁄_ã°_bô_À
(
ƒ
, c⁄° *
addr
)

431  
	`ã°_bô
(
ƒ
 ^ 
BITOP_LE_MAGIC
, 
addr
);

432 
	}
}

434 
	$sh™n⁄_ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

436  
	`ã°_™d_£t_bô
(
ƒ
, 
addr
);

437 
	}
}

439 
	$sh™n⁄_ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

441  
	`ã°_™d_˛ór_bô
(
ƒ
, 
addr
);

442 
	}
}

444 
	$sh™n⁄_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê*
addr
)

446  
	`ã°_bô
(
ƒ
, 
addr
);

447 
	}
}

449 
	$sh™n⁄_£t_bô
(
ƒ
, *
addr
)

451 
	`£t_bô
(
ƒ
, 
addr
);

452 
	}
}

454 
	$sh™n⁄_˛ór_bô
(
ƒ
, *
addr
)

456 
	`˛ór_bô
(
ƒ
, 
addr
);

457 
	}
}

461 
	$__sh™n⁄_bôm≠_x‹
(*
d°
, c⁄° *
bôm≠1
, c⁄° *
bôm≠2
, 
bôs
)

463 
	`__bôm≠_x‹
(
d°
, 
bôm≠1
, 
bôm≠2
, 
bôs
);

464 
	}
}

466 
	$__sh™n⁄_bôm≠_weight
(c⁄° *
bôm≠
, 
bôs
)

468  
	`__bôm≠_weight
(
bôm≠
, 
bôs
);

469 
	}
}

474 
u32
 
	$sh™n⁄_øw_ªadl
(c⁄° vﬁ©ûê
__iomem
 *
addr
)

476  
	`__øw_ªadl
(
addr
);

477 
	}
}

479 
	$sh™n⁄_øw_wrôñ
(
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
)

481 
	`__øw_wrôñ
(
vÆue
, 
addr
);

482 
	}
}

484 
u32
 
	$sh™n⁄_ªadl
(c⁄° vﬁ©ûê
__iomem
 *
addr
)

486  
	`ªadl
(
addr
);

487 
	}
}

489 
u32
 
	$sh™n⁄_i‹ód32
(
__iomem
 *
addr
)

491  
	`i‹ód32
(
addr
);

492 
	}
}

494 
	$sh™n⁄_wrôñ
(
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
)

496 
	`wrôñ
(
vÆue
, 
addr
);

497 
	}
}

499 
	$sh™n⁄_iowrôe32
(
u32
 
vÆue
, 
__iomem
 *
addr
)

501 
	`iowrôe32
(
vÆue
, 
addr
);

502 
	}
}

504 
u16
 
	$sh™n⁄_mem_ªadw
(vﬁ©ûê*
addr
)

506  
	`__À16_to_˝u
(*(
u16
 *)
addr
);

507 
	}
}

509 
	$sh™n⁄_mem_wrôew
(
u16
 
vÆue
, *
addr
)

511 *(
u16
 *)
addr
 = 
	`__˝u_to_À16
(
vÆue
);

512 
	}
}

514 
	$sh™n⁄_˝u_to_À16s
(*
addr
)

516 
	`__˝u_to_À16s
(
addr
);

517 
	}
}

519 
u32
 
	$sh™n⁄_mem_ªadl
(vﬁ©ûê*
addr
)

521  
	`__À32_to_˝u
(*(
u32
 *)
addr
);

522 
	}
}

524 
	$sh™n⁄_mem_wrôñ
(
u32
 
vÆue
, *
addr
)

526 *(
u32
 *)
addr
 = 
	`__˝u_to_À32
(
vÆue
);

527 
	}
}

529 
	$sh™n⁄_˝u_to_À32s
(*
addr
)

531 
	`__˝u_to_À32s
(
addr
);

532 
	}
}

534 
u32
 
	$sh™n⁄_˝u_to_be32
(
u32
 
vÆ
)

536  
	`__˝u_to_be32
(
vÆ
);

537 
	}
}

539 
	$sh™n⁄_˝u_to_À64s
(*
addr
)

541 
	`__˝u_to_À64s
(
addr
);

542 
	}
}

544 
u64
 
	$sh™n⁄_˝u_to_be64
(
u64
 
vÆ
)

546  
	`__˝u_to_be64
(
vÆ
);

547 
	}
}

549 
u64
 
	$sh™n⁄_mem_ªadq
(vﬁ©ûê*
addr
)

551  
	`__À64_to_˝u
(*(
u64
 *)
addr
);

552 
	}
}

554 
	$sh™n⁄_mem_wrôeq
(
u64
 
vÆue
, *
addr
)

556 *(
u64
 *)
addr
 = 
	`__˝u_to_À64
(
vÆue
);

557 
	}
}

559 
__iomem
 *
	$sh™n⁄_i‹em≠
(
sh™n⁄_phys_addr_t
 
off£t
, 
size
)

561  
	`i‹em≠
(
off£t
, 
size
);

562 
	}
}

564 
	$sh™n⁄_iounm≠
(vﬁ©ûê
__iomem
 *
addr
)

566 
	`iounm≠
(
addr
);

567 
	}
}

569 
	$sh™n⁄_mem˝y_‰omio
(*
de°
, *
sour˚
, 
cou¡
)

571 
	`mem˝y_‰omio
(
de°
, 
sour˚
, 
cou¡
);

572 
	}
}

575 
	$sh™n⁄_c›y_‰om_u£r
(*
to
, c⁄° 
__u£r
 * 
‰om
, 
n
)

577  
	`c›y_‰om_u£r
(
to
, 
‰om
, 
n
);

578 
	}
}

580 
	$sh™n⁄_c›y_to_u£r
(
__u£r
 *
to
,

581 c⁄° *
‰om
, 
n
)

583  
	`c›y_to_u£r
(
to
, 
‰om
, 
n
);

584 
	}
}

587 
	$sh™n⁄_‰ì_∑ge
(
addr
)

589 
	`‰ì_∑ge
(
addr
);

590 
	}
}

592 
	$__sh™n⁄_gë_‰ì_∑ge
(
gÂ_t
 
gÂ
)

594  
	`__gë_‰ì_∑ge
(
gÂ
);

595 
	}
}

598 *
	$sh™n⁄_∑ge_addªss
(
sh™n⁄_∑ge
 *
∑ge
)

600  
	`∑ge_addªss
((
∑ge
 *)page);

601 
	}
}

604 *
	$sh™n⁄_vzÆloc
(
size
)

606 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 36)

607  
	`vzÆloc
(
size
);

609 *
addr
 = 
	`vmÆloc
(
size
);

610 i‡(
addr
)

611 
	`mem£t
(
addr
, 0, 
size
);

613  
addr
;

615 
	}
}

617 *
	$sh™n⁄_vmÆloc
(
size
)

619  
	`vmÆloc
(
size
);

620 
	}
}

622 *
	$__sh™n⁄_vmÆloc
(
size
, 
sh™n⁄_gÂ_t
 
gÂ_mask
, 
sh™n⁄_pg¥Ÿ_t
 
¥Ÿ
)

624  
	`__vmÆloc
(
size
, 
gÂ_mask
, *((
pg¥Ÿ_t
 *)&
¥Ÿ
));

625 
	}
}

627 
	$sh™n⁄_v‰ì
(*
addr
)

629 
	`v‰ì
(
addr
);

630 
	}
}

632 *
	$sh™n⁄_vút_to_∑ge
(c⁄° *
addr
)

634  
	`vút_to_∑ge
(
addr
);

635 
	}
}

638 
sh™n⁄_kmem_ˇche_t
 *
sh™n⁄_kmem_ˇche_¸óã
(c⁄° *
«me
, 
size_t
 
size
, size_à
Æign
,

639 
Êags
, (*
˘‹
)(*))

641 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

643  
	`kmem_ˇche_¸óã
(
«me
, 
size
, 
Æign
, 
Êags
, 
˘‹
);

647  
	`kmem_ˇche_¸óã
(
«me
, 
size
, 
Æign
, 
Êags
, ((*)(*, 
kmem_ˇche
 *, ))
˘‹
, 
NULL
);

650 
	}
}

652 
	$sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_kmem_ˇche_t
 *
ˇchï
)

654 
	`kmem_ˇche_de°roy
((
kmem_ˇche
 *)
ˇchï
);

655 
	}
}

657 *
	$sh™n⁄_kzÆloc
(
size_t
 
size
, 
sh™n⁄_gÂ_t
 
Êags
)

659  
	`kzÆloc
(
size
, 
Êags
);

660 
	}
}

662 *
	$sh™n⁄_kmÆloc
(
size_t
 
size
, 
sh™n⁄_gÂ_t
 
Êags
)

664  
	`kmÆloc
(
size
, 
Êags
);

665 
	}
}

667 
	$sh™n⁄_k‰ì
(c⁄° *
p
)

669 
	`k‰ì
(
p
);

670 
	}
}

673 
sh™n⁄_mempoﬁ_t
 *
	$sh™n⁄_mempoﬁ_¸óã_kmÆloc_poﬁ
(
mö_ƒ
, 
size_t
 
size
)

675  
	`mempoﬁ_¸óã_kmÆloc_poﬁ
(
mö_ƒ
, 
size
);

676 
	}
}

678 
sh™n⁄_mempoﬁ_t
 *
	$sh™n⁄_mempoﬁ_¸óã_¶ab_poﬁ
(
mö_ƒ
, 
sh™n⁄_kmem_ˇche_t
 *
kc
)

680  
	`mempoﬁ_¸óã_¶ab_poﬁ
(
mö_ƒ
, (
kmem_ˇche
 *)
kc
);

681 
	}
}

683 
	$sh™n⁄_mempoﬁ_de°roy
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
)

685 
	`mempoﬁ_de°roy
((
mempoﬁ_t
 *)
poﬁ
);

686 
	}
}

688 * 
	$sh™n⁄_mempoﬁ_Æloc
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
, 
sh™n⁄_gÂ_t
 
gÂ_mask
)

690  
	`mempoﬁ_Æloc
((
mempoﬁ_t
 *)
poﬁ
, 
gÂ_mask
);

691 
	}
}

693 
	$sh™n⁄_mempoﬁ_‰ì
(*
ñemít
, 
sh™n⁄_mempoﬁ_t
 *
poﬁ
)

695 
	`mempoﬁ_‰ì
(
ñemít
, (
mempoﬁ_t
 *)
poﬁ
);

696 
	}
}

698 
	$gë_mempoﬁ_cou¡
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
)

700  ((
mempoﬁ_t
 *)
poﬁ
)->
cuº_ƒ
;

701 
	}
}

708 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 22)

709 *
	$kva•rötf
(
gÂ_t
 
gÂ
, c⁄° *
fmt
, 
va_li°
 
≠
)

711 
Àn
;

712 *
p
;

713 
va_li°
 
aq
;

715 
	`va_c›y
(
aq
, 
≠
);

716 
Àn
 = 
	`v¢¥ötf
(
NULL
, 0, 
fmt
, 
aq
);

717 
	`va_íd
(
aq
);

719 
p
 = 
	`kmÆloc
(
Àn
+1, 
gÂ
);

720 i‡(!
p
)

721  
NULL
;

723 
	`v¢¥ötf
(
p
, 
Àn
+1, 
fmt
, 
≠
);

725  
p
;

726 
	}
}

730 *
	$sh™n⁄_ka•rötf
(
sh™n⁄_gÂ_t
 
gÂ
, c⁄° *
fmt
, ...)

732 
va_li°
 
≠
;

733 *
p
;

735 
	`va_°¨t
(
≠
, 
fmt
);

736 
p
 = 
	`kva•rötf
(
gÂ
, 
fmt
, 
≠
);

737 
	`va_íd
(
≠
);

739  
p
;

740 
	}
}

742 
size_t
 
	$sh™n⁄_°∫Àn
(c⁄° *
s
, 
size_t
 
cou¡
)

744  
	`°∫Àn
(
s
, 
cou¡
);

745 
	}
}

747 
	$sh™n⁄_•rötf
(*
buf
, c⁄° *
fmt
, ...)

749 
va_li°
 
¨gs
;

750 
i
;

752 
	`va_°¨t
(
¨gs
, 
fmt
);

753 
i
 = 
	`v¢¥ötf
(
buf
, 
INT_MAX
, 
fmt
, 
¨gs
);

754 
	`va_íd
(
¨gs
);

756  
i
;

757 
	}
}

759 
	$sh™n⁄_¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

761 
va_li°
 
¨gs
;

762 
i
;

764 
	`va_°¨t
(
¨gs
, 
fmt
);

765 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

766 
	`va_íd
(
¨gs
);

768  
i
;

769 
	}
}

771 
	$sh™n⁄_sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

773  
	`sim∂e_°πﬁ
(
˝
, 
ídp
, 
ba£
);

774 
	}
}

776 
	$sh™n⁄_dump_°ack
()

778 
	`dump_°ack
();

779 
	}
}

781 
	$sh™n⁄_¥ötk_øãlimô
()

783  
	`¥ötk_øãlimô
();

784 
	}
}

787 *
	$sh™n⁄_mem£t
(*
s
, 
c
, 
size_t
 
n
)

789  
	`mem£t
(
s
, 
c
, 
n
);

790 
	}
}

792 *
	$sh™n⁄_mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

794  
	`mem˝y
(
de°
, 
§c
 ,
cou¡
);

795 
	}
}

797 
	$sh™n⁄_memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

799  
	`memcmp
(
cs
, 
˘
, 
cou¡
);

800 
	}
}

803 
asmlökage
 
	$sh™n⁄_¥ötk
(c⁄° *
fmt
, ...)

805 
va_li°
 
¨gs
;

806 
r
;

808 
	`va_°¨t
(
¨gs
, 
fmt
);

809 #i‡!
	`deföed
(
__VMKLNX__
)

810 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

812 
va_li°
 
¨gs_c›y
;

814 
	`va_c›y
(
¨gs_c›y
, 
¨gs
);

815 
	`vmk_vLogNoLevñ
(
VMK_LOG_URGENCY_NORMAL
, 
fmt
, 
¨gs
);

816 
r
 = 
	`vmk_V¢¥ötf
(
NULL
, 0, 
fmt
, 
¨gs_c›y
);

818 
	`va_íd
(
¨gs_c›y
);

820 
	`va_íd
(
¨gs
);

822  
r
;

823 
	}
}

826 
	$gë_num_⁄löe_˝us
()

828  
	`num_⁄löe_˝us
();

829 
	}
}

831 
	$sh™n⁄_hweight_l⁄g
(
w
)

833  
	`hweight_l⁄g
(
w
);

834 
	}
}

836 
	$sh™n⁄_hweight32
(
w
)

838  
	`hweight32
(
w
);

839 
	}
}

841 
	$sh™n⁄_gë_cou¡_‹dî
(
cou¡
)

843  
	`gë_cou¡_‹dî
(
cou¡
);

844 
	}
}

847 
	gsh™n⁄_pm_qos_vÆue
 = 1;

848 
	gsh™n⁄_pm_qos_dißbÀ
 = 0;

849 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0)

851 
	~<löux/pm_qos.h
>

852 
	$sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
)

854 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

857 *
l
 = 
	`kzÆloc
((
pm_qos_ªque°
), 
GFP_SHANNON
);

859 i‡(*
l
 =
NULL
)

862 
	`pm_qos_add_ªque°
((
pm_qos_ªque°
 *)(*
l
), 
qos
, 
vÆue
);

864 
	}
}

866 
	$sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
)

868 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

871 i‡(*
l
 !
NULL
)

872 
	`pm_qos_upd©e_ªque°
((
pm_qos_ªque°
 *)(*
l
), 
√w_vÆue
);

874 
	}
}

876 
	$sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
)

878 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

881 i‡(*
l
 !
NULL
) {

882 
	`pm_qos_ªmove_ªque°
((
pm_qos_ªque°
 *)(*
l
));

883 
	`k‰ì
(*
l
);

884 *
l
 = 
NULL
;

886 
	}
}

888 
	$sh™n⁄_pm_qos_is_ªquúed
(
qos
)

890 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

893  (
	`pm_qos_ªque°
(
qos
Ë=
sh™n⁄_pm_qos_vÆue
);

894 
	}
}

897 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 36)

899 
	~<löux/pm_qos_∑øms.h
>

900 
	$sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
)

902 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

905 *
l
 = 
	`kzÆloc
((
pm_qos_ªque°_li°
), 
GFP_SHANNON
);

907 i‡(*
l
 =
NULL
)

910 
	`pm_qos_add_ªque°
((
pm_qos_ªque°_li°
 *)(*
l
), 
qos
, 
vÆue
);

912 
	}
}

914 
	$sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
)

916 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

919 i‡(*
l
 !
NULL
)

920 
	`pm_qos_upd©e_ªque°
((
pm_qos_ªque°_li°
 *)(*
l
), 
√w_vÆue
);

923 
	}
}

925 
	$sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
)

927 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

930 i‡(*
l
 !
NULL
) {

931 
	`pm_qos_ªmove_ªque°
((
pm_qos_ªque°_li°
 *)(*
l
));

932 
	`k‰ì
(*
l
);

933 *
l
 = 
NULL
;

935 
	}
}

937 
	$sh™n⁄_pm_qos_is_ªquúed
(
qos
)

939 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

942  (
	`pm_qos_ªque°
(
qos
Ë=
sh™n⁄_pm_qos_vÆue
);

943 
	}
}

945 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 35)

947 
	~<löux/pm_qos_∑øms.h
>

948 
	$sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
)

950 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

953 *
l
 = (
pm_qos_ªque°_li°
 *)
	`pm_qos_add_ªque°
(
qos
, 
vÆue
);

955 
	}
}

957 
	$sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
)

959 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

962 i‡(*
l
 !
NULL
)

963 
	`pm_qos_upd©e_ªque°
((
pm_qos_ªque°_li°
 *)(*
l
), 
√w_vÆue
);

965 
	}
}

967 
	$sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
)

969 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

972 i‡(*
l
 !
NULL
) {

973 
	`pm_qos_ªmove_ªque°
((
pm_qos_ªque°_li°
 *)(*
l
));

974 *
l
 = 
NULL
;

976 
	}
}

978 
	$sh™n⁄_pm_qos_is_ªquúed
(
qos
)

980 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

983  (
	`pm_qos_ªque°
(
qos
Ë=
sh™n⁄_pm_qos_vÆue
);

984 
	}
}

986 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31)

988 
	~<löux/pm_qos_∑øms.h
>

989 
	$sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
)

991 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

994  
	`pm_qos_add_ªquúemít
(
qos
, 
«me
, 
vÆue
);

995 
	}
}

997 
	$sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
)

999 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

1002  
	`pm_qos_upd©e_ªquúemít
(
qos
, 
«me
, 
√w_vÆue
);

1003 
	}
}

1005 
	$sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
)

1007 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

1010 
	`pm_qos_ªmove_ªquúemít
(
qos
, 
«me
);

1011 
	}
}

1013 
	$sh™n⁄_pm_qos_is_ªquúed
(
qos
)

1015 i‡(
	`u∆ikñy
(
sh™n⁄_pm_qos_dißbÀ
))

1018  (
	`pm_qos_ªquúemít
(
qos
Ë=
sh™n⁄_pm_qos_vÆue
);

1019 
	}
}

1023 
	$sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
)

1026 
	}
}

1028 
	$sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
)

1031 
	}
}

1033 
	$sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
)

1035 
	}
}

1037 
	$sh™n⁄_pm_qos_is_ªquúed
(
qos
)

1040 
	}
}

1045 *
	$SHANNON_ERR_PTR
(
îr‹
)

1047  
	`ERR_PTR
(
îr‹
);

1048 
	}
}

1050 
	$SHANNON_IS_ERR
(c⁄° *
±r
)

1052  
	`IS_ERR
(
±r
);

1053 
	}
}

1055 
	$SHANNON_PTR_ERR
(c⁄° *
±r
)

1057  
	`PTR_ERR
(
±r
);

1058 
	}
}

1060 
	$SHANNON_IS_ERR_OR_NULL
(c⁄° *
±r
)

1062  !
±r
 || 
	`IS_ERR_VALUE
(()ptr);

1063 
	}
}

1066 
size_t
 
	$sh™n⁄_°æí
(c⁄° *
s
)

1068  
	`°æí
(
s
);

1069 
	}
}

1072 
	$sh™n⁄_gë_øndom_byãs
(*
buf
, 
byãs
)

1074 
	`gë_øndom_byãs
(
buf
, 
byãs
);

1075 
	}
}

1078 
	$sh™n⁄_¥e„tch
(*
addr
)

1080 
	`¥e„tch
(
addr
);

1081 
	}
}

1083 
	$sh™n⁄_¥e„tchw
(*
addr
)

1085 
	`¥e„tchw
(
addr
);

1086 
	}
}

1088 
	$sh™n⁄_•ö_lock_¥e„tch
(*
addr
)

1090 
	`•ö_lock_¥e„tch
(
addr
);

1091 
	}
}

1093 
	ssh™n⁄_øãlimô_°©e
 {

1094 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1095 
øw_•ölock_t
 
	mlock
;

1097 
•ölock_t
 
	mlock
;

1100 
	möãrvÆ
;

1101 
	mbur°
;

1102 
	m¥öãd
;

1103 
	mmis£d
;

1104 
	mbegö
;

1107 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1109 
	#DEFINE_SHANNON_RATELIMIT_STATE
(
«me
, 
öãrvÆ_öô
, 
bur°_öô
) \

1111 
sh™n⁄_øãlimô_°©e
 
«me
 = { \

1112 .
lock
 = 
	`__RAW_SPIN_LOCK_UNLOCKED
(
«me
.lock), \

1113 .
öãrvÆ
 = 
öãrvÆ_öô
, \

1114 .
bur°
 = 
bur°_öô
, \

1115 }

	)

1118 
	#DEFINE_SHANNON_RATELIMIT_STATE
(
«me
, 
öãrvÆ_öô
, 
bur°_öô
) \

1120 
sh™n⁄_øãlimô_°©e
 
«me
 = { \

1121 .
lock
 = 
	`__SPIN_LOCK_UNLOCKED
(
«me
.lock), \

1122 .
öãrvÆ
 = 
öãrvÆ_öô
, \

1123 .
bur°
 = 
bur°_öô
, \

1124 }

	)

1126 
DEFINE_SHANNON_RATELIMIT_STATE
(
sh™n⁄_rs
, 
SHANNON_DEFAULT_RATELIMIT_INTERVAL
, 
SHANNON_DEFAULT_RATELIMIT_BURST
);

1127 
DEFINE_SHANNON_RATELIMIT_STATE
(
ªcovî_rs
, 
SHANNON_DEFAULT_RECOVER_RATELIMIT_INTERVAL
, 
SHANNON_DEFAULT_RECOVER_RATELIMIT_BURST
);

1129 
ölöe
 
	$sh™n⁄_øãlimô
(
sh™n⁄_øãlimô_°©e
 *
rs
, c⁄° *
func
)

1131 
Êags
;

1132 
ªt
;

1134 i‡(!
rs
->
öãrvÆ
)

1143 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 33)

1144 i‡(!
	`øw_•ö_åylock_úqßve
(&
rs
->
lock
, 
Êags
))

1146 i‡(!
	`•ö_åylock_úqßve
(&
rs
->
lock
, 
Êags
))

1150 i‡(!
rs
->
begö
)

1151 
rs
->
begö
 = 
jiffõs
;

1153 i‡(
	`time_a·î
(
jiffõs
, 
rs
->
begö
 +Ñs->
öãrvÆ
)) {

1154 i‡(
rs
->
mis£d
)

1155 
	`¥ötk
(
KERN_ERR
 "shn_log: %s: %d callbacks suppressed\n",

1156 
func
, 
rs
->
mis£d
);

1157 
rs
->
begö
 = 0;

1158 
rs
->
¥öãd
 = 0;

1159 
rs
->
mis£d
 = 0;

1161 i‡(
rs
->
bur°
 &&Ñs->bur° >Ñs->
¥öãd
) {

1162 
rs
->
¥öãd
++;

1163 
ªt
 = 1;

1165 
rs
->
mis£d
++;

1166 
ªt
 = 0;

1168 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 33)

1169 
	`øw_•ö_u∆ock_úqª°‹e
(&
rs
->
lock
, 
Êags
);

1171 
	`•ö_u∆ock_úqª°‹e
(&
rs
->
lock
, 
Êags
);

1174  
ªt
;

1175 
	}
}

1177 
asmlökage
 
	$sh™n⁄_¥ötk_øãlimôed
(c⁄° *
fmt
, ...)

1179 
va_li°
 
¨gs
;

1180 
r
;

1182 i‡(
	`sh™n⁄_øãlimô
(&
sh™n⁄_rs
, 
__func__
)) {

1183 
	`va_°¨t
(
¨gs
, 
fmt
);

1184 #i‡!
	`deföed
(
__VMKLNX__
)

1185 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1187 
va_li°
 
¨gs_c›y
;

1189 
	`va_c›y
(
¨gs_c›y
, 
¨gs
);

1190 
	`vmk_vLogNoLevñ
(
VMK_LOG_URGENCY_NORMAL
, 
fmt
, 
¨gs
);

1191 
r
 = 
	`vmk_V¢¥ötf
(
NULL
, 0, 
fmt
, 
¨gs_c›y
);

1193 
	`va_íd
(
¨gs_c›y
);

1195 
	`va_íd
(
¨gs
);

1197  
r
;

1200 
	}
}

1202 
asmlökage
 
	$sh™n⁄_ªcovî_¥ötk_øãlimôed
(c⁄° *
fmt
, ...)

1204 
va_li°
 
¨gs
;

1205 
r
;

1207 i‡(
	`sh™n⁄_øãlimô
(&
ªcovî_rs
, 
__func__
)) {

1208 
	`va_°¨t
(
¨gs
, 
fmt
);

1209 #i‡!
	`deföed
(
__VMKLNX__
)

1210 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1212 
va_li°
 
¨gs_c›y
;

1214 
	`va_c›y
(
¨gs_c›y
, 
¨gs
);

1215 
	`vmk_vLogNoLevñ
(
VMK_LOG_URGENCY_NORMAL
, 
fmt
, 
¨gs
);

1216 
r
 = 
	`vmk_V¢¥ötf
(
NULL
, 0, 
fmt
, 
¨gs_c›y
);

1218 
	`va_íd
(
¨gs_c›y
);

1220 
	`va_íd
(
¨gs
);

1222  
r
;

1225 
	}
}

	@shannon_kcore.h

1 #i‚de‡
__SHANNON_KCORE_H


2 
	#__SHANNON_KCORE_H


	)

14 
	~<löux/ty≥s.h
>

15 
	~<löux/gÂ.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/io˘l.h
>

18 
	~<löux/highmem.h
>

20 
	#RESERVE_MEM
(
byãs
Ë
mem
[byãs] 
	`__©åibuã__
 ((
	`Æig√d
(8)))

	)

22 
	#SHANNON_DEFAULT_RATELIMIT_INTERVAL
 (5 * 
HZ
)

	)

23 
	#SHANNON_DEFAULT_RATELIMIT_BURST
 500

	)

24 
	#SHANNON_DEFAULT_RECOVER_RATELIMIT_INTERVAL
 (5 * 
HZ
)

	)

25 
	#SHANNON_DEFAULT_RECOVER_RATELIMIT_BURST
 1000

	)

30 
	s__sh™n⁄_•ölock
 {

32 
RESERVE_MEM
(128);

35 
	s__sh™n⁄_rwlock
 {

36 
RESERVE_MEM
(128);

39 
__sh™n⁄_•ölock
 
	tsh™n⁄_•ölock_t
;

40 
__sh™n⁄_rwlock
 
	tsh™n⁄_rwlock_t
;

42 #ifde‡
CONFIG_PROVE_LOCKING


44 
	#sh™n⁄_•ö_lock_öô
(
_lock
) \

46 
	`•ö_lock_öô
((
•ölock_t
 *)
_lock
); \

47 } 0)

	)

49 
	#sh™n⁄_rwlock_öô
(
_lock
) \

51 
	`rwlock_öô
((
rwlock_t
 *)
_lock
); \

52 } 0)

	)

54 
	#sh™n⁄_•ö_lock
(
lock
Ë
	`•ö_lock
((
•ölock_t
 *)÷ock))

	)

55 
	#sh™n⁄_•ö_lock_bh
(
lock
Ë
	`•ö_lock_bh
((
•ölock_t
 *)÷ock))

	)

56 
	#sh™n⁄_•ö_lock_úq
(
lock
Ë
	`•ö_lock_úq
((
•ölock_t
 *)÷ock))

	)

57 
	#sh™n⁄_•ö_u∆ock
(
lock
Ë
	`•ö_u∆ock
((
•ölock_t
 *)÷ock))

	)

58 
	#sh™n⁄_•ö_u∆ock_bh
(
lock
Ë
	`•ö_u∆ock_bh
((
•ölock_t
 *)÷ock))

	)

59 
	#sh™n⁄_•ö_u∆ock_úq
(
lock
Ë
	`•ö_u∆ock_úq
((
•ölock_t
 *)÷ock))

	)

60 
	#sh™n⁄_•ö_åylock
(
lock
Ë
	`•ö_åylock
((
•ölock_t
 *)÷ock))

	)

62 
	#sh™n⁄_ªad_lock
(
lock
Ë
	`ªad_lock
((
rwlock_t
 *)÷ock))

	)

63 
	#sh™n⁄_ªad_lock_bh
(
lock
Ë
	`ªad_lock_bh
((
rwlock_t
 *)÷ock))

	)

64 
	#sh™n⁄_ªad_lock_úq
(
lock
Ë
	`ªad_lock_úq
((
rwlock_t
 *)÷ock))

	)

65 
	#sh™n⁄_ªad_u∆ock
(
lock
Ë
	`ªad_u∆ock
((
rwlock_t
 *)÷ock))

	)

66 
	#sh™n⁄_ªad_u∆ock_bh
(
lock
Ë
	`ªad_u∆ock_bh
((
rwlock_t
 *)÷ock))

	)

67 
	#sh™n⁄_ªad_u∆ock_úq
(
lock
Ë
	`ªad_u∆ock_úq
((
rwlock_t
 *)÷ock))

	)

68 
	#sh™n⁄_ªad_åylock
(
lock
Ë
	`ªad_åylock
((
rwlock_t
 *)÷ock))

	)

70 
	#sh™n⁄_wrôe_lock
(
lock
Ë
	`wrôe_lock
((
rwlock_t
 *)÷ock))

	)

71 
	#sh™n⁄_wrôe_lock_bh
(
lock
Ë
	`wrôe_lock_bh
((
rwlock_t
 *)÷ock))

	)

72 
	#sh™n⁄_wrôe_lock_úq
(
lock
Ë
	`wrôe_lock_úq
((
rwlock_t
 *)÷ock))

	)

73 
	#sh™n⁄_wrôe_u∆ock
(
lock
Ë
	`wrôe_u∆ock
((
rwlock_t
 *)÷ock))

	)

74 
	#sh™n⁄_wrôe_u∆ock_bh
(
lock
Ë
	`wrôe_u∆ock_bh
((
rwlock_t
 *)÷ock))

	)

75 
	#sh™n⁄_wrôe_u∆ock_úq
(
lock
Ë
	`wrôe_u∆ock_úq
((
rwlock_t
 *)÷ock))

	)

76 
	#sh™n⁄_wrôe_åylock
(
lock
Ë
	`wrôe_åylock
((
rwlock_t
 *)÷ock))

	)

80 
sh™n⁄_•ö_lock_öô
(
sh™n⁄_•ölock_t
 *
lock
);

81 
sh™n⁄_•ö_lock
(
sh™n⁄_•ölock_t
 *
lock
);

82 
sh™n⁄_•ö_lock_bh
(
sh™n⁄_•ölock_t
 *
lock
);

83 
sh™n⁄_•ö_lock_úq
(
sh™n⁄_•ölock_t
 *
lock
);

84 
sh™n⁄_•ö_u∆ock
(
sh™n⁄_•ölock_t
 *
lock
);

85 
sh™n⁄_•ö_u∆ock_bh
(
sh™n⁄_•ölock_t
 *
lock
);

86 
sh™n⁄_•ö_u∆ock_úq
(
sh™n⁄_•ölock_t
 *
lock
);

87 
sh™n⁄_•ö_åylock
(
sh™n⁄_•ölock_t
 *
lock
);

88 
sh™n⁄_•ö_åylock_úq
(
sh™n⁄_•ölock_t
 *
lock
);

90 
sh™n⁄_rwlock_öô
(
sh™n⁄_rwlock_t
 *
lock
);

91 
sh™n⁄_ªad_lock
(
sh™n⁄_rwlock_t
 *
lock
);

92 
sh™n⁄_ªad_lock_bh
(
sh™n⁄_rwlock_t
 *
lock
);

93 
sh™n⁄_ªad_lock_úq
(
sh™n⁄_rwlock_t
 *
lock
);

94 
sh™n⁄_ªad_u∆ock
(
sh™n⁄_rwlock_t
 *
lock
);

95 
sh™n⁄_ªad_u∆ock_bh
(
sh™n⁄_rwlock_t
 *
lock
);

96 
sh™n⁄_ªad_u∆ock_úq
(
sh™n⁄_rwlock_t
 *
lock
);

97 
sh™n⁄_ªad_åylock
(
sh™n⁄_rwlock_t
 *
lock
);

98 
sh™n⁄_wrôe_lock
(
sh™n⁄_rwlock_t
 *
lock
);

99 
sh™n⁄_wrôe_lock_bh
(
sh™n⁄_rwlock_t
 *
lock
);

100 
sh™n⁄_wrôe_lock_úq
(
sh™n⁄_rwlock_t
 *
lock
);

101 
sh™n⁄_wrôe_u∆ock
(
sh™n⁄_rwlock_t
 *
lock
);

102 
sh™n⁄_wrôe_u∆ock_bh
(
sh™n⁄_rwlock_t
 *
lock
);

103 
sh™n⁄_wrôe_u∆ock_úq
(
sh™n⁄_rwlock_t
 *
lock
);

104 
sh™n⁄_wrôe_åylock
(
sh™n⁄_rwlock_t
 *
lock
);

107 
sh™n⁄_•ö_lock_úqßve
(
sh™n⁄_•ölock_t
 *
lock
);

108 
sh™n⁄_•ö_u∆ock_úqª°‹e
(
sh™n⁄_•ölock_t
 *
lock
, 
Êags
);

113 
	s__sh™n⁄_£m≠h‹e
 {

115 
RESERVE_MEM
(256);

118 
__sh™n⁄_£m≠h‹e
 
	tsh™n⁄_muãx_t
;

120 #ifde‡
CONFIG_PROVE_LOCKING


122 
	#sh™n⁄_muãx_öô
(
_lock
) \

124 
	`muãx_öô
((
muãx
 *)
_lock
); \

125 } 0)

	)

127 
	#sh™n⁄_muãx_lock
(
lock
Ë
	`muãx_lock
((
muãx
 *)÷ock))

	)

128 
	#sh™n⁄_muãx_åylock
(
lock
Ë
	`muãx_åylock
((
muãx
 *)÷ock))

	)

129 
	#sh™n⁄_muãx_u∆ock
(
lock
Ë
	`muãx_u∆ock
((
muãx
 *)÷ock))

	)

133 
sh™n⁄_muãx_öô
(
sh™n⁄_muãx_t
 *
lock
);

134 
sh™n⁄_muãx_lock
(
sh™n⁄_muãx_t
 *
lock
);

135 
sh™n⁄_muãx_u∆ock
(
sh™n⁄_muãx_t
 *
lock
);

136 
sh™n⁄_muãx_åylock
(
sh™n⁄_muãx_t
 *
lock
);

141 
	s__sh™n⁄_©omic
 {

143 
RESERVE_MEM
(());

146 
__sh™n⁄_©omic
 
	tsh™n⁄_©omic_t
;

147 
__sh™n⁄_©omic
 
	tsh™n⁄_©omic64_t
;

149 
sh™n⁄_©omic_£t
(
sh™n⁄_©omic_t
 *
v
, 
i
);

150 
sh™n⁄_©omic_add
(
i
, 
sh™n⁄_©omic_t
 *
v
);

151 
sh™n⁄_©omic_sub
(
i
, 
sh™n⁄_©omic_t
 *
v
);

152 
sh™n⁄_©omic_dec
(
sh™n⁄_©omic_t
 *
v
);

153 
sh™n⁄_©omic_öc
(
sh™n⁄_©omic_t
 *
v
);

154 
sh™n⁄_©omic_ªad
(c⁄° 
sh™n⁄_©omic_t
 *
v
);

155 
sh™n⁄_©omic_dec_™d_ã°
(
sh™n⁄_©omic_t
 *
v
);

156 
sh™n⁄_©omic_öc_™d_ã°
(
sh™n⁄_©omic_t
 *
v
);

157 
sh™n⁄_©omic64_öc_ªtu∫
(
sh™n⁄_©omic64_t
 *
v
);

158 
sh™n⁄_©omic_dec_ªtu∫
(
sh™n⁄_©omic_t
 *
v
);

161 
sh™n⁄_©omic64_£t
(
sh™n⁄_©omic64_t
 *
v
, 
i
);

162 
sh™n⁄_©omic64_add
(
i
, 
sh™n⁄_©omic64_t
 *
v
);

163 
sh™n⁄_©omic64_sub
(
i
, 
sh™n⁄_©omic64_t
 *
v
);

164 
sh™n⁄_©omic64_dec
(
sh™n⁄_©omic64_t
 *
v
);

165 
sh™n⁄_©omic64_öc
(
sh™n⁄_©omic64_t
 *
v
);

166 
sh™n⁄_©omic64_ªad
(c⁄° 
sh™n⁄_©omic64_t
 *
v
);

167 
sh™n⁄_©omic64_dec_™d_ã°
(
sh™n⁄_©omic64_t
 *
v
);

168 
sh™n⁄_©omic64_öc_™d_ã°
(
sh™n⁄_©omic64_t
 *
v
);

172 
sh™n⁄_föd_fú°_zîo_bô
(c⁄° *
addr
, 
size
);

173 
sh™n⁄_föd_fú°_bô_À
(c⁄° *
addr
, 
size
);

174 
sh™n⁄_föd_fú°_bô
(c⁄° *
addr
, 
size
);

175 
sh™n⁄_föd_√xt_bô_À
(c⁄° *
addr
, 
size
, 
off£t
);

176 
	#sh™n⁄_f‹_óch_£t_bô_À
(
bô
, 
addr
, 
size
) \

177 (
bô
Ë
	`sh™n⁄_föd_fú°_bô_À
((
addr
), (
size
)); \

178 (
bô
Ë< (
size
); \

179 (
bô
Ë
	`sh™n⁄_föd_√xt_bô_À
((
addr
), (
size
), (bôË+ 1))

	)

180 
sh™n⁄_ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
);

181 
sh™n⁄_ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
);

182 
sh™n⁄_ã°_™d_˛ór_bô_À
(
ƒ
, *
addr
);

183 
sh™n⁄_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê*
addr
);

184 
sh™n⁄_ã°_bô_À
(
ƒ
, c⁄° *
addr
);

185 
sh™n⁄_£t_bô
(
ƒ
, *
addr
);

186 
sh™n⁄_£t_bô_À
(
ƒ
, *
addr
);

187 
sh™n⁄_˛ór_bô
(
ƒ
, *
addr
);

191 
__sh™n⁄_bôm≠_x‹
(*
d°
, c⁄° *
bôm≠1
, c⁄° *
bôm≠2
, 
bôs
);

192 
__sh™n⁄_bôm≠_weight
(c⁄° *
bôm≠
, 
bôs
);

193 
sh™n⁄_hweight_l⁄g
(
w
);

194 
sh™n⁄_hweight32
(
w
);

195 
sh™n⁄_gë_cou¡_‹dî
(
cou¡
);

199 #i‚de‡
__iomem


200 
	#__iomem


	)

203 #i‚de‡
__u£r


204 
	#__u£r


	)

207 #i‚de‡
__bôwi£__


208 
	#__bôwi£__


	)

211 
	ssh™n⁄_pg¥Ÿ
 { 
	mpg¥Ÿ
; } 
	tsh™n⁄_pg¥Ÿ_t
;

212 
	#SHANNON_PAGE_KERNEL
 (*((
sh™n⁄_pg¥Ÿ_t
 *Ë&
PAGE_KERNEL
))

	)

214 
	t__bôwi£__
 
	tsh™n⁄_gÂ_t
;

215 
	t__bôwi£__
 
	tsh™n⁄_fmode_t
;

216 
	tsh™n⁄_loff_t
;

217 
	tsh™n⁄_size_t
;

218 
	tsh™n⁄_ssize_t
;

219 
	tsh™n⁄_mode_t
;

221 
u64
 
	tsh™n⁄_phys_addr_t
;

222 
u64
 
	tsh™n⁄_ªsour˚_size_t
;

223 
dma_addr_t
 
	tsh™n⁄_dma_addr_t
;

226 
u32
 
sh™n⁄_øw_ªadl
(c⁄° vﬁ©ûê
__iomem
 *
addr
);

227 
sh™n⁄_øw_wrôñ
(
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
);

228 
u32
 
sh™n⁄_ªadl
(c⁄° vﬁ©ûê
__iomem
 *
addr
);

229 
u32
 
sh™n⁄_i‹ód32
(
__iomem
 *
addr
);

230 
sh™n⁄_wrôñ
(
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
);

231 
sh™n⁄_iowrôe32
(
u32
 
vÆue
, 
__iomem
 *
addr
);

232 
u16
 
sh™n⁄_mem_ªadw
(vﬁ©ûê*
addr
);

233 
sh™n⁄_mem_wrôew
(
u16
 
vÆue
, *
addr
);

234 
sh™n⁄_˝u_to_À16s
(*
addr
);

235 
u32
 
sh™n⁄_mem_ªadl
(vﬁ©ûê*
addr
);

236 
sh™n⁄_mem_wrôñ
(
u32
 
vÆue
, *
addr
);

237 
sh™n⁄_˝u_to_À32s
(*
addr
);

238 
u32
 
sh™n⁄_˝u_to_be32
(u32 
vÆ
);

239 
sh™n⁄_˝u_to_À64s
(*
addr
);

240 
u64
 
sh™n⁄_˝u_to_be64
(u64 
vÆ
);

241 
u64
 
sh™n⁄_mem_ªadq
(vﬁ©ûê*
addr
);

242 
sh™n⁄_mem_wrôeq
(
u64
, *
addr
);

243 
__iomem
 *
sh™n⁄_i‹em≠
(
sh™n⁄_phys_addr_t
 
off£t
, 
size
);

244 
sh™n⁄_iounm≠
(vﬁ©ûê
__iomem
 *
addr
);

245 
sh™n⁄_mem˝y_‰omio
(*
de°
, *
sour˚
, 
cou¡
);

248 
sh™n⁄_c›y_‰om_u£r
(*
to
, c⁄° 
__u£r
 * 
‰om
, 
n
);

249 
sh™n⁄_c›y_to_u£r
(
__u£r
 *
to
, c⁄° *
‰om
, 
n
);

252 
sh™n⁄_‰ì_∑ge
(
addr
);

253 
__sh™n⁄_gë_‰ì_∑ge
(
sh™n⁄_gÂ_t
 
gÂ
);

256 
	tsh™n⁄_∑ge
;

257 *
sh™n⁄_∑ge_addªss
(
sh™n⁄_∑ge
 *
∑ge
);

258 *
sh™n⁄_vút_to_∑ge
(c⁄° *
addr
);

261 *
sh™n⁄_vzÆloc
(
size
);

262 *
sh™n⁄_vmÆloc
(
size
);

263 
sh™n⁄_v‰ì
(*
addr
);

266 
	tsh™n⁄_kmem_ˇche_t
;

268 
sh™n⁄_kmem_ˇche_t
 *
sh™n⁄_kmem_ˇche_¸óã
(c⁄° *, 
size_t
, size_t, , (*)(*));

269 
	`sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_kmem_ˇche_t
 *
ˇchï
);

270 *
	`sh™n⁄_kzÆloc
(
size_t
 
size
, 
sh™n⁄_gÂ_t
 
Êags
);

271 *
	`sh™n⁄_kmÆloc
(
size_t
 
size
, 
sh™n⁄_gÂ_t
 
Êags
);

272 *
	`__sh™n⁄_vmÆloc
(
size
, 
sh™n⁄_gÂ_t
 
gÂ_mask
, 
sh™n⁄_pg¥Ÿ_t
 
¥Ÿ
);

273 
	`sh™n⁄_k‰ì
(const *);

276 
	#GFP_SHANNON
 
GFP_NOIO


	)

277 
	tsh™n⁄_mempoﬁ_t
;

279 
sh™n⁄_mempoﬁ_t
 *
	`sh™n⁄_mempoﬁ_¸óã_kmÆloc_poﬁ
(
mö_ƒ
, 
size_t
 
size
);

280 
sh™n⁄_mempoﬁ_t
 *
	`sh™n⁄_mempoﬁ_¸óã_¶ab_poﬁ
(
mö_ƒ
, 
sh™n⁄_kmem_ˇche_t
 *
kc
);

281 
	`sh™n⁄_mempoﬁ_de°roy
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
);

282 *
	`sh™n⁄_mempoﬁ_Æloc
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
, 
sh™n⁄_gÂ_t
 
gÂ_mask
);

283 
	`sh™n⁄_mempoﬁ_‰ì
(*
ñemít
, 
sh™n⁄_mempoﬁ_t
 *
poﬁ
);

284 
	`gë_mempoﬁ_cou¡
(
sh™n⁄_mempoﬁ_t
 *
poﬁ
);

289 *
	`sh™n⁄_mem£t
(*
s
, 
c
, 
size_t
 
n
);

290 *
	`sh™n⁄_mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

291 
	`sh™n⁄_memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

292 
size_t
 
	`sh™n⁄_°∫Àn
(c⁄° *
s
, size_à
cou¡
);

295 #i‚de‡
KERN_ERR


296 
	#KERN_EMERG
 "<0>"

	)

297 
	#KERN_ALERT
 "<1>"

	)

298 
	#KERN_CRIT
 "<2>"

	)

299 
	#KERN_ERR
 "<3>"

	)

300 
	#KERN_WARNING
 "<4>"

	)

301 
	#KERN_NOTICE
 "<5>"

	)

302 
	#KERN_INFO
 "<6>"

	)

303 
	#KERN_DEBUG
 "<7>"

	)

305 
	`sh™n⁄_¥ötk
(c⁄° *
fmt
, ...);

306 
	`sh™n⁄_¥ötk_øãlimôed
(c⁄° *
fmt
, ...);

307 
	`sh™n⁄_ªcovî_¥ötk_øãlimôed
(c⁄° *
fmt
, ...);

308 
sh™n⁄_debug_Àvñ
;

309 
	#sh™n⁄_dbg
(
Àvñ
, 
f‹m©
, 
¨g
...) \

311 i‡(
Àvñ
 <
sh™n⁄_debug_Àvñ
) \

312 
	`sh™n⁄_¥ötk
(
KERN_ERR
 "shn_dbg: %s(): " 
f‹m©
, 
__func__
, ##
¨g
); \

313 
	}
} 0)

	)

315 
	#debugs0
–... ) 
	`sh™n⁄_dbg
(0, 
__VA_ARGS__
 )

	)

316 
	#debugs1
–... ) 
	`sh™n⁄_dbg
(1, 
__VA_ARGS__
 )

	)

317 
	#debugs2
–... ) 
	`sh™n⁄_dbg
(2, 
__VA_ARGS__
 )

	)

318 
	#debugs3
–... ) 
	`sh™n⁄_dbg
(3, 
__VA_ARGS__
 )

	)

319 
	#debugs4
–... ) 
	`sh™n⁄_dbg
(4, 
__VA_ARGS__
 )

	)

321 
	#sh™n⁄_öfo
(
f‹m©
, 
¨g
...) \

322 
	`sh™n⁄_¥ötk_øãlimôed
(
KERN_ERR
 "shn_öfo: " 
f‹m©
, ##
¨g
)

	)

323 
	#sh™n⁄_ªcovî_öfo
(
f‹m©
, 
¨g
...) \

324 
	`sh™n⁄_ªcovî_¥ötk_øãlimôed
(
KERN_ERR
 "shn_öfo: " 
f‹m©
, ##
¨g
)

	)

325 
	#sh™n⁄_log
(
f‹m©
, 
¨g
...) \

326 
	`sh™n⁄_¥ötk_øãlimôed
(
KERN_ERR
 "shn_log: " 
f‹m©
, ##
¨g
)

	)

327 
	#sh™n⁄_w¨n
(
f‹m©
, 
¨g
...) \

328 
	`sh™n⁄_¥ötk_øãlimôed
(
KERN_ERR
 "shn_w¨n: %s(): " 
f‹m©
, 
__func__
, ##
¨g
)

	)

329 
	#sh™n⁄_Æ¨m
(
f‹m©
, 
¨g
...) \

330 
	`sh™n⁄_¥ötk
(
KERN_ERR
 "shn_Æ¨m: %s(): " 
f‹m©
, 
__func__
, ##
¨g
)

	)

331 
	#sh™n⁄_îr
(
f‹m©
, 
¨g
...) \

332 
	`sh™n⁄_¥ötk
(
KERN_ERR
 "shn_îr: %s(): " 
f‹m©
, 
__func__
, ##
¨g
)

	)

333 
	#sh™n⁄_ªcovî_îr
(
f‹m©
, 
¨g
...) \

334 
	`sh™n⁄_ªcovî_¥ötk_øãlimôed
(
KERN_ERR
 "shn_îr: %s(): " 
f‹m©
, 
__func__
, ##
¨g
)

	)

335 
	#sh™n⁄_Áèl
(
f‹m©
, 
¨g
...) \

336 
	`sh™n⁄_¥ötk
(
KERN_ERR
 "shn_Áèl: %s(): " 
f‹m©
, 
__func__
, ##
¨g
)

	)

339 *
sh™n⁄_ka•rötf
(
sh™n⁄_gÂ_t
 
gÂ
, c⁄° *
fmt
, ...);

340 
sh™n⁄_•rötf
(* 
buf
, c⁄° * 
fmt
, ...);

341 
sh™n⁄_¢¥ötf
(* 
buf
, 
size_t
 
size
, c⁄° * 
fmt
, ...);

342 
sh™n⁄_dump_°ack
();

343 
sh™n⁄_sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
);

344 
sh™n⁄_¥ötk_øãlimô
();

347 
gë_num_⁄löe_˝us
();

350 
	#SHANNON_PM_QOS_CPU_DMA_LATENCY
 1

	)

351 
	#SHANNON_PM_QOS_DEFAULT_VALUE
 -1

	)

353 *
	tsh™n⁄_pm_qos_ªque°_t
;

355 
sh™n⁄_pm_qos_add_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
vÆue
);

356 
sh™n⁄_pm_qos_upd©e_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
, 
s32
 
√w_vÆue
);

357 
sh™n⁄_pm_qos_ªmove_ªquúemít
(
sh™n⁄_pm_qos_ªque°_t
 *
l
, 
qos
, *
«me
);

358 
sh™n⁄_pm_qos_is_ªquúed
(
qos
);

361 *
SHANNON_ERR_PTR
(
îr‹
);

362 
SHANNON_IS_ERR
(c⁄° *
±r
);

363 
SHANNON_PTR_ERR
(c⁄° *
±r
);

364 
SHANNON_IS_ERR_OR_NULL
(c⁄° *
±r
);

367 
size_t
 
sh™n⁄_°æí
(c⁄° *
s
);

370 
sh™n⁄_gë_øndom_byãs
(*
buf
, 
byãs
);

373 
sh™n⁄_¥e„tch
(*
addr
);

374 
sh™n⁄_¥e„tchw
(*
addr
);

375 
sh™n⁄_•ö_lock_¥e„tch
(*
addr
);

380 
	tsh™n⁄_devi˚_t
;

381 
	tsh™n⁄_pci_dev_t
;

382 
	tsh™n⁄_pci_devi˚_id_t
;

383 
	tsh™n⁄_msix_íåy_t
;

385 #ifde‡
CONFIG_X86


386 
	#sh™n⁄_b¨rõr
(Ë
asm
 vﬁ©ûe("m„n˚":::"mem‹y")

	)

388 
	#sh™n⁄_b¨rõr
(Ë
	`b¨rõr
()

	)

	@shannon_list.h

1 #i‚de‡
__SHANNON_LIST_H


2 
	#__SHANNON_LIST_H


	)

4 
	ssh™n⁄_li°_hód
 {

5 
sh™n⁄_li°_hód
 *
	m√xt
, *
	m¥ev
;

8 
	#SHANNON_LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

10 
ölöe
 
	$SHANNON_INIT_LIST_HEAD
(
sh™n⁄_li°_hód
 *
li°
)

12 
li°
->
√xt
 =Üist;

13 
li°
->
¥ev
 =Üist;

14 
	}
}

17 
ölöe
 
	$__sh™n⁄_li°_add
(
sh™n⁄_li°_hód
 *
√w
,

18 
sh™n⁄_li°_hód
 *
¥ev
,

19 
sh™n⁄_li°_hód
 *
√xt
)

21 
√xt
->
¥ev
 = 
√w
;

22 
√w
->
√xt
 =Çext;

23 
√w
->
¥ev
 =Örev;

24 
¥ev
->
√xt
 = 
√w
;

25 
	}
}

28 
ölöe
 
	$sh™n⁄_li°_add
(
sh™n⁄_li°_hód
 *
√w
, sh™n⁄_li°_hód *
hód
)

30 
	`__sh™n⁄_li°_add
(
√w
, 
hód
, hód->
√xt
);

31 
	}
}

34 
ölöe
 
	$sh™n⁄_li°_add_èû
(
sh™n⁄_li°_hód
 *
√w
, sh™n⁄_li°_hód *
hód
)

36 
	`__sh™n⁄_li°_add
(
√w
, 
hód
->
¥ev
, head);

37 
	}
}

39 
ölöe
 
	$__sh™n⁄_li°_dñ
(
sh™n⁄_li°_hód
 * 
¥ev
, sh™n⁄_li°_hód * 
√xt
)

41 
√xt
->
¥ev
 =Örev;

42 
¥ev
->
√xt
 =Çext;

43 
	}
}

45 
ölöe
 
	$__sh™n⁄_li°_dñ_íåy
(
sh™n⁄_li°_hód
 *
íåy
)

47 
	`__sh™n⁄_li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

48 
	}
}

50 
ölöe
 
	$sh™n⁄_li°_dñ
(
sh™n⁄_li°_hód
 *
íåy
)

52 
	`__sh™n⁄_li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

53 
	`SHANNON_INIT_LIST_HEAD
(
íåy
);

54 
	}
}

56 
ölöe
 
	$sh™n⁄_li°_dñ_öô
(
sh™n⁄_li°_hód
 *
íåy
)

58 
	`__sh™n⁄_li°_dñ_íåy
(
íåy
);

59 
	`SHANNON_INIT_LIST_HEAD
(
íåy
);

60 
	}
}

62 
ölöe
 
	$sh™n⁄_li°_em±y
(c⁄° 
sh™n⁄_li°_hód
 *
hód
)

64  
hód
->
√xt
 == head;

65 
	}
}

67 
ölöe
 
	$sh™n⁄_li°_em±y_ˇªful
(c⁄° 
sh™n⁄_li°_hód
 *
hód
)

69 
sh™n⁄_li°_hód
 *
√xt
 = 
hód
->next;

70  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

71 
	}
}

74 
	#sh™n⁄_li°_íåy
(
±r
, 
ty≥
, 
membî
) \

75 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

77 
	#sh™n⁄_li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

78 
	`sh™n⁄_li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

80 
	#sh™n⁄_li°_f‹_óch
(
pos
, 
hód
) \

81 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

83 
	#sh™n⁄_li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

84 
pos
 = 
	`sh™n⁄_li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

85 &
pos
->
membî
 !(
hód
); \

86 
pos
 = 
	`sh™n⁄_li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

88 
	#sh™n⁄_li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

89 
pos
 = 
	`sh™n⁄_li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

90 &
pos
->
membî
 !(
hód
); \

91 
pos
 = 
	`sh™n⁄_li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

93 
	#sh™n⁄_li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

94 
pos
 = 
	`sh™n⁄_li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

95 
n
 = 
	`sh™n⁄_li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

96 &
pos
->
membî
 !(
hód
); \

97 
pos
 = 
n
,Ç = 
	`sh™n⁄_li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

	@shannon_main.c

12 
	~"sh™n⁄_ªgs.h
"

13 
	~"sh™n⁄.h
"

14 
	~"sh™n⁄_io˘l.h
"

16 
	#SHANNON_MINORS
 64

	)

18 
	gsh™n⁄_maj‹
;

19 
	gsh™n⁄_auto_©èch
 = 1;

20 
	gsh™n⁄_buf„r_wrôe
 = 0;

21 
	gsh™n⁄_dißbÀ_öãrvñ_ª‰esh_mbr
 = 0;

22 
	gsh™n⁄_√vî_h™g
 = 0;

23 
	gsh™n⁄_high_≥rf‹m™˚
 = 0;

24 
	gsh™n⁄_öô_ãmp
 = 
INIT_STATE
;

25 
	gsh™n⁄_do_pci_ª£t
 = 0;

26 
	gsh™n⁄_pﬁl_times
 = 8;

27 
	gsh™n⁄_do_¢≠ªad
 = 1;

28 
	gsh™n⁄_memblock_¥óŒoc
 = 0;

29 
	gsh™n⁄_max_comm™d_timeout
 = 10;

30 
	gsh™n⁄_f‹˚_ª˛aim_a˘iveblock
 = 1;

31 
	gsh™n⁄_dy«mic_úq_dñay
 = 1;

32 
	gsh™n⁄_lﬂd_ªad⁄ly
 = 0;

34 
	gecc_f‹˚_£c⁄d_ªque°
 = 0;

35 
	gsh™n⁄_ovîœp_wrôe
 = 0;

37 
sh™n⁄_memblock_poﬁ
 
	gm≠_èbÀ_poﬁ
;

38 
sh™n⁄_memblock_poﬁ
 
	gãmp_èbÀ_poﬁ
;

39 
	gdevi˚_bôm≠
;

40 
sh™n⁄_•ölock_t
 
	gdevi˚_bôm≠_lock
;

41 
	gsh™n⁄_debug_Àvñ
 = 0;

42 
	gsh™n⁄_£˘‹_size
 = 0;

43 
	gsh™n⁄_f‹˚_rw
 = 0;

44 
	gsh™n⁄_u£_π_comp_thªad
 = 0;

45 
	gsh™n⁄_víd‹_cmd
 = 1;

46 
	gsh™n⁄_¥e„tch_íabÀ
 = 1;

47 
sh™n⁄_pm_qos_vÆue
;

49 
has_dma_dñay
;

51 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

52 
u64
 
	gemu_öãºu±_ve˘‹
 = 0;

53 
	gemu_dißbÀ_úq
 = 0;

54 
DEFINE_SPINLOCK
(
emu_öt_lock
);

56 
èsk_°ru˘
 *
	g¥eöô_emu_thªad
;

59 
	ga˘ive_blk_°©e
[2] = {
HOT_ACTIVE_BLOCK
, 
COLD_ACTIVE_BLOCK
};

60 
	gœ°_blk_°©e
[2] = {
LAST_HOT_BLOCK
, 
LAST_COLD_BLOCK
};

61 
	g√xt_blk_°©e
[2] = {
NEXT_HOT_BLOCK
, 
NEXT_COLD_BLOCK
};

62 
	gu£d_blk_°©e
[2] = {
HOT_BLOCK_LIST
, 
COLD_BLOCK_LIST
};

63 
	gwrôe_hód
[2] = {
HOT_HEAD
, 
COLD_HEAD
};

64 
u8
 
	glba_ty≥
[2] = {
SHORT_LBA
, 
LONG_LBA
};

65 
u64
 
	gövÆid_lba
[2] = {
INVALID_LBA
, 
LONG_INVALID_LBA
};

66 
u64
 
	gövÆid_mëad©a
[2] = {(
INVALID_LBA
 | (
SHORT_LBA
 << 
DATATYPE_SHIFT
)), \

67 (
LONG_INVALID_LBA
 | (
LONG_LBA
 << 
DATATYPE_SHIFT
))};

69 
sh™n⁄_kmem_ˇche_t
 *
	gsh™n⁄_ªq_¶ab
;

70 
sh™n⁄_kmem_ˇche_t
 *
	gsh™n⁄_bio_¶ab
;

71 
sh™n⁄_mempoﬁ_t
 *
	gsh™n⁄_ªq_poﬁ
;

72 
sh™n⁄_mempoﬁ_t
 *
	gsh™n⁄_bio_poﬁ
;

73 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


74 
sh™n⁄_li°_hód
 
	gout°™dög_ªqs_li°
;

75 
sh™n⁄_•ölock_t
 
	gout°™dög_ªqs_li°_lock
;

76 
sh™n⁄_li°_hód
 
	gout°™dög_sbios_li°
;

77 
sh™n⁄_•ölock_t
 
	gout°™dög_sbios_li°_lock
;

80 
	~"sh™n⁄_mi¸ocode.c
"

81 
	#GENERAL_CFG
(
t_addr
, 
t_vÆue
Ë{.
vÆid
 = 
FEATURE_VALID_MASK
, .
addr
 = (t_addr), .
cmd
 = 0xEF, .
£c⁄d¨y_cmd
 = 0, .
misc
 = 0, .
nbyã
 = 1, \

82 .
d©a
[0] = (
t_vÆue
Ë& 0xFF}

	)

83 
	#GENERAL_CFG_2
(
t_addr
, 
t_vÆue
Ë{.
vÆid
 = 
FEATURE_VALID_MASK
, .
addr
 = (t_addr), .
cmd
 = 0xEF, .
£c⁄d¨y_cmd
 = 0, .
misc
 = 0, .
nbyã
 = 2, \

84 .
d©a
[0] = (
t_vÆue
Ë& 0xFF, .d©a[1] = (t_vÆuê>> 8Ë& 0xFF}

	)

85 
	#GENERAL_CFG_3
(
t_addr
, 
t_vÆue
Ë{.
vÆid
 = 
FEATURE_VALID_MASK
, .
addr
 = (t_addr), .
cmd
 = 0xEF, .
£c⁄d¨y_cmd
 = 0, .
misc
 = 0, .
nbyã
 = 3, \

86 .
d©a
[0] = (
t_vÆue
Ë& 0xFF, .d©a[1] = (t_vÆuê>> 8Ë& 0xFF, .d©a[2] = (t_vÆuê>> 16Ë& 0xFF}

	)

87 
	#GENERAL_CFG_4
(
t_addr
, 
t_vÆue
Ë{.
vÆid
 = 
FEATURE_VALID_MASK
, .
addr
 = (t_addr), .
cmd
 = 0xEF, .
£c⁄d¨y_cmd
 = 0, .
misc
 = 0, .
nbyã
 = 4, \

88 .
d©a
[0] = (
t_vÆue
Ë& 0xFF, .d©a[1] = (t_vÆuê>> 8Ë& 0xFF, .d©a[2] = (t_vÆuê>> 16Ë& 0xFF, .d©a[3] = (t_vÆuê>> 24Ë& 0xFF}

	)

89 
	#GENERAL_CFG_INVALID
 {.
vÆid
 = 
FEATURE_INVALID
}

	)

90 
	#gë_„©uª_cfg_vÆid
(
_cfg
Ë((_cfg)->
vÆid
 & 
FEATURE_VALID_MASK
)

	)

91 
	#gë_„©uª_cfg_Æl_¥io
(
_cfg
Ë((_cfg)->
vÆid
 & 
FEATURE_PRIORITY_MASK
)

	)

92 
	#£t_„©uª_cfg_Æl_¥io
(
_cfg
) { \

93 if((
_cfg
)->
vÆid
 & 
FEATURE_VALID_MASK
) \

94 (
_cfg
)->
vÆid
 |
FEATURE_PRIORITY_MASK
; \

95 }

	)

96 
	#˛ón_„©uª_cfg_Æl_¥io
(
_cfg
Ë((_cfg)->
vÆid
 &~
FEATURE_PRIORITY_MASK
)

	)

99 
u64
 
	mÊashid
;

101 
	#ONFI_ASYNC_MODE
 0

	)

102 
	#TOGGLE_MODE
 1

	)

103 
	#ONFI_SYNC_MODE
 3

	)

104 
	mifmode
;

105 
	movîdrive
;

107 
	#FREQ_NORMAL
 0

	)

108 
	#FREQ_TURBO
 1

	)

109 
	m‰eq_mode
;

111 
	mmi¸ocode_Àngth
;

112 
u32
 *
	mmi¸ocode_èbÀ
;

113 
	msh¨ed_∑ges
;

114 
„©uª_cfg
 
	m„©uª_cfg_li°
[
FEATURE_CFG_LIST_SIZE
];

115 } 
	gsuµ‹ãd_ids
[] = {

118 {0x1a9cb05a82c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 0, 
NULL
, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

120 {0x000004882c, 
ONFI_SYNC_MODE
, 0, 
FREQ_TURBO
, 0, 
NULL
, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

122 {0x04a53c64642c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

124 {0x04a53˚5842c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

126 {0xa9cb05a82c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 0, 
NULL
, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

128 {0xa53c64842c, 
ONFI_SYNC_MODE
, 0, 
FREQ_TURBO
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

130 {0x04a93c64842c, 
ONFI_SYNC_MODE
, 0, 
FREQ_TURBO
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

132 {0x04a93˚5a42c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

133 {0xa53˚5a42c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

135 {0xa954e5a42c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

137 {0xa95464842c, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
mi¸⁄_19_mi¸ocode_èbÀ
), mi¸⁄_19_mi¸ocode_èbÀ, 6, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

142 {0xa94b248889, 
ONFI_SYNC_MODE
, 0, 
FREQ_TURBO
, 0, 
NULL
, 3, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

144 {0xa9cb25a889, 
ONFI_SYNC_MODE
, 0, 
FREQ_NORMAL
, 0, 
NULL
, 3, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x00), 
GENERAL_CFG_INVALID
}},

147 {0x000010d´c, 
ONFI_SYNC_MODE
, 2, 
FREQ_NORMAL
, 0, 
NULL
, 3, {
GENERAL_CFG
(0x01, 0x15), GENERAL_CFG(0x10, 0x02), 
GENERAL_CFG_INVALID
}},

149 {0x1´cc46c7´51´c, 
TOGGLE_MODE
, 4, 
FREQ_NORMAL
, 0, 
NULL
, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x04), 
GENERAL_CFG_INVALID
}},

152 {0x0408d77a93953a98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_19_mi¸ocode_èbÀ
),Åoshiba_19_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

153 {0x0c08d77a93953a98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_19_mi¸ocode_èbÀ
),Åoshiba_19_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

155 {0x0408d07a93953a98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_a19_mi¸ocode_èbÀ
),Åoshiba_a19_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

157 {0x0408d07e93a53c98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_a19_128gb_mi¸ocode_èbÀ
),Åoshiba_a19_128gb_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

159 {0x0408d7769394de98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_19_mi¸ocode_èbÀ
),Åoshiba_19_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

161 {0x0408d0769394de98, 
TOGGLE_MODE
, 6, 
FREQ_TURBO
, 
ARRAY_SIZE
(
toshiba_a19_mi¸ocode_èbÀ
),Åoshiba_a19_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

163 {0x0408d17693943a98, 
TOGGLE_MODE
, 6, 
FREQ_TURBO
, 
ARRAY_SIZE
(
toshiba_15_mi¸ocode_èbÀ
),Åoshiba_15_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

165 {0x0408d17a93953c98, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
toshiba_15_mi¸ocode_èbÀ
),Åoshiba_15_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

167 {0x040A517693943a45, 
TOGGLE_MODE
, 6, 
FREQ_TURBO
, 
ARRAY_SIZE
(
ßndisk_15_mi¸ocode_èbÀ
), s™disk_15_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

169 {0x040A517a93953c45, 
TOGGLE_MODE
, 6, 
FREQ_NORMAL
, 
ARRAY_SIZE
(
ßndisk_15_mi¸ocode_èbÀ
), s™disk_15_mi¸ocode_èbÀ, 3, {
GENERAL_CFG
(0x80, 0x00), GENERAL_CFG(0x10, 0x06), 
GENERAL_CFG_INVALID
}},

172 
	$dev_is_8639_wôh_ßndisk
(
sh™n⁄_dev
 *
sdev
)

174 i‡(((
sdev
->
Êashid
 == 0x040A517693943a45) || (sdev->flashid == 0x040A517a93953c45)) && \

175 
	`dev_is_8639
(
sdev
->
pci_dev
))

179 
	}
}

181 
	$phy_lun_to_logiˇl_lun_0
(
sh™n⁄_dev
 *
sdev
, 
phy_lun
)

183 
lun_id
, 
lun£t_id
, 
ch™√l_id
;

185 
ch™√l_id
 = 
phy_lun
 / 
sdev
->
max_lun£t_ö_ch™√l
 / sdev->
max_lun_ö_lun£t
;

186 
lun_id
 = 
phy_lun
 % 
sdev
->
max_lun_ö_lun£t
;

187 
lun£t_id
 = 
phy_lun
 / 
sdev
->
max_lun_ö_lun£t
 % sdev->
max_lun£t_ö_ch™√l
;

189  
ch™√l_id
 + 
lun£t_id
 * 
sdev
->
cfg_ch™√ls
 * sdev->
cfg_lun_ö_lun£t
 + 
lun_id
 * sdev->cfg_channels;

190 
	}
}

192 
	$logiˇl_lun_to_phy_lun_0
(
sh™n⁄_dev
 *
sdev
, 
logiˇl_lun
)

194 
lun_id
, 
lun£t_id
, 
ch™√l_id
;

196 
ch™√l_id
 = 
logiˇl_lun
 % 
sdev
->
cfg_ch™√ls
;

197 
lun_id
 = (
logiˇl_lun
 / 
sdev
->
cfg_ch™√ls
Ë% sdev->
cfg_lun_ö_lun£t
;

198 
lun£t_id
 = (
logiˇl_lun
 / 
sdev
->
cfg_ch™√ls
Ë/ sdev->
cfg_lun_ö_lun£t
;

200  
ch™√l_id
 * 
sdev
->
max_lun£t_ö_ch™√l
 * sdev->
max_lun_ö_lun£t
 + 
lun£t_id
 * sdev->max_lun_ö_lun£à+ 
lun_id
;

201 
	}
}

203 
	$phy_lun_to_logiˇl_lun_1
(
sh™n⁄_dev
 *
sdev
, 
phy_lun
)

205 
lun_id
, 
lun£t_id
, 
ch™√l_id
;

207 
ch™√l_id
 = 
phy_lun
 / 
sdev
->
max_lun£t_ö_ch™√l
 / sdev->
max_lun_ö_lun£t
;

208 
lun_id
 = 
phy_lun
 % 
sdev
->
max_lun_ö_lun£t
;

209 
lun£t_id
 = 
phy_lun
 / 
sdev
->
max_lun_ö_lun£t
 % sdev->
max_lun£t_ö_ch™√l
;

211  
ch™√l_id
 + 
lun£t_id
 * 
sdev
->
cfg_ch™√ls
 + 
lun_id
 * sdev->cfg_ch™√l†* sdev->
cfg_lun£t_ö_ch™√l
;

212 
	}
}

214 
	$logiˇl_lun_to_phy_lun_1
(
sh™n⁄_dev
 *
sdev
, 
logiˇl_lun
)

216 
lun_id
, 
lun£t_id
, 
ch™√l_id
;

218 
ch™√l_id
 = 
logiˇl_lun
 % 
sdev
->
cfg_ch™√ls
;

219 
lun£t_id
 = (
logiˇl_lun
 / 
sdev
->
cfg_ch™√ls
Ë% sdev->
cfg_lun£t_ö_ch™√l
;

220 
lun_id
 = (
logiˇl_lun
 / 
sdev
->
cfg_ch™√ls
Ë/ sdev->
cfg_lun£t_ö_ch™√l
;

222  
ch™√l_id
 * 
sdev
->
max_lun£t_ö_ch™√l
 * sdev->
max_lun_ö_lun£t
 + 
lun£t_id
 * sdev->max_lun_ö_lun£à+ 
lun_id
;

223 
	}
}

225 
	#MAX_LUN_MAP_MODE
 2

	)

226 (*
phy_lun_to_logiˇl_lun
[
MAX_LUN_MAP_MODE
])(
sh™n⁄_dev
 *, Ë{
phy_lun_to_logiˇl_lun_0
, 
phy_lun_to_logiˇl_lun_1
};

227 (*
logiˇl_lun_to_phy_lun
[
MAX_LUN_MAP_MODE
])(
sh™n⁄_dev
 *, Ë{
logiˇl_lun_to_phy_lun_0
, 
logiˇl_lun_to_phy_lun_1
};

229 *
	$gë_sh™n⁄_dev_‰om_li°
(
sh™n⁄_li°_hód
 *
li°
)

231  
	`c⁄èöî_of
(
li°
, 
sh™n⁄_dev
,Üist);

232 
	}
}

234 *
	$gë_miscdevi˚_‰om_sh™n⁄_dev
(
sh™n⁄_dev
 *
sdev
)

236  &
sdev
->
misc
;

237 
	}
}

239 *
	$Æloc_logicb_buf
(
sh™n⁄_dev
 *
sdev
, 
gÂ_t
 
gÂ_mask
)

241 *
addr
;

242 
ªåy
:

243 
addr
 = 
	`sh™n⁄_mempoﬁ_Æloc
(
sdev
->
logicb_buf_poﬁ
, 
gÂ_mask
|
__GFP_NORETRY
);

244 i‡(
	`u∆ikñy
(!
addr
)) {

245 
	`sh™n⁄_w¨n
("ÆloˇãÜogicb_bu‡Áûed! mode=0x%x\n", 
gÂ_mask
);

246 i‡(
gÂ_mask
 & 
GFP_SHANNON
)

247 
	`sh™n⁄_m¶ìp
(1);

249 
gÂ_mask
 |
GFP_ATOMIC
;

250 
ªåy
;

252 
	`sh™n⁄_©omic_öc
(&
sdev
->
logicb_buf_cou¡
);

253 
	`sh™n⁄_mem£t
(
addr
, 0, 
sdev
->
logicb_size
);

254  
addr
;

255 
	}
}

257 
	$‰ì_logicb_buf
(
sh™n⁄_dev
 *
sdev
, *
addr
)

259 
	`sh™n⁄_©omic_dec
(&
sdev
->
logicb_buf_cou¡
);

260 
	`sh™n⁄_mempoﬁ_‰ì
(
addr
, 
sdev
->
logicb_buf_poﬁ
);

261 
	}
}

263 
sh™n⁄_ªque°
 *
	$Æloc_ªq
(
gÂ_t
 
gÂ_mask
)

265 
sh™n⁄_ªque°
 *
ªq
;

266 
ªåy
:

267 
ªq
 = 
	`sh™n⁄_mempoﬁ_Æloc
(
sh™n⁄_ªq_poﬁ
, 
gÂ_mask
);

268 i‡(
	`u∆ikñy
(!
ªq
)) {

269 
	`sh™n⁄_w¨n
("Æloˇã sh™n⁄_ªq faû! mode=0x%x\n", 
gÂ_mask
);

270 
gÂ_mask
 |
GFP_ATOMIC
;

271 
ªåy
;

273 
	`sh™n⁄_mem£t
(
ªq
, 0, (*req));

274 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


275 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
debug_li°
);

276 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_ªqs_li°_lock
);

277 
	`sh™n⁄_li°_add_èû
(&
ªq
->
debug_li°
, &
out°™dög_ªqs_li°
);

278 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_ªqs_li°_lock
);

280  
ªq
;

281 
	}
}

283 
	$‰ì_ªq
(
sh™n⁄_ªque°
 *
ªq
)

285 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


286 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_ªqs_li°_lock
);

287 
	`sh™n⁄_li°_dñ
(&
ªq
->
debug_li°
);

288 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_ªqs_li°_lock
);

290 
	`sh™n⁄_mempoﬁ_‰ì
(
ªq
, 
sh™n⁄_ªq_poﬁ
);

291 
	}
}

293 
sh™n⁄_bio
 *
	$Æloc_sbio
(
gÂ_t
 
gÂ_mask
)

295 
sh™n⁄_bio
 *
sbio
;

296 
ªåy
:

297 
sbio
 = 
	`sh™n⁄_mempoﬁ_Æloc
(
sh™n⁄_bio_poﬁ
, 
gÂ_mask
);

298 i‡(
	`u∆ikñy
(!
sbio
)) {

299 
	`sh™n⁄_w¨n
("Æloˇã sh™n⁄_biÿÁû! mode=0x%x\n", 
gÂ_mask
);

300 
gÂ_mask
 |
GFP_ATOMIC
;

301 
ªåy
;

303 
	`sh™n⁄_mem£t
(
sbio
, 0, (*sbio));

304 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 0);

305 
	`SHANNON_INIT_LIST_HEAD
(&
sbio
->
ªq_li°
);

306 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


307 
	`SHANNON_INIT_LIST_HEAD
(&
sbio
->
debug_li°
);

308 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_sbios_li°_lock
);

309 
	`sh™n⁄_li°_add_èû
(&
sbio
->
debug_li°
, &
out°™dög_sbios_li°
);

310 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_sbios_li°_lock
);

312  
sbio
;

313 
	}
}

315 
	$‰ì_sbio
(
sh™n⁄_bio
 *
sbio
)

317 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


318 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_sbios_li°_lock
);

319 
	`sh™n⁄_li°_dñ
(&
sbio
->
debug_li°
);

320 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_sbios_li°_lock
);

322 
	`sh™n⁄_mempoﬁ_‰ì
(
sbio
, 
sh™n⁄_bio_poﬁ
);

323 
	}
}

325 
	$ªc‹d_œãncy
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
)

327 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
ªc‹d_œãncy_lock
);

328 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

329 i‡(
sbio
->
œãncy
 > 
sdisk
->
max_bio_wrôe_œãncy
)

330 
sdisk
->
max_bio_wrôe_œãncy
 = 
sbio
->
œãncy
;

332 i‡(
sbio
->
œãncy
 > 
sdisk
->
max_bio_ªad_œãncy
)

333 
sdisk
->
max_bio_ªad_œãncy
 = 
sbio
->
œãncy
;

335 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
ªc‹d_œãncy_lock
);

336 
	}
}

338 
u64
 
	$gë_sh™n⁄_dev_£˘‹s
(
sh™n⁄_dev
 *
dev
)

340  
dev
->
sdisk
.
£˘‹s
;

341 
	}
}

343 
	$sh_ö¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
)

345 i‡(
	`u∆ikñy
(
dev
->
°©e
 & 
SHN_STATE_ERROR_BIT
)) {

346 
	`sh™n⁄_îr
("FaûedÅÿ›í Dúe˘-IO PCIêFœsh /dev/%†(°©e=ERROR),ÖÀa£Ñef‹m©.\n", 
dev
->
sdisk
.
disk_«me
);

347  -
EBUSY
;

350 
	`sh™n⁄_©omic_öc
(&
dev
->
u£rs
);

351 
	`sh™n⁄_b¨rõr
();

353 
	}
}

355 
	$sdev_Æloc_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
)

357 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

358 
sdev
->
dummy_∑ge
 = 
	`sh™n⁄_kmÆloc
(sdev->
«nd_∑ge_size
, 
GFP_SHANNON
);

359 
sdev
->
dummy_dma_∑ge
 = (
dma_addr_t
)sdev->
dummy_∑ge
;

361 
sdev
->
dummy_∑ge
 = 
	`sh™n⁄_pci_Æloc_c⁄si°ít
(sdev->
pci_dev
, sdev->
«nd_∑ge_size
, &sdev->
dummy_dma_∑ge
);

364 i‡(!
sdev
->
dummy_∑ge
) {

365 
	`sh™n⁄_îr
("cannotállocateÉnough memory for dummy_page.\n");

368 
	`sh™n⁄_mem£t
(
sdev
->
dummy_∑ge
, 0, sdev->
«nd_∑ge_size
);

371 
	}
}

373 
	$sdev_‰ì_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
)

375 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
)||deföed(
CONFIG_SHANNON_EMU_MODULE
)

376 i‡(
sdev
->
dummy_∑ge
)

377 
	`sh™n⁄_k‰ì
(
sdev
->
dummy_∑ge
);

379 i‡(
sdev
->
dummy_∑ge
)

380 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, sdev->
«nd_∑ge_size
, sdev->
dummy_∑ge
, sdev->
dummy_dma_∑ge
);

382 
	}
}

384 
	$‰ì_mi¸ocode_¨øy
(
sh™n⁄_dev
 *
sdev
)

386 
i
;

388 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++) {

389 i‡((
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 & 
MICROCODE_VALID_MASK
) && \

390 (
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 & 
MICROCODE_FROM_NOR_MASK
)) {

391 i‡(
sdev
->
mi¸ocode_¨øy
[
i
].
èbÀ
 !
NULL
) {

392 
	`sh™n⁄_k‰ì
(
sdev
->
mi¸ocode_¨øy
[
i
].
èbÀ
);

393 
sdev
->
mi¸ocode_¨øy
[
i
].
èbÀ
 = 
NULL
;

395 
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 = 
MICROCODE_INVALID
;

398 
	}
}

400 
	$sh_de¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
)

402 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
dev
->
u£rs
)) {

403 
	`sh™n⁄_•ö_lock_bh
(&
devi˚_bôm≠_lock
);

404 
	`sh™n⁄_˛ór_bô
(
dev
->
drive_no
, &
devi˚_bôm≠
);

405 
	`sh™n⁄_li°_dñ
(&
dev
->
li°
);

406 
	`sh™n⁄_•ö_u∆ock_bh
(&
devi˚_bôm≠_lock
);

408 i‡(
dev
->
n‹_mbr_°©us
 & 
MICROCODE_FROM_NORFLASH
)

409 
	`‰ì_mi¸ocode_¨øy
(
dev
);

410 i‡(
dev
->
£˘‹s_codew‹d_addr
) {

411 
	`sh™n⁄_k‰ì
(
dev
->
£˘‹s_codew‹d_addr
);

412 
dev
->
£˘‹s_codew‹d_addr
 = 
NULL
;

414 
	`sh™n⁄_k‰ì
(
dev
);

418 
	}
}

420 
	$upd©e_lun£t_sq_hód
(
sh™n⁄_lun£t
 *
lun£t
)

422 i‡(
lun£t
->
sq_hód
 !lun£t->
sq_hw_hód
) {

423 
	`sh™n⁄_•ö_lock_bh
(&
lun£t
->
lun_b¨_lock
);

424 
	`sh™n⁄_£t_bô
(
lun£t
->
ödex
,Üun£t->
sdev
->
pŸítül_öãºu±_ve˘‹s
);

425 
lun£t
->
sq_hw_hód
 =Üun£t->
sq_hód
;

426 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

427 
	`sh™n⁄_wake_up
(&
lun£t
->
emu_waô
);

429 
	`wrôe_ªg_ß„
(
lun£t
->
sdev
,Üun£t->
sq_hód
, &lun£t->
lun_b¨
->sq_head);

431 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
lun_b¨_lock
);

433 
	}
}

439 
	$Æloc_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
cou¡
)

441 
ªt
 = -
EBUSY
;

442 
cq_èû
 = 
lun£t
->cq_tail;

446 i‡(
cq_èû
 =
lun£t
->
sq_hód_tmp
) {

447 
ªt
 = 
lun£t
->
sq_hód_tmp
;

448 
lun£t
->
sq_hód_tmp
 = (lun£t->sq_hód_tm∞+ (
cou¡
 << 3)Ë% 
QUEUE_SIZE
;

449 
out
;

452 i‡(((
cq_èû
 + 
QUEUE_SIZE
Ë- 
lun£t
->
sq_hód_tmp
Ë% QUEUE_SIZE <(
cou¡
 << 3)) {

453 
out
;

455 
ªt
 = 
lun£t
->
sq_hód_tmp
;

456 
lun£t
->
sq_hód_tmp
 = (lun£t->sq_hód_tm∞+ (
cou¡
 << 3)Ë% 
QUEUE_SIZE
;

457 
out
;

459 
out
:

460  
ªt
;

461 
	}
}

463 
	#COMP_QUEUE_FILL
 0xFAFAFAFAFAFAFAFAUL

	)

464 
	$˛ór_comm™d_queue
(
u64
 *
addr
, 
off£t
, 
cou¡
, u64 
vÆue
)

466 
i
;

467 
u64
 *
cmd
;

469 
i
 = 0; i < 
cou¡
; i++) {

470 
cmd
 = 
addr
 + (
off£t
 >> 3);

471 *
cmd
 = 
vÆue
;

472 
off£t
 += 8;

473 i‡(
off£t
 =
QUEUE_SIZE
)

474 
off£t
 = 0;

476 
	}
}

483 
	$Æloc_cmd_¶ì∑bÀ
(
sh™n⁄_lun£t
 *
lun£t
, 
cou¡
)

485 
cmd_off£t
;

487 
	`sh™n⁄_waô_evít
(
lun£t
->
waô_cmd_pos
, (
cmd_off£t
 = 
	`Æloc_cmd
÷un£t, 
cou¡
)) >= 0);

488 i‡(
	`u∆ikñy
(
cmd_off£t
 < 0))

489  -
EINTR
;

490 
	`˛ór_comm™d_queue
((
u64
 *)
lun£t
->
sq_addr
, 
cmd_off£t
, 
cou¡
, 0);

491 i‡(
has_dma_dñay
)

492 
	`˛ór_comm™d_queue
((
u64
 *)
lun£t
->
cq_addr
, 
cmd_off£t
, 
cou¡
, 
COMP_QUEUE_FILL
);

494  
cmd_off£t
;

495 
	}
}

498 *
	$cmd_queue_öc
(*
poöt
, 
cou¡
)

500 
__u64
 
°¨t
 = (__u64)
poöt
;

502  (*)((
°¨t
 & ~(
QUEUE_SIZE
-1)Ë| ((°¨à+ (
cou¡
<<3))&(QUEUE_SIZE - 1)));

503 
	}
}

505 
sh™n⁄_ªque°
 *
	$föd_lun_pba
(
sh™n⁄_li°_hód
 *
queue_hód
, 
logicb_t
 
lun_pba
)

507 
sh™n⁄_ªque°
 *
ªq
;

509 i‡(
	`sh™n⁄_li°_em±y
(
queue_hód
))

510  
NULL
;

512 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, 
queue_hód
, 
chunk_li°
) {

513 i‡(
ªq
->
pba
.
lun_pba
 ==Üun_pba)

514  
ªq
;

515 i‡(
ªq
->
pba
.
lun_pba
 >Üun_pba)

516  
NULL
;

518  
NULL
;

519 
	}
}

521 
	$ˇlcuœã_µa_°ru˘
(
sh™n⁄_dev
 *
sdev
)

523 i‡(
sdev
->
mbr
.
µa_∑ge_width
 || sdev->mbr.
µa_∂™e_width
) {

524 
sdev
->
µa_∑ge_width
 = sdev->
mbr
.ppa_page_width;

525 
sdev
->
µa_∂™e_width
 = sdev->
mbr
.ppa_plane_width;

527 
sdev
->
µa_∑ge_width
 = 
	`sh™n⁄_gë_cou¡_‹dî
(sdev->
∑ges_ö_eblock
);

528 
sdev
->
µa_∂™e_width
 = 
	`sh™n⁄_gë_cou¡_‹dî
(sdev->
∂™es
);

531 
sdev
->
µa_∑ge_shi·
 = 0;

532 
sdev
->
µa_∂™e_shi·
 = sdev->
µa_∑ge_width
;

533 
sdev
->
µa_block_shi·
 = sdev->
µa_∑ge_width
 + sdev->
µa_∂™e_width
;

535 
sdev
->
µa_block_width
 = 24 - sdev->
µa_block_shi·
;

537 i‡((
sdev
->
µa_∑ge_width
 < 0Ë|| (sdev->
µa_∂™e_width
 < 0Ë|| (sdev->
µa_block_width
 < 0))

541 
	}
}

543 
ölöe
 
u32
 
	$c⁄vît_µa
(
sh™n⁄_dev
 *
sdev
, 
u32
 
µa
)

545 
u32
 
cmd_µa
, 
block
, 
∂™e
, 
∑ge
;

547 
block
 = 
µa
 / 
sdev
->
∑ges_ö_eblock
 / sdev->
∂™es
;

548 
∂™e
 = (
µa
 / 
sdev
->
∑ges_ö_eblock
Ë% sdev->
∂™es
;

549 
∑ge
 = 
µa
 % 
sdev
->
∑ges_ö_eblock
;

551 
cmd_µa
 = 
	`cmd_∑π
(
block
, 
sdev
->
µa_block_width
, sdev->
µa_block_shi·
);

552 
cmd_µa
 |
	`cmd_∑π
(
∂™e
, 
sdev
->
µa_∂™e_width
, sdev->
µa_∂™e_shi·
);

553 
cmd_µa
 |
	`cmd_∑π
(
∑ge
, 
sdev
->
µa_∑ge_width
, sdev->
µa_∑ge_shi·
);

555  
cmd_µa
;

556 
	}
}

558 
u32
 
	$make_cmd_dw‹d1
(
sh™n⁄_dev
 *
sdev
, 
u32
 
µa
, u32 
phy_lun
)

560 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

561  
	`cmd_∑π
(
	`c⁄vît_µa
(
sdev
, 
µa
), 24, 0Ë| cmd_∑π(
phy_lun
, 8, 24);

563  
	`cmd_∑π
(
µa
, 24, 0Ë| cmd_∑π(
phy_lun
, 8, 24);

564 
	}
}

566 #ifde‡
SHANNON_USE_WRITE_BUFFER


567 
u32
 
	$make_buf_cmd_dw‹d1
(
sh™n⁄_dev
 *
sdev
, 
u32
 
µa
, 
logicbs
, 
±es
)

569 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

570  
	`cmd_∑π
(
	`c⁄vît_µa
(
sdev
, 
µa
), 24, 0Ë| cmd_∑π(
logicbs
, 4, 24Ë| cmd_∑π(
±es
, 4, 28);

572  
	`cmd_∑π
(
µa
, 24, 0Ë| cmd_∑π(
logicbs
, 4, 24Ë| cmd_∑π(
±es
, 4, 28);

573 
	}
}

576 
u32
 
	$gë_cmd_µa
(
sh™n⁄_dev
 *
sdev
, 
u32
 *
dw‹d1
)

578 
u32
 
block
, 
∂™e
, 
∑ge
;

579 
u32
 
dw‹d
;

581 
dw‹d
 = 
	`sh™n⁄_mem_ªadl
(
dw‹d1
);

582 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

583 
block
 = (
dw‹d
 >> (
sdev
->
µa_∑ge_width
 + sdev->
µa_∂™e_width
)Ë& ((1 << sdev->
µa_block_width
) - 1);

584 i‡(
sdev
->
µa_∂™e_width
)

585 
∂™e
 = (
dw‹d
 >> 
sdev
->
µa_∑ge_width
Ë& ((1 << sdev->
µa_∂™e_width
) - 1);

587 
∂™e
 = 0;

588 
∑ge
 = 
dw‹d
 & ((1 << 
sdev
->
µa_∑ge_width
) - 1);

590  
sdev
->
∑ges_ö_siblög_eblock
 * 
block
 + sdev->
∑ges_ö_eblock
 * 
∂™e
 + 
∑ge
;

592  (
dw‹d
 & ((1UL << 24) - 1));

593 
	}
}

595 
	$sh™n⁄_ˇched_ªad
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_li°_hód
 *
queue_hód
, 
hód
, 
¢≠_ªad
)

597 
sh™n⁄_ªque°
 *
¥ev
 = 
NULL
, *
ªq
 = NULL, *
fú°
;

598 
sh™n⁄_dev
 * 
sdev
 = 
lun£t
->sdev;

599 
sh™n⁄_ˇched_ªad_cmd
 *
ªad
;

600 
sh™n⁄_lun
 *
lun
;

601 
sh™n⁄_sb
 *
sb
;

602 
sh™n⁄_li°_hód
 
tmp_li°
;

603 
cmd_off£t
, 
cmdid
;

604 
cou¡
, 
logicbs
, 
exåa_±e
;

605 
dummy_ªad
 = 0;

606 
u64
 *
±e
;

608 
	`SHANNON_INIT_LIST_HEAD
(&
tmp_li°
);

609 
logicbs
 = 0;

610 
exåa_±e
 = 0;

612 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(
queue_hód
, 
sh™n⁄_ªque°
, 
chunk_li°
);

613 
fú°
 = 
ªq
;

614 
lun
 = 
sdev
->lun[
fú°
->
pba
.lun];

615 
sb
 = 
sdev
->
sbs
 + 
fú°
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

616 
sb
->
ªad_cou¡
[
fú°
->
pba
.
lun
]++;

617 i‡(
sb
->
ªad_cou¡
[
fú°
->
pba
.
lun
] > sb->
max_ªad_cou¡
) {

622 
sb
->
max_ªad_cou¡
 = sb->
ªad_cou¡
[
fú°
->
pba
.
lun
];

623 i‡(((
sb
->
°©e
 =
HOT_ACTIVE_BLOCK
Ë|| (sb->°©ê=
COLD_ACTIVE_BLOCK
)) && \

624 (
sb
->
max_ªad_cou¡
 > 
sdev
->
›í_block_ªad_di°urb_thªshﬁd
) && \

625 (
sdev
->
öô_d⁄e
 >
STAGE9_DONE
) && \

626 (
sb
->
fûl_sb
 =0Ë&& (
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
)) {

627 
sb
->
fûl_sb
 = 1;

628 #ifde‡
SHANNON_USE_WRITE_BUFFER


629 i‡(
sb
->
°©e
 =
HOT_ACTIVE_BLOCK
) {

630 i‡(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
fûl_chunk_timî
[
HOT_INDEX
]))

631 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
HOT_INDEX
));

632 } i‡(
sb
->
°©e
 =
COLD_ACTIVE_BLOCK
) {

633 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


634 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

636 i‡(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
fûl_chunk_timî
[
COLD_INDEX
]))

637 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
COLD_INDEX
));

643 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
chunk_li°
);

644 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
tmp_li°
);

645 
logicbs
++;

646 i‡(
	`is_dummyªad_ªq
(
ªq
))

647 
dummy_ªad
++;

648 i‡(
ªq
->
dma_addªss_2
)

649 
exåa_±e
++;

650 
¥ev
 = 
ªq
;

651 
ªq
 = 
	`föd_lun_pba
(
queue_hód
, 
¥ev
->
pba
.
lun_pba
 + 1);

652 } 
ªq
 && (
logicbs
 < 8));

654 
cou¡
 = 1 + 
logicbs
 + 
exåa_±e
;

655 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

656 i‡(
cmd_off£t
 < 0) {

657 
	`sh™n⁄_îr
("weáre killed.\n");

658 
	`BUG
();

661 
cmdid
 = 
cmd_off£t
 >> 3;

662 
ªad
 = (
sh™n⁄_ˇched_ªad_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

663 #ifde‡
SHANNON_USE_WRITE_BUFFER


664 i‡(!
	`sh™n⁄_li°_em±y
(
queue_hód
))

665 
ªad
->
›code
 = 
sh_cmd_ªad
;

667 
ªad
->
›code
 = 
sh_cmd_ªad_íd
;

669 
ªad
->
›code
 = 
sh_cmd_ªad
;

671 
ªad
->
byã1
 = 
	`make_ªad_cmd_byã1
(
logicbs
 - 1, 
exåa_±e
);

672 
ªad
->
hód
 = (hód & 
MULTI_PLANES_MASK
Ë| ((
dummy_ªad
 =
logicbs
Ë? 
DUMMY_READ_MASK
 : 0x0);

673 
ªad
->
fú°_logicb
 = 
fú°
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
;

674 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
fú°
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
, 
lun
->
phy_lun_num
), &
ªad
->
dw‹d1
);

675 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

676 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

677 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

679 
±e
 = 
	`cmd_queue_öc
(
ªad
, 1);

680 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
tmp_li°
));

681 !
	`sh™n⁄_li°_em±y
(&
tmp_li°
)) {

682 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
tmp_li°
, 
sh™n⁄_ªque°
, 
li°
);

683 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

684 
ªq
->
°©e
 = 
REQ_CMD_QUEUE
;

685 i‡(
¢≠_ªad
)

686 
	`£t_¢≠ªad_ªq
(
ªq
);

688 
	`˛ón_¢≠ªad_ªq
(
ªq
);

689 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

690 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss
, 
±e
);

691 
±e
 = 
	`cmd_queue_öc
(pte, 1);

692 i‡(
ªq
->
dma_addªss_2
) {

693 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss_2
, 
±e
);

694 
±e
 = 
	`cmd_queue_öc
(pte, 1);

699 
	}
}

701 
	$bñ⁄g_to_bad_lun
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

703 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
¥eq
->
pba
.lun];

704 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + 
¥eq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

706 i‡(
sb
->
sb_ödex
 < 
sdev
->
mbr_eblocks
/sdev->
∂™es
)

708 i‡(
lun
->
bad
)

710 #ifde‡
CONFIG_READ_SKIP_BAD_BLOCKS


711 i‡(
	`is_bad_lun
(
sb
, 
lun
->
lun_num
))

715 
	}
}

717 
	$sh™n⁄_¥e_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
, sh™n⁄_ªque° *
œ°_ªq
, 
hód
)

719 
sh™n⁄_cmd
 *
¥e_ªad
;

720 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

721 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

722 
cmd_off£t
, 
cmdid
;

724 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
hód
 ? 
sdev
->
∂™es
 : 1);

725 i‡(
cmd_off£t
 < 0) {

726 
	`sh™n⁄_îr
("weáre killed.\n");

727 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

728 
	`BUG
();

731 
cmdid
 = 
cmd_off£t
 >> 3;

733 
¥e_ªad
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

734 
¥e_ªad
->
›code
 = 
sh_cmd_¥e_ªad
;

735 
¥e_ªad
->
logicbs
 = 0;

736 
¥e_ªad
->
hód
 = hód & 
MULTI_PLANES_MASK
;

737 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
, 
lun
->
phy_lun_num
), &
¥e_ªad
->
dw‹d1
);

738 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 8;

739 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

740 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

742 
cmd_off£t
 = (cmd_off£à+ 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
)%
QUEUE_SIZE
;

743 
cmdid
 = 
cmd_off£t
 >> 3;

745 i‡(
hód
) {

746 
	`BUG_ON
(
œ°_ªq
 =
NULL
);

747 
¥e_ªad
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

748 
¥e_ªad
->
›code
 = 
sh_cmd_¥e_ªad
;

749 
¥e_ªad
->
logicbs
 = 0;

750 
¥e_ªad
->
hód
 = hód & 
MULTI_PLANES_MASK
;

751 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
œ°_ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
, 
lun
->
phy_lun_num
), &
¥e_ªad
->
dw‹d1
);

752 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 8;

753 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

754 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

756 
	}
}

758 
sh™n⁄_Á°_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
);

759 
h™dÀ_ªad_îr‹
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
);

760 
h™dÀ_wrôe_îr‹
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_sb
 *
sb
, 
sh™n⁄_cmd_öfo
 *
öfo
);

761 
	$__sh™n⁄_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

763 
sh™n⁄_ªque°
 *
p
;

764 
hód
;

765 
ªt
 = 0;

766 
∂™es
 = 0;

767 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

768 
sh™n⁄_li°_hód
 
queue_hód
;

770 i‡(
	`u∆ikñy
(
	`bñ⁄g_to_bad_lun
(
sdev
, 
ªq
))) {

771 !
	`sh™n⁄_li°_em±y
(&
ªq
->
chunk_li°
)) {

772 
p
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

773 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
chunk_li°
);

774 
ªq
->
ªªad
 = (‘eq->ªªad & ~
REREAD_NUM_MASK
Ë| 
sdev
->
ªåy_times_⁄_îr‹
);

775 
ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

776 i‡(
ªq
->
£ndî
 =
FROM_PERIOD_READ
)

777 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

779 
	`h™dÀ_ªad_îr‹
(
sdev
, 
ªq
);

780 
ªq
 = 
p
;

782 
ªq
->
ªªad
 = (‘eq->ªªad & ~
REREAD_NUM_MASK
Ë| 
sdev
->
ªåy_times_⁄_îr‹
);

783 
ªq
->
_ecc
 = 
SH_SOFT_ERR_2
;

784 i‡(
ªq
->
£ndî
 =
FROM_PERIOD_READ
)

785 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

787 
	`h™dÀ_ªad_îr‹
(
sdev
, 
ªq
);

791 
p
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.
¥ev
, 
sh™n⁄_ªque°
, chunk_list);

792 i‡(
ªq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_∑ge
 !
p
->pba.lun_pba/sdev->logicbs_in_page) {

793 
hód
 = (1 << 
MULTI_PLANES_SHIFT
);

794 
∂™es
 = 
sdev
->planes;

796 
hód
 = 0;

797 
∂™es
 = 1;

800 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

801 
ªt
 = 
	`do_¢≠_ªad
(
lun£t
, 
ªq
, 
∂™es
);

802 
	`SHANNON_INIT_LIST_HEAD
(&
queue_hód
);

803 
	`sh™n⁄_li°_add_èû
(&
queue_hód
, &
ªq
->
chunk_li°
);

805 i‡(
sdev
->
Á°_ªad_íabÀ
)

806 
	`sh™n⁄_Á°_ªad_cmd
(
lun£t
, 
ªq
);

808 i‡(!
ªt
) {

809 
	`BUG_ON
((
sdev
->
lun
[
ªq
->
pba
.lun]->
˚
->
„©uª_Êags
 & 
SNAPREAD_ENABLE_MASK
));

810 i‡(
hód
)

811 
	`sh™n⁄_¥e_ªad_cmd
(
lun£t
, 
ªq
, 
p
, 
hód
);

813 
	`sh™n⁄_¥e_ªad_cmd
(
lun£t
, 
ªq
, 
NULL
, 
hód
);

815 
	`BUG_ON
((
sdev
->
lun
[
ªq
->
pba
.lun]->
˚
->
„©uª_Êags
 & 
SNAPREAD_ENABLE_MASK
) == 0);

818 
	`sh™n⁄_ˇched_ªad
(
lun£t
, &
queue_hód
, 
hód
, 
ªt
);

819 } !
	`sh™n⁄_li°_em±y
(&
queue_hód
));

821 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

822 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

823 
	}
}

825 
ölöe
 
	$sh™n⁄_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

827 
	`__sh™n⁄_ªad_cmd
(
lun£t
, 
ªq
);

828 
	`upd©e_lun£t_sq_hód
(
lun£t
);

829 
	}
}

831 
	$sh™n⁄_¥efix_no_›_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
, 
f‹_∑rôy
)

833 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

834 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

835 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
];

836 
sub_group
 *
group
 = &
sb
->sub_group[
lun
->
lun_num
/
sdev
->
max_luns_ö_group
];

837 
sh™n⁄_cmd
 *
no_›
;

838 
phy_lun
 = 
lun
->
phy_lun_num
;

839 
cmd_off£t
, 
cmdid
;

840 
cou¡
 = 1;

842 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

843 i‡(
cmd_off£t
 < 0) {

844 
	`sh™n⁄_îr
("weáre killed.\n");

845 
	`BUG
();

848 
cmdid
 = 
cmd_off£t
 >> 3;

849 
no_›
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

850 
no_›
->
›code
 = 
sh_cmd_no_›
;

851 
no_›
->
hód
 = 
ªq
->head;

853 
f‹_∑rôy
) {

855 
no_›
->
øid_°rùe
 = 0xC0 | (
group
->
phy_ödex
 & 0x0F);

858 
no_›
->
øid_°rùe
 = 0x60 | (
group
->
phy_ödex
 & 0x0F);

861 
no_›
->
øid_°rùe
 = 0x40 | (
group
->
phy_ödex
 & 0x0F);

863 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
lun£t
->
sdev
, 
ªq
->
pba
.
lun_pba
/lun£t->sdev->
logicbs_ö_∑ge
, 
phy_lun
), &
no_›
->
dw‹d1
);

865 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

866 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

867 
lun£t
->
cmd_öfo
[
cmdid
].
lun_pba
 = 
ªq
->
pba
.lun_pba;

868 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

869 
	}
}

872 
	$__sh™n⁄_adv™˚d_ªad_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
fú°
)

874 
sh™n⁄_ªque°
 *
ªq
, *
√xt
;

875 
sh™n⁄_ˇched_ªad_cmd
 *
ªad
;

876 
sh™n⁄_cmd
 *
no_›
;

877 
cmd_off£t
, 
cmdid
;

878 
ªad_cmd_cou¡
, 
logicbs
 = 0, 
exåa_±e
 = 0;

879 
u64
 *
±e
;

880 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

881 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
fú°
->
pba
.lun];

882 
dummy_ªad
 = 0;

884 
ªq
 = 
fú°
;

886 
logicbs
++;

887 i‡(
	`is_dummyªad_ªq
(
ªq
))

888 
dummy_ªad
++;

889 i‡(
ªq
->
dma_addªss_2
)

890 
exåa_±e
++;

891 
ªq
 = 
	`sh™n⁄_li°_íåy
‘eq->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

892 } 
ªq
 !
fú°
);

894 
ªad_cmd_cou¡
 = 1 + 
logicbs
 + 
exåa_±e
;

895 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

896 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
ªad_cmd_cou¡
);

898 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
ªad_cmd_cou¡
 + 1);

899 i‡(
cmd_off£t
 < 0) {

900 
	`sh™n⁄_îr
("weáre killed.\n");

901 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

902 
	`BUG
();

905 
cmdid
 = 
cmd_off£t
 >> 3;

906 
ªad
 = (
sh™n⁄_ˇched_ªad_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

907 
ªad
->
›code
 = 
sh_cmd_adv™˚d_ªad
;

908 
ªad
->
byã1
 = 
	`make_ªad_cmd_byã1
(
logicbs
 - 1, 
exåa_±e
);

909 
ªad
->
hód
 = (
dummy_ªad
 =
logicbs
Ë? 
DUMMY_READ_MASK
 : 0x0;

910 
ªad
->
fú°_logicb
 = 
fú°
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
;

911 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
fú°
->
pba
.
lun_pba
 / sdev->
logicbs_ö_∑ge
, 
lun
->
phy_lun_num
), &
ªad
->
dw‹d1
);

913 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
ªad_cmd_cou¡
 << 3;

914 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

915 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

917 
√xt
 = 
fú°
;

918 
±e
 = 
	`cmd_queue_öc
(
ªad
, 1);

920 
ªq
 = 
√xt
;

921 
√xt
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.√xt, 
sh™n⁄_ªque°
, chunk_list);

922 
	`˛ón_¢≠ªad_ªq
(
ªq
);

923 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
chunk_li°
);

924 
ªq
->
°©e
 = 
REQ_CMD_QUEUE
;

925 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

926 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss
, 
±e
);

927 
±e
 = 
	`cmd_queue_öc
(pte, 1);

928 i‡(
ªq
->
dma_addªss_2
) {

929 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss_2
, 
±e
);

930 
±e
 = 
	`cmd_queue_öc
(pte, 1);

932 } 
ªq
 !
√xt
);

934 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

936 
no_›
 = (
sh™n⁄_cmd
 *)
±e
;

937 
cmdid
 = 
no_›
 - 
lun£t
->
sq_addr
;

938 
no_›
->
›code
 = 
sh_cmd_no_›
;

939 
no_›
->
hód
 = 0;

942 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 0, 
lun
->
phy_lun_num
), &
no_›
->
dw‹d1
);

943 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 8;

944 
lun£t
->
cmd_öfo
[
cmdid
].
lun_pba
 = 
fú°
->
pba
.lun_pba;

945 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

946 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

949 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

950 
	}
}

952 
ölöe
 
	$sh™n⁄_adv™˚d_ªad
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

954 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

955 i‡(
lun£t
->
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(lunset->sdev))

956 
	`¢≠_ªad_dißbÀ
(
lun£t
,Üun£t->
sdev
->
lun
[
ªq
->
pba
.lun], 0, 1);

957 i‡(
lun£t
->
sdev
->
¥efix_no_›_cmd
)

958 
	`sh™n⁄_¥efix_no_›_cmd
(
lun£t
, 
ªq
, 2);

959 
	`__sh™n⁄_adv™˚d_ªad_cmd
(
lun£t
, 
ªq
);

960 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

961 
	`upd©e_lun£t_sq_hód
(
lun£t
);

962 
	}
}

964 
	$sh™n⁄_no_›_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
phy_lun
, 
logicb_t
 
lun_pba
)

966 
sh™n⁄_cmd
 *
no_›
;

967 
cmd_off£t
, 
cmdid
;

968 
cou¡
 = 1;

970 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

971 i‡(
cmd_off£t
 < 0) {

972 
	`sh™n⁄_îr
("weáre killed.\n");

973 
	`BUG
();

976 
cmdid
 = 
cmd_off£t
 >> 3;

977 
no_›
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

978 
no_›
->
›code
 = 
sh_cmd_no_›
;

979 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
lun£t
->
sdev
, 
lun_pba
/lun£t->sdev->
logicbs_ö_∑ge
, 
phy_lun
), &
no_›
->
dw‹d1
);

981 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

982 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

983 
lun£t
->
cmd_öfo
[
cmdid
].
lun_pba
 =Üun_pba;

984 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

985 
	}
}

987 
sh™n⁄_ªque°
 *
	$sh™n⁄_wrôe_⁄e_∑ge
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
fú°
, *
œ°_cmdid
)

989 
sh™n⁄_wrôe_cmd
 *
wrôe
;

990 
cmd_off£t
, 
cmdid
;

991 
sh™n⁄_ªque°
 *
ªq
, *
√xt
 = 
NULL
;

992 
i
, 
cou¡
, 
exåa_±e
 = 0;

993 
u64
 *
±e
;

994 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

995 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
fú°
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
];

996 
sub_group
 *
group
 = &
sb
->sub_group[
fú°
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

997 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
fú°
->
pba
.lun];

999 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_∑ge
, &sdev->
ö_cmd_queue_wrôes
);

1000 
	`sh™n⁄_©omic_add
(
sdev
->
logicbs_ö_∑ge
, &
sb
->
unföished_wrôes
);

1002 
ªq
 = 
fú°
;

1003 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

1004 i‡(
ªq
->
dma_addªss_2
)

1005 
exåa_±e
++;

1006 
ªq
 = 
	`sh™n⁄_li°_íåy
‘eq->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

1009 
cou¡
 = 1 + 
sdev
->
logicbs_ö_∑ge
 * 2 + 
exåa_±e
;

1010 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

1011 i‡(
cmd_off£t
 < 0) {

1012 
	`sh™n⁄_îr
("weáre killed.\n");

1013 
	`BUG
();

1014  
NULL
;

1016 
cmdid
 = 
cmd_off£t
 >> 3;

1017 *
œ°_cmdid
 = 
cmdid
;

1019 
wrôe
 = (
sh™n⁄_wrôe_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1020 
wrôe
->
›code
 = 
sh_cmd_wrôe
;

1021 
wrôe
->
exåa_±e
 =Éxtra_pte;

1022 
wrôe
->
øid_°rùe
 = 
group
->
phy_ödex
;

1023 
wrôe
->
hód
 = 
fú°
->head;

1024 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
fú°
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
, 
lun
->
phy_lun_num
), &
wrôe
->
dw‹d1
);

1026 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 
cou¡
 << 3;

1027 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1028 
lun£t
->
cmd_öfo
[
cmdid
].
logicbs
 = 
sdev
->
logicbs_ö_∑ge
;

1029 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1031 
ªq
 = 
fú°
;

1032 
±e
 = 
	`cmd_queue_öc
(
wrôe
, 1);

1033 
i
 = 0; i < 
sdev
->
logicbs_ö_∑ge
; i++) {

1034 
	`BUG_ON
(
ªq
 =
NULL
);

1035 
ªq
->
°©e
 = 
REQ_CMD_QUEUE
;

1036 
√xt
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.√xt, 
sh™n⁄_ªque°
, chunk_list);

1037 i‡((
√xt
 =
ªq
Ë|| (√xà=
fú°
))

1038 
√xt
 = 
NULL
;

1039 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss
, 
±e
);

1040 
±e
 = 
	`cmd_queue_öc
(pte, 1);

1041 i‡(
ªq
->
dma_addªss_2
) {

1042 
	`sh™n⁄_mem_wrôeq
(
ªq
->
dma_addªss_2
, 
±e
);

1043 
±e
 = 
	`cmd_queue_öc
(pte, 1);

1045 
	`sh™n⁄_mem_wrôeq
(
ªq
->
_mëad©a
, 
±e
);

1046 
±e
 = 
	`cmd_queue_öc
(pte, 1);

1047 
ªq
 = 
√xt
;

1049  
√xt
;

1050 
	}
}

1052 
	$__sh™n⁄_wrôe_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1054 
sh™n⁄_lun
 *
lun
 = 
NULL
;

1055 
logicb_t
 
lun_pba
 = 0;

1056 
sh™n⁄_ªque°
 *
p
, *
√xt
;

1057 
i
, 
œ°_cmdid
 = 0, 
hód
 = 
ªq
->head;

1059 i‡(
hód
 & 
NO_POLL_MASK
) {

1060 
lun
 = 
lun£t
->
sdev
->lun[
ªq
->
pba
.lun];

1061 
lun_pba
 = 
ªq
->
pba
.lun_pba;

1064 
p
 = 
ªq
;

1065 
i
 = 0; i < 
lun£t
->
sdev
->
∂™es
; i++) {

1066 
p
 = 
	`sh™n⁄_wrôe_⁄e_∑ge
(
lun£t
,Ö, &
œ°_cmdid
);

1067 i‡(!
p
)

1071 
p
 = 
ªq
;

1072 
i
 = 0; i < 
lun£t
->
sdev
->
logicbs_ö_∑ge
 *Üun£t->sdev->
∂™es
; i++) {

1073 
√xt
 = 
	`sh™n⁄_li°_íåy
(
p
->
chunk_li°
.√xt, 
sh™n⁄_ªque°
, chunk_list);

1074 
	`sh™n⁄_li°_add_èû
(&
p
->
li°
, &
lun£t
->
cmd_öfo
[
œ°_cmdid
].
ªq_li°
);

1075 i‡(
	`sh™n⁄_li°_em±y
(&
p
->
chunk_li°
)) {

1076 
	`sh™n⁄_li°_dñ_öô
(&
p
->
chunk_li°
);

1079 
	`sh™n⁄_li°_dñ_öô
(&
p
->
chunk_li°
);

1080 
p
 = 
√xt
;

1084 i‡(
hód
 & 
NO_POLL_MASK
)

1085 
	`sh™n⁄_no_›_cmd
(
lun£t
, 
lun
->
phy_lun_num
, 
lun_pba
);

1087 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

1088 
	}
}

1090 
	$sh™n⁄_wrôe_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1092 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

1093 i‡(
lun£t
->
sdev
->
¥efix_no_›_cmd
)

1094 
	`sh™n⁄_¥efix_no_›_cmd
(
lun£t
, 
ªq
, 0);

1095 
	`__sh™n⁄_wrôe_cmd
(
lun£t
, 
ªq
);

1096 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1097 
	`upd©e_lun£t_sq_hód
(
lun£t
);

1098 
	}
}

1100 
	$__sh™n⁄_îa£_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
, 
mu…i_∂™e
)

1102 
sh™n⁄_cmd
 *
îa£
;

1103 
cmd_off£t
, 
cmdid
;

1104 
sh™n⁄_ªque°
 *
p
;

1105 
sh™n⁄_lun
 *
lun
 = 
lun£t
->
sdev
->lun[
ªq
->
pba
.lun];

1107 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 1);

1108 i‡(
cmd_off£t
 < 0) {

1109 
	`sh™n⁄_îr
("weáre killed.\n");

1110 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1111 
	`BUG
();

1114 
cmdid
 = 
cmd_off£t
 >> 3;

1116 
îa£
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1117 
îa£
->
›code
 = 
sh_cmd_îa£
;

1118 i‡(
mu…i_∂™e
 && !
lun£t
->
sdev
->
p£udo_∂™e
)

1119 
îa£
->
hód
 = (1 << 
MULTI_PLANES_SHIFT
);

1121 
îa£
->
hód
 = 0;

1122 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
lun£t
->
sdev
, 
ªq
->
µa
, 
lun
->
phy_lun_num
), &
îa£
->
dw‹d1
);

1124 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 1 << 3;

1125 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1127 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1128 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1130 !
	`sh™n⁄_li°_em±y
(&
ªq
->
chunk_li°
)) {

1131 
p
 = 
	`sh™n⁄_li°_fú°_íåy
(&
ªq
->
chunk_li°
, 
sh™n⁄_ªque°
, chunk_list);

1132 
	`sh™n⁄_li°_dñ_öô
(&
p
->
chunk_li°
);

1134 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 1);

1135 
	`BUG_ON
(
cmd_off£t
 < 0);

1136 
cmdid
 = 
cmd_off£t
 >> 3;

1137 
îa£
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1138 
îa£
->
›code
 = 
sh_cmd_îa£
;

1139 i‡(
mu…i_∂™e
 && !
lun£t
->
sdev
->
p£udo_∂™e
)

1140 
îa£
->
hód
 = (1 << 
MULTI_PLANES_SHIFT
);

1142 
îa£
->
hód
 = 0;

1143 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
lun£t
->
sdev
, 
p
->
µa
, 
lun
->
phy_lun_num
), &
îa£
->
dw‹d1
);

1145 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 1 << 3;

1146 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1147 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1148 
	`sh™n⁄_li°_add_èû
(&
p
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1151 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

1153 
	}
}

1155 
ölöe
 
	$sh™n⁄_îa£_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1157 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

1158 
	`__sh™n⁄_îa£_cmd
(
lun£t
, 
ªq
,Üun£t->
sdev
->
∂™es
 - 1);

1159 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1160 
	`upd©e_lun£t_sq_hód
(
lun£t
);

1161 
	}
}

1163 
	$__sh™n⁄_∑rôy_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1165 
sh™n⁄_cmd
 *
∑rôy
;

1166 
cmd_off£t
, 
cmdid
;

1167 
sh™n⁄_ªque°
 *
p
;

1168 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

1169 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

1170 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
ªq
->
µa
/(sdev->
∑ges_ö_eblock
 * sdev->
∂™es
)];

1171 
sub_group
 *
group
 = &
sb
->sub_group[
lun
->
lun_num
/
sdev
->
max_luns_ö_group
];

1172 
cou¡
 = 
lun£t
->
sdev
->
∂™es
;

1174 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 
cou¡
);

1175 i‡(
cmd_off£t
 < 0) {

1176 
	`sh™n⁄_îr
("weáre killed.\n");

1177 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1178 
	`BUG
();

1181 
cmdid
 = 
cmd_off£t
 >> 3;

1182 
∑rôy
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1183 
∑rôy
->
›code
 = 
sh_cmd_∑rôy
;

1184 
∑rôy
->
øid_°rùe
 = 
group
->
phy_ödex
;

1185 
∑rôy
->
hód
 = 
ªq
->hód & ~
NO_POLL_MASK
;

1186 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
ªq
->
µa
, 
lun
->
phy_lun_num
), &
∑rôy
->
dw‹d1
);

1187 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 1 << 3;

1188 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1190 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1191 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1193 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
ªq
->
chunk_li°
Ë&& (
lun£t
->
sdev
->
∂™es
 != 1));

1195 !
	`sh™n⁄_li°_em±y
(&
ªq
->
chunk_li°
)) {

1196 
p
 = 
	`sh™n⁄_li°_fú°_íåy
(&
ªq
->
chunk_li°
, 
sh™n⁄_ªque°
, chunk_list);

1197 
	`sh™n⁄_li°_dñ_öô
(&
p
->
chunk_li°
);

1199 
cmd_off£t
 = (cmd_off£à+ 8)%
QUEUE_SIZE
;

1200 
cmdid
 = 
cmd_off£t
 >> 3;

1202 
∑rôy
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1203 
∑rôy
->
›code
 = 
sh_cmd_∑rôy
;

1204 
∑rôy
->
øid_°rùe
 = 
group
->
phy_ödex
;

1205 
∑rôy
->
hód
 = 
p
->hód & ~
NO_POLL_MASK
;

1206 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
p
->
µa
, 
lun
->
phy_lun_num
), &
∑rôy
->
dw‹d1
);

1208 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 1 << 3;

1209 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1210 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1211 
	`sh™n⁄_li°_add_èû
(&
p
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1214 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

1216 
	}
}

1218 
	$sh™n⁄_∑rôy_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1220 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

1221 i‡(
lun£t
->
sdev
->
¥efix_no_›_cmd
)

1222 
	`sh™n⁄_¥efix_no_›_cmd
(
lun£t
, 
ªq
, 1);

1223 
	`__sh™n⁄_∑rôy_cmd
(
lun£t
, 
ªq
);

1224 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1225 
	`upd©e_lun£t_sq_hód
(
lun£t
);

1226 
	}
}

1228 
	$__sh™n⁄_∑rôy_öô_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1230 
sh™n⁄_cmd
 *
∑rôy_öô
;

1231 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

1232 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

1233 
sh™n⁄_sb
 *
sb
 = &
sdev
->
sbs
[
ªq
->
µa
/(sdev->
∑ges_ö_eblock
 * sdev->
∂™es
)];

1234 
sub_group
 *
group
 = &
sb
->sub_group[
lun
->
lun_num
/
sdev
->
max_luns_ö_group
];

1235 
cmd_off£t
, 
cmdid
;

1237 
	`sh™n⁄_muãx_lock
(&
lun£t
->
sq_£m
);

1238 
cmd_off£t
 = 
	`Æloc_cmd_¶ì∑bÀ
(
lun£t
, 1);

1239 i‡(
cmd_off£t
 < 0) {

1240 
	`sh™n⁄_îr
("weáre killed.\n");

1241 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1242 
	`BUG
();

1245 
cmdid
 = 
cmd_off£t
 >> 3;

1246 
∑rôy_öô
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

1247 
∑rôy_öô
->
›code
 = 
sh_cmd_∑rôy_öô
;

1248 
∑rôy_öô
->
d©a_luns
 = 
ªq
->data_luns;

1249 
∑rôy_öô
->
øid_°rùe
 = 
group
->
phy_ödex
;

1250 
∑rôy_öô
->
hód
 = 
ªq
->head;

1251 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
sdev
, 
ªq
->
µa
, 
lun
->
phy_lun_num
), &
∑rôy_öô
->
dw‹d1
);

1252 
lun£t
->
cmd_öfo
[
cmdid
].
cmd_Àn
 = 1 << 3;

1253 
lun£t
->
cmd_öfo
[
cmdid
].
œ°_a˘ive_time
 = 
	`gë_jiffõs
();

1255 
	`SHANNON_INIT_LIST_HEAD
(&
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1256 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun£t
->
cmd_öfo
[
cmdid
].
ªq_li°
);

1258 
lun£t
->
sq_hód
 =Üun£t->
sq_hód_tmp
;

1259 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
sq_£m
);

1261 
	}
}

1263 
ölöe
 
	$sh™n⁄_∑rôy_öô_cmd
(
sh™n⁄_lun£t
 *
lun£t
, 
sh™n⁄_ªque°
 *
ªq
)

1265 
	`__sh™n⁄_∑rôy_öô_cmd
(
lun£t
, 
ªq
);

1266 
	`upd©e_lun£t_sq_hód
(
lun£t
);

1267 
	}
}

1269 
sh™n⁄_ªque°
 *
	$make_∑rôy_ªq
(
sh™n⁄_sb
 *
sb
, 
∑rôy_lun
, 
sh™n⁄_ªque°
 *
wrôe
)

1271 
sh™n⁄_ªque°
 *
ªq
, *
∑rôy
;

1272 
∂™e
;

1273 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

1274 
µa
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
wrôe
->
pba
.
lun_pba
/sdev->
logicbs_ö_∑ge
);

1276 
∑rôy
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1277 
	`£t_ªq_debug_èg
(
∑rôy
, 
WRITE_PARITY_TAG
, 0);

1278 
∑rôy
->
›code
 = 
sh_cmd_∑rôy
;

1279 
∑rôy
->
hód
 = 
wrôe
->head;

1280 
∑rôy
->
pba
.
lun
 = 
∑rôy_lun
;

1281 
∑rôy
->
µa
 =Öpa;

1282 
∑rôy
->
pba
.
lun_pba
 = 
µa
 * 
sdev
->
logicbs_ö_∑ge
;

1283 
	`SHANNON_INIT_LIST_HEAD
(&
∑rôy
->
chunk_li°
);

1285 
∂™e
 = 1;

1286 
∂™e
 < 
sdev
->
∂™es
) {

1287 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1288 
	`£t_ªq_debug_èg
(
ªq
, 
WRITE_PARITY_TAG
, 
∂™e
);

1289 
ªq
->
›code
 = 
sh_cmd_∑rôy
;

1290 
ªq
->
hód
 = 
wrôe
->head;

1291 
ªq
->
pba
.
lun
 = 
∑rôy_lun
;

1292 
ªq
->
µa
 =Ö∑ + 
sdev
->
∑ges_ö_eblock
 * 
∂™e
;

1293 
ªq
->
pba
.
lun_pba
 =Ñeq->
µa
 * 
sdev
->
logicbs_ö_∑ge
;

1294 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
∑rôy
->chunk_list);

1295 
∂™e
++;

1297  
∑rôy
;

1298 
	}
}

1300 
	$de¸ó£_£ndî_°©i°ics
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

1302 #ifde‡
CONFIG_SHANNON_STATISTICS


1303 i‡(
ªq
->
ªªad
 == 0) {

1304 i‡(
ªq
->
£ndî
 =
FROM_GC
)

1305 
	`sh™n⁄_©omic_dec
(&
sdev
->
‰om_gc
);

1306 i‡(
ªq
->
£ndî
 =
FROM_HOST
)

1307 
	`sh™n⁄_©omic_dec
(&
sdev
->
‰om_ho°
);

1310 
	}
}

1312 
	$fûl_a˘ive_blk_timeout
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

1314 
sh™n⁄_sb
 *
sb
 = 
sdev
->
a˘ive_blk
[
hód_ödex
];

1316 i‡((
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
(Ë- 
sdev
->
a˘ive_blk_°¨t_jiffõs
[
hód_ödex
]Ë/ 1000Ë>
FILL_FIRST_SB_TIME_EXPIRE
) {

1317 i‡(
sb
 && ((sb->
°©e
 =
HOT_ACTIVE_BLOCK
Ë|| (sb->°©ê=
COLD_ACTIVE_BLOCK
)) && \

1318 (
sdev
->
öô_d⁄e
 >
STAGE9_DONE
Ë&& (
sb
->
fûl_sb
 =0Ë&& (sdev->
ac˚ss_mode
 !
SHN_MODE_READONLY
)) {

1319 
sb
->
fûl_sb
 = 1;

1320 #ifde‡
SHANNON_USE_WRITE_BUFFER


1321 i‡(
sdev
->
mbr
.
max_kìp_îa£d_hours
 || 
sb
->
wr_off£t
) {

1322 i‡(
sb
->
°©e
 =
HOT_ACTIVE_BLOCK
) {

1323 i‡(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
fûl_chunk_timî
[
HOT_INDEX
]))

1324 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
HOT_INDEX
));

1325 } i‡(
sb
->
°©e
 =
COLD_ACTIVE_BLOCK
) {

1326 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


1327 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

1329 i‡(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
fûl_chunk_timî
[
COLD_INDEX
]))

1330 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
COLD_INDEX
));

1336 
	}
}

1338 
	$fûl_cﬁd_a˘ive_blk_timî_timeout
(
sh™n⁄_timî_li°
 *
timî
)

1340 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
fûl_sb_timî
[
COLD_INDEX
]);

1342 
	`fûl_a˘ive_blk_timeout
(
sdev
, 
COLD_INDEX
);

1343 
	}
}

1345 
	$fûl_hŸ_a˘ive_blk_timî_timeout
(
sh™n⁄_timî_li°
 *
timî
)

1347 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
fûl_sb_timî
[
HOT_INDEX
]);

1349 
	`fûl_a˘ive_blk_timeout
(
sdev
, 
HOT_INDEX
);

1350 
	}
}

1352 
	$mod_fûl_sb_timî
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
sh™n⁄_sb
 *
sb
)

1354 (*
‚
)(
sh™n⁄_timî_li°
 *Ë
NULL
;

1355 i‡(
hód_ödex
 =
HOT_INDEX
)

1356 
‚
 = 
fûl_hŸ_a˘ive_blk_timî_timeout
;

1357 i‡(
hód_ödex
 =
COLD_INDEX
)

1358 
‚
 = 
fûl_cﬁd_a˘ive_blk_timî_timeout
;

1360 
	`BUG_ON
(1);

1362 i‡(
	`sh™n⁄_timî_has_fun˘i⁄
(&
sdev
->
fûl_sb_timî
[
hód_ödex
])) {

1363 
	`sh™n⁄_mod_timî
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
	`gë_jiffõs
(Ë+ 
	`gë_HZ
(Ë* 
FILL_SB_TIME_EXPIRE
);

1364 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
‚
);

1366 i‡(
sdev
->
a˘ive_blk
[
hód_ödex
]->
wr_off£t
) {

1367 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
‚
);

1368 
	`sh™n⁄_mod_timî
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
	`gë_jiffõs
(Ë+ 
	`gë_HZ
(Ë* 
FILL_FIRST_SB_TIME_EXPIRE
);

1370 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
‚
);

1371 
	`sh™n⁄_mod_timî
(&
sdev
->
fûl_sb_timî
[
hód_ödex
], 
	`gë_jiffõs
(Ë+ 
	`gë_HZ
(Ë* 
FILL_SB_TIME_EXPIRE
);

1374 
	}
}

1376 
	$swôch_to_√xt_sb
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_sb
 *
sb
, 
hód
)

1378 
sh™n⁄_ªque°
 *
ªq
;

1379 
∑rôy_lun
, 
waô
 = 0;

1380 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

1382 
	`u∆ikñy
(
sb
->
√xt_sb
 =
INVALID_SB_INDEX
)) {

1383 
	`sh™n⁄_w¨n
("√xà%†block i†övÆid, sb=%d.\n", 
hód_ödex
 ? "cﬁd" : "hŸ", 
sb
->
sb_ödex
);

1384 
sb
->
√xt_sb
 = 
	`gë_√xt_sb
(
sdev
, 
hód_ödex
);

1385 i‡(
	`u∆ikñy
(
sb
->
√xt_sb
 =
INVALID_SB_INDEX
))

1386 
	`sh™n⁄_m¶ìp
(10);

1390 
sdev
->
sbs
[
sb
->
√xt_sb
].
°©e
 !(
hód_ödex
 ? 
NEXT_COLD_BLOCK
 : 
NEXT_HOT_BLOCK
)) {

1391 i‡((
waô
 % 1000) == 0) {

1392 
	`sh™n⁄_w¨n
("wait forÇext %s sb becomeávailable,Çext_sb=%d, state=%s\n",

1393 
hód_ödex
 ? "cﬁd" : "hŸ", 
sb
->
√xt_sb
, 
	`°©e_«me
(
sdev
->
sbs
[sb->√xt_sb].
°©e
));

1394 
waô
 = 0;

1396 
waô
++;

1397 
	`sh™n⁄_m¶ìp
(10);

1401 
	`upd©e_ïûog_hód
(
sdev
, 
sb
);

1402 
	`wrôe_ïûog
(
sdev
, 
sb
, 
hód
);

1404 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


1405 
	`sh™n⁄_mem£t
((
u64
 *)
sdev
->
Áke_twö_rd_bad_lu≈ba
 + ((
hód_ödex
 == 0) ? 0 :

1406 (()
sdev
->
lun_cou¡
 * sdev->
logicbs_ö_siblög_eblock
/64)),

1407 0, 
sdev
->
lun_cou¡
 * sdev->
logicbs_ö_siblög_eblock
/8);

1408 
	`upd©e_Áke_∑âîn
(
sdev
, 
sb
->
√xt_sb
, 
hód_ödex
);

1410 
sdev
->
wr_sb
[
hód_ödex
] = 
sb
->
√xt_sb
;

1411 
sdev
->
a˘ive_blk_°¨t_jiffõs
[
hód_ödex
] = 
	`gë_jiffõs
();

1412 
sdev
->
a˘ive_blk
[
hód_ödex
] = &sdev->
sbs
[
sb
->
√xt_sb
];

1413 
sdev
->
a˘ive_blk
[
hód_ödex
]->
°©e
 = 
a˘ive_blk_°©e
[head_index];

1414 
sdev
->
wr_group
[
hód_ödex
] = 0;

1415 
sdev
->
lun_ö_group
[
hód_ödex
] = 0;

1416 
sdev
->
wr_lun_off£t
[
hód_ödex
] = sdev->
a˘ive_blk
[hód_ödex]->
sub_group
[0].
fú°_lun_off£t
;

1417 
sdev
->
wr_chunk
[
hód_ödex
] = 0;

1418 
sdev
->
wr_∂™e
[
hód_ödex
] = 0;

1419 
sdev
->
wr_∑ge
[
hód_ödex
] = 0;

1420 
sdev
->
wr_logicb
[
hód_ödex
] = 0;

1421 
	`debugs1
("sb_ödex=%d, hód_ödex=%d,Çext_sb=%d.\n", 
sb
->
sb_ödex
, 
hód_ödex
, sb->
√xt_sb
);

1424 i‡(
	`u∆ikñy
(
sdev
->
∑rôy_öô_d⁄e
[
hód_ödex
] == 0)) {

1425 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
∑rôy_öô_d⁄e_evít
[
hód_ödex
], sdev->
∑rôy_öô_d⁄e
[head_index] == 1);

1427 
sdev
->
∑rôy_öô_d⁄e
[
hód_ödex
] = 0;

1429 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

1430 
	`£t_ªq_debug_èg
(
ªq
, 
PARITY_INIT_TAG
, 0);

1431 
ªq
->
›code
 = 
sh_cmd_∑rôy_öô
;

1432 
ªq
->
hód
 = head;

1433 
ªq
->
µa
 = 
sb
->
√xt_sb
 * 
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
;

1434 
ªq
->
d©a_luns
 = 
sdev
->
a˘ive_blk
[
hód_ödex
]->
mö_d©a_luns
;

1435 
∑rôy_lun
 = 
	`gë_∑rôy_lun
(&
sdev
->
a˘ive_blk
[
hód_ödex
]->
sub_group
[0]);

1436 
ªq
->
pba
.
lun
 = 
∑rôy_lun
;

1437 
ªq
->
pba
.
lun_pba
 =Ñeq->
µa
 * 
sdev
->
logicbs_ö_∑ge
;

1438 
	`sh™n⁄_∑rôy_öô_cmd
(
sdev
->
lun
[
∑rôy_lun
]->
lun£t
, 
ªq
);

1440 
	`mod_fûl_sb_timî
(
sdev
, 
hód_ödex
, sdev->
a˘ive_blk
[head_index]);

1441 
	}
}

1443 
	$wrôe_chunk_to_Êash
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

1445 
hód
 = 
¥eq
->head;

1446 
sh™n⁄_ªque°
 *
ªq
, *
∑rôy
 = 
NULL
;

1447 
sh™n⁄_sb
 *
sb
;

1448 
sub_group
 *
group
;

1450 i‡(!
	`wrôe_chunk_is_vÆid
(
¥eq
, 
sdev
)) {

1451 
	`sh™n⁄_îr
("lun=%d,Üun_pba=0x%x.\n", 
¥eq
->
pba
.
lun
,Öªq->pba.
lun_pba
);

1452 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
¥eq
->
chunk_li°
, chunk_list) {

1453 
	`sh™n⁄_îr
("lun=%d,Üun_pba=0x%x.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

1456 
	`BUG_ON
(!
	`wrôe_chunk_is_vÆid
(
¥eq
, 
sdev
));

1457 
sb
 = 
sdev
->
sbs
 + 
¥eq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1459 
group
 = &
sb
->
sub_group
[
¥eq
->
pba
.
lun
/
sdev
->
max_luns_ö_group
];

1460 i‡(
sdev
->
øid5_suµ‹ãd
 && (sdev->
lun_ö_group
[
¥eq
->
hód
 & 
HEAD_INDEX_MASK
] =0Ë&& (
sb
->
sb_ödex
 >sdev->
mbr_eblocks
/sdev->
∂™es
))

1461 
∑rôy
 = 
	`make_∑rôy_ªq
(
sb
, 
	`gë_∑rôy_lun
(
group
), 
¥eq
);

1463 
	`sh™n⁄_wrôe_cmd
(
sdev
->
lun
[
¥eq
->
pba
.lun]->
lun£t
,Öreq);

1465 i‡(
∑rôy
) {

1466 
	`sh™n⁄_∑rôy_cmd
(
sdev
->
lun
[
	`gë_∑rôy_lun
(
group
)]->
lun£t
, 
∑rôy
);

1467 
∑rôy
 = 
NULL
;

1470 i‡(
	`u∆ikñy
(
	`is_fú°_ïûog_pba
(
sb
, sb->
wr_off£t
))) {

1471 
	`swôch_to_√xt_sb
(
sdev
, 
sb
, 
hód
);

1473 
	}
}

1475 
	$sh™n⁄_pick_wrôe_Êash_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, 
hód_ödex
)

1477 i‡(
sdev
->
chunk_ªq
[
hód_ödex
] =
NULL
) {

1478 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

1479 
sdev
->
chunk_ªq
[
hód_ödex
] = 
ªq
;

1481 
	`sh™n⁄_li°_add_èû
(&
ªq
->
chunk_li°
, &
sdev
->
chunk_ªq
[
hód_ödex
]->chunk_list);

1483 
sdev
->
chunk_ªq˙t
[
hód_ödex
]++;

1484 i‡(
sdev
->
chunk_ªq˙t
[
hód_ödex
] =sdev->
logicbs_ö_chunk
) {

1485 
	`wrôe_chunk_to_Êash
(
sdev
, sdev->
chunk_ªq
[
hód_ödex
]);

1486 
sdev
->
chunk_ªq
[
hód_ödex
] = 
NULL
;

1487 
sdev
->
chunk_ªq˙t
[
hód_ödex
] = 0;

1490 
sdev
->
dúe˘_wrôe_cou¡î
++;

1491 
	}
}

1493 #ifde‡
SHANNON_USE_WRITE_BUFFER


1494 
	$is_fú°_pba_ö_chunk
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

1496 
eblk
;

1498 i‡(
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
)

1500 
eblk
 = 
ªq
->
pba
.
lun_pba
/(
sdev
->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
);

1501 i‡(
eblk
 % 
sdev
->
∂™es
)

1505 
	}
}

1507 
bufq_åaffic_jam
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
);

1508 
bufq_åaffic_lowî
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
);

1509 
sh™n⁄_pick_wrôe_buf_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

1511 
	$should_dúe˘_wrôe
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, 
hód_ödex
)

1513 i‡(
sh™n⁄_buf„r_wrôe
)

1515 i‡(
ªq
->
sbio
 =
NULL
)

1517 i‡(
ªq
->
sbio
->
wrôe_mëhod
 =
BUFFER_WRITE
)

1519 i‡(
ªq
->
sbio
->
wrôe_mëhod
 =
DIRECT_WRITE
)

1527 i‡(
	`bufq_åaffic_jam
(
sdev
, 
hód_ödex
)) {

1528 
ªq
->
sbio
->
wrôe_mëhod
 = 
DIRECT_WRITE
;

1531 
ªq
->
sbio
->
wrôe_mëhod
 = 
BUFFER_WRITE
;

1534 
	}
}

1537 
	$move_to_√xt_ovîœp_∂™e
(
sh™n⁄_dev
 *
dev
)

1539 
sh™n⁄_ovîœp
 *
ﬁ
 = 
dev
->
ovîœp
;

1541 i‡(
ﬁ
->
wr_∂™e
 =
dev
->
∂™es
 - 1) {

1542 
ﬁ
->
wr_∂™e
 = -1;

1544 
ﬁ
->
wr_∂™e
++;

1546 
	}
}

1548 
	$move_to_√xt_ovîœp_∑ge
(
sh™n⁄_dev
 *
dev
)

1550 
sh™n⁄_ovîœp
 *
ﬁ
 = 
dev
->
ovîœp
;

1552 
	`move_to_√xt_ovîœp_∂™e
(
dev
);

1553 
ﬁ
->
wr_∑ge
 = (ﬁ->
wr_∂™e
 * 
dev
->
∑ges_ö_eblock
 + ol->
wr_chunk
);

1554 
	}
}

1556 
	$Æloc_ovîœp_lun_pba
(
sh™n⁄_dev
 *
sdev
, 
lun_pba
 *
pba
)

1558 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + sdev->
mbr
.
ovîœp_sblk
;

1559 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

1560 
logicb_t
 
eblk_pba
;

1562 i‡(
	`u∆ikñy
(
ﬁ
->
wr_∂™e
 == -1)) {

1563 
	`sh™n⁄_îr
("%s:Éx˚ed ovîœ∞pb®limô.\n", 
sdev
->
sdisk
.
disk_«me
);

1564 
	`BUG
();

1568 
eblk_pba
 = 
ﬁ
->
wr_∑ge
 * 
sdev
->
logicbs_ö_∑ge
 + ol->
wr_logicb
;

1569 
pba
->
lun_pba
 = 
sdev
->
mbr
.
ovîœp_sblk
 * sdev->
logicbs_ö_siblög_eblock
 + 
eblk_pba
;

1570 
pba
->
lun
 = 
ﬁ
->
wr_lun
;

1572 
	`sh™n⁄_©omic_öc
(&
sb
->
ö_wrôe_logicbs
);

1574 
ﬁ
->
wr_logicb
++;

1575 i‡(
ﬁ
->
wr_logicb
 =
sdev
->
logicbs_ö_∑ge
) {

1576 
	`move_to_√xt_ovîœp_∑ge
(
sdev
);

1577 
ﬁ
->
wr_logicb
 = 0;

1580 
	}
}

1582 
sh™n⁄_pick_øw_wrôe_buf_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

1583 
	$__sh™n⁄_wrôe_ovîœp_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
, 
ovîwrôe
)

1585 i‡(
	`u∆ikñy
(!
ovîwrôe
))

1586 
	`Æloc_ovîœp_lun_pba
(
sdev
, &
¥eq
->
pba
);

1588 
¥eq
->
pba
 = 
sdev
->
ovîœp
->pba;

1590 
	`sh™n⁄_pick_øw_wrôe_buf_ªque°
(
sdev
, 
¥eq
);

1591 
	}
}

1593 
	$sh™n⁄_wrôe_ovîœp_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
, 
ovîwrôe
)

1595 
¥eq
->
_mëad©a
 = (((
u64
Ìªq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
) | \

1596 (((
u64
)
¥eq
->
ns_id
 & 
NS_ID_MASK
Ë<< 
NS_ID_SHIFT
) | \

1597 (((
u64
)
¥eq
->
ns_£q_num
 & 
NS_SEQ_NUM_MASK
Ë<< 
NS_SEQ_NUM_SHIFT
) | \

1598 (
¥eq
->
lba
 & 
LONG_LBA_MASK
);

1600 
	`__sh™n⁄_wrôe_ovîœp_ªque°
(
sdev
, 
¥eq
, 
ovîwrôe
);

1601 
	}
}

1603 
ölöe
 
	$__sh™n⁄_pick_wrôe_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

1605 
hód_ödex
 = 
¥eq
->
hód
 & 
HEAD_INDEX_MASK
;

1607 
	`Æloc_lun_pba
(
sdev
, 
¥eq
->
_mëad©a
,Öªq->
hód
, &¥eq->
pba
);

1608 
	`de¸ó£_£ndî_°©i°ics
(
sdev
, 
¥eq
);

1610 #ifde‡
SHANNON_USE_WRITE_BUFFER


1611 i‡(
	`is_fú°_pba_ö_chunk
(
sdev
, 
¥eq
)) {

1612 
sdev
->
chunk_°¨t_jiffõs
[
hód_ödex
] = 
	`gë_jiffõs
();

1613 i‡(
	`should_dúe˘_wrôe
(
sdev
, 
¥eq
, 
hód_ödex
))

1614 
	`sh™n⁄_pick_wrôe_Êash_ªque°
(
sdev
, 
¥eq
, 
hód_ödex
);

1616 
	`sh™n⁄_pick_wrôe_buf_ªque°
(
sdev
, 
¥eq
);

1618 i‡(
sdev
->
chunk_ªq˙t
[
hód_ödex
] == 0)

1619 
	`sh™n⁄_pick_wrôe_buf_ªque°
(
sdev
, 
¥eq
);

1621 
	`sh™n⁄_pick_wrôe_Êash_ªque°
(
sdev
, 
¥eq
, 
hód_ödex
);

1624 
	`sh™n⁄_pick_wrôe_Êash_ªque°
(
sdev
, 
¥eq
, 
hód_ödex
);

1626 
	}
}

1628 
	$sh™n⁄_pick_wrôe_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

1630 
hód_ödex
 = 
¥eq
->
hód
 & 
HEAD_INDEX_MASK
;

1632 i‡(
	`u∆ikñy
((
hód_ödex
 =
MBR_INDEX
Ë|| (
sdev
->
öô_d⁄e
 < 
STAGE_RECOVER_ACTIVE_DONE
))) {

1633 
	`sh™n⁄_wrôe_cmd
(
sdev
->
lun
[
¥eq
->
pba
.lun]->
lun£t
,Öreq);

1637 
¥eq
->
_mëad©a
 = (((
u64
Ìªq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
) | \

1638 (((
u64
)
¥eq
->
ns_id
 & 
NS_ID_MASK
Ë<< 
NS_ID_SHIFT
) | \

1639 (((
u64
)
¥eq
->
ns_£q_num
 & 
NS_SEQ_NUM_MASK
Ë<< 
NS_SEQ_NUM_SHIFT
) | \

1640 (
¥eq
->
lba
 & 
LONG_LBA_MASK
);

1642 
	`__sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
¥eq
);

1643 
	}
}

1645 
	$sh™n⁄_pick_wrôe_mëad©a_ªque°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

1647 
	`__sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
¥eq
);

1648 
	}
}

1650 *
	$›code_«me
(
sh™n⁄_›code
 
›code
)

1652 
›code
) {

1653 
sh_cmd_¥e_ªad
:

1655 
sh_cmd_ªad
:

1657 
sh_cmd_wrôe
:

1659 
sh_cmd_îa£
:

1661 
sh_cmd_∑rôy
:

1663 
sh_cmd_∑rôy_öô
:

1669 
	}
}

1671 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


1672 
	$dïth_to_ödex
(
dïth
)

1674 
ödex
 = 0;

1676 
dïth
 = depth >> 3;

1677 
dïth
) {

1678 
dïth
 = depth >> 1;

1679 
ödex
++;

1681  
ödex
;

1682 
	}
}

1685 
	$ho°_ªq_queue_Àngth
(
sh™n⁄_dev
 *
sdev
)

1687  
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[0]) + shannon_atomic_read(&sdev->write_reqs[1]) + shannon_atomic_read(&sdev->write_reqs[2]);

1688 
	}
}

1690 
	$lun£t_ªq_queue_is_em±y
(
sh™n⁄_lun£t
 *
lun£t
)

1692 i‡(!
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
))

1696 
	}
}

1698 
	$Æl_lun£t_ªq_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
)

1700 
i
;

1701 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

1702 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
lun£ts
[
i
].
ªq_queue
))

1705 
	}
}

1707 
	$Æl_ªq_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
)

1709  
	`ho°_ªq_queue_is_em±y
(
sdev
Ë&& 
	`gc_wrôe_queue_is_em±y
(sdev);

1710 
	}
}

1712 
	$gc_wrôe_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
)

1714  
	`sh™n⁄_li°_em±y
(&
sdev
->
gc_wrôe_queue
);

1715 
	}
}

1717 
	$ho°_ªq_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
)

1719  
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[0]) && shannon_list_empty(&sdev->req_queue[1]) && shannon_list_empty(&sdev->req_queue[2]);

1720 
	}
}

1722 
sh™n⁄_ªad_buf_cmd
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
);

1723 
put_chunk_ªq_to_buf
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
, 
hód_ödex
);

1725 
	$ªad_ovîœp_d©a_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1727 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

1728 
sh™n⁄_ªque°
 *
ªq
;

1729 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

1730 
sh™n⁄_sb
 *
sb
 = 
sdev
->
sbs
 + sdev->
mbr
.
ovîœp_sblk
;

1732 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1733 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

1734 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

1735 
ªq
->
°©e
 = 
REQ_CALLBACK
;

1736 
	`BUG_ON
(
sb
->
sb_ödex
 !
ªq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
);

1738 
	`BUG_ON
(
ªq
->
ªªad
 & 
RAID_READ_MASK
);

1739 
	`BUG_ON
(
ﬁ
->
_mëad©a
 !
ªq
->_metadata);

1741 
ﬁ
->
ovîœp_wrôeback
 = 0;

1742 
	`sh™n⁄_b¨rõr
();

1743 
	`sh™n⁄_wake_up
(&
sdev
->
ovîœp
->
waô_ovîœp_evít
);

1744 
	}
}

1746 
	$ªad_ovîœp_d©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
)

1748 
	`£t_sbio_debug_èg
(
sbio
, 
OVERLAP_WRITE_BACK_TAG
);

1749 
sbio
->
vút_addr
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

1750 
sbio
->
logicbs
 = 1;

1751 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

1752 
sbio
->
ˇŒback
 = 
ªad_ovîœp_d©a_ˇŒback
;

1753 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

1754 
sbio
->
d©a
 = 
sdev
;

1755 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_FROMDEVICE
);

1756 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

1757 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

1758 
	`BUG
();

1759 
out
;

1762 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 0);

1763 
ªq
->
›code
 = 
sh_cmd_ªad
;

1764 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

1765 
ªq
->
lba
 = 
sdev
->
ovîœp
->
_mëad©a
 & 
LONG_LBA_MASK
;

1766 
ªq
->
_mëad©a
 = 
sdev
->
ovîœp
->_metadata;

1767 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

1768 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

1769 
ªq
->
£q_num
 = 
MAX_SEQ_NUM
;

1770 
ªq
->
pba
 = 
sdev
->
ovîœp
->pba;

1771 
ªq
->
sbio
 = sbio;

1772 
ªq
->
£ndî
 = 
FROM_OVERLAP
;

1773 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
bio_li°
);

1774 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

1775 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

1776 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1791 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
ªq
->
pba
.lun],Ñeq);

1793 
	`lun£t_pick_ªque°
(
sdev
->
lun
[
ªq
->
pba
.lun]->
lun£t
, 1);

1797 
out
:

1798 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

1799 
sbio
->
vút_addr
 = 
NULL
;

1800  -
EIO
;

1801 
	}
}

1803 
	$wrôe_ovîœp_d©a_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

1805 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

1806 
sh™n⁄_sb
 *
sb
;

1807 
sh™n⁄_ªque°
 *
ªq
;

1808 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

1809 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

1810 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

1811 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

1813 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

1814 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
sbio
->
ªq_li°
));

1815 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, 
sh™n⁄_ªque°
, 
bio_li°
);

1816 
ªq
->
°©e
 = 
REQ_CALLBACK
;

1818 i‡(
•oﬁ
) {

1819 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

1820 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

1821 
	`sh™n⁄_öfo
("%s():Çame•a˚Çs_id=%d mighàbêªmoved ju°Çow.\n", 
__func__
, 
ªq
->
ns_id
);

1822 
out
;

1824 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

1825 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

1826 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

1827 
out
;

1829 
sdisk
 = &
ns
->sdisk;

1830 
	`BUG_ON
(
sdev
->
mbr
.
sdev_id
 =0 && 
ªq
->
lba
 =
övÆid_lba
[sdev->
lba_f‹m©
]);

1833 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

1834 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

1835 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

1836 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1837 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

1838 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

1840 
	`sh™n⁄_öfo
("sbio->°¨t_£˘‹=0x%lx, sbio->°©us=0x%x.\n", 
sbio
->
°¨t_£˘‹
, sbio->
°©us
);

1842 
	`sh™n⁄_©omic_sub
(1, &
sb
->
ö_wrôe_logicbs
);

1844 
out
:

1845 
ﬁ
->
ovîœp_wrôeback
 = 0;

1846 
	`sh™n⁄_b¨rõr
();

1847 
	`sh™n⁄_wake_up
(&
ﬁ
->
waô_ovîœp_evít
);

1849 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

1850 
	}
}

1852 
	$wrôe_ovîœp_d©a
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_ªque°
 *
ªq
)

1854 
	`£t_sbio_debug_èg
(
sbio
, 
OVERLAP_WRITE_BACK_TAG
);

1855 
sbio
->
logicbs
 = 1;

1856 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 1);

1857 
sbio
->
ˇŒback
 = 
wrôe_ovîœp_d©a_ˇŒback
;

1858 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

1859 
sbio
->
d©a
 = 
sdev
;

1860 
sbio
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, sbio->
vút_addr
, sdev->
logicb_size
, 
SHANNON_DMA_TODEVICE
);

1861 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
sbio
->
dma_addªss
)) {

1862 
	`sh™n⁄_îr
("shannon_dma_map_singleÉrror.\n");

1863 
	`BUG
();

1864 
out
;

1867 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 0);

1868 
ªq
->
›code
 = 
sh_cmd_wrôe
;

1869 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

1870 
ªq
->
vút_addr
 = 
sbio
->virt_addr;

1871 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

1872 
ªq
->
dma_addªss
 = 
sbio
->dma_address;

1873 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

1874 
ªq
->
sbio
 = sbio;

1875 
ªq
->
£ndî
 = 
FROM_OVERLAP
;

1876 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

1878 
ªq
->
sbio
->
wrôe_mëhod
 = 
BUFFER_WRITE
;

1879 
	`BUG_ON
(
sdev
->
chunk_ªq˙t
[
ªq
->
hód
 & 
HEAD_INDEX_MASK
] != 0);

1881 
	`sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
ªq
);

1884 
out
:

1885 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

1886 
sbio
->
vút_addr
 = 
NULL
;

1887  -
EIO
;

1888 
	}
}

1890 
	$wrôe_back_ovîœp_d©a
(
sh™n⁄_dev
 *
sdev
)

1892 
ªt
 = 0;

1893 
sh™n⁄_bio
 *
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

1894 
sh™n⁄_ªque°
 *
ovîœp_ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

1895 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

1896 
hód_ödex
 = (
ﬁ
->
hód
 & 
HEAD_INDEX_MASK
);

1898 
ﬁ
->
ovîœp_wrôeback
 = 1;

1899 i‡(
	`u∆ikñy
(
	`ªad_ovîœp_d©a
(
sdev
, 
sbio
, 
ovîœp_ªq
) < 0)) {

1900 
	`sh™n⁄_îr
("%s:Ñead back overlapÜbaÉrror,Üba=%lu,Üun=%d,Üun_pba=%d.\n", \

1901 
sdev
->
sdisk
.
disk_«me
, 
ovîœp_ªq
->
lba
, 
ﬁ
->
pba
.
lun
, ol->pba.
lun_pba
);

1902 
ªt
 = -1;

1903 
out
;

1905 
	`sh™n⁄_waô_evít
(
ﬁ
->
waô_ovîœp_evít
, ol->
ovîœp_wrôeback
 == 0);

1906 i‡(
sdev
->
chunk_ªq˙t
[
hód_ödex
]) {

1908 
vaˇncy
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
hód_ödex
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[head_index];

1909 
	`BUG_ON
(
sdev
->
chunk_ªq˙t
[
hód_ödex
] >sdev->
logicbs_ö_chunk
);

1910 
vaˇncy
) {

1911 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
hód_ödex
]);

1912 
vaˇncy
--;

1916 
ﬁ
->
ovîœp_wrôeback
 = 1;

1917 
ovîœp_ªq
->
hód
 = 
ﬁ
->head;

1918 
ovîœp_ªq
->
sbio
->
wrôe_mëhod
 = 
BUFFER_WRITE
;

1919 i‡(
	`wrôe_ovîœp_d©a
(
sdev
, 
sbio
, 
ovîœp_ªq
) < 0) {

1920 
	`sh™n⁄_îr
("%s: write back overlapÜbaÉrror,Üba=%lu,Üun=%d,Üun_pba=%d.\n", \

1921 
sdev
->
sdisk
.
disk_«me
, 
ovîœp_ªq
->
lba
, ovîœp_ªq->
pba
.
lun
, ovîœp_ªq->pba.
lun_pba
);

1922 
ªt
 = -1;

1923 
out
;

1925 
	`sh™n⁄_waô_evít
(
ﬁ
->
waô_ovîœp_evít
, ol->
ovîœp_wrôeback
 == 0);

1927 
out
:

1928 i‡(
sbio
->
vút_addr
)

1929 
	`‰ì_logicb_buf
(
sdev
, 
sbio
->
vút_addr
);

1930 
	`‰ì_ªq
(
ovîœp_ªq
);

1931 
	`‰ì_sbio
(
sbio
);

1932  
ªt
;

1933 
	}
}

1935 
	$sh™n⁄_wrôe_ªque°_ö_ovîœp_mode
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
¥eq
)

1937 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

1938 
hód_ödex
 = 
¥eq
->
hód
 & 
HEAD_INDEX_MASK
;

1940 
	`BUG_ON
(!
sdev
->
ovîœp_wrôe
);

1942 i‡(
	`u∆ikñy
((
hód_ödex
 =
MBR_INDEX
Ë|| (
sdev
->
öô_d⁄e
 < 
STAGE_RECOVER_ACTIVE_DONE
))) {

1943 
	`sh™n⁄_wrôe_cmd
(
sdev
->
lun
[
¥eq
->
pba
.lun]->
lun£t
,Öreq);

1947 
¥eq
->
_mëad©a
 = (((
u64
Ìªq->
d©©y≥
 & 
DATATYPE_MASK
Ë<< 
DATATYPE_SHIFT
) | \

1948 (((
u64
)
¥eq
->
ns_id
 & 
NS_ID_MASK
Ë<< 
NS_ID_SHIFT
) | \

1949 (((
u64
)
¥eq
->
ns_£q_num
 & 
NS_SEQ_NUM_MASK
Ë<< 
NS_SEQ_NUM_SHIFT
) | \

1950 (
¥eq
->
lba
 & 
LONG_LBA_MASK
);

1952 i‡(
¥eq
->
£ndî
 =
FROM_GC
)

1953 
	`sh™n⁄_pick_wrôe_mëad©a_ªque°
(
sdev
, 
¥eq
);

1955 i‡(
	`u∆ikñy
(
ﬁ
->
c›y_îr
)) {

1956 
	`BUG_ON
(
ﬁ
->
_mëad©a
 =
övÆid_mëad©a
[
sdev
->
lba_f‹m©
]);

1958 i‡(
	`wrôe_back_ovîœp_d©a
(
sdev
) == 0) {

1959 
ﬁ
->
_mëad©a
 = 
övÆid_mëad©a
[
sdev
->
lba_f‹m©
];

1960 
ﬁ
->
c›y_îr
 = 0;

1961 } i‡(
ﬁ
->
_mëad©a
 =
¥eq
->_metadata) {

1962 
	`__sh™n⁄_wrôe_ovîœp_ªque°
(
sdev
, 
¥eq
, 1);

1963 
ﬁ
->
c›y_îr
 = 0;

1967 i‡(
¥eq
->
sbio
->
ovîœp
) {

1968 i‡(
¥eq
->
ödex
 == 0) {

1969 i‡((
ﬁ
->
_mëad©a
 !
övÆid_mëad©a
[
sdev
->
lba_f‹m©
]Ë&& (ﬁ->_mëad©®!
¥eq
->_metadata)) {

1970 i‡(
	`u∆ikñy
(
	`wrôe_back_ovîœp_d©a
(
sdev
) < 0))

1971 
ﬁ
->
c›y_îr
 = 1;

1973 i‡(
	`u∆ikñy
(
ﬁ
->
c›y_îr
))

1974 
ﬁ
->
c›y_îr
 = 0;

1975 
ﬁ
->
_mëad©a
 = 
övÆid_mëad©a
[
sdev
->
lba_f‹m©
];

1977 } i‡(
ﬁ
->
_mëad©a
 =
¥eq
->_metadata) {

1978 
	`BUG_ON
(
ﬁ
->
hód
 !
¥eq
->head);

1979 
ﬁ
->
hô_cou¡
++;

1980 
ﬁ
->
_mëad©a
 = 
övÆid_mëad©a
[
sdev
->
lba_f‹m©
];

1982 i‡(
sdev
->
chunk_ªq˙t
[
hód_ödex
]) {

1984 
vaˇncy
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
hód_ödex
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[head_index];

1985 
	`BUG_ON
(
sdev
->
chunk_ªq˙t
[
hód_ödex
] >sdev->
logicbs_ö_chunk
);

1986 
vaˇncy
) {

1987 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
hód_ödex
]);

1988 
vaˇncy
--;

1991 
¥eq
->
sbio
->
wrôe_mëhod
 = 
BUFFER_WRITE
;

1994 i‡(
¥eq
->
ödex
 =’ªq->
sbio
->
logicbs
 - 1Ë&& (
	`likñy
(!
ﬁ
->
c›y_îr
))) {

1995 
ﬁ
->
_mëad©a
 = 
¥eq
->_metadata;

1996 
ﬁ
->
hód
 = 
¥eq
->head;

1997 
¥eq
->
‹ig_hód
 =Öªq->
hód
;

1999 
¥eq
->
hód
 = 
OVERLAP_HEAD
;

2000 
	`__sh™n⁄_wrôe_ovîœp_ªque°
(
sdev
, 
¥eq
, 1);

2002 
	`sh™n⁄_pick_wrôe_mëad©a_ªque°
(
sdev
, 
¥eq
);

2005 i‡(
ﬁ
->
_mëad©a
 !
övÆid_mëad©a
[
sdev
->
lba_f‹m©
]) {

2006 i‡(
	`u∆ikñy
(
	`wrôe_back_ovîœp_d©a
(
sdev
) < 0)) {

2007 
ﬁ
->
c›y_îr
 = 1;

2009 i‡(
	`u∆ikñy
(
ﬁ
->
c›y_îr
))

2010 
ﬁ
->
c›y_îr
 = 0;

2012 
	`£nd_dummy_ovîœp_ªq
(
sdev
, 1);

2013 
ﬁ
->
_mëad©a
 = 
övÆid_mëad©a
[
sdev
->
lba_f‹m©
];

2017 i‡(
	`u∆ikñy
(
ﬁ
->
c›y_îr
Ë&& (ﬁ->
_mëad©a
 =
¥eq
->_metadata)) {

2018 
	`__sh™n⁄_wrôe_ovîœp_ªque°
(
sdev
, 
¥eq
, 1);

2019 
ﬁ
->
c›y_îr
 = 0;

2021 
	`sh™n⁄_pick_wrôe_mëad©a_ªque°
(
sdev
, 
¥eq
);

2024 
	}
}

2026 #ifde‡
SHANNON_USE_WRITE_BUFFER


2027 
ölöe
 
	$chunk_timeout
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

2029 i‡(
sdev
->
chunk_°¨t_jiffõs
[
hód_ödex
])

2030  ((
	`gë_jiffõs
(Ë- 
sdev
->
chunk_°¨t_jiffõs
[
hód_ödex
]Ë>sdev->
fûl_chunk_timî_expúe
);

2032 
	}
}

2035 
ölöe
 
sh™n⁄_ªque°
 *
	$pick_ho°_wrôe_ªq
(
sh™n⁄_dev
 *
sdev
)

2037 
sh™n⁄_ªque°
 *
¥eq
 = 
NULL
;

2038 
i
;

2040 
i
 = 
PRIORITY_LEVELS
 - 1; i >=0; i--) {

2041 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[
i
]))

2043 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[
i
]) > 1) {

2044 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ªq_queue
[
i
], 
sh™n⁄_ªque°
, 
li°
);

2045 i‡(
¥eq
->
›code
 =
sh_cmd_wrôe
)

2046 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2048 
¥eq
 = 
NULL
;

2050 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

2051 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ªq_queue
[
i
], 
sh™n⁄_ªque°
, 
li°
);

2052 i‡(
¥eq
->
›code
 =
sh_cmd_wrôe
)

2053 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2055 
¥eq
 = 
NULL
;

2056 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

2058 i‡(
¥eq
)

2059 
	`sh™n⁄_©omic_dec
(&
sdev
->
wrôe_ªqs
[
i
]);

2062  
¥eq
;

2063 
	}
}

2065 
ölöe
 
sh™n⁄_ªque°
 *
	$pick_‰om_ªq_queue
(
sh™n⁄_dev
 *
sdev
)

2067 
sh™n⁄_ªque°
 *
¥eq
 = 
NULL
;

2068 
i
;

2070 
i
 = 
PRIORITY_LEVELS
 - 1; i >=0; i--) {

2071 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[
i
]))

2073 i‡(
sdev
->
h¨d_queue_limô
 && (
i
 =0Ë&& (
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
) > sdev->hard_queue_limit))

2075 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[
i
]) > 1) {

2076 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ªq_queue
[
i
], 
sh™n⁄_ªque°
, 
li°
);

2077 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2079 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

2080 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ªq_queue
[
i
], 
sh™n⁄_ªque°
, 
li°
);

2081 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2082 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

2084 i‡(
¥eq
->
›code
 =
sh_cmd_wrôe
)

2085 
	`sh™n⁄_©omic_dec
(&
sdev
->
wrôe_ªqs
[
i
]);

2088  
¥eq
;

2089 
	}
}

2091 
ölöe
 
sh™n⁄_ªque°
 *
	$pick_‰om_gc_wrôe_queue
(
sh™n⁄_dev
 *
sdev
)

2093 
sh™n⁄_ªque°
 *
¥eq
 = 
NULL
;

2095 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
gc_wrôe_queue
))

2096 
out
;

2097 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
gc_wrôe_ªqs
) > 1) {

2098 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
gc_wrôe_queue
, 
sh™n⁄_ªque°
, 
li°
);

2099 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2101 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_wrôe_queue_lock
);

2102 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
gc_wrôe_queue
, 
sh™n⁄_ªque°
, 
li°
);

2103 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2104 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_wrôe_queue_lock
);

2106 
	`sh™n⁄_©omic_dec
(&
sdev
->
gc_wrôe_ªqs
);

2107 
out
:

2108  
¥eq
;

2109 
	}
}

2111 
sh™n⁄_ªque°
 *
	$pick_√xt_ªque°
(
sh™n⁄_dev
 *
sdev
)

2113 
sh™n⁄_ªque°
 *
¥eq
;

2114 
picked
 = 1;

2115 
agaö
:

2116 i‡((
sdev
->
ho°_wrôes
 =0Ë&& (sdev->
gc_wrôes
 == 0)) {

2117 
times
;

2118 
gc_wrôes
;

2119 
sdev
->
ho°_wrôes
 = sdev->
logicbs_ö_chunk
;

2120 i‡(
	`gc_wrôe_queue_is_em±y
(
sdev
))

2121 
sdev
->
gc_wrôes
 = 0;

2123 
times
 = (
sdev
->
gc_Á˘‹
 + 
GC_DIVIDE_FACTOR
 - 1)/GC_DIVIDE_FACTOR;

2124 
gc_wrôes
 = 
sdev
->
ho°_wrôes
 * 
times
;

2125 
sdev
->
gc_wrôes
 = (gc_wrôe†< sdev->
logicbs_ö_chunk
) ? sdev->logicbs_in_chunk : gc_writes;

2127 
picked
 = 0;

2129 i‡(
sdev
->
ho°_wrôes
) {

2130 
¥eq
 = 
	`pick_‰om_ªq_queue
(
sdev
);

2131 i‡(
¥eq
) {

2132 
sdev
->
ho°_wrôes
--;

2133  
¥eq
;

2135 
sdev
->
ho°_wrôes
 = 0;

2137 
¥eq
 = 
	`pick_‰om_gc_wrôe_queue
(
sdev
);

2138 i‡(
¥eq
) {

2139 
sdev
->
gc_wrôes
--;

2140  
¥eq
;

2142 
sdev
->
gc_wrôes
 = 0;

2143 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
Ë&& (
picked
 != 0))

2144 
agaö
;

2146  
NULL
;

2148 
	}
}

2150 
	$pick_ho°_ªq_to_fûl_chunk
(
sh™n⁄_dev
 *
sdev
)

2152 
sh™n⁄_ªque°
 *
¥eq
;

2153 
cou¡
 = 0;

2154 
hód_ödex
;

2156 i‡(
	`ho°_ªq_queue_is_em±y
(
sdev
))

2159 
sdev
->
chunk_ªq˙t
[
HOT_INDEX
] && (
cou¡
 < (sdev->
logicbs_ö_chunk
 * 2))) {

2160 
¥eq
 = 
NULL
;

2161 
¥eq
 = 
	`pick_ho°_wrôe_ªq
(
sdev
);

2162 i‡(
¥eq
 =
NULL
)

2165 
cou¡
++;

2166 i‡(
	`is_waô_pick_ªq
(
¥eq
))

2167 
	`h™dÀ_waô_pick_ªq
(
sdev
, 
¥eq
);

2168 
hód_ödex
 = 
¥eq
->
hód
 & 
HEAD_INDEX_MASK
;

2169 if(
¥eq
->
£ndî
 =
FROM_HOST
) {

2170 
sdev
->
ho°_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

2171 } i‡(
¥eq
->
£ndî
 =
FROM_GC
) {

2172 i‡(
	`pba_is_övÆid
(
sdev
, 
¥eq
->
ﬁd_pba
.
lun
,Öªq->ﬁd_pba.
lun_pba
)) {

2173 
	`gc_wrôe_ˇn˚l
(
sdev
, 
¥eq
);

2177 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

2179 
	`sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
¥eq
);

2181 i‡(
	`ho°_ªq_queue_Àngth
(
sdev
Ë< 
REQ_QUEUE_THRESHOLD_L
)

2182 
sdev
->
ö_block_°©e
 = 0;

2183 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
) {

2184 i‡(
sdev
->
ö_block_°©e
 > 1)

2185 
sdev
->
ö_block_°©e
 = 1;

2188 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[1]))

2189 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

2191 i‡((
sdev
->
ö_block_°©e
 < 1Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[0]))

2192 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

2194 
	}
}

2196 
	$__sh™n⁄_pick_ªque°
(
sh™n⁄_dev
 *
sdev
, 
limô
)

2198 
sh™n⁄_lun
 *
lun
;

2199 
sh™n⁄_ªque°
 *
fú°_rd_ªq
 = 
NULL
, *
¥eq
 = NULL, *
ªq
;

2200 
rd_chunk
 = 0, 
chunk
, 
rd_∑ge
 = 0, 
∑ge
, 
rd_ªqs
 = 0;

2201 
i
, 
hód_ödex
;

2202 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


2203 
dïth
, 
ödex
;

2205 #i‚de‡
SHANNON_USE_WRITE_BUFFER


2206 
fú°_wrôe
[2];

2207 
fú°_wrôe
[
HOT_INDEX
] = 0;

2208 
fú°_wrôe
[
COLD_INDEX
] = 0;

2211 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


2212 
sh™n⁄_lun£t
 *
lun£t
;

2213 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

2214 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

2215 
lun£t
 = &
sdev
->
lun£ts
[
i
];

2216 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`ªad_ªg_ß„
(sdev, &sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

2218 
dïth
 = (
sdev
->
lun£ts
[
i
].
sq_hód
 + 
QUEUE_SIZE
 - sdev->lun£ts[i].
cq_hw_hód
) % QUEUE_SIZE;

2219 
ödex
 = 
	`dïth_to_ödex
(
dïth
);

2220 
sdev
->
lun£ts
[
i
].
pick_sq_dïth
[
ödex
]++;

2221 
dïth
 = (
sdev
->
lun£ts
[
i
].
sq_hód
 + 
QUEUE_SIZE
 - sdev->lun£ts[i].
cq_èû
) % QUEUE_SIZE;

2222 
ödex
 = 
	`dïth_to_ödex
(
dïth
);

2223 
sdev
->
lun£ts
[
i
].
pick_scq_dïth
[
ödex
]++;

2228 i‡(
limô
 == 0)

2230 
limô
--;

2232 
¥eq
 = 
NULL
;

2233 i‡(
sdev
->
cmd_queue_wrôes_limô
 && (
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
) > sdev->cmd_queue_writes_limit))

2236 
¥eq
 = 
	`pick_√xt_ªque°
(
sdev
);

2237 i‡(
¥eq
 =
NULL
)

2240 
¥eq
->
°©e
 = 
REQ_PICKED
;

2241 i‡(
	`is_waô_pick_ªq
(
¥eq
))

2242 
	`h™dÀ_waô_pick_ªq
(
sdev
, 
¥eq
);

2243 
¥eq
->
›code
) {

2244 
sh_cmd_adv™˚d_ªad
:

2245 
sdev
->
tŸÆ_ªad_£˘‹s
++;

2246 #ifde‡
SHANNON_USE_WRITE_BUFFER


2247 i‡(
	`ã°_pba_ö_bufq
(
sdev
, 
¥eq
->
pba
.
lun
,Öªq->pba.
lun_pba
)) {

2248 i‡(
	`sh™n⁄_ªad_buf_cmd
(
sdev
, 
¥eq
) == 0)

2252 
lun
 = 
sdev
->lun[
¥eq
->
pba
.lun];

2253 i‡(
sdev
->
adv™˚d_ªad_°©e
 & 
UPDATING_MICROCODE_MASK
) {

2254 i‡(
	`add_adv_ªad_ªque°_li°_èû
(
sdev
, 
¥eq
) > 0) {

2256 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_cmd_queue_adv_ªads
);

2257 
	`sh™n⁄_adv™˚d_ªad
(
lun
->
lun£t
, 
¥eq
);

2259 
sdev
->
tŸÆ_ªad_£˘‹s
--;

2261 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_cmd_queue_adv_ªads
);

2262 
	`sh™n⁄_adv™˚d_ªad
(
lun
->
lun£t
, 
¥eq
);

2266 
sh_cmd_ªad
:

2267 
sdev
->
tŸÆ_ªad_£˘‹s
++;

2268 #ifde‡
SHANNON_USE_WRITE_BUFFER


2269 i‡(
	`ã°_pba_ö_bufq
(
sdev
, 
¥eq
->
pba
.
lun
,Öªq->pba.
lun_pba
)) {

2270 i‡(
	`sh™n⁄_ªad_buf_cmd
(
sdev
, 
¥eq
) == 0)

2275 i‡(
fú°_rd_ªq
 =
NULL
) {

2276 
	`SHANNON_INIT_LIST_HEAD
(&
¥eq
->
chunk_li°
);

2277 
fú°_rd_ªq
 = 
¥eq
;

2278 
rd_ªqs
 = 1;

2279 
rd_∑ge
 = 
¥eq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_∑ge
;

2280 
rd_chunk
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
rd_∑ge
);

2282 
∑ge
 = 
¥eq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_∑ge
;

2283 
chunk
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
∑ge
);

2284 i‡((
sdev
->
p£udo_∂™e
 && ((
∑ge
 !
rd_∑ge
Ë|| (
¥eq
->
pba
.
lun
 !
fú°_rd_ªq
->pba.lunË|| (
rd_ªqs
 >sdev->
logicbs_ö_∑ge
))) || \

2285 ((
chunk
 !
rd_chunk
Ë|| (
¥eq
->
pba
.
lun
 !
fú°_rd_ªq
->pba.lunË|| (
rd_ªqs
 >
sdev
->
logicbs_ö_chunk
))) {

2286 
lun
 = 
sdev
->lun[
fú°_rd_ªq
->
pba
.lun];

2287 
	`sh™n⁄_ªad_cmd
(
lun
->
lun£t
, 
fú°_rd_ªq
);

2289 
	`SHANNON_INIT_LIST_HEAD
(&
¥eq
->
chunk_li°
);

2290 
fú°_rd_ªq
 = 
¥eq
;

2291 
rd_ªqs
 = 1;

2292 
rd_∑ge
 = 
∑ge
;

2293 
rd_chunk
 = 
chunk
;

2296 i‡(
¥eq
->
pba
.
lun_pba
 < 
fú°_rd_ªq
->pba.lun_pba) {

2297 
	`sh™n⁄_li°_add_èû
(&
¥eq
->
chunk_li°
, &
fú°_rd_ªq
->chunk_list);

2298 
fú°_rd_ªq
 = 
¥eq
;

2300 
	`sh™n⁄_li°_f‹_óch_íåy_ªvî£
(
ªq
, &
fú°_rd_ªq
->
chunk_li°
, chunk_list) {

2301 i‡(
ªq
->
pba
.
lun_pba
 < 
¥eq
->pba.lun_pba)

2304 
	`sh™n⁄_li°_add
(&
¥eq
->
chunk_li°
, &
ªq
->chunk_list);

2306 
rd_ªqs
++;

2310 
sh_cmd_wrôe
:

2311 
hód_ödex
 = 
¥eq
->
hód
 & 
HEAD_INDEX_MASK
;

2312 if(
¥eq
->
£ndî
 =
FROM_HOST
) {

2313 
sdev
->
ho°_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

2314 i‡(
sdev
->
©omic_wrôe
 && (
	`gë_ªq_ödex
(
¥eq
) == 0)) {

2315 
vaˇncy
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
hód_ödex
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[head_index];

2316 i‡((
vaˇncy
 < 
sdev
->
logicbs_ö_chunk
Ë&& (vaˇncy < 
¥eq
->
sbio
->
logicbs
)) {

2317 
vaˇncy
) {

2318 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
hód_ödex
]);

2319 
vaˇncy
--;

2323 } i‡(
¥eq
->
£ndî
 =
FROM_GC
) {

2324 i‡(
	`pba_is_övÆid
(
sdev
, 
¥eq
->
ﬁd_pba
.
lun
,Öªq->ﬁd_pba.
lun_pba
)) {

2325 
	`gc_wrôe_ˇn˚l
(
sdev
, 
¥eq
);

2329 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

2330 #i‚de‡
SHANNON_USE_WRITE_BUFFER


2331 i‡(
fú°_wrôe
[
hód_ödex
] == 0) {

2332 
fú°_wrôe
[
hód_ödex
] = 1;

2333 i‡(
hód_ödex
 =
HOT_INDEX
)

2334 
	`__sh™n⁄_ˇn˚l_dñayed_w‹k
(&
sdev
->
hŸ_dñayed_∑d
);

2336 
	`__sh™n⁄_ˇn˚l_dñayed_w‹k
(&
sdev
->
cﬁd_dñayed_∑d
);

2340 i‡(
sdev
->
ovîœp_wrôe
)

2341 
	`sh™n⁄_wrôe_ªque°_ö_ovîœp_mode
(
sdev
, 
¥eq
);

2343 
	`sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
¥eq
);

2345 i‡(
	`ho°_ªq_queue_Àngth
(
sdev
Ë< 
REQ_QUEUE_THRESHOLD_L
)

2346 
sdev
->
ö_block_°©e
 = 0;

2347 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
) {

2348 i‡(
sdev
->
ö_block_°©e
 > 1)

2349 
sdev
->
ö_block_°©e
 = 1;

2352 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[1]))

2353 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

2355 i‡((
sdev
->
ö_block_°©e
 < 1Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[0]))

2356 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

2359 
sh_cmd_îa£
:

2360 
lun
 = 
sdev
->lun[
¥eq
->
pba
.lun];

2361 
	`sh™n⁄_îa£_cmd
(
lun
->
lun£t
, 
¥eq
);

2364 
sh_cmd_∑rôy
:

2365 
lun
 = 
sdev
->lun[
¥eq
->
pba
.lun];

2366 
	`sh™n⁄_∑rôy_cmd
(
lun
->
lun£t
, 
¥eq
);

2369 
sh_cmd_∑rôy_öô
:

2370 
lun
 = 
sdev
->lun[
¥eq
->
pba
.lun];

2371 
	`sh™n⁄_∑rôy_öô_cmd
(
lun
->
lun£t
, 
¥eq
);

2375 
	`sh™n⁄_w¨n
("Unknow¿›code=0x%x.\n", 
¥eq
->
›code
);

2376 
	`sh™n⁄_w¨n
("lba=%ld,Üun=%d,Üun_pba=%d.\n", 
¥eq
->
lba
,Öªq->
pba
.
lun
,Öªq->pba.
lun_pba
);

2381 i‡(
fú°_rd_ªq
) {

2382 
lun
 = 
sdev
->lun[
fú°_rd_ªq
->
pba
.lun];

2383 
	`sh™n⁄_ªad_cmd
(
lun
->
lun£t
, 
fú°_rd_ªq
);

2384 
fú°_rd_ªq
 = 
NULL
;

2387 #ifde‡
SHANNON_USE_WRITE_BUFFER


2388 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

2389 i‡(
sdev
->
chunk_ªq˙t
[
i
] && !
	`bufq_åaffic_jam
(sdev, i)) {

2390 
	`put_chunk_ªq_to_buf
(
sdev
, sdev->
chunk_ªq
[
i
], i);

2391 
sdev
->
chunk_ªq
[
i
] = 
NULL
;

2392 
sdev
->
chunk_ªq˙t
[
i
] = 0;

2395 i‡(
	`chunk_timeout
(
sdev
, 
i
Ë&& (sdev->
chunk_ªq˙t
[i] == 0)) {

2396 
vaˇncy
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
i
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[i];

2397 i‡(
vaˇncy
 && (vaˇncy < 
sdev
->
logicbs_ö_chunk
)) {

2398 
vaˇncy
) {

2399 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

2400 
sdev
->
fûl_›í_chunk_logicbs
++;

2401 
sdev
->
tŸÆ_wrôe_£˘‹s
 +sdev->
£˘‹s_ö_logicb
;

2402 
vaˇncy
--;

2409 i‡(
sdev
->
chunk_ªq˙t
[
HOT_INDEX
] && (sdev->
öô_d⁄e
 >
STAGE9_DONE
Ë&& !sdev->
©omic_wrôe
 && !sdev->
ovîœp_wrôe
)

2410 
	`pick_ho°_ªq_to_fûl_chunk
(
sdev
);

2412 #i‚de‡
SHANNON_USE_WRITE_BUFFER


2413 i‡(
sdev
->
chunk_ªq
[
HOT_INDEX
])

2414 
	`sh™n⁄_queue_dñayed_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
hŸ_dñayed_∑d
, 5);

2415 i‡(
sdev
->
u£_duÆ_hód
) {

2416 i‡(
sdev
->
chunk_ªq
[
COLD_INDEX
])

2417 
	`sh™n⁄_queue_dñayed_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
cﬁd_dñayed_∑d
, 10);

2420 
	}
}

2422 
ölöe
 
	$check_h¨d_queue_limô
(
sh™n⁄_dev
 *
sdev
)

2424 i‡(
sdev
->
h¨d_queue_limô
) {

2425 i‡((!
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[0]Ë&& (
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
Ë< sdev->
h¨d_queue_limô
)) || \

2426 !
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[1]Ë|| !sh™n⁄_li°_em±y(&sdev->ªq_queue[2]Ë|| !sh™n⁄_li°_em±y(&sdev->
gc_wrôe_queue
))

2428 } i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
)) {

2433 
	}
}

2435 
ölöe
 
	$√ed_queue_pick_w‹k
(
sh™n⁄_dev
 *
sdev
)

2437 
i
;

2439 #ifde‡
SHANNON_USE_WRITE_BUFFER


2440 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

2441 i‡(
sdev
->
chunk_ªq
[
i
] && 
	`bufq_åaffic_lowî
(sdev, i))

2446 i‡(
sdev
->
cmd_queue_wrôes_limô
) {

2447 i‡((
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_cmd_queue_wrôes
Ë>
	`GET_CMD_QUEUE_WRITES_THRESHOLD_L
(sdev)))

2451  
	`check_h¨d_queue_limô
(
sdev
);

2452 
	}
}

2454 
	$sh™n⁄_pick_ªque°
(
sh™n⁄_dev
 *
sdev
, 
limô
)

2456 i‡(
	`sh™n⁄_muãx_åylock
(&
sdev
->
pick_£m
) == 0)

2457  -
EBUSY
;

2458 
	`__sh™n⁄_pick_ªque°
(
sdev
, 
limô
);

2459 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

2461 i‡(
	`√ed_queue_pick_w‹k
(
sdev
))

2462 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

2464 
	}
}

2466 
	$show_pick_£m_ö_debugfs
(
sh™n⁄_dev
 *
sdev
)

2468 i‡(
	`sh™n⁄_muãx_åylock
(&
sdev
->
pick_£m
) == 0)

2470 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

2472 
	`sh™n⁄_log
("%s(): queue_w‹k i¿debugfs.\n", 
__func__
);

2473 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

2475 
	}
}

2477 
	$lun£t_pick_ªque°
(
sh™n⁄_lun£t
 *
lun£t
, 
limô
)

2479 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

2480 
sh™n⁄_ªque°
 *
fú°_rd_ªq
 = 
NULL
, *
¥eq
 = NULL, *
ªq
;

2481 
rd_chunk
 = 0, 
chunk
, 
rd_∑ge
 = 0, 
∑ge
, 
rd_ªqs
 = 0;

2483 i‡(
	`sh™n⁄_muãx_åylock
(&
lun£t
->
lun_pick_£m
) == 0)

2484  -
EBUSY
;

2487 !
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
)) {

2488 i‡(
limô
 == 0)

2490 
limô
--;

2491 
	`sh™n⁄_•ö_lock_bh
(&
lun£t
->
ªq_queue_lock
);

2492 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
lun£t
->
ªq_queue
, 
sh™n⁄_ªque°
, 
li°
);

2493 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

2494 
¥eq
->
°©e
 = 
REQ_PICKED
;

2495 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
ªq_queue_lock
);

2497 
¥eq
->
›code
) {

2498 
sh_cmd_adv™˚d_ªad
:

2499 
sdev
->
tŸÆ_ªad_£˘‹s
++;

2500 #ifde‡
SHANNON_USE_WRITE_BUFFER


2501 i‡(
	`ã°_pba_ö_bufq
(
sdev
, 
¥eq
->
pba
.
lun
,Öªq->pba.
lun_pba
)) {

2502 i‡(
	`sh™n⁄_ªad_buf_cmd
(
sdev
, 
¥eq
) == 0)

2506 i‡(
sdev
->
adv™˚d_ªad_°©e
 & 
UPDATING_MICROCODE_MASK
) {

2507 i‡(
	`add_adv_ªad_ªque°_li°_èû
(
sdev
, 
¥eq
) > 0) {

2509 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_cmd_queue_adv_ªads
);

2510 
	`sh™n⁄_adv™˚d_ªad
(
lun£t
, 
¥eq
);

2512 
sdev
->
tŸÆ_ªad_£˘‹s
--;

2514 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_cmd_queue_adv_ªads
);

2515 
	`sh™n⁄_adv™˚d_ªad
(
lun£t
, 
¥eq
);

2519 
sh_cmd_ªad
:

2520 i‡(
¥eq
->
£ndî
 =
FROM_HOST
)

2521 
lun£t
->
ho°_ªad_£˘‹s
 +
sdev
->
£˘‹s_ö_logicb
;

2522 
sdev
->
tŸÆ_ªad_£˘‹s
++;

2523 #ifde‡
SHANNON_USE_WRITE_BUFFER


2524 i‡(
	`ã°_pba_ö_bufq
(
sdev
, 
¥eq
->
pba
.
lun
,Öªq->pba.
lun_pba
)) {

2525 i‡(
	`sh™n⁄_ªad_buf_cmd
(
sdev
, 
¥eq
) == 0)

2529 i‡(
fú°_rd_ªq
 =
NULL
) {

2530 
	`SHANNON_INIT_LIST_HEAD
(&
¥eq
->
chunk_li°
);

2531 
fú°_rd_ªq
 = 
¥eq
;

2532 
rd_ªqs
 = 1;

2533 
rd_∑ge
 = 
¥eq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_∑ge
;

2534 
rd_chunk
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
rd_∑ge
);

2536 
∑ge
 = 
¥eq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_∑ge
;

2537 
chunk
 = 
	`gë_∑ge_ö_fú°_∂™e
(
sdev
, 
∑ge
);

2538 i‡((
sdev
->
p£udo_∂™e
 && ((
∑ge
 !
rd_∑ge
Ë|| (
¥eq
->
pba
.
lun
 !
fú°_rd_ªq
->pba.lunË|| (
rd_ªqs
 >sdev->
logicbs_ö_∑ge
))) || \

2539 ((
chunk
 !
rd_chunk
Ë|| (
¥eq
->
pba
.
lun
 !
fú°_rd_ªq
->pba.lunË|| (
rd_ªqs
 >
sdev
->
logicbs_ö_chunk
))) {

2540 
	`sh™n⁄_ªad_cmd
(
lun£t
, 
fú°_rd_ªq
);

2542 
	`SHANNON_INIT_LIST_HEAD
(&
¥eq
->
chunk_li°
);

2543 
fú°_rd_ªq
 = 
¥eq
;

2544 
rd_ªqs
 = 1;

2545 
rd_∑ge
 = 
∑ge
;

2546 
rd_chunk
 = 
chunk
;

2549 i‡(
¥eq
->
pba
.
lun_pba
 < 
fú°_rd_ªq
->pba.lun_pba) {

2550 
	`sh™n⁄_li°_add_èû
(&
¥eq
->
chunk_li°
, &
fú°_rd_ªq
->chunk_list);

2551 
fú°_rd_ªq
 = 
¥eq
;

2553 
	`sh™n⁄_li°_f‹_óch_íåy_ªvî£
(
ªq
, &
fú°_rd_ªq
->
chunk_li°
, chunk_list) {

2554 i‡(
ªq
->
pba
.
lun_pba
 < 
¥eq
->pba.lun_pba)

2557 
	`sh™n⁄_li°_add
(&
¥eq
->
chunk_li°
, &
ªq
->chunk_list);

2559 
rd_ªqs
++;

2564 
sh_cmd_wrôe
:

2565 
	`BUG_ON
(
sdev
->
lun
[
¥eq
->
pba
.lun]->
lun£t
 !=Üunset);

2566 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

2567 
	`BUG_ON
(
¥eq
->
hód
 !
MBR_HEAD
);

2568 
	`BUG_ON
(
¥eq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
 >sdev->
mbr_eblocks
/sdev->
∂™es
);

2570 
	`sh™n⁄_wrôe_cmd
(
lun£t
, 
¥eq
);

2573 
sh_cmd_îa£
:

2574 
	`sh™n⁄_îa£_cmd
(
lun£t
, 
¥eq
);

2578 
	`sh™n⁄_w¨n
("Unknow¿›code=0x%x.\n", 
¥eq
->
›code
);

2579 
	`sh™n⁄_w¨n
("lba=%ld,Üun=%d,Üun_pba=%d.\n", 
¥eq
->
lba
,Öªq->
pba
.
lun
,Öªq->pba.
lun_pba
);

2585 i‡(
fú°_rd_ªq
) {

2586 
	`sh™n⁄_ªad_cmd
(
lun£t
, 
fú°_rd_ªq
);

2587 
fú°_rd_ªq
 = 
NULL
;

2589 
	`sh™n⁄_muãx_u∆ock
(&
lun£t
->
lun_pick_£m
);

2591 i‡(!
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
)) {

2592 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &
lun£t
->
submô_w‹k
);

2596 
	}
}

2598 
sh™n⁄_submô_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
);

2600 
	$sh™n⁄_lun£t_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2602 
sh™n⁄_lun£t
 *
lun£t
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_lun£t, 
submô_w‹k
);

2603 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

2604 
i
, 
ªt
, 
cou¡
;

2606 
	`lun£t_pick_ªque°
(
lun£t
, 
sdev
->
logicbs_ö_chunk
);

2608 
cou¡
 = 0;

2609 
ªt
 = 0;

2610 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

2611 
lun£t
 = &
sdev
->
lun£ts
[
i
];

2612 i‡(!
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
)) {

2613 
ªt
 = 
	`lun£t_pick_ªque°
(
lun£t
, 
sdev
->
logicbs_ö_chunk
);

2614 i‡(
ªt
 == 1)

2615 
cou¡
++;

2618 } 
cou¡
);

2619 
	}
}

2621 
	$sh™n⁄_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2623 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
(
w‹k
, shannon_dev, work);

2625 
__echo_ö
;

2626 
	`sh™n⁄_pick_ªque°
(
dev
, 0xffffffff);

2627 
	}
}

2630 
	$sh™n⁄_disˇrd
(
sh™n⁄_dev
 *
sdev
, 
logicb64_t
 
°¨t_lba
,Üogicb64_à
íd_lba
)

2632 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

2633 
i
, 
sb_ödex
;

2634 
logicb64_t
 
lba
;

2635 
lun_pba
 
ﬁd_pba
;

2637 
	`debugs1
("°¨t_lba=%Œd, cou¡=%Œd.\n", 
°¨t_lba
, 
íd_lba
 - start_lba);

2638 i‡(
°¨t_lba
 >
íd_lba
)

2641 
i
 = 0; i < 
LOCK_COUNT
; i++) {

2642 
lba
 = 
°¨t_lba
 + 
i
;

2643 i‡(
lba
 >
íd_lba
)

2645 
	`Õmt_lock
(
sdev
, 
sdisk
, 
lba
);

2647 
	`gë_lun_pba_‰om_lba
(
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

2648 i‡((
ﬁd_pba
.
lun_pba
 !0x03ffffffË&& !
	`ã°_wrôe_ö_¥o˚ss
(
sdev
, &old_pba)) {

2649 
sb_ödex
 = 
ﬁd_pba
.
lun_pba
 / 
sdev
->
logicbs_ö_siblög_eblock
;

2650 i‡(
sdev
->
u£_duÆ_hód
) {

2651 i‡((
sb_ödex
 !
sdev
->
wr_sb
[
HOT_INDEX
]Ë&& (sb_ödex !sdev->wr_sb[
COLD_INDEX
])) {

2652 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
lba
, 0x3ff, 0x03ffffff);

2653 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

2656 i‡(
sb_ödex
 !
sdev
->
wr_sb
[
HOT_INDEX
]) {

2657 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
lba
, 0x3ff, 0x03ffffff);

2658 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

2662 
lba
 +
LOCK_COUNT
;

2663 } 
lba
 < 
íd_lba
);

2664 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
lba
);

2666 
	}
}

2668 
	$sh™n⁄_≥riod_ªad_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2670 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
≥riod_ªad_w‹k
);

2671 
sh™n⁄_sb
 *
sb
 = 
NULL
;

2672 
ªt
 = -1;

2674 i‡(!
	`ˇn_≥riod_ªad
(
dev
))

2675 
dißbÀ_≥riod_ªad
;

2676 
sb
 = 
	`gë_≥riod_ªad_sb
(
dev
);

2677 i‡(
sb
) {

2678 i‡(!
	`is_a˘ive_blk
(
sb
)) {

2679 i‡(
sb
->
£q_num
 > 
dev
->
≥riod_ªad
.
mö_£q_num
)

2680 
dev
->
≥riod_ªad
.
mö_£q_num
 = 
sb
->
£q_num
;

2681 i‡(
dev
->
≥riod_ªad
.
max_£q_num
 == ~0x0)

2682 
dev
->
≥riod_ªad
.
max_£q_num
 = dev->
£quí˚_numbî
 - 1;

2684 
	`sh™n⁄_©omic_öc
(&
sb
->
ö_≥riod_ªad
);

2685 
ªt
 = 
	`≥riod_ªad_sb
(
dev
, 
sb
);

2686 i‡(
ªt
)

2687 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_≥riod_ªad
);

2690 
dev
->
≥riod_ªad
.
mö_£q_num
 = 0x0;

2691 
dev
->
≥riod_ªad
.
max_£q_num
 = ~0x0;

2692 
	`sbs_˛ón_≥riod_ªad_d⁄e
(
dev
);

2695 
	`do_√xt_≥riod_ªad
(
dev
);

2698 
dißbÀ_≥riod_ªad
:

2699 
dev
->
≥riod_ªad
.
°©e
 = 
PERIOD_READ_DISABLE
;

2700 
	`sbs_˛ón_≥riod_ªad_d⁄e
(
dev
);

2701 
	}
}

2703 
	$≥riod_ªad_timî_timeout
(
sh™n⁄_timî_li°
 *
timî
)

2705 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
≥riod_ªad_timî
);

2707 i‡(
	`ˇn_≥riod_ªad
(
sdev
))

2708 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_≥riod_ªad_wq
, &sdev->
≥riod_ªad_w‹k
);

2710 
sdev
->
≥riod_ªad
.
°©e
 = 
PERIOD_READ_DISABLE
;

2711 
	}
}

2713 
upd©e_d©a_ö_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
);

2714 #ifde‡
SHANNON_USE_WRITE_BUFFER


2716 
ölöe
 
	$dñ_fûl_chunk_timî
(
sh™n⁄_dev
 *
sdev
, 
fûl_hód
)

2718 
i
;

2720 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

2721 i‡(
fûl_hód
 & (1 << 
i
))

2722 
	`sh™n⁄_dñ_timî
(&
sdev
->
fûl_chunk_timî
[
i
]);

2724 
	}
}

2726 
ölöe
 
u64
 
	$gë_fûl_chunk_timeout
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

2728 
sh™n⁄_sb
 *
sb
 = 
sdev
->
a˘ive_blk
[
hód_ödex
];

2730 i‡(
sb
 && sb->
fûl_sb
)

2731  
	`gë_jiffõs
(Ë+ 
	`gë_HZ
() * 2 / 1000;

2733  
	`gë_jiffõs
(Ë+ 
	`gë_HZ
(Ë* 
sdev
->
fûl_chunk_timî_expúe
 / 1000;

2734 
	}
}

2736 
	$mod_fûl_chunk_timî
(
sh™n⁄_dev
 *
sdev
, 
fûl_hód
)

2738 #i‚de‡
CONFIG_SHANNON_PLVERIFY


2739 
i
;

2741 i‡((
sdev
->
sdisk
.
exô
 =0Ë&& (sdev->
ac˚ss_mode
 !
SHN_MODE_READONLY
)) {

2742 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

2743 i‡(
fûl_hód
 & (1 << 
i
))

2744 
	`sh™n⁄_mod_timî
(&
sdev
->
fûl_chunk_timî
[
i
], 
	`gë_fûl_chunk_timeout
(sdev, i));

2748 
	}
}

2750 
ölöe
 
	$chunk_√ed_fûl
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

2752 i‡(
sdev
->
a˘ive_blk
[
hód_ödex
]->
fûl_sb
) {

2754 i‡((
sdev
->
wr_∑ge
[
hód_ödex
] != 0) || \

2755 (
sdev
->
wr_group
[
hód_ödex
] != 0) || \

2756 (
sdev
->
lun_ö_group
[
hód_ödex
] != 0) || \

2757 (
sdev
->
wr_∂™e
[
hód_ödex
] != 0) || \

2758 (
sdev
->
wr_logicb
[
hód_ödex
] != 0))

2762 i‡((
sdev
->
wr_group
[
hód_ödex
] != 0) || \

2763 (
sdev
->
lun_ö_group
[
hód_ödex
] != 0) || \

2764 (
sdev
->
wr_∂™e
[
hód_ödex
] != 0) || \

2765 (
sdev
->
wr_logicb
[
hód_ödex
] != 0))

2770 
	}
}

2772 
	$∑d_wrôe_chunk_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

2774 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

2775 
hód_ödex
 = ()
sbio
->
d©a2
;

2776 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

2777 
sh™n⁄_sb
 *
sb
;

2779 i‡(
hód_ödex
 >= 2) {

2780 
	`debugs0
("hód_ödex=%d.\n", 
hód_ödex
);

2781 
	`BUG
();

2784 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

2785 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

2786 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

2787 
	`‰ì_ªq
(
ªq
);

2788 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

2790 
	`‰ì_sbio
(
sbio
);

2792 i‡(
sdev
->
a˘ive_blk
[
hód_ödex
]->
fûl_sb
) {

2793 
	`bÆ™˚_gc
(
sdev
, sdev->
logicbs_ö_chunk
);

2795 i‡((
sdev
->
wr_∑ge
[
hód_ödex
] != 0) || \

2796 (
sdev
->
wr_group
[
hód_ödex
] != 0) || \

2797 (
sdev
->
lun_ö_group
[
hód_ödex
] != 0) || \

2798 (
sdev
->
wr_∂™e
[
hód_ödex
] != 0) || \

2799 (
sdev
->
wr_logicb
[
hód_ödex
] != 0))

2800 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
hód_ödex
));

2803 i‡((
sdev
->
wr_group
[
hód_ödex
] != 0) || \

2804 (
sdev
->
lun_ö_group
[
hód_ödex
] != 0) || \

2805 (
sdev
->
wr_∂™e
[
hód_ödex
] != 0) || \

2806 (
sdev
->
wr_logicb
[
hód_ödex
] != 0))

2807 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
hód_ödex
));

2809 
	}
}

2811 
	$∑d_buf„r_wrôe_chunk
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
)

2813 
sh™n⁄_ªque°
 *
ªq
;

2814 
sh™n⁄_bio
 *
sbio
;

2815 
dñè
 = 0, 
¥i‹ôy
 = 1;

2817 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

2820 i‡(
sdev
->
sdisk
.
ö_ªc⁄fig
) {

2821 
	`mod_fûl_chunk_timî
(
sdev
, (1 << 
hód_ödex
));

2825 
	`debugs1
("enter: head_index=%d, wr_plane=%d, wr_logicb=%d.\n",

2826 
hód_ödex
, 
sdev
->
wr_∂™e
[hód_ödex], sdev->
wr_logicb
[head_index]);

2827 i‡(
	`chunk_√ed_fûl
(
sdev
, 
hód_ödex
))

2828 
dñè
 = (
sdev
->
∂™es
 - sdev->
wr_∂™e
[
hód_ödex
]Ë* sdev->
logicbs_ö_∑ge
 - sdev->
wr_logicb
[head_index];

2829 i‡((
dñè
 <0Ë|| (dñè > 
sdev
->
logicbs_ö_chunk
))

2832 
sbio
 = 
	`Æloc_sbio
(
GFP_NOWAIT
);

2833 
	`£t_sbio_debug_èg
(
sbio
, 
FILL_BUFFER_WRITE_CHUNK_TAG
);

2834 
sbio
->
ˇŒback
 = 
∑d_wrôe_chunk_ˇŒback
;

2835 
sbio
->
d©a
 = 
sdev
;

2836 
sbio
->
d©a2
 = (*)()
hód_ödex
;

2837 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

2838 
sbio
->
logicbs
 = 
dñè
;

2839 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

2840 
	`debugs1
("hód_ödex=%d, dñè=%d.\n", 
hód_ödex
, 
dñè
);

2841 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

2842 
dñè
) {

2843 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

2844 
	`£t_ªq_debug_èg
(
ªq
, 
FILL_BUFFER_WRITE_CHUNK_TAG
, 
dñè
);

2845 
ªq
->
›code
 = 
sh_cmd_wrôe
;

2846 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

2847 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

2848 
ªq
->
hód
 = 
wrôe_hód
[
hód_ödex
];

2849 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

2850 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

2851 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

2852 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

2853 
ªq
->
sbio
 = sbio;

2854 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

2855 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
¥i‹ôy
);

2856 
dñè
--;

2857 
sdev
->
fûl_›í_chunk_logicbs
++;

2859 
	`debugs1
("exit: head_index=%d, wr_plane=%d, wr_logicb=%d.\n",

2860 
hód_ödex
, 
sdev
->
wr_∂™e
[hód_ödex], sdev->
wr_logicb
[head_index]);

2862 
	}
}

2864 
	$hŸ_fûl_chunk_timî_timeout
(
sh™n⁄_timî_li°
 *
timî
)

2866 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
fûl_chunk_timî
[
HOT_INDEX
]);

2867 
ªt
;

2869 
ªt
 = 
	`∑d_buf„r_wrôe_chunk
(
sdev
, 
HOT_INDEX
);

2870 i‡(
ªt
)

2871 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

2872 
	}
}

2874 
	$cﬁd_fûl_chunk_timî_timeout
(
sh™n⁄_timî_li°
 *
timî
)

2876 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
fûl_chunk_timî
[
COLD_INDEX
]);

2877 
ªt
;

2879 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


2880 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

2882 
ªt
 = 
	`∑d_buf„r_wrôe_chunk
(
sdev
, 
COLD_INDEX
);

2883 i‡(
ªt
)

2884 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

2885 
	}
}

2889 
ölöe
 
	$dñ_fûl_chunk_timî
(
sh™n⁄_dev
 *
sdev
, 
fûl_hód
)

2892 
	}
}

2894 
	$mod_fûl_chunk_timî
(
sh™n⁄_dev
 *
sdev
, 
fûl_hód
)

2897 
	}
}

2900 
	$∑d_hŸ_dummy_ªq
(
sh™n⁄_dev
 *
sdev
)

2902 
sh™n⁄_ªque°
 *
ªq
;

2903 
dñè
, 
¥i‹ôy
 = 1;

2905 i‡(
sdev
->
sdisk
.
ö_ªc⁄fig
)

2910 i‡(
sdev
->
chunk_ªq
[
HOT_INDEX
] =
NULL
)

2915 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

2916 
dñè
 = 
sdev
->
logicbs_ö_chunk
 - sdev->
chunk_ªq˙t
[
HOT_INDEX
];

2917 
dñè
) {

2918 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

2919 
	`£t_ªq_debug_èg
(
ªq
, 
HOT_TIMER_FN_TAG
, 0);

2920 
ªq
->
›code
 = 
sh_cmd_wrôe
;

2921 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

2922 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

2923 
ªq
->
hód
 = 
HOT_HEAD
;

2924 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

2925 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

2926 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

2927 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

2928 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
¥i‹ôy
);

2929 
dñè
--;

2932 
	}
}

2935 
	$∑d_cﬁd_dummy_ªq
(
sh™n⁄_dev
 *
sdev
)

2937 
sh™n⁄_ªque°
 *
ªq
;

2938 
dñè
, 
¥i‹ôy
 = 1;

2940 i‡(
sdev
->
sdisk
.
ö_ªc⁄fig
)

2943 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


2944 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

2947 i‡(
sdev
->
chunk_ªq
[
COLD_INDEX
] =
NULL
)

2952 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

2953 
dñè
 = 
sdev
->
logicbs_ö_chunk
 - sdev->
chunk_ªq˙t
[
COLD_INDEX
];

2954 
dñè
) {

2955 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

2956 
	`£t_ªq_debug_èg
(
ªq
, 
COLD_TIMER_FN_TAG
, 0);

2957 
ªq
->
›code
 = 
sh_cmd_wrôe
;

2958 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

2959 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

2960 
ªq
->
hód
 = 
COLD_HEAD
;

2961 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

2962 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

2963 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

2964 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

2965 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
¥i‹ôy
);

2966 
dñè
--;

2969 
	}
}

2971 
	$hŸ_∑d_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2973 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
((
sh™n⁄_dñayed_w‹k
 *)
w‹k
, sh™n⁄_dev, 
hŸ_dñayed_∑d
);

2975 i‡(
	`∑d_hŸ_dummy_ªq
(
dev
))

2976 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
w‹k
);

2977 
	}
}

2979 
	$cﬁd_∑d_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2981 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
((
sh™n⁄_dñayed_w‹k
 *)
w‹k
, sh™n⁄_dev, 
cﬁd_dñayed_∑d
);

2983 i‡(
	`∑d_cﬁd_dummy_ªq
(
dev
))

2984 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
w‹k
);

2985 
	}
}

2988 
	$sh™n⁄_pm_qos_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

2990 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
pm_qos_w‹k
);

2992 i‡(
	`sh™n⁄_bio_ö_Êight
(
sdev
) == 0)

2993 
	`sh™n⁄_pm_qos_upd©e_ªquúemít
(&
sdev
->
pm_qos_l
, 
SHANNON_PM_QOS_CPU_DMA_LATENCY
, sdev->
sdisk
.
disk_«me
, 
SHANNON_PM_QOS_DEFAULT_VALUE
);

2994 
	}
}

2998 
	$ho°_gë_hód_™d_£t_pba_èbÀ
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio_t
 *
bio
, 
sh™n⁄_ªque°
 *
ªq
)

3000 
hód_ödex
;

3001 
sh™n⁄_sb
 *
ﬁd_sb
;

3003 #ifde‡
CONFIG_SHANNON_PLVERIFY


3004 i‡(
dev
->
∂˘æ
 & 0x01) {

3005 i‡(((
__u8
 *)
ªq
->
vút_addr
)[0] & 0x01) {

3006 
ªq
->
hód
 = 
HOT_HEAD
;

3010 
ªq
->
hód
 = 
COLD_HEAD
;

3015 i‡(!
dev
->
•oﬁ
 && dev->
¥i‹ôize_wrôe
 && 
bio
) {

3016 i‡(
	`sh™n⁄_bio_Êagged
(
bio
, 
BIO_RW_PRIO
))

3017 
ªq
->
hód
 = 
HOT_HEAD
;

3019 
ªq
->
hód
 = 
COLD_HEAD
;

3020 i‡(
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
ﬁd_pba
, 
NULL
, 
sdisk
) < 0)

3022 
END
;

3025 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
ﬁd_pba
, 
NULL
, 
sdisk
);

3026 i‡(
ªq
->
ﬁd_pba
.
lun_pba
 == 0x03ffffff) {

3027 
ªq
->
hód
 = (
sh™n⁄_öô_ãmp
 > 
HIGHEST_COLD_STATE
Ë? 
HOT_HEAD
 : 
COLD_HEAD
;

3031 
ﬁd_sb
 = 
dev
->
sbs
 + 
ªq
->
ﬁd_pba
.
lun_pba
/dev->
logicbs_ö_siblög_eblock
;

3032 
ªq
->
hód
 = (
sh™n⁄_öô_ãmp
 > 
HIGHEST_COLD_STATE
Ë? 
HOT_HEAD
 : 
COLD_HEAD
;

3035 i‡(
	`ã°_wrôe_ö_¥o˚ss
(
dev
, &
ªq
->
ﬁd_pba
)) {

3036 
hód_ödex
 = 
	`gë_pba_√xt_hód
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
);

3037 
ªq
->
hód
 = (
hód_ödex
 =
HOT_INDEX
Ë? 
HOT_HEAD
 : 
COLD_HEAD
;

3038 
END
;

3042 i‡(
ﬁd_sb
->
sb_ödex
 =
dev
->
wr_sb
[
HOT_INDEX
])

3043 
ªq
->
hód
 = 
HOT_HEAD
;

3044 i‡(
dev
->
u£_duÆ_hód
) {

3045 i‡(
ﬁd_sb
->
sb_ödex
 =
dev
->
wr_sb
[
COLD_INDEX
])

3046 
ªq
->
hód
 = 
COLD_HEAD
;

3049 
END
:

3050 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


3051 
	`BUG_ON
((!
dev
->
u£_duÆ_hód
Ë&& (
ªq
->
hód
 =
COLD_HEAD
));

3053 
	`£t_pba_√xt_hód
(
dev
, 
ªq
->
ﬁd_pba
.
lun
,Ñeq->ﬁd_pba.
lun_pba
,Ñeq->
hód
);

3054 
	`£t_ho°_wrôe_°©e
(
dev
, &
ªq
->
ﬁd_pba
);

3055 
	}
}

3057 
	$gë_wr_off£t
(
sh™n⁄_sb
 *
sb
, 
lun
, 
logicb_t
 
lun_pba_off£t
)

3059 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

3060 
logicbs_ö_∑rôy_group
 = 
sdev
->
logicbs_ö_chunk
 * sdev->
max_luns_ö_group
;

3061 
logicbs_ö_∑ge_°rùe
 = 
logicbs_ö_∑rôy_group
 * 
sdev
->
max_avaûabÀ_groups
;

3062 
group_ödex
 = 
lun
/
sdev
->
max_luns_ö_group
;

3063 
sub_group
 *
group
 = &
sb
->sub_group[
group_ödex
];

3064 
chunk
 = (
lun_pba_off£t
 % 
sdev
->
logicbs_ö_eblock
)/sdev->
logicbs_ö_∑ge
;

3065 
∂™e
 = 
lun_pba_off£t
 / 
sdev
->
logicbs_ö_eblock
;

3066 
lun_off£t
 = (
lun
 + 
sdev
->
max_luns_ö_group
 - 
	`fú°_lun
(
group
)) % sdev->max_luns_in_group;

3068  
logicbs_ö_∑ge_°rùe
 * 
chunk
 + \

3069 
logicbs_ö_∑rôy_group
 * 
group
->
phy_ödex
 + \

3070 
sdev
->
logicbs_ö_chunk
 * 
lun_off£t
 + \

3071 
sdev
->
logicbs_ö_∑ge
 * 
∂™e
 + \

3072 
lun_pba_off£t
%
sdev
->
logicbs_ö_∑ge
;

3073 
	}
}

3075 
	$com∑ª_lun_pba
(
sh™n⁄_dev
 *
sdev
, 
lun_pba
 *
pba1
, lun_pb®*
pba2
)

3077 
sh™n⁄_sb
 *
sb1
, *
sb2
;

3078 
sb_off£t1
, 
sb_off£t2
;

3080 
sb1
 = 
sdev
->
sbs
 + 
pba1
->
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

3081 
sb2
 = 
sdev
->
sbs
 + 
pba2
->
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

3083 i‡(
sb1
->
sb_ödex
 =
sb2
->sb_index) {

3084 
sb_off£t1
 = 
	`gë_wr_off£t
(
sb1
, 
pba1
->
lun
,Öba1->
lun_pba
 % 
sdev
->
logicbs_ö_siblög_eblock
);

3085 
sb_off£t2
 = 
	`gë_wr_off£t
(
sb2
, 
pba2
->
lun
,Öba2->
lun_pba
 % 
sdev
->
logicbs_ö_siblög_eblock
);

3086  
sb_off£t1
 - 
sb_off£t2
;

3087 } i‡(
sb1
->
£q_num
 > 
sb2
->seq_num)

3091 
	}
}

3093 
	$fs_bio_ªad_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

3095 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

3096 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

3097 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

3099 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


3100 
	`sh™n⁄_©omic_dec
(&
sdev
->
ªad_bios
);

3102 
	`sh™n⁄_dma_unm≠_sg
(
sdev
->
pci_dev
, 
sbio
->
sg
, sbio->
u£d_sg_cou¡
, sbio->
dma_dú
);

3103 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

3104 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

3105 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

3106 
fú°_size
 = 
sdev
->
logicb_size
 - (()
ªq
->
vút_addr
 & (sdev->logicb_size - 1));

3107 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
fú°_size
);

3108 i‡(
fú°_size
 < 
sdev
->
logicb_size
)

3109 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
,Ñeq->
ªcovî_buf
 + 
fú°_size
, 
sdev
->
logicb_size
 - first_size);

3110 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

3112 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

3113 
	`sh™n⁄_îr
("lba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

3114 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

3115 
	`‰ì_ªq
(
ªq
);

3118 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

3119 i‡(
sbio
->
sg_cou¡
)

3120 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

3122 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

3123 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

3124 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

3125 
	`‰ì_sbio
(
sbio
);

3126 
	}
}

3129 
	$wrôe_ªque°_d⁄e
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

3131 
lun_pba
 
ﬁd_pba
;

3133 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

3136 i‡(
ﬁd_pba
.
lun_pba
 != 0x03ffffff) {

3137 i‡(
sdev
->
ovîœp_wrôe
) {

3138 i‡(
	`pba_is_equÆ
(&
ªq
->
pba
, &
sdev
->
ovîœp
->pba)) {

3139 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3140 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3141 i‡(!
	`pba_is_equÆ
(&
ﬁd_pba
, &
sdev
->
ovîœp
->
pba
))

3142 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

3144 
	`sh™n⁄_©omic_dec
(&(
sdev
->
sbs
 + 
ﬁd_pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
)->
vÆid_∑ges
);

3145 
	`£t_ho°_wrôe_°©e
(
sdev
, &
ªq
->
pba
);

3146 
	`£t_pba_√xt_hód
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
‹ig_hód
);

3147 
	`BUG_ON
(
	`ã°_gc_wrôe_°©e
(
sdev
, &
ªq
->
pba
Ë|| 
	`ã°_gc_ªad_°©e
(sdev, &req->pba));

3149 } i‡(
	`pba_is_equÆ
(&
ﬁd_pba
, &
sdev
->
ovîœp
->
pba
)) {

3150 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3151 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3152 
	`sh™n⁄_©omic_dec
(&(
sdev
->
sbs
 + 
ﬁd_pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
)->
vÆid_∑ges
);

3156 i‡(
	`com∑ª_lun_pba
(
sdev
, &
ªq
->
pba
, &
ﬁd_pba
) > 0) {

3157 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3158 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3159 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

3162 
	`debugs1
("new_sb=%d,Üun=%d,Üun_pba=%d, old_sb=%d,Üun=%d,Üun_pba=%d.\n",

3163 
ªq
->
pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
,Ñeq->pba.
lun
,Ñeq->pba.lun_pba,

3164 
ﬁd_pba
.
lun_pba
/
sdev
->
logicbs_ö_siblög_eblock
, old_pba.
lun
, old_pba.lun_pba);

3165 
	`£t_ho°_wrôe_övÆid
(
sdev
, &
ªq
->
pba
);

3168 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3169 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
);

3170 i‡(
sdev
->
•oﬁ
)

3171 
	`sh™n⁄_©omic64_öc
(&
sdev
->
•oﬁ
->
u£d_logicbs
);

3173 i‡(
sdev
->
ovîœp_wrôe
) {

3174 i‡(
	`pba_is_equÆ
(&
ªq
->
pba
, &
sdev
->
ovîœp
->pba)) {

3175 
	`£t_ho°_wrôe_°©e
(
sdev
, &
ªq
->
pba
);

3176 
	`£t_pba_√xt_hód
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
‹ig_hód
);

3177 
	`BUG_ON
(
	`ã°_gc_wrôe_°©e
(
sdev
, &
ªq
->
pba
Ë|| 
	`ã°_gc_ªad_°©e
(sdev, &req->pba));

3181 
	}
}

3183 
	$fs_bio_wrôe_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

3185 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
d©a
;

3186 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

3187 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

3188 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
œ°_sb
 = NULL;

3189 
logicbs
 = 0;

3191 
__echo_ö
;

3192 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


3193 
	`sh™n⁄_©omic_dec
(&
sdev
->
wrôe_bios
);

3195 
	`sh™n⁄_dma_unm≠_sg
(
sdev
->
pci_dev
, 
sbio
->
sg
, sbio->
u£d_sg_cou¡
, sbio->
dma_dú
);

3196 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

3197 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

3198 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

3199 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

3200 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

3201 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

3202 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

3203 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

3205 
	`sh™n⁄_öfo
("sbio->°¨t_£˘‹=0x%lx, sbio->°©us=0x%x.\n", 
sbio
->
°¨t_£˘‹
, sbio->
°©us
);

3206 i‡((
œ°_sb
 =
NULL
Ë|| (œ°_sb =
sb
))

3207 
logicbs
++;

3209 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

3210 
logicbs
 = 1;

3212 
œ°_sb
 = 
sb
;

3214 
	`‰ì_ªq
(
ªq
);

3217 i‡(
logicbs
)

3218 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

3219 
	`sh™n⁄_©omic_sub
(
sbio
->
logicbs
, &
sdev
->
ö_Êight_wrôes
);

3221 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

3222 i‡(
sbio
->
sg_cou¡
)

3223 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

3225 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

3226 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

3227 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

3229 
	`‰ì_sbio
(
sbio
);

3230 
	}
}

3232 
	$sbio_ˇŒback_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3234 
sh™n⁄_bio
 *
sbio
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_bio, 
cb_w‹k
);

3235 
sbio
->
	`ˇŒback
(sbio);

3236 
	}
}

3238 
	$sbio_ªÀa£
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_bio
 *
sbio
)

3240 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
sbio
->
u£r_cou¡
) == 0);

3242 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
sbio
->
u£r_cou¡
)) {

3243 
	`BUG_ON
(
sbio
->
ˇŒback
 =
NULL
);

3244 i‡(
	`u∆ikñy
(
sbio
->
may_¶ìp_ö_ˇŒback
 == 99)) {

3245 
sh™n⁄_sb
 *
sb
 = (sh™n⁄_sb *)
sbio
->
d©a
;

3246 
	`sh™n⁄_öô_w‹k
(&
sbio
->
cb_w‹k
, 
sbio_ˇŒback_èsk
);

3247 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_ˇŒback_wq
[
sb
->
sb_ödex
 % dev->
ˇŒback_ƒ_wq
], &
sbio
->
cb_w‹k
);

3248 } i‡(
	`u∆ikñy
(
sbio
->
may_¶ìp_ö_ˇŒback
 == 3)) {

3249 
	`sh™n⁄_öô_w‹k
(&
sbio
->
cb_w‹k
, 
sbio_ˇŒback_èsk
);

3250 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_ˇŒback_wq
[2], &
sbio
->
cb_w‹k
);

3251 } i‡(
	`u∆ikñy
(
sbio
->
may_¶ìp_ö_ˇŒback
)) {

3252 
	`sh™n⁄_öô_w‹k
(&
sbio
->
cb_w‹k
, 
sbio_ˇŒback_èsk
);

3253 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_ˇŒback_wq
[0], &
sbio
->
cb_w‹k
);

3255 
sbio
->
	`ˇŒback
(sbio);

3257 
	}
}

3259 
	$add_ªque°_queue_èû_wôhout_lock
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
)

3261 
ªq
->
°©e
 = 
REQ_IN_QUEUE
;

3262 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
dev
->
ªq_queue
[
¥i‹ôy
]);

3263 
	}
}

3265 
	$add_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
)

3267 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3268 
ªq
->
°©e
 = 
REQ_IN_QUEUE
;

3269 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
dev
->
ªq_queue
[
¥i‹ôy
]);

3270 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3271 
	}
}

3273 
	$add_wrôe_ªq_to_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
, 
¥i‹ôy
)

3275 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3276 
ªq
->
°©e
 = 
REQ_IN_QUEUE
;

3277 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
dev
->
ªq_queue
[
¥i‹ôy
]);

3278 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3280 
	`sh™n⁄_©omic_öc
(&
dev
->
wrôe_ªqs
[
¥i‹ôy
]);

3281 
	}
}

3283 
	$add_ªq_to_gc_wrôe_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_ªque°
 *
ªq
)

3285 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
gc_wrôe_queue_lock
);

3286 
ªq
->
°©e
 = 
REQ_IN_QUEUE
;

3287 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
dev
->
gc_wrôe_queue
);

3288 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
gc_wrôe_queue_lock
);

3290 
	`sh™n⁄_©omic_öc
(&
dev
->
gc_wrôe_ªqs
);

3291 
	}
}

3293 
	$add_wrôe_li°_to_ªque°_queue_èû
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_li°_hód
 *
wrôe_li°
, 
u32
 
ªqs
, 
¥i‹ôy
)

3295 
sh™n⁄_li°_hód
 *
¥ev
;

3297 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3298 
¥ev
 = 
dev
->
ªq_queue
[
¥i‹ôy
].prev;

3299 
wrôe_li°
->
√xt
->
¥ev
 =Örev;

3300 
¥ev
->
√xt
 = 
wrôe_li°
->next;

3301 
wrôe_li°
->
¥ev
->
√xt
 = &
dev
->
ªq_queue
[
¥i‹ôy
];

3302 
dev
->
ªq_queue
[
¥i‹ôy
].
¥ev
 = 
wrôe_li°
->prev;

3303 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªq_queue_lock
[
¥i‹ôy
]);

3305 
	`sh™n⁄_©omic_add
(
ªqs
, &
dev
->
wrôe_ªqs
[
¥i‹ôy
]);

3306 
	}
}

3308 
	$add_lun_ªque°_queue_èû
(
sh™n⁄_lun
 *
lun
, 
sh™n⁄_ªque°
 *
ªq
)

3310 
	`sh™n⁄_•ö_lock_bh
(&
lun
->
lun£t
->
ªq_queue_lock
);

3311 
ªq
->
°©e
 = 
REQ_IN_QUEUE
;

3312 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
lun
->
lun£t
->
ªq_queue
);

3313 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun
->
lun£t
->
ªq_queue_lock
);

3314 
	}
}

3316 
	$add_adv_ªad_ªque°_li°_èû
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

3318 
ªt
 = 0;

3320 
	`sh™n⁄_•ö_lock
(&
sdev
->
adv_ªad_li°_lock
);

3321 i‡(!(
sdev
->
adv™˚d_ªad_°©e
 & 
UPDATING_MICROCODE_MASK
)) {

3322 
ªt
 = 1;

3323 
out
;

3325 
ªq
->
°©e
 = 
REQ_IN_ADV_READ_LIST
;

3326 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
sdev
->
adv_ªad_li°
);

3327 
out
:

3328 
	`sh™n⁄_•ö_u∆ock
(&
sdev
->
adv_ªad_li°_lock
);

3329  
ªt
;

3330 
	}
}

3332 
	$put_adv_ªad_li°_to_ªq_queue
(
sh™n⁄_dev
 *
sdev
)

3334 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

3335 
sh™n⁄_poﬁ
 *
•oﬁ
;

3336 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

3337 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

3338 
sh™n⁄_sb
 *
sb
;

3339 
ªt
;

3341 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sdev
->
adv_ªad_li°
, 
li°
) {

3342 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

3344 i‡(!
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)) {

3345 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

3346 i‡(
•oﬁ
) {

3347 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

3348 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

3349 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

3350 
	`BUG
();

3352 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

3353 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

3354 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

3355 
	`BUG
();

3357 
sdisk
 = &
ns
->sdisk;

3360 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

3361 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

3362 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

3363 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

3364 i‡(
ªt
 < 0) {

3365 
	`sh™n⁄_log
("%s:Üb®%x may bêdisˇrded. Ju° ign‹êô.\n", 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

3366 
ªq
->
°©e
 = 
REQ_DONE
;

3367 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

3370 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

3371 
ªq
->
£q_num
 = 
sb
->seq_num;

3374 
ªq
->
_ecc
 = 0;

3375 
ªq
->
_mëad©a
 = 0;

3376 
	`add_ªque°_queue_èû
(
sdev
, 
ªq
, 1);

3378 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

3379 
	}
}

3381 
	$mod_gc_timî
(
sh™n⁄_dev
 *
sdev
, 
expúes
)

3383 i‡(
sdev
->
sdisk
.
exô
 == 0)

3384 
	`sh™n⁄_mod_timî
(&
sdev
->
gc_timî
, 
expúes
);

3385 
	}
}

3387 
	$sh™n⁄_de„r_timî
(
sh™n⁄_dev
 *
sdev
, 
expúes
)

3389 
	`mod_gc_timî
(
sdev
, 
	`gë_jiffõs
(Ë+ 
expúes
);

3390 
sdev
->
gc_èsk_limô
 = sdev->
lun_cou¡
;

3391 
	}
}

3393 
	$åiggî_ª˛aim_waô_c›y_li°
(
sh™n⁄_dev
 *
sdev
)

3395 
	`mod_gc_timî
(
sdev
, 
	`gë_jiffõs
(Ë+ 
	`gë_HZ
());

3396 
	}
}

3398 
	$sh™n⁄_gc_timî_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3400 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
gc_timî_w‹k
);

3402 i‡(
sdev
->
sdisk
.
exô
 || (sdev->
ac˚ss_mode
 =
SHN_MODE_READONLY
) || \

3403 
sdev
->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
))

3406 
	`debugs1
("gc_èsk_limô=%d.\n", 
sdev
->
gc_èsk_limô
);

3407 
	`submô_gc_ªad
(
sdev
, sdev->
gc_èsk_limô
);

3409 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
exåa_ªqs_lock
);

3410 
sdev
->
exåa_ªqs
 = 0;

3411 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
exåa_ªqs_lock
);

3413 i‡((
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
) || \

3414 !
	`sh™n⁄_li°_em±y
(&
sdev
->
waô_c›y
Ë|| sdev->
this_sb
 || \

3415 !
	`sh™n⁄_li°_em±y
(&
sdev
->
îr_blks
Ë|| sdev->
this_îr_sb
) {

3416 i‡(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
gc_timî
))

3417 
	`mod_gc_timî
(
sdev
, 
	`gë_jiffõs
(Ë+ 
	`gë_HZ
()/10);

3418 
sdev
->
gc_èsk_limô
 = (sdev->gc_task_limit + 10) * 2;

3419 i‡(
sdev
->
gc_èsk_limô
 > 10000)

3420 
sdev
->
gc_èsk_limô
 = 10000;

3422 
	}
}

3424 
	$gc_thrŸée_timeout
(
sh™n⁄_timî_li°
 *
timî
)

3426 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
gc_timî
);

3428 
	`sh™n⁄_queue_w‹k
(
sdev
->
gc_timî_wq
, &sdev->
gc_timî_w‹k
);

3429 
	}
}

3431 
	$bÆ™˚_gc_timeout
(
sh™n⁄_timî_li°
 *
timî
)

3433 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
bÆ™˚_gc_timî
);

3435 
	`debugs4
("%s, wakêu∞waô bÆ™˚ g¯evít.\n", 
__func__
);

3436 
	`sh™n⁄_wake_up
(&
sdev
->
waô_pick_evít
);

3438 i‡(!(
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
))

3439 
	`sh™n⁄_mod_timî
(&
sdev
->
bÆ™˚_gc_timî
, 
	`gë_jiffõs
(Ë+ 
BALANCE_GC_TIMEOUT
 * 
	`gë_HZ
());

3440 
	}
}

3442 
	$h™dÀ_waô_pick_ªq
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
)

3444 
	`BUG_ON
(
ªq
->
sbio
 =
NULL
);

3445 
	`sh™n⁄_˛ór_bô
(
sdev
->
mbr
.
sdev_id
, &
ªq
->
sbio
->
waô_dev_pick_mask
);

3446 
	`˛ór_waô_pick_bô
(
ªq
);

3447 
	`sh™n⁄_b¨rõr
();

3448 
	`sh™n⁄_wake_up
(&
sdev
->
waô_pick_evít
);

3449 
	}
}

3452 
ölöe
 
	$check_∂ugout
(
sh™n⁄_dev
 *
sdev
)

3454 i‡(
sdev
->
hŸ_∂uggabÀ
 == 0)

3455 
sdev
->
∂ug_out
 = 0;

3457 
sdev
->
∂ug_out
 = !
	`sh™n⁄_gë_ad≠ãr_°©us
(sdev->
pci_dev
);

3459  
sdev
->
∂ug_out
;

3460 
	}
}

3462 
	#WATCHDOG_SECONDS
 30

	)

3463 
	#BOOT_WATCHDOG_SECONDS
 2

	)

3465 
	$°¨t_w©chdog_timî
(
sh™n⁄_dev
 *
sdev
, 
öãrvÆ
)

3467 
sdev
->
w©chdog_°›
 = 0;

3468 
	`sh™n⁄_b¨rõr
();

3469 
	`sh™n⁄_add_timî
(&
sdev
->
w©chdog_timî
, 
	`gë_jiffõs
(Ë+ 
öãrvÆ
 * 
	`gë_HZ
());

3470 
	}
}

3472 
	$°›_w©chdog_timî
(
sh™n⁄_dev
 *
sdev
)

3474 
sdev
->
w©chdog_°›
 = 1;

3475 
	`sh™n⁄_b¨rõr
();

3476 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
w©chdog_timî
);

3477 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
misc_wq
);

3478 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
w©chdog_timî
);

3479 
	}
}

3481 
	$°¨t_¥öt_œãncy_timî
(
sh™n⁄_disk
 *
sdisk
)

3483 
	`sh™n⁄_mod_timî
(&
sdisk
->
¥öt_œãncy_timî
, 
	`gë_jiffõs
(Ë+ sdisk->
¥öt_œãncy_öãrvÆ
 * 
	`gë_HZ
());

3484 
	}
}

3486 
	$°›_¥öt_œãncy_timî
(
sh™n⁄_disk
 *
sdisk
)

3488 
	`sh™n⁄_dñ_timî_sync
(&
sdisk
->
¥öt_œãncy_timî
);

3489 
	}
}

3491 
ª‰esh_mbr_f‹_sdev_sync
(
sh™n⁄_dev
 *
sdev
);

3493 
	$sh™n⁄_ª‰esh_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3495 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
ª‰esh_w‹k
);

3497 i‡(
sdev
->
ho°_ac˚ss_blocked
)

3498 
	`sh™n⁄_öfo
("%s: ho°_ac˚ss_blocked, skùÅhi†ª‰eshÅask.\n", 
sdev
->
cdev_«me
);

3499 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

3500 
	`ª‰esh_mbr_g5
(
sdev
, 0);

3502 
	`ª‰esh_mbr_f‹_sdev_sync
(
sdev
);

3503 
	}
}

3505 
	#SHANNON_COMMAND_TIMEOUT
 30000

	)

3507 
	s≥ndög_mask
 {

3508 
u32
 
	mu32_mask
[
MAX_MSIX_INTERRUPTS
];

3511 
__h™dÀ_lun£t
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun£t
 *
lun£t
, 
ö_wq
, 
ªad_cq_hód
);

3512 
__h™dÀ_bufq
(
sh™n⁄_dev
 *
sdev
, 
hód_ödex
, 
ªad_cq_hód
);

3513 
__h™dÀ_bufq_ack_öãºu±
(
sh™n⁄_dev
 *
sdev
, 
ªad_cq_hód
);

3514 
	$h™dÀ_≥ndög_comm™d_queue_g5
(
sh™n⁄_dev
 *
sdev
, 
≥ndög_mask
 *pending_mask)

3516 
i
, 
íåy
;

3517 
°¨t
, 
íd
;

3518 
sh™n⁄_lun£t
 *
lun£t
;

3519 
ªåy
, 
max_ªåy_times
 = 5000;

3520 
ve˘‹
;

3521 
œ°_a˘ive_time
, 
cuº_time
;

3523 
íåy
 = 0;É¡ry < 
MAX_MSIX_INTERRUPTS
;Éntry++) {

3524 i‡(
≥ndög_mask
->
u32_mask
[
íåy
] == 0)

3527 i‡(
sdev
->
∂ug_out
)

3531 
ve˘‹
 = 
	`sh™n⁄_pci_gë_msix_ve˘‹
(
sdev
->
msix_d©a
, 
íåy
, sdev->
max_úq_ödex
 + 1);

3532 
	`sh™n⁄_dißbÀ_úq
(
ve˘‹
);

3535 
ªåy
 = 0;

3536 
sdev
->
ö_úq
[
íåy
] && (++
ªåy
 <
max_ªåy_times
))

3537 
	`sh™n⁄_m¶ìp
(1);

3538 i‡(
ªåy
 > 
max_ªåy_times
) {

3539 
	`sh™n⁄_öfo
("%s: waô sdev->ö_úq=%dÅimeout.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
ö_úq
[
íåy
]);

3540 
	`sh™n⁄_íabÀ_úq
(
ve˘‹
);

3548 
sdev
->
u32_ve˘‹s
[
íåy
] = 
	`ªad_øw_ªg_ß„
(sdev, &sdev->
öãºu±_b¨
[entry]);

3550 #ifde‡
SHANNON_USE_WRITE_BUFFER


3551 i‡(
íåy
 =
sdev
->
max_úq_ödex
) {

3552 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

3553 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
öå_big_shi·
[
i
], (*)
≥ndög_mask
)) {

3554 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i]) {

3555 
œ°_a˘ive_time
 = 
sdev
->
cmd_öfo
[
i
][sdev->
bufq_cq_èû
[i] >> 3].last_active_time;

3556 
cuº_time
 = 
	`gë_jiffõs
();

3557 i‡((
œ°_a˘ive_time
 !0Ë&& (
cuº_time
 >Üast_active_time) && \

3558 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë> 
SHANNON_COMMAND_TIMEOUT
) && \

3559 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë< 
SHANNON_COMMAND_TIMEOUT
 * 5)) {

3560 
	`sh™n⁄_Æ¨m
("%s: bufq command mightÅimeout, head_index=%d, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x, "

3562 
sdev
->
sdisk
.
disk_«me
, 
i
, sdev->
bufq_cq_èû
[i], sdev->
bufq_cq_hód
[i], \

3563 
sdev
->
bufq_sq_hód
[
i
], 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time-last_active_time), \

3564 ((
sh™n⁄_cmd
 *)
sdev
->
bufq_sq_addr
[
i
] + (sdev->
bufq_cq_èû
[i] >> 3))->
›code
);

3566 
	`__h™dÀ_bufq
(
sdev
, 
i
, 1);

3567 
	`debugs0
("%s:áfterÑead cq_head, head_index=%d, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x.\n", \

3568 
sdev
->
sdisk
.
disk_«me
, 
i
, sdev->
bufq_cq_èû
[i], sdev->
bufq_cq_hód
[i], sdev->
bufq_sq_hód
[i]);

3573 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i])

3574 
	`__h™dÀ_bufq
(
sdev
, 
i
, 0);

3578 
	`__h™dÀ_bufq_ack_öãºu±
(
sdev
, 1);

3582 
°¨t
 = 
íåy
 * 32;

3583 i‡(
°¨t
 < 
sdev
->
lun£t_cou¡
) {

3584 
íd
 = (
°¨t
 + 32Ë< 
sdev
->
lun£t_cou¡
 ? (start + 32) : sdev->lunset_count;

3585 
i
 = 
°¨t
; i < 
íd
; i++) {

3586 
lun£t
 = &
sdev
->
lun£ts
[
i
];

3587 i‡(
	`sh™n⁄_ã°_bô
(
lun£t
->
ödex
, (*)
≥ndög_mask
)) {

3588 
ªåy
 = 0;

3589 
	`sh™n⁄_©omic_ªad
(&
lun£t
->
ö_wq
Ë&& (++
ªåy
 <
max_ªåy_times
))

3590 
	`sh™n⁄_m¶ìp
(1);

3591 i‡(
ªåy
 > 
max_ªåy_times
) {

3592 
	`sh™n⁄_öfo
("%s: waô f‹Üun£t=%d in_wqÅimeout.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
);

3596 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
sq_hód
) {

3597 
œ°_a˘ive_time
 = 
lun£t
->
cmd_öfo
[lun£t->
cq_èû_tmp
 >> 3].last_active_time;

3598 
cuº_time
 = 
	`gë_jiffõs
();

3599 i‡((
œ°_a˘ive_time
 !0Ë&& (
cuº_time
 >Üast_active_time) && \

3600 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë> 
SHANNON_COMMAND_TIMEOUT
) && \

3601 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë< 
SHANNON_COMMAND_TIMEOUT
 * 5)) {

3602 
	`sh™n⁄_Æ¨m
("%s: command mightÅimeout,Üunset=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, cq_head=0x%x, sq_head=0x%x, "

3604 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
,Üun£t->
cq_hód
,Üun£t->
sq_hód
, \

3605 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time -Üast_active_time), \

3606 ((
sh™n⁄_cmd
 *)
lun£t
->
sq_addr
 + (lun£t->
cq_èû_tmp
 >> 3))->
›code
);

3608 
	`__h™dÀ_lun£t
(
sdev
, 
lun£t
, 0, 1);

3609 
	`debugs0
("%s:áfterÑead cq_head,Üunset=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, cq_head=0x%x, sq_head=0x%x.\n", \

3610 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
,Üun£t->
cq_hód
,Üun£t->
sq_hód
);

3615 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
sq_hód
) {

3616 
	`sh™n⁄_©omic_öc
(&
lun£t
->
ö_wq
);

3617 i‡(
	`sh™n⁄_queue_w‹k
(
sdev
->
h™dÀ_lun_wq
[
i
 % sdev->
sh™n⁄_ƒ_wq
], &
lun£t
->
comp_w‹k
) == 0)

3618 
	`sh™n⁄_©omic_dec
(&
lun£t
->
ö_wq
);

3623 
sdev
->
u32_ve˘‹s
[
íåy
] = 0;

3624 
	`sh™n⁄_b¨rõr
();

3625 
	`wrôe_ªg_ß„
(
sdev
, 0, &sdev->
öãºu±_b¨
[
íåy
]);

3626 
	`sh™n⁄_íabÀ_úq
(
ve˘‹
);

3630 
	}
}

3632 
u32
 
ª≥©_ªad_cq_hód
(
sh™n⁄_dev
 *
sdev
, c⁄° vﬁ©ûê
__iomem
 *
addr
);

3633 
ªad_bufq_öãºu±_ve˘‹
(
sh™n⁄_dev
 *
sdev
);

3634 
ªad_Ÿhî_öãºu±_ve˘‹
(
sh™n⁄_dev
 *
sdev
);

3635 
sh™n⁄_˛ór_öãºu±
(
sh™n⁄_dev
 *
sdev
);

3636 
	$h™dÀ_≥ndög_comm™d_queue
(
sh™n⁄_dev
 *
sdev
, 
≥ndög_mask
 *pending_mask)

3638 
i
;

3639 
sh™n⁄_lun£t
 *
lun£t
;

3640 
ªåy
, 
max_ªåy_times
 = 5000;

3641 
œ°_a˘ive_time
, 
cuº_time
;

3643 i‡(!
	`__sh™n⁄_bôm≠_weight
(
≥ndög_mask
, (*pending_mask) * 8))

3646 i‡(
sdev
->
∂ug_out
)

3649 
	`sh™n⁄_dißbÀ_úq
(
	`gë_pci_úq_num
(
sdev
->
pci_dev
));

3651 
ªåy
 = 0;

3652 
sdev
->
ö_úq
[0] && (++
ªåy
 <
max_ªåy_times
))

3653 
	`sh™n⁄_m¶ìp
(1);

3654 i‡(
ªåy
 > 
max_ªåy_times
) {

3655 
	`sh™n⁄_öfo
("%s: waô sdev->ö_úq=%dÅimeout.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
ö_úq
[0]);

3656 
	`sh™n⁄_íabÀ_úq
(
	`gë_pci_úq_num
(
sdev
->
pci_dev
));

3660 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

3661 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

3663 #ifde‡
SHANNON_USE_WRITE_BUFFER


3664 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

3665 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
öå_big_shi·
[
i
], (*)
≥ndög_mask
)) {

3666 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i]) {

3667 
œ°_a˘ive_time
 = 
sdev
->
cmd_öfo
[
i
][sdev->
bufq_cq_èû
[i] >> 3].last_active_time;

3668 
cuº_time
 = 
	`gë_jiffõs
();

3669 i‡((
œ°_a˘ive_time
 !0Ë&& (
cuº_time
 >Üast_active_time) && \

3670 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë> 
SHANNON_COMMAND_TIMEOUT
) && \

3671 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë< 
SHANNON_COMMAND_TIMEOUT
) * 5) {

3672 
	`sh™n⁄_Æ¨m
("%s: bufq command mightÅimeout, head_index=%d, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x, "

3674 
sdev
->
sdisk
.
disk_«me
, 
i
, sdev->
bufq_cq_èû
[i], sdev->
bufq_cq_hód
[i], sdev->
bufq_sq_hód
[i], \

3675 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time-last_active_time), \

3676 ((
sh™n⁄_cmd
 *)
sdev
->
bufq_sq_addr
[
i
] + (sdev->
bufq_cq_èû
[i] >> 3))->
›code
);

3677 
	`__h™dÀ_bufq
(
sdev
, 
i
, 1);

3678 
	`debugs0
("%s:áfterÑead cq_head, head_index=%d, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x.\n", \

3679 
sdev
->
sdisk
.
disk_«me
, 
i
, sdev->
bufq_cq_èû
[i], sdev->
bufq_cq_hód
[i], sdev->
bufq_sq_hód
[i]);

3684 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i])

3685 
	`__h™dÀ_bufq
(
sdev
, 
i
, 0);

3688 
	`__h™dÀ_bufq_ack_öãºu±
(
sdev
, 1);

3691 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

3692 
lun£t
 = &
sdev
->
lun£ts
[
i
];

3693 i‡(
	`sh™n⁄_ã°_bô
(
lun£t
->
ödex
, (*)
≥ndög_mask
)) {

3694 
ªåy
 = 0;

3695 
	`sh™n⁄_©omic_ªad
(&
lun£t
->
ö_wq
Ë&& (++
ªåy
 <
max_ªåy_times
))

3696 
	`sh™n⁄_m¶ìp
(1);

3697 i‡(
ªåy
 > 
max_ªåy_times
) {

3698 
	`sh™n⁄_öfo
("%s: waô f‹Üun£t=%d in_wqÅimeout.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
);

3702 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
sq_hód
) {

3703 
œ°_a˘ive_time
 = 
lun£t
->
cmd_öfo
[lun£t->
cq_èû_tmp
 >> 3].last_active_time;

3704 
cuº_time
 = 
	`gë_jiffõs
();

3705 i‡((
œ°_a˘ive_time
 !0Ë&& (
cuº_time
 >Üast_active_time) && \

3706 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë> 
SHANNON_COMMAND_TIMEOUT
) && \

3707 (
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë< 
SHANNON_COMMAND_TIMEOUT
 * 5)) {

3708 
	`sh™n⁄_Æ¨m
("%s: command mightÅimeout,Üunset=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, cq_head=0x%x, sq_head=0x%x, "

3710 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
,Üun£t->
cq_hód
,Üun£t->
sq_hód
, \

3711 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time -Üast_active_time), \

3712 ((
sh™n⁄_cmd
 *)
lun£t
->
sq_addr
 + (lun£t->
cq_èû_tmp
 >> 3))->
›code
);

3714 
	`__h™dÀ_lun£t
(
sdev
, 
lun£t
, 0, 1);

3715 
	`debugs0
("%s:áfterÑead cq_head,Üunset=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, cq_head=0x%x, sq_head=0x%x.\n", \

3716 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
,Üun£t->
cq_hód
,Üun£t->
sq_hód
);

3721 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
sq_hód
) {

3722 
	`sh™n⁄_©omic_öc
(&
lun£t
->
ö_wq
);

3723 i‡(
	`sh™n⁄_queue_w‹k
(
sdev
->
h™dÀ_lun_wq
[
i
 % sdev->
sh™n⁄_ƒ_wq
], &
lun£t
->
comp_w‹k
) == 0)

3724 
	`sh™n⁄_©omic_dec
(&
lun£t
->
ö_wq
);

3728 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

3729 
	`sh™n⁄_b¨rõr
();

3730 
	`wrôe_ªg_ß„
(
sdev
, 0, &sdev->
öãºu±_b¨
[0]);

3731 
	`sh™n⁄_íabÀ_úq
(
	`gë_pci_úq_num
(
sdev
->
pci_dev
));

3734 
	}
}

3736 
	$check_≥ndög_comm™d_queue
(
sh™n⁄_dev
 *
sdev
)

3738 
i
, 
skù
;

3739 
sh™n⁄_lun£t
 *
lun£t
;

3740 
≥ndög_mask
Öending_mask;

3741 
__u32
 
cq_èû
, 
hw_cq_hód
, 
hw_sq_hód
;

3742 
œ°_a˘ive_time
, 
cuº_time
;

3744 
	`sh™n⁄_mem£t
(&
≥ndög_mask
, 0, (pending_mask));

3747 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

3748 
lun£t
 = &
sdev
->
lun£ts
[
i
];

3749 
skù
 = 0;

3750 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
sq_hód
) {

3751 
cq_èû
 = 
lun£t
->
cq_èû_tmp
;

3752 
œ°_a˘ive_time
 = 
lun£t
->
cmd_öfo
[
cq_èû
 >> 3].last_active_time;

3753 i‡(
œ°_a˘ive_time
 == 0)

3755 
cuº_time
 = 
	`gë_jiffõs
();

3756 i‡(
œ°_a˘ive_time
 >
cuº_time
)

3758 i‡(
	`u∆ikñy
(
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë>
SHANNON_COMMAND_TIMEOUT
)) {

3759 i‡((
cq_èû
 !
lun£t
->
cq_èû_tmp
Ë|| (
œ°_a˘ive_time
 !lun£t->
cmd_öfo
[cq_tail >> 3].last_active_time) || \

3760 (
lun£t
->
cq_èû_tmp
 =lun£t->
sq_hód
))

3763 
hw_cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &
lun£t
->
lun_b¨
->
cq_hód
);

3764 i‡(
	`u∆ikñy
(
hw_cq_hód
 > 
QUEUE_SIZE
)) {

3765 i‡(
sdev
->
∂ug_out
)

3767 
hw_cq_hód
 = 
	`ª≥©_ªad_cq_hód
(
sdev
, &
lun£t
->
lun_b¨
->
cq_hód
);

3768 i‡(
hw_cq_hód
 > 
QUEUE_SIZE
)

3771 i‡(
lun£t
->
cq_èû_tmp
 =
hw_cq_hód
)

3772 
skù
 = 1;

3774 
hw_sq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &
lun£t
->
lun_b¨
->
sq_hód
);

3775 i‡(
	`u∆ikñy
(
hw_sq_hód
 !
lun£t
->
sq_hw_hód
)) {

3776 
	`sh™n⁄_•ö_lock_bh
(&
lun£t
->
lun_b¨_lock
);

3777 
hw_sq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &
lun£t
->
lun_b¨
->
sq_hód
);

3778 i‡(
hw_sq_hód
 !
lun£t
->
sq_hw_hód
) {

3779 
skù
 = 1;

3780 
	`sh™n⁄_Æ¨m
("%s:Üunset=%d, hw_sq_head=0x%x,Ñead from hardware is 0x%x.\n", \

3781 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
sq_hw_hód
, 
hw_sq_hód
);

3782 } i‡(
hw_cq_hód
 =
hw_sq_hód
)

3783 
skù
 = 1;

3784 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
lun_b¨_lock
);

3787 i‡(
	`likñy
(
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë<
SHANNON_COMMAND_TIMEOUT
 * 5)) {

3788 
	`sh™n⁄_Æ¨m
("%s:Üunset=%d, cq_tail_tmp=0x%x, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x, hw_cq_head=0x%x,Üast_active_time=%lu, "

3789 "‹igöÆ cq_èû=0x%x,Üa°_a˘ive_time=%lu, cuº_time=%lu,Åimeout=%ums.\n", 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
, \

3790 
lun£t
->
cq_èû_tmp
,Üun£t->
cq_èû
,Üun£t->
cq_hód
,Üun£t->
sq_hód
, 
hw_cq_hód
,Üun£t->
cmd_öfo
[cq_èû >> 3].
œ°_a˘ive_time
, \

3791 
cq_èû
, 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time-last_active_time));

3793 i‡(
skù
)

3795 
	`sh™n⁄_£t_bô
(
lun£t
->
ödex
, (*)&
≥ndög_mask
);

3800 #ifde‡
SHANNON_USE_WRITE_BUFFER


3802 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

3803 
skù
 = 0;

3804 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i]) {

3805 
cq_èû
 = 
sdev
->
bufq_cq_èû
[
i
];

3806 
œ°_a˘ive_time
 = 
sdev
->
cmd_öfo
[
i
][
cq_èû
 >> 3].last_active_time;

3807 i‡(
œ°_a˘ive_time
 == 0)

3809 
cuº_time
 = 
	`gë_jiffõs
();

3810 i‡(
œ°_a˘ive_time
 >
cuº_time
)

3812 i‡(
	`u∆ikñy
(
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë>
SHANNON_COMMAND_TIMEOUT
)) {

3813 i‡((
cq_èû
 !
sdev
->
bufq_cq_èû
[
i
]Ë|| (
œ°_a˘ive_time
 !sdev->
cmd_öfo
[i][cq_tail >> 3].last_active_time) || \

3814 (
sdev
->
bufq_cq_èû
[
i
] =sdev->
bufq_sq_hód
[i]))

3817 
hw_cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
bufq_b¨
[
i
]->
cq_hód
);

3818 i‡(
	`u∆ikñy
(
hw_cq_hód
 > 
QUEUE_SIZE
)) {

3819 i‡(
sdev
->
∂ug_out
)

3821 
hw_cq_hód
 = 
	`ª≥©_ªad_cq_hód
(
sdev
, &sdev->
bufq_b¨
[
i
]->
cq_hód
);

3822 i‡(
hw_cq_hód
 > 
QUEUE_SIZE
)

3825 i‡(
sdev
->
bufq_cq_èû
[
i
] =
hw_cq_hód
)

3826 
skù
 = 1;

3828 
hw_sq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
bufq_b¨
[
i
]->
sq_hód
);

3829 i‡(
	`u∆ikñy
(
hw_sq_hód
 !
sdev
->
bufq_sq_hw_hód
[
i
])) {

3830 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
bufq_b¨_lock
[
i
]);

3831 
hw_sq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
bufq_b¨
[
i
]->
sq_hód
);

3832 i‡(
hw_sq_hód
 !
sdev
->
bufq_sq_hw_hód
[
i
]) {

3833 
skù
 = 1;

3834 
	`sh™n⁄_Æ¨m
("%s: bufq=%d, hw_sq_head=0x%x,Ñead from hardware is 0x%x.\n", \

3835 
sdev
->
sdisk
.
disk_«me
, 
i
, sdev->
bufq_sq_hw_hód
, 
hw_sq_hód
);

3836 } i‡(
hw_cq_hód
 =
hw_sq_hód
)

3837 
skù
 = 1;

3838 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
bufq_b¨_lock
[
i
]);

3841 i‡(
	`likñy
(
	`sh™n⁄_jiffõs_to_m£cs
(
cuº_time
 - 
œ°_a˘ive_time
Ë<
SHANNON_COMMAND_TIMEOUT
 * 5)) {

3842 
	`sh™n⁄_Æ¨m
("%s: head_index=%d, cq_tail=0x%x, cq_head=0x%x, sq_head=0x%x, hw_cq_head=0x%x,Üast_active_time=%lu, "

3843 "‹igöÆ cq_èû=0x%x,Üa°_a˘ive_time=%lu, cuº_time=%lu,Åimeout=%ums.\n", 
sdev
->
sdisk
.
disk_«me
, 
i
, \

3844 
sdev
->
bufq_cq_èû
[
i
], sdev->
bufq_cq_hód
[i], sdev->
bufq_sq_hód
[i], 
hw_cq_hód
, sdev->
cmd_öfo
[i][
cq_èû
 >> 3].
œ°_a˘ive_time
, \

3845 
cq_èû
, 
œ°_a˘ive_time
, 
cuº_time
, 
	`sh™n⁄_jiffõs_to_m£cs
(curr_time-last_active_time));

3847 i‡(
skù
)

3849 
	`sh™n⁄_£t_bô
(
sdev
->
öå_big_shi·
[
i
], (*)&
≥ndög_mask
);

3855 i‡(!
	`__sh™n⁄_bôm≠_weight
(&
≥ndög_mask
, (pending_mask) * 8))

3858 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

3859 
	`h™dÀ_≥ndög_comm™d_queue_g5
(
sdev
, &
≥ndög_mask
);

3861 
	`h™dÀ_≥ndög_comm™d_queue
(
sdev
, &
≥ndög_mask
);

3864 
	}
}

3866 
	$sh™n⁄_w©chdog_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

3868 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
w©chdog_w‹k
);

3869 
ofÊöe
 = 0, 
ö_Êight
 = 0;

3870 
__u32
 
£u
;

3872 i‡(
sdev
->
sdisk
.
exô
)

3875 i‡(
sdev
->
öô_d⁄e
 < 
STAGE9_DONE
) {

3877 
	`check_∂ugout
(
sdev
);

3878 i‡(
sdev
->
∂ug_out
)

3879 
	`sh™n⁄_scheduÀ_w‹k
(&
sdev
->
∂ugout_w‹k
);

3881 
	`°¨t_w©chdog_timî
(
sdev
, 
BOOT_WATCHDOG_SECONDS
);

3885 
ö_Êight
 = 
	`sh™n⁄_bio_ö_Êight
(
sdev
);

3887 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

3888 i‡(
sdev
->
ãm≥øtuª_öt
 >sdev->
ãm≥øtuª_w¨nög_thªshﬁd
)

3889 
	`sh™n⁄_w¨n
("%s: c⁄åﬁÀ∏ãm≥øtuª: %d,ÖÀa£ in¸ó£ you∏BIOS f™ s≥ed sëtög.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
ãm≥øtuª_öt
);

3892 i‡((!
	`sh™n⁄_dev_is_g5_ffß
(
sdev
)Ë&& ((sdev->
°©e
 & 
SHN_STATE_MASK
Ë!
SHN_STATE_RECONFIG
)) {

3893 
£u
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
SH_SEU_OFFSET
);

3894 i‡(
£u
 == ~0) {

3895 
	`sh™n⁄_îr
("£u=0x%x, së sèãÅÿîr‹!\n", 
£u
);

3896 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

3899 i‡(
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
) {

3900 
	`sh™n⁄_îr
("sdev->°©e=0x%lx.\n", 
sdev
->
°©e
);

3901 
ofÊöe
 = 1;

3902 
EXIT
;

3904 i‡((!
	`sh™n⁄_dev_is_g5_ffß
(
sdev
)Ë&& (sdev->
ªc⁄fig_suµ‹t
 =0Ë&& 
	`ªad_£u_öfo
(sdev)) {

3905 
	`sh™n⁄_îr
("This card doesn't support seuÑeconfig! Please update you firmware.\n");

3906 
EXIT
;

3909 
	`check_≥ndög_comm™d_queue
(
sdev
);

3911 
EXIT
:

3912 i‡(
ofÊöe
)

3913 
	`com∂ëe_≥ndög_ªque°
(
sdev
);

3915 i‡((
ofÊöe
 =0Ë&& (
sdev
->
sdisk
.
exô
 =0Ë&& (sdev->
w©chdog_°›
 == 0))

3916 
	`°¨t_w©chdog_timî
(
sdev
, 
WATCHDOG_SECONDS
);

3918 
ö_Êight
 +
	`sh™n⁄_bio_ö_Êight
(
sdev
);

3919 i‡((
sdev
->
sdisk
.
exô
 =0Ë&& (
ö_Êight
 == 0))

3920 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
pm_qos_w‹k
);

3921 
	}
}

3923 
	$w©chdog_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
)

3925 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
w©chdog_timî
);

3927 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
w©chdog_w‹k
);

3928 
	}
}

3930 
	$__¥öt_œãncy_fun˘i⁄
(
sh™n⁄_disk
 *
sdisk
)

3933 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
) {

3934 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
ªc‹d_œãncy_lock
);

3935 
	`sh™n⁄_öfo
("%s: interval=%ds max_bio_latency R %d ms, W %d ms\n",

3936 
sdisk
->
disk_«me
, sdisk->
¥öt_œãncy_öãrvÆ
,

3937 
sdisk
->
max_bio_ªad_œãncy
, sdisk->
max_bio_wrôe_œãncy
);

3938 
sdisk
->
max_bio_ªad_œãncy
 = 0;

3939 
sdisk
->
max_bio_wrôe_œãncy
 = 0;

3940 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
ªc‹d_œãncy_lock
);

3941 i‡(
sdisk
->
©èched
 =
SHN_DISK_ATTACHED
)

3942 
	`°¨t_¥öt_œãncy_timî
(
sdisk
);

3944 
	}
}

3946 
	$ns_¥öt_œãncy_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
)

3948 
sh™n⁄_dev
 *
ns
 = 
	`‰om_timî
“s, 
timî
, 
sdisk
.
¥öt_œãncy_timî
);

3949 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

3951 
	`__¥öt_œãncy_fun˘i⁄
(
sdisk
);

3952 
	}
}

3954 
	$¥öt_œãncy_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
)

3956 
sh™n⁄_dev
 *
sdev
 = 
	`‰om_timî
(sdev, 
timî
, 
sdisk
.
¥öt_œãncy_timî
);

3957 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

3959 
	`__¥öt_œãncy_fun˘i⁄
(
sdisk
);

3960 
	}
}

3962 
	$sh™n⁄_submô_Æig√d_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
)

3964 
logicbs
, 
i
, 
ªt
;

3965 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

3966 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

3967 
sh™n⁄_sb
 *
sb
 = 
NULL
;

3968 
sh™n⁄_sg_li°_t
 *
sg
;

3969 
u64
 
°¨t_£˘‹
;

3970 
lun_logicbs
 = 0, 
ö_ˇche_logicbs
 = 0;

3972 
logicbs
 = 
sbio
->
bio_size
 >> 
sdev
->
logicb_shi·
;

3974 
sbio
->
logicbs
 =Üogicbs;

3975 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
logicbs
);

3976 
sbio
->
logicbs
 =Üogicbs;

3978 i‡(
	`sh™n⁄_dma_m≠_sg
(
sdev
->
pci_dev
, 
sbio
->
sg
, sbio->
u£d_sg_cou¡
, sbio->
dma_dú
) == 0) {

3979 
	`sh™n⁄_w¨n
("dma_map_sg failed!\n");

3980 
	`sh™n⁄_dump_°ack
();

3981  -
ENOMEM
;

3984 i‡(!
	`sh™n⁄_pm_qos_is_ªquúed
(
SHANNON_PM_QOS_CPU_DMA_LATENCY
)) {

3985 
	`sh™n⁄_pm_qos_upd©e_ªquúemít
(&
sdev
->
pm_qos_l
, 
SHANNON_PM_QOS_CPU_DMA_LATENCY
, sdev->
sdisk
.
disk_«me
, 
sh™n⁄_pm_qos_vÆue
);

3988 i‡(
	`sh™n⁄_timî_≥ndög
(&
sdev
->
gc_timî
))

3989 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 10);

3991 
°¨t_£˘‹
 = 
sbio
->start_sector;

3992 
sg
 = 
sbio
->sg;

3993 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
) {

3994 
lun_pba
Üun_pba;

3995 
œ°_lun
 = -1;

3996 
fú°_size
, 
œ°_size
 = 0, 
ö_ˇche
;

3997 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


3998 
	`sh™n⁄_©omic_öc
(&
sdev
->
ªad_bios
);

4000 
sbio
->
ˇŒback
 = 
fs_bio_ªad_ˇŒback
;

4001 
sbio
->
d©a
 = 
sdev
;

4002 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

4004 
i
 = 0; i < 
logicbs
; i++) {

4005 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

4006 #ifde‡
CONFIG_SHANNON_DEBUG


4007 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

4009 
ªq
->
£ndî
 = 
FROM_HOST
;

4010 
ªq
->
sbio
 = sbio;

4011 
	`£t_ªq_ödex
(
ªq
, 
i
);

4012 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4013 
ªq
->
›code
 = 
sh_cmd_ªad
;

4014 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

4015 
ªq
->
lba
 = (
°¨t_£˘‹
 >> (
sdev
->
logicb_shi·
 - 9)Ë+ 
i
;

4016 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4017 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

4018 
ªq
->
dma_addªss
 = 
	`sh™n⁄_sg_dma_addªss
(
sg
);

4019 
fú°_size
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

4020 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

4021 i‡(()
ªq
->
vút_addr
 & (ªq->
Àngth
 - 1)) {

4022 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
sg
);

4023 
ªq
->
dma_addªss_2
 = 
	`sh™n⁄_sg_dma_addªss
(
sg
);

4024 
œ°_size
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

4025 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

4026 
	`BUG_ON
((
fú°_size
 + 
œ°_size
Ë!
sdev
->
logicb_size
);

4028 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4029 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, &
ö_ˇche
, 
sdisk
);

4030 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4031 i‡(
ªt
 < 0) {

4032 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0, 
fú°_size
);

4033 i‡(
ªq
->
vút_addr_2
)

4034 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr_2
, 0, 
œ°_size
);

4035 
ªq
->
°©e
 = 
REQ_DONE
;

4036 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

4038 } i‡(
ö_ˇche
) {

4039 i‡(
	`add_ªq_to_¥e„tch_li°
(
sdisk
, 
ªq
)) {

4040 
ö_ˇche_logicbs
++;

4044 
	`ö¸ó£_ˇche_miss
(
sdisk
, 
ªq
);

4045 
ªq
->
pba
.
lun_pba
 =Üun_pba.lun_pba;

4046 
ªq
->
pba
.
lun
 = 
lun_pba
.lun;

4047 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

4048 
ªq
->
£q_num
 = 
sb
->seq_num;

4049 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

4052 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
lun_pba
.lun], 
ªq
);

4053 i‡((
œ°_lun
 >0Ë&& (œ°_lu¿!
lun_pba
.
lun
)) {

4054 
	`lun£t_pick_ªque°
(
sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

4055 
lun_logicbs
 = 0;

4057 
œ°_lun
 = 
lun_pba
.
lun
;

4058 
lun_logicbs
++;

4060 i‡(
œ°_lun
 >= 0)

4061 
	`lun£t_pick_ªque°
(
sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

4062 i‡(
ö_ˇche_logicbs
)

4063 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
¥e„tch_thªad
);

4064 } i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

4065 
sh™n⁄_li°_hód
 
wrôe_li°
;

4066 
fûl_hód
 = 0;

4067 
¥i‹ôy
 = ((
sbio
->
logicbs
 < 4Ë&& 
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[2])) ? 2 : 1;

4068 
°ack_size
;

4070 
°ack_size
 = (()&°ack_sizeË& (
THREAD_SIZE
-1);

4071 
°ack_size
 = 
THREAD_SIZE
 - stack_size;

4073 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


4074 
	`sh™n⁄_©omic_öc
(&
sdev
->
wrôe_bios
);

4076 
sbio
->
ˇŒback
 = 
fs_bio_wrôe_ˇŒback
;

4077 
sbio
->
d©a
 = 
sdev
;

4078 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

4080 i‡(
sdev
->
‰ì_blk˙t
 < 
GC_THRESHOLD_N3
) {

4081 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
block_ho°_wr
, (sdev->
sdisk
.
exô
 || (sdev->
‰ì_blk˙t
 >
GC_THRESHOLD_N3
)));

4083 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë>
REQ_QUEUE_THRESHOLD_H
))

4084 
sdev
->
ö_block_°©e
 = 2;

4085 i‡(
sdev
->
ö_block_°©e
 == 2) {

4086 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
limô_ªq_queue
[1], \

4087 (
sdev
->
sdisk
.
exô
 || (sdev->
ö_block_°©e
 < 2Ë|| (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
)));

4089 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
)) {

4090 
	`sh™n⁄_w¨n
("the disk isábsent!\n");

4091 
	`sh™n⁄_dma_unm≠_sg
(
sdev
->
pci_dev
, 
sbio
->
sg
, sbio->
u£d_sg_cou¡
, sbio->
dma_dú
);

4092  -
EIO
;

4094 #ifde‡
CONFIG_SHANNON_STATISTICS


4095 
	`sh™n⁄_©omic_add
(
logicbs
, &
sdev
->
‰om_ho°
);

4097 
	`SHANNON_INIT_LIST_HEAD
(&
wrôe_li°
);

4098 
i
 = 0; i < 
logicbs
; i++) {

4099 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

4100 #ifde‡
CONFIG_SHANNON_DEBUG


4101 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

4103 
ªq
->
£ndî
 = 
FROM_HOST
;

4104 
ªq
->
sbio
 = sbio;

4105 
	`£t_ªq_ödex
(
ªq
, 
i
);

4106 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

4107 
ªq
->
›code
 = 
sh_cmd_wrôe
;

4108 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

4109 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

4110 
ªq
->
lba
 = (
°¨t_£˘‹
 >> (
sdev
->
logicb_shi·
 - 9)Ë+ 
i
;

4111 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4112 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

4113 
ªq
->
dma_addªss
 = 
	`sh™n⁄_sg_dma_addªss
(
sg
);

4114 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

4115 i‡(()
ªq
->
vút_addr
 & (ªq->
Àngth
 - 1)) {

4116 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
sg
);

4117 
ªq
->
dma_addªss_2
 = 
	`sh™n⁄_sg_dma_addªss
(
sg
);

4118 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

4120 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4121 
	`ho°_gë_hód_™d_£t_pba_èbÀ
(
sdev
, 
sdisk
, 
sbio
->
bio
, 
ªq
);

4122 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

4123 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

4124 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
wrôe_li°
);

4125 i‡((
ªq
->
hód
 & 
HEAD_INDEX_MASK
Ë=
HOT_INDEX
)

4126 
fûl_hód
 |1 << 
HOT_INDEX
;

4128 #ifde‡
CONFIG_SINGLE_HEAD_VERIFY


4129 
	`BUG_ON
(!
sdev
->
u£_duÆ_hód
);

4131 
fûl_hód
 |1 << 
COLD_INDEX
;

4134 i‡(
sdev
->
ovîœp_wrôe
) {

4135 i‡(((
fûl_hód
 & (1 << 
HOT_INDEX
)Ë=fûl_hódË&& 
sbio
->
logicbs
 == 2)

4136 
sbio
->
ovîœp
 = 1;

4138 
	`add_wrôe_li°_to_ªque°_queue_èû
(
sdev
, &
wrôe_li°
, 
logicbs
, 
¥i‹ôy
);

4139 
	`sh™n⁄_©omic_add
(
logicbs
, &
sdev
->
ö_Êight_wrôes
);

4140 i‡(
°ack_size
 > 4096)

4141 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4143 
	`sh™n⁄_pick_ªque°
(
sdev
, 
logicbs
);

4144 
	`bÆ™˚_gc
(
sdev
, 
logicbs
);

4145 
	`mod_fûl_chunk_timî
(
sdev
, 
fûl_hód
);

4148 i‡((
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
Ë|| sdev->
îr_blk˙t
)

4149 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 4);

4152 
	}
}

4154 
	~"sh™n⁄_512.c
"

4156 
	$upd©e_d©a_ö_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
)

4158 
sh™n⁄_sm¨t
 *
sm¨t
 = (sh™n⁄_sm¨à*)
sdev
->
dummy_∑ge
;

4165 i‡((
sm¨t
->
dummy_cou¡
 % 63) == 0) {

4166 
sm¨t
->
øndom_num
 = 
	`gë_jiffõs
() & 0xffffffff;

4167 i‡(
sm¨t
->
øndom_num
 == 0)

4168 
sm¨t
->
øndom_num
 = 1;

4170 
sm¨t
->
øndom_num
 = smart->random_num << 1;

4171 
sm¨t
->
dummy_cou¡
++;

4173 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

4174 
	`sh™n⁄_mem_wrôeq
(
sdev
->
powî_⁄_£c⁄ds
, &
sm¨t
->power_on_seconds);

4175 
	`sh™n⁄_mem_wrôeq
(
sdev
->
powî_cy˛e_cou¡
, &
sm¨t
->power_cycle_count);

4176 
	`sh™n⁄_mem_wrôeq
(
sdev
->
ho°_wrôe_£˘‹s
, &
sm¨t
->host_write_sectors);

4177 
	`sh™n⁄_mem_wrôeq
(
sdev
->
tŸÆ_wrôe_£˘‹s
, &
sm¨t
->total_write_sectors);

4178 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

4179 
	`sh™n⁄_mem_wrôeq
(
sdev
->
ho°_ªad_£˘‹s
, &
sm¨t
->host_read_sectors);

4180 
	`sh™n⁄_mem_wrôeq
(
sdev
->
£quí˚_numbî
, &
sm¨t
->sequence_number);

4181 
	`sh™n⁄_mem_wrôeq
(
MAGICBEAN
, &
sm¨t
->
ˇ∑côy
);

4182 
	`sh™n⁄_mem_wrôñ
(
MAGICBEAN
, &
sm¨t
->
ãm≥øtuª_öt
);

4183 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

4184 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_öt_max
, &
sm¨t
->temperature_int_max);

4185 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_bﬂrd_max
, &
sm¨t
->temperature_board_max);

4186 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ãm≥øtuª_Êash_max
, &
sm¨t
->temperature_flash_max);

4187 
	`sh™n⁄_mem_wrôñ
(
sdev
->
vﬁège_öt_max
, &
sm¨t
->voltage_int_max);

4188 
	`sh™n⁄_mem_wrôñ
(
sdev
->
vﬁège_aux_max
, &
sm¨t
->voltage_aux_max);

4189 
	`sh™n⁄_mem_wrôñ
(
sdev
->
£u_¸c_îr‹
 + sdev->
£u_¸c_îr‹_hi°‹y
, &
sm¨t
->seu_crc_error_history);

4190 
	`sh™n⁄_mem_wrôñ
(
sdev
->
£u_ecc_îr‹
 + sdev->
£u_ecc_îr‹_hi°‹y
, &
sm¨t
->seu_ecc_error_history);

4191 
	`sh™n⁄_mem_wrôñ
(
sdev
->
gc_sbs
, &
sm¨t
->gc_sbs);

4192 
	`sh™n⁄_mem_wrôñ
(
sdev
->
îr_ªcovîed_sbs
, &
sm¨t
->err_recovered_sbs);

4193 
	`sh™n⁄_mem_wrôñ
(
sdev
->
wl_sbs
, &
sm¨t
->wl_sbs);

4194 
	`sh™n⁄_mem_wrôñ
(
sdev
->
d©a_ªã¡i⁄_sbs
, &
sm¨t
->data_retention_sbs);

4195 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ªad_di°urb_sbs
, &
sm¨t
->read_disturb_sbs);

4196 
	`sh™n⁄_mem_wrôñ
(
sdev
->
îa£_bÆ™˚_sbs
, &
sm¨t
->erase_balance_sbs);

4197 
	`sh™n⁄_mem_wrôñ
(
sdev
->
ecc_Áûuª_sbs
, &
sm¨t
->ecc_failure_sbs);

4198 
	}
}

4200 
sh™n⁄_gídisk_t
 *
	$gë_gídisk_‰om_sdev
(
sh™n⁄_dev
 *
sdev
)

4202  
sdev
->
sdisk
.
gd
;

4203 
	}
}

4205 
	$gë_logicb_size
(
sh™n⁄_dev
 *
sdev
)

4207  
sdev
->
logicb_size
;

4208 
	}
}

4210 
	$gë_logicb_shi·
(
sh™n⁄_dev
 *
sdev
)

4212  
sdev
->
logicb_shi·
;

4213 
	}
}

4215 
sh™n⁄_disk
 *
	$gë_sh™n⁄_disk_‰om_sdev
(
sh™n⁄_dev
 *
sdev
)

4217  &
sdev
->
sdisk
;

4218 
	}
}

4220 
	$sh™n⁄_check_avaûabûôy
(
sh™n⁄_dev
 *
sdev
)

4222 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
))

4225 i‡(
	`u∆ikñy
(
sdev
->
ho°_ac˚ss_blocked
))

4228 i‡(
	`u∆ikñy
(
sdev
->
°©e
 & 
SHN_STATE_ERROR_BIT
))

4231 i‡(
	`u∆ikñy
((
sdev
->
öô_d⁄e
 >
STAGE9_DONE
Ë&& (sdev->
°©e
 & 
SHN_STATE_DETACHED
)))

4234 i‡(
	`u∆ikñy
(
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
Ë> 
MAX_IN_GC_LOGICBS
)) {

4235 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
)

4236 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 10);

4238 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
Ë> 
MAX_IN_GC_LOGICBS
)

4239 
	`sh™n⁄_m¶ìp
(1);

4242 i‡(
	`u∆ikñy
(
sdev
->
big_lock
))

4243 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
big_lock_evít
, sdev->
big_lock
 == 0);

4246 
	}
}

4248 
	$sh™n⁄_disk_ªad⁄ly
(
sh™n⁄_dev
 *
sdev
)

4250 i‡(
	`u∆ikñy
(
sdev
->
ac˚ss_mode
 =
SHN_MODE_READONLY
))

4254 
	}
}

4257 
	$__sh™n⁄_submô_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
)

4259 
ªt
;

4261 i‡((
sbio
->
fú°_size
 =0Ë&& ((sbio->
bio_size
 & (
sdev
->
logicb_size
 - 1)Ë=0Ë&& !sbio->
has_hﬁe
)

4262 
ªt
 = 
	`sh™n⁄_submô_Æig√d_bio
(
sdev
, 
sbio
);

4264 
ªt
 = 
	`sh™n⁄_submô_n⁄Æig√d_bio
(
sdev
, 
sbio
, sbio->
fú°_size
);

4266  
ªt
;

4267 
	}
}

4269 
	#BW_THROTTLE_INTERVAL
 10

	)

4270 
	$sh™n⁄_submô_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
)

4272 
u64
 
max_wrôe_bw
 = 
sdev
->max_write_bw;

4274 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
) {

4275 
	`¥e„tch_check
(
sdev
, 
sbio
);

4277 i‡((
max_wrôe_bw
Ë&& (
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) &&

4278 (!(
sdev
->
mbr
.
„©uª_Êags
 & 
LIMIT_BW_WHEN_DISKFULL
Ë|| sdev->
‰ì_blk˙t
 < 100)) {

4279 
	`sh™n⁄_©omic64_add
(
sbio
->
bio_size
, &
sdev
->
wrôe_bw
);

4280 i‡(
	`sh™n⁄_©omic64_ªad
(&
sdev
->
wrôe_bw
Ë>
max_wrôe_bw
/(1000/
BW_THROTTLE_INTERVAL
)) {

4281 
	`sh™n⁄_muãx_lock
(&
sdev
->
thrŸée_wrôe_bw_£m
);

4282 i‡(
	`sh™n⁄_©omic64_ªad
(&
sdev
->
wrôe_bw
Ë> 
max_wrôe_bw
/(1000/
BW_THROTTLE_INTERVAL
)) {

4283 
u32
 
time
 = 
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
());

4284 
	`sh™n⁄_©omic64_£t
(&
sdev
->
wrôe_bw
, 0);

4285 i‡((
time
 - 
sdev
->
thrŸée_wrôe_bw_time_°amp
Ë>
BW_THROTTLE_INTERVAL
) {

4286 
sdev
->
thrŸée_wrôe_bw_time_°amp
 = 
time
;

4288 
	`sh™n⁄_m¶ìp
(
sdev
->
thrŸée_wrôe_bw_time_°amp
 + 
BW_THROTTLE_INTERVAL
 - 
time
 - 1);

4289 
sdev
->
thrŸée_wrôe_bw_time_°amp
 = 
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
());

4292 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
thrŸée_wrôe_bw_£m
);

4293 
	`sh™n⁄_©omic64_add
(
sbio
->
bio_size
, &
sdev
->
wrôe_bw
);

4297  
	`__sh™n⁄_submô_bio
(
sdev
, 
sbio
);

4298 
	}
}

4300 
	$ªcovî_d©a_‰om_dummy_∑ge
(
sh™n⁄_dev
 *
sdev
, *
addr
)

4302 
sh™n⁄_sm¨t
 *
sm¨t
 = (sh™n⁄_sm¨à*)
addr
;

4304 i‡(
	`sh™n⁄_mem_ªadq
(&
sm¨t
->
ˇ∑côy
Ë=
MAGICBEAN
 && 
	`sh™n⁄_mem_ªadl
(&sm¨t->
ãm≥øtuª_öt
) == MAGICBEAN) {

4305 i‡(
sdev
->
powî_⁄_£c⁄ds
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->power_on_seconds) + 1)) {

4306 
sdev
->
powî_⁄_£c⁄ds
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->power_on_seconds);

4307 i‡(
sdev
->
powî_⁄_£c⁄ds_hi°‹y
 < sdev->
powî_⁄_£c⁄ds
)

4308 
sdev
->
powî_⁄_£c⁄ds_hi°‹y
 = sdev->
powî_⁄_£c⁄ds
;

4310 i‡(
sdev
->
powî_cy˛e_cou¡
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->power_cycle_count) + 1))

4311 
sdev
->
powî_cy˛e_cou¡
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->power_cycle_count);

4312 i‡(
sdev
->
ho°_wrôe_£˘‹s
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->host_write_sectors) + 1))

4313 
sdev
->
ho°_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->host_write_sectors);

4314 i‡(
sdev
->
tŸÆ_wrôe_£˘‹s
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->total_write_sectors) + 1))

4315 
sdev
->
tŸÆ_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->total_write_sectors);

4316 i‡(
sdev
->
ho°_ªad_£˘‹s_hi°‹y
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->
ho°_ªad_£˘‹s
) + 1))

4317 
sdev
->
ho°_ªad_£˘‹s_hi°‹y
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->
ho°_ªad_£˘‹s
);

4318 i‡(
sdev
->
powî_⁄_£q_num
 < (
	`sh™n⁄_mem_ªadq
(&
sm¨t
->
£quí˚_numbî
) + 1))

4319 
sdev
->
powî_⁄_£q_num
 = 
	`sh™n⁄_mem_ªadq
(&
sm¨t
->
£quí˚_numbî
);

4320 i‡(
sdev
->
ãm≥øtuª_öt_max
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_int_max) + 1))

4321 
sdev
->
ãm≥øtuª_öt_max
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_int_max);

4322 i‡(
sdev
->
ãm≥øtuª_bﬂrd_max
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_board_max) + 1))

4323 
sdev
->
ãm≥øtuª_bﬂrd_max
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_board_max);

4324 i‡(
sdev
->
ãm≥øtuª_Êash_max
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_flash_max) + 1))

4325 
sdev
->
ãm≥øtuª_Êash_max
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->temperature_flash_max);

4326 i‡(
sdev
->
vﬁège_öt_max
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->voltage_int_max) + 1))

4327 
sdev
->
vﬁège_öt_max
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->voltage_int_max);

4328 i‡(
sdev
->
vﬁège_aux_max
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->voltage_aux_max) + 1))

4329 
sdev
->
vﬁège_aux_max
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->voltage_aux_max);

4330 i‡(
sdev
->
£u_¸c_îr‹_hi°‹y
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->seu_crc_error_history) + 1))

4331 
sdev
->
£u_¸c_îr‹_hi°‹y
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->seu_crc_error_history);

4332 i‡(
sdev
->
£u_ecc_îr‹_hi°‹y
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->seu_ecc_error_history) + 1))

4333 
sdev
->
£u_ecc_îr‹_hi°‹y
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->seu_ecc_error_history);

4334 i‡(
sdev
->
gc_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->gc_sbs) + 1))

4335 
sdev
->
gc_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->gc_sbs);

4336 i‡(
sdev
->
îr_ªcovîed_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->err_recovered_sbs) + 1))

4337 
sdev
->
îr_ªcovîed_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->err_recovered_sbs);

4338 i‡(
sdev
->
wl_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->wl_sbs) + 1))

4339 
sdev
->
wl_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->wl_sbs);

4340 i‡(
sdev
->
d©a_ªã¡i⁄_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->data_retention_sbs) + 1))

4341 
sdev
->
d©a_ªã¡i⁄_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->data_retention_sbs);

4342 i‡(
sdev
->
ªad_di°urb_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->read_disturb_sbs) + 1))

4343 
sdev
->
ªad_di°urb_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->read_disturb_sbs);

4344 i‡(
sdev
->
îa£_bÆ™˚_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->erase_balance_sbs) + 1))

4345 
sdev
->
îa£_bÆ™˚_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->erase_balance_sbs);

4346 i‡(
sdev
->
ecc_Áûuª_sbs
 < (
	`sh™n⁄_mem_ªadl
(&
sm¨t
->ecc_failure_sbs) + 1))

4347 
sdev
->
ecc_Áûuª_sbs
 = 
	`sh™n⁄_mem_ªadl
(&
sm¨t
->ecc_failure_sbs);

4349 
	}
}

4352 
	$£nd_dummy_ovîœp_ªq
(
sh™n⁄_dev
 *
sdev
, 
ovîwrôe
)

4354 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

4356 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

4357 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

4358 
	`£t_ªq_debug_èg
(
ªq
, 
DUMMY_CHUNK_TAG
, 0);

4359 
ªq
->
›code
 = 
sh_cmd_wrôe
;

4360 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

4361 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

4362 
ªq
->
hód
 = 
OVERLAP_HEAD
;

4363 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

4364 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

4365 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

4366 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4367 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

4368 
	`sh™n⁄_wrôe_ovîœp_ªque°
(
sdev
, 
ªq
, 
ovîwrôe
);

4369 
	}
}

4371 
	$£nd_dummy_ªq
(
sh™n⁄_dev
 *
sdev
, 
hód
)

4373 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

4375 
	`upd©e_d©a_ö_dummy_∑ge
(
sdev
);

4376 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

4377 
	`£t_ªq_debug_èg
(
ªq
, 
DUMMY_CHUNK_TAG
, 0);

4378 
ªq
->
›code
 = 
sh_cmd_wrôe
;

4379 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

4380 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

4381 
ªq
->
hód
 = head;

4382 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

4383 
ªq
->
dma_addªss
 = 
sdev
->
dummy_dma_∑ge
;

4384 
ªq
->
vút_addr
 = 
sdev
->
dummy_∑ge
;

4385 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

4386 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

4387 
	`sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
ªq
);

4388 
	}
}

4390 
	$Æl_cmd_queue_is_em±y
(
sh™n⁄_dev
 *
sdev
)

4392 
sh™n⁄_lun£t
 *
lun£t
;

4393 
i
;

4394 
u32
 
hód_tŸÆ
, 
èû_tŸÆ
;

4395 #ifde‡
SHANNON_USE_WRITE_BUFFER


4396 
u32
 
ack_cq_hód1
, 
ack_cq_hód2
;

4399 
hód_tŸÆ
 = 0;

4400 
èû_tŸÆ
 = 0;

4401 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

4402 
lun£t
 = &
sdev
->
lun£ts
[
i
];

4403 
hód_tŸÆ
 +
lun£t
->
sq_hód_tmp
;

4404 i‡(
lun£t
->
sq_hód_tmp
 !lun£t->
cq_èû
)

4407 #ifde‡
SHANNON_USE_WRITE_BUFFER


4408 
hód_tŸÆ
 +
sdev
->
bufq_sq_hód_tmp
[0];

4409 i‡(
sdev
->
bufq_sq_hód_tmp
[0] !sdev->
bufq_cq_èû
[0])

4411 
hód_tŸÆ
 +
sdev
->
bufq_sq_hód_tmp
[1];

4412 i‡(
sdev
->
bufq_sq_hód_tmp
[1] !sdev->
bufq_cq_èû
[1])

4416 
	`sh™n⁄_b¨rõr
();

4417 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

4418 
lun£t
 = &
sdev
->
lun£ts
[
i
];

4419 
èû_tŸÆ
 +
lun£t
->
cq_èû
;

4421 #ifde‡
SHANNON_USE_WRITE_BUFFER


4422 
èû_tŸÆ
 +
sdev
->
bufq_cq_èû
[0];

4423 
èû_tŸÆ
 +
sdev
->
bufq_cq_èû
[1];

4425 i‡(
hód_tŸÆ
 !
èû_tŸÆ
)

4428 #ifde‡
SHANNON_USE_WRITE_BUFFER


4429 
ack_cq_hód1
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
bufq_ack_b¨
->
cq_hód
);

4431 
	`sh™n⁄_m¶ìp
(3);

4433 
ack_cq_hód2
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
bufq_ack_b¨
->
cq_hód
);

4435 i‡(
ack_cq_hód1
 !
ack_cq_hód2
)

4440 
	}
}

4443 
	$pick_ª£nd_li°
(
sh™n⁄_dev
 *
sdev
)

4445 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

4447 !
	`sh™n⁄_li°_em±y
(&
sdev
->
ª£nd_li°
)) {

4448 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ª£nd_li°_lock
);

4449 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ª£nd_li°
, 
sh™n⁄_ªque°
, 
li°
);

4450 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

4451 
sdev
->
ª£nd_logicbs
--;

4452 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ª£nd_li°_lock
);

4453 
	`sh™n⁄_pick_wrôe_ªque°
(
sdev
, 
ªq
);

4455 
	}
}

4457 
	$decom¥ess_mëad©a
(
sh™n⁄_ªque°
 *
ªq
)

4459 
u64
 
lba
;

4460 
u16
 
ns_id
, 
ns_£q_num
, 
d©©y≥
;

4462 
lba
 = 
ªq
->
_mëad©a
 & 
LONG_LBA_MASK
;

4463 
ns_id
 = (
ªq
->
_mëad©a
 >> 
NS_ID_SHIFT
Ë& 
NS_ID_MASK
;

4464 
ns_£q_num
 = (
ªq
->
_mëad©a
 >> 
NS_SEQ_NUM_SHIFT
Ë& 
NS_SEQ_NUM_MASK
;

4465 
d©©y≥
 = (
ªq
->
_mëad©a
 >> 
DATATYPE_SHIFT
Ë& 
DATATYPE_MASK
;

4467 i‡(
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)) {

4468 
ªq
->
lba
 =Üba;

4469 
ªq
->
ns_id
 =Çs_id;

4470 
ªq
->
ns_£q_num
 =Çs_seq_num;

4471 
ªq
->
d©©y≥
 = datatype;

4472 } i‡((
ªq
->
lba
 !lbaË|| (ªq->
ns_id
 !=Çs_id) || \

4473 (
ªq
->
ns_£q_num
 !=Çs_seq_num)) {

4474 
	`debugs0
("metadata=0x%lx,Üba=0x%lx,Çs_id=%d,Çs_seq_num=%d, datatype=%d.\n",

4475 
ªq
->
_mëad©a
, 
lba
, 
ns_id
, 
ns_£q_num
, 
d©©y≥
);

4476 
	`debugs0
("value inÑeq:Üba=0x%lx,Çs_id=%d,Çs_seq_num=%d, datatype=%d,Åag=0x%lx.\n",

4477 
ªq
->
lba
,Ñeq->
ns_id
,Ñeq->
ns_£q_num
,Ñeq->
d©©y≥
,Ñeq->
èg
);

4482 
	}
}

4484 
	~"sh™n⁄_buf„r.c
"

4485 
	~"sh™n⁄_îr_öje˘i⁄.c
"

4487 
	$lun_ö¸ó£_cmd_timeout
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phy_lun
)

4489 
u32
 
logiˇl_lun
 = 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
phy_lun
);

4490 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
logiˇl_lun
];

4492 
lun
->
comm™d_timeout_˙t
++;

4493 i‡((
lun
->
comm™d_timeout_˙t
 > 
sh™n⁄_max_comm™d_timeout
Ë&& !lun->
bad
) {

4494 
	`sh™n⁄_log
("thênumbî o‡lu¿%d comm™dÅimeouàm‹êth™ %d, m¨kÜu¿bad.\n", 
lun
->
lun_num
,Üun->
comm™d_timeout_˙t
);

4495 
	`£t_√w_bad_lun
(
sdev
, 
lun
);

4496 
	`m¨k_sb_îr_f‹_bad_lun
(
sdev
, 
lun
);

4497 
	`move_blks_to_îr_blks_li°
(
sdev
);

4498 
	`check_îr_blk˙t_öc
(
sdev
);

4500 
	}
}

4502 
	$check_comp_queue
(
sh™n⁄_cmd
 *
cmd
)

4504 
cmd
->
›code
) {

4505 
sh_cmd_ªg_wrôe
:

4506 
sh_cmd_ªg_ªad
:

4507 
sh_cmd_ª£t
:

4509 
sh_cmd_no_›
:

4510 i‡(
cmd
->
hód
 & 
NO_COMPLETION_WRITE_MASK
)

4515 
	}
}

4517 
u32
 
	$ª≥©_ªad_cq_hód
(
sh™n⁄_dev
 *
sdev
, c⁄° vﬁ©ûê
__iomem
 *
addr
)

4519 
ªåy
 = 0;

4520 
u32
 
vÆue
;

4522 
	`sh™n⁄_öfo
("enter.\n");

4524 
vÆue
 = 
	`ªad_ªg_ß„
(
sdev
, 
addr
);

4525 
ªåy
++;

4526 } (
vÆue
 > 
QUEUE_SIZE
Ë&& (
ªåy
 < 50));

4527 
	`sh™n⁄_öfo
("cq_hód=0x%x.\n", 
vÆue
);

4528  
vÆue
;

4529 
	}
}

4531 
	$__h™dÀ_lun£t
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun£t
 *
lun£t
, 
ö_wq
, 
ªad_cq_hód
)

4533 
sh™n⁄_sb
 *
sb
;

4534 
sh™n⁄_cmd
 *
cmd
;

4535 
sh™n⁄_ˇched_ªad_cmd
 *
ªad
;

4536 
sh™n⁄_cmd_öfo
 *
öfo
;

4537 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

4538 
sh™n⁄_lun
 *
lun
 = 
NULL
;

4539 
sub_group
 *
group
;

4540 
i
, 
logicbs
, 
cmdid
, 
cmd_Àn
, 
∂™e
, 
logiˇl_lun
;

4541 
ªåy
, 
has_¥ogªss
 = 0;

4542 
__u8
 
°©us
;

4543 
__u8
 *
ecc
;

4544 
__u32
 
ãmp_sq_hód
;

4545 
u64
 *
mëad©a
;

4546 
u64
 
øw_cm∂
;

4547 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4548 
hód
;

4555 
	`BUG_ON
(
ö_wq
 ^ (!!
	`sh™n⁄_©omic_ªad
(&
lun£t
->in_wq)));

4556 i‡(
	`u∆ikñy
(
sdev
->
∂ug_out
))

4557 
EXIT
;

4559 i‡(
	`u∆ikñy
(
ªad_cq_hód
)) {

4560 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

4561 
lun£t
->
cq_hw_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->
cq_hód
);

4563 i‡(
	`u∆ikñy
(
lun£t
->
cq_hw_hód
 > 
QUEUE_SIZE
)) {

4564 
sdev
->
∂ug_out
 = 
	`check_∂ugout
(sdev);

4565 i‡(
sdev
->
∂ug_out
)

4566 
EXIT
;

4567 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

4568 
lun£t
->
cq_hw_hód
 = 
	`ª≥©_ªad_cq_hód
(
sdev
, &lun£t->
lun_b¨
->
cq_hód
);

4570 i‡(
lun£t
->
cq_hw_hód
 > 
QUEUE_SIZE
) {

4571 
	`sh™n⁄_îr
("lun£t=%d, cq_hw_hód=0x%x.\n", 
lun£t
->
ödex
,Üun£t->
cq_hw_hód
);

4572 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

4573 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
w©chdog_w‹k
);

4574 
EXIT
;

4578 
lun£t
->
cq_hód
 =Üun£t->
cq_hw_hód
;

4580 #ifde‡
CONFIG_SHANNON_DEBUG


4581 
lun£t
->
queue_dïth
[(÷un£t->
sq_hw_hód
 + 
QUEUE_SIZE
 -Üun£t->
cq_èû
)%QUEUE_SIZE)/(248)]++;

4582 
lun£t
->
cmd_queue_dïth
[(÷un£t->
sq_hw_hód
 + 
QUEUE_SIZE
 -Üun£t->
cq_hw_hód
)%QUEUE_SIZE)/(248)]++;

4583 
lun£t
->
comp_queue_dïth
[(÷un£t->
cq_hw_hód
 + 
QUEUE_SIZE
 -Üun£t->
cq_èû
)%QUEUE_SIZE)/(248)]++;

4586 #ifde‡
CONFIG_SHANNON_DEBUG


4587 
lun£t
->
queue_dïth
[(÷un£t->
sq_hw_hód
 + 
QUEUE_SIZE
 -Üun£t->
cq_èû
)%QUEUE_SIZE)/(248)]++;

4591 
ãmp_sq_hód
 = 
lun£t
->
sq_hód
;

4593 i‡(
	`likñy
(!
ªad_cq_hód
)) {

4594 
cmdid
 = 
lun£t
->
cq_èû_tmp
 >> 3;

4595 
cmd
 = 
lun£t
->
sq_addr
 + 
cmdid
;

4597 i‡(
lun£t
->
cq_èû_tmp
 =
ãmp_sq_hód
)

4599 
øw_cm∂
 = *((
u64
 *)
lun£t
->
cq_addr
 + 
cmdid
);

4601 i‡(
	`check_comp_queue
(
cmd
Ë&& (
øw_cm∂
 =
COMP_QUEUE_FILL
))

4604 i‡(
lun£t
->
cq_èû
 =lun£t->
cq_hód
) {

4606 i‡(
lun£t
->
cq_èû_tmp
 !lun£t->
cq_èû
)

4607 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_èû
;

4611 
cmdid
 = 
lun£t
->
cq_èû
 >> 3;

4612 
cmd
 = 
lun£t
->
sq_addr
 + 
cmdid
;

4613 i‡(
lun£t
->
cq_èû
 !lun£t->
cq_èû_tmp
) {

4614 i‡(
	`check_comp_queue
(
cmd
)) {

4615 
	`sh™n⁄_îr
("%s: Software BUG: corrupted command queue status forÜunset=%d, cq_tail=0x%x, "

4617 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
, \

4618 
lun£t
->
cq_hód
,Üun£t->
sq_hód
, 
cmd
->
›code
);

4619 
	`BUG
();

4623 i‡(
	`check_comp_queue
(
cmd
)) {

4624 
øw_cm∂
 = *((
u64
 *)
lun£t
->
cq_addr
 + 
cmdid
);

4625 i‡(
øw_cm∂
 =
COMP_QUEUE_FILL
)

4626 
	`sh™n⁄_Æ¨m
("%s:Üunset=%d, cqÉrror: opcode=0x%x, sq_head=0x%x, cq_tail=0x%x, cq_tail_tmp=0x%x, cq_head=0x%x.\n",

4627 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
, 
cmd
->
›code
,Üun£t->
sq_hód
,Üun£t->
cq_èû
, \

4628 
lun£t
->
cq_èû_tmp
,Üun£t->
cq_hód
);

4632 
öfo
 = &
lun£t
->
cmd_öfo
[
cmdid
];

4633 
°©us
 = *((
__u8
 *)(
lun£t
->
cq_addr
 + (lun£t->
cq_èû_tmp
>>3)));

4634 i‡(
öfo
->
cmd_Àn
 == 0) {

4635 
	`sh™n⁄_îr
("Wrong command format: %s:Öhy_lun=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4636 
	`›code_«me
(
cmd
->
›code
), 
	`gë_cmd_phy_lun
(
sdev
, 
lun£t
->
ödex
, &cmd->
dw‹d1
),

4637 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
), 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4638 
	`BUG
();

4640 
cmd
->
›code
) {

4641 
sh_cmd_ª£t
:

4643 
sh_cmd_¥e_ªad
:

4644 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4645 
logiˇl_lun
 = 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4646 i‡(
	`is_Áke_cmd_timeout_lun
(
sdev
, 
logiˇl_lun
)) {

4647 
	`debugs1
("### Tø∞ö fakêcomm™dÅimeouàlun:Üun=%d\n", 
ªq
->
pba
.
lun
);

4648 
°©us
 = 0xFE;

4651 i‡(
°©us
 == 0xff) {

4653 
	`sh™n⁄_log
("%s:Öre-read command mayÇot work:Öhy_lun=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4654 
sdev
->
sdisk
.
disk_«me
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
),

4655 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
), 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4656 } i‡(
	`check_cmd_timeout
(
°©us
)) {

4657 
	`sh™n⁄_w¨n
("%s:Öre-readÅimeout,Üunset=%d,Öhy_lun=%d,Üun=%d, sb=%d.\n",

4658 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
, 
	`gë_cmd_phy_lun
(sdev,Üun£t->ödex, &
cmd
->
dw‹d1
),

4659 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
)),

4660 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
)/sdev->
∑ges_ö_siblög_eblock
);

4661 
	`lun_ö¸ó£_cmd_timeout
(
sdev
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4664 
sh_cmd_adv™˚d_ªad
:

4666 i‡(
	`likñy
(!
ªad_cq_hód
)) {

4667 
lun£t
->
cq_hw_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->
cq_hód
);

4668 
lun£t
->
cq_hód
 =Üun£t->
cq_hw_hód
;

4669 i‡(
lun£t
->
cq_hód
 =lun£t->
cq_èû_tmp
)

4670 
EXIT
;

4672 
sh_cmd_ªad
:

4673 
sh_cmd_ªad_íd
:

4674 
ecc
 = (
__u8
 *)(
lun£t
->
cq_addr
 + (lun£t->
cq_èû_tmp
>>3));

4675 
mëad©a
 = 
	`cmd_queue_öc
(
ecc
, 1);

4676 
ªad
 = (
sh™n⁄_ˇched_ªad_cmd
 *)
cmd
;

4677 
logicbs
 = 
	`gë_ªad_cmd_logicbs
(
ªad
->
byã1
) + 1;

4678 
i
=0; i<
logicbs
; i++) {

4679 i‡(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

4680 
	`sh™n⁄_îr
("req_list isÉmpty! i=%d,Üunset=%d, sq_head=%x, cq_tail=0x%x, cq_tail_tmp=%x.\n",

4681 
i
, 
lun£t
->
ödex
,Üun£t->
sq_hód
,Üun£t->
cq_èû
,Üun£t->
cq_èû_tmp
);

4682 
	`BUG
();

4684 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4685 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

4686 
ªq
->
_ecc
 = 
ecc
[
i
];

4687 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4688 i‡(
sdev
->
m™uÆ_ªad_îr
) {

4689 
	`m¨k_Áke_rd_bad_lu≈ba
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

4690 
sdev
->
m™uÆ_ªad_îr
 = 0;

4692 i‡(
	`is_Áke_rd_bad_lu≈ba
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
) ||

4693 (
	`ªq_is_ö_a˘ive_chunks_ønge
(
sdev
, 
ªq
, &
hód
) &&

4694 
	`is_Áke_twö_rd_bad_lu≈ba
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
, 
hód
 & 
HEAD_INDEX_MASK
))) {

4695 
	`debugs1
("### Trap in fakeÑead badÜunpba:Üun=%d blk=%dÖage=%d sector=%d\n",

4696 
ªq
->
pba
.
lun
,

4697 (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
,

4698 (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
,

4699 
ªq
->
pba
.
lun_pba
 % 
sdev
->
logicbs_ö_∑ge
);

4700 
ªq
->
_ecc
 = 
SH_FAKE_ERR
;

4701 
	`sh™n⁄_mem_wrôeq
(0x123456782468ABCD, 
mëad©a
);

4702 
	`sh™n⁄_mem_wrôeq
(0x87654321ABCD2468, 
ªq
->
vút_addr
);

4705 i‡(
	`likñy
(
has_dma_dñay
)) {

4706 i‡(!((
cmd
->
›code
 =
sh_cmd_adv™˚d_ªad
Ë&& (
ªq
->
_ecc
 >
SH_FAKE_ERR
))) {

4707 
ªåy
 = 0;

4708 
	`sh™n⁄_mem_ªadq
(
mëad©a
Ë=
COMP_QUEUE_FILL
) {

4709 
ªåy
++;

4710 
sdev
->
ªad_pﬁl_ªåy
++;

4711 i‡(
ªåy
 > 
DMA_REORDER_RETRY_COUNT
) {

4712 
	`sh™n⁄_Æ¨m
("%s:Üunset=%d, DMA metadata opcode=0x%X, metadata=%llX, "

4714 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
, 
cmd
->
›code
, 
ªq
->
_mëad©a
, \

4715 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
,Üun£t->
sq_hód
,Üun£t->
cq_hód
);

4718 
	`sh™n⁄_b¨rõr
();

4719 
	`sh™n⁄_udñay
(2);

4723 
ªq
->
_mëad©a
 = 
	`sh™n⁄_mem_ªadq
(
mëad©a
);

4724 
	`BUG_ON
(
ªq
->
sbio
 =
NULL
);

4725 
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

4726 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

4727 i‡(
ªq
->
›code
 =
sh_cmd_adv™˚d_ªad
)

4728 
	`sh™n⁄_©omic_dec
(&
sdev
->
ö_cmd_queue_adv_ªads
);

4730 i‡(
ªq
->
_ecc
 !
SH_FRESH_ERASED
 &&Ñeq->_ec¯> 
sb
->
max_ecc
)

4731 
sb
->
max_ecc
 = 
ªq
->
_ecc
;

4732 i‡(
ªq
->
_ecc
 =
SH_FRESH_ERASED
) {

4733 i‡(
	`u∆ikñy
((!
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)Ë|| (
sb
->
°©e
 =
IN_GC_BLOCK
))){

4734 
	`sh™n⁄_©omic_öc
(&
sdev
->
ecc_Áûuª_times
);

4735 i‡(
ªq
->
›code
 =
sh_cmd_adv™˚d_ªad
)

4736 
	`sh™n⁄_©omic_öc
(&
lun
->
adv_ªad_Áûuª_times
);

4738 
	`sh™n⁄_©omic_öc
(&
lun
->
ecc_Áûuª_times
);

4739 
	`h™dÀ_ªad_îr‹
(
sdev
, 
ªq
);

4741 
ªq
->
sbio
->
°©us
 |
HAVE_BLANK_SECTOR
;

4742 
ªq
->
°©e
 = 
REQ_DONE
;

4743 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

4745 } i‡(
ªq
->
_ecc
 >
SH_FAKE_ERR
) {

4746 i‡(
ªq
->
_ecc
 == 0xFC)

4747 
	`sh™n⁄_©omic_öc
(&
sdev
->
ecc_fc_°©i°ics
);

4748 
	`sh™n⁄_©omic_öc
(&
sdev
->
ecc_Áûuª_times
);

4749 i‡(
ªq
->
›code
 =
sh_cmd_adv™˚d_ªad
) {

4750 
	`sh™n⁄_©omic_öc
(&
lun
->
adv_ªad_Áûuª_times
);

4752 
	`sh™n⁄_©omic_öc
(&
lun
->
ecc_Áûuª_times
);

4753 i‡(!
	`is_a˘ive_blk
(
sb
)) {

4755 
sb
->
ecc_Áûuª_times
[
ªq
->
pba
.
lun
]++;

4756 i‡(
sb
->
ecc_Áûuª_times
[
ªq
->
pba
.
lun
] > sb->
max_lun_ecc_Áûuª_times
)

4757 
sb
->
max_lun_ecc_Áûuª_times
 = sb->
ecc_Áûuª_times
[
ªq
->
pba
.
lun
];

4760 
	`h™dÀ_ªad_îr‹
(
sdev
, 
ªq
);

4762 i‡(
	`decom¥ess_mëad©a
(
ªq
)) {

4763 
sh™n⁄_sb
 *
tmp_sb
 = (
sdev
)->
sbs
 + (
ªq
)->
pba
.
lun_pba
/(sdev)->
logicbs_ö_siblög_eblock
;

4764 i‡(
	`is_¢≠ªad_ªq
(
ªq
))

4765 
	`sh™n⁄_©omic_öc
(&
sdev
->
¢≠_ªad_mism©ch
);

4766 
	`sh™n⁄_w¨n
("%s:Übaánd metadata don't match.Üun=%d,Üun_pba=%d, seq_num=0x%lx,Üba=0x%lx, metadata=0x%lx, sb=%d, state=%d, sb->seq_num=0x%lx.\n",

4767 (
sdev
)->
sdisk
.
disk_«me
, (
ªq
)->
pba
.
lun
, (ªq)->pba.
lun_pba
, (ªq)->
£q_num
, (ªq)->
lba
, ()‘eq)->
_mëad©a
,

4768 
tmp_sb
->
sb_ödex
,Åmp_sb->
°©e
,Åmp_sb->
£q_num
);

4769 
	`h™dÀ_ªad_îr‹
(
sdev
, 
ªq
);

4771 
sdev
->
ecc_°©i°ics
[
ªq
->
_ecc
 > sdev->
ecc_c‹ª˘i⁄_powî
 ? sdev->ecc_correction_power :Ñeq->_ecc]++;

4772 i‡(
ªq
->
›code
 =
sh_cmd_adv™˚d_ªad
)

4773 
lun
->
adv_ªad_ecc_°©i°ics
[
ªq
->
_ecc
 > 
sdev
->
ecc_c‹ª˘i⁄_powî
 ? sdev->ecc_correction_power :Ñeq->_ecc]++;

4775 
lun
->
ecc_°©i°ics
[
ªq
->
_ecc
 > 
sdev
->
ecc_c‹ª˘i⁄_powî
 ? sdev->ecc_correction_power :Ñeq->_ecc]++;

4776 
ªq
->
sbio
->
c‹ª˘ed_bôs
 +
ecc
[
i
];

4777 
ªq
->
°©e
 = 
REQ_DONE
;

4778 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

4781 
mëad©a
 = 
	`cmd_queue_öc
(metadata, 1);

4785 
sh_cmd_wrôe
:

4786 
	`sh™n⁄_©omic_sub
(
sdev
->
logicbs_ö_∑ge
, &sdev->
ö_cmd_queue_wrôes
);

4787 i‡(
sdev
->
cmd_queue_wrôes_limô
 && 
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
Ë< 
	`GET_CMD_QUEUE_WRITES_THRESHOLD_L
(sdev)) {

4788 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

4789 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4791 i‡(
sdev
->
h¨d_queue_limô
 && (
	`sh™n⁄_©omic_ªad
(&sdev->
ö_cmd_queue_wrôes
) < sdev->hard_queue_limit)) {

4792 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

4793 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

4795 i‡(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
))

4797 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4798 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

4799 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4800 i‡(!(
cmd
->
hód
 & 
NO_POLL_MASK
Ë&& 
	`is_Áke_wr_bad_lu≈∑
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
/sdev->
logicbs_ö_∑ge
)) {

4801 
	`debugs1
("### Trap in fakeÇormal write badÜunppa:Üun=%d blk=%dÖage=%d\n",

4802 
ªq
->
pba
.
lun
,

4803 (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
,

4804 (
ªq
->
pba
.
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
);

4805 
°©us
 = 0xEF;

4809 
	`sh™n⁄_©omic_sub
(
sdev
->
logicbs_ö_chunk
, &
sb
->
unföished_wrôes
);

4810 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& 
	`check_°©us
(
°©us
)) {

4811 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
) {

4813 
∂™e
 = (
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
)/sdev->
∑ges_ö_eblock
Ë% sdev->
∂™es
;

4814 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
)) {

4815 
	`sh™n⁄_log
("%s: mark write block:Üun=%d,Öhy_lun=%d, sb_index=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4816 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
), 
sb
->
sb_ödex
,

4817 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
), 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4818 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
);

4820 
	`h™dÀ_wrôe_îr‹
(
sdev
, 
sb
, 
NULL
);

4824 
	`sb_m¨k_bad_lun
(
sb
, 
ªq
->
pba
.
lun
);

4825 
	`add_bad_eblk_to_lun_bbt
(
sdev
->
lun
[
ªq
->
pba
.lun], 
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
)/sdev->
∑ges_ö_eblock
);

4828 !
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

4829 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4830 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

4832 i‡(
ªq
->
sbio
) {

4833 
ªq
->
°©e
 = 
REQ_DONE
;

4834 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

4836 
	`‰ì_ªq
(
ªq
);

4837 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

4841 
sh_cmd_no_›
:

4842 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4843 i‡(
sdev
->
m™uÆ_wrôe_îr
) {

4844 
	`m¨k_Áke_wr_bad_lu≈∑
(
sdev
, 
phy_lun_to_logiˇl_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
)),

4845 
öfo
->
lun_pba
/
sdev
->
logicbs_ö_∑ge
);

4846 
sdev
->
m™uÆ_wrôe_îr
 = 0;

4848 i‡(
	`is_Áke_wr_bad_lu≈∑
(
sdev
, 
phy_lun_to_logiˇl_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
)),

4849 
öfo
->
lun_pba
/
sdev
->
logicbs_ö_∑ge
)) {

4850 
	`debugs1
("### Trap in fakeÇopoll write badÜunppa:Üun=%d blk=%dÖage=%d\n",

4851 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
)),

4852 (
öfo
->
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë/ sdev->
∑ges_ö_eblock
,

4853 (
öfo
->
lun_pba
 / 
sdev
->
logicbs_ö_∑ge
Ë% sdev->
∑ges_ö_eblock
);

4854 
°©us
 = 0xEF;

4855 } i‡(
	`is_Áke_cmd_timeout_lun
(
sdev
, 
phy_lun_to_logiˇl_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
)))) {

4856 
	`debugs1
("### Tø∞ö fakêcomm™dÅimeouàlun:Üun=%d\n", 
ªq
->
pba
.
lun
);

4857 
°©us
 = 0xFE;

4860 i‡(
cmd
->
hód
 & 
NO_COMPLETION_WRITE_MASK
)

4862 
sb
 = 
sdev
->
sbs
 + 
öfo
->
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

4863 
logiˇl_lun
 = 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4864 i‡(
	`check_cmd_timeout
(
°©us
)) {

4865 
	`sh™n⁄_w¨n
("%s:Ço_opÅimeout, sb=%d,Üunset=%d,Öhy_lun=%d,Üun=%d,Üun_pba=%d.\n",

4866 
sdev
->
sdisk
.
disk_«me
, 
sb
->
sb_ödex
, 
lun£t
->
ödex
, 
	`gë_cmd_phy_lun
(sdev,Üun£t->ödex, &
cmd
->
dw‹d1
), 
logiˇl_lun
, 
öfo
->
lun_pba
);

4867 
	`lun_ö¸ó£_cmd_timeout
(
sdev
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4869 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& (
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
Ë!(0x03fffff‡/ sdev->
logicbs_ö_∑ge
)Ë&& 
	`check_°©us
(
°©us
)) {

4870 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
) {

4871 
∂™e
 = 0;Öœ√ < 
sdev
->
∂™es
;Ölane++) {

4872 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
logiˇl_lun
, 
∂™e
)) {

4873 
	`sh™n⁄_log
("%s: markÇopoll-write block:Üun=%d,Öhy_lun=%d, sb_index=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4874 
sdev
->
sdisk
.
disk_«me
, 
logiˇl_lun
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
),

4875 
sb
->
sb_ödex
, 
öfo
->
lun_pba
/
sdev
->
logicbs_ö_∑ge
, 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4876 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
logiˇl_lun
, 
∂™e
);

4879 i‡(
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
Ë!(0x03fffff‡/ sdev->
logicbs_ö_∑ge
))

4880 
	`h™dÀ_wrôe_îr‹
(
sdev
, 
sb
, 
NULL
);

4883 
	`sb_m¨k_bad_lun
(
sb
, 
logiˇl_lun
);

4884 
	`add_bad_eblk_to_lun_bbt
(
sdev
->
lun
[
logiˇl_lun
], (
öfo
->
lun_pba
/sdev->
logicbs_ö_∑ge
)/sdev->
∑ges_ö_eblock
);

4889 
sh_cmd_îa£
:

4891 !
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

4892 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4893 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4894 i‡(
	`is_Áke_cmd_timeout_lun
(
sdev
, 
ªq
->
pba
.
lun
)) {

4895 
	`debugs1
("### Tø∞ö fakêcomm™dÅimeouàlun:Üun=%d\n", 
ªq
->
pba
.
lun
);

4896 
°©us
 = 0xFE;

4897 } i‡(
	`is_Áke_î_bad_block
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->
µa
/sdev->
∑ges_ö_eblock
)) {

4898 
	`debugs1
("### Tø∞ö fakêîa£ bad block:Üun=%d block=%d\n", 
ªq
->
pba
.
lun
,Ñeq->
µa
/
sdev
->
∑ges_ö_eblock
);

4899 
°©us
 = 0xEF;

4902 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

4903 i‡(
ªq
->
sbio
) {

4904 i‡(
	`check_°©us
(
°©us
Ë|| 
	`check_cmd_timeout
(status)) {

4905 
sb
 = 
sdev
->
sbs
 + 
ªq
->
µa
/(sdev->
∑ges_ö_eblock
 * sdev->
∂™es
);

4906 i‡(
	`check_cmd_timeout
(
°©us
)) {

4907 
	`sh™n⁄_w¨n
("%s:ÉraseÅimeout:Üunset=%d,Öhy_lun=%d,Üun=%d, sb=%d.\n",

4908 
sdev
->
sdisk
.
disk_«me
, 
lun£t
->
ödex
, 
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
), 
ªq
->
pba
.
lun
, 
sb
->
sb_ödex
);

4909 
	`lun_ö¸ó£_cmd_timeout
(
sdev
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4911 
	`sh™n⁄_log
("%s: markÉrase block:Üun=%d,Öhy_lun=%d, sb_index=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4912 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
pba
.
lun
, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
), 
sb
->
sb_ödex
,

4913 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
), 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4914 i‡(
	`sh™n⁄_ã°_™d_£t_bô
(
ERROR_SB_SHIFT
, &
sb
->
ª˛aim_köd
) == 0) {

4915 i‡(
sb
->
sb_ödex
 >
sdev
->
mbr_eblocks
/sdev->
∂™es
)

4916 
	`sh™n⁄_©omic_öc
(&
sdev
->
≥ndög_îr_blks
);

4919 
∂™e
 = (
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
)/sdev->
∑ges_ö_eblock
Ë% sdev->
∂™es
;

4920 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
ªq
->
pba
.
lun
, 
∂™e
);

4923 
ªq
->
°©e
 = 
REQ_DONE
;

4924 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

4928 
sh_cmd_∑rôy_öô
:

4929 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
));

4930 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4931 
	`sh™n⁄_li°_dñ
(&
ªq
->
li°
);

4932 
	`‰ì_ªq
(
ªq
);

4933 
sdev
->
∑rôy_öô_d⁄e
[
cmd
->
hód
 & 
HEAD_INDEX_MASK
] = 1;

4934 
	`sh™n⁄_wake_up
(&
sdev
->
∑rôy_öô_d⁄e_evít
[
cmd
->
hód
 & 
HEAD_INDEX_MASK
]);

4936 
sh_cmd_∑rôy
:

4937 
logiˇl_lun
 = 
phy_lun_to_logiˇl_lun
[
sdev
->
mbr
.
lun_m≠_mode
](sdev, 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
));

4938 
sb
 = 
sdev
->
sbs
 + 
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
)/(sdev->
∑ges_ö_eblock
 * sdev->
∂™es
);

4939 
group
 = &
sb
->
sub_group
[
logiˇl_lun
/
sdev
->
max_luns_ö_group
];

4940 
	`BUG_ON
(
	`gë_cmd_phy_lun
(
sdev
, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
Ë!sdev->
lun
[
	`gë_∑rôy_lun
(
group
)]->
phy_lun_num
);

4941 #ifde‡
CONFIG_SHANNON_FLASH_ERR_VERIFY


4942 i‡(
	`is_Áke_wr_bad_lu≈∑
(
sdev
, 
	`gë_∑rôy_lun
(
group
), 
	`gë_cmd_µa
(sdev, &
cmd
->
dw‹d1
))) {

4943 
	`debugs1
("### Trap in fakeÖarity write badÜunppa:Üun=%d blk=%dÖage=%d\n",

4944 
	`gë_∑rôy_lun
(
group
), 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
Ë/ sdev->
∑ges_ö_eblock
, get_cmd_ppa(sdev, &cmd->dword1) % sdev->pages_in_eblock);

4945 
°©us
 = 0xEF;

4948 i‡((
sdev
->
öô_d⁄e
 >
STAGE_RECOVER_DONE
Ë&& 
	`check_°©us
(
°©us
)) {

4949 
∂™e
 = (
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
)/sdev->
∑ges_ö_eblock
Ë% sdev->
∂™es
;

4950 i‡(!
	`is_îr‹_lun
(
sdev
, 
sb
, 
	`gë_∑rôy_lun
(
group
), 
∂™e
)) {

4951 
	`sh™n⁄_log
("%s: markÖarity-write block:Üun=%d,Öhy_lun=%d, sb_index=%d,Öpa=%d, cq_tail=0x%x, cq_tail_tmp=0x%x, status=0x%x.\n",

4952 
sdev
->
sdisk
.
disk_«me
, 
	`gë_∑rôy_lun
(
group
), 
	`gë_cmd_phy_lun
(sdev, 
lun£t
->
ödex
, &
cmd
->
dw‹d1
), 
sb
->
sb_ödex
,

4953 
	`gë_cmd_µa
(
sdev
, &
cmd
->
dw‹d1
), 
lun£t
->
cq_èû
,Üun£t->
cq_èû_tmp
, 
°©us
);

4954 
	`sb_m¨k_îr‹_lun
(
sdev
, 
sb
, 
	`gë_∑rôy_lun
(
group
), 
∂™e
);

4956 
	`h™dÀ_wrôe_îr‹
(
sdev
, 
sb
, 
NULL
);

4958 
	`BUG_ON
(
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
));

4959 !
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

4960 
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

4961 
	`sh™n⁄_li°_dñ
(&
ªq
->
li°
);

4962 
	`‰ì_ªq
(
ªq
);

4965 
sh_cmd_ªg_wrôe
:

4967 
sh_cmd_ªg_ªad
:

4970 
	`sh™n⁄_îr
("uƒecognized comm™d code. 0x%x!\n", 
cmd
->
›code
);

4972 
öfo
->
œ°_a˘ive_time
 = 0;

4973 
cmd_Àn
 = 
öfo
->cmd_len;

4974 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


4976 i‡(
	`likñy
(!
ªad_cq_hód
)) {

4981 i‡(
	`check_comp_queue
(
cmd
)) {

4982 i‡((
lun£t
->
cq_èû_tmp
 + 
cmd_Àn
Ë<
QUEUE_SIZE
) {

4983 
	`sh™n⁄_mem£t
(
cmd
, 0xì, 
cmd_Àn
);

4985 
	`sh™n⁄_mem£t
(
cmd
, 0xì, 
QUEUE_SIZE
 - 
lun£t
->
cq_èû_tmp
);

4986 
	`sh™n⁄_mem£t
(
lun£t
->
sq_addr
, 0xì,Üun£t->
cq_èû_tmp
 + 
cmd_Àn
 - 
QUEUE_SIZE
);

4990 i‡((
lun£t
->
cq_èû
 + 
cmd_Àn
Ë<
QUEUE_SIZE
) {

4991 
	`sh™n⁄_mem£t
(
cmd
, 0xì, 
cmd_Àn
);

4993 
	`sh™n⁄_mem£t
(
cmd
, 0xì, 
QUEUE_SIZE
 - 
lun£t
->
cq_èû
);

4994 
	`sh™n⁄_mem£t
(
lun£t
->
sq_addr
, 0xì,Üun£t->
cq_èû
 + 
cmd_Àn
 - 
QUEUE_SIZE
);

4999 i‡(
	`likñy
(!
ªad_cq_hód
)) {

5000 
lun£t
->
cq_èû_tmp
 = (lun£t->cq_èû_tm∞+ 
cmd_Àn
)%
QUEUE_SIZE
;

5001 i‡(
	`check_comp_queue
(
cmd
))

5002 
lun£t
->
cq_èû
 =Üun£t->
cq_èû_tmp
;

5004 
lun£t
->
cq_èû
 = (lun£t->cq_èû + 
cmd_Àn
)%
QUEUE_SIZE
;

5006 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_èû
;

5008 
	`sh™n⁄_b¨rõr
();

5009 i‡(
	`sh™n⁄_waôqueue_a˘ive
(&
lun£t
->
waô_cmd_pos
))

5010 
	`sh™n⁄_wake_up
(&
lun£t
->
waô_cmd_pos
);

5011 i‡(!
has_¥ogªss
)

5012 
has_¥ogªss
 = 1;

5015 i‡(
	`likñy
(
ªad_cq_hód
 == 0)) {

5017 
lun£t
->
cq_hód
 =Üun£t->
cq_èû
;

5019 i‡(
lun£t
->
cq_èû
 =lun£t->
sq_hód
) {

5020 
	`sh™n⁄_•ö_lock_bh
(&
lun£t
->
lun_b¨_lock
);

5021 i‡(
lun£t
->
cq_èû
 =lun£t->
sq_hód
)

5022 
	`sh™n⁄_˛ór_bô
(
lun£t
->
ödex
, 
sdev
->
pŸítül_öãºu±_ve˘‹s
);

5023 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
lun_b¨_lock
);

5026 i‡(
has_¥ogªss
)

5027 
lun£t
->
h™g
 = 0;

5029 
EXIT
:

5030 
	`BUG_ON
(
ö_wq
 ^ (!!
	`sh™n⁄_©omic_ªad
(&
lun£t
->in_wq)));

5031 i‡(
ö_wq
)

5032 
	`sh™n⁄_©omic_dec
(&
lun£t
->
ö_wq
);

5033 
	}
}

5036 
	$h™dÀ_lun£t
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_lun£t
 *
lun£t
, 
ö_wq
)

5038 
	`__h™dÀ_lun£t
(
sdev
, 
lun£t
, 
ö_wq
, 0);

5039 
	}
}

5041 
	$h™dÀ_lun£t_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

5043 
sh™n⁄_lun£t
 *
lun£t
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_lun£t, 
comp_w‹k
);

5044 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

5045 
	`h™dÀ_lun£t
(
sdev
, 
lun£t
, 1);

5046 
	`sh™n⁄_c⁄d_ªsched
();

5047 
	}
}

5049 
	$ªad_bufq_öãºu±_ve˘‹
(
sh™n⁄_dev
 *
sdev
)

5051 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5053 
	`•ö_lock_bh
(&
emu_öt_lock
);

5054 
sdev
->
öãºu±_ve˘
[0] = 
emu_öãºu±_ve˘‹
;

5055 
emu_öãºu±_ve˘‹
 = 0;

5056 
	`•ö_u∆ock_bh
(&
emu_öt_lock
);

5058 
ödex
 = 
sdev
->
öå_big_shi·
[
HOT_INDEX
]/32;

5060 
sdev
->
u32_ve˘‹s
[
ödex
] |
	`ªad_øw_ªg_ß„
(sdev, &sdev->
öãºu±_b¨
[index]);

5062 
	}
}

5064 
u64
 
	gu64_to_u32_mask
[2] = {0x00000000FFFFFFFFul, 0xFFFFFFFF00000000ul};

5065 
	$ªad_Ÿhî_öãºu±_ve˘‹
(
sh™n⁄_dev
 *
sdev
)

5067 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5068 
i
, 
ödex
 = 
sdev
->
öå_big_shi·
[
HOT_INDEX
]/32;

5070 
i
 = 0; i <
sdev
->
bufq_ack_öå_shi·
/32; i++) {

5071 i‡(
i
 !
ödex
) {

5073 i‡((
sdev
->
pŸítül_öãºu±_ve˘‹s
[
i
/2] & 
u64_to_u32_mask
[i%2]Ë|| (sdev->
pﬁl
[0] < 
sh™n⁄_pﬁl_times
))

5074 
sdev
->
u32_ve˘‹s
[
i
] |
	`ªad_øw_ªg_ß„
(sdev, &sdev->
öãºu±_b¨
[i]);

5078 
	}
}

5080 
	$sh™n⁄_öãºu±_weight
(
sh™n⁄_dev
 *
sdev
)

5082  
	`sh™n⁄_hweight_l⁄g
(
sdev
->
öãºu±_ve˘
[0]) + \

5083 
	`sh™n⁄_hweight_l⁄g
(
sdev
->
öãºu±_ve˘
[1]) + \

5084 
	`sh™n⁄_hweight_l⁄g
(
sdev
->
öãºu±_ve˘
[2]) + \

5085 
	`sh™n⁄_hweight_l⁄g
(
sdev
->
öãºu±_ve˘
[3]);

5087 
	}
}

5089 
	$sh™n⁄_no_öãºu±
(
sh™n⁄_dev
 *
sdev
)

5091 i‡(
sdev
->
öãºu±_ve˘
[0] || sdev->interrupt_vect[1] || sdev->interrupt_vect[2] || sdev->interrupt_vect[3])

5095 
	}
}

5097 
	$sh™n⁄_˛ór_öãºu±
(
sh™n⁄_dev
 *
sdev
)

5099 
sdev
->
öãºu±_ve˘
[0] = 0;

5100 
sdev
->
öãºu±_ve˘
[1] = 0;

5101 
sdev
->
öãºu±_ve˘
[2] = 0;

5102 
sdev
->
öãºu±_ve˘
[3] = 0;

5103 
	}
}

5105 
	$sh™n⁄_ö_úq
(
sh™n⁄_dev
 *
sdev
)

5107 
i
;

5109 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

5110 i‡(
sdev
->
ö_úq
[
i
])

5114 
	}
}

5116 
	$sh™n⁄_pﬁlög
(
sh™n⁄_dev
 *
sdev
)

5118 
i
;

5120 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

5121 i‡(
sdev
->
pﬁl
[
i
])

5125 
	}
}

5127 
	$wrôe_öãºu±_ve˘‹
(
sh™n⁄_dev
 *
sdev
, 
dw‹d_ödex
)

5129 i‡(
dw‹d_ödex
 < 0)

5130 
dw‹d_ödex
 = 0;

5131 
sdev
->
ö_úq
[
dw‹d_ödex
] = 0;

5132 
	`sh™n⁄_b¨rõr
();

5133 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5134 
	`wrôe_ªg_ß„
(
sdev
, 0, &sdev->
öãºu±_b¨
[
dw‹d_ödex
]);

5136 
	`•ö_lock_bh
(&
emu_öt_lock
);

5137 
emu_dißbÀ_úq
 = 0;

5138 i‡(
emu_öãºu±_ve˘‹
) {

5139 
emu_dißbÀ_úq
 = 1;

5140 
	`sh™n⁄_èskÀt_scheduÀ
(&
sdev
->
comp_èskÀt
);

5142 
	`•ö_u∆ock_bh
(&
emu_öt_lock
);

5144 
	}
}

5146 #unde‡
SHANNON_COMPLETION_REPOLL_IN_TASKLET


5149 
	$com∂ëi⁄_pﬁl
(
sh™n⁄_dev
 *
dev
)

5151 
i
, 
bôs
, 
ªt
 = 0;

5153 
	`ªad_bufq_öãºu±_ve˘‹
(
dev
);

5154 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
 || (dev->
°©e
 & 
SHN_STATE_ERROR_BIT
)))

5157 i‡((
dev
->
öô_d⁄e
 >
STAGE9_DONE
Ë&& 
	`sh™n⁄_ã°_™d_˛ór_bô_À
(dev->
£u_öå_shi·
, dev->
öãºu±_ve˘
)) {

5158 
u32
 
£u
 = 
	`ªad_ªg_ß„
(
dev
, (u32 *)dev->
b¨
 + 
SH_SEU_OFFSET
);

5159 i‡(
£u
 == 0)

5160 
	`sh™n⁄_w¨n
("%s:£u i†mi§ï‹ãd!.\n", 
dev
->
sdisk
.
disk_«me
);

5162 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_wq
, &dev->
ªc⁄fig_w‹k
);

5165 #ifde‡
SHANNON_USE_WRITE_BUFFER


5166 
i
 = 0; i < 
dev
->
hód_cou¡
; i++) {

5167 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô_À
(
dev
->
öå_big_shi·
[
i
], dev->
öãºu±_ve˘
)) {

5168 
	`h™dÀ_bufq
(
dev
, 
i
);

5169 
ªt
++;

5172 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô_À
(
dev
->
bufq_ack_öå_shi·
, dev->
öãºu±_ve˘
)) {

5173 
	`h™dÀ_bufq_ack_öãºu±
(
dev
);

5174 
ªt
++;

5178 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
dev
);

5179 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
))

5182 i‡(
	`sh™n⁄_no_öãºu±
(
dev
))

5183  
ªt
;

5184 #ifde‡
SHANNON_USE_WRITE_BUFFER


5186 
	`upd©e_bufq_limô
(
dev
);

5189 
bôs
 = 
	`sh™n⁄_öãºu±_weight
(
dev
);

5190 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

5191 i‡(
	`sh™n⁄_ã°_bô_À
(
dev
->
lun£ts
[
i
].
ödex
, dev->
öãºu±_ve˘
)) {

5192 #ifde‡
SHANNON_COMPLETION_REPOLL_IN_TASKLET


5193 
	`h™dÀ_lun£t
(
dev
, dev->
lun£ts
 + 
i
, 0);

5195 i‡(!
	`sh™n⁄_ö_so·úq
(Ë&& (
bôs
 <1Ë&& (
	`sh™n⁄_©omic_ªad
(&
dev
->
lun£ts
[
i
].
ö_wq
) == 0))

5196 
	`h™dÀ_lun£t
(
dev
, dev->
lun£ts
 + 
i
, 0);

5198 
	`sh™n⁄_©omic_öc
(&
dev
->
lun£ts
[
i
].
ö_wq
);

5199 i‡(
	`sh™n⁄_queue_w‹k
(
dev
->
h™dÀ_lun_wq
[
i
 % dev->
sh™n⁄_ƒ_wq
], &dev->
lun£ts
[i].
comp_w‹k
) == 0)

5200 
	`sh™n⁄_©omic_dec
(&
dev
->
lun£ts
[
i
].
ö_wq
);

5203 
bôs
--;

5207 
	`sh™n⁄_˛ór_öãºu±
(
dev
);

5210 
	}
}

5212 
	$h™dÀ_com∂ëi⁄_èskÀt_g4
(
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
)

5214 
sh™n⁄_dev
 *
dev
 = 
öãr_¨g
->
sdev
;

5215 
dw‹d_ödex
 = 0;

5217 #ifde‡
SHANNON_COMPLETION_REPOLL_IN_TASKLET


5218 
	`com∂ëi⁄_pﬁl
(
dev
));

5220 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

5222 
pﬁl_ªt
;

5223 
dev
->
pﬁl
[
dw‹d_ödex
] = 
sh™n⁄_pﬁl_times
;

5224 
pﬁl_ªt
 = 
	`com∂ëi⁄_pﬁl
(
dev
);

5225 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
)) {

5226 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

5227 
dev
->
ö_úq
[
dw‹d_ödex
] = 0;

5228 
	`sh™n⁄_b¨rõr
();

5232 i‡(
	`likñy
(
pﬁl_ªt
)) {

5233 i‡(!
sh™n⁄_u£_π_comp_thªad
)

5234 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_comp_wq
, &
öãr_¨g
->
ªpﬁl_w‹k
);

5236 
	`sh™n⁄_π_queue_w‹k
(
dev
->
sh™n⁄_π_comp_wq
, &
öãr_¨g
->
π_ªpﬁl_w‹k
);

5239 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

5240 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

5243 
	}
}

5245 
	$sh™n⁄_π_ªpﬁl_èsk
(
sh™n⁄_π_w‹k_°ru˘
 *
πw‹k
)

5247 
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
 = 
	`c⁄èöî_of
(
πw‹k
, sh™n⁄_öãºu±_¨g, 
π_ªpﬁl_w‹k
);

5248 
sh™n⁄_dev
 *
dev
 = 
öãr_¨g
->
sdev
;

5249 
°©us
, 
dw‹d_ödex
 = 
öãr_¨g
->dword_index < 0 ? 0 : inter_arg->dword_index;

5251 i‡(
	`sh™n⁄_dev_is_g5
(
dev
))

5252 
°©us
 = 
	`com∂ëi⁄_pﬁl_g5
(
dev
, 
dw‹d_ödex
);

5254 
°©us
 = 
	`com∂ëi⁄_pﬁl
(
dev
);

5256 i‡(
°©us
 > 0)

5257 
dev
->
pﬁl
[
dw‹d_ödex
] = 
sh™n⁄_pﬁl_times
;

5259 
dev
->
pﬁl
[
dw‹d_ödex
]--;

5261 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
)) {

5262 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

5263 
dev
->
ö_úq
[
dw‹d_ödex
] = 0;

5264 
	`sh™n⁄_b¨rõr
();

5268 i‡(
dev
->
pﬁl
[
dw‹d_ödex
]) {

5269 
	`sh™n⁄_π_queue_w‹k
(
dev
->
sh™n⁄_π_comp_wq
, &
öãr_¨g
->
π_ªpﬁl_w‹k
);

5270 
	`sh™n⁄_scheduÀ
();

5275 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

5276 
	}
}

5278 
	$sh™n⁄_ªpﬁl_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

5280 
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_öãºu±_¨g, 
ªpﬁl_w‹k
);

5281 
sh™n⁄_dev
 *
dev
 = 
öãr_¨g
->
sdev
;

5282 
°©us
, 
dw‹d_ödex
 = 
öãr_¨g
->dword_index < 0 ? 0 : inter_arg->dword_index;

5284 i‡(
	`sh™n⁄_dev_is_g5
(
dev
))

5285 
°©us
 = 
	`com∂ëi⁄_pﬁl_g5
(
dev
, 
dw‹d_ödex
);

5287 
°©us
 = 
	`com∂ëi⁄_pﬁl
(
dev
);

5289 i‡(
°©us
 > 0)

5290 
dev
->
pﬁl
[
dw‹d_ödex
] = 
sh™n⁄_pﬁl_times
;

5292 
dev
->
pﬁl
[
dw‹d_ödex
]--;

5294 i‡(
	`u∆ikñy
(
dev
->
∂ug_out
)) {

5295 
dev
->
pﬁl
[
dw‹d_ödex
] = 0;

5296 
dev
->
ö_úq
[
dw‹d_ödex
] = 0;

5297 
	`sh™n⁄_b¨rõr
();

5301 i‡(
dev
->
pﬁl
[
dw‹d_ödex
]) {

5302 
	`sh™n⁄_queue_w‹k
(
dev
->
sh™n⁄_comp_wq
, &
öãr_¨g
->
ªpﬁl_w‹k
);

5303 
	`sh™n⁄_scheduÀ
();

5308 
	`wrôe_öãºu±_ve˘‹
(
dev
, 
dw‹d_ödex
);

5309 
	}
}

5311 
	$com∂ëi⁄_èskÀt
(
d©a
)

5313 
sh™n⁄_öãºu±_¨g
 *
öãr_¨g
 = (sh™n⁄_öãºu±_¨g*)
d©a
;

5315 i‡(
	`sh™n⁄_dev_is_g5
(
öãr_¨g
->
sdev
))

5316 
	`h™dÀ_com∂ëi⁄_èskÀt_g5
(
öãr_¨g
);

5318 
	`h™dÀ_com∂ëi⁄_èskÀt_g4
(
öãr_¨g
);

5319 
	}
}

5321 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5322 
	~"sh™n⁄_Âga_emu.c
"

5325 
	$sh™n⁄_öãºu±
(
úq
, *
d©a
)

5327 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
d©a
;

5328 
íåy
;

5330 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

5331 
íåy
 = 
	`sh™n⁄_pci_gë_msix_íåy
(
sdev
->
msix_d©a
, 
úq
, 
MAX_MSIX_INTERRUPTS
);

5332 i‡(
íåy
 =
MAX_MSIX_INTERRUPTS
)

5333  
SHANNON_IRQ_HANDLED
;

5335 
íåy
 = 0;

5337 i‡(
	`u∆ikñy
((
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_RECONFIG


5338 || (
sdev
->
°©e
 & 
SHN_STATE_MASK
Ë=
SHN_STATE_RESET
))

5339  
SHANNON_IRQ_HANDLED
;

5340 i‡(
sdev
->
ö_úq
[
íåy
] == 1) {

5342  
SHANNON_IRQ_HANDLED
;

5344 
sdev
->
ö_úq
[
íåy
] = 1;

5345 
	`sh™n⁄_èskÀt_scheduÀ
(&
sdev
->
comp_èskÀt
[
íåy
]);

5346  
SHANNON_IRQ_HANDLED
;

5347 
	}
}

5349 #i‡
deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5350 
u32
 
	$ªad32
(
u32
 *
addr
)

5352  *
addr
;

5353 
	}
}

5355 
	$wrôe32
(
u32
 
vÆue
, u32 *
addr
)

5357 *
addr
 = 
vÆue
;

5358 
	}
}

5360 
u32
 
	$ªad32
(c⁄° vﬁ©ûê
__iomem
 *
addr
)

5362  
	`sh™n⁄_ªadl
(
addr
);

5363 
	}
}

5365 
	$wrôe32
(
u32
 
vÆue
, vﬁ©ûê
__iomem
 *
addr
)

5367 
	`sh™n⁄_wrôñ
(
vÆue
, 
addr
);

5368 
	}
}

5371 
	$ªvi£_mbr_f‹_com∑tibûôy
(
sh™n⁄_mbr
 *
mbr
)

5373 
i
;

5375 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
; i++) {

5376 i‡(
mbr
->
bad_phy_lun_m≠
[
i
] != ~0)

5379 i‡(
i
 =
BAD_LUN_MAP_ARRAY_SIZE
) {

5380 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
; i++)

5381 
mbr
->
bad_phy_lun_m≠
[
i
] = 0;

5384 
	`sh™n⁄_mem£t
(
mbr
->
ª£rved
, 0, 
	`ARRAY_SIZE
(mbr->reserved));

5385 i‡(
sh™n⁄_high_≥rf‹m™˚
) {

5386 
	`sh™n⁄_öfo
("interrupt_delay=0x%x, dma_max_read_limit=0x%x, clk=0x%x, max_outstanding_bios=0x%x.\n",

5387 
mbr
->
öãºu±_dñay
, mbr->
dma_max_ªad_limô
,

5388 
mbr
->
˛k
, mbr->
max_out°™dög_bios
);

5389 
mbr
->
öãºu±_dñay
 = 1;

5390 
mbr
->
dma_max_ªad_limô
 = 0;

5391 
mbr
->
˛k
 = 0;

5392 
mbr
->
max_out°™dög_bios
 = 0;

5395 i‡(
mbr
->
mbr_upd©e
 == 0xffffffff)

5396 
mbr
->
mbr_upd©e
 = 0;

5397 
	}
}

5399 
	$c›y_mbr_to_mem‹y
(
sh™n⁄_mbr
 *
to
, sh™n⁄_mb∏*
‰om
)

5401 
i
;

5403 
	`sh™n⁄_mem˝y
(
to
->
id
, 
‰om
->id, 
MBR_ID_SIZE
);

5404 
to
->
mbr_f‹m©_vîsi⁄
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->mbr_format_version);

5405 
to
->
h¨dw¨e_vîsi⁄
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->hardware_version);

5406 
to
->
so·w¨e_vîsi⁄
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->software_version);

5407 
to
->
«nd_m™uÁ˘uª
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->nand_manufacture);

5408 
to
->
«nd_id
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->nand_id);

5409 
to
->
ˇ∑côy
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->capacity);

5411 
to
->
lun_amou¡
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->lun_amount);

5412 
to
->
eblocks_ö_lun
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->eblocks_in_lun);

5413 
to
->
∑ges_ö_eblock
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->pages_in_eblock);

5414 
to
->
«nd_∑ge_shi·
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->nand_page_shift);

5415 
to
->
oob_size
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->oob_size);

5416 
to
->
logicb_shi·
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->logicb_shift);

5417 
to
->
∂™e_‹dî
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->plane_order);

5418 
to
->
cfg_ch™√ls
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->cfg_channels);

5419 
to
->
cfg_lun£t_ö_ch™√l
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->cfg_lunset_in_channel);

5420 
to
->
cfg_lun_ö_lun£t
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->cfg_lun_in_lunset);

5422 
to
->
öô_hŸ_sblk
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->init_hot_sblk);

5423 
to
->
öô_cﬁd_sblk
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->init_cold_sblk);

5425 
to
->
öãºu±_dñay
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->interrupt_delay);

5426 
to
->
ecc_codew‹ds_ö_logicb
 = 
‰om
->ecc_codewords_in_logicb;

5427 
to
->
ecc_c‹ª˘i⁄_powî
 = 
‰om
->ecc_correction_power;

5428 
to
->
hi°‹y_îa£_cou¡
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->history_erase_count);

5430 
to
->
powî_cy˛e_cou¡
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->power_cycle_count);

5431 
to
->
powî_⁄_£c⁄ds
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->power_on_seconds);

5432 
to
->
ho°_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->host_write_sectors);

5433 
to
->
tŸÆ_wrôe_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->total_write_sectors);

5434 
to
->
ho°_ªad_£˘‹s
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->host_read_sectors);

5436 
to
->
Êash_drvmode
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->flash_drvmode);

5437 
to
->
luns_≥r_˚_mask
 = 
‰om
->luns_per_ce_mask;

5438 
to
->
lun_m≠_mode
 = 
‰om
->lun_map_mode;

5439 
to
->
øid_°rùes
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->raid_stripes);

5441 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
; i++)

5442 
to
->
bad_phy_lun_m≠
[
i
] = 
	`sh™n⁄_mem_ªadq
(&
‰om
->bad_phy_lun_map[i]);

5443 
to
->
max_∑ges_ö_eblock
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->max_pages_in_eblock);

5444 
to
->
u£r_logicb_shi·
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->user_logicb_shift);

5446 
to
->
„©uª_Êags
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->feature_flags);

5447 
to
->
powî_budgë
 = 
‰om
->power_budget;

5448 
to
->
dma_max_ªad_limô
 = 
‰om
->dma_max_read_limit;

5449 
to
->
˛k
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->clk);

5450 
to
->
max_out°™dög_bios
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->max_outstanding_bios);

5452 
to
->
mbr_upd©e
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->mbr_update);

5454 
to
->
ãmp_thªshﬁd1
 = 
‰om
->temp_threshold1;

5455 
to
->
ãmp_¸ôiˇl_thªshﬁd1
 = 
‰om
->temp_critical_threshold1;

5456 
to
->
ãmp_thªshﬁd2
 = 
‰om
->temp_threshold2;

5457 
to
->
ãmp_¸ôiˇl_thªshﬁd2
 = 
‰om
->temp_critical_threshold2;

5459 
to
->
poﬁ_w©îm¨k
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->pool_watermark);

5460 
to
->
sdev_cou¡
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->sdev_count);

5461 
to
->
sdev_id
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->sdev_id);

5463 
to
->
sh¨ed_∑ges
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->shared_pages);

5464 
to
->
p£udo_∂™e
 = 
‰om
->pseudo_plane;

5465 
to
->
∂™e_cou¡
 = 
‰om
->plane_count;

5466 
to
->
≥riod_ªad_≥riod
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->period_read_period);

5467 
to
->
≥riod_ªad_µa
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->period_read_ppa);

5468 
to
->
dummy_w‹dlöe
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->dummy_wordline);

5469 
to
->
max_kìp_îa£d_hours
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->max_keep_erased_hours);

5470 
to
->
ªad_ªåy
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->read_retry);

5471 
to
->
ecc_Áûuª_øã_thªshﬁd
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->ecc_failure_rate_threshold);

5472 
to
->
max_wrôe_bw
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->max_write_bw);

5473 
to
->
d©a_ªã¡i⁄_öãrvÆ
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->data_retention_interval);

5474 
to
->
˝s_vîsi⁄
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->cps_version);

5475 
to
->
≥_cy˛e
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->pe_cycle);

5477 
to
->
ovîœp_sblk
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->overlap_sblk);

5478 
	}
}

5480 
	$gë_lun_comm⁄_öfo
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_mbr
 *
mbr
, 
lun£t_ödex
)

5482 
sh™n⁄_lun£t
 *
lun£t
;

5483 
sh™n⁄_cmd
 *
¥e_ªad
, *
ªad
, *
no_›
;

5484 
cmdid
;

5485 *
buf
;

5486 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5487 
sh™n⁄_dma_addr_t
 
dma_buf
;

5489 
u8
 
ecc
;

5490 
u64
 
mëad©a
, *
±e
;

5491 
lo›
, 
ªt
 = -1, 
ªåõs
 = 0;

5493 
lun£t
 = &
dev
->
lun£ts
[
lun£t_ödex
];

5495 
buf
 = 
	`sh™n⁄_kzÆloc
(4096, 
GFP_SHANNON
);

5496 i‡(
buf
 =
NULL
) {

5497 
	`sh™n⁄_îr
("Allocate memory failed!\n");

5498  -
ENOMEM
;

5500 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5501 
dma_buf
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
dev
->
pci_dev
, 
buf
, 4096, 
SHANNON_DMA_FROMDEVICE
);

5504 
ªåy
:

5507 
lun£t
->
cq_èû
 =Üun£t->
cq_hód
;

5508 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_hód
;

5510 
cmdid
 = 
lun£t
->
sq_hód
 >> 3;

5511 
¥e_ªad
 = (
sh™n⁄_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

5512 
¥e_ªad
->
›code
 = 
sh_cmd_¥e_ªad
;

5513 
¥e_ªad
->
logicbs
 = 0;

5514 
¥e_ªad
->
hód
 = 0;

5515 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
dev
, 0, 
lun£t_ödex
 * dev->
max_lun_ö_lun£t
), &
¥e_ªad
->
dw‹d1
);

5516 
lun£t
->
sq_hód
 += 8;

5518 
ªad
 = 
	`cmd_queue_öc
(
¥e_ªad
, 1);

5519 i‡(
ªåõs
 && (
dev
->
adv™˚d_ªad_°©e
 & 
ADV_READ_SUPPORT_MASK
))

5520 
ªad
->
›code
 = 
sh_cmd_adv™˚d_ªad
;

5522 
ªad
->
›code
 = 
sh_cmd_ªad
;

5523 
ªad
->
logicbs
 = 0;

5524 
ªad
->
fú°_logicb
 = 0;

5525 
ªad
->
hód
 = 0;

5526 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
dev
, 
	`gë_cmd_µa
(dev, &
¥e_ªad
->
dw‹d1
), 
lun£t_ödex
 * dev->
max_lun_ö_lun£t
), &
ªad
->dword1);

5528 
±e
 = 
	`cmd_queue_öc
(
ªad
, 1);

5529 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5530 *
±e
 = ()
buf
;

5532 
	`sh™n⁄_mem_wrôeq
(
dma_buf
, 
±e
);

5534 
lun£t
->
sq_hód
 += 16;

5536 i‡(
ªåõs
 && (
dev
->
adv™˚d_ªad_°©e
 & 
ADV_READ_SUPPORT_MASK
)) {

5537 
no_›
 = 
	`cmd_queue_öc
(
ªad
, 2);

5538 
no_›
->
›code
 = 
sh_cmd_no_›
;

5539 
no_›
->
hód
 = 0;

5540 
	`sh™n⁄_mem_wrôñ
(
	`make_cmd_dw‹d1
(
dev
, 0, 
lun£t_ödex
 * dev->
max_lun_ö_lun£t
), &
no_›
->
dw‹d1
);

5541 
lun£t
->
sq_hód
 += 8;

5544 
	`wrôe_ªg_ß„
(
dev
, 
lun£t
->
sq_hód
, &lun£t->
lun_b¨
->sq_head);

5545 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5546 
	`sh™n⁄_wake_up_¥o˚ss
(
¥eöô_emu_thªad
);

5549 
lo›
 = 0;

5551 
	`sh™n⁄_m¶ìp
(100);

5552 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &lun£t->
lun_b¨
->cq_head);

5553 
	`debugs2
("cq_hód=%x.\n", 
lun£t
->
cq_hód
);

5554 
lo›
++;

5556 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5557 
lun£t
->
sq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &lun£t->
lun_b¨
->sq_head);

5558 
	`debugs3
("sq_hód=%x.\n", 
lun£t
->
sq_hód
);

5559 
	`debugs3
("°©us=0x%x.\n", 
	`ªad_ªg_ß„
(
dev
, &
lun£t
->
lun_b¨
->
lun_°©us
));

5560 
	`debugs3
("sq_addr=0x%lx, cq_addr=0x%lx.\n", ()
lun£t
->
sq_addr
, (Óun£t->
cq_addr
);

5561 
	`debugs3
("lun_£˘i⁄=0x%lx.\n", ()
lun£t
->
lun_b¨
);

5563 i‡((
lo›
 % 100) == 99)

5564 
	`sh™n⁄_log
("%s(): sq_head=0x%x, cq_head=0x%x,Üun_status=0x%x",

5565 
__func__
, 
lun£t
->
sq_hód
,Üun£t->
cq_hód
, 
	`ªad_ªg_ß„
(
dev
, &lun£t->
lun_b¨
->
lun_°©us
));

5567 } 
lun£t
->
sq_hód
 !lun£t->
cq_hód
);

5569 
ecc
 = *(
u8
 *)(
lun£t
->
cq_addr
 + (lun£t->
cq_èû
 >> 3) + 1);

5570 
mëad©a
 = 
	`sh™n⁄_mem_ªadq
(
lun£t
->
cq_addr
 + (lun£t->
cq_èû
 >> 3) + 2);

5572 i‡((
ecc
 >
SH_FAKE_ERR
Ë|| (
mëad©a
 !
MBR_WATERMARK
)) {

5573 i‡(
ªåõs
) {

5574 
	`debugs1
("ecc=%d, mëad©a=0x%Œx.\n", 
ecc
, 
mëad©a
);

5575 
out
;

5577 
ªåõs
++;

5578 
ªåy
;

5581 
ªt
 = 0;

5583 
out
:

5584 
lun£t
->
cq_èû
 =Üun£t->
cq_hód
;

5585 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_hód
;

5586 
lun£t
->
sq_hód_tmp
 =Üun£t->
sq_hód
;

5587 
lun£t
->
sq_hw_hód
 =Üun£t->
sq_hód
;

5588 
lun£t
->
cq_hw_hód
 =Üun£t->
sq_hód
;

5590 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

5591 
	`sh™n⁄_dma_unm≠_sögÀ
(
dev
->
pci_dev
, 
dma_buf
, 4096, 
SHANNON_DMA_FROMDEVICE
);

5593 
	`sh™n⁄_mem£t
(
mbr
, 0, (
sh™n⁄_mbr
));

5594 
	`c›y_mbr_to_mem‹y
(
mbr
, 
buf
);

5595 
	`ªvi£_mbr_f‹_com∑tibûôy
(
mbr
);

5597 
	`sh™n⁄_k‰ì
(
buf
);

5598  
ªt
;

5599 
	}
}

5601 
	$™Æyze_mbr_öfo
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_mbr
 *
mbr
)

5603 
i
;

5605 
	`sh™n⁄_mem˝y
(&
dev
->
mbr
, mbr, (
sh™n⁄_mbr
));

5608 
dev
->
sdev_id
 = dev->
mbr
.sdev_id;

5609 
dev
->
sdisk
.
£˘‹s
 = dev->
mbr
.
ˇ∑côy
;

5610 
dev
->
lun_cou¡
 = dev->
mbr
.
lun_amou¡
;

5611 
dev
->
p£udo_∂™e
 = dev->
mbr
.pseudo_plane;

5612 i‡(
dev
->
mbr
.
∂™e_cou¡
)

5613 
dev
->
∂™es
 = dev->
mbr
.
∂™e_cou¡
;

5615 
dev
->
∂™es
 = 1 << dev->
mbr
.
∂™e_‹dî
;

5616 
dev
->
su•icious_bad_lun_ödiˇt‹
 = dev->
∂™es
 * 3;

5617 i‡(
dev
->
mbr
.
sh¨ed_∑ges
)

5618 
dev
->
sh¨ed_∑ges
 = dev->
mbr
.shared_pages;

5619 i‡(
dev
->
mbr
.
dummy_w‹dlöe
)

5620 
dev
->
dummy_w‹dlöe
 = dev->
mbr
.dummy_wordline;

5621 i‡(
dev
->
mbr
.
p£udo_∂™e
)

5622 
dev
->
eblocks_ö_lun
 = dev->
mbr
.eblocks_ö_lu¿* dev->
∂™es
;

5624 
dev
->
eblocks_ö_lun
 = dev->
mbr
.eblocks_in_lun;

5625 
dev
->
∑ges_ö_eblock
 = dev->
mbr
.pages_in_eblock;

5626 
dev
->
«nd_∑ge_shi·
 = dev->
mbr
.nand_page_shift;

5627 
dev
->
oob_size
 = dev->
mbr
.oob_size;

5628 
dev
->
logicb_shi·
 = dev->
mbr
.logicb_shift;

5629 
dev
->
max_wrôe_bw
 = 1024*1024ULL * dev->
mbr
.max_write_bw;

5630 i‡(
dev
->
u£r_logicb_shi·
 == 0) {

5631 
dev
->
u£r_logicb_shi·
 = dev->
mbr
.user_logicb_shift;

5632 i‡((
dev
->
u£r_logicb_shi·
 == 0) || (dev->user_logicb_shift == 0xffffffff)) {

5633 
dev
->
u£r_logicb_shi·
 = dev->
logicb_shi·
;

5634 
dev
->
mbr
.
u£r_logicb_shi·
 = dev->user_logicb_shift;

5635 
dev
->
mbr
.
u£r_logicb_shi·
 = dev->user_logicb_shift;

5638 
dev
->
∂™e_‹dî
 = dev->
mbr
.plane_order;

5639 i‡((
dev
->
mbr
.
öãºu±_dñay
 == 0) || (dev->mbr.interrupt_delay == 0xffff))

5640 
dev
->
öãºu±_dñay
 = 1;

5642 
dev
->
öãºu±_dñay
 = dev->
mbr
.interrupt_delay;

5644 
dev
->
cfg_ch™√ls
 = dev->
mbr
.cfg_channels;

5645 
dev
->
cfg_lun£t_ö_ch™√l
 = dev->
mbr
.cfg_lunset_in_channel;

5646 
dev
->
cfg_lun_ö_lun£t
 = dev->
mbr
.cfg_lun_in_lunset;

5647 
dev
->
vîy_öôül_sblk
[
HOT_INDEX
] = dev->
mbr
.
öô_hŸ_sblk
;

5648 
dev
->
vîy_öôül_sblk
[
COLD_INDEX
] = dev->
mbr
.
öô_cﬁd_sblk
;

5649 i‡((
dev
->
mbr
.
powî_⁄_£c⁄ds
 + 1) == 0)

5650 
dev
->
powî_⁄_£c⁄ds
 = 0;

5652 
dev
->
powî_⁄_£c⁄ds
 = dev->
mbr
.power_on_seconds;

5653 i‡((
dev
->
mbr
.
powî_cy˛e_cou¡
 + 1) == 0)

5654 
dev
->
powî_cy˛e_cou¡
 = 0;

5656 
dev
->
powî_cy˛e_cou¡
 = dev->
mbr
.power_cycle_count;

5657 i‡((
dev
->
mbr
.
ho°_wrôe_£˘‹s
 + 1) == 0)

5658 
dev
->
ho°_wrôe_£˘‹s
 = 0;

5660 
dev
->
ho°_wrôe_£˘‹s
 = dev->
mbr
.host_write_sectors;

5661 i‡((
dev
->
mbr
.
tŸÆ_wrôe_£˘‹s
 + 1) == 0)

5662 
dev
->
tŸÆ_wrôe_£˘‹s
 = 0;

5664 
dev
->
tŸÆ_wrôe_£˘‹s
 = dev->
mbr
.total_write_sectors;

5665 i‡((
dev
->
mbr
.
ho°_ªad_£˘‹s
 + 1) == 0)

5666 
dev
->
ho°_ªad_£˘‹s_hi°‹y
 = 0;

5668 
dev
->
ho°_ªad_£˘‹s_hi°‹y
 = dev->
mbr
.
ho°_ªad_£˘‹s
;

5669 
dev
->
∑rôy_groups
 = (dev->
mbr
.
øid_°rùes
 == 0)?1:dev->mbr.raid_stripes;

5670 i‡(
dev
->
mbr
.
„©uª_Êags
 == ~0)

5671 
dev
->
mbr
.
„©uª_Êags
 = 0;

5672 
dev
->
¥i‹ôize_wrôe
 = dev->
mbr
.
„©uª_Êags
 & 
PRIORITIZE_WRITE
;

5673 
dev
->
©omic_wrôe
 = dev->
mbr
.
„©uª_Êags
 & 
ATOMIC_WRITE
;

5674 
dev
->
lba_f‹m©
 = !!(dev->
mbr
.
„©uª_Êags
 & 
BIG_EPILOG
);

5675 
dev
->
com∑˘_ïûog
 = !!(dev->
mbr
.
„©uª_Êags
 & 
COMPACT_EPILOG
);

5676 
dev
->
¢≠_ªad_íabÀ
 = !!(dev->
mbr
.
„©uª_Êags
 & 
SNAP_READ_ENABLE
);

5677 
dev
->
ovîœp_wrôe
 = !!(dev->
mbr
.
„©uª_Êags
 & 
OVERLAP_WRITE
);

5678 
dev
->
Á°_ªad_íabÀ
 = !!(dev->
mbr
.
„©uª_Êags
 & 
FAST_READ_ENABLE
);

5680 i‡(
dev
->
mbr
.
≥riod_ªad_≥riod
 != 0)

5681 
dev
->
≥riod_ªad
.
≥riod
 = dev->
mbr
.
≥riod_ªad_≥riod
;

5682 i‡(
dev
->
mbr
.
≥riod_ªad_µa
 < (dev->
∑ges_ö_eblock
 * dev->
∂™es
))

5683 
dev
->
≥riod_ªad
.
µa
 = dev->
mbr
.
≥riod_ªad_µa
;

5685 
dev
->
ªåy_times_⁄_îr‹
 = ((dev->
mbr
.
ªad_ªåy
 & 
REREAD_NUM_MASK
Ë> 
REREAD_TIMES_ON_ERROR
) ?

5686 (
dev
->
mbr
.
ªad_ªåy
 & 
REREAD_NUM_MASK
Ë: 
REREAD_TIMES_ON_ERROR
;

5688 
dev
->
ecc_Áûuª_øã_thªshﬁd
 = dev->
mbr
.ecc_failure_rate_threshold ?

5689 
dev
->
mbr
.
ecc_Áûuª_øã_thªshﬁd
 : 
ECC_FAILURE_RATE_THRESHOLD
;

5691 
dev
->
d©a_ªã¡i⁄_öãrvÆ
 = dev->
mbr
.data_retention_interval ?

5692 
dev
->
mbr
.
d©a_ªã¡i⁄_öãrvÆ
 : 
DEFAULT_DATA_RETENTION_INTERVAL
;

5694 
dev
->
Êash_≥_thªshﬁd
 = dev->
mbr
.
≥_cy˛e
 ?

5695 
dev
->
mbr
.
≥_cy˛e
 : 
FLASH_PE_COUNT_SPEC
;

5697 
	`debugs1
("ˇ∑côy=%Œu.\n", 
dev
->
sdisk
.
£˘‹s
);

5698 
	`debugs1
("lun_cou¡=%d.\n", 
dev
->
lun_cou¡
);

5699 
	`debugs1
("eblocks_ö_lun=%d.\n", 
dev
->
eblocks_ö_lun
);

5700 
	`debugs1
("∑ges_ö_eblock=%d.\n", 
dev
->
∑ges_ö_eblock
);

5701 
	`debugs1
("«nd_∑ge_shi·=%d.\n", 
dev
->
«nd_∑ge_shi·
);

5702 
	`debugs1
("oob_size=%d.\n", 
dev
->
oob_size
);

5703 
	`debugs1
("logicb_shi·=%d.\n", 
dev
->
logicb_shi·
);

5704 
	`debugs1
("u£r_logicb_shi·=%d.\n", 
dev
->
u£r_logicb_shi·
);

5705 
	`debugs1
("∂™e_‹dî=%d.\n", 
dev
->
∂™e_‹dî
);

5706 
	`debugs1
("öãºu±_dñay=%d.\n", 
dev
->
öãºu±_dñay
);

5707 
	`debugs1
("c⁄fig_ch™√ls=%d.\n", 
dev
->
cfg_ch™√ls
);

5708 
	`debugs1
("c⁄fig_lun£t_ö_ch™√l=%d.\n", 
dev
->
cfg_lun£t_ö_ch™√l
);

5709 
	`debugs1
("c⁄fig_lun_ö_lun£t=%d.\n", 
dev
->
cfg_lun_ö_lun£t
);

5710 
	`debugs1
("öô_hŸ_sblk=%d.\n", 
dev
->
vîy_öôül_sblk
[
HOT_INDEX
]);

5711 
	`debugs1
("öô_cﬁd_sblk=%d.\n", 
dev
->
vîy_öôül_sblk
[
COLD_INDEX
]);

5712 
	`debugs1
("max_wrôe_bw=%u\n", 
dev
->
max_wrôe_bw
);

5713 
i
 = 0; i < 
BAD_LUN_MAP_ARRAY_SIZE
; i++)

5714 
	`debugs1
("bad_phy_lun_m≠[%d]=0x%Œx\n", 
i
, 
dev
->
mbr
.
bad_phy_lun_m≠
[i]);

5715 
	}
}

5717 
	$check_comm⁄_öfo
(
sh™n⁄_dev
 *
sdev
)

5719 
max_lun_cou¡
;

5721 i‡(
sdev
->
mbr
.
mbr_f‹m©_vîsi⁄
 > 
CURRENT_MBR_FORMAT_VERSION
) {

5722 
	`sh™n⁄_îr
("New hardware is NOT supported,Ölease update your driver!\n");

5726 i‡((
sdev
->
cfg_ch™√ls
 < 1Ë|| (sdev->cfg_ch™√l†> sdev->
max_ch™√ls
)) {

5727 
	`sh™n⁄_îr
("Wr⁄g cfg_ch™√ls=%d.\n", 
sdev
->
cfg_ch™√ls
);

5731 i‡((
sdev
->
cfg_lun£t_ö_ch™√l
 < 1Ë|| (sdev->cfg_lun£t_ö_ch™√»> sdev->
max_lun£t_ö_ch™√l
)) {

5732 
	`sh™n⁄_îr
("Wr⁄g cfg_lun£t_ö_ch™√l=%d.\n", 
sdev
->
cfg_lun£t_ö_ch™√l
);

5736 i‡((
sdev
->
cfg_lun_ö_lun£t
 < 1Ë|| (sdev->cfg_lun_ö_lun£à> sdev->
max_lun_ö_lun£t
)) {

5737 
	`sh™n⁄_îr
("Wr⁄g cfg_lun_ö_lun£t=%d.\n", 
sdev
->
cfg_lun_ö_lun£t
);

5742 
max_lun_cou¡
 = 
	`mö
(
MAX_LUN_COUNT
, (
sdev
->
cfg_lun_ö_lun£t
 * sdev->
cfg_lun£t_ö_ch™√l
 * sdev->
cfg_ch™√ls
));

5743 i‡((
sdev
->
lun_cou¡
 > 
max_lun_cou¡
) || (sdev->lun_count < 4)) {

5744 
	`sh™n⁄_îr
("we only supportÜun count between 4ánd 512 inÅhis version.\n");

5749 i‡((
sdev
->
sdisk
.
£˘‹s
 > ((
u64
)sdev->
lun_cou¡
 * sdev->
eblocks_ö_lun
 * sdev->
∑ges_ö_eblock
 * sdev->
logicbs_ö_∑ge
 * (sdev->
logicb_size
 >> 9))) \

5750 || (
sdev
->
sdisk
.
£˘‹s
 == 0) || ((sdev->sdisk.sectors & 0x7) != 0)) {

5751 
	`sh™n⁄_îr
("wr⁄g disk c≠acôy i¿mbr. c≠acôy=%ld se˘‹s.\n", ()
sdev
->
sdisk
.
£˘‹s
);

5755 i‡(
sdev
->
mbr
.
lun_m≠_mode
 >
MAX_LUN_MAP_MODE
) {

5756 
	`sh™n⁄_îr
("Wr⁄gÜun_m≠_mode=%u.\n", 
sdev
->
mbr
.
lun_m≠_mode
);

5760 i‡(
sdev
->
mbr
.
dma_max_ªad_limô
 != 0xff && sdev->mbr.dma_max_read_limit > 6) {

5761 
	`sh™n⁄_îr
("Wr⁄g dma_max_ªad_limô=%d.\n", 
sdev
->
mbr
.
dma_max_ªad_limô
);

5766 
	}
}

5768 
	#READ_MBR_COUNT
 4

	)

5769 
	$gë_œã°_mbr
(
sh™n⁄_dev
 *
sdev
)

5771 
sh™n⁄_mbr
 *
mbrs
;

5772 
i
, 
j
, 
œã°_ödex
, 
ªt
 = -1;

5773 
u32
 
max_upd©e
;

5775 
mbrs
 = 
	`sh™n⁄_kmÆloc
((*mbrsË* 
READ_MBR_COUNT
, 
GFP_SHANNON
);

5776 i‡(
mbrs
 =
NULL
) {

5777 
	`sh™n⁄_îr
("canÇotállocate memory forÑeading mbr.\n");

5778  -
ENOMEM
;

5780 
j
 = 0;

5781 
i
 = 0; i < 
MBR_MAX_TRY
; i++) {

5782 
ªt
 = 
	`gë_lun_comm⁄_öfo
(
sdev
, 
mbrs
 + 
j
, 
i
);

5783 i‡(
ªt
 == 0) {

5784 
j
++;

5785 i‡(
j
 =
READ_MBR_COUNT
)

5789 i‡(
j
 < 
READ_MBR_COUNT
) {

5790 
	`sh™n⁄_öfo
("%s: gë %dávaûabÀ mb∏öf‹m©i⁄.\n", 
sdev
->
sdisk
.
disk_«me
, 
j
);

5791 
	`sh™n⁄_k‰ì
(
mbrs
);

5795 
œã°_ödex
 = 0;

5796 
max_upd©e
 = 
mbrs
[0].
mbr_upd©e
;

5797 
	`debugs1
("ödex=0, mbr_upd©e=%d.\n", 
mbrs
[0].
mbr_upd©e
);

5798 
j
 = 1; j < 
READ_MBR_COUNT
; j++) {

5799 
	`debugs1
("ödex=%d, mbr_upd©e=%d.\n", 
j
, 
mbrs
[j].
mbr_upd©e
);

5800 i‡(
mbrs
[
j
].
mbr_upd©e
 > 
max_upd©e
) {

5801 
max_upd©e
 = 
mbrs
[
j
].
mbr_upd©e
;

5802 
œã°_ödex
 = 
j
;

5805 
	`sh™n⁄_öfo
("gë mb∏öf‹m©i⁄ suc˚ssfuŒy. max_upd©e=%d.\n", 
max_upd©e
);

5806 
	`™Æyze_mbr_öfo
(
sdev
, 
mbrs
 + 
œã°_ödex
);

5807 
	`sh™n⁄_k‰ì
(
mbrs
);

5809 
	}
}

5811 
	$dëe˘_comm⁄_öfo
(
sh™n⁄_dev
 *
dev
)

5813 
ªt
;

5815 
ªt
 = 
	`gë_œã°_mbr
(
dev
);

5816 i‡(
ªt
 =0 ||Ñë =-
ENOMEM
)

5817  
ªt
;

5819 
	`sh™n⁄_öfo
("retryÅoÑead mbr in 4k mode.\n");

5820 
dev
->
logicb_shi·
 = 12;

5821 
dev
->
∂™e_‹dî
 = 0;

5822 
dev
->
∑rôy_groups
 = 1;

5823 
dev
->
«nd_∑ge_shi·
 = 13;

5824 
dev
->
∑ges_ö_eblock
 = 16;

5825 
dev
->
∂™es
 = 1 << dev->
∂™e_‹dî
;

5826 
	`ˇlcuœã_globÆ_v¨übÀ
(
dev
);

5827 
	`öô_globÆ_c⁄fig_ªgs
(
dev
);

5829 i‡(
	`gë_œã°_mbr
(
dev
) == 0)

5832 
	`sh™n⁄_îr
("%s: c™ÇŸÑód MBR inf‹m©i⁄. I‡youáª usögáÇew h¨dw¨e,ÖÀa£ upd©êyou∏drivî vîsi⁄!\n", 
dev
->
sdisk
.
disk_«me
);

5834 
	}
}

5836 
	$gë_lun_Êashid
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_lun_b¨
 
__iomem
 *
lun_£˘i⁄
, 
phy_lun
, 
check_id
)

5838 
sh™n⁄_cmd
 *
sq_addr
;

5839 vﬁ©ûê
sh™n⁄_cmd
 *
cq_addr
;

5840 
sh™n⁄_ªgi°î_cmd
 *
ªadid
;

5841 
sh™n⁄_dma_addr_t
 
sq_dma_addr
, 
cq_dma_addr
;

5842 
u32
 
sq_hód
, 
cq_hód
, 
cq_èû
;

5843 
cmdid
;

5844 
i
 = 0, 
ªt
 = -1;

5845 
u64
 
id
;

5847 
sq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, &
sq_dma_addr
, 
GFP_SHANNON
);

5848 i‡(
sq_addr
 =
NULL
)

5849  
ªt
;

5850 
cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, &
cq_dma_addr
, 
GFP_SHANNON
);

5851 i‡(
cq_addr
 =
NULL
) {

5852 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
sq_addr
, 
sq_dma_addr
);

5853  
ªt
;

5856 
	`debugs2
("sq_dma_addr0x%Œx.\n", 
sq_dma_addr
);

5857 
	`debugs2
("cq_dma_addr0x%Œx.\n", 
cq_dma_addr
);

5859 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

5860 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

5861 
	`wrôe32
((
u32
)(()
sq_addr
 & 0xffffffff), &
lun_£˘i⁄
->
sq_dma_addr0
);

5862 
	`wrôe32
((
u32
)(()
sq_addr
 >> 32), &
lun_£˘i⁄
->
sq_dma_addr1
);

5863 
	`wrôe32
((
u32
)(()
cq_addr
 & 0xffffffff), &
lun_£˘i⁄
->
cq_dma_addr0
);

5864 
	`wrôe32
((
u32
)(()
cq_addr
 >> 32), &
lun_£˘i⁄
->
cq_dma_addr1
);

5866 
	`wrôe32
((
u32
)(
sq_dma_addr
 & 0xffffffff), &
lun_£˘i⁄
->
sq_dma_addr0
);

5867 
	`wrôe32
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sq_dma_addr
 >> 32Ë: 0, &
lun_£˘i⁄
->
sq_dma_addr1
);

5868 
	`wrôe32
((
u32
)(
cq_dma_addr
 & 0xffffffff), &
lun_£˘i⁄
->
cq_dma_addr0
);

5869 
	`wrôe32
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
cq_dma_addr
 >> 32Ë: 0, &
lun_£˘i⁄
->
cq_dma_addr1
);

5871 
sq_hód
 = 
	`ªad32
(&
lun_£˘i⁄
->sq_head);

5872 
cq_hód
 = 
	`ªad32
(&
lun_£˘i⁄
->cq_head);

5873 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

5875 
cq_èû
 = 
cq_hód
;

5877 
cmdid
 = 
sq_hód
 >> 3;

5878 
ªadid
 = (
sh™n⁄_ªgi°î_cmd
 *)(
sq_addr
 + 
cmdid
);

5879 
ªadid
->
›code
 = 
sh_cmd_ªg_ªad
;

5880 
ªadid
->
Êash_ªg
.
Êash_addr
 = 0;

5881 
ªadid
->
Êash_ªg
.
byãs
 = 8;

5882 
ªadid
->
Êash_ªg
.
Êash_cmd
 = 0x90;

5883 
ªadid
->
Êash_ªg
.
phy_lun
 =Öhy_lun;

5884 
sq_hód
 += 8;

5885 
	`wrôe_ªg_ß„
(
dev
, 
sq_hód
, &
lun_£˘i⁄
->sq_head);

5888 
	`sh™n⁄_m¶ìp
(2);

5889 
cq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &
lun_£˘i⁄
->cq_head);

5890 
	`debugs3
("sq_hód=%d.\n", 
sq_hód
);

5891 
	`debugs3
("cq_hód=%d.\n", 
cq_hód
);

5892 
	`debugs3
("°©us=0x%x.\n", 
	`ªad_ªg_ß„
(
dev
, &
lun_£˘i⁄
->
lun_°©us
));

5893 
	`debugs3
("sq_addr=0x%lx, cq_addr=0x%lx.\n", ()
sq_addr
, ()
cq_addr
);

5894 
	`debugs3
("lun_£˘i⁄=0x%lx.\n", ()
lun_£˘i⁄
);

5895 } 
sq_hód
 !
cq_hód
);

5897 
id
 = 
	`sh™n⁄_mem_ªadq
(
cq_addr
 + (
cq_èû
>>3));

5898 
cq_èû
 = 
cq_hód
;

5900 i‡(!
	`sh™n⁄_dev_is_g5
(
dev
)) {

5901 i‡(!
check_id
)

5902 
dev
->
ifmode
 = -1;

5903 
i
 = 0; i < 
	`ARRAY_SIZE
(
suµ‹ãd_ids
); i++) {

5904 i‡(
suµ‹ãd_ids
[
i
].
Êashid
 =
id
) {

5905 
dev
->
ifmode
 = 
suµ‹ãd_ids
[
i
].ifmode;

5906 
dev
->
ovîdrive
 = 
suµ‹ãd_ids
[
i
].overdrive;

5907 
dev
->
‰eq_mode
 = 
suµ‹ãd_ids
[
i
].freq_mode;

5908 
dev
->
mi¸ocode_¨øy
[0].
èbÀ
 = 
suµ‹ãd_ids
[
i
].
mi¸ocode_èbÀ
;

5909 
dev
->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 = 
suµ‹ãd_ids
[
i
].microcode_length;

5910 
dev
->
mi¸ocode_¨øy
[0].
°¨t_ªg
 = 
SH_ADVANCED_READ_OFFSET
;

5911 
dev
->
mi¸ocode_¨øy
[0].
°©e
 = 
MICROCODE_VALID_MASK
;

5912 
dev
->
sh¨ed_∑ges
 = 
suµ‹ãd_ids
[
i
].shared_pages;

5913 
	`sh™n⁄_mem˝y
(
dev
->
„©uª_cfg_li°
, 
suµ‹ãd_ids
[
i
].feature_cfg_list, (supported_ids[i].feature_cfg_list));

5918 i‡(
i
 =
	`ARRAY_SIZE
(
suµ‹ãd_ids
))

5919 
	`sh™n⁄_îr
("%s: PÀa£ upd©êyou drivî vîsi⁄Åÿsuµ‹àthê√w fœshid=0x%16.16Œx,Öhy_lun=%d.\n", 
dev
->
sdisk
.
disk_«me
, 
id
, 
phy_lun
);

5922 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
sq_addr
, 
sq_dma_addr
);

5923 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
cq_addr
, 
cq_dma_addr
);

5925 i‡(
check_id
) {

5926 i‡(
dev
->
Êashid
 !
id
) {

5927 
	`sh™n⁄_îr
("InvÆid ID:Öyh_lun=%d, id=0x%Œx.\n", 
phy_lun
, 
id
);

5933 
dev
->
Êashid
 = 
id
;

5934 
	`debugs1
("Êash id=0x%16.16Œx, ifmode=%d, ovîdrive=%d, fªq_mode=%d.\n", 
id
, 
dev
->
ifmode
, dev->
ovîdrive
, dev->
‰eq_mode
);

5936 i‡(
	`sh™n⁄_dev_is_g5
(
dev
Ë|| (dev->
ifmode
 != -1))

5940 
	}
}

5942 
	$dëe˘_Êashid
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
)

5944 
lun£t
, 
phy_lun
, 
ªt
 = -1;

5946 i‡(
dev
->
n‹_mbr_°©us
 & 
READ_FROM_NORFLASH
)

5948 
lun£t
 = 0;Üun£à< 
MBR_MAX_TRY
;Üunset++) {

5949 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

5950 
phy_lun
 = 
lun£t
 * 
dev
->
max_lun_ö_lun£t
;Öhy_lun < (lunset + 1) * dev->max_lun_in_lunset;Öhy_lun++) {

5951 i‡(!
	`sh™n⁄_ã°_bô
(
phy_lun
, (*)
dev
->
mbr
.
bad_phy_lun_m≠
))

5954 i‡(
phy_lun
 =(
lun£t
 + 1Ë* 
dev
->
max_lun_ö_lun£t
)

5957 
phy_lun
 = 
lun£t
 * 
dev
->
max_lun_ö_lun£t
;

5958 
ªt
 = 
	`gë_lun_Êashid
(
dev
, 
lun_£˘i⁄
 + 
lun£t
, 
phy_lun
, 0);

5959 i‡(
ªt
 == 0)

5963 i‡(
	`sh™n⁄_dev_is_g5
(
dev
Ë&& (
ªt
 == 0)) {

5964 
dev
->
övÆid_Êashids
 = (*)
	`sh™n⁄_kzÆloc
((*Ë* dev->
lun_cou¡
, 
GFP_SHANNON
);

5965 i‡(!
dev
->
övÆid_Êashids
) {

5966 
	`sh™n⁄_îr
("Allocate memory failed when checkáll flashid.\n");

5967 
ªt
 = -1;

5968 
out
;

5970 
lun£t
 = 0;Üun£à< 
dev
->
lun£t_cou¡
;Üunset++) {

5971 
phy_lun
 = 
lun£t
 * 
dev
->
max_lun_ö_lun£t
;Öhy_lun < (lunset + 1) * dev->max_lun_in_lunset;Öhy_lun++) {

5972 i‡(!
	`sh™n⁄_ã°_bô
(
phy_lun
, (*)
dev
->
mbr
.
bad_phy_lun_m≠
)) {

5973 i‡(
	`gë_lun_Êashid
(
dev
, 
lun_£˘i⁄
 + 
lun£t
, 
phy_lun
, 1) < 0)

5974 
dev
->
övÆid_Êashids
[
phy_lun_to_logiˇl_lun
[dev->
mbr
.
lun_m≠_mode
](dev, 
phy_lun
)] = 1;

5980 
out
:

5981  
ªt
;

5982 
	}
}

5984 
	$£t_ãm≥øtuª_£ns‹_thªshﬁds
(
sh™n⁄_dev
 *
dev
)

5986 
u32
 
thªshﬁd
;

5987 
u8
 
ãmp_thªshﬁd1
 = 0xff, 
ãmp_¸ôiˇl_thªshﬁd1
 = 0xff;

5988 
u8
 
ãmp_thªshﬁd2
 = 0xff, 
ãmp_¸ôiˇl_thªshﬁd2
 = 0xff;

5990 i‡(
dev
->
mbr
.
ãmp_thªshﬁd1
 > 0 && dev->mbr.temp_threshold1 != 0xff &&

5991 
dev
->
mbr
.
ãmp_¸ôiˇl_thªshﬁd1
 > dev->mbr.
ãmp_thªshﬁd1
) {

5992 
ãmp_thªshﬁd1
 = 
dev
->
mbr
.temp_threshold1;

5993 
ãmp_¸ôiˇl_thªshﬁd1
 = 
dev
->
mbr
.temp_critical_threshold1;

5996 i‡(
dev
->
mbr
.
ãmp_thªshﬁd2
 > 0 && dev->mbr.temp_threshold2 != 0xff &&

5997 
dev
->
mbr
.
ãmp_¸ôiˇl_thªshﬁd2
 > dev->mbr.
ãmp_thªshﬁd2
) {

5998 
ãmp_thªshﬁd2
 = 
dev
->
mbr
.temp_threshold2;

5999 
ãmp_¸ôiˇl_thªshﬁd2
 = 
dev
->
mbr
.temp_critical_threshold2;

6001 
ãmp_thªshﬁd2
 = 
TEMP_INNER_THRESHOLD
;

6002 
ãmp_¸ôiˇl_thªshﬁd2
 = 
TEMP_INNER_CRITICAL_THRESHOLD
;

6005 i‡(
ãmp_thªshﬁd1
 == 0xff)

6006 
thªshﬁd
 = 
TEMP_AUX1_THRESHOLD
 | (
TEMP_AUX2_THRESHOLD
 << 8Ë| (
TEMP_BOARD_THRESHOLD
 << 16);

6008 
thªshﬁd
 = 
ãmp_thªshﬁd1
 | (temp_threshold1 << 8) | (temp_threshold1 << 16);

6009 
	`wrôe_ªg_ß„
(
dev
, 
thªshﬁd
, (
u32
 *)dev->
b¨
 + 
SH_EXT_TEMP_THRESHOLD_OFFSET
);

6011 i‡(
ãmp_¸ôiˇl_thªshﬁd1
 == 0xff)

6012 
thªshﬁd
 = 
TEMP_AUX1_CRITICAL_THRESHOLD
 | (
TEMP_AUX2_CRITICAL_THRESHOLD
 << 8Ë| (
TEMP_BOARD_CRITICAL_THRESHOLD
 << 16);

6014 
thªshﬁd
 = 
ãmp_¸ôiˇl_thªshﬁd1
 | (temp_critical_threshold1 << 8) | (temp_critical_threshold1 << 16);

6015 
	`wrôe_ªg_ß„
(
dev
, 
thªshﬁd
, (
u32
 *)dev->
b¨
 + 
SH_EXT_TEMP_CRITICAL_THRESHOLD_OFFSET
);

6017 
thªshﬁd
 = (((
ãmp_thªshﬁd2
 + 273Ë* 1024 * 1000 / 503975Ë& 
SH_TEMP_MASK
) | \

6018 ((((
ãmp_¸ôiˇl_thªshﬁd2
 + 273Ë* 1024 * 1000 / 503975Ë& 
SH_TEMP_MASK
) << 16);

6019 
	`wrôe_ªg_ß„
(
dev
, 
thªshﬁd
, (
u32
 *)dev->
b¨
 + 
SH_INNER_TEMP_THRESHOLD_OFFSET
);

6020 
	}
}

6022 
	$öô_globÆ_c⁄fig_ªgs_f‹_Êashid
(
sh™n⁄_dev
 *
dev
)

6024 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6025 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
RESET
, 1);

6026 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6027 
	`sh™n⁄_m¶ìp
(1);

6029 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6030 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
RESET
, 0);

6033 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, 
ONFI_ASYNC_MODE
);

6034 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
CMD_CYCLE
, 4);

6035 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
SECTORS_IN_PAGE
, 0x0e);

6036 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
PAGES_IN_BLOCK
, 0x03);

6039 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
SECTOR_SIZE
, dev->
logicb_size
/512);

6040 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
ECC_CODEWORDS
, 1);

6041 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
FULL_SECTOR_SIZE
, dev->
ecc_codew‹d_size
);

6044 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
∑ge
, 
PLANE_MASK
, 0);

6045 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
∑ge
, 
FULL_PAGE_SIZE
, 0x2058);

6048 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
RAID_ENABLE
, 0);

6049 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
SECTORS_IN_CHUNK
, 0x0e);

6050 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
CHUNK_SIZE
, 0x0e);

6053 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
ecc
, 
ECC_BYPASS
, 0);

6054 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
ecc
, 
ECC_CODEWORD_SIZE
, dev->
ecc_codew‹d_size
);

6055 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6056 
	}
}

6059 
	$£t_˛k
(
sh™n⁄_dev
 *
sdev
, 
u16
 
vÆue
)

6061 i‡((
vÆue
 != 0) && (value != 0xffff)) {

6062 
u16
 
˛k
 = 
vÆue
 - 1;

6063 
	`sh™n⁄_öfo
("%s: clk = %d.\n", 
sdev
->
sdisk
.
disk_«me
, 
˛k
);

6064 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

6065 
	`sh™n⁄_iowrôe32
(0, (
u32
 *)
sdev
->
b¨
 + 
SH_DEBUG_DCM_OFFSET
);

6066 
	`sh™n⁄_iowrôe32
((1 << 31Ë| 
˛k
, (
u32
 *)
sdev
->
b¨
 + 
SH_DEBUG_DCM_OFFSET
);

6067 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

6068 
	`sh™n⁄_m¶ìp
(1);

6070 
	}
}

6072 
	$öô_globÆ_c⁄fig_ªgs
(
sh™n⁄_dev
 *
dev
)

6074 i‡(
	`dev_is_8639_wôh_ßndisk
(
dev
)) {

6075 
	`£t_˛k
(
dev
, 
CLK_166M
 + 1);

6076 } i‡(
dev
->
mbr
.
˛k
 == 0) {

6077 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6078 
	`sh™n⁄_iowrôe32
(0, (
u32
 *)
dev
->
b¨
 + 
SH_DCM_FREQ_OFFSET
);

6079 
	`sh™n⁄_iowrôe32
((1 << 31Ë| 
dev
->
‰eq_mode
, (
u32
 *)dev->
b¨
 + 
SH_DCM_FREQ_OFFSET
);

6080 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6081 
	`sh™n⁄_m¶ìp
(1);

6083 
	`£t_˛k
(
dev
, dev->
mbr
.
˛k
);

6086 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6088 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, dev->
ifmode
);

6090 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
LED
, 
YELLOW_DARK
|
GREEN_FLASHING
);

6091 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
CMD_CYCLE
, 4);

6092 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
SECTORS_IN_PAGE
, dev->
logicbs_ö_∑ge
 - 1);

6093 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
Êash
, 
PAGES_IN_BLOCK
, (dev->
∑ges_ö_eblock
 < 64)?0:(dev->pages_in_eblock/64 - 1));

6096 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
SECTOR_SIZE
, dev->
logicb_size
/512);

6097 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
ECC_CODEWORDS
, dev->
ecc_codew‹ds_ö_logicb
);

6098 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
FULL_SECTOR_SIZE
, dev->
fuŒ_£˘‹_size
);

6101 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
∑ge
, 
PLANE_MASK
, ((dev->
∂™es
 - 1Ë* dev->
∑ges_ö_eblock
) >> 6);

6102 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
∑ge
, 
LUN_ADDR_MASK
, dev->
mbr
.
luns_≥r_˚_mask
);

6103 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
∑ge
, 
FULL_PAGE_SIZE
, dev->
fuŒ_∑ge_size
);

6106 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
RAID_ENABLE
, dev->
øid5_suµ‹ãd
);

6107 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
SECTORS_IN_CHUNK
, dev->
logicbs_ö_chunk
 - 1);

6108 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
øid_öfo
, 
CHUNK_SIZE
, (dev->
logicb_size
 * dev->
logicbs_ö_chunk
)/512 - 1);

6111 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
ecc
, 
ECC_BYPASS
, dev->
ecc_by∑ss
);

6113 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
ecc
, 
ECC_FORCE_SECOND
, 
ecc_f‹˚_£c⁄d_ªque°
);

6114 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
ecc
, 
ECC_CODEWORD_SIZE
, dev->
ecc_codew‹d_size
);

6117 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
misc
, 
INT_DELAY
, dev->
öãºu±_dñay
);

6119 i‡((
dev
->
mbr
.
powî_budgë
 != 0) && (dev->mbr.power_budget != 0xff)) {

6120 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6121 
	`sh™n⁄_öfo
("%s:Öowî_budgë=0x%x.\n", 
dev
->
sdisk
.
disk_«me
, dev->
mbr
.
powî_budgë
);

6122 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6123 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
misc
, 
POWER_BUDGET
, dev->
mbr
.
powî_budgë
);

6125 i‡((
dev
->
mbr
.
dma_max_ªad_limô
 != 0) && (dev->mbr.dma_max_read_limit != 0xff)) {

6126 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6127 
	`sh™n⁄_öfo
("%s: dma_max_ªad_limô=0x%x.\n", 
dev
->
sdisk
.
disk_«me
, dev->
mbr
.
dma_max_ªad_limô
);

6128 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6129 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
s¸ambÀr_mask
, 
DMA_MAX_READ
, dev->
mbr
.
dma_max_ªad_limô
 - 1);

6135 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6137 
	`£t_ãm≥øtuª_£ns‹_thªshﬁds
(
dev
);

6138 
	}
}

6140 
	$£t_avaûabÀ_øid_°rùes
(
sh™n⁄_dev
 *
sdev
)

6142 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6143 
groups_ö_°rùe
 = 
sdev
->
max_avaûabÀ_groups
;

6145 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

6146 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
øid_öfo
, 
RAID_STRIPES
, sdev->
max_avaûabÀ_groups
 - 1);

6147 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

6149 
	}
}

6151 
	$dump_b¨_•a˚
(
sh™n⁄_dev
 *
dev
)

6153 
u32
 
ˇp
, 
øid
, 
ecc
, 
buf_öfo
, 
d«_low
, 
d«_high
, 
Êash
, 
logicb
, 
∑ge
, 
øid_öfo
, 
g_ecc
;

6156 
	`debugs4
("A·î m≠pög: dev->b¨=0x%lx.\n", ()
dev
->
b¨
);

6157 
	`debugs4
("dev->öãºu±_b¨=0x%lx.\n", ()
dev
->
öãºu±_b¨
);

6158 
	`debugs4
("dev->globÆ_b¨=0x%lx.\n", ()
dev
->
globÆ_b¨
);

6206 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6207 
ˇp
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->cap);

6208 
øid
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->raid);

6209 
ecc
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->ecc);

6210 
buf_öfo
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->
wrôe_buf_öfo
);

6211 
d«_low
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->dna_low);

6212 
d«_high
 = 
	`sh™n⁄_ªadl
(&
dev
->
b¨
->dna_high);

6213 
Êash
 = 
	`sh™n⁄_ªadl
(&
dev
->
globÆ_b¨
->flash);

6214 
logicb
 = 
	`sh™n⁄_ªadl
(&
dev
->
globÆ_b¨
->logicb);

6215 
∑ge
 = 
	`sh™n⁄_ªadl
(&
dev
->
globÆ_b¨
->page);

6216 
øid_öfo
 = 
	`sh™n⁄_ªadl
(&
dev
->
globÆ_b¨
->raid_info);

6217 
g_ecc
 = 
	`sh™n⁄_ªadl
(&
dev
->
globÆ_b¨
->
ecc
);

6219 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6220 
	`debugs4
("\nRead byÑeadl......\n");

6221 
	`debugs4
("ˇp=0x%x.\n", 
ˇp
);

6222 
	`debugs4
("øid=0x%x.\n", 
øid
);

6223 
	`debugs4
("ecc=0x%x.\n", 
ecc
);

6224 
	`debugs4
("wrôe_buf_öfo=0x%x.\n", 
buf_öfo
);

6225 
	`debugs4
("d«_low=0x%x.\n", 
d«_low
);

6226 
	`debugs4
("d«_high=0x%x.\n", 
d«_high
);

6227 
	`debugs4
("Êash=0x%x.\n", 
Êash
);

6228 
	`debugs4
("logicb=0x%x.\n", 
logicb
);

6229 
	`debugs4
("∑ge=0x%x.\n", 
∑ge
);

6230 
	`debugs4
("øid_öfo=0x%x.\n", 
øid_öfo
);

6231 
	`debugs4
("ecc=0x%x.\n", 
g_ecc
);

6233 
	}
}

6235 #i‡!
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

6236 
	$ª£t_Æl_lun£t
(
sh™n⁄_dev
 *
dev
, 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
)

6238 
sh™n⁄_cmd
 *
sq_addr
;

6239 
sh™n⁄_cmd
 *
no_›
;

6240 vﬁ©ûê
sh™n⁄_cmd
 *
cq_addr
;

6241 
sh™n⁄_ªgi°î_cmd
 *
ª£t
;

6242 
sh™n⁄_dma_addr_t
 
sq_dma_addr
, 
cq_dma_addr
;

6243 
u32
 
sq_hód
, 
cq_hód
, 
cq_èû
;

6244 
cmdid
;

6245 
i
, 
j
, 
k
, 
ªt
 = -1;

6246 
ª£t_time
 = 0;

6248 
sq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, &
sq_dma_addr
, 
GFP_SHANNON
);

6249 i‡(
sq_addr
 =
NULL
)

6250  
ªt
;

6251 
cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, &
cq_dma_addr
, 
GFP_SHANNON
);

6252 i‡(
cq_addr
 =
NULL
) {

6253 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
sq_addr
, 
sq_dma_addr
);

6254  
ªt
;

6257 
	`debugs2
("sq_dma_addr0x%Œx.\n", 
sq_dma_addr
);

6258 
	`debugs2
("cq_dma_addr0x%Œx.\n", 
cq_dma_addr
);

6260 
ªdo_Æl_lun£ts_ª£t
:

6261 
i
 = 0; i < 
dev
->
max_lun_ö_lun£t
; i+=dev->
max_lun_ö_˚
) {

6262 
j
 = 0; j < 
dev
->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
; j++) {

6263 
sh™n⁄_lun_b¨
 *
this_£˘i⁄
 = 
lun_£˘i⁄
 + 
j
;

6264 
k
 = 0; k < 
dev
->
max_lun_ö_˚
; k++) {

6265 i‡(!
	`sh™n⁄_ã°_bô
(
j
 * 
dev
->
max_lun_ö_lun£t
 + 
i
 + 
k
, (*)dev->
mbr
.
bad_phy_lun_m≠
))

6268 i‡(
k
 >
dev
->
max_lun_ö_˚
)

6270 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6271 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6272 
	`wrôe32
((
u32
)(()
sq_addr
 & 0xffffffff), &
this_£˘i⁄
->
sq_dma_addr0
);

6273 
	`wrôe32
((
u32
)(()
sq_addr
 >> 32), &
this_£˘i⁄
->
sq_dma_addr1
);

6274 
	`wrôe32
((
u32
)(()
cq_addr
 & 0xffffffff), &
this_£˘i⁄
->
cq_dma_addr0
);

6275 
	`wrôe32
((
u32
)(()
cq_addr
 >> 32), &
this_£˘i⁄
->
cq_dma_addr1
);

6277 
	`wrôe32
((
u32
)(
sq_dma_addr
 & 0xffffffff), &
this_£˘i⁄
->
sq_dma_addr0
);

6278 
	`wrôe32
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sq_dma_addr
 >> 32Ë: 0, &
this_£˘i⁄
->
sq_dma_addr1
);

6279 
	`wrôe32
((
u32
)(
cq_dma_addr
 & 0xffffffff), &
this_£˘i⁄
->
cq_dma_addr0
);

6280 
	`wrôe32
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
cq_dma_addr
 >> 32Ë: 0, &
this_£˘i⁄
->
cq_dma_addr1
);

6282 
sq_hód
 = 
	`ªad32
(&
this_£˘i⁄
->sq_head);

6283 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6284 
cmdid
 = 
sq_hód
 >> 3;

6285 
ª£t
 = (
sh™n⁄_ªgi°î_cmd
 *)(
sq_addr
 + 
cmdid
);

6286 
ª£t
->
›code
 = (
dev
->
h¨dw¨e_vîsi⁄
 >5Ë? 
sh_cmd_ªg_wrôe
 : 
sh_cmd_ª£t
;

6287 
ª£t
->
£c⁄d¨y_cmd
 = 0;

6288 
ª£t
->
d©a_byã
 = 0;

6289 
ª£t
->
hód
 = 0;

6290 
ª£t
->
Êash_ªg
.
Êash_addr
 = 0;

6291 
ª£t
->
Êash_ªg
.
byãs
 = 0;

6292 
ª£t
->
Êash_ªg
.
Êash_cmd
 = 0xFF;

6293 
ª£t
->
Êash_ªg
.
phy_lun
 = 
j
 * 
dev
->
max_lun_ö_lun£t
 + 
i
 + 
k
;

6294 
sq_hód
 = (sq_hód + 8Ë% 
QUEUE_SIZE
;

6296 
	`wrôe_ªg_ß„
(
dev
, 
sq_hód
, &
this_£˘i⁄
->sq_head);

6298 
cq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &
this_£˘i⁄
->cq_head);

6299 i‡–
sq_hód
 !
cq_hód
) {

6300 
	`sh™n⁄_m¶ìp
(2);

6302 } 
sq_hód
 !
cq_hód
);

6303 
cq_èû
 = 
cq_hód
;

6304 
	`debugs2
("ª£âögÜun£à%dÜu¿%d, sq_hódánd cq_hódáª %d, %d\n", 
j
, 
i
, 
sq_hód
, 
cq_hód
);

6306 
	`sh™n⁄_m¶ìp
(10);

6308 
j
 = 0; j < 
dev
->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
; j++) {

6309 
sh™n⁄_lun_b¨
 *
this_£˘i⁄
 = 
lun_£˘i⁄
 + 
j
;

6310 
k
 = 0; k < 
dev
->
max_lun_ö_˚
; k++) {

6311 i‡(!
	`sh™n⁄_ã°_bô
(
j
 * 
dev
->
max_lun_ö_lun£t
 + 
i
 + 
k
, (*)dev->
mbr
.
bad_phy_lun_m≠
))

6314 i‡(
k
 >
dev
->
max_lun_ö_˚
)

6316 
sq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &
this_£˘i⁄
->sq_head);

6317 
cmdid
 = 
sq_hód
 >> 3;

6318 
no_›
 = (
sh™n⁄_cmd
*)(
sq_addr
 + 
cmdid
);

6319 
no_›
->
›code
 = 
sh_cmd_no_›
;

6320 
no_›
->
logicbs
 = 0;

6321 
no_›
->
øid_°rùe
 = 0;

6322 
no_›
->
hód
 = 0;

6323 
no_›
->
dw‹d1
 = ((
j
 * 
dev
->
max_lun_ö_lun£t
 + 
i
 + 
k
) & 0xff) << 24;

6324 
sq_hód
 = (sq_hód + 8Ë% 
QUEUE_SIZE
;

6326 
	`wrôe_ªg_ß„
(
dev
, 
sq_hód
, &
this_£˘i⁄
->sq_head);

6328 
cq_hód
 = 
	`ªad_ªg_ß„
(
dev
, &
this_£˘i⁄
->cq_head);

6329 i‡–
sq_hód
 !
cq_hód
) {

6330 
	`sh™n⁄_m¶ìp
(2);

6332 } 
sq_hód
 !
cq_hód
);

6333 
cq_èû
 = 
cq_hód
;

6336 i‡(++
ª£t_time
 < 2)

6337 
ªdo_Æl_lun£ts_ª£t
;

6339 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
sq_addr
, 
sq_dma_addr
);

6340 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)
cq_addr
, 
cq_dma_addr
);

6341 
	`sh™n⁄_m¶ìp
(100);

6343 
	}
}

6345 
	$lun_£t_„©uª_gíîÆ
(
sh™n⁄_dev
 *
sdev
, 
u32
 
Êash_addr
, u32 
vÆue
)

6347 
sh™n⁄_lun£t
 *
lun£t
;

6348 
sh™n⁄_ªgi°î_cmd
 *
£t_„©uª
;

6349 
cmdid
;

6350 
u64
 *
d©a
;

6351 
i
, 
j
;

6353 
j
 = 0; j < 
sdev
->
max_lun_ö_lun£t
; j++) {

6354 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

6355 
lun£t
 = &
sdev
->
lun£ts
[
i
];

6356 
cmdid
 = 
lun£t
->
sq_hód
 >> 3;

6357 
£t_„©uª
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

6358 
£t_„©uª
->
›code
 = 
sh_cmd_ªg_wrôe
;

6359 
£t_„©uª
->
Êash_ªg
.
Êash_addr
 = flash_addr;

6360 
£t_„©uª
->
Êash_ªg
.
byãs
 = 4;

6361 
£t_„©uª
->
Êash_ªg
.
Êash_cmd
 = 0xEF;

6362 
£t_„©uª
->
Êash_ªg
.
phy_lun
 = 
lun£t
->
ödex
 * 
sdev
->
max_lun_ö_lun£t
 + 
j
;

6363 
d©a
 = 
	`cmd_queue_öc
(
£t_„©uª
, 1);

6364 
	`sh™n⁄_mem_wrôeq
(
vÆue
, 
d©a
);

6365 
lun£t
->
sq_hód
 = (lun£t->sq_hód + 16Ë% 
QUEUE_SIZE
;

6366 
	`wrôe_ªg_ß„
(
sdev
, 
lun£t
->
sq_hód
, &lun£t->
lun_b¨
->sq_head);

6368 
	`sh™n⁄_m¶ìp
(5);

6370 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

6371 
lun£t
 = &
sdev
->
lun£ts
[
i
];

6372 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->cq_head);

6373 
lun£t
->
sq_hód
 !lun£t->
cq_hód
) {

6374 
	`sh™n⁄_m¶ìp
(1);

6375 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->cq_head);

6377 
lun£t
->
cq_èû
 =Üun£t->
cq_hód
;

6378 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_hód
;

6379 
lun£t
->
sq_hód_tmp
 =Üun£t->
sq_hód
;

6380 
lun£t
->
sq_hw_hód
 =Üun£t->
sq_hód
;

6381 
lun£t
->
cq_hw_hód
 =Üun£t->
cq_hód
;

6384 
	}
}

6397 
	$lun_£t_„©uª_ovî_drive
(
sh™n⁄_dev
 *
sdev
, 
u32
 
drive_°ªngh
)

6399 
	`lun_£t_„©uª_gíîÆ
(
sdev
, 0x10, 
drive_°ªngh
);

6400 
	}
}

6402 
	$lun_£t_„©uª_odt
(
sh™n⁄_dev
 *
sdev
)

6404 
	`lun_£t_„©uª_gíîÆ
(
sdev
, 0x02, 0x10);

6405 
	}
}

6407 
	$check_„©uª_cfg_li°
(
sh™n⁄_dev
 *
sdev
)

6409 
i
;

6410 
ªt
 = 0;

6411 
„©uª_cfg
 *
li°
 = 
sdev
->
„©uª_cfg_li°
;

6413 
	`BUG_ON
(
li°
 =
NULL
);

6414 
i
 = 0; i < 
FEATURE_CFG_LIST_SIZE
; i++) {

6415 i‡((
	`gë_„©uª_cfg_vÆid
(
li°
Ë=0Ë&& (
	`gë_„©uª_cfg_Æl_¥io
(list) != 0)) {

6416 
ªt
 = -1;

6417 
	`sh™n⁄_îr
("„©uª cfg %d i†övÆid, buàô ha†¥i‹ôy.\n", 
i
);

6420 i‡((
	`gë_„©uª_cfg_vÆid
(
li°
Ë!0Ë&& (
	`gë_„©uª_cfg_Æl_¥io
(list) == 0)) {

6421 
ªt
 = -1;

6422 
	`sh™n⁄_îr
("„©uª cfg %d i†vÆid, buàô d€¢`àhavê¥i‹ôy.\n", 
i
);

6425 
li°
++;

6428  
ªt
;

6429 
	}
}

6431 
	$lun_£t_Æl_„©uª
(
sh™n⁄_dev
 *
sdev
)

6433 
i
;

6434 
„©uª_cfg
 *
li°
 = 
sdev
->
„©uª_cfg_li°
;

6436 
	`BUG_ON
(
li°
 =
NULL
);

6437 
i
 = 0; i < 
FEATURE_CFG_LIST_SIZE
; i++) {

6438 i‡(
li°
->
vÆid
 =
FEATURE_INVALID
)

6441 
	`debugs1
("%s: së vÆuê0x%xÅÿadd∏0x%x\n", 
__func__
, 
li°
->
d©a
[0],Üi°->
addr
);

6443 
	`lun_£t_„©uª_gíîÆ_g4
(
sdev
, 
li°
);

6444 
li°
++;

6447 
	}
}

6449 
	$ªbuûd_Æl_„©uª_cfg
(
sh™n⁄_dev
 *
sdev
)

6451 
i
;

6453 
i
 = 0; i < 
FEATURE_CFG_LIST_SIZE
; i++) {

6454 i‡(
	`gë_„©uª_cfg_vÆid
(&
sdev
->
„©uª_cfg_li°
[
i
])) {

6455 i‡(
	`gë_„©uª_cfg_Æl_¥io
(&
sdev
->
„©uª_cfg_li°
[
i
]) == 0)

6456 
	`£t_„©uª_cfg_Æl_¥io
(&
sdev
->
„©uª_cfg_li°
[
i
]);

6458 i‡(
	`gë_„©uª_cfg_Æl_¥io
(&
sdev
->
„©uª_cfg_li°
[
i
]) != 0)

6459 
	`˛ón_„©uª_cfg_Æl_¥io
(&
sdev
->
„©uª_cfg_li°
[
i
]);

6463 
	}
}

6465 
ölöe
 
	$gë_„©uª_cfg_¥io
(
„©uª_cfg
 *
cfg
, 
¥io
)

6467 
u8
 
mask
;

6469 
¥io
) {

6471 
mask
 = 
FEATURE_PRIO_0_MASK
;

6474 
mask
 = 
FEATURE_PRIO_1_MASK
;

6477 
mask
 = 0;

6481  
cfg
->
vÆid
 & 
mask
;

6482 
	}
}

6484 
	$lun_£t_Æl_„©uª_wôh_¥io
(
sh™n⁄_dev
 *
sdev
, 
¥io
)

6486 
i
;

6487 
„©uª_cfg
 *
li°
 = 
sdev
->
„©uª_cfg_li°
;

6489 
	`BUG_ON
(
li°
 =
NULL
);

6490 
i
 = 0; i < 
FEATURE_CFG_LIST_SIZE
; i++) {

6491 i‡(
li°
->
vÆid
 =
FEATURE_INVALID
)

6493 i‡(
	`gë_„©uª_cfg_¥io
(
li°
, 
¥io
)){

6494 
	`debugs1
("%s:Öriÿ%d, së vÆuê0x%xÅÿadd∏0x%x\n", 
__func__
, 
¥io
, 
li°
->
d©a
[0],Üi°->
addr
);

6496 
	`lun_£t_„©uª_gíîÆ_g4
(
sdev
, 
li°
);

6498 
li°
++;

6501 
	}
}

6503 
	$is_vÆid_id
(
sh™n⁄_dev
 *
sdev
, 
u64
 
id
)

6505 
i
;

6506 i‡(
sdev
->
n‹_mbr_°©us
 & 
READ_FROM_NORFLASH
)

6507  (
sdev
->
Êashid
 =
id
);

6509 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

6510  (
sdev
->
Êashid
 =
id
);

6512 
i
 = 0; i < 
	`ARRAY_SIZE
(
suµ‹ãd_ids
); i++) {

6513 i‡((
suµ‹ãd_ids
[
i
].
Êashid
 & 0xffffffË=(
id
 & 0xffffff))

6517 
	}
}

6519 
	$lun_ªad_id
(
sh™n⁄_lun
 *
lun
)

6521 
sh™n⁄_lun£t
 *
lun£t
 = 
lun
->lunset;

6522 
sh™n⁄_dev
 *
sdev
 = 
lun£t
->sdev;

6523 
sh™n⁄_ªgi°î_cmd
 *
ªadid
;

6524 
cmdid
;

6525 
u64
 
id
;

6527 
cmdid
 = 
lun£t
->
sq_hód
 >> 3;

6528 
ªadid
 = (
sh™n⁄_ªgi°î_cmd
 *)(
lun£t
->
sq_addr
 + 
cmdid
);

6529 
ªadid
->
›code
 = 
sh_cmd_ªg_ªad
;

6530 
ªadid
->
Êash_ªg
.
Êash_addr
 = 0;

6531 
ªadid
->
Êash_ªg
.
byãs
 = 8;

6532 
ªadid
->
Êash_ªg
.
Êash_cmd
 = 0x90;

6533 
ªadid
->
Êash_ªg
.
phy_lun
 = 
lun
->
phy_lun_num
;

6534 
lun£t
->
sq_hód
 += 8;

6535 
	`wrôe_ªg_ß„
(
sdev
, 
lun£t
->
sq_hód
, &lun£t->
lun_b¨
->sq_head);

6537 
	`sh™n⁄_m¶ìp
(2);

6538 
lun£t
->
cq_hód
 = 
	`ªad_ªg_ß„
(
sdev
, &lun£t->
lun_b¨
->cq_head);

6539 } 
lun£t
->
sq_hód
 !lun£t->
cq_hód
);

6540 
	`debugs3
("sq_hód=%d, cq_hód=%d, cq_èû=%d\n", 
lun£t
->
sq_hód
,Üun£t->
cq_hód
,Üun£t->
cq_èû
);

6541 
id
 = 
	`sh™n⁄_mem_ªadq
(
lun£t
->
cq_addr
 + (lun£t->
cq_èû
>>3));

6542 
	`debugs3
("lun=%d, id=0x%Œx,Üun_°©us=0x%x.\n", 
lun
->
lun_num
, 
id
, 
	`ªad_ªg_ß„
(
sdev
, &
lun£t
->
lun_b¨
->
lun_°©us
));

6543 
lun£t
->
cq_èû
 =Üun£t->
cq_hód
;

6544 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_hód
;

6546 
lun£t
->
sq_hód_tmp
 =Üun£t->
sq_hód
;

6547 
lun£t
->
sq_hw_hód
 =Üun£t->
sq_hód
;

6548 
lun£t
->
cq_hw_hód
 =Üun£t->
cq_hód
;

6550 i‡(
	`is_vÆid_id
(
sdev
, 
id
))

6553 
	`sh™n⁄_îr
("InvÆid ID:Üun=%d, id=0x%Œx,Üun_°©us=0x%x.\n", 
lun
->
lun_num
, 
id
, 
	`ªad_ªg_ß„
(
sdev
, &
lun£t
->
lun_b¨
->
lun_°©us
));

6554  -
EIO
;

6556 
	}
}

6559 
	$sh™n⁄_bio_ö_Êight
(
sh™n⁄_dev
 *
sdev
)

6561 i‡(
sh™n⁄_scsi_mode
)

6562  
	`sh™n⁄_scsi_disk_ö_Êight
(
sdev
->
sdisk
.
ho°d©a
);

6563 i‡(
sdev
->
sdisk
.
gd
)

6564  
	`sh™n⁄_disk_ö_Êight
(
sdev
->
sdisk
.
gd
);

6567 
	}
}

6569 
	$gë_ˇche_ªad_£˘‹s
(
sh™n⁄_¥e„tch
 *
¥e„tch
)

6571 
i
, 
j
;

6572 
sh™n⁄_ˇche_löe
 *
ˇche_löe
;

6573 
u64
 
ˇche_ªad_£˘‹s
 = 0;

6575 i‡(
¥e„tch
->
ˇche_löe
) {

6576 
i
 = 0; i < 
¥e„tch
->
ˇche_löes
; i++) {

6577 
ˇche_löe
 = &
¥e„tch
->ˇche_löe[
i
];

6578 i‡(
ˇche_löe
) {

6579 
j
 = 0; j < 
ˇche_löe
->
¶Ÿ_cou¡
; j++)

6580 
ˇche_ªad_£˘‹s
 +
ˇche_löe
->
¶Ÿ
[
j
].
ho°_ªad_£˘‹s
;

6585  
ˇche_ªad_£˘‹s
;

6586 
	}
}

6588 
	$sh™n⁄_have_ªad_£˘‹s
(
sh™n⁄_dev
 *
sdev
)

6590 
i
;

6591 
u64
 
ho°_ªad_£˘‹s
 = 0;

6592 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

6593 
ho°_ªad_£˘‹s
 +
sdev
->
lun£ts
[
i
].host_read_sectors;

6595 
ho°_ªad_£˘‹s
 +
	`gë_ˇche_ªad_£˘‹s
(&
sdev
->
sdisk
.
¥e„tch
);

6596  
ho°_ªad_£˘‹s
;

6597 
	}
}

6599 
	$sh™n⁄_have_ªad_ios
(
sh™n⁄_dev
 *
sdev
)

6601 i‡(
sh™n⁄_scsi_mode
)

6602  
	`sh™n⁄_scsi_ios
(
sdev
->
sdisk
.
ho°d©a
, 0);

6604  
	`sh™n⁄_ªad_ios
(
sdev
->
sdisk
.
gd
);

6605 
	}
}

6607 
	$sh™n⁄_have_wrôãn_ios
(
sh™n⁄_dev
 *
sdev
)

6609 i‡(
sh™n⁄_scsi_mode
)

6610  
	`sh™n⁄_scsi_ios
(
sdev
->
sdisk
.
ho°d©a
, 1);

6612  
	`sh™n⁄_wrôe_ios
(
sdev
->
sdisk
.
gd
);

6613 
	}
}

6615 
	$sh™n⁄_have_ªad_m£cs
(
sh™n⁄_dev
 *
sdev
)

6617 i‡(
sh™n⁄_scsi_mode
)

6618  
	`sh™n⁄_scsi_m£cs
(
sdev
->
sdisk
.
ho°d©a
, 0);

6620  
	`sh™n⁄_ªad_m£cs
(
sdev
->
sdisk
.
gd
);

6621 
	}
}

6623 
	$sh™n⁄_have_wrôãn_m£cs
(
sh™n⁄_dev
 *
sdev
)

6625 i‡(
sh™n⁄_scsi_mode
)

6626  
	`sh™n⁄_scsi_m£cs
(
sdev
->
sdisk
.
ho°d©a
, 1);

6628  
	`sh™n⁄_wrôe_m£cs
(
sdev
->
sdisk
.
gd
);

6629 
	}
}

6632 
	$upd©e_powî_⁄_£c⁄ds
(
sh™n⁄_dev
 *
sdev
)

6634 
jiffõs_dñè
;

6636 
jiffõs_dñè
 = ()
	`gë_jiffõs
(Ë- ()(
sdev
->
powî_⁄_jiffõs
);

6637 
sdev
->
powî_⁄_£c⁄ds
 = 
jiffõs_dñè
 / 
	`gë_HZ
(Ë+ sdev->
powî_⁄_£c⁄ds_hi°‹y
;

6639 i‡(!
sh™n⁄_dißbÀ_öãrvñ_ª‰esh_mbr
 && (0 =
sdev
->
ho°_ac˚ss_blocked
Ë&& ((sdev->
powî_⁄_£c⁄ds
 / 
MBR_REFRESH_INTERVAL
Ë!sdev->
ª‰esh_£quí˚
)) {

6640 
	`sh™n⁄_queue_w‹k
(
sdev
->
ª‰esh_wq
, &sdev->
ª‰esh_w‹k
);

6641 
sdev
->
ª‰esh_£quí˚
 = sdev->
powî_⁄_£c⁄ds
 / 
MBR_REFRESH_INTERVAL
;

6642 
	`sh™n⁄_öfo
("ª‰esh_£quí˚=%d.\n", 
sdev
->
ª‰esh_£quí˚
);

6646 
	}
}

6648 
	$upd©e_io_°©i°ics
(
sh™n⁄_dev
 *
sdev
)

6650 
u64
 
ho°_wrôe_ios_œ°
;

6651 
u64
 
ho°_wrôe_m£cs_œ°
;

6652 
u64
 
ho°_ªad_ios_œ°
;

6653 
u64
 
ho°_ªad_m£cs_œ°
;

6654 
jiffõs_dñè
;

6655 
u£c_ñ≠£d
 = 0;

6656 
Êags
;

6658 
Êags
 = 
	`sh™n⁄_•ö_lock_úqßve
(&
sdev
->
io_°©i°ics_lock
);

6660 
jiffõs_dñè
 = ()
	`gë_jiffõs
(Ë- ()
sdev
->
œ°_jiffõs
;

6661 
u£c_ñ≠£d
 = 
	`sh™n⁄_jiffõs_to_u£cs
(
jiffõs_dñè
);

6662 i‡(
u£c_ñ≠£d
 < 300000) {

6663 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
sdev
->
io_°©i°ics_lock
, 
Êags
);

6666 
sdev
->
œ°_jiffõs
 = 
	`gë_jiffõs
();

6669 
ho°_wrôe_ios_œ°
 = 
sdev
->
ho°_wrôe_ios
;

6670 
ho°_wrôe_m£cs_œ°
 = 
sdev
->
ho°_wrôe_m£cs
;

6672 
ho°_ªad_ios_œ°
 = 
sdev
->
ho°_ªad_ios
;

6673 
ho°_ªad_m£cs_œ°
 = 
sdev
->
ho°_ªad_m£cs
;

6676 
sdev
->
ho°_wrôe_ios
 = 
	`sh™n⁄_have_wrôãn_ios
(sdev);

6677 
sdev
->
ho°_wrôe_m£cs
 = 
	`sh™n⁄_have_wrôãn_m£cs
(sdev);

6679 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

6680 
sdev
->
ho°_ªad_ios
 = 
	`sh™n⁄_have_ªad_ios
(sdev);

6681 
sdev
->
ho°_ªad_m£cs
 = 
	`sh™n⁄_have_ªad_m£cs
(sdev);

6684 
sdev
->
ho°_wrôe_b™dwidth
 = (sdev->
ho°_wrôe_£˘‹s
 - sdev->
ho°_wrôe_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6685 
sdev
->
ho°_wrôe_i›s
 = (sdev->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
Ë* 1000000 / 
u£c_ñ≠£d
;

6686 
sdev
->
ho°_wrôe_œãncy
 = (sdev->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
) ? \

6687 (
sdev
->
ho°_wrôe_m£cs
 - 
ho°_wrôe_m£cs_œ°
Ë* 1000 / (sdev->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
) : 0;

6688 
sdev
->
tŸÆ_ªad_b™dwidth
 = (sdev->
tŸÆ_ªad_£˘‹s
 - sdev->
tŸÆ_ªad_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6689 
sdev
->
tŸÆ_wrôe_b™dwidth
 = (sdev->
tŸÆ_wrôe_£˘‹s
 - sdev->
tŸÆ_wrôe_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6690 
sdev
->
ho°_ªad_b™dwidth
 = (sdev->
ho°_ªad_£˘‹s
 - sdev->
ho°_ªad_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6691 
sdev
->
ho°_ªad_i›s
 = (sdev->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
Ë* 1000000 / 
u£c_ñ≠£d
;

6692 
sdev
->
ho°_ªad_œãncy
 = (sdev->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
) ? \

6693 (
sdev
->
ho°_ªad_m£cs
 - 
ho°_ªad_m£cs_œ°
Ë* 1000 / (sdev->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
) : 0;

6694 
sdev
->
wrôe_am∂ifõr
 = (sdev->
ho°_wrôe_£˘‹s
 - sdev->
ho°_wrôe_£˘‹s_œ°
) ? \

6695 (
sdev
->
tŸÆ_wrôe_£˘‹s
 - sdev->
tŸÆ_wrôe_£˘‹s_œ°
Ë* 100 / (sdev->
ho°_wrôe_£˘‹s
 - sdev->
ho°_wrôe_£˘‹s_œ°
) : 100;

6697 
sdev
->
buf„r_wrôe_≥r˚¡
 = (sdev->
buf„r_wrôe_cou¡î
 - sdev->
buf„r_wrôe_cou¡î_œ°
) * 100 \

6698 / (
sdev
->
buf„r_wrôe_cou¡î
 + sdev->
dúe˘_wrôe_cou¡î
 - sdev->
buf„r_wrôe_cou¡î_œ°
 - sdev->
dúe˘_wrôe_cou¡î_œ°
 + 1);

6700 
sdev
->
gc_b™dwidth
 = (sdev->
tŸÆ_gc_logicbs
 * sdev->
£˘‹s_ö_logicb
 - sdev->
tŸÆ_gc_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6701 
sdev
->
wl_b™dwidth
 = (sdev->
tŸÆ_wl_logicbs
 * sdev->
£˘‹s_ö_logicb
 - sdev->
tŸÆ_wl_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6702 
sdev
->
îr_ªcovî_b™dwidth
 = (sdev->
tŸÆ_îr_ªcovî_logicbs
 * sdev->
£˘‹s_ö_logicb
 - sdev->
tŸÆ_îr_ªcovî_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

6705 i‡(
sdev
->
ho°_wrôe_£˘‹s
)

6706 
sdev
->
wrôe_am∂ifõr_li„time
 = sdev->
tŸÆ_wrôe_£˘‹s
 * 100 / sdev->
ho°_wrôe_£˘‹s
;

6708 
sdev
->
wrôe_am∂ifõr_li„time
 = 100;

6711 
sdev
->
ho°_wrôe_£˘‹s_œ°
 = sdev->
ho°_wrôe_£˘‹s
;

6712 
sdev
->
tŸÆ_ªad_£˘‹s_œ°
 = sdev->
tŸÆ_ªad_£˘‹s
;

6713 
sdev
->
tŸÆ_wrôe_£˘‹s_œ°
 = sdev->
tŸÆ_wrôe_£˘‹s
;

6714 
sdev
->
ho°_ªad_£˘‹s_œ°
 = sdev->
ho°_ªad_£˘‹s
;

6715 
sdev
->
dúe˘_wrôe_cou¡î_œ°
 = sdev->
dúe˘_wrôe_cou¡î
;

6716 
sdev
->
buf„r_wrôe_cou¡î_œ°
 = sdev->
buf„r_wrôe_cou¡î
;

6717 
sdev
->
tŸÆ_gc_£˘‹s_œ°
 = sdev->
tŸÆ_gc_logicbs
 * sdev->
£˘‹s_ö_logicb
;

6718 
sdev
->
tŸÆ_wl_£˘‹s_œ°
 = sdev->
tŸÆ_wl_logicbs
 * sdev->
£˘‹s_ö_logicb
;

6719 
sdev
->
tŸÆ_îr_ªcovî_£˘‹s_œ°
 = sdev->
tŸÆ_îr_ªcovî_logicbs
 * sdev->
£˘‹s_ö_logicb
;

6721 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
sdev
->
io_°©i°ics_lock
, 
Êags
);

6724 
	}
}

6726 
u32
 
	$ªad_£u_öfo
(
sh™n⁄_dev
 *
dev
)

6728 
u32
 
code
;

6729 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6730 
code
 = 0;

6731 
dev
->
£u_¸c_îr‹
 = 0;

6732 
dev
->
£u_ecc_îr‹
 = 0;

6734 
code
 = 
	`ªad_ªg_ß„
(
dev
, (
u32
 *)dev->
b¨
 + 
SH_SEU_OFFSET
);

6735 
dev
->
£u_¸c_îr‹
 = 
code
 >> 
SH_SEU_CRC_ERROR_SHIFT
;

6736 
dev
->
£u_ecc_îr‹
 = 
code
 & 
SH_SEU_ECC_ERROR_MASK
;

6738 i‡(
code
 =(
u32
)~0)

6739 
	`check_∂ugout
(
dev
);

6742 i‡((
dev
->
ªc⁄fig_suµ‹t
 =0Ë&& dev->
£u_¸c_îr‹
) {

6743 i‡(
dev
->
∂ug_out
 == 0) {

6744 
	`sh™n⁄_öfo
("%s(): seuÑegi°î=0x%x.\n", 
__func__
, 
code
);

6745 
	`wrôe_ªg_ß„
(
dev
, 0x80000000, (
u32
 *)dev->
b¨
 + 
SH_ICAP_OFFSET
);

6746 
	`sh™n⁄_îr
("%s: %scorrectable SEUÉrrors bits=%d!Åhe server hasÅo beÑebooted!\n\n",

6747 
dev
->
sdisk
.
disk_«me
, dev->
£u_¸c_îr‹
?"un":"", dev->
£u_ecc_îr‹
);

6748 
	`sh™n⁄_£t_bô
(
SHN_REASON_SEU_ERROR
, &
dev
->
ªad⁄ly_ªas⁄
);

6749 
	`upd©e_ac˚ss_mode
(
dev
);

6754 
	}
}

6756 
	$upd©e_vﬁège_ãm≥øtuª
(
sh™n⁄_dev
 *
dev
)

6758 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6759 
dev
->
ãm≥øtuª_öt
 = 50;

6760 
dev
->
ãm≥øtuª_öt_max
 = 50;

6761 
dev
->
ãm≥øtuª_aux1
 = 50;

6762 
dev
->
ãm≥øtuª_aux2
 = 50;

6763 
dev
->
ãm≥øtuª_Êash
 = 50;

6764 
dev
->
ãm≥øtuª_Êash_max
 = 50;

6765 
dev
->
ãm≥øtuª_bﬂrd
 = 50;

6766 
dev
->
ãm≥øtuª_bﬂrd_max
 = 50;

6767 
dev
->
vﬁège_öt
 = 888;

6768 
dev
->
vﬁège_öt_max
 = 888;

6769 
dev
->
vﬁège_aux
 = 2345;

6770 
dev
->
vﬁège_aux_max
 = 2345;

6772 
code
, 
ãx
, 
ãmp
;

6774 i‡(
	`sh™n⁄_dev_is_g5_ffß
(
dev
)) {

6775 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6776 
dev
->
ãm≥øtuª_öt
 = (
	`sh™n⁄_ªad_ªg
((
u32
 *)dev->
b¨
 + 
SH_INTERN_TEMP_OFFSET
, 
CURRENT_TEMP
) * 127 - 3680) / 100;

6777 
dev
->
ãm≥øtuª_öt_max
 = (
	`sh™n⁄_ªad_ªg
((
u32
 *)dev->
b¨
 + 
SH_INTERN_TEMP_OFFSET
, 
MAX_TEMP
) * 127 - 3680) / 100;

6778 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6779 
dev
->
vﬁège_öt
 = 0;

6780 
dev
->
vﬁège_öt_max
 = 0;

6781 
dev
->
vﬁège_aux
 = 0;

6782 
dev
->
vﬁège_aux_max
 = 0;

6784 
code
 = 
	`ªad_ªg_ß„
(
dev
, (
u32
 *)dev->
b¨
 + 
SH_VCC_TEMP_OFFSET
);

6785 i‡((
code
 & 
SH_TEMP_MASK
) != SH_TEMP_MASK)

6786 
dev
->
ãm≥øtuª_öt
 = ()((
code
 & 
SH_TEMP_MASK
) * 503975 / (1024 * 1000) -273);

6787 i‡(
dev
->
ãm≥øtuª_öt
 > dev->
ãm≥øtuª_öt_max
)

6788 
dev
->
ãm≥øtuª_öt_max
 = dev->
ãm≥øtuª_öt
;

6790 i‡((
code
 & 
SH_VCCINT_MASK
) != SH_VCCINT_MASK)

6791 
dev
->
vﬁège_öt
 = ((
code
 & 
SH_VCCINT_MASK
Ë>> 
SH_VCCINT_SHIFT
) * 1000 * 3 / 1024;

6792 i‡(
dev
->
vﬁège_öt
 > dev->
vﬁège_öt_max
)

6793 
dev
->
vﬁège_öt_max
 = dev->
vﬁège_öt
;

6795 i‡((
code
 & 
SH_VCCAUX_MASK
) != SH_VCCAUX_MASK)

6796 
dev
->
vﬁège_aux
 = ((
code
 & 
SH_VCCAUX_MASK
Ë>> 
SH_VCCAUX_SHIFT
) * 1000 * 3 / 1024;

6797 i‡(
dev
->
vﬁège_aux
 > dev->
vﬁège_aux_max
)

6798 
dev
->
vﬁège_aux_max
 = dev->
vﬁège_aux
;

6801 
code
 = 
	`ªad_ªg_ß„
(
dev
, (
u32
 *)dev->
b¨
 + 
SH_TEMP_AUX1_OFFSET
);

6802 
ãx
 = ()((
code
 >> 
SH_EXTERNAL_TEMP_SHIFT
Ë& 
SH_EXTERNAL_TEMP_MASK
);

6803 i‡(
ãx
 !
SH_EXTERNAL_TEMP_MASK
)

6804 
dev
->
ãm≥øtuª_aux1
 = 
ãx
;

6805 
code
 = 
	`ªad_ªg_ß„
(
dev
, (
u32
 *)dev->
b¨
 + 
SH_TEMP_AUX2_OFFSET
);

6806 
ãx
 = ()((
code
 >> 
SH_EXTERNAL_TEMP_SHIFT
Ë& 
SH_EXTERNAL_TEMP_MASK
);

6807 i‡(
ãx
 !
SH_EXTERNAL_TEMP_MASK
)

6808 
dev
->
ãm≥øtuª_aux2
 = 
ãx
;

6809 i‡(
dev
->
pci_öfo
.
devi˚_id
 == 0x1275) {

6810 
ãmp
 = 
dev
->
ãm≥øtuª_aux1
 + dev->
ãm≥øtuª_aux2
;

6812 i‡(!
dev
->
ãm≥øtuª_aux1
 || !dev->
ãm≥øtuª_aux2
)

6813 
ãmp
 = 
dev
->
ãm≥øtuª_aux1
 + dev->
ãm≥øtuª_aux2
;

6815 
ãmp
 = (
dev
->
ãm≥øtuª_aux1
 + dev->
ãm≥øtuª_aux2
) / 2;

6817 i‡(
ãmp
 < 100)

6818 
dev
->
ãm≥øtuª_Êash
 = 
ãmp
;

6819 i‡(
dev
->
ãm≥øtuª_Êash
 > dev->
ãm≥øtuª_Êash_max
)

6820 
dev
->
ãm≥øtuª_Êash_max
 = dev->
ãm≥øtuª_Êash
;

6822 i‡(
dev
->
pci_öfo
.
devi˚_id
 != 0x1275) {

6823 
code
 = 
	`ªad_ªg_ß„
(
dev
, (
u32
 *)dev->
b¨
 + 
SH_TEMP_BOARD_OFFSET
);

6824 
ãx
 = ()((
code
 >> 
SH_EXTERNAL_TEMP_SHIFT
Ë& 
SH_EXTERNAL_TEMP_MASK
);

6825 i‡(
ãx
 !
SH_EXTERNAL_TEMP_MASK
)

6826 
ãmp
 = 
ãx
;

6829 i‡(
ãmp
 < 100)

6830 
dev
->
ãm≥øtuª_bﬂrd
 = 
ãmp
;

6831 i‡(
dev
->
ãm≥øtuª_bﬂrd
 > dev->
ãm≥øtuª_bﬂrd_max
)

6832 
dev
->
ãm≥øtuª_bﬂrd_max
 = dev->
ãm≥øtuª_bﬂrd
;

6836 
	}
}

6843 
	$gë_ecc_codew‹d_size
(
sh™n⁄_dev
 *
dev
)

6845 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6846 i‡((
dev
->
logicb_size
 =4096Ë&& (dev->
ecc_codew‹ds_ö_logicb
 == 8))

6847 
dev
->
ecc_codew‹d_size
 = 540;

6848 i‡((
dev
->
logicb_size
 =4096Ë&& (dev->
ecc_codew‹ds_ö_logicb
 == 5))

6849 
dev
->
ecc_codew‹d_size
 = 848;

6850 i‡((
dev
->
logicb_size
 =512Ë&& (dev->
ecc_codew‹ds_ö_logicb
 == 1))

6851 
dev
->
ecc_codew‹d_size
 = 552;

6852 i‡((
dev
->
logicb_size
 =512Ë&& (dev->
ecc_codew‹ds_ö_logicb
 == 2))

6853 
dev
->
ecc_codew‹d_size
 = 289;

6855 
	`sh™n⁄_îr
("unrecognizedÜogicb_size=%d,Écc_codewords_in_logicb=%d.\n", \

6856 
dev
->
logicb_size
, dev->
ecc_codew‹ds_ö_logicb
);

6858 
	`sh™n⁄_•ö_lock_bh
(&
dev
->
ªgs_›_lock
);

6859 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
SECTOR_SIZE
, dev->
logicb_size
/512);

6860 
	`sh™n⁄_£t_ªg
(&
dev
->
globÆ_b¨
->
logicb
, 
ECC_CODEWORDS
, dev->
ecc_codew‹ds_ö_logicb
);

6861 
	`sh™n⁄_•ö_u∆ock_bh
(&
dev
->
ªgs_›_lock
);

6863 
dev
->
ecc_codew‹d_size
 = 
	`ªad_ªg_ß„
(dev, &dev->
globÆ_b¨
->
ecc
) >> 16;

6864 
	`debugs1
("ecc_codew‹d_size%d.\n", 
dev
->
ecc_codew‹d_size
);

6866 
	}
}

6868 
	$gë_ecc_codew‹ds_ö_logicb
(
sh™n⁄_dev
 *
sdev
)

6870 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

6871 
sdev
->
ecc_codew‹ds_ö_logicb
 = 5;

6874 
u32
 
ecc_ˇp
;

6876 
ecc_ˇp
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
b¨
->
ecc
);

6877 (
ecc_ˇp
 >> 8) & 0x000000ff) {

6879 
sdev
->
ecc_codew‹ds_ö_logicb
 = 8;

6882 
sdev
->
ecc_codew‹ds_ö_logicb
 = 5;

6885 i‡(
sdev
->
Êashid
 == 0xa954e5a42c || sdev->flashid == 0xa95464842c)

6886 
sdev
->
ecc_codew‹ds_ö_logicb
 = 4;

6888 
sdev
->
ecc_codew‹ds_ö_logicb
 = 3;

6891 
	`sh™n⁄_îr
("uƒecognizedÉc¯ˇ∑bûôy 0x%x.\n", 
ecc_ˇp
);

6896 
	}
}

6898 
	$£t_hód_cou¡
(
sh™n⁄_dev
 *
sdev
)

6900 i‡(
sdev
->
©omic_wrôe
 || sdev->
¥i‹ôize_wrôe
 || (sdev->
mbr
.
„©uª_Êags
 & 
SINGLE_HEAD_ENABLE
))

6901 
sdev
->
u£_duÆ_hód
 = 0;

6903 
sdev
->
u£_duÆ_hód
 = 1;

6905 i‡(
sdev
->
u£_duÆ_hód
)

6906 
sdev
->
hód_cou¡
 = 2;

6908 
sdev
->
hód_cou¡
 = 1;

6909 
	}
}

6911 
	$ˇlcuœã_globÆ_v¨übÀ
(
sh™n⁄_dev
 *
dev
)

6913 
i
;

6915 
dev
->
u£r_logicb_size
 = 1 << dev->
u£r_logicb_shi·
;

6916 
dev
->
logicb_size
 = 1 << dev->
logicb_shi·
;

6917 
dev
->
£˘‹s_ö_logicb
 = dev->
logicb_size
 >> 9;

6918 
dev
->
«nd_∑ge_size
 = 1 << dev->
«nd_∑ge_shi·
;

6920 i‡(
	`sh™n⁄_dev_is_g5
(
dev
)) {

6921 
dev
->
logicbs_ö_∑ge
 = dev->
«nd_∑ge_size
 / dev->
logicb_size
;

6922 
	`ˇlcuœã_µa_°ru˘
(
dev
);

6923 i‡(
dev
->
¢≠_ªad_íabÀ
) {

6924 i‡(
dev
->
£˘‹s_codew‹d_addr
) {

6925 
	`sh™n⁄_k‰ì
(
dev
->
£˘‹s_codew‹d_addr
);

6926 
dev
->
£˘‹s_codew‹d_addr
 = 
NULL
;

6928 
dev
->
£˘‹s_codew‹d_addr
 = 
	`sh™n⁄_kzÆloc
((Ë* dev->
logicbs_ö_∑ge
, 
GFP_SHANNON
);

6929 i‡(!
dev
->
£˘‹s_codew‹d_addr
) {

6930 
	`sh™n⁄_îr
("alloc sectors codewordáddr failed.\n");

6934 
i
 = 0; i < 
dev
->
logicbs_ö_∑ge
; i++) {

6935 
dev
->
£˘‹s_codew‹d_addr
[
i
] = 
	`gë_codew‹d_addr
(dev, i);

6936 
	`debugs1
("£˘‹s_codew‹d_addr[%d] = 0x%x,Ç£˘‹s=%d.", 
i
, 
dev
->
£˘‹s_codew‹d_addr
[i], 
	`gë_£˘‹s_cou¡
(dev, i));

6940 i‡(!(
dev
->
n‹_mbr_°©us
 & 
READ_FROM_NORFLASH
Ë|| (dev->
ecc_codew‹ds_ö_logicb
 == 0))

6941 
	`gë_ecc_codew‹ds_ö_logicb
(
dev
);

6942 
	`gë_ecc_codew‹d_size
(
dev
);

6943 
	`BUG_ON
(
dev
->
ecc_codew‹ds_ö_logicb
 > 1023);

6944 i‡(
dev
->
ecc_by∑ss
)

6945 
dev
->
fuŒ_£˘‹_size
 = dev->
logicb_size
 + 
META_LEN
;

6947 
dev
->
fuŒ_£˘‹_size
 = dev->
ecc_codew‹d_size
 * dev->
ecc_codew‹ds_ö_logicb
;

6948 
dev
->
logicbs_ö_∑ge
 = (dev->
«nd_∑ge_size
 + dev->
oob_size
)/dev->
fuŒ_£˘‹_size
;

6950 
dev
->
sb_cou¡
 = dev->
eblocks_ö_lun
/dev->
∂™es
;

6952 
dev
->
fuŒ_∑ge_size
 = dev->
fuŒ_£˘‹_size
 * dev->
logicbs_ö_∑ge
;

6954 
dev
->
logicbs_ö_chunk
 = dev->
logicbs_ö_∑ge
 * dev->
∂™es
;

6955 
dev
->
logicbs_ö_eblock
 = dev->
logicbs_ö_∑ge
 * dev->
∑ges_ö_eblock
;

6956 
dev
->
logicbs_ö_∑ge_°rùe
 = dev->
logicbs_ö_chunk
 * dev->
lun_cou¡
;

6957 
dev
->
∑ges_ö_siblög_eblock
 = dev->
∑ges_ö_eblock
 * dev->
∂™es
;

6958 
dev
->
logicbs_ö_siblög_eblock
 = dev->
∑ges_ö_siblög_eblock
 * dev->
logicbs_ö_∑ge
;

6960 
dev
->
«nd_∑ge_ˇ∑côy
 = dev->
logicb_size
 * dev->
logicbs_ö_∑ge
;

6962 
dev
->
öå_big_shi·
[
HOT_INDEX
] = dev->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
 + HOT_INDEX;

6963 
dev
->
öå_big_shi·
[
COLD_INDEX
] = dev->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
 + COLD_INDEX;

6964 
dev
->
bufq_ack_öå_shi·
 = dev->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
 + 2;

6965 i‡(!
	`sh™n⁄_dev_is_g5_ffß
(
dev
))

6966 
dev
->
£u_öå_shi·
 = dev->
max_ch™√ls
 * dev->
max_lun£t_ö_ch™√l
 + 3;

6967 
dev
->
max_luns_ö_group
 = dev->
lun_cou¡
/dev->
∑rôy_groups
;

6969 
	`£t_hód_cou¡
(
dev
);

6972 
	}
}

6975 
	$˛ór_©omic_¥i‹ôize_wrôe
(
sh™n⁄_dev
 *
sdev
)

6977 
sdev
->
mbr
.
„©uª_Êags
 &~
PRIORITIZE_WRITE
;

6978 
sdev
->
mbr
.
„©uª_Êags
 &~
ATOMIC_WRITE
;

6979 
sdev
->
©omic_wrôe
 = 0;

6980 
sdev
->
¥i‹ôize_wrôe
 = 0;

6982 
	`£t_hód_cou¡
(
sdev
);

6983 
	}
}

6985 
	$ˇlcuœã_physiˇl_ˇ∑côy
(
sh™n⁄_dev
 *
dev
)

6987 
i
 = 0;

6988 
sh™n⁄_sb
 *
sb
;

6989 
max_£˘‹s
 = 0;

6991 
i
 = 
dev
->
mbr_eblocks
/dev->
∂™es
; i < dev->
sb_cou¡
; i++) {

6992 i‡(
dev
->
sbs
[
i
].
°©e
 !
DISCARDED_BLOCK
) {

6993 
sb
 = 
dev
->
sbs
 + 
i
;

6994 
max_£˘‹s
 +
sb
->
mö_d©a_luns
 * 
dev
->
max_avaûabÀ_groups
 * dev->
logicbs_ö_siblög_eblock
 - sb->
logicbs_ö_ïûog
;

6997 
max_£˘‹s
 -
GC_THROTTLE_BAR
 * 
dev
->
max_avaûabÀ_luns
 * dev->
logicbs_ö_siblög_eblock
;

6998 
max_£˘‹s
 *
dev
->
logicb_size
 >> 9;

6999 
	`debugs4
("physiˇ»ˇ∑côy%lu (ö kî√»£˘‹).\n", 
max_£˘‹s
);

7001  
max_£˘‹s
;

7003 
	}
}

7005 
	$ˇlcuœã_ovî¥ovisi⁄_øã
(
sh™n⁄_dev
 *
sdev
)

7007 
sdev
->
max_£˘‹s
 = 
	`ˇlcuœã_physiˇl_ˇ∑côy
(sdev);

7008 
sdev
->
ovî¥ovisi⁄_øã
 = 10000 - sdev->
sdisk
.
£˘‹s
 * 10000 / sdev->
max_£˘‹s
;

7009  
sdev
->
ovî¥ovisi⁄_øã
;

7010 
	}
}

7012 c⁄° *
	$¥öt_ac˚ss_mode
(
ac˚ss_mode
)

7014 
ac˚ss_mode
)

7016 
SHN_MODE_READWRITE
:

7018 
SHN_MODE_REDUCED_WRITE
:

7020 
SHN_MODE_READONLY
:

7025 
	}
}

7029 
	$upd©e_ac˚ss_mode
(
sh™n⁄_dev
 *
dev
)

7031 i‡(
dev
->
ªad⁄ly_ªas⁄
) {

7032 i‡(
sh™n⁄_f‹˚_rw
) {

7033 
dev
->
ac˚ss_mode
 = 
SHN_MODE_READWRITE
;

7034 
	`sh™n⁄_öfo
("%s: i¿ªad⁄ly modêbuàsh™n⁄_f‹˚_rw%d, së diskÑw.\n", 
dev
->
cdev_«me
, 
sh™n⁄_f‹˚_rw
);

7036 
dev
->
ac˚ss_mode
 = 
SHN_MODE_READONLY
;

7037 } i‡(
dev
->
ªdu˚d_wrôe_ªas⁄
)

7038 
dev
->
ac˚ss_mode
 = 
SHN_MODE_REDUCED_WRITE
;

7040 
dev
->
ac˚ss_mode
 = 
SHN_MODE_READWRITE
;

7042 i‡(
dev
->
•oﬁ
)

7043 
	`•oﬁ_upd©e_ac˚ss_mode
(
dev
->
•oﬁ
);

7045 i‡(
dev
->
sdisk
.
gd
) {

7046 i‡(
dev
->
ac˚ss_mode
 =
SHN_MODE_READONLY
) {

7047 
	`sh™n⁄_£t_disk_ro
(
dev
->
sdisk
.
gd
, 1);

7049 
	`sh™n⁄_£t_disk_ro
(
dev
->
sdisk
.
gd
, 0);

7052 
	`sh™n⁄_öfo
("%s: %s,Ñeadonly_reason= %x,Ñeduced_write_reason= %x.\n",

7053 
dev
->
cdev_«me
, 
	`¥öt_ac˚ss_mode
(dev->
ac˚ss_mode
), dev->
ªad⁄ly_ªas⁄
, dev->
ªdu˚d_wrôe_ªas⁄
);

7054  
dev
->
ac˚ss_mode
;

7055 
	}
}

7057 
	$upd©e_ac˚ss_mode_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

7059 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
ac˚ss_mode_w‹k
);

7060 
	`upd©e_ac˚ss_mode
(
sdev
);

7061 
	}
}

7063 
	$sh™n⁄_öô_blk_queue
(
sh™n⁄_dev
 *
sdev
)

7065 i‡(
sdev
->
sdisk
.
queue
)

7067 
sdev
->
sdisk
.
queue
 = 
	`sh™n⁄_¸óã_blkqueue
(sdev, &sdev->sdisk.
queue_lock
, 0);

7068 i‡(
sdev
->
sdisk
.
queue
 =
NULL
)

7069  -
ENOMEM
;

7071 
sdev
->
maj‹
 = 
sh™n⁄_maj‹
;

7072 
	`sh™n⁄_åim_£âög
(
sdev
->
sdisk
.
queue
);

7073 
	`sh™n⁄_rŸ©i⁄Æ_£âög
(
sdev
->
sdisk
.
queue
);

7074 
	`sh™n⁄_blk_queue_max_hw_£˘‹s
(
sdev
->
sdisk
.
queue
, 
SHN_BLK_DEF_MAX_SECTORS
);

7075 
	`sh™n⁄_blk_queue_block_size
(
sdev
->
sdisk
.
queue
, sdev->
u£r_logicb_size
, sdev->
logicb_size
);

7076 
	`sh™n⁄_blk_queue_io_mö
(
sdev
->
sdisk
.
queue
, sdev->
logicb_size
);

7077 
	`sh™n⁄_blk_queue_io_›t
(
sdev
->
sdisk
.
queue
, sdev->
logicb_size
 * sdev->
logicbs_ö_chunk
);

7080 
	}
}

7083 
	$sh™n⁄_©èch_sdev
(
sh™n⁄_dev
 *
dev
)

7086 i‡(
dev
->
sdisk
.
gd
) {

7087 
	`sh™n⁄_îr
("gídisk /dev/%†ÆªadyÉxi°s.\n", 
dev
->
sdisk
.
disk_«me
);

7091 
dev
->
sdisk
.
gd
 = 
	`sh™n⁄_Æloc_disk
(
SHANNON_MINORS
);

7092 i‡(!
dev
->
sdisk
.
gd
) {

7093 
	`sh™n⁄_îr
("%s:áŒoc_disk faûed.\n", 
dev
->
sdisk
.
disk_«me
);

7098 
	`sh™n⁄_öô_gídisk
(
dev
->
sdisk
.
gd
, dev->sdisk.
disk_«me
, dev->
maj‹
, 
SHANNON_MINORS
, dev->
drive_no
 * SHANNON_MINORS, dev->sdisk.
queue
, dev);

7099 
	`sh™n⁄_£t_ˇ∑côy
(
dev
->
sdisk
.
gd
, dev->sdisk.
£˘‹s
);

7100 i‡(
dev
->
ho°_ªad_£˘‹s
 > dev->
ho°_ªad_£˘‹s_hi°‹y
)

7101 
dev
->
ho°_ªad_£˘‹s_hi°‹y
 = dev->
ho°_ªad_£˘‹s
;

7102 
	`sh™n⁄_add_disk
(
dev
->
sdisk
.
gd
);

7104 i‡(
	`sh™n⁄_sysfs_lök
(&
dev
->
sysfs_kobj
)) {

7105 
	`sh™n⁄_îr
("%s:Üök kobje˘Åÿsysf†Áûed.\n", 
dev
->
sdisk
.
disk_«me
);

7106 
	`sh™n⁄_dëach
(
dev
);

7109 
	`debugs1
("%s: sysf†obje˘Üök d⁄e.\n", 
dev
->
sdisk
.
disk_«me
);

7110 
dev
->
sysfs_öô_d⁄e
 = 
SYSFS_LINK_DONE
;

7112 
dev
->
h¨d_queue_limô
 = 0;

7113 
dev
->
cmd_queue_wrôes_limô
 = 
	`DEFAULT_CMD_QUEUE_WRITES_THRESHOLD_H
(dev);

7115 
	`sh™n⁄_öfo
("Aâached Dúe˘-IO PCIêFœsh /dev/%†a†block devi˚ /dev/%s:\n", 
dev
->
cdev_«me
, dev->
sdisk
.
disk_«me
);

7116 
	`sh™n⁄_öfo
("sector size:Üogical %d /Öhysical %d, capacity: %d GB, overprovision: %d.%d%%.\n", \

7117 
dev
->
u£r_logicb_size
, dev->
logicb_size
, ()(dev->
sdisk
.
£˘‹s
 * 512 / 1000000000), dev->
ovî¥ovisi⁄_øã
 / 100, dev->overprovision_rate % 100);

7119 
	}
}

7121 
	$sh™n⁄_©èch
(
sh™n⁄_dev
 *
sdev
)

7123 
ªt
;

7124 
sdev
->
ovî¥ovisi⁄_øã
 = 
	`ˇlcuœã_ovî¥ovisi⁄_øã
(sdev);

7125 i‡(
sdev
->
ovî¥ovisi⁄_øã
 <= 0) {

7126 
	`sh™n⁄_îr
("%s:Ñequested capacity %llu is beyondÖhysical capability %llu.\n",

7127 
sdev
->
sdisk
.
disk_«me
, sdev->sdisk.
£˘‹s
, sdev->
max_£˘‹s
);

7130 i‡(
sdev
->
ovî¥ovisi⁄_øã
 < 
SHN_OVERPROVISION_THRESHOLD
) {

7131 
	`sh™n⁄_w¨n
("%s: overprovision is belowÅhreshold %d%% dueÅo dynamic bad block, set diskÑeadonly.\n",

7132 
sdev
->
sdisk
.
disk_«me
, 
SHN_OVERPROVISION_THRESHOLD
);

7133 
	`sh™n⁄_£t_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
sdev
->
ªad⁄ly_ªas⁄
);

7136 
	`sh™n⁄_öô_blk_queue
(
sdev
);

7138 i‡(
sh™n⁄_scsi_mode
)

7139 
ªt
 = 
	`sh™n⁄_©èch_scsi
(
sdev
->
sdisk
.
ho°d©a
, sdev->
pci_dev
);

7141 
ªt
 = 
	`sh™n⁄_©èch_sdev
(
sdev
);

7142 i‡(
ªt
)

7143  
ªt
;

7144 
sdev
->
°©e
 = (sdev->°©ê& 
SHN_STATE_ERROR_BIT
Ë| 
SHN_STATE_ATTACHED
;

7145 
sdev
->
sdisk
.
©èched
 = 
SHN_DISK_ATTACHED
;

7146 
	`upd©e_ac˚ss_mode
(
sdev
);

7148 i‡(
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
)

7149 
	`°¨t_¥öt_œãncy_timî
(&
sdev
->
sdisk
);

7153 
	}
}

7155 
	$sh™n⁄_dëach
(
sh™n⁄_dev
 *
dev
)

7157 
dev
->
sdisk
.
©èched
 = 
SHN_DISK_DETACHED
;

7158 
	`°›_¥öt_œãncy_timî
(&
dev
->
sdisk
);

7159 i‡(
sh™n⁄_scsi_mode
)

7160 
	`sh™n⁄_dëach_scsi
(
dev
->
sdisk
.
ho°d©a
);

7162 i‡(
dev
->
sdisk
.
gd
) {

7163 i‡(
dev
->
ho°_ªad_£˘‹s
 > dev->
ho°_ªad_£˘‹s_hi°‹y
)

7164 
dev
->
ho°_ªad_£˘‹s_hi°‹y
 = dev->
ho°_ªad_£˘‹s
;

7166 i‡(
dev
->
sysfs_öô_d⁄e
 =
SYSFS_LINK_DONE
) {

7167 
	`sh™n⁄_sysfs_u∆ök
(&
dev
->
sysfs_kobj
);

7168 
dev
->
sysfs_öô_d⁄e
 = 
SYSFS_INIT_DONE
;

7170 
	`sh™n⁄_dñ_gídisk
(
dev
->
sdisk
.
gd
);

7171 
	`sh™n⁄_put_disk
(
dev
->
sdisk
.
gd
);

7172 
dev
->
sdisk
.
gd
 = 
NULL
;

7173 
	`sh™n⁄_öfo
("Dëached Dúe˘-IO PCIêFœsh /dev/%†‰om OS.\n", 
dev
->
sdisk
.
disk_«me
);

7175 i‡(
dev
->
sdisk
.
queue
) {

7176 
	`sh™n⁄_blk_˛ónup_queue
(
dev
->
sdisk
.
queue
);

7177 
dev
->
sdisk
.
queue
 = 
NULL
;

7181 
dev
->
°©e
 = (dev->°©ê& 
SHN_STATE_ERROR_BIT
Ë| 
SHN_STATE_DETACHED
;

7183 
	}
}

7185 
	$check_the_d©e
()

7187 
sh™n⁄_timevÆ
 
tv
;

7188 
tmp
;

7192 
	`sh™n⁄_do_gëtimeofday
(&
tv
);

7194 
tmp
 = 
tv
.
tv_£c
 / 31566;

7197  (
tmp
 < 44000)?0:-1;

7198 
	}
}

7200 
	$Æloc_lun£ts_°ru˘uª
(
sh™n⁄_dev
 *
sdev
)

7202 
i
 = 0, 
j
 = 0;

7204 
sh™n⁄_pci_dev_t
 *
pdev
 = 
sdev
->
pci_dev
;

7206 
sdev
->
lun£ts
 = 
	`sh™n⁄_vmÆloc
((
sh™n⁄_lun£t
Ë* sdev->
lun£t_cou¡
);

7207 i‡(!
sdev
->
lun£ts
) {

7208 
	`sh™n⁄_îr
("cannotállocateÉnough memory for LUN_SET.\n");

7211 
	`sh™n⁄_mem£t
(
sdev
->
lun£ts
, 0x00, (
sh™n⁄_lun£t
Ë* sdev->
lun£t_cou¡
);

7213 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

7214 
sdev
->
lun£ts
[
i
].
ödex
 = i;

7215 
sdev
->
lun£ts
[
i
].sdev = sdev;

7216 
sdev
->
lun£ts
[
i
].
sq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
pdev
, 
QUEUE_SIZE
,

7217 &
sdev
->
lun£ts
[
i
].
sq_dma_addr
, 
GFP_SHANNON
);

7218 i‡(
sdev
->
lun£ts
[
i
].
sq_addr
 =
NULL
)

7220 
sdev
->
lun£ts
[
i
].
cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(
pdev
, 
QUEUE_SIZE
,

7221 &
sdev
->
lun£ts
[
i
].
cq_dma_addr
, 
GFP_SHANNON
);

7222 i‡(
sdev
->
lun£ts
[
i
].
cq_addr
 =
NULL
)

7224 
sdev
->
lun£ts
[
i
].
lun£t_˚s
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_˚
Ë* sdev->
max_˚_ö_lun£t
, 
GFP_SHANNON
);

7225 i‡(!
sdev
->
lun£ts
[
i
].
lun£t_˚s
) {

7226 
	`sh™n⁄_îr
("ˇ¬ŸáŒo¯íough mem‹y f‹Üun£t(%dËCE.\n", 
i
);

7229 
j
 = 0; j < 
sdev
->
max_˚_ö_lun£t
; j++) {

7230 
sdev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
ödex_ö_lun£t
 = j;

7231 
sdev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
„©uª_Êags
 = 0;

7232 
sdev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
lun£t
 = &sdev->lunsets[i];

7233 
sdev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
luns
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_lun
 *Ë* sdev->
max_lun_ö_˚
, 
GFP_SHANNON
);

7234 i‡(!
sdev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
luns
) {

7235 
	`sh™n⁄_îr
("ˇ¬ŸáŒo¯íough mem‹y f‹Üun£t(%dËCE(%d).\n", 
i
, 
j
);

7239 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
lun£ts
[
i
].
waô_cmd_pos
);

7241 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

7242 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
lun£ts
[
i
].
emu_waô
);

7243 
sdev
->
lun£ts
[
i
].
emu_thªad
 = 
	`sh™n⁄_kthªad_run
(
emuœt‹_thªad
, &sdev->lunsets[i], "shannon_emu%d", i);

7244 i‡(
	`SHANNON_IS_ERR
(
sdev
->
lun£ts
[
i
].
emu_thªad
)) {

7245 
	`sh™n⁄_îr
("createÉmulatorÅhread failed!\n");

7246  
	`SHANNON_PTR_ERR
(
sdev
->
lun£ts
[
i
].
emu_thªad
);

7248 
sdev
->
lun£ts
[
i
].
sq_hód
 = 0;

7250 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

7251 
sdev
->
lun£ts
[
i
].
lun_b¨
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * i));

7252 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
sq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr0
);

7253 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
sq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr1
);

7254 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
cq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr0
);

7255 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
cq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr1
);

7257 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
sq_hód
);

7258 
sdev
->
lun£ts
[
i
].
sq_hód
 = sdev->lun£ts[i].
sq_hw_hód
;

7259 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

7260 
sdev
->
lun£ts
[
i
].
cq_hód
 = sdev->lun£ts[i].
cq_hw_hód
;

7261 
sdev
->
lun£ts
[
i
].
cq_èû
 = sdev->lun£ts[i].
cq_hód
;

7262 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = sdev->lun£ts[i].
cq_hód
;

7263 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

7265 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = sdev->lun£ts[i].
sq_hód
;

7266 
	`sh™n⁄_muãx_öô
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

7267 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
lun£ts
[
i
].
lun_b¨_lock
);

7268 
	`sh™n⁄_muãx_öô
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

7269 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
lun£ts
[
i
].
ªq_queue
);

7270 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
lun£ts
[
i
].
ªq_queue_lock
);

7271 
	`sh™n⁄_öô_w‹k
(&
sdev
->
lun£ts
[
i
].
comp_w‹k
, 
h™dÀ_lun£t_èsk
);

7272 
	`sh™n⁄_öô_w‹k
(&
sdev
->
lun£ts
[
i
].
submô_w‹k
, 
sh™n⁄_lun£t_èsk
);

7273 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun£ts
[
i
].
ö_wq
, 0);

7275 
j
 = 0; j < 512; j++) {

7276 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
lun£ts
[
i
].
cmd_öfo
[
j
].
ªq_li°
);

7277 
sdev
->
lun£ts
[
i
].
cmd_öfo
[
j
].
cmd_Àn
 = 8;

7282 
	}
}

7284 
	$ªÀa£_lun£ts_°ru˘uª
(
sh™n⁄_dev
 *
dev
)

7286 
i
, 
j
;

7288 i‡(
dev
->
lun£ts
) {

7289 
i
 = 0; i < 
dev
->
lun£t_cou¡
; i++) {

7290 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
)||deföed(
CONFIG_SHANNON_EMU_MODULE
)

7291 i‡(!
	`SHANNON_IS_ERR_OR_NULL
(
dev
->
lun£ts
[
i
].
emu_thªad
))

7292 
	`sh™n⁄_kthªad_°›
(
dev
->
lun£ts
[
i
].
emu_thªad
);

7294 i‡(
dev
->
lun£ts
[
i
].
sq_addr
)

7295 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)dev->
lun£ts
[
i
].
sq_addr
, dev->lun£ts[i].
sq_dma_addr
);

7296 i‡(
dev
->
lun£ts
[
i
].
cq_addr
)

7297 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
dev
->
pci_dev
, 
QUEUE_SIZE
, (*)dev->
lun£ts
[
i
].
cq_addr
, dev->lun£ts[i].
cq_dma_addr
);

7298 i‡(
dev
->
lun£ts
[
i
].
lun£t_˚s
) {

7299 
j
 = 0; j < 
dev
->
max_˚_ö_lun£t
; j++) {

7300 i‡(
dev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
luns
)

7301 
	`sh™n⁄_k‰ì
(
dev
->
lun£ts
[
i
].
lun£t_˚s
[
j
].
luns
);

7303 
	`sh™n⁄_k‰ì
(
dev
->
lun£ts
[
i
].
lun£t_˚s
);

7306 
	`sh™n⁄_v‰ì
(
dev
->
lun£ts
);

7308 
	}
}

7310 
	$Æloc_lun_°ru˘uª
(
sh™n⁄_dev
 *
sdev
)

7312 
i
 = 0;

7314 
sdev
->
lun
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_lun
 *Ë* sdev->
lun_cou¡
, 
GFP_SHANNON
);

7315 i‡(!
sdev
->
lun
) {

7316 
	`sh™n⁄_îr
("cannotállocateÉnough memory for LUN.\n");

7319 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

7320 
sdev
->
lun
[
i
] = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_lun
), 
GFP_SHANNON
);

7321 i‡(!
sdev
->
lun
[
i
]) {

7322 
	`sh™n⁄_îr
("ˇ¬ŸáŒoˇãÉnough mem‹y f‹ LUN[%d].\n", 
i
);

7325 
sdev
->
lun
[
i
]->
bbt
 = 
	`sh™n⁄_kmÆloc
(
LUN_BBT_SIZE
, 
GFP_SHANNON
);

7326 i‡(!
sdev
->
lun
[
i
]->
bbt
) {

7327 
	`sh™n⁄_îr
("ˇ¬ŸáŒoˇãÉnough mem‹y f‹Üun_bbà[lun=%d].\n", 
i
);

7330 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
avaû_d©a_sbs
, sdev->
sb_cou¡
 - sdev->
mbr_eblocks
/sdev->
∂™es
);

7331 
	`debugs1
("i=%d,ávaû_d©a_sbs=%d.\n", 
i
, 
	`sh™n⁄_©omic_ªad
(&
sdev
->
lun
[i]->
avaû_d©a_sbs
));

7332 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
ecc_Áûuª_times
, 0);

7333 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
adv_ªad_Áûuª_times
, 0);

7334 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
dy«mic_bad_blk˙t
, 0);

7336 
	`sh™n⁄_mem£t
(
sdev
->
lun
[
i
]->
bbt
, 0xFF, 
LUN_BBT_SIZE
);

7337 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
lun
[
i
]->
bbt_lock
);

7338 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
√xt_em±y_∑ge
, 0);

7339 
	`sh™n⁄_muãx_öô
(&
sdev
->
lun
[
i
]->
ª‰esh_£m
);

7340 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
lun
[
i
]->
ª‰esh_⁄e_mbr_eblk_d⁄e_evít
);

7341 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
lun
[
i
]->
upd©e_poﬁ_öfo_d⁄e_evít
);

7343 
sdev
->
lun
[
i
]->sdev = sdev;

7344 
sdev
->
lun
[
i
]->
lun_num
 = i;

7345 
sdev
->
lun
[
i
]->
phy_lun_num
 = 
logiˇl_lun_to_phy_lun
[sdev->
mbr
.
lun_m≠_mode
](sdev, i);

7346 
sdev
->
lun
[
i
]->
lun£t
 = &sdev->
lun£ts
[sdev->lun[i]->
phy_lun_num
 / sdev->
max_lun_ö_lun£t
];

7347 
sdev
->
lun
[
i
]->
˚
 = &sdev->lun[i]->
lun£t
->
lun£t_˚s
[(sdev->lun[i]->
phy_lun_num
 / sdev->
max_lun_ö_˚
Ë% sdev->
max_˚_ö_lun£t
];

7348 
sdev
->
lun
[
i
]->
˚
->
luns
[sdev->lun[i]->
phy_lun_num
 % sdev->
max_lun_ö_˚
] = sdev->lun[i];

7350 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

7351 
sdev
->
lun
[
i
]->
emu_lun
 = &
emu_luns
[sdev->lun[i]->
phy_lun_num
];

7352 
emu_luns
[
sdev
->
lun
[
i
]->
phy_lun_num
].
logiˇl_lun
 = i;

7353 
	`sh™n⁄_öfo
("%s(): Lun=%dÉmuœt‹Üun◊ddªss=0x%lx).\n", 
__func__
, 
i
, ()
sdev
->
lun
[i]->
emu_lun
);

7355 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

7356 i‡(
sdev
->
övÆid_Êashids
[
i
])

7357 
sdev
->
lun
[
i
]->
bad
 = 1;

7359 i‡(!
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
)) {

7360 i‡(
	`lun_ªad_id
(
sdev
->
lun
[
i
]) < 0) {

7361 
sdev
->
lun
[
i
]->
bad
 = 1;

7362 
	`sh™n⁄_w¨n
("lun_read_id failed.Üun=%d,Öhy_lun_num=%d.",

7363 
i
, 
sdev
->
lun
[i]->
phy_lun_num
);

7366 
	`debugs1
("lun=%d,Öhy_lun_num=%d i†physiˇŒy bad.\n", 
i
, 
sdev
->
lun
[i]->
phy_lun_num
);

7370 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
lun
[
i
]->
check_lock
);

7371 
sdev
->
lun
[
i
]->
comm™d_timeout_˙t
 = 0;

7372 
sdev
->
lun
[
i
]->
îr_checkög
 = 0;

7373 
sdev
->
lun
[
i
]->
su•icious_bad_lun
 = 0;

7374 
	`sh™n⁄_©omic_£t
(&
sdev
->
lun
[
i
]->
îr_blocks
, 0);

7375 
	`sh™n⁄_öô_w‹k
(&
sdev
->
lun
[
i
]->
îr_checkög_w‹k
, 
sh™n⁄_lun_îr_checkög_èsk
);

7376 
	`sh™n⁄_öô_w‹k
(&
sdev
->
lun
[
i
]->
ªad_su•icious_bad_lun_w‹k
, 
ªad_su•icious_bad_lun_èsk
);

7379 
sdev
->
pba_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((sdev->
logicbs_ö_∑ge
 * sdev->
∑ges_ö_eblock
 * sdev->
eblocks_ö_lun
 * 
PBA_ENTRY_LEN
 + 8)/8);

7380 
	`debugs4
("pba_èbÀ_size=%d.\n", 
sdev
->
pba_èbÀ_size
);

7381 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

7382 
sh™n⁄_lun
 *
lun
 = 
sdev
->lun[
i
];

7383 i‡(
	`sh™n⁄_ã°_bô
(
lun
->
phy_lun_num
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
))

7385 
sdev
->
lun
[
i
]->
pba_èbÀ
 = 
	`sh™n⁄_vmÆloc
(sdev->
pba_èbÀ_size
);

7386 i‡(!
sdev
->
lun
[
i
]->
pba_èbÀ
) {

7387 
	`sh™n⁄_îr
("ˇ¬ŸáŒoˇãÉnough mem‹y f‹Öba_èbÀ [lun=%d].\n", 
i
);

7390 
	`sh™n⁄_mem£t
(
sdev
->
lun
[
i
]->
pba_èbÀ
, 
ALL_STALE
, sdev->
pba_èbÀ_size
);

7394 
	}
}

7396 
	$ªÀa£_lun_°ru˘uª
(
sh™n⁄_dev
 *
dev
)

7398 
i
;

7400 i‡(
dev
->
lun
) {

7401 
i
 = 0; i < 
dev
->
lun_cou¡
; i++) {

7402 i‡(
dev
->
lun
[
i
]) {

7403 i‡(
dev
->
lun
[
i
]->
pba_èbÀ
)

7404 
	`sh™n⁄_v‰ì
(
dev
->
lun
[
i
]->
pba_èbÀ
);

7405 i‡(
dev
->
lun
[
i
]->
bbt
)

7406 
	`sh™n⁄_k‰ì
(
dev
->
lun
[
i
]->
bbt
);

7407 
	`sh™n⁄_k‰ì
(
dev
->
lun
[
i
]);

7410 
	`sh™n⁄_k‰ì
(
dev
->
lun
);

7412 
	}
}

7414 
	#MAX_CALLBACK_WQ_COUNT
 12

	)

7415 
	#SINGLE_WQ_COUNT
 9

	)

7416 
	$Æloc_w‹kqueues
(
sh™n⁄_dev
 *
dev
)

7418 
i
 = 0, 
num
 = 0;

7419 *
wq
;

7421 
dev
->
sh™n⁄_ƒ_wq
 = 
	`mö_t
(, 2, 
	`gë_num_⁄löe_˝us
()/2);

7422 i‡(
dev
->
sh™n⁄_ƒ_wq
 == 0)

7423 
dev
->
sh™n⁄_ƒ_wq
 = 1;

7424 
dev
->
ˇŒback_ƒ_wq
 = (
	`gë_num_⁄löe_˝us
(Ë> 
MAX_CALLBACK_WQ_COUNT
) ? MAX_CALLBACK_WQ_COUNT : get_num_online_cpus();

7425 i‡(
dev
->
ˇŒback_ƒ_wq
 < 4)

7426 
dev
->
ˇŒback_ƒ_wq
 = 4;

7428 
dev
->
w‹kqueue_cou¡
 = 
SINGLE_WQ_COUNT
 + dev->
sh™n⁄_ƒ_wq
 + dev->
ˇŒback_ƒ_wq
;

7429 
dev
->
w‹kqueue_«me
 = 
	`sh™n⁄_kzÆloc
((*Ë* dev->
w‹kqueue_cou¡
, 
GFP_SHANNON
);

7431 i‡(
dev
->
w‹kqueue_«me
 =
NULL
) {

7432 
	`sh™n⁄_w¨n
("allocate workqueue_name failed!\n");

7436 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_comp_wq%c", 'a' + dev->
drive_no
);

7437 i‡(
sh™n⁄_u£_π_comp_thªad
)

7438 
wq
 = 
dev
->
sh™n⁄_π_comp_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_π_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7440 
wq
 = 
dev
->
sh™n⁄_comp_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]) ;

7441 i‡(
wq
 =
NULL
) {

7442 
	`sh™n⁄_w¨n
("create shannon completion workqueue failed!\n");

7445 
num
++;

7447 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_wq%c", 'a' + dev->
drive_no
);

7448 
dev
->
sh™n⁄_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7449 i‡(
dev
->
sh™n⁄_wq
 =
NULL
) {

7450 
	`sh™n⁄_w¨n
("create shannon workqueue failed!\n");

7453 
num
++;

7455 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_ªad_wq%c", 'a' + dev->
drive_no
);

7456 
dev
->
sh™n⁄_ªad_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7457 i‡(
dev
->
sh™n⁄_ªad_wq
 =
NULL
) {

7458 
	`sh™n⁄_w¨n
("create shannonÑead workqueue failed!\n");

7461 
num
++;

7463 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_≥riod_ªad_wq%c", 'a' + dev->
drive_no
);

7464 
dev
->
sh™n⁄_≥riod_ªad_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7465 i‡(
dev
->
sh™n⁄_≥riod_ªad_wq
 =
NULL
) {

7466 
	`sh™n⁄_w¨n
("create shannonÑead workqueue failed!\n");

7469 
num
++;

7471 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_misc_wq%c", 'a' + dev->
drive_no
);

7472 
dev
->
misc_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7473 i‡(
dev
->
misc_wq
 =
NULL
) {

7474 
	`sh™n⁄_w¨n
("create shannon watchdog workqueue failed!\n");

7477 
num
++;

7479 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_ª‰esh_wq%c", 'a' + dev->
drive_no
);

7480 
dev
->
ª‰esh_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7481 i‡(
dev
->
ª‰esh_wq
 =
NULL
) {

7482 
	`sh™n⁄_w¨n
("create shannonÑefresh workqueue failed!\n");

7485 
num
++;

7487 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_ªad_îr_wq%c", 'a' + dev->
drive_no
);

7488 
dev
->
ªad_îr_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7489 i‡(
dev
->
ªad_îr_wq
 =
NULL
) {

7490 
	`sh™n⁄_w¨n
("create shannonÑead_err workqueue failed!\n");

7493 
num
++;

7495 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_gc_wq%c", 'a' + dev->
drive_no
);

7496 
dev
->
gc_timî_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7497 i‡(
dev
->
gc_timî_wq
 =
NULL
) {

7498 
	`sh™n⁄_w¨n
("create shannon gc_timer workqueue failed!\n");

7501 
num
++;

7503 
dev
->
w‹kqueue_«me
[
num
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_wl_wq%c", 'a' + dev->
drive_no
);

7504 
dev
->
wl_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
]);

7505 i‡(
dev
->
wl_wq
 =
NULL
) {

7506 
	`sh™n⁄_w¨n
("create shannon wearÜeveling workqueue failed!\n");

7509 
num
++;

7511 
	`BUG_ON
(
num
 !
SINGLE_WQ_COUNT
);

7512 
dev
->
h™dÀ_lun_wq
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_w‹kqueue_°ru˘_t
 *Ë* dev->
sh™n⁄_ƒ_wq
, 
GFP_SHANNON
);

7513 i‡(
dev
->
h™dÀ_lun_wq
 =
NULL
) {

7514 
	`sh™n⁄_w¨n
("allocate handle_lun_wq failed!\n");

7517 
i
 = 0; i < 
dev
->
sh™n⁄_ƒ_wq
; i++) {

7518 
dev
->
w‹kqueue_«me
[
num
 + 
i
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_h™dÀ_lun%c/%d", 'a' + dev->
drive_no
, i);

7519 
dev
->
h™dÀ_lun_wq
[
i
] = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
 + i]);

7520 i‡(
dev
->
h™dÀ_lun_wq
[
i
] =
NULL
) {

7521 
	`sh™n⁄_w¨n
("create handle_lun workqueue failed!\n");

7526 
dev
->
sh™n⁄_ˇŒback_wq
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_w‹kqueue_°ru˘_t
 *Ë* dev->
ˇŒback_ƒ_wq
, 
GFP_SHANNON
);

7527 i‡(
dev
->
sh™n⁄_ˇŒback_wq
 =
NULL
) {

7528 
	`sh™n⁄_w¨n
("allocate shannon_callback_wq failed!\n");

7531 
i
 = 0; i < 
dev
->
ˇŒback_ƒ_wq
; i++) {

7532 
dev
->
w‹kqueue_«me
[
num
 + dev->
sh™n⁄_ƒ_wq
 + 
i
] = 
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_ˇŒback%c/%d", 'a' + dev->
drive_no
, i);

7533 
dev
->
sh™n⁄_ˇŒback_wq
[
i
] = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(dev->
w‹kqueue_«me
[
num
 + dev->
sh™n⁄_ƒ_wq
 + i]);

7534 i‡(
dev
->
sh™n⁄_ˇŒback_wq
[
i
] =
NULL
) {

7535 
	`sh™n⁄_w¨n
("create shannon callback workqueue failed!\n");

7541 
	}
}

7543 
	$ªÀa£_w‹kqueues
(
sh™n⁄_dev
 *
dev
)

7545 
i
;

7547 i‡(
dev
->
wl_wq
)

7548 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
wl_wq
);

7549 i‡(
dev
->
gc_timî_wq
)

7550 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
gc_timî_wq
);

7551 i‡(
dev
->
ªad_îr_wq
)

7552 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
ªad_îr_wq
);

7553 i‡(
dev
->
ª‰esh_wq
)

7554 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
ª‰esh_wq
);

7555 i‡(
dev
->
misc_wq
)

7556 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
misc_wq
);

7557 i‡(
dev
->
sh™n⁄_ªad_wq
)

7558 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
sh™n⁄_ªad_wq
);

7559 i‡(
dev
->
sh™n⁄_wq
)

7560 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
sh™n⁄_wq
);

7561 i‡(
dev
->
sh™n⁄_≥riod_ªad_wq
)

7562 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
sh™n⁄_≥riod_ªad_wq
);

7563 i‡(
dev
->
h™dÀ_lun_wq
) {

7564 
i
 = 0; i < 
dev
->
sh™n⁄_ƒ_wq
; i++) {

7565 i‡(
dev
->
h™dÀ_lun_wq
[
i
])

7566 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
h™dÀ_lun_wq
[
i
]);

7568 
	`sh™n⁄_k‰ì
(
dev
->
h™dÀ_lun_wq
);

7570 i‡(
dev
->
sh™n⁄_comp_wq
)

7571 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
sh™n⁄_comp_wq
);

7572 i‡(
dev
->
sh™n⁄_π_comp_wq
)

7573 
	`sh™n⁄_de°roy_π_w‹kqueue
(
dev
->
sh™n⁄_π_comp_wq
);

7574 i‡(
dev
->
sh™n⁄_ˇŒback_wq
) {

7575 
i
 = 0; i < 
dev
->
ˇŒback_ƒ_wq
; i++) {

7576 i‡(
dev
->
sh™n⁄_ˇŒback_wq
[
i
])

7577 
	`sh™n⁄_de°roy_w‹kqueue
(
dev
->
sh™n⁄_ˇŒback_wq
[
i
]);

7579 
	`sh™n⁄_k‰ì
(
dev
->
sh™n⁄_ˇŒback_wq
);

7582 i‡(
dev
->
w‹kqueue_«me
) {

7583 
i
 = 0; i < 
dev
->
w‹kqueue_cou¡
; i++)

7584 i‡(
dev
->
w‹kqueue_«me
[
i
])

7585 
	`sh™n⁄_k‰ì
(
dev
->
w‹kqueue_«me
[
i
]);

7586 
	`sh™n⁄_k‰ì
(
dev
->
w‹kqueue_«me
);

7588 
	}
}

7590 #i‡!
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

7591 
	~"sh™n⁄_d«.c
"

7592 
	$check_devi˚_d«
(
sh™n⁄_dev
 *
sdev
)

7594 
u64
 
d«_low
, 
d«_high
, 
sh™n⁄_sum
;

7595 
u32
 
ícoded_d«
;

7597 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

7598 
d«_low
 = 
	`sh™n⁄_ªadl
(&
sdev
->
b¨
->dna_low);

7599 
d«_high
 = 
	`sh™n⁄_ªadl
(&
sdev
->
b¨
->dna_high);

7600 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

7602 
sdev
->
d«
 = (
d«_high
 << 32Ë| 
d«_low
;

7603 
	`debugs2
("d«=0x%lx.\n", ()
sdev
->
d«
);

7604 
sh™n⁄_sum
 = 
	`sh™n⁄_ícode
(
sdev
->
d«
);

7607 
ícoded_d«
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
b¨
->encoded_dna);

7608 i‡((
sh™n⁄_sum
 & 0xffffffffË=
ícoded_d«
)

7612 
	}
}

7615 
	$check_u£r_logicb_size
(
sh™n⁄_dev
 *
sdev
)

7617 
	`debugs1
("sh™n⁄_£˘‹_size=%d.\n", 
sh™n⁄_£˘‹_size
);

7618 
sdev
->
u£r_logicb_size
 = 
sh™n⁄_£˘‹_size
;

7619 
sh™n⁄_£˘‹_size
) {

7623 
sdev
->
u£r_logicb_shi·
 = 9;

7626 
sdev
->
u£r_logicb_shi·
 = 10;

7629 
sdev
->
u£r_logicb_shi·
 = 11;

7632 
sdev
->
u£r_logicb_shi·
 = 12;

7635 
	`sh™n⁄_w¨n
("Unknow¿sh™n⁄_£˘‹_size=%d!\n", 
sh™n⁄_£˘‹_size
);

7637 
sdev
->
u£r_logicb_size
 = 0;

7639 
	}
}

7641 
	~"sh™n⁄_n‹.c
"

7642 c⁄° *
	$lök•ìd_°r
(
code
)

7644 
code
)

7655 
	}
}

7657 
	$f‹ge_sh™n⁄_udid
(
sh™n⁄_dev
 *
sdev
)

7659 
off£t
 = 0, 
i
 = 0;

7661 
	`sh™n⁄_mem£t
(
sdev
->
udid
, 0x0, 36);

7663 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
, 10, "1CB0%04X-", sdev->
pci_öfo
.
devi˚_id
);

7665 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
 + off£t, 10, "%04X%04X-", sdev->
pci_öfo
.
subsy°em_víd‹_id
,sdev->Öci_öfo.
subsy°em_devi˚_id
);

7667 i‡(
sdev
->
has_£rvi˚_èg
) {

7669 i‡(
	`sh™n⁄_°æí
(
sdev
->
£rvi˚_èg
) == 14) {

7670 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
 + off£t, 4, "0%02X", sdev->
£rvi˚_èg
[1]);

7671 
	`sh™n⁄_mem˝y
(
sdev
->
udid
 + 
off£t
, sdev->
£rvi˚_èg
 + 2, 5);

7672 
off£t
 += 5;

7673 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
 + off£t, 4, "-%02X", sdev->
£rvi˚_èg
[7]);

7674 
	`sh™n⁄_mem˝y
(
sdev
->
udid
 + 
off£t
, sdev->
£rvi˚_èg
 + 8, 6);

7675 
off£t
 += 6;

7677 
i
 = 0; i < 16; i++) {

7678 i‡–
i
 == 8) {

7679 
sdev
->
udid
[
off£t
 + 
i
] = '-';

7680 
off£t
 += 1;

7683 i‡(
sdev
->
£rvi˚_èg
[
i
] == 0)

7684 
sdev
->
udid
[
off£t
 + 
i
] = '0';

7685 i‡((
sdev
->
£rvi˚_èg
[
i
] >= '0') && (sdev->service_tag[i] <= '9'))

7686 
sdev
->
udid
[
off£t
 + 
i
] = sdev->
£rvi˚_èg
[i];

7688 
sdev
->
udid
[
off£t
 + 
i
] = 'A' + (sdev->
£rvi˚_èg
[i] - 'A') % 6;

7690 
off£t
 += 16;

7692 
sdev
->
udid
[
off£t
] = 0;

7694 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
 + off£t, 10, "%08X-", sdev->
d«
 & 0xffffffffUL);

7695 
off£t
 +
	`sh™n⁄_¢¥ötf
(
sdev
->
udid
 + off£t, 9, "%08X", sdev->
d«
 >> 32);

7696 
sdev
->
udid
[
off£t
] = 0;

7698 
	`BUG_ON
(
off£t
 >(
sdev
->
udid
));

7699 
	}
}

7701 
	$sh™n⁄_dev_pci_öôülize
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
)

7703 
ªsour˚_size_t
 
ba£_addr
;

7704 
Àngth
;

7705 
	#MAX_RESET_TIME
 5

	)

7706 
ª£t_out
 = 
MAX_RESET_TIME
;

7707 
max_lökwidth
 = 0;

7708 
sh™n⁄_pci_öfo
 
¶Ÿ_öfo
 = {0};

7710 
sdev
->
pci_dev
 = 
pdev
;

7713 
	`gë_pci_öfo
(
sdev
->
pci_dev
, &sdev->
pci_öfo
);

7716 
	`gë_pci_öfo
(
	`sh™n⁄_pci_gë_¶Ÿ
(
sdev
->
pci_dev
, sdev->
pci_öfo
.
dev‚
), &
¶Ÿ_öfo
);

7718 
max_lökwidth
 = 
	`mö_t
(, 
	`sh™n⁄_pci_gë_max_lökwidth
(&
¶Ÿ_öfo
), sh™n⁄_pci_gë_max_lökwidth(&
sdev
->
pci_öfo
));

7719 (
ª£t_out
--Ë&& (
	`sh™n⁄_pci_gë_cur_lökwidth
(&
sdev
->
pci_öfo
Ë< 
max_lökwidth
Ë&& 
sh™n⁄_do_pci_ª£t
) {

7720 
	`sh™n⁄_öfo
("%2.2x:%2.2x.%1.1x: current deviceÜink width(%d) don`t match maxÜink width(%d),ÅryÑeset...%d\n",

7721 
sdev
->
pci_öfo
.
pci_bus_numbî
, sdev->pci_öfo.
pci_¶Ÿ_numbî
, sdev->pci_öfo.
pci_func_numbî
,

7722 
	`sh™n⁄_pci_gë_cur_lökwidth
(&
sdev
->
pci_öfo
),

7723 
max_lökwidth
,

7724 
MAX_RESET_TIME
 - 
ª£t_out
);

7729 i‡(
	`sh™n⁄_pci_ª£t_fun˘i⁄
(
sdev
->
pci_dev
) == 1)

7731 
	`sh™n⁄_m¶ìp
(500);

7732 
	`gë_pci_öfo
(
sdev
->
pci_dev
, &sdev->
pci_öfo
);

7735 
	`sh™n⁄_£t_max_∑ylﬂd_size
(
pdev
);

7736 
	`sh™n⁄_dißbÀ_c‹ª˘abÀ_´r
(
pdev
);

7737 
sdev
->
hŸ_∂uggabÀ
 = 
	`check_hŸ_∂uggabÀ
(
pdev
);

7739 i‡(
	`sh™n⁄_pci_íabÀ_devi˚
(
pdev
))

7741 
	`sh™n⁄_pci_£t_ma°î
(
pdev
);

7742 i‡(
	`sh™n⁄_pci_ªque°_ªgi⁄
(
pdev
, 0, "shannon"))

7743 
dißbÀ
;

7745 i‡(
	`sh™n⁄_pcõ_£t_ªadrq
(
pdev
, 4096))

7746 
	`sh™n⁄_log
("cannot setÑead_request_size.\n");

7748 
ba£_addr
 = 
	`sh™n⁄_pci_ªsour˚_°¨t
(
pdev
, 0);

7749 i‡(
	`u∆ikñy
(!
ba£_addr
)) {

7750 
ªÀa£
;

7753 
Àngth
 = 
	`sh™n⁄_pci_ªsour˚_Àn
(
pdev
, 0);

7755 
	`debugs3
("BAR0 ba£_addr=0x%Œx,Üígth=%ld.\n", 
ba£_addr
, 
Àngth
);

7757 
sdev
->
b¨
 = 
	`sh™n⁄_i‹em≠
(
ba£_addr
, 
Àngth
);

7758 i‡(
	`u∆ikñy
(!
sdev
->
b¨
)) {

7759 
	`sh™n⁄_îr
("can't map MMIO.\n");

7760 
ªÀa£
;

7763 
sdev
->
öãºu±_b¨
 = (
u32
 *)sdev->
b¨
 + 128;

7764 
sdev
->
globÆ_b¨
 = (globÆ_b¨ *)((
u32
 *)sdev->
b¨
 + 192);

7766 i‡(
	`sh™n⁄_dma_£t_mask
(
pdev
, 
	`SHANNON_DMA_BIT_MASK
(64)) < 0)

7767 
	`sh™n⁄_log
("cannot dma_set_mask(64).\n");

7768 #ifde‡
CONFIG_SHANNON_DMA_QUEUE_64BIT


7769 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

7770 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
DMA_QUEUE_64BIT
, 1);

7771 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

7773 i‡(
	`sh™n⁄_dma_£t_cohîít_mask
(
pdev
, 
	`SHANNON_DMA_BIT_MASK
(32)) < 0)

7774 
	`sh™n⁄_log
("cannot dma_set_coherent_mask(32).\n");

7778 
ªÀa£
:

7779 
	`sh™n⁄_pci_ªÀa£_ªgi⁄s
(
pdev
);

7780 
dißbÀ
:

7781 
	`sh™n⁄_pci_dißbÀ_devi˚
(
pdev
);

7783 
	}
}

7785 
	$sh™n⁄_dev_pci_deöôülize
(
sh™n⁄_dev
 *
sdev
)

7787 
	`sh™n⁄_iounm≠
(
sdev
->
b¨
);

7788 
	`sh™n⁄_pci_ªÀa£_ªgi⁄s
(
sdev
->
pci_dev
);

7789 
	`sh™n⁄_pci_dißbÀ_devi˚
(
sdev
->
pci_dev
);

7790 
	}
}

7792 
sh™n⁄_ªc⁄fig_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

7793 
sh™n⁄_ª£t_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

7794 
sh™n⁄_upd©e_mi¸ocode_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

7795 
sh™n⁄_∂ugout_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

7796 
sh™n⁄_eje˘_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

7798 
	$öô_mi¸ocode_¨øy
(
sh™n⁄_dev
 *
sdev
)

7800 
i
;

7802 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++) {

7803 
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 = 
MICROCODE_INVALID
;

7804 
sdev
->
mi¸ocode_¨øy
[
i
].
≥_cy˛e
 = 0;

7805 
sdev
->
mi¸ocode_¨øy
[
i
].
°¨t_ªg
 = -1;

7806 
sdev
->
mi¸ocode_¨øy
[
i
].
mi¸ocode_Àngth
 = 0;

7807 
sdev
->
mi¸ocode_¨øy
[
i
].
èbÀ
 = 
NULL
;

7809 
	}
}

7812 
	$sdev_öôülize_v¨übÀs
(
sh™n⁄_dev
 *
sdev
)

7814 
i
 = 0, 
j
 = 0;

7816 
sdev
->
gc_wrôes
 = 0;

7817 
sdev
->
ho°_wrôes
 = 0;

7818 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
ª£nd_li°
);

7819 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
ª£nd_li°_lock
);

7821 
sdev
->
∑rôy_öô_d⁄e
[0] = 1;

7822 
sdev
->
∑rôy_öô_d⁄e
[1] = 1;

7823 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
∑rôy_öô_d⁄e_evít
[0]);

7824 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
∑rôy_öô_d⁄e_evít
[1]);

7826 
	`öô_mi¸ocode_¨øy
(
sdev
);

7827 
	`sh™n⁄_©omic_£t
(&
sdev
->
disˇrded_blk˙t
, 0);

7828 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
‰ì_blocks
);

7829 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
‰ì_blocks_lock
);

7830 
sdev
->
‰ì_blk˙t
 = 0;

7831 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
u£d_blocks
[
HOT_INDEX
]);

7832 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
u£d_blocks_lock
[
HOT_INDEX
]);

7833 
sdev
->
u£d_blk˙t
[
HOT_INDEX
] = 0;

7834 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
u£d_blocks
[
COLD_INDEX
]);

7835 
sdev
->
u£d_blk˙t
[
COLD_INDEX
] = 0;

7836 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
u£d_blocks_lock
[
COLD_INDEX
]);

7837 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_îa£d
);

7838 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
waô_îa£d_lock
);

7839 
sdev
->
waô_îa£d_blk˙t
 = 0;

7840 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_c›y
);

7841 
sdev
->
waô_c›y_blk˙t
 = 0;

7842 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
waô_c›y_lock
);

7843 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
c›y_îr_blocks
);

7844 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
c›y_îr_lock
);

7845 
sdev
->
c›y_îr_blk˙t
 = 0;

7846 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
ªcovî_îr_blocks
);

7847 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
ªcovî_îr_lock
);

7848 
sdev
->
ªcovî_îr_blk˙t
 = 0;

7850 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
îr_blks
);

7851 
sdev
->
îr_blk˙t
 = 0;

7852 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
îr_blks_lock
);

7853 
	`sh™n⁄_©omic_£t
(&
sdev
->
≥ndög_îr_blks
, 0);

7854 
sdev
->
ªcovî_øã
 = 100;

7855 
sdev
->
this_îr_sb
 = 
NULL
;

7856 
sdev
->
this_îr_°rùe
 = 0;

7858 
sdev
->
ªad_îr_msg_Àvñ
 = 
ONE_MSG_PER_BLK
;

7860 
	`sh™n⁄_mem£t
(
sdev
->
îr_check_bôm≠
, 0, 
LUN_BITMAP_LEN
);

7861 
sdev
->
îr_check_debug
 = 0;

7862 
sdev
->
su•icious_bad_lun_ödiˇt‹
 = 3;

7864 
i
 = 0; i < 
PRIORITY_LEVELS
; i++) {

7865 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
ªq_queue
[
i
]);

7866 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
ªq_queue_lock
[
i
]);

7867 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_ªqs
[
i
], 0);

7869 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
gc_wrôe_queue
);

7870 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
gc_wrôe_queue_lock
);

7871 
	`sh™n⁄_©omic_£t
(&
sdev
->
gc_wrôe_ªqs
, 0);

7873 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_ªqs_f‹_gc
, 0);

7874 
	`sh™n⁄_muãx_öô
(&
sdev
->
°©e_£m
);

7875 
	`sh™n⁄_muãx_öô
(&
sdev
->
∂ug_out_£m
);

7876 
	`sh™n⁄_muãx_öô
(&
sdev
->
modify_mbr_£m
);

7877 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_Êight_wrôes
, 0);

7878 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_cmd_queue_wrôes
, 0);

7879 
	`sh™n⁄_©omic_£t
(&
sdev
->
gc_ö_Êight
, 0);

7880 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_cmd_queue_adv_ªads
, 0);

7881 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
adv_ªad_li°
);

7882 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
adv_ªad_li°_lock
);

7884 #ifde‡
CONFIG_SHANNON_VERBOSE_DEBUG


7885 
	`sh™n⁄_©omic_£t
(&
sdev
->
ªad_bios
, 0);

7886 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_bios
, 0);

7888 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
limô_ªq_queue
[0]);

7889 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
limô_ªq_queue
[1]);

7890 #ifde‡
CONFIG_SHANNON_STATISTICS


7891 
	`sh™n⁄_©omic_£t
(&
sdev
->
‰om_ho°
, 0);

7892 
	`sh™n⁄_©omic_£t
(&
sdev
->
‰om_gc
, 0);

7895 
sdev
->
¢≠_ªad_íabÀ
 = 0;

7896 
	`sh™n⁄_©omic64_£t
(&
sdev
->
¢≠_ªad_cou¡î
, 0);

7897 
	`sh™n⁄_©omic_£t
(&
sdev
->
¢≠_ªad_mism©ch
, 0);

7898 
sdev
->
≥riod_ªad
.
°©e
 = 
PERIOD_READ_DISABLE
;

7899 
sdev
->
≥riod_ªad
.
≥riod
 = 0;

7900 
sdev
->
≥riod_ªad
.
µa
 = ~0x0;

7901 
sdev
->
≥riod_ªad
.
mö_£q_num
 = 0x0;

7902 
sdev
->
≥riod_ªad
.
max_£q_num
 = ~0x0;

7903 
sdev
->
≥riod_ªad
.
blk˙t
 = 0;

7904 
sdev
->
≥riod_ªad
.
a˘ive_d⁄e
[0] = 0;

7905 
sdev
->
≥riod_ªad
.
a˘ive_d⁄e
[1] = 0;

7906 
sdev
->
≥riod_ªad
.
œ°_blk_d⁄e
[0] = 0;

7907 
sdev
->
≥riod_ªad
.
œ°_blk_d⁄e
[1] = 0;

7908 
	`sh™n⁄_öô_w‹k
(&
sdev
->
≥riod_ªad_w‹k
, 
sh™n⁄_≥riod_ªad_èsk
);

7909 
	`sh™n⁄_öô_timî
(&
sdev
->
≥riod_ªad_timî
);

7910 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
≥riod_ªad_timî
, 
≥riod_ªad_timî_timeout
);

7912 
sdev
->
gc_Á˘‹
 = 
GC_DIVIDE_FACTOR
;

7913 
sdev
->
hŸ_block_ª˛aim_¥i‹ôy
 = 95;

7914 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
ªgs_›_lock
);

7915 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
this_sb_lock
);

7916 
sdev
->
this_sb
 = 
NULL
;

7917 
sdev
->
this_∑ge_°rùe
 = 0;

7918 
sdev
->
this_lun
 = 0;

7919 
	`sh™n⁄_öô_timî
(&
sdev
->
gc_timî
);

7920 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
gc_timî
, 
gc_thrŸée_timeout
);

7921 
	`sh™n⁄_öô_w‹k
(&
sdev
->
gc_timî_w‹k
, 
sh™n⁄_gc_timî_èsk
);

7922 
	`sh™n⁄_öô_timî
(&
sdev
->
bÆ™˚_gc_timî
);

7923 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
bÆ™˚_gc_timî
, 
bÆ™˚_gc_timeout
);

7924 
	`sh™n⁄_öô_w‹k
(&
sdev
->
ª‰esh_w‹k
, 
sh™n⁄_ª‰esh_èsk
);

7925 
sdev
->
ãm≥øtuª_w¨nög_thªshﬁd
 = 79;

7926 
	`sh™n⁄_öô_timî
(&
sdev
->
w©chdog_timî
);

7927 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
w©chdog_timî
, 
w©chdog_fun˘i⁄
);

7928 
	`sh™n⁄_öô_w‹k
(&
sdev
->
w©chdog_w‹k
, 
sh™n⁄_w©chdog_èsk
);

7929 
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
 = 0;

7930 
	`sh™n⁄_öô_timî
(&
sdev
->
sdisk
.
¥öt_œãncy_timî
);

7931 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
sdisk
.
¥öt_œãncy_timî
, 
¥öt_œãncy_fun˘i⁄
);

7932 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
sdisk
.
ªc‹d_œãncy_lock
);

7933 
	`sh™n⁄_öô_w‹k
(&
sdev
->
ac˚ss_mode_w‹k
, 
upd©e_ac˚ss_mode_èsk
);

7934 
	`sh™n⁄_öô_w‹k
(&
sdev
->
pm_qos_w‹k
, 
sh™n⁄_pm_qos_èsk
);

7935 
	`sh™n⁄_öô_w‹k
(&
sdev
->
w‹k
, 
sh™n⁄_èsk
);

7936 
	`sh™n⁄_öô_w‹k
(&
sdev
->
∂ugout_w‹k
, 
sh™n⁄_∂ugout_èsk
);

7937 
	`sh™n⁄_öô_w‹k
(&
sdev
->
ªc⁄fig_w‹k
, 
sh™n⁄_ªc⁄fig_èsk
);

7938 
	`sh™n⁄_öô_w‹k
(&
sdev
->
ª£t_w‹k
, 
sh™n⁄_ª£t_èsk
);

7939 
	`sh™n⁄_öô_w‹k
(&
sdev
->
upd©e_mi¸ocode_w‹k
, 
sh™n⁄_upd©e_mi¸ocode_èsk
);

7940 
	`sh™n⁄_öô_dñayed_w‹k
(&
sdev
->
eje˘_w‹k
, 
sh™n⁄_eje˘_èsk
);

7941 
	`sh™n⁄_muãx_öô
(&
sdev
->
pick_£m
);

7942 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
block_ho°_wr
);

7943 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
waô_‰ì_blk
);

7944 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
big_lock_evít
);

7945 
	`sh™n⁄_©omic_£t
(&
sdev
->
°©ic_bad_blk˙t
, 0);

7946 
	`sh™n⁄_©omic_£t
(&
sdev
->
dy«mic_bad_blk˙t
, 0);

7947 
	`sh™n⁄_©omic_£t
(&
sdev
->
ecc_Áûuª_times
, 0);

7948 
	`sh™n⁄_©omic_£t
(&
sdev
->
ecc_fc_°©i°ics
, 0);

7949 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_gc_blk˙t
, 0);

7950 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
gc_°©e_lock
);

7951 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
gc_ªqs_lock
);

7952 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_gc_logicbs
, 0);

7953 
	`sh™n⁄_©omic_£t
(&
sdev
->
gc_thªads
, 0);

7954 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
waô_pick_evít
);

7956 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_îa£_blk˙t
, 0);

7957 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_wl_blk˙t
, 0);

7958 
	`sh™n⁄_öô_w‹k
(&
sdev
->
wl_föd_sb_w‹k
, 
sh™n⁄_wl_èsk
);

7959 
	`sh™n⁄_öô_w‹k
(&
sdev
->
wl_ªad_w‹k
, 
sh™n⁄_wl_ªad_èsk
);

7960 
sdev
->
wl_ªas⁄
 = 0;

7961 
sdev
->
√xt_wl_ªas⁄
 = 0;

7962 
sdev
->
wl_this_sb
 = 
NULL
;

7963 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_wl_logicbs
, 0);

7964 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_wl_li°
);

7965 
sdev
->
waô_wl_blk˙t
 = 0;

7966 
	`sh™n⁄_©omic_£t
(&
sdev
->
ö_wl_blk˙t
, 0);

7967 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
waô_wl_lock
);

7968 
	`sh™n⁄_öô_timî
(&
sdev
->
d©a_ªã¡i⁄_timî
);

7969 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
d©a_ªã¡i⁄_timî
, 
d©a_ªã¡i⁄_timî_èsk
);

7970 
	`sh™n⁄_öô_timî
(&
sdev
->
wl_timî
);

7971 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
wl_timî
, 
wl_timî_èsk
);

7972 
sdev
->
úq_dñay
.irq_delay = 5;

7973 
	`sh™n⁄_öô_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

7974 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
upd©e_úq_dñay_timeout
);

7975 
	`sh™n⁄_öô_w‹k
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_w‹k
, 
upd©e_úq_dñay_èsk
);

7976 
sdev
->
úq_dñay
.
upd©e_úq_dñay_öãrvÆ
 = 
DEFAULT_UPDATE_IRQ_DELAY_TIMEOUT
;

7977 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
DEFAULT_ENABLE_DYNAMIC_IRQ_DELAY
;

7978 
sdev
->
úq_dñay
.
Á˘‹
 = 
DEFAULT_IRQ_DELAY_FACTOR
;

7979 
sdev
->
úq_dñay
.
mö_úq_dñay
 = 
DEFAULT_MIN_IRQ_DELAY
;

7980 
sdev
->
úq_dñay
.
max_úq_dñay
 = 
DEFAULT_MAX_IRQ_DELAY
;

7981 
sdev
->
úq_dñay
.
wrôe_œãncy_divide
 = 
DEFAULT_HOST_WRITE_LAT_DIVIDE
;

7982 
sdev
->
úq_dñay
.
ªad_œãncy_divide
 = 
DEFAULT_HOST_READ_LAT_DIVIDE
;

7983 
sdev
->
úq_dñay
.
wrôe_thªshﬁd_Á˘‹
 = 
DEFAULT_HOST_WRITE_THRESHOLD_FACTOR
;

7984 
sdev
->
úq_dñay
.
ªad_thªshﬁd_Á˘‹
 = 
DEFAULT_HOST_READ_THRESHOLD_FACTOR
;

7985 
sdev
->
úq_dñay
.
ho°_wrôe_ios_œ°
 = 0;

7986 
sdev
->
úq_dñay
.
ho°_wrôe_m£cs_œ°
 = 0;

7987 
sdev
->
úq_dñay
.
ho°_ªad_ios_œ°
 = 0;

7988 
sdev
->
úq_dñay
.
ho°_ªad_m£cs_œ°
 = 0;

7989 
sdev
->
wl_timî_öãrvÆ
 = 
WL_TIMER_INTERVAL
;

7990 
sdev
->
ªad_di°urb_thªshﬁd
 = 1000000;

7991 
sdev
->
›í_block_ªad_di°urb_thªshﬁd
 = 300000;

7992 
sdev
->
max_ö_wl_logicbs
 = 10;

7993 
sdev
->
cuºít_max_ö_wl_logicbs
 = 10;

7994 
sdev
->
wl_max_îa£_cou¡
 = 3000;

7995 
sdev
->
wl_îa£_cou¡_dñè
[0] = 300;

7996 
sdev
->
wl_îa£_cou¡_dñè
[1] = 200;

7997 
sdev
->
buf_ªad_Áûed
 = 0;

7999 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
io_°©i°ics_lock
);

8000 
sdev
->
exåa_ªqs
 = 0;

8001 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
exåa_ªqs_lock
);

8002 
	`sh™n⁄_©omic_£t
(&
sdev
->
logicb_buf_cou¡
, 0);

8003 
	`sh™n⁄_©omic_£t
(&
sdev
->
îa£_d⁄e
, 0);

8004 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
îa£_d⁄e_evít
);

8005 
	`sh™n⁄_©omic_£t
(&
sdev
->
ª‰esh_mbr_d⁄e
, 0);

8006 
	`sh™n⁄_©omic_£t
(&
sdev
->
ª‰esh_mbr_cou¡
, 0);

8007 
sdev
->
sdisk
.
n⁄Æig√d_bios
 = 0;

8008 
sdev
->
sdisk
.
n⁄Æig√d_ªqs
 = 0;

8009 
sdev
->
sdisk
.
Æig√d_ªqs
 = 0;

8010 
i
 = 0; i < 2; i++) {

8011 
j
 = 0; j < 
RMW_LIST_COUNT
; j++) {

8012 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
sdisk
.
rmw_li°_lock
[
i
][
j
]);

8013 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
sdisk
.
rmw_li°
[
i
][
j
]);

8016 
	`sh™n⁄_©omic_£t
(&
sdev
->
u£rs
, 1);

8017 
sdev
->
buf„r_wrôe_cou¡î
 = 0;

8018 
sdev
->
dúe˘_wrôe_cou¡î
 = 0;

8019 
sdev
->
tŸÆ_ªad_£˘‹s
 = 0;

8020 
sdev
->
tŸÆ_ªad_£˘‹s_œ°
 = 0;

8021 
sdev
->
tŸÆ_ªad_b™dwidth
 = 0;

8022 
sdev
->
tŸÆ_gc_logicbs
 = 0;

8023 
sdev
->
tŸÆ_gc_£˘‹s_œ°
 = 0;

8024 
sdev
->
tŸÆ_wl_logicbs
 = 0;

8025 
sdev
->
tŸÆ_wl_£˘‹s_œ°
 = 0;

8026 
sdev
->
tŸÆ_îr_ªcovî_logicbs
 = 0;

8027 
sdev
->
tŸÆ_îr_ªcovî_£˘‹s_œ°
 = 0;

8029 
sdev
->
gc_sbs
 = 0;

8030 
sdev
->
îr_ªcovîed_sbs
 = 0;

8031 
sdev
->
wl_sbs
 = 0;

8032 
sdev
->
d©a_ªã¡i⁄_sbs
 = 0;

8033 
sdev
->
ªad_di°urb_sbs
 = 0;

8034 
sdev
->
îa£_bÆ™˚_sbs
 = 0;

8035 
sdev
->
ecc_Áûuª_sbs
 = 0;

8036 
sdev
->
£˘‹s_codew‹d_addr
 = 
NULL
;

8038 
sdev
->
cuºít_mi¸ocode_ödex
 = -1;

8039 
sdev
->
sdisk
.
exô
 = 0;

8040 
sdev
->
sdisk
.
ö_ªc⁄fig
 = 0;

8041 
sdev
->
∂ug_out
 = 0;

8042 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

8043 
sdev
->
ö_úq
[
i
] = 0;

8044 #ifde‡
CONFIG_SHANNON_DEBUG


8045 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
gc_°©e_li°
);

8046 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
gc_°©e_li°_lock
);

8048 
sdev
->
sdisk
.
¥i‹ôy
 = 1;

8049 
sdev
->
sdisk
.
©èched
 = 
SHN_DISK_DETACHED
;

8050 
sdev
->
°©e
 = 
SHN_STATE_DETACHED
;

8052 
	`sh™n⁄_muãx_öô
(&
sdev
->
wrôe_bbt_£m
);

8053 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
fuŒ_n‹_block_li°
);

8054 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
u£d_n‹_block_li°
);

8055 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
‰ì_n‹_block_li°
);

8056 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
waô_îa£_n‹_block_li°
);

8057 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
îa£_îr_n‹_block_li°
);

8058 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
wrôe_îr_n‹_block_li°
);

8059 
	`sh™n⁄_muãx_öô
(&
sdev
->
thrŸée_wrôe_bw_£m
);

8060 
	`sh™n⁄_©omic_£t
(&
sdev
->
wrôe_bw
, 0);

8061 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
îa£_dummy_d⁄e_evít
);

8062 
	`sh™n⁄_©omic_£t
(&
sdev
->
îa£_dummy_d⁄e
, 0);

8063 
	}
}

8065 
	$sdev_ªad_h¨dw¨e_c⁄fig
(
sh™n⁄_dev
 *
sdev
)

8067 
u32
 
ˇ∑bûôy
;

8068 
u32
 
ecc_ˇp
;

8070 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

8071 
sdev
->
fúmw¨e_vîsi⁄
 = 
	`sh™n⁄_ªadl
(&sdev->
b¨
->firmware_version);

8072 
sdev
->
fúmw¨e_èg
 = 
	`sh™n⁄_ªadl
(&sdev->
b¨
->firmware_tag);

8073 
ˇ∑bûôy
 = 
	`sh™n⁄_ªadl
(&
sdev
->
b¨
->
ˇp
);

8074 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

8075 
sdev
->
h¨dw¨e_vîsi⁄
 = 
ˇ∑bûôy
 & 0xFF;

8076 
sdev
->
max_lun_ö_˚
 = ((
ˇ∑bûôy
 >> 12) & 0xF) + 1;

8077 
sdev
->
max_ch™√ls
 = (
ˇ∑bûôy
 >> 16) & 0xFF;

8078 
sdev
->
max_lun£t_ö_ch™√l
 = (
ˇ∑bûôy
 >> 24) & 0xF;

8079 
sdev
->
max_lun_ö_lun£t
 = ((
ˇ∑bûôy
 >> 28) & 0xF) + 1;

8080 
sdev
->
max_lun_ö_ch™√l
 = sdev->
max_lun_ö_lun£t
 * sdev->
max_lun£t_ö_ch™√l
;

8081 
sdev
->
lun£t_cou¡
 = sdev->
max_lun£t_ö_ch™√l
 * sdev->
max_ch™√ls
;

8082 
sdev
->
max_˚_ö_lun£t
 = sdev->
max_lun_ö_lun£t
 / sdev->
max_lun_ö_˚
;

8084 
	`sh™n⁄_öfo
("¥obög %†© %2.2x:%2.2x.%1.1x:\n", 
sdev
->
cdev_«me
, sdev->
pci_öfo
.
pci_bus_numbî
, sdev->pci_öfo.
pci_¶Ÿ_numbî
, sdev->pci_öfo.
pci_func_numbî
);

8085 
	`sh™n⁄_öfo
("%s: víd‹ id: 1cb0, devi˚ id: %4.4x\n", 
sdev
->
cdev_«me
, sdev->
pci_öfo
.
devi˚_id
);

8086 
	`sh™n⁄_öfo
("%s:Ünkˇp: %†x %d\n", 
sdev
->
cdev_«me
, 
	`lök•ìd_°r
(sdev->
pci_öfo
.
 kˇp
 & 0xf), (sdev->pci_info.lnkcap >> 4) & 0x3f);

8087 
	`sh™n⁄_öfo
("%s:Ünk°a: %†x %d\n", 
sdev
->
cdev_«me
, 
	`lök•ìd_°r
(sdev->
pci_öfo
.
 k°a
 & 0xf), (sdev->pci_info.lnksta >> 4) & 0x3f);

8088 i‡(
sdev
->
fúmw¨e_vîsi⁄
)

8089 
	`sh™n⁄_öfo
("%s: fúmw¨êvîsi⁄: %u.%u.%u\n", 
sdev
->
cdev_«me
,

8090 (
sdev
->
fúmw¨e_vîsi⁄
 & 0x0000ffff) >> 12, ((sdev->firmware_version & 0x0000ffff) >> 8) & 0xf, ((sdev->firmware_version & 0x0000ffff) >> 4) & 0xf);

8092 
	`sh™n⁄_öfo
("%s: fúmw¨êvîsi⁄: 3.2.8\n", 
sdev
->
cdev_«me
);

8093 
	`sh™n⁄_öfo
("%s: fúmw¨êbuûd: %8.8x\n", 
sdev
->
cdev_«me
, sdev->
fúmw¨e_èg
);

8094 i‡(
SHANNON_FIX_VERSION_CODE
)

8095 
	`sh™n⁄_öfo
("%s: drivî vîsi⁄: %d.%d.%d.%d\n", 
sdev
->
cdev_«me
, 
	`SHANNON_VERSION_MAJOR
(
SHANNON_VERSION_CODE
),

8096 
	`SHANNON_VERSION_MINOR
(
SHANNON_VERSION_CODE
), 
	`SHANNON_VERSION_RELEASE
(SHANNON_VERSION_CODE), 
SHANNON_FIX_VERSION_CODE
);

8098 
	`sh™n⁄_öfo
("%s: drivî vîsi⁄: %d.%d.%d\n", 
sdev
->
cdev_«me
, 
	`SHANNON_VERSION_MAJOR
(
SHANNON_VERSION_CODE
),

8099 
	`SHANNON_VERSION_MINOR
(
SHANNON_VERSION_CODE
), 
	`SHANNON_VERSION_RELEASE
(SHANNON_VERSION_CODE));

8101 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8102 
ecc_ˇp
 = 
	`ªad_ªg_ß„
(
sdev
, &sdev->
b¨
->
ecc
);

8103 (
ecc_ˇp
 >> 8) & 0x000000ff) {

8105 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 16;

8108 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 35;

8111 
sdev
->
ecc_c‹ª˘i⁄_powî
 = 58;

8114 
	`sh™n⁄_îr
("uƒecognizedÉc¯ˇ∑bûôy 0x%x.\n", 
ecc_ˇp
);

8119 
	`sh™n⁄_öfo
("%s: geomëry: %dx%dx%d\n", 
sdev
->
cdev_«me
, sdev->
max_ch™√ls
, sdev->
max_lun£t_ö_ch™√l
, sdev->
max_lun_ö_lun£t
);

8121 i‡(
	`check_devi˚_d«
(
sdev
) < 0) {

8122 
	`sh™n⁄_îr
("Wrong device information.\n");

8126 
	`sh™n⁄_öfo
("%s: C⁄åﬁÀ∏d«: %16.16Œx\n", 
sdev
->
cdev_«me
, sdev->
d«
);

8128 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8129 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

8130 
sdev
->
n‹Êash
.
pcõ_phy_addr
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)sdev->
b¨
 + 
SH_G5_FPGA_NORFLASH_OFFSET
, 
G5_FPGA_NORFLASH
);

8131 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

8132 
sdev
->
ªc⁄fig_suµ‹t
 = 
	`sh™n⁄_dev_is_g5_Âga
(sdev) ? 1 : 0;

8134 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

8135 
sdev
->
ªc⁄fig_suµ‹t
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)sdev->
b¨
 + 
SH_RECONFIG_STATUS_OFFSET
, 
RECONFIG_SUPPORT
);

8136 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

8138 
	`sh™n⁄_öfo
("%s: C⁄åﬁÀ∏ªc⁄fig %†suµ‹ãd!\n", 
sdev
->
cdev_«me
, sdev->
ªc⁄fig_suµ‹t
?"is":"isÇot");

8140 i‡(
	`sh™n⁄_öô_n‹Êash
(
sdev
)) {

8141 
	`sh™n⁄_îr
("failedÅo get NOR flash organization.\n");

8144 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
Ë&& (sdev->
n‹Êash
.
pcõ_phy_addr
 != 0)) {

8146 
sdev
->
n‹Êash
.
pcõ_phy_addr
 = sdev->n‹Êash.
size_öbyãs
 - 1 * 1024 * 1024;

8148 
	`ªad_n‹Êash_öfo
(
sdev
);

8149 
	`sh™n⁄_öfo
("%s: modñ: %s, sîvi˚Åag: %s\n", 
sdev
->
cdev_«me
, sdev->
modñ_id
, sdev->
£rvi˚_èg
);

8151 
	`f‹ge_sh™n⁄_udid
(
sdev
);

8152 
	`sh™n⁄_öfo
("%s: udid: %s.\n", 
sdev
->
cdev_«me
, sdev->
udid
);

8155 
	}
}

8157 
	$˛ór_™d_dißbÀ_öãºu±
(
sh™n⁄_dev
 *
sdev
)

8160 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

8161 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

8162 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

8163 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

8164 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

8165 
	}
}

8167 
	$sh™n⁄_öô_h¨dw¨e
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_pci_dev_t
 *
pdev
)

8169 i‡(
	`sh™n⁄_dev_pci_öôülize
(
sdev
, 
pdev
)) {

8170 
	`sh™n⁄_îr
("failedÅo initializeÖci device.\n");

8171 i‡(!
sh™n⁄_scsi_mode
)

8172 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
NULL
);

8176 i‡(
	`sdev_ªad_h¨dw¨e_c⁄fig
(
sdev
)) {

8177 
	`sh™n⁄_îr
("failedÅoÑead hardware configuration.\n");

8178 
pci_deöô
;

8181 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8182 i‡(
	`sh™n⁄_öô_h¨dw¨e_g5
(
sdev
, 
pdev
) < 0)

8183 
pci_deöô
;

8185 i‡(
	`sh™n⁄_öô_h¨dw¨e_g4
(
sdev
, 
pdev
) < 0)

8186 
pci_deöô
;

8188 
	`sh™n⁄_öfo
("%s: HAL vîsi⁄: %d, T: %d\n", 
sdev
->
cdev_«me
, sdev->
h¨dw¨e_vîsi⁄
, sdev->
ecc_c‹ª˘i⁄_powî
);

8192 
pci_deöô
:

8193 
	`sh™n⁄_dev_pci_deöôülize
(
sdev
);

8194 i‡(!
sh™n⁄_scsi_mode
)

8195 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
NULL
);

8198 
	}
}

8200 
	$sh™n⁄_cdevs_öô
(
sh™n⁄_dev
 *
sdev
)

8202 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


8203 i‡(
	`ïûog_cdev_öô
(
sdev
))

8206 i‡(
	`pba_èbÀ_cdev_öô
(
sdev
, sdev->
pba_èbÀ_size
))

8208 i‡(
	`comm™d_cdev_öô
(
sdev
))

8210 i‡(
	`com∂ëi⁄_cdev_öô
(
sdev
))

8214 
	}
}

8216 
	$Æloc_¸c_èbÀ
(
sh™n⁄_dev
 *
sdev
)

8218 
u32
 *
èbÀ
, 
pﬁynomül
 = 0xEDB88320;

8219 
i
, 
j
;

8221 
sdev
->
¸c_èbÀ
 = (
u32
 *)
	`sh™n⁄_kmÆloc
((u32Ë* 
CRC32_TABLE_SIZE
, 
GFP_SHANNON
);

8222 i‡(!
sdev
->
¸c_èbÀ
) {

8223 
	`sh™n⁄_îr
("Alloc crcÅable failed.\n");

8226 
èbÀ
 = 
sdev
->
¸c_èbÀ
;

8228 
i
 = 0; i < 
CRC32_TABLE_SIZE
; i++) {

8229 
j
 = 0, 
èbÀ
[
i
] = i; j < 8; j++)

8230 
èbÀ
[
i
] = (èbÀ[i] >> 1Ë^ (—abÀ[i] & 1Ë? 
pﬁynomül
 : 0);

8234 
	}
}

8236 
	$check_m¨ked_bad_luns
(
sh™n⁄_dev
 *
sdev
)

8238 
i
;

8239 
îr_luns
 = 0, 
upd©e_mbr
 = 0;

8241 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

8242 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

8243 i‡(
sdev
->
lun
[
i
]->
bad
) {

8244 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
) && \

8245 (
upd©e_mbr
 == 0))

8246 
upd©e_mbr
 = 1;

8248 
îr_luns
 += 1;

8249 
	`m¨k_sb_îr_f‹_bad_lun
(
sdev
, sdev->
lun
[
i
]);

8253 i‡(
îr_luns
) {

8254 
	`move_blks_to_îr_blks_li°
(
sdev
);

8255 
	`check_îr_blk˙t_öc
(
sdev
);

8257 } i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8258 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

8259 i‡(
sdev
->
lun
[
i
]->
bad
) {

8260 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
)) {

8261 
upd©e_mbr
 = 1;

8268 i‡(
upd©e_mbr
) {

8269 
	`sh™n⁄_queue_w‹k
(
sdev
->
ª‰esh_wq
, &sdev->
ª‰esh_w‹k
);

8270 
sdev
->
ª‰esh_£quí˚
 = sdev->
powî_⁄_£c⁄ds
 / 
MBR_REFRESH_INTERVAL
;

8271 
	`sh™n⁄_öfo
("%s:ª‰esh_£quí˚=%d.\n", 
sdev
->
sdisk
.
disk_«me
, sdev->
ª‰esh_£quí˚
);

8273 
	}
}

8275 
	~"sh™n⁄_m≠_èbÀ.c
"

8276 
	$sh™n⁄_¥obe
(
sh™n⁄_pci_dev_t
 *
pdev
, c⁄° 
sh™n⁄_pci_devi˚_id_t
 *
id
, 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
)

8278 
ªsu…
 = -
ENOMEM
;

8279 
sh™n⁄_dev
 *
sdev
;

8280 
i
, 
hód_ödex
;

8282 
sdev
 = 
	`sh™n⁄_kzÆloc
((*sdev), 
GFP_SHANNON
);

8283 i‡(!
sdev
)

8284  -
ENOMEM
;

8285 
	`sdev_öôülize_v¨übÀs
(
sdev
);

8287 i‡(
sh™n⁄_scsi_mode
) {

8288 
sdev
->
sdisk
.
ho°d©a
 = hostdata;

8289 
ho°d©a
->
sdev
 = sdev;

8291 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
sdev
);

8292 
sdev
->
node
 = 
	`sh™n⁄_pci_gë_node
(
pdev
);

8293 
	`sh™n⁄_•ö_lock_bh
(&
devi˚_bôm≠_lock
);

8294 
sdev
->
drive_no
 = 
	`sh™n⁄_föd_fú°_zîo_bô
(&
devi˚_bôm≠
, 
MAX_DEVICE_NO
);

8295 i‡(
sdev
->
drive_no
 =
MAX_DEVICE_NO
) {

8296 
	`sh™n⁄_îr
("⁄ly suµ‹à%d devi˚s.\n", 
MAX_DEVICE_NO
);

8297 
	`sh™n⁄_•ö_u∆ock_bh
(&
devi˚_bôm≠_lock
);

8298 
	`sh™n⁄_k‰ì
(
sdev
);

8299  -
EIO
;

8301 
	`SHANNON_INIT_LIST_HEAD
(&
sdev
->
li°
);

8302 
	`sh™n⁄_li°_add
(&
sdev
->
li°
, &
sh™n⁄_dev_li°
);

8303 
	`sh™n⁄_£t_bô
(
sdev
->
drive_no
, &
devi˚_bôm≠
);

8304 
	`sh™n⁄_•ö_u∆ock_bh
(&
devi˚_bôm≠_lock
);

8305 
	`sh™n⁄_¢¥ötf
 (
sdev
->
cdev_«me
, 16, "s˘%c", 'a' + sdev->
drive_no
);

8306 
	`sh™n⁄_¢¥ötf
 (
sdev
->
sdisk
.
disk_«me
, 16, "df%c", 'a' + sdev->
drive_no
);

8308 
	`sh™n⁄_pm_qos_add_ªquúemít
(&
sdev
->
pm_qos_l
, 
SHANNON_PM_QOS_CPU_DMA_LATENCY
, sdev->
sdisk
.
disk_«me
, 
SHANNON_PM_QOS_DEFAULT_VALUE
);

8310 i‡(
	`Æloc_¸c_èbÀ
(
sdev
) < 0) {

8311 
	`sh™n⁄_îr
("%s: inô cr¯èbÀ faûed.\n", 
sdev
->
sdisk
.
disk_«me
);

8312 
‰ì
;

8315 i‡(
	`Æloc_w‹kqueues
(
sdev
))

8316 
‰ì
;

8318 
ªsu…
 = 
	`sh™n⁄_öô_h¨dw¨e
(
sdev
, 
pdev
);

8319 i‡(
ªsu…
)

8320 
‰ì
;

8322 
sdev
->
öô_d⁄e
 = 
STAGE_INIT_HARDWARE_DONE
;

8324 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
£quí˚_numbî_lock
);

8325 
sdev
->
£quí˚_numbî
 = 1;

8326 
sdev
->
øid5_suµ‹ãd
 = 
RAID5_SUPPORTED
;

8327 
sdev
->
rŸ©e_∑rôy
 = 
ROTATE_PARITY
;

8328 
sdev
->
ecc_by∑ss
 = 
ECC_BYPASS
;

8330 
sdev
->
ho°_ac˚ss_blocked
 = 0;

8331 
	`sh™n⁄_©omic_£t
(&
sdev
->
a˘ive_waô_°©us
, 
IDLE
);

8332 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
a˘ive_waô_evít
);

8333 
	`sh™n⁄_©omic_£t
(&
sdev
->
waô_blk
, -1);

8334 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
waô_blk_d⁄e_evít
);

8335 
	`sh™n⁄_©omic_£t
(&
sdev
->
ªcovî_d⁄e
, 0);

8336 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
ªcovî_d⁄e_evít
);

8338 
	`ˇlcuœã_globÆ_v¨übÀ
(
sdev
);

8340 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

8341 
	`sh™n⁄_kthªad_°›
(
¥eöô_emu_thªad
);

8344 i‡(
	`check_comm⁄_öfo
(
sdev
) < 0) {

8345 
	`sh™n⁄_îr
("Wrong MBR data.\n");

8346 
ªsu…
 = -19;

8347 
pci_deöô
;

8350 i‡(
	`sdev_Æloc_dummy_∑ge
(
sdev
)) {

8351 
	`sh™n⁄_îr
("cannotállocateÉnough memory for dummy_page.\n");

8352 
pci_deöô
;

8355 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

8356 
	`öô_Âga_emu_v¨übÀs
(
sdev
);

8358 
	`Æloc_buf„r_queue
(
sdev
);

8360 
ªsu…
 = 
	`Æloc_lun_°ru˘uª
(
sdev
);

8361 i‡(
ªsu…
) {

8362 
	`sh™n⁄_îr
("cannotállocateÜun structure.\n");

8363 
v‰ì
;

8366 i‡(
	`check_the_d©e
() < 0) {

8367 
	`sh™n⁄_îr
("This isÅheálpha version. Please contact Shannon Systems forÅheÜatest version.\n");

8368 
ªsu…
 = -40;

8369 
v‰ì
;

8372 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
Ë|| deföed(
CONFIG_SHANNON_EMU_MODULE
)

8373 
i
=0; i<
emu_lun_amou¡
; i++) {

8374 
emu_luns
[
i
].
logicb_size
 = 
sdev
->logicb_size;

8375 
emu_luns
[
i
].
logicb_shi·
 = 
sdev
->logicb_shift;

8376 
emu_luns
[
i
].
logicbs_ö_∑ge
 = 
sdev
->logicbs_in_page;

8379 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
))

8380 
	`öô_globÆ_c⁄fig_ªgs
(
sdev
);

8381 
	`dump_b¨_•a˚
(
sdev
);

8384 
sdev
->
logicb_buf_poﬁ
 = 
	`sh™n⁄_mempoﬁ_¸óã_kmÆloc_poﬁ
(4096, sdev->
logicb_size
);

8385 i‡(!
sdev
->
logicb_buf_poﬁ
) {

8386 
	`sh™n⁄_îr
("Allocate shannonÜogicb_buf_pool failed.\n");

8387 
v‰ì
;

8389 
sdev
->
ïûog_∑ge_poﬁ
 = 
	`sh™n⁄_mempoﬁ_¸óã_kmÆloc_poﬁ
(1, sdev->
logicb_size
);

8390 i‡(!
sdev
->
ïûog_∑ge_poﬁ
) {

8391 
	`sh™n⁄_îr
("Allocate shannonÉpilog_page_pool failed.\n");

8392 
v‰ì
;

8395 i‡(
sdev
->
mbr
.
poﬁ_w©îm¨k
) {

8396 
ªsu…
 = 
	`öô_sdev_ö_poﬁ
(
sdev
);

8397 i‡(
ªsu…
) {

8398 
	`sh™n⁄_îr
("Device init failed.\n");

8399 
v‰ì
;

8402 
ªsu…
 = 
	`sh™n⁄_Æloc_m≠_èbÀ
(&
sdev
->
sdisk
, sdev->sdisk.
£˘‹s
, sdev->
logicb_shi·
);

8403 i‡(
ªsu…
) {

8404 
	`sh™n⁄_îr
("cannotállocateÉnough memory for map_table!\n");

8405 
v‰ì
;

8407 
	`sh™n⁄_öô_blk_queue
(
sdev
);

8410 i‡(
sh™n⁄_memblock_¥óŒoc
 != -1) {

8411 
	`sh™n⁄_queue_w‹k
(
m≠_èbÀ_poﬁ
.
memblock_wq
, &m≠_èbÀ_poﬁ.
Æloc_w‹k
);

8412 
	`sh™n⁄_queue_w‹k
(
ãmp_èbÀ_poﬁ
.
memblock_wq
, &ãmp_èbÀ_poﬁ.
Æloc_w‹k
);

8415 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8416 i‡(
	`Æloc_bbt_n‹_°ru˘uª
(
sdev
) != 0) {

8417 
	`sh™n⁄_îr
("allocateÇor blocks for bbt failed.\n");

8418 
‰ì_debug
;

8422 i‡(
	`sh™n⁄_cdevs_öô
(
sdev
))

8423 
‰ì_debug
;

8426 
	`˛ór_™d_dißbÀ_öãºu±
(
sdev
);

8428 
	`sh™n⁄_íabÀ_úq
(
	`gë_pci_úq_num
(
sdev
->
pci_dev
));

8430 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8431 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

8432 
	`wrôe_öãºu±_ve˘‹
(
sdev
, 
i
);

8433 
ªsu…
 = 
	`ch™ge_öãºu±_öto_msix_mode
(
pdev
, 
sdev
);

8435 
	`wrôe_öãºu±_ve˘‹
(
sdev
, 0);

8436 
ªsu…
 = 
	`ch™ge_öãºu±_öto_msi_mode
(
pdev
, 
sdev
);

8438 i‡(
ªsu…
 < 0)

8439 
‰ì_debug
;

8441 
sdev
->
chunk_ªq
[
HOT_INDEX
] = 
NULL
;

8442 
sdev
->
chunk_ªq˙t
[
HOT_INDEX
] = 0;

8443 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
chunk_ªq_lock
[
HOT_INDEX
]);

8444 
	`sh™n⁄_öô_timî
(&
sdev
->
fûl_sb_timî
[0]);

8445 #ifde‡
SHANNON_USE_WRITE_BUFFER


8446 
sdev
->
fûl_chunk_timî_expúe
 = 250;

8447 
	`sh™n⁄_öô_timî
(&
sdev
->
fûl_chunk_timî
[0]);

8448 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
fûl_chunk_timî
[
HOT_INDEX
], 
hŸ_fûl_chunk_timî_timeout
);

8450 
	`sh™n⁄_öô_dñayed_w‹k
(&
sdev
->
hŸ_dñayed_∑d
, 
hŸ_∑d_èsk
);

8452 
sdev
->
chunk_ªq
[
COLD_INDEX
] = 
NULL
;

8453 
sdev
->
chunk_ªq˙t
[
COLD_INDEX
] = 0;

8454 
	`sh™n⁄_•ö_lock_öô
(&
sdev
->
chunk_ªq_lock
[
COLD_INDEX
]);

8455 
	`sh™n⁄_öô_timî
(&
sdev
->
fûl_sb_timî
[1]);

8456 #ifde‡
SHANNON_USE_WRITE_BUFFER


8457 
	`sh™n⁄_öô_timî
(&
sdev
->
fûl_chunk_timî
[1]);

8458 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdev
->
fûl_chunk_timî
[
COLD_INDEX
], 
cﬁd_fûl_chunk_timî_timeout
);

8460 
	`sh™n⁄_öô_dñayed_w‹k
(&
sdev
->
cﬁd_dñayed_∑d
, 
cﬁd_∑d_èsk
);

8463 i‡(
	`öô_îr_öje˘i⁄
(
sdev
) < 0) {

8464 
ªsu…
 = -75;

8465 
îr_öje˘i⁄
;

8468 i‡(
sh™n⁄_ovîœp_wrôe
 && !
	`sh™n⁄_dev_is_g5
(
sdev
)) {

8469 
	`sh™n⁄_îr
("this device doesÇot support overlap write.\n");

8470 
sh™n⁄_ovîœp_wrôe
 = 0;

8471 } i‡(
sdev
->
ovîœp_wrôe
 || 
sh™n⁄_ovîœp_wrôe
) {

8472 
sdev
->
ovîœp
 = 
	`sh™n⁄_kmÆloc
((
sh™n⁄_ovîœp
), 
GFP_SHANNON
);

8473 i‡(
sdev
->
ovîœp
 =
NULL
) {

8474 
	`sh™n⁄_îr
("failedÅoállocate memory for overlap.\n");

8475 
‰ì_úq
;

8477 
	`sh™n⁄_mem£t
(
sdev
->
ovîœp
, 0, (
sh™n⁄_ovîœp
));

8478 
	`sh™n⁄_öô_waôqueue_hód
(&
sdev
->
ovîœp
->
waô_ovîœp_evít
);

8479 
sdev
->
ovîœp
->
_mëad©a
 = 
övÆid_mëad©a
[sdev->
lba_f‹m©
];

8480 
sdev
->
ovîœp
->
buf„d_mëad©a
 = 
övÆid_mëad©a
[sdev->
lba_f‹m©
];

8483 i‡(
	`sh™n⁄_debugfs_öô
(
sdev
) < 0) {

8484 
ªsu…
 = -75;

8485 
debugfs_˛ónup
;

8488 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

8489 
	`°¨t_w©chdog_timî
(
sdev
, 
BOOT_WATCHDOG_SECONDS
);

8492 i‡(
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(sdev)) {

8493 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

8494 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
))

8496 
	`¢≠_ªad_dißbÀ
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i], 1, 0);

8497 
	`sh™n⁄_pﬁlög_cmd
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i]->
phy_lun_num
, 0, 0, 0);

8501 i‡(
sh™n⁄_lﬂd_ªad⁄ly
)

8502 
	`sh™n⁄_£t_bô
(
SHN_REASON_USER_REQUESTED
, &
sdev
->
ªad⁄ly_ªas⁄
);

8504 i‡(
	`buûd_d©a_°ru˘
(
sdev
) != 0) {

8505 
	`sh™n⁄_îr
("cannont finishÑecoveryÅo build data struct.\n");

8506 
ªsu…
 = -90;

8507 
‰ì_úq
;

8509 
sdev
->
powî_cy˛e_cou¡
++;

8510 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
;

8512 i‡(
	`should_upd©e_mi¸ocode
(
sdev
))

8513 
	`wrôe_adv™˚d_ªad_mi¸ocode
(
sdev
, 
	`gë_upd©e_mi¸ocode
(sdev));

8515 
	`upd©e_ac˚ss_mode
(
sdev
);

8516 
	`check_m¨ked_bad_luns
(
sdev
);

8517 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

8518 i‡(
sh™n⁄_¥e„tch_íabÀ
)

8519 
	`sh™n⁄_¥e„tch_öô
(&
sdev
->
sdisk
.
¥e„tch
, sdev->
logicb_size
);

8521 
sdev
->
gc_thªad
 = 
	`sh™n⁄_kthªad_run
(
gc_thªad_‚
, sdev, "shn_gc_thªad%c", 'a' + sdev->
drive_no
);

8522 i‡(
	`SHANNON_IS_ERR
(
sdev
->
gc_thªad
)) {

8523 
	`sh™n⁄_îr
("create garbage collectionÅhread failed!\n");

8524 
ªsu…
 = 
	`SHANNON_PTR_ERR
(
sdev
->
gc_thªad
);

8525 
‰ì_úq
;

8528 
sdev
->
ªcovî_thªad
 = 
	`sh™n⁄_kthªad_run
(
ªcovî_thªad_‚
, sdev, "shn_ªcovî/%c", 'a' + sdev->
drive_no
);

8529 i‡(
	`SHANNON_IS_ERR
(
sdev
->
ªcovî_thªad
)) {

8530 
	`sh™n⁄_îr
("createÑecoverÅhread failed!\n");

8531 
ªsu…
 = 
	`SHANNON_PTR_ERR
(
sdev
->
ªcovî_thªad
);

8532 
kûl_kthªad
;

8535 i‡(
sh™n⁄_¥e„tch_íabÀ
) {

8536 
sdev
->
¥e„tch_thªad
 = 
	`sh™n⁄_kthªad_run
(
¥e„tch_thªad_‚
, sdev, "shn_¥e„tch/%c", 'a' + sdev->
drive_no
);

8537 i‡(
	`SHANNON_IS_ERR
(
sdev
->
¥e„tch_thªad
)) {

8538 
	`sh™n⁄_îr
("createÖrefetchÅhread failed!\n");

8539 
	`£t_¥e„tch_dißbÀ
(&
sdev
->
sdisk
.
¥e„tch
);

8540 
sdev
->
¥e„tch_thªad
 = 
NULL
;

8542 
	`sh™n⁄_£t_node_˝us_Ælowed
(
sdev
->
¥e„tch_thªad
, sdev->
node
);

8545 
	`sh™n⁄_add_timî
(&
sdev
->
d©a_ªã¡i⁄_timî
, 
	`gë_jiffõs
(Ë+ sdev->
d©a_ªã¡i⁄_öãrvÆ
 * 
	`gë_HZ
());

8546 
	`sh™n⁄_add_timî
(&
sdev
->
wl_timî
, 
	`gë_jiffõs
(Ë+ sdev->
wl_timî_öãrvÆ
 * 
	`gë_HZ
());

8547 
hód_ödex
 = 0; hód_ödex < 
sdev
->
hód_cou¡
; head_index++)

8548 
	`mod_fûl_sb_timî
(
sdev
, 
hód_ödex
, sdev->
a˘ive_blk
[head_index]);

8552 i‡(
sdev
->
powî_⁄_£c⁄ds
 > 1892160000) {

8554 
	`sh™n⁄_log
("reset uncorrectÖower_on_seconds %ldÅo %ld.\n",

8555 
sdev
->
powî_⁄_£c⁄ds
, 
MBR_REFRESH_INTERVAL
);

8556 
sdev
->
powî_⁄_£c⁄ds
 = 
MBR_REFRESH_INTERVAL
;

8558 
sdev
->
powî_⁄_£c⁄ds_hi°‹y
 = sdev->
powî_⁄_£c⁄ds
;

8559 
sdev
->
ª‰esh_£quí˚
 = sdev->
powî_⁄_£c⁄ds
 / 
MBR_REFRESH_INTERVAL
;

8561 
	`ªöô_≥riod_ªad
(
sdev
);

8562 
	`≥riod_ªad_íabÀ
(
sdev
);

8564 i‡(
	`sh™n⁄_¸óã_miscdevi˚
(&
sdev
->
misc
, sdev->
cdev_«me
, 
NULL
, 
FOR_SDEV
)) {

8565 
	`sh™n⁄_îr
("ÁûedÅÿªgi°î c⁄åﬁ miscdevi˚ %s.\n", 
sdev
->
cdev_«me
);

8566 
ªsu…
 = -95;

8567 
kûl_kthªad
;

8570 
sdev
->
hwm⁄_dev
 = 
	`sh™n⁄_hwm⁄_öô
(sdev->
pci_dev
);

8571 i‡(
	`SHANNON_IS_ERR_OR_NULL
(
sdev
->
hwm⁄_dev
)) {

8573 
	`sh™n⁄_log
("%s: c™nŸ inôülizêhwm⁄ devi˚s, movê⁄.\n", 
sdev
->
cdev_«me
);

8576 i‡(
	`sh™n⁄_sysfs_öô
(&
sdev
->
sysfs_kobj
)) {

8577 
	`sh™n⁄_îr
("%s:ádd kobje˘Åÿsysf†Áûed.\n", 
sdev
->
sdisk
.
disk_«me
);

8578 
ªsu…
 = -99;

8579 
dñ_cdev
;

8581 
	`debugs1
("%s: sysf†obje˘ inô d⁄e.\n", 
sdev
->
sdisk
.
disk_«me
);

8582 
sdev
->
sysfs_öô_d⁄e
 = 
SYSFS_INIT_DONE
;

8585 i‡(
sh™n⁄_auto_©èch
) {

8586 i‡(
sdev
->
•oﬁ
) {

8587 i‡(
sdev
->
•oﬁ
->
⁄löe_sdev_cou¡
 =sdev->•oﬁ->
sdev_cou¡
) {

8588 i‡(
	`sh™n⁄_poﬁ_©èch
(
sdev
->
•oﬁ
)) {

8589 
	`sh™n⁄_îr
("attach spool failed\n");

8593 i‡(
	`sh™n⁄_©èch
(
sdev
)) {

8594 
	`sh™n⁄_îr
("attach failed\n");

8600 
	`upd©e_io_°©i°ics
(
sdev
);

8601 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
Ë&& 
sh™n⁄_dy«mic_úq_dñay
 && sdev->
úq_dñay
.
dy«mic_úq_dñay
)

8602 
	`sh™n⁄_add_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`gë_jiffõs
(Ë+ 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
));

8604 
	`sh™n⁄_öfo
("Probed Dúe˘-IO PCIêFœsh /dev/%s: modñ: %s, sn: %s\n", 
sdev
->
cdev_«me
, sdev->
modñ_id
, sdev->
£rvi˚_èg
);

8606 
sdev
->
öô_d⁄e
 = 
STAGE9_DONE
;

8609 
dñ_cdev
:

8610 
	`sh™n⁄_hwm⁄_exô
(
pdev
, 
sdev
->
hwm⁄_dev
);

8611 
	`sh™n⁄_de°roy_miscdevi˚
(&
sdev
->
misc
);

8612 
kûl_kthªad
:

8613 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
wl_timî
);

8614 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
d©a_ªã¡i⁄_timî
);

8615 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

8616 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_sb_timî
[
i
]);

8617 #ifde‡
SHANNON_USE_WRITE_BUFFER


8618 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_chunk_timî
[
i
]);

8622 
	`≥riod_ªad_dißbÀ
(
sdev
);

8623 i‡(
sdev
->
¥e„tch_thªad
) {

8624 
	`sh™n⁄_kthªad_°›
(
sdev
->
¥e„tch_thªad
);

8625 
sdev
->
¥e„tch_thªad
 = 
NULL
;

8627 i‡(
sdev
->
ªcovî_thªad
) {

8628 
	`sh™n⁄_kthªad_°›
(
sdev
->
ªcovî_thªad
);

8629 
sdev
->
ªcovî_thªad
 = 
NULL
;

8631 i‡(
sdev
->
gc_thªad
) {

8632 
	`sh™n⁄_kthªad_°›
(
sdev
->
gc_thªad
);

8633 
sdev
->
gc_thªad
 = 
NULL
;

8635 
‰ì_úq
:

8636 
sdev
->
öô_d⁄e
 = 
STAGE9_DONE
;

8637 
	`°›_w©chdog_timî
(
sdev
);

8639 
	`sh™n⁄_muãx_lock
(&
sdev
->
∂ug_out_£m
);

8640 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
∂ug_out_£m
);

8642 
	`ªÀa£_a˘ive_blocks_ïûog
(
sdev
);

8643 
	`ªÀa£_blocks_gc_°©e
(
sdev
);

8644 
	`sh™n⁄_ªÀa£_ïûogs
(
sdev
);

8646 i‡(
sdev
->
ovîœp
)

8647 
	`sh™n⁄_k‰ì
(
sdev
->
ovîœp
);

8648 i‡(
sdev
->
ªad_cou¡
)

8649 
	`sh™n⁄_v‰ì
(
sdev
->
ªad_cou¡
);

8650 i‡(
sdev
->
sub_groups
)

8651 
	`sh™n⁄_v‰ì
(
sdev
->
sub_groups
);

8652 i‡(
sdev
->
sbs
)

8653 
	`sh™n⁄_v‰ì
(
sdev
->
sbs
);

8654 
debugfs_˛ónup
:

8655 
	`sh™n⁄_debugfs_˛ónup
(
sdev
);

8656 
îr_öje˘i⁄
:

8657 
	`ªÀa£_îr_öje˘i⁄
(
sdev
);

8658 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

8659 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

8660 
	`sh™n⁄_dißbÀ_msix
(
pdev
, 
sdev
);

8662 
	`sh™n⁄_dißbÀ_msi
(
pdev
, 
sdev
);

8663 
‰ì_debug
:

8665 
	`com∂ëi⁄_cdev_ªÀa£
(
sdev
);

8666 
	`comm™d_cdev_ªÀa£
(
sdev
);

8667 
	`pba_èbÀ_cdev_ªÀa£
(
sdev
);

8668 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


8669 
	`ïûog_cdev_exô
(
sdev
);

8671 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

8672 
	`ªÀa£_bbt_n‹_°ru˘uª
(
sdev
);

8673 
v‰ì
:

8675 i‡(
sdev
->
•oﬁ
)

8676 
	`ªÀa£_poﬁ_°ru˘
(
sdev
->
•oﬁ
);

8678 
	`sh™n⁄_m≠_èbÀ_‰ì
(&
sdev
->
sdisk
);

8680 i‡(
sdev
->
ïûog_∑ge_poﬁ
)

8681 
	`sh™n⁄_mempoﬁ_de°roy
(
sdev
->
ïûog_∑ge_poﬁ
);

8682 i‡(
sdev
->
logicb_buf_poﬁ
)

8683 
	`sh™n⁄_mempoﬁ_de°roy
(
sdev
->
logicb_buf_poﬁ
);

8685 
	`ªÀa£_lun_°ru˘uª
(
sdev
);

8686 
	`ªÀa£_buf„r_queue
(
sdev
);

8688 #i‡
	`deföed
(
CONFIG_SHANNON_EMU
)||deföed(
CONFIG_SHANNON_EMU_MODULE
)

8689 
	`‰ì_Âga_emu_v¨übÀs
(
sdev
);

8691 
	`sdev_‰ì_dummy_∑ge
(
sdev
);

8692 
pci_deöô
:

8693 
	`ªÀa£_lun£ts_°ru˘uª
(
sdev
);

8695 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

8696 
	`sh™n⁄_dev_pci_deöôülize
(
sdev
);

8697 i‡(
sh™n⁄_scsi_mode
 == 0)

8698 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
NULL
);

8700 
‰ì
:

8701 i‡(
sdev
->
övÆid_Êashids
)

8702 
	`sh™n⁄_k‰ì
(
sdev
->
övÆid_Êashids
);

8703 i‡(
sdev
->
sdisk
.
queue
)

8704 
	`sh™n⁄_blk_˛ónup_queue
(
sdev
->
sdisk
.
queue
);

8705 
	`ªÀa£_w‹kqueues
(
sdev
);

8706 i‡(
sdev
->
drive_no
 !
MAX_DEVICE_NO
) {

8707 
	`sh™n⁄_•ö_lock_bh
(&
devi˚_bôm≠_lock
);

8708 
	`sh™n⁄_˛ór_bô
(
sdev
->
drive_no
, &
devi˚_bôm≠
);

8709 
	`sh™n⁄_li°_dñ
(&
sdev
->
li°
);

8710 
	`sh™n⁄_•ö_u∆ock_bh
(&
devi˚_bôm≠_lock
);

8712 
	`sh™n⁄_pm_qos_ªmove_ªquúemít
(&
sdev
->
pm_qos_l
, 
SHANNON_PM_QOS_CPU_DMA_LATENCY
, sdev->
sdisk
.
disk_«me
);

8713 i‡(
sdev
->
n‹_mbr_°©us
 & 
MICROCODE_FROM_NORFLASH
) {

8714 
	`‰ì_mi¸ocode_¨øy
(
sdev
);

8716 i‡(
sdev
->
¸c_èbÀ
)

8717 
	`sh™n⁄_k‰ì
(
sdev
->
¸c_èbÀ
);

8718 
	`sh™n⁄_k‰ì
(
sdev
);

8719 
	`sh™n⁄_îr
("¥obêÁûed!Ñesu…=%d.\n", 
ªsu…
);

8720  
ªsu…
;

8721 
	}
}

8723 #ifde‡
SHANNON_USE_WRITE_BUFFER


8724 
	$ªÀa£_chunk_ªq
(
sh™n⁄_dev
 *
sdev
Ë{
	}
}

8727 
	$ªÀa£_chunk_ªq
(
sh™n⁄_dev
 *
sdev
)

8729 
hód_ödex
;

8730 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

8731 
sh™n⁄_sb
 *
sb
;

8733 
hód_ödex
 = 0; hód_ödex < 
sdev
->
hód_cou¡
; head_index++) {

8734 i‡(
sdev
->
chunk_ªq
[
hód_ödex
]) {

8735 
tmp
 = 
sdev
->
chunk_ªq
[
hód_ödex
];

8736 
sb
 = 
sdev
->
sbs
 + 
tmp
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

8738 
ªq
 = 
tmp
;

8739 
tmp
 = 
	`sh™n⁄_li°_íåy
(
ªq
->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

8740 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
chunk_li°
);

8741 
sdev
->
chunk_ªq˙t
[
hód_ödex
]--;

8742 i‡(
ªq
->
sbio
) {

8743 
ªq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

8744 
ªq
->
°©e
 = 
REQ_DONE
;

8745 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

8747 
	`‰ì_ªq
(
ªq
);

8748 
	`sh™n⁄_©omic_dec
(&
sb
->
ö_wrôe_logicbs
);

8750 } 
ªq
 !
tmp
);

8751 
sdev
->
chunk_ªq
[
hód_ödex
] = 
NULL
;

8754 
	}
}

8757 
ölöe
 
	$sh™n⁄_Êush_ˇŒback_wq
(
sh™n⁄_dev
 *
sdev
)

8759 
i
;

8760 
i
 = 0; i < 
sdev
->
ˇŒback_ƒ_wq
; i++) {

8761 i‡(
sdev
->
sh™n⁄_ˇŒback_wq
[
i
])

8762 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_ˇŒback_wq
[
i
]);

8764 
	}
}

8766 
	$__døö_comm™d_queue
(
sh™n⁄_dev
 *
sdev
)

8768 
i
, 
j
, 
hód_ödex
;

8770 
j
 = 0; j < 5; j++) {

8772 
	`≥riod_ªad_dißbÀ
(
sdev
);

8773 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
gc_timî_wq
);

8774 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
wl_wq
);

8775 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
ªad_îr_wq
);

8776 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
ª‰esh_wq
);

8777 i‡(
sdev
->
sh™n⁄_comp_wq
)

8778 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_comp_wq
);

8779 i‡(
sdev
->
sh™n⁄_π_comp_wq
)

8780 
	`sh™n⁄_Êush_π_w‹kqueue
(
sdev
->
sh™n⁄_π_comp_wq
);

8781 
i
 = 0; i < 
sdev
->
sh™n⁄_ƒ_wq
; i++)

8782 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
h™dÀ_lun_wq
[
i
]);

8783 
	`sh™n⁄_Êush_ˇŒback_wq
(
sdev
);

8784 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_ªad_wq
);

8785 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_wq
);

8786 
	`sh™n⁄_pick_ªque°
(
sdev
, 0xffffffff);

8787 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

8788 
	`lun£t_pick_ªque°
(&
sdev
->
lun£ts
[
i
], 0xffffffff);

8789 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
gc_timî
);

8790 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
bÆ™˚_gc_timî
);

8791 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
wl_timî
);

8792 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
d©a_ªã¡i⁄_timî
);

8793 
hód_ödex
 = 0; hód_ödex < 
sdev
->
hód_cou¡
; head_index++) {

8794 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_sb_timî
[
hód_ödex
]);

8795 #ifde‡
SHANNON_USE_WRITE_BUFFER


8796 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_chunk_timî
[
hód_ödex
]);

8799 
	`sh™n⁄_m¶ìp
(5);

8800 } !
	`Æl_cmd_queue_is_em±y
(
sdev
Ë|| !
	`Æl_ªq_queue_is_em±y
(sdev) || \

8801 !
	`Æl_lun£t_ªq_queue_is_em±y
(
sdev
) ||

8802 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
));

8804 
	}
}

8806 
	gsh™n⁄_fûl_löes
 = 5;

8808 
	$døö_comm™d_queue
(
sh™n⁄_dev
 *
sdev
, 
fûl_∑ge_°rùe
)

8810 
i
, 
löe
, 
ﬁd_sb
;

8812 i‡(
sdev
->
∂ug_out
)

8814 
sdev
->
°›_Æl
 = 1;

8815 #i‚de‡
SHANNON_USE_WRITE_BUFFER


8816 i‡(
sdev
->
chunk_ªq
[
HOT_INDEX
])

8817 
	`sh™n⁄_ˇn˚l_dñayed_w‹k
(&
sdev
->
hŸ_dñayed_∑d
);

8818 i‡(
sdev
->
u£_duÆ_hód
) {

8819 i‡(
sdev
->
chunk_ªq
[
COLD_INDEX
])

8820 
	`sh™n⁄_ˇn˚l_dñayed_w‹k
(&
sdev
->
cﬁd_dñayed_∑d
);

8823 
	`__døö_comm™d_queue
(
sdev
);

8825 i‡(
fûl_∑ge_°rùe
 && (
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
)) {

8826 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

8827 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

8828 
ﬁd_sb
 = 
sdev
->
wr_sb
[
i
];

8829 
löe
 = 0;Üöê< 
sh™n⁄_fûl_löes
;Üine++) {

8830 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

8832 (
sdev
->
wr_logicb
[
i
] !0Ë|| (sdev->
wr_∂™e
[i] != 0))

8833 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

8835 (
sdev
->
lun_ö_group
[
i
] !0Ë|| (sdev->
wr_group
[i] != 0))

8836 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

8837 i‡(
sdev
->
wr_sb
[
i
] !
ﬁd_sb
)

8841 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

8843 
	`ªÀa£_chunk_ªq
(
sdev
);

8845 
	`__døö_comm™d_queue
(
sdev
);

8847 i‡(
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(sdev)) {

8848 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

8849 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
))

8851 
	`¢≠_ªad_dißbÀ
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i], 1, 0);

8852 
	`sh™n⁄_pﬁlög_cmd
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i]->
phy_lun_num
, 0, 0, 0);

8855 
	`__døö_comm™d_queue
(
sdev
);

8856 
sdev
->
°›_Æl
 = 0;

8857 
	`debugs1
("HOT: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

8858 
sdev
->
wr_sb
[0], sdev->
wr_lun_off£t
[0], sdev->
wr_chunk
[0], sdev->
wr_∂™e
[0], sdev->
wr_∑ge
[0], sdev->
wr_logicb
[0]);

8859 
	`debugs1
("COLD: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

8860 
sdev
->
wr_sb
[1], sdev->
wr_lun_off£t
[1], sdev->
wr_chunk
[1], sdev->
wr_∂™e
[1], sdev->
wr_∑ge
[1], sdev->
wr_logicb
[1]);

8861 
	}
}

8863 
	$com∂ëe_≥ndög_ªque°
(
sh™n⁄_dev
 *
sdev
)

8865 
sh™n⁄_ªque°
 *
¥eq
;

8866 
sh™n⁄_lun£t
 *
lun£t
;

8867 
sh™n⁄_cmd_öfo
 *
öfo
;

8868 
i
, 
cmdid
, 
ªåõs
 = 0;

8870 i‡(
	`sh™n⁄_muãx_åylock
(&
sdev
->
∂ug_out_£m
) == 0)

8873 
ªåy
:

8874 
	`sh™n⁄_pﬁlög
(
sdev
)) {

8875 
	`sh™n⁄_öfo
("waitÖolling...\n");

8876 
	`sh™n⁄_m¶ìp
(3);

8878 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

8879 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

8880 
	`sh™n⁄_wake_up
(&
sdev
->
block_ho°_wr
);

8882 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
gc_wrôe_queue
Ë&& 
	`sh™n⁄_muãx_åylock
(&sdev->
pick_£m
)) {

8884 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
gc_wrôe_queue_lock
);

8885 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
gc_wrôe_queue
)) {

8886 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_wrôe_queue_lock
);

8889 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
gc_wrôe_queue
, 
sh™n⁄_ªque°
, 
li°
);

8890 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

8891 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
gc_wrôe_queue_lock
);

8892 
	`sh™n⁄_©omic_dec
(&
sdev
->
gc_wrôe_ªqs
);

8893 i‡(
¥eq
->
sbio
) {

8894 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

8895 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

8896 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

8897 
¥eq
->
°©e
 = 
REQ_DONE
;

8898 i‡(
	`is_waô_pick_ªq
(
¥eq
))

8899 
	`h™dÀ_waô_pick_ªq
(
sdev
, 
¥eq
);

8900 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

8902 
	`‰ì_ªq
(
¥eq
);

8904 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

8907 
i
 = 
PRIORITY_LEVELS
 - 1; i >= 0; i--) {

8908 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[
i
]Ë&& 
	`sh™n⁄_muãx_åylock
(&sdev->
pick_£m
)) {

8910 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

8911 i‡(
	`sh™n⁄_li°_em±y
(&
sdev
->
ªq_queue
[
i
])) {

8912 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

8915 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sdev
->
ªq_queue
[
i
], 
sh™n⁄_ªque°
, 
li°
);

8916 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

8917 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªq_queue_lock
[
i
]);

8918 i‡(
¥eq
->
›code
 =
sh_cmd_wrôe
) {

8919 
	`sh™n⁄_©omic_dec
(&
sdev
->
wrôe_ªqs
[
i
]);

8921 i‡(
	`ho°_ªq_queue_Àngth
(
sdev
Ë< 
REQ_QUEUE_THRESHOLD_L
)

8922 
sdev
->
ö_block_°©e
 = 0;

8923 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
) {

8924 i‡(
sdev
->
ö_block_°©e
 > 1)

8925 
sdev
->
ö_block_°©e
 = 1;

8928 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[1]))

8929 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

8931 i‡((
sdev
->
ö_block_°©e
 < 1Ë&& 
	`sh™n⁄_waôqueue_a˘ive
(&sdev->
limô_ªq_queue
[0]))

8932 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

8934 i‡(
¥eq
->
sbio
) {

8935 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

8936 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

8937 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

8938 
¥eq
->
°©e
 = 
REQ_DONE
;

8939 i‡(
	`is_waô_pick_ªq
(
¥eq
))

8940 
	`h™dÀ_waô_pick_ªq
(
sdev
, 
¥eq
);

8941 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

8943 
	`‰ì_ªq
(
¥eq
);

8945 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

8949 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

8950 
lun£t
 = &
sdev
->
lun£ts
[
i
];

8951 i‡(!
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
)) {

8953 
	`sh™n⁄_•ö_lock_bh
(&
lun£t
->
ªq_queue_lock
);

8954 i‡(
	`sh™n⁄_li°_em±y
(&
lun£t
->
ªq_queue
)) {

8955 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
ªq_queue_lock
);

8958 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
lun£t
->
ªq_queue
, 
sh™n⁄_ªque°
, 
li°
);

8959 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

8960 
	`sh™n⁄_•ö_u∆ock_bh
(&
lun£t
->
ªq_queue_lock
);

8961 i‡(
¥eq
->
sbio
) {

8962 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

8963 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

8964 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

8965 
¥eq
->
°©e
 = 
REQ_DONE
;

8966 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

8968 
	`‰ì_ªq
(
¥eq
);

8973 
	`sh™n⁄_m¶ìp
(5);

8974 i‡(
sdev
->
sh™n⁄_comp_wq
)

8975 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
sh™n⁄_comp_wq
);

8976 i‡(
sdev
->
sh™n⁄_π_comp_wq
)

8977 
	`sh™n⁄_Êush_π_w‹kqueue
(
sdev
->
sh™n⁄_π_comp_wq
);

8978 
i
 = 0; i < 
sdev
->
sh™n⁄_ƒ_wq
; i++)

8979 
	`sh™n⁄_Êush_w‹kqueue
(
sdev
->
h™dÀ_lun_wq
[
i
]);

8981 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

8982 
lun£t
 = &
sdev
->
lun£ts
[
i
];

8983 
	`sh™n⁄_©omic_ªad
(&
lun£t
->
ö_wq
))

8984 
	`sh™n⁄_m¶ìp
(1);

8986 
lun£t
->
cq_èû
 !lun£t->
sq_hód
) {

8987 
cmdid
 = 
lun£t
->
cq_èû
 >> 3;

8988 
öfo
 = &
lun£t
->
cmd_öfo
[
cmdid
];

8989 !
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

8990 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

8991 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

8992 i‡(
¥eq
->
sbio
) {

8993 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

8994 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

8995 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

8996 
¥eq
->
°©e
 = 
REQ_DONE
;

8997 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

8999 
	`‰ì_ªq
(
¥eq
);

9001 
lun£t
->
cq_èû
 = (lun£t->cq_èû + 
öfo
->
cmd_Àn
Ë% 
QUEUE_SIZE
;

9002 
lun£t
->
cq_èû_tmp
 =Üun£t->
cq_èû
;

9003 
	`sh™n⁄_wake_up
(&
lun£t
->
waô_cmd_pos
);

9005 i‡(
lun£t
->
cq_èû
 !lun£t->
sq_hód_tmp
)

9006 
	`sh™n⁄_m¶ìp
(1);

9007 } 
lun£t
->
cq_èû
 !lun£t->
sq_hód_tmp
);

9010 #ifde‡
SHANNON_USE_WRITE_BUFFER


9011 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

9013 
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód
[i]) {

9014 
cmdid
 = 
sdev
->
bufq_cq_èû
[
i
] >> 3;

9015 
öfo
 = &
sdev
->
cmd_öfo
[
i
][
cmdid
];

9016 !
	`sh™n⁄_li°_em±y
(&
öfo
->
ªq_li°
)) {

9017 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
öfo
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

9018 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

9019 i‡(
¥eq
->
sbio
) {

9020 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

9021 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

9022 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

9023 
¥eq
->
°©e
 = 
REQ_DONE
;

9024 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

9026 
	`‰ì_ªq
(
¥eq
);

9028 
sdev
->
bufq_cq_èû
[
i
] = (sdev->bufq_cq_èû[i] + 
öfo
->
cmd_Àn
Ë% 
QUEUE_SIZE
;

9029 
	`sh™n⁄_wake_up
(&
sdev
->
bufq_waô_cmd_pos
[
i
]);

9031 i‡(
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód_tmp
[i])

9032 
	`sh™n⁄_m¶ìp
(1);

9033 } 
sdev
->
bufq_cq_èû
[
i
] !sdev->
bufq_sq_hód_tmp
[i]);

9037 i‡(
	`sh™n⁄_muãx_åylock
(&
sdev
->
pick_£m
) == 0)

9038 
out
;

9040 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

9041 i‡(
sdev
->
chunk_ªq
[
i
]) {

9042 
j
, 
√eded
;

9044 
	`BUG_ON
(
sdev
->
chunk_ªq˙t
[
i
] =sdev->
logicbs_ö_chunk
);

9045 
√eded
 = 
sdev
->
logicbs_ö_chunk
 - sdev->
chunk_ªq˙t
[
i
];

9046 
j
 = 0; j < 
√eded
; j++) {

9047 
sdev
->
chunk_ªq˙t
[
i
] > 1) {

9048 
¥eq
 = 
	`sh™n⁄_li°_íåy
(
sdev
->
chunk_ªq
[
i
]->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

9049 i‡(
¥eq
 =
sdev
->
chunk_ªq
[
i
])

9050 
sdev
->
chunk_ªq
[
i
] = 
NULL
;

9051 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
chunk_li°
);

9052 
sdev
->
chunk_ªq˙t
[
i
]--;

9053 i‡(
¥eq
->
sbio
) {

9054 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

9055 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

9056 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

9057 
¥eq
->
°©e
 = 
REQ_DONE
;

9058 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

9060 
	`‰ì_ªq
(
¥eq
);

9063 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

9066 
sdev
->
chunk_ªq˙t
[
i
]) {

9067 
¥eq
 = 
	`sh™n⁄_li°_íåy
(
sdev
->
chunk_ªq
[
i
]->
chunk_li°
.
√xt
, 
sh™n⁄_ªque°
, chunk_list);

9068 i‡(
¥eq
 =
sdev
->
chunk_ªq
[
i
])

9069 
sdev
->
chunk_ªq
[
i
] = 
NULL
;

9070 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
chunk_li°
);

9071 
sdev
->
chunk_ªq˙t
[
i
]--;

9072 i‡(
¥eq
->
sbio
) {

9073 i‡(
¥eq
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

9074 
¥eq
->
_ecc
 = 
SH_SOFT_ERR_1
;

9075 
¥eq
->
sbio
->
°©us
 |
HAVE_ERROR_SECTOR
;

9076 
¥eq
->
°©e
 = 
REQ_DONE
;

9077 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

9079 
	`‰ì_ªq
(
¥eq
);

9081 
	`BUG_ON
((
sdev
->
chunk_ªq
[
i
] !
NULL
Ë|| (sdev->
chunk_ªq˙t
[i] != 0));

9084 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

9086 
out
:

9087 i‡(
	`sh™n⁄_bio_ö_Êight
(
sdev
)) {

9088 
	`sh™n⁄_öfo
("biÿi†ö_Êight, gŸÿªåy!Ñërõs=%d.\n", 
ªåõs
);

9089 
ªåõs
++;

9090 
	`sh™n⁄_m¶ìp
(5);

9091 i‡(
ªåõs
 < 1000)

9092 
ªåy
;

9094 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
∂ug_out_£m
);

9095 
	}
}

9097 
	$wrôeback_ovîœp_pba
(
sh™n⁄_dev
 *
sdev
)

9099 
vaˇncy
;

9100 
sh™n⁄_ovîœp
 *
ﬁ
 = 
sdev
->
ovîœp
;

9103 i‡(
ﬁ
->
_mëad©a
 !
övÆid_mëad©a
[
sdev
->
lba_f‹m©
]) {

9104 
	`wrôe_back_ovîœp_d©a
(
sdev
);

9105 
ﬁ
->
_mëad©a
 = 
övÆid_mëad©a
[
sdev
->
lba_f‹m©
];

9106 
	`£nd_dummy_ovîœp_ªq
(
sdev
, 1);

9110 
vaˇncy
 = (
sdev
->
∂™es
 - 
ﬁ
->
wr_∂™e
Ë* sdev->
logicbs_ö_∑ge
 - ol->
wr_logicb
;

9111 
	`BUG_ON
(
vaˇncy
 >
sdev
->
logicbs_ö_chunk
 || vacancy < 0);

9112 
vaˇncy
) {

9113 
	`£nd_dummy_ovîœp_ªq
(
sdev
, 0);

9114 
vaˇncy
--;

9117 
	`debugs1
("overlap: wr_chunk=%d, wr_page=%d, wr_logicb=%d, wr_plane=%d, wr_lun=%d.\n", \

9118 
ﬁ
->
wr_chunk
, ol->
wr_∑ge
, ol->
wr_logicb
, ol->
wr_∂™e
, ol->
wr_lun
);

9120 
	}
}

9122 
	$__sh™n⁄_ªmove
(
sh™n⁄_dev
 *
sdev
)

9124 
i
;

9125 
sh™n⁄_pci_dev_t
 *
pdev
 = 
sdev
->
pci_dev
;

9127 
	`sh™n⁄_bio_ö_Êight
(
sdev
)) {

9128 i‡(
sdev
->
∂ug_out
)

9129 
	`com∂ëe_≥ndög_ªque°
(
sdev
);

9130 
	`sh™n⁄_m¶ìp
(50);

9133 i‡(
sdev
->
•oﬁ
)

9134 
	`sh™n⁄_poﬁ_dëach
(
sdev
->
•oﬁ
);

9136 
	`sh™n⁄_dëach
(
sdev
);

9137 i‡(
sdev
->
sysfs_öô_d⁄e
 =
SYSFS_INIT_DONE
)

9138 
	`sh™n⁄_sysfs_exô
(&
sdev
->
sysfs_kobj
);

9140 
	`sh™n⁄_pm_qos_ªmove_ªquúemít
(&
sdev
->
pm_qos_l
, 
SHANNON_PM_QOS_CPU_DMA_LATENCY
, sdev->
sdisk
.
disk_«me
);

9141 
	`°›_w©chdog_timî
(
sdev
);

9142 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
gc_timî
);

9143 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
bÆ™˚_gc_timî
);

9144 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
wl_timî
);

9145 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
d©a_ªã¡i⁄_timî
);

9146 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

9147 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_sb_timî
[
i
]);

9148 #ifde‡
SHANNON_USE_WRITE_BUFFER


9149 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
fûl_chunk_timî
[
i
]);

9152 i‡(
sdev
->
∂ug_out
 || (sdev->
°©e
 & 
SHN_STATE_ERROR_BIT
)) {

9154 
	`com∂ëe_≥ndög_ªque°
(
sdev
);

9155 
	`sh™n⁄_m¶ìp
(50);

9156 } !
	`Æl_cmd_queue_is_em±y
(
sdev
Ë|| !
	`Æl_ªq_queue_is_em±y
(sdev) || \

9157 !
	`Æl_lun£t_ªq_queue_is_em±y
(
sdev
) || \

9158 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_gc_logicbs
));

9160 i‡(
sdev
->
ovîœp_wrôe
 && sdev->
ªad⁄ly_ªas⁄
 == 0) {

9161 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

9162 
	`wrôeback_ovîœp_pba
(
sdev
);

9163 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

9165 
	`døö_comm™d_queue
(
sdev
, 1);

9168 
	`sh™n⁄_ö_úq
(
sdev
))

9169 
	`sh™n⁄_m¶ìp
(1);

9171 
	`debug_¥öt
("HOT: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

9172 
sdev
->
wr_sb
[0], sdev->
wr_lun_off£t
[0], sdev->
wr_chunk
[0], sdev->
wr_∂™e
[0], sdev->
wr_∑ge
[0], sdev->
wr_logicb
[0]);

9173 
	`debug_¥öt
("COLD: sb=%d,Üun=%d, chunk=%d,Ölane=%d,Öage=%d,Üogicb=%d.\n",

9174 
sdev
->
wr_sb
[1], sdev->
wr_lun_off£t
[1], sdev->
wr_chunk
[1], sdev->
wr_∂™e
[1], sdev->
wr_∑ge
[1], sdev->
wr_logicb
[1]);

9175 
	`sh™n⁄_hwm⁄_exô
(
pdev
, 
sdev
->
hwm⁄_dev
);

9176 
	`sh™n⁄_de°roy_miscdevi˚
(&
sdev
->
misc
);

9178 
	`sh™n⁄_¥e„tch_de°roy
(&
sdev
->
sdisk
.
¥e„tch
);

9179 
	`ªÀa£_a˘ive_blocks_ïûog
(
sdev
);

9180 
	`ªÀa£_blocks_gc_°©e
(
sdev
);

9181 
	`sh™n⁄_ªÀa£_ïûogs
(
sdev
);

9182 
	`sh™n⁄_v‰ì
(
sdev
->
ªad_cou¡
);

9183 
	`sh™n⁄_v‰ì
(
sdev
->
sub_groups
);

9184 
	`sh™n⁄_v‰ì
(
sdev
->
sbs
);

9185 
	`sh™n⁄_debugfs_˛ónup
(
sdev
);

9186 
	`ªÀa£_îr_öje˘i⁄
(
sdev
);

9188 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

9189 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

9190 
	`sh™n⁄_dißbÀ_msix
(
pdev
, 
sdev
);

9192 
	`sh™n⁄_dißbÀ_msi
(
pdev
, 
sdev
);

9195 
	`com∂ëi⁄_cdev_ªÀa£
(
sdev
);

9196 
	`comm™d_cdev_ªÀa£
(
sdev
);

9197 
	`pba_èbÀ_cdev_ªÀa£
(
sdev
);

9198 #ifde‡
CONFIG_SHANNON_EPILOG_CDEV


9199 
	`ïûog_cdev_exô
(
sdev
);

9202 i‡(
sdev
->
ovîœp
)

9203 
	`sh™n⁄_k‰ì
(
sdev
->
ovîœp
);

9205 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

9206 
	`ªÀa£_bbt_n‹_°ru˘uª
(
sdev
);

9208 i‡(
sdev
->
•oﬁ
) {

9209 
	`ªÀa£_sdev_m≠_èbÀ
(
sdev
);

9210 
	`ªÀa£_poﬁ_°ru˘
(
sdev
->
•oﬁ
);

9212 
	`sh™n⁄_m≠_èbÀ_‰ì
(&
sdev
->
sdisk
);

9214 i‡(
sdev
->
ïûog_∑ge_poﬁ
)

9215 
	`sh™n⁄_mempoﬁ_de°roy
(
sdev
->
ïûog_∑ge_poﬁ
);

9216 i‡(
sdev
->
logicb_buf_poﬁ
)

9217 
	`sh™n⁄_mempoﬁ_de°roy
(
sdev
->
logicb_buf_poﬁ
);

9219 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

9220 
	`ªÀa£_lun_°ru˘uª
(
sdev
);

9221 
	`ªÀa£_buf„r_queue
(
sdev
);

9224 
	`sdev_‰ì_dummy_∑ge
(
sdev
);

9225 #i‡!
	`deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

9226 
	`sh™n⁄_dev_pci_deöôülize
(
sdev
);

9229 
	`ªÀa£_lun£ts_°ru˘uª
(
sdev
);

9231 i‡(
sdev
->
övÆid_Êashids
)

9232 
	`sh™n⁄_k‰ì
(
sdev
->
övÆid_Êashids
);

9233 i‡(
sdev
->
sdisk
.
queue
)

9234 
	`sh™n⁄_blk_˛ónup_queue
(
sdev
->
sdisk
.
queue
);

9235 
	`ªÀa£_w‹kqueues
(
sdev
);

9236 i‡(
sdev
->
¸c_èbÀ
)

9237 
	`sh™n⁄_k‰ì
(
sdev
->
¸c_èbÀ
);

9238 
	`sh_de¸ó£_u£rs
(
sdev
);

9239 
	}
}

9241 
	$sh™n⁄_∂ugout_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

9243 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
∂ugout_w‹k
);

9247 i‡(
sdev
->
sdisk
.
exô
)

9251 
	`com∂ëe_≥ndög_ªque°
(
sdev
);

9252 } 
sdev
->
öô_d⁄e
 < 
STAGE9_DONE
);

9253 
	}
}

9255 
	$sh™n⁄_eje˘_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

9257 
sh™n⁄_dñayed_w‹k
 *
eje˘_w‹k
 = 
	`gë_dñayed_w‹k
(
w‹k
);

9258 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
eje˘_w‹k
, shannon_dev,Éject_work);

9259 
	`sh™n⁄_dißbÀ_¶Ÿ
(
sdev
->
pci_dev
);

9260 
	}
}

9262 
	$sh™n⁄_ªmove
(
sh™n⁄_dev
 *
d©a
, 
sh™n⁄_pci_dev_t
 *
pdev
)

9264 
sh™n⁄_dev
 *
sdev
;

9266 i‡(
sh™n⁄_scsi_mode
)

9267 
sdev
 = 
d©a
;

9269 
sdev
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

9271 i‡((
sdev
 =
NULL
Ë|| (sdev->
sdisk
.
exô
 == 1))

9273 
sdev
->
sdisk
.
exô
 = 1;

9274 i‡(
sdev
->
•oﬁ
)

9275 
sdev
->
•oﬁ
->
exô
 = 1;

9276 
	`check_∂ugout
(
sdev
);

9278 i‡(
sdev
->
¥e„tch_thªad
) {

9279 
	`£t_¥e„tch_dißbÀ
(&
sdev
->
sdisk
.
¥e„tch
);

9280 
	`sh™n⁄_kthªad_°›
(
sdev
->
¥e„tch_thªad
);

9281 
sdev
->
¥e„tch_thªad
 = 
NULL
;

9283 i‡(
sdev
->
ªcovî_thªad
) {

9284 
	`sh™n⁄_kthªad_°›
(
sdev
->
ªcovî_thªad
);

9285 
sdev
->
ªcovî_thªad
 = 
NULL
;

9287 i‡(
sdev
->
gc_thªad
) {

9288 
	`sh™n⁄_kthªad_°›
(
sdev
->
gc_thªad
);

9289 
sdev
->
gc_thªad
 = 
NULL
;

9292 
	`__sh™n⁄_ªmove
(
sdev
);

9293 i‡(
sh™n⁄_scsi_mode
 == 0)

9294 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
NULL
);

9295 
	}
}

9297 
	$sh™n⁄_Æloc_mempoﬁ
()

9299 
sh™n⁄_ªq_¶ab
 = 
	`sh™n⁄_kmem_ˇche_¸óã
("shannon_req_cache",

9300 (
sh™n⁄_ªque°
), 0, 
SHN_SLAB_HWCACHE_ALIGN
, 
NULL
);

9301 i‡(!
sh™n⁄_ªq_¶ab
) {

9302 
	`sh™n⁄_îr
("cannot initá shannon_req slab.\n");

9305 
sh™n⁄_bio_¶ab
 = 
	`sh™n⁄_kmem_ˇche_¸óã
("shannon_bio_cache",

9306 (
sh™n⁄_bio
), 0, 
SHN_SLAB_HWCACHE_ALIGN
, 
NULL
);

9307 i‡(!
sh™n⁄_bio_¶ab
) {

9308 
	`sh™n⁄_îr
("cannot initá shannon_bio slab.\n");

9309 
‰ì_ªq_¶ab
;

9311 
sh™n⁄_ªq_poﬁ
 = 
	`sh™n⁄_mempoﬁ_¸óã_¶ab_poﬁ
(8192, 
sh™n⁄_ªq_¶ab
);

9312 i‡(!
sh™n⁄_ªq_poﬁ
) {

9313 
	`sh™n⁄_îr
("cannot initá shannon_reqÖool.\n");

9314 
‰ì_bio_¶ab
;

9316 
sh™n⁄_bio_poﬁ
 = 
	`sh™n⁄_mempoﬁ_¸óã_¶ab_poﬁ
(4096, 
sh™n⁄_bio_¶ab
);

9317 i‡(!
sh™n⁄_bio_poﬁ
) {

9318 
	`sh™n⁄_îr
("cannot initá shannon_bioÖool.\n");

9319 
‰ì_ªq_poﬁ
;

9321 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


9322 
	`SHANNON_INIT_LIST_HEAD
(&
out°™dög_ªqs_li°
);

9323 
	`sh™n⁄_•ö_lock_öô
(&
out°™dög_ªqs_li°_lock
);

9324 
	`SHANNON_INIT_LIST_HEAD
(&
out°™dög_sbios_li°
);

9325 
	`sh™n⁄_•ö_lock_öô
(&
out°™dög_sbios_li°_lock
);

9330 
‰ì_ªq_poﬁ
:

9331 
	`sh™n⁄_mempoﬁ_de°roy
(
sh™n⁄_ªq_poﬁ
);

9332 
‰ì_bio_¶ab
:

9333 
	`sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_bio_¶ab
);

9334 
‰ì_ªq_¶ab
:

9335 
	`sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_ªq_¶ab
);

9338 
	}
}

9340 
	$sh™n⁄_‰ì_mempoﬁ
()

9342 #ifde‡
CONFIG_SHANNON_DEBUG_REQS


9343 
sh™n⁄_ªque°
 *
ªq
;

9344 
sh™n⁄_bio
 *
sbio
;

9346 i‡(
	`u∆ikñy
(!
	`sh™n⁄_li°_em±y
(&
out°™dög_sbios_li°
))) {

9347 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_sbios_li°_lock
);

9348 
	`sh™n⁄_li°_f‹_óch_íåy
(
sbio
, &
out°™dög_sbios_li°
, 
debug_li°
)

9349 
	`sh™n⁄_öfo
("sbio->èg=0x%lx.\n", 
sbio
->
èg
);

9350 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_sbios_li°_lock
);

9352 i‡(
	`u∆ikñy
(!
	`sh™n⁄_li°_em±y
(&
out°™dög_ªqs_li°
))) {

9353 
	`sh™n⁄_•ö_lock_bh
(&
out°™dög_ªqs_li°_lock
);

9354 
	`sh™n⁄_li°_f‹_óch_íåy
(
ªq
, &
out°™dög_ªqs_li°
, 
debug_li°
)

9355 
	`sh™n⁄_öfo
("lun=%d,Üun_pba=%d,Åag=0x%lx.\n", 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
èg
);

9356 
	`sh™n⁄_•ö_u∆ock_bh
(&
out°™dög_ªqs_li°_lock
);

9359 i‡(
sh™n⁄_bio_poﬁ
)

9360 
	`sh™n⁄_mempoﬁ_de°roy
(
sh™n⁄_bio_poﬁ
);

9361 i‡(
sh™n⁄_ªq_poﬁ
)

9362 
	`sh™n⁄_mempoﬁ_de°roy
(
sh™n⁄_ªq_poﬁ
);

9363 i‡(
sh™n⁄_bio_¶ab
)

9364 
	`sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_bio_¶ab
);

9365 i‡(
sh™n⁄_ªq_¶ab
)

9366 
	`sh™n⁄_kmem_ˇche_de°roy
(
sh™n⁄_ªq_¶ab
);

9367 
	}
}

9369 
	$__sh™n⁄_pci_ª£t_¥ï¨e
(
sh™n⁄_pci_dev_t
 *
pdev
)

9371 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

9372 
i
;

9374 
	`°›_w©chdog_timî
(
sdev
);

9375 
sdev
->
big_lock
 = 1;

9376 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

9377 i‡(
has_dma_dñay
)

9378 
	`__sh™n⁄_pick_ªque°
(
sdev
, 0xffffffff);

9379 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

9380 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

9382 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

9383 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

9384 
	`sh™n⁄_m¶ìp
(1);

9385 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

9387 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

9388 
	`sh™n⁄_öfo
("%s: fû»∑gê°rùe.....\n", 
sdev
->
cdev_«me
);

9389 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

9390 (
sdev
->
lun_ö_group
[
i
] != 0) || \

9391 (
sdev
->
wr_group
[
i
] != 0) || \

9392 (
sdev
->
wr_∂™e
[
i
] != 0) || \

9393 (
sdev
->
wr_logicb
[
i
] != 0))

9394 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

9399 #ifde‡
SHANNON_USE_WRITE_BUFFER


9400 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[0]);

9401 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[1]);

9403 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

9404 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

9406 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

9407 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

9408 
	`sh™n⁄_m¶ìp
(1);

9411 i‡(
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(sdev)) {

9412 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

9413 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
))

9415 
	`¢≠_ªad_dißbÀ
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i], 1, 1);

9416 
	`sh™n⁄_pﬁlög_cmd
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i]->
phy_lun_num
, 0, 0, 0);

9419 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

9420 
	`sh™n⁄_m¶ìp
(1);

9421 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

9424 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

9425 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

9426 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

9427 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

9428 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

9429 
	}
}

9431 
	$__sh™n⁄_pci_ª£t_föished
(
sh™n⁄_pci_dev_t
 *
pdev
)

9433 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

9434 
i
;

9437 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

9438 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

9439 
	`wrôe_öãºu±_ve˘‹
(
sdev
, 
i
);

9441 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

9442 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

9443 #ifde‡
SHANNON_USE_WRITE_BUFFER


9444 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[0]);

9445 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[1]);

9447 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

9448 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

9449 i‡(!
	`lun£t_ªq_queue_is_em±y
(&
sdev
->
lun£ts
[
i
]))

9450 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun£ts
[
i
].
submô_w‹k
);

9452 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

9453 
sdev
->
big_lock
 = 0;

9454 
	`sh™n⁄_wake_up
(&
sdev
->
big_lock_evít
);

9455 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

9456 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

9457 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

9458 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

9459 
	`°¨t_w©chdog_timî
(
sdev
, 
WATCHDOG_SECONDS
);

9460 
	}
}

9462 
	$lun£t_queue_dïth
(
sh™n⁄_lun£t
 *
lun£t
)

9464  (
lun£t
->
sq_hód_tmp
 + 
QUEUE_SIZE
 -Üun£t->
cq_èû
) % QUEUE_SIZE;

9465 
	}
}

9466 
	~"sh™n⁄_sysfs_c‹e.c
"

9467 
	~"sh™n⁄_ªc⁄fig.c
"

9468 
	~"sh™n⁄_g4.c
"

9469 
	~"sh™n⁄_g5.c
"

	@shannon_map_table.c

10 
	~"sh™n⁄.h
"

12 
	#IN_CACHE_BIT
 (4)

	)

13 
	#IN_CACHE_MASK
 (1 << 
IN_CACHE_BIT
)

	)

14 
	#pba_d©a_is_ö_ˇche
(
high_pba
Ë((high_pbaË& 
IN_CACHE_MASK
)

	)

15 
	#__ãmp_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
) ({ \

16 
u64
 
_off£t
 = (
¶Ÿ
Ë* (
Õmt
)->
ãmp_èbÀ
.
íåy_size
; \

17 (((
Õmt
)->
ãmp_èbÀ
.
memblock_li°
[
_off£t
 >> (Õmt)->ãmp_èbÀ.
memblock_size_shi·
] =
NULL
) ? NULL : \

18 &((
Õmt
)->
ãmp_èbÀ
.
memblock_li°
[
_off£t
 >> (Õmt)->ãmp_èbÀ.
memblock_size_shi·
][_off£à& (÷pmt)->ãmp_èbÀ.
memblock_size
 - 1)])); \

19 })

	)

21 
	#__m≠_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
) ({ \

22 
u64
 
_off£t
 = (
¶Ÿ
Ë* (
Õmt
)->
m≠_èbÀ
.
íåy_size
; \

23 (((
Õmt
)->
m≠_èbÀ
.
memblock_li°
[
_off£t
 >> (Õmt)->m≠_èbÀ.
memblock_size_shi·
] =
NULL
) ? NULL : \

24 ((
u32
 *)(&((
Õmt
)->
m≠_èbÀ
.
memblock_li°
[
_off£t
 >> (Õmt)->m≠_èbÀ.
memblock_size_shi·
][_off£à& (÷pmt)->m≠_èbÀ.
memblock_size
 - 1)])))); \

25 })

	)

27 
ölöe
 
u32
 
	$gë_low_pba_‰om_m≠_èbÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
)

29 
u32
 *
d©a
 = 
	`__m≠_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

31 i‡(
d©a
 =
NULL
)

32  
LPMT_INVALID
;

34  *
d©a
;

35 
	}
}

37 
ölöe
 
u8
 
	$gë_high_pba_‰om_ãmp_èbÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
)

40 
u8
 *
d©a
 = 
	`__ãmp_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

42 i‡(
d©a
 =
NULL
)

43  (
u8
)
LPMT_INVALID
;

45  *
d©a
;

46 
	}
}

48 
	$m≠_èbÀ_£t_low_pba
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
, 
u32
 
low_pba
)

50 
u32
 *
pos
 = 
	`__m≠_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

52 i‡(
	`u∆ikñy
(
pos
 =
NULL
))

53 
	`BUG_ON
(1);

55 *
pos
 = 
low_pba
;

56 
	}
}

58 
	$m≠_èbÀ_£t_high_pba
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
, 
u8
 
high_pba
)

60 
u8
 *
pos
 = 
	`__ãmp_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

62 i‡(
	`u∆ikñy
(
pos
 =
NULL
))

63 
	`BUG_ON
(1);

65 *
pos
 = 
high_pba
;

66 
	}
}

68 
ölöe
 
u8
 *
	$__gë_memblock_‰om_‰ìli°
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
)

70 
u8
 **
addr
 = 
NULL
;

71 
u8
 *
√xt
 = 
NULL
;

73 
	`sh™n⁄_•ö_lock
(&
mpoﬁ
->
li°_lock
);

74 
addr
 = (
u8
 **)
mpoﬁ
->
‰ì_li°
;

75 i‡(
addr
) {

76 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
) == 0);

77 
√xt
 = 
addr
[0];

78 i‡(
mpoﬁ
->
œ°
 =(
u8
 *)
addr
)

79 
mpoﬁ
->
œ°
 = 
√xt
;

80 
mpoﬁ
->
‰ì_li°
 = 
√xt
;

81 
	`sh™n⁄_©omic_dec
(&
mpoﬁ
->
‰ì_˙t
);

82 
	`mem£t
((
u8
 *)
addr
, 
LPMT_INVALID
, 32);

83 
	`debugs4
("%s: fªe_˙t=%d,Üa°=0x%lx,Çew=0x%lx.\n", 
__func__
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), mpoﬁ->
œ°
, (
u8
 *)
addr
);

85 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
) != 0)

86 
	`BUG_ON
(1);

88 
	`sh™n⁄_•ö_u∆ock
(&
mpoﬁ
->
li°_lock
);

90  (
u8
 *)
addr
;

91 
	}
}

93 
u8
 *
	$gë_memblock_‰om_‰ìli°
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
)

95 
u8
 *
addr
 = 
NULL
;

96 
addr
 = 
	`__gë_memblock_‰om_‰ìli°
(
mpoﬁ
);

97 i‡(
addr
 && (
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë< sh™n⁄_©omic_ªad(&mpoﬁ->
mö_thªshﬁd
)))

98 
	`sh™n⁄_queue_w‹k
(
mpoﬁ
->
memblock_wq
, &mpoﬁ->
Æloc_w‹k
);

99  
addr
;

100 
	}
}

102 
ölöe
 
	$__add_to_memblock_‰ìli°
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u8
 *
addr
)

104 
u8
 **
œ°
 = 
NULL
;

105 
u8
 **
√w
 = (u8 **)
addr
;

107 
	`sh™n⁄_mem£t
(
addr
, 
LPMT_INVALID
, 
mpoﬁ
->
memblock_size
);

108 
√w
[0] = 
NULL
;

109 
	`debugs4
("‰ì_˙t=%d,áddr=0x%lx\n", 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), 
addr
);

110 
	`sh™n⁄_•ö_lock
(&
mpoﬁ
->
li°_lock
);

111 i‡(
mpoﬁ
->
‰ì_li°
 =
NULL
)

112 
mpoﬁ
->
‰ì_li°
 = 
addr
;

113 i‡(
mpoﬁ
->
œ°
) {

114 
œ°
 = (
u8
 **)
mpoﬁ
->last;

115 
œ°
[0] = 
addr
;

116 
mpoﬁ
->
œ°
 = 
addr
;

118 
mpoﬁ
->
œ°
 = 
addr
;

119 
	`sh™n⁄_©omic_öc
(&
mpoﬁ
->
‰ì_˙t
);

120 
	`sh™n⁄_•ö_u∆ock
(&
mpoﬁ
->
li°_lock
);

121 
	}
}

123 
	$add_to_memblock_‰ìli°
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u8
 *
addr
)

125 i‡((
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë+ sh™n⁄_©omic_ªad(&mpoﬁ->
u£d_˙t
)) \

126 > 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
max_thªshﬁd
))

127 
	`sh™n⁄_v‰ì
(
addr
);

129 
	`__add_to_memblock_‰ìli°
(
mpoﬁ
, 
addr
);

130 
	}
}

132 
	$__sh™n⁄_sˇâî_memblock_de°roy
(
sˇâî_memblock
 *
smb
, 
to_‰ìli°
)

134 
ödex
;

136 i‡(
smb
 =
NULL
)

139 i‡(
smb
->
memblock_li°
 !
NULL
) {

140 
ödex
 = 0; index < 
smb
->
memblock_cou¡
; index++) {

141 i‡(
smb
->
memblock_li°
[
ödex
]) {

142 i‡(
to_‰ìli°
)

143 
	`add_to_memblock_‰ìli°
(
smb
->
mpoﬁ
, smb->
memblock_li°
[
ödex
]);

145 
	`sh™n⁄_v‰ì
(
smb
->
memblock_li°
[
ödex
]);

146 
smb
->
memblock_li°
[
ödex
] = 
NULL
;

147 
	`sh™n⁄_©omic_dec
(&
smb
->
mpoﬁ
->
u£d_˙t
);

152 
	`debugs4
("%s: fªe_˙t=%d, u£d_˙t=%d, mö_thªshﬁd=%d, max_thªshﬁd=%d.\n", 
__func__
, 
	`sh™n⁄_©omic_ªad
(&
smb
->
mpoﬁ
->
‰ì_˙t
), \

153 
	`sh™n⁄_©omic_ªad
(&
smb
->
mpoﬁ
->
u£d_˙t
), sh™n⁄_©omic_ªad(&smb->mpoﬁ->
mö_thªshﬁd
), sh™n⁄_©omic_ªad(&smb->mpoﬁ->
max_thªshﬁd
));

154 
	}
}

156 
	$sh™n⁄_sˇâî_memblock_de°roy
(
sˇâî_memblock
 *
smb
, 
to_‰ìli°
)

158 
	`__sh™n⁄_sˇâî_memblock_de°roy
(
smb
, 
to_‰ìli°
);

159 
	`sh™n⁄_k‰ì
(
smb
->
memblock_li°
);

160 
smb
->
tŸÆ_size
 = 0;

161 
smb
->
memblock_cou¡
 = 0;

162 
smb
->
memblock_size
 = 0;

163 
smb
->
memblock_li°
 = 
NULL
;

164 
	}
}

166 
	$sh™n⁄_m≠_èbÀ_de°roy
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
to_‰ìli°
)

168 
	`sh™n⁄_sˇâî_memblock_de°roy
(&
Õmt
->
m≠_èbÀ
, 
to_‰ìli°
);

169 
	`sh™n⁄_sˇâî_memblock_de°roy
(&
Õmt
->
ãmp_èbÀ
, 
to_‰ìli°
);

170 
	`sh™n⁄_mem£t
(
Õmt
->
vÆid_logicbs_¨øy
, 0, (lpmt->valid_logicbs_array));

171 
	}
}

173 
	$sh™n⁄_m≠_èbÀ_ª£t
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
to_‰ìli°
)

175 
	`__sh™n⁄_sˇâî_memblock_de°roy
(&
Õmt
->
m≠_èbÀ
, 
to_‰ìli°
);

176 
	`__sh™n⁄_sˇâî_memblock_de°roy
(&
Õmt
->
ãmp_èbÀ
, 
to_‰ìli°
);

177 
	`sh™n⁄_mem£t
(
Õmt
->
vÆid_logicbs_¨øy
, 0, (lpmt->valid_logicbs_array));

178 
	}
}

180 
	$sh™n⁄_sˇâî_memblock_ª£t
(
sˇâî_memblock
 *
smb
)

182 
ödex
;

183 
u8
 *
memblock_p
 = 
NULL
;

185 
ödex
 = 0; index < 
smb
->
memblock_cou¡
; index++) {

186 
memblock_p
 = 
smb
->
memblock_li°
[
ödex
];

187 i‡(
memblock_p
)

188 
	`sh™n⁄_mem£t
(
memblock_p
, 
LPMT_INVALID
, 
smb
->
memblock_size
);

190 
	}
}

192 
ölöe
 
	$Æloc_√w_memblock
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
)

194 
u8
 *
addr
 = 
NULL
;

196 
addr
 = 
	`__sh™n⁄_vmÆloc
(
mpoﬁ
->
memblock_size
, 
GFP_NOWAIT
, 
SHANNON_PAGE_KERNEL
);

197 i‡(!
addr
)

199 
	`__add_to_memblock_‰ìli°
(
mpoﬁ
, 
addr
);

201 
	}
}

203 
	$sh™n⁄_memblock_poﬁ_add
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
)

205 
i
;

206 
ªt
 = 0;

207 
u64
 
size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* 
mpoﬁ
->
íåy_size
);

208 
u32
 
cou¡
 = 
size
 / 
mpoﬁ
->
memblock_size
 + ((size % mpool->memblock_size) > 0 ? 1 : 0);

210 i‡(
sh™n⁄_memblock_¥óŒoc
 != 0)

212 
i
 = 0; i < 
cou¡
; i++) {

213 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë>sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
))

215 
ªt
 = 
	`Æloc_√w_memblock
(
mpoﬁ
);

216 i‡(
ªt
)

219 
	`debugs4
("%s: cou¡=%ld, fªe_˙t=%d, u£d_˙t=%d, max_thªshﬁd=%ld", 
__func__
, 
cou¡
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), \

220 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
u£d_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
));

221 
	}
}

223 
	$sh™n⁄_Æloc_memblock_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

225 
	#DEFAULT_RETRY
 (10)

	)

226 
ªt
 = 0;

227 
times
 = 
DEFAULT_RETRY
;

228 
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_memblock_poﬁ, 
Æloc_w‹k
);

230 i‡(
sh™n⁄_memblock_¥óŒoc
 == -1)

232 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë< sh™n⁄_©omic_ªad(&mpoﬁ->
mö_thªshﬁd
)) {

233 
ªåy
:

234 
ªt
 = 
	`Æloc_√w_memblock
(
mpoﬁ
);

235 i‡(
ªt
 && 
times
--) {

236 
	`sh™n⁄_m¶ìp
(10);

237 
ªåy
;

239 i‡(
times
 == 0)

240 
	`sh™n⁄_m¶ìp
(1000);

241 
times
 = 
DEFAULT_RETRY
;

243 
	}
}

245 
ölöe
 
	$sh™n⁄_öô_sˇâî_memblock
(
sˇâî_memblock
 *
smb
)

247 
i
;

249 
smb
->
memblock_size
 = 0;

250 
smb
->
memblock_cou¡
 = 0;

251 
smb
->
tŸÆ_size
 = 0;

253 
i
 = 0; i < 
MEMBLOCK_LOCK_CNT
; i++)

254 
	`sh™n⁄_muãx_öô
(&
smb
->
li°_lock
[
i
]);

255 
	}
}

257 
	$sh™n⁄_Æloc_sˇâî_memblock
(
sˇâî_memblock
 *
smb
, 
u64
 
block_size_shi·
, 
u32
 
íåy_size
, u64 
tŸÆ_size
)

259 
ödex
;

261 i‡((
smb
 =
NULL
Ë|| (
tŸÆ_size
 =0Ë|| (
block_size_shi·
 == 0))

265 
	`BUG_ON
(
smb
->
memblock_cou¡
 != 0);

266 
	`BUG_ON
(
smb
->
memblock_li°
 !
NULL
);

268 i‡(
block_size_shi·
 =
MAP_TABLE_MEMBLOCK_SIZE_SHIFT
)

269 
smb
->
mpoﬁ
 = &
m≠_èbÀ_poﬁ
;

270 if(
block_size_shi·
 =
TEMP_TABLE_MEMBLOCK_SIZE_SHIFT
)

271 
smb
->
mpoﬁ
 = &
ãmp_èbÀ_poﬁ
;

273 
	`BUG_ON
(1);

274 
	`sh™n⁄_öô_sˇâî_memblock
(
smb
);

275 
smb
->
memblock_size_shi·
 = 
block_size_shi·
;

276 
smb
->
memblock_size
 = 1 << 
block_size_shi·
;

277 
smb
->
íåy_size
 =Éntry_size;

278 
smb
->
íåys_≥r_memblock
 = smb->
memblock_size
 / smb->
íåy_size
;

279 
smb
->
memblock_cou¡
 = 
tŸÆ_size
 / smb->
memblock_size
 + ((total_size % smb->memblock_size) > 0 ? 1 : 0);

280 
smb
->
tŸÆ_size
 = smb->
memblock_cou¡
 * smb->
memblock_size
;

281 
	`debugs4
("memblock_cou¡=%ld, memblock_size=%lu,ÅŸÆ_size=%lu,Årue_size=%lu.\n", 
smb
->
memblock_cou¡
, smb->
memblock_size
, smb->
tŸÆ_size
,Åotal_size);

282 
smb
->
memblock_li°
 = 
	`sh™n⁄_kmÆloc
(smb->
memblock_cou¡
 * (
u8
 *), 
GFP_SHANNON
);

283 i‡(
smb
->
memblock_li°
 =
NULL
)

284 
Áûed
;

286 
	`sh™n⁄_mem£t
(
smb
->
memblock_li°
, 0, smb->
memblock_cou¡
 * (
u8
 *));

287 i‡(
sh™n⁄_memblock_¥óŒoc
 == -1) {

288 
ödex
 = 0; index < 
smb
->
memblock_cou¡
; index++) {

289 
smb
->
memblock_li°
[
ödex
] = 
	`sh™n⁄_vmÆloc
(smb->
memblock_size
);

290 i‡(
smb
->
memblock_li°
[
ödex
] =
NULL
)

291 
Æloc_memblock_Áûed
;

292 
	`sh™n⁄_mem£t
(
smb
->
memblock_li°
[
ödex
], 
LPMT_INVALID
, smb->
memblock_size
);

293 
	`sh™n⁄_©omic_öc
(&
smb
->
mpoﬁ
->
u£d_˙t
);

297 
	`debugs4
("%s: fªe_˙t=%d, mö_thªshﬁd=%d, max_thªshﬁd=%d.\n", 
__func__
, 
	`sh™n⁄_©omic_ªad
(&
smb
->
mpoﬁ
->
‰ì_˙t
), \

298 
	`sh™n⁄_©omic_ªad
(&
smb
->
mpoﬁ
->
mö_thªshﬁd
), sh™n⁄_©omic_ªad(&smb->mpoﬁ->
max_thªshﬁd
));

300 
Æloc_memblock_Áûed
:

301 --
ödex
 >= 0) {

302 i‡(
smb
->
memblock_li°
[
ödex
]) {

303 
	`add_to_memblock_‰ìli°
(
smb
->
mpoﬁ
, smb->
memblock_li°
[
ödex
]);

304 
smb
->
memblock_li°
[
ödex
] = 
NULL
;

305 
	`sh™n⁄_©omic_dec
(&
smb
->
mpoﬁ
->
u£d_˙t
);

309 
	`sh™n⁄_k‰ì
(
smb
->
memblock_li°
);

310 
Áûed
:

311 
smb
->
tŸÆ_size
 = 0;

312 
smb
->
memblock_cou¡
 = 0;

313 
smb
->
memblock_size
 = 0;

314 
smb
->
memblock_li°
 = 
NULL
;

317 
	}
}

319 
	$check_™d_Æloc_memblock
(
sˇâî_memblock
 *
smb
, 
logicb64_t
 
off£t
)

321 
u32
 
li°_ödex
 = 
off£t
 >> 
smb
->
memblock_size_shi·
;

322 
u8
 *
addr
 = 
NULL
;

324 i‡(
	`u∆ikñy
(
smb
->
memblock_li°
[
li°_ödex
] =
NULL
)) {

325 
	`sh™n⁄_muãx_lock
(&
smb
->
li°_lock
[
li°_ödex
 & (
MEMBLOCK_LOCK_CNT
 - 1)]);

326 i‡(
	`likñy
(
smb
->
memblock_li°
[
li°_ödex
] =
NULL
)) {

327 
addr
 = 
	`gë_memblock_‰om_‰ìli°
(
smb
->
mpoﬁ
);

328 
	`debugs4
("gëá fªêmemblock, index=%d,áddr=0x%lx.\n", 
li°_ödex
, 
addr
);

329 i‡(
	`u∆ikñy
(
addr
 =
NULL
)) {

330 
addr
 = 
	`__sh™n⁄_vmÆloc
(
smb
->
memblock_size
, 
GFP_NOWAIT
, 
SHANNON_PAGE_KERNEL
);

331 i‡(
addr
)

332 
	`sh™n⁄_mem£t
(
addr
, 
LPMT_INVALID
, 
smb
->
memblock_size
);

334 i‡(
	`likñy
(
addr
))

335 
	`sh™n⁄_©omic_öc
(&
smb
->
mpoﬁ
->
u£d_˙t
);

336 
smb
->
memblock_li°
[
li°_ödex
] = 
addr
;

338 
	`sh™n⁄_muãx_u∆ock
(&
smb
->
li°_lock
[
li°_ödex
 & (
MEMBLOCK_LOCK_CNT
 - 1)]);

341  (
smb
->
memblock_li°
[
li°_ödex
]) ? 0 : -1;

342 
	}
}

344 
	$check_™d_Æloc_m≠èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
)

346 
ªt
 = 0, 
i
;

347 
u64
 
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
);

349 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

350 i‡(!(
sdisk
->
Õmt_¨øy
[
i
].
°©e
 & 
MAP_TABLE_VALID_MASK
))

352 
ªt
 = 
	`check_™d_Æloc_memblock
(&
sdisk
->
Õmt_¨øy
[
i
].
m≠_èbÀ
, 
¶Ÿ
 * (
u32
));

353 i‡(
ªt
)

354 
out
;

356 
ªt
 = 
	`check_™d_Æloc_memblock
(&
sdisk
->
Õmt_¨øy
[
i
].
ãmp_èbÀ
, 
¶Ÿ
 * (
u8
));

357 i‡(
ªt
)

358 
out
;

360 
out
:

361 i‡(
ªt
)

362 
	`sh™n⁄_îr
("alloc map_tableÉrror.\n");

363  
ªt
;

364 
	}
}

366 
	$check_™d_Æloc_Õmt
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_bio
 *
sbio
, 
logicb_shi·
)

368 
logicb64_t
 
°¨t_lba
, 
íd_lba
;

369 
öãrvÆ
 = 
sdisk
->
Õmt_¨øy
[0].
m≠_èbÀ
.
íåys_≥r_memblock
 > sdisk->Õmt_¨øy[0].
ãmp_èbÀ
.entrys_per_memblock ? \

370 
sdisk
->
Õmt_¨øy
[0].
ãmp_èbÀ
.
íåys_≥r_memblock
 : sdisk->Õmt_¨øy[0].
m≠_èbÀ
.entrys_per_memblock;

371 
logicb64_t
 
lba_ödex
;

372 
cou¡
 = 0;

374 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

377 
°¨t_lba
 = 
sbio
->
°¨t_£˘‹
 >> (
logicb_shi·
 - 9);

378 
íd_lba
 = (
sbio
->
°¨t_£˘‹
 + (sbio->
bio_size
 >> 9)Ë>> (
logicb_shi·
 - 9);

379 
lba_ödex
 = 
°¨t_lba
;

380 
	`BUG_ON
((
íd_lba
 < 
°¨t_lba
));

381 
cou¡
 = ((
íd_lba
 - 
°¨t_lba
Ë/ 
öãrvÆ
) + 1;

382 
cou¡
--) {

383 i‡(
	`check_™d_Æloc_m≠èbÀ
(
sdisk
, 
lba_ödex
))

386 
lba_ödex
 +
öãrvÆ
;

389  
	`check_™d_Æloc_m≠èbÀ
(
sdisk
, 
íd_lba
);

390 
	}
}

392 
	$sh™n⁄_memblock_poﬁ_öô
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u32
 
memblock_size_shi·
, u32 
íåy_size
)

394 
mpoﬁ
->
memblock_size
 = 1 << 
memblock_size_shi·
;

395 
mpoﬁ
->
íåy_size
 =Éntry_size;

396 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
mö_thªshﬁd
, 0);

397 i‡(
sh™n⁄_memblock_¥óŒoc
 == 0) {

398 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
mö_thªshﬁd
, 
DEFAULT_MIN_THRESHOLD
);

399 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, 
DEFAULT_MIN_THRESHOLD
);

400 } i‡(
sh™n⁄_memblock_¥óŒoc
 <= -1) {

401 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
mö_thªshﬁd
, 0);

402 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, 0);

404 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
mö_thªshﬁd
, 
sh™n⁄_memblock_¥óŒoc
);

405 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, 
sh™n⁄_memblock_¥óŒoc
);

407 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
‰ì_˙t
, 0);

408 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
u£d_˙t
, 0);

409 
	`sh™n⁄_öô_w‹k
(&
mpoﬁ
->
Æloc_w‹k
, 
sh™n⁄_Æloc_memblock_èsk
);

410 
mpoﬁ
->
memblock_wq
 = 
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(
	`sh™n⁄_ka•rötf
(
GFP_SHANNON
, "shn_memblock_wq"));

411 i‡(
mpoﬁ
->
memblock_wq
 =
NULL
) {

412 
	`sh™n⁄_w¨n
("create shannon memblock workqueue failed!\n");

415 
	`sh™n⁄_•ö_lock_öô
(&
mpoﬁ
->
li°_lock
);

416 
mpoﬁ
->
‰ì_li°
 = 
NULL
;

419 
	}
}

421 
	$sh™n⁄_memblock_poﬁ_˛ór
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
)

423 
u8
 *
addr
;

424 (
addr
 = 
	`__gë_memblock_‰om_‰ìli°
(
mpoﬁ
)Ë!
NULL
)

425 
	`sh™n⁄_v‰ì
(
addr
);

426 
	}
}

428 
	$sh™n⁄_memblock_poﬁ_de°roy
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
)

430 
	`sh™n⁄_Êush_w‹kqueue
(
mpoﬁ
->
memblock_wq
);

432 
	`sh™n⁄_memblock_poﬁ_˛ór
(
mpoﬁ
);

433 i‡(
mpoﬁ
->
memblock_wq
)

434 
	`sh™n⁄_de°roy_w‹kqueue
(
mpoﬁ
->
memblock_wq
);

435 
	`debugs4
("%s: fªe_˙t=%d, u£d_˙t=%d, max_thªshﬁd=%ld", 
__func__
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
u£d_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
));

436 
	`BUG_ON
(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
) != 0);

437 
	}
}

439 
	$sh™n⁄_memblock_poﬁ_öc_maxt
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
)

441 
u64
 
size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* 
mpoﬁ
->
íåy_size
);

442 
u32
 
cou¡
 = 
size
 / 
mpoﬁ
->
memblock_size
 + ((size % mpool->memblock_size) > 0 ? 1 : 0);

444 i‡(
sh™n⁄_memblock_¥óŒoc
 != 0)

446 i‡(
cou¡
 < 0)

448 i‡((~0x0U - 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
max_thªshﬁd
)Ë< 
cou¡
)

449 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, ~0x0U);

451 
	`sh™n⁄_©omic_add
(
cou¡
, &
mpoﬁ
->
max_thªshﬁd
);

452 
	`debugs4
("%s: cou¡=%ld, fªe_˙t=%d, u£d_˙t=%d, max_thªshﬁd=%ld", 
__func__
, 
cou¡
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
u£d_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
));

453 
	}
}

455 
	$sh™n⁄_memblock_poﬁ_dec_maxt
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
)

457 
u8
 *
addr
;

458 
u64
 
size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* 
mpoﬁ
->
íåy_size
);

459 
u32
 
cou¡
 = 
size
 / 
mpoﬁ
->
memblock_size
 + ((size % mpool->memblock_size) > 0 ? 1 : 0);

461 i‡(
sh™n⁄_memblock_¥óŒoc
 != 0)

463 i‡(
cou¡
 < 0)

465 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
max_thªshﬁd
Ë< 
cou¡
)

466 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, 0);

468 
	`sh™n⁄_©omic_sub
(
cou¡
, &
mpoﬁ
->
max_thªshﬁd
);

469 (
cou¡
--) > 0) {

470 
addr
 = 
	`__gë_memblock_‰om_‰ìli°
(
mpoﬁ
);

471 i‡(
addr
 =
NULL
)

473 
	`sh™n⁄_v‰ì
(
addr
);

475 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë< sh™n⁄_©omic_ªad(&mpoﬁ->
mö_thªshﬁd
))

476 
	`sh™n⁄_queue_w‹k
(
mpoﬁ
->
memblock_wq
, &mpoﬁ->
Æloc_w‹k
);

477 
	`debugs4
("%s: cou¡=%ld, fªe_˙t=%d, u£d_˙t=%d, max_thªshﬁd=%ld", 
__func__
, 
cou¡
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
u£d_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
));

478 
	}
}

480 
	$sh™n⁄_memblock_poﬁ_dec_maxt_by_˙t
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u64
 
cou¡
)

482 
u8
 *
addr
;

484 i‡(
sh™n⁄_memblock_¥óŒoc
 != 0)

486 i‡(
cou¡
 < 0)

488 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
max_thªshﬁd
Ë< 
cou¡
)

489 
	`sh™n⁄_©omic_£t
(&
mpoﬁ
->
max_thªshﬁd
, 0);

491 
	`sh™n⁄_©omic_sub
(
cou¡
, &
mpoﬁ
->
max_thªshﬁd
);

492 (
cou¡
--) > 0) {

493 
addr
 = 
	`__gë_memblock_‰om_‰ìli°
(
mpoﬁ
);

494 i‡(
addr
 =
NULL
)

496 
	`sh™n⁄_v‰ì
(
addr
);

498 i‡(
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
Ë< sh™n⁄_©omic_ªad(&mpoﬁ->
mö_thªshﬁd
))

499 
	`sh™n⁄_queue_w‹k
(
mpoﬁ
->
memblock_wq
, &mpoﬁ->
Æloc_w‹k
);

500 
	`debugs4
("%s: cou¡=%ld, fªe_˙t=%d, u£d_˙t=%d, max_thªshﬁd=%ld", 
__func__
, 
cou¡
, 
	`sh™n⁄_©omic_ªad
(&
mpoﬁ
->
‰ì_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
u£d_˙t
), sh™n⁄_©omic_ªad(&mpoﬁ->
max_thªshﬁd
));

501 
	}
}

503 
	$sh™n⁄_sˇâî_memblock_ªsize
(
sˇâî_memblock
 *
smb
, 
u64
 
tŸÆ_size
)

505 
u32
 
ﬁd_cou¡
;

506 
u32
 
√w_cou¡
, 
i
;

507 
u8
 **
ﬁd_mb
;

508 
u8
 **
√w_mb
;

510 i‡((
tŸÆ_size
 <
smb
->tŸÆ_sizeË|| (smb->
memblock_cou¡
 =0Ë|| (smb->
memblock_size
 == 0))

513 
ﬁd_cou¡
 = 
smb
->
memblock_cou¡
;

514 
√w_cou¡
 = 
tŸÆ_size
 / 
smb
->
memblock_size
 + ((total_size % smb->memblock_size) > 0 ? 1 : 0);

516 
ﬁd_mb
 = 
smb
->
memblock_li°
;

517 
√w_mb
 = 
	`sh™n⁄_kzÆloc
(
√w_cou¡
 * (
u8
 *), 
GFP_SHANNON
);

518 i‡(
√w_mb
 =
NULL
)

521 
i
 = 0; i < 
√w_cou¡
; i++) {

522 
√w_mb
[
i
] = 
NULL
;

523 i‡(
i
 < 
ﬁd_cou¡
)

524 
√w_mb
[
i
] = 
ﬁd_mb
[i];

525 i‡((
√w_mb
[
i
] =
NULL
Ë&& (
sh™n⁄_memblock_¥óŒoc
 == -1)) {

526 
√w_mb
[
i
] = 
	`sh™n⁄_vmÆloc
(
smb
->
memblock_size
);

527 i‡(
√w_mb
[
i
] =
NULL
)

528 
Æloc_memblock_Áûed
;

529 
	`sh™n⁄_mem£t
(
√w_mb
[
i
], 
LPMT_INVALID
, 
smb
->
memblock_size
);

530 
	`sh™n⁄_©omic_öc
(&
smb
->
mpoﬁ
->
u£d_˙t
);

534 
smb
->
memblock_li°
 = 
√w_mb
;

535 
	`sh™n⁄_b¨rõr
();

536 
smb
->
memblock_cou¡
 = 
√w_cou¡
;

537 
smb
->
tŸÆ_size
 = smb->
memblock_size
 * smb->
memblock_cou¡
;

538 
	`sh™n⁄_m¶ìp
(500);

539 
	`sh™n⁄_k‰ì
(
ﬁd_mb
);

543 
Æloc_memblock_Áûed
:

544 --
i
 >
ﬁd_cou¡
) {

545 i‡(
√w_mb
[
i
]) {

546 
	`sh™n⁄_v‰ì
(
√w_mb
[
i
]);

547 
	`sh™n⁄_©omic_dec
(&
smb
->
mpoﬁ
->
u£d_˙t
);

551 
	`sh™n⁄_k‰ì
(
√w_mb
);

553 
	}
}

555 
	$__sh™n⁄_m≠_èbÀ_ªsize
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
√w_m≠_èbÀ_size
, u64 
√w_ãmp_èbÀ_size
)

557 
ªt
;

559 
ªt
 = 
	`sh™n⁄_sˇâî_memblock_ªsize
(&
Õmt
->
m≠_èbÀ
, 
√w_m≠_èbÀ_size
);

560 i‡(
ªt
) {

561 
	`sh™n⁄_îr
("cannotállocateÉnough memory for map_table!\n");

565 
ªt
 = 
	`sh™n⁄_sˇâî_memblock_ªsize
(&
Õmt
->
ãmp_èbÀ
, 
√w_ãmp_èbÀ_size
);

566 i‡(
ªt
) {

567 
	`sh™n⁄_îr
("cannotállocateÉnough memory forÅemp_table!\n");

571 
Õmt
->
m≠_èbÀ_size
 = 
√w_m≠_èbÀ_size
;

572 
Õmt
->
ãmp_èbÀ_size
 = 
√w_ãmp_èbÀ_size
;

574 
	}
}

576 
	$sh™n⁄_m≠_èbÀ_ªsize
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
logicb_shi·
)

578 
ªt
 = -1;

579 
u64
 
√w_tŸÆ_m≠_èbÀ_size
;

580 
u64
 
√w_tŸÆ_ãmp_èbÀ_size
;

581 
i
;

584 
√w_tŸÆ_m≠_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* (
u32
));

585 
	`debugs4
("tŸÆ_m≠_èbÀ_size=%ld.\n", ()
sdisk
->
tŸÆ_m≠_èbÀ_size
);

587 
√w_tŸÆ_ãmp_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* (
u8
));

588 
	`debugs4
("tŸÆ_ãmp_èbÀ_size=%ld.\n", ()
sdisk
->
tŸÆ_ãmp_èbÀ_size
);

589 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

590 
ªt
 = 
	`__sh™n⁄_m≠_èbÀ_ªsize
(&
sdisk
->
Õmt_¨øy
[
i
],

591 (
√w_tŸÆ_m≠_èbÀ_size
 / 
sdisk
->
sdev_cou¡
) + (new_total_map_table_size % sdisk->sdev_count),

592 (
√w_tŸÆ_ãmp_èbÀ_size
 / 
sdisk
->
sdev_cou¡
) + (new_total_temp_table_size % sdisk->sdev_count));

593 i‡(
ªt
) {

594 
	`sh™n⁄_îr
("cannotÑesize mapÅable.\n");

595 (--
i
) >= 0) {

596 
	`__sh™n⁄_m≠_èbÀ_ªsize
(&
sdisk
->
Õmt_¨øy
[
i
],

597 (
sdisk
->
tŸÆ_m≠_èbÀ_size
 / sdisk->
sdev_cou¡
) + sdisk->total_map_table_size % sdisk->sdev_count,

598 (
sdisk
->
tŸÆ_ãmp_èbÀ_size
 / sdisk->
sdev_cou¡
) + sdisk->total_temp_table_size % sdisk->sdev_count);

604 
sdisk
->
tŸÆ_m≠_èbÀ_size
 = 
√w_tŸÆ_m≠_èbÀ_size
;

605 
sdisk
->
tŸÆ_ãmp_èbÀ_size
 = 
√w_tŸÆ_ãmp_èbÀ_size
;

607 
	}
}

609 
	$sh™n⁄_m≠_èbÀ_dißbÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
)

611 
Õmt
->
°©e
 &~
MAP_TABLE_VALID_MASK
;

612 
	}
}

614 
	$sh™n⁄_m≠_èbÀ_íabÀ
(
m≠_èbÀ_°ru˘
 *
Õmt
)

616 
Õmt
->
°©e
 |
MAP_TABLE_VALID_MASK
;

617 
	}
}

619 
	$sh™n⁄_m≠_èbÀ_öô
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
m≠_èbÀ_size
, u64 
ãmp_èbÀ_size
)

621 
ªt
;

623 
ªt
 = 
	`sh™n⁄_Æloc_sˇâî_memblock
(&
Õmt
->
m≠_èbÀ
, 
MAP_TABLE_MEMBLOCK_SIZE_SHIFT
, 
MAP_TABLE_ENTRY_SIZE
, 
m≠_èbÀ_size
);

624 i‡(
ªt
) {

625 
	`sh™n⁄_îr
("cannotállocateÉnough memory for map_table!\n");

626 
Áûed
;

629 
ªt
 = 
	`sh™n⁄_Æloc_sˇâî_memblock
(&
Õmt
->
ãmp_èbÀ
, 
TEMP_TABLE_MEMBLOCK_SIZE_SHIFT
, 
TEMP_TABLE_ENTRY_SIZE
, 
ãmp_èbÀ_size
);

630 i‡(
ªt
) {

631 
	`sh™n⁄_îr
("cannotállocateÉnough memory forÅemp_table!\n");

632 
Áûed
;

634 
	`sh™n⁄_m≠_èbÀ_dißbÀ
(
Õmt
);

635 
Õmt
->
m≠_èbÀ_size
 = map_table_size;

636 
Õmt
->
ãmp_èbÀ_size
 =Åemp_table_size;

637 
	`sh™n⁄_m≠_èbÀ_˛ór
(
Õmt
);

639 
Áûed
:

641 
	}
}

643 
	$__sh™n⁄_Æloc_m≠_èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
logicb_shi·
)

645 
i
;

647 
	`BUG_ON
(
sdisk
->
sdev_cou¡
 <= 0);

648 
	`BUG_ON
(
sdisk
->
°rù_size
 <= 0);

650 
sdisk
->
tŸÆ_m≠_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* (
u32
));

651 
	`debugs4
("tŸÆ_m≠_èbÀ_size=%ld.\n", ()
sdisk
->
tŸÆ_m≠_èbÀ_size
);

653 
sdisk
->
tŸÆ_ãmp_èbÀ_size
 = 
	`SHN_PAGE_ALIGN
((
£˘‹s
 >> (
logicb_shi·
 - 9)Ë* (
u8
));

654 
	`debugs4
("tŸÆ_ãmp_èbÀ_size=%ld.\n", ()
sdisk
->
tŸÆ_ãmp_èbÀ_size
);

655 
sdisk
->
Õmt_¨øy
 = 
	`sh™n⁄_kzÆloc
((
m≠_èbÀ_°ru˘
Ë* sdisk->
sdev_cou¡
, 
GFP_SHANNON
);

656 i‡(!
sdisk
->
Õmt_¨øy
) {

657 
	`sh™n⁄_îr
("cannotállocateÉnough memory forÜpmt struct.\n");

662 
	`sdisk_m≠_èbÀ_lock_öô
(
sdisk
);

663 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

664 i‡(
	`sh™n⁄_m≠_èbÀ_öô
(&
sdisk
->
Õmt_¨øy
[
i
], sdisk->
tŸÆ_m≠_èbÀ_size
 / sdisk->
sdev_cou¡
 + sdisk->total_map_table_size % sdisk->sdev_count,

665 
sdisk
->
tŸÆ_ãmp_èbÀ_size
 / sdisk->
sdev_cou¡
 + sdisk->total_temp_table_size % sdisk->sdev_count) < 0) {

666 
	`sh™n⁄_îr
("Init map_table_struct failed.\n");

671 
	`Õmt_cdev_öô
(
sdisk
);

672 
	`ãmp_èbÀ_cdev_öô
(
sdisk
);

675 
	}
}

677 
	$sh™n⁄_Æloc_m≠_èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
)

679 
ªt
;

681 i‡(
sh™n⁄_memblock_¥óŒoc
 == 0) {

682 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
m≠_èbÀ_poﬁ
, 
sdisk
->
£˘‹s
, 
logicb_shi·
);

683 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
ãmp_èbÀ_poﬁ
, 
sdisk
->
£˘‹s
, 
logicb_shi·
);

685 
	`sh™n⁄_memblock_poﬁ_add
(&
m≠_èbÀ_poﬁ
, 
sdisk
->
£˘‹s
, 
logicb_shi·
);

686 
	`sh™n⁄_memblock_poﬁ_add
(&
ãmp_èbÀ_poﬁ
, 
sdisk
->
£˘‹s
, 
logicb_shi·
);

688 
sdisk
->
sdev_cou¡
 = 1;

689 
sdisk
->
°rù_size_shi·
 = 0;

690 
sdisk
->
°rù_size
 = 1 << sdisk->
°rù_size_shi·
;

691 i‡((
ªt
 = 
	`__sh™n⁄_Æloc_m≠_èbÀ
(
sdisk
, 
£˘‹s
, 
logicb_shi·
)))

692  
ªt
;

695 
	}
}

697 
	$sh™n⁄_Æloc_m≠_èbÀ_ns
(
sh™n⁄_disk
 *
sdisk
, 
u64
 
£˘‹s
, 
u32
 
logicb_shi·
, u32 
sdev_cou¡
, u32 
°rù_size_shi·
)

699 
sdisk
->
sdev_cou¡
 = sdev_count;

700 
sdisk
->
°rù_size_shi·
 = strip_size_shift;

701 
sdisk
->
°rù_size
 = 1 << 
°rù_size_shi·
;

702  
	`__sh™n⁄_Æloc_m≠_èbÀ
(
sdisk
, 
£˘‹s
, 
logicb_shi·
);

703 
	}
}

705 
	$__sh™n⁄_m≠_èbÀ_‰ì
(
sh™n⁄_disk
 *
sdisk
)

707 
i
;

709 
	`Õmt_cdev_exô
(
sdisk
);

710 
	`ãmp_èbÀ_cdev_exô
(
sdisk
);

712 i‡(
sdisk
->
Õmt_¨øy
) {

713 
i
 = 0; i < 
sdisk
->
sdev_cou¡
; i++) {

714 
	`sh™n⁄_m≠_èbÀ_dißbÀ
(&
sdisk
->
Õmt_¨øy
[
i
]);

715 
	`sh™n⁄_m≠_èbÀ_de°roy
(&
sdisk
->
Õmt_¨øy
[
i
], 0);

717 
	`sh™n⁄_k‰ì
(
sdisk
->
Õmt_¨øy
);

718 
sdisk
->
Õmt_¨øy
 = 
NULL
;

720 
	}
}

722 
	$sh™n⁄_m≠_èbÀ_‰ì
(
sh™n⁄_disk
 *
sdisk
)

724 
	`__sh™n⁄_m≠_èbÀ_‰ì
(
sdisk
);

726 i‡(
sh™n⁄_memblock_¥óŒoc
 == 0) {

727 
	`sh™n⁄_memblock_poﬁ_dec_maxt_by_˙t
(&
m≠_èbÀ_poﬁ
, 
sdisk
->
tŸÆ_m≠_èbÀ_size
 / m≠_èbÀ_poﬁ.
memblock_size
 + \

728 ((
sdisk
->
tŸÆ_m≠_èbÀ_size
 % 
m≠_èbÀ_poﬁ
.
memblock_size
 > 0) ? 1 : 0));

729 
	`sh™n⁄_memblock_poﬁ_dec_maxt_by_˙t
(&
ãmp_èbÀ_poﬁ
, 
sdisk
->
tŸÆ_ãmp_èbÀ_size
 /Åemp_èbÀ_poﬁ.
memblock_size
 + \

730 ((
sdisk
->
tŸÆ_ãmp_èbÀ_size
 % 
ãmp_èbÀ_poﬁ
.
memblock_size
 > 0) ? 1 : 0));

732 
	}
}

733 
	$sh™n⁄_m≠_èbÀ_‰ì_ns
(
sh™n⁄_disk
 *
sdisk
)

735 
	`__sh™n⁄_m≠_èbÀ_‰ì
(
sdisk
);

736 
	}
}

738 
	$mem£t_m≠_èbÀ
(
sˇâî_memblock
 *
m≠_èbÀ
)

740 
	`sh™n⁄_sˇâî_memblock_ª£t
(
m≠_èbÀ
);

741 
	}
}

743 
	$sh™n⁄_m≠_èbÀ_˛ór
(
m≠_èbÀ_°ru˘
 *
Õmt
)

745 
	`mem£t_m≠_èbÀ
(&
Õmt
->
m≠_èbÀ
);

746 
	`mem£t_m≠_èbÀ
(&
Õmt
->
ãmp_èbÀ
);

747 
	`sh™n⁄_mem£t
(
Õmt
->
vÆid_logicbs_¨øy
, 0, (lpmt->valid_logicbs_array));

748 
	}
}

750 
	#LPMT_LUN_PBA_MASK
 (0x03ffffffu)

	)

751 
	#INVALID_PBA
 (0x03ffffffu)

	)

752 
	#LUN_PBA_IS_VALID
(
lun_pba
Ë(÷un_pbaË!
INVALID_PBA
)

	)

757 
	$gë_lun_pba_‰om_lba
(
logicb64_t
 
lba
, 
lun_pba
 *lun_pba, *
ö_ˇche
, 
sh™n⁄_disk
 *
sdisk
)

759 
u32
 
low_pba
;

760 
u8
 
high_pba
;

761 
m≠_èbÀ_°ru˘
 *
Õmt
 = &
sdisk
->
Õmt_¨øy
[
	`gë_m≠_èbÀ_°ru˘_ödex_‰om_lba
(sdisk, 
lba
)];

762 
u64
 
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
);

763 
low_pba
 = 
	`gë_low_pba_‰om_m≠_èbÀ
(
Õmt
, 
¶Ÿ
);

764 
high_pba
 = 
	`gë_high_pba_‰om_ãmp_èbÀ
(
Õmt
, 
¶Ÿ
);

766 
lun_pba
->lun_pb®(
low_pba
 & 
LPMT_LUN_PBA_MASK
);

767 
lun_pba
->
lun
 = ((
high_pba
 & 0xfË<< 6Ë| ((
low_pba
 >> 26) & 0x3f);

769 i‡((
lun_pba
->lun_pb®& 
LPMT_LUN_PBA_MASK
Ë=
INVALID_PBA
) {

770 i‡(
ö_ˇche
)

771 *
ö_ˇche
 = 0;

774 i‡(
ö_ˇche
)

775 *
ö_ˇche
 = 
	`pba_d©a_is_ö_ˇche
(
high_pba
);

778 
	}
}

780 
	$upd©e_m≠pög_èbÀ
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
, 
u32
 
lun
, u32 
lun_pba
)

782 
u32
 
low_pba
;

783 
m≠_èbÀ_°ru˘
 *
Õmt
 = &
sdisk
->
Õmt_¨øy
[
	`gë_m≠_èbÀ_°ru˘_ödex_‰om_lba
(sdisk, 
lba
)];

784 
u64
 
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
);

785 
low_pba
 = 
	`gë_low_pba_‰om_m≠_èbÀ
(
Õmt
, 
¶Ÿ
);

787 i‡(((
low_pba
 & 
LPMT_LUN_PBA_MASK
Ë=
INVALID_PBA
Ë&& (
lun_pba
 != INVALID_PBA))

788 
Õmt
->
vÆid_logicbs_¨øy
[
	`gë_Õmt_lock_ödex
(
¶Ÿ
)]++;

789 i‡(((
low_pba
 & 
LPMT_LUN_PBA_MASK
Ë!
INVALID_PBA
Ë&& (
lun_pba
 == INVALID_PBA))

790 
Õmt
->
vÆid_logicbs_¨øy
[
	`gë_Õmt_lock_ödex
(
¶Ÿ
)]--;

791 
	`m≠_èbÀ_£t_low_pba
(
Õmt
, 
¶Ÿ
, (((
u32
)
lun
 & 0x3fË<< 26Ë| 
lun_pba
);

792 
	`m≠_èbÀ_£t_high_pba
(
Õmt
, 
¶Ÿ
, ((
lun
 >> 6Ë& 0xfË& ~
IN_CACHE_MASK
);

793 
	}
}

795 
u8
 *
	$ãmp_èbÀ_gë_posôi⁄
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
)

797  
	`__ãmp_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

798 
	}
}

800 
u32
 *
	$m≠_èbÀ_gë_posôi⁄
(
m≠_èbÀ_°ru˘
 *
Õmt
, 
u64
 
¶Ÿ
)

803  
	`__m≠_èbÀ_gë_posôi⁄
(
Õmt
, 
¶Ÿ
);

804 
	}
}

806 
	$sdev_m≠_èbÀ_íabÀ
(
sh™n⁄_dev
 *
sdev
)

808 
i
;

809 
sh™n⁄_«me•a˚
 *
ns
;

811 i‡(
sdev
->
•oﬁ
) {

812 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

813 
ns
 = 
sdev
->
•oﬁ
->ns[
i
];

814 i‡(
ns
 !
NULL
)

815 
	`sh™n⁄_m≠_èbÀ_íabÀ
(&
ns
->
sdisk
.
Õmt_¨øy
[
sdev
->
sdev_id
]);

818 
	`sh™n⁄_m≠_èbÀ_íabÀ
(&
sdev
->
sdisk
.
Õmt_¨øy
[0]);

819 
	}
}

821 
	$£t_lba_d©a_ö_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
)

823 
m≠_èbÀ_°ru˘
 *
Õmt
 = &
sdisk
->
Õmt_¨øy
[
	`gë_m≠_èbÀ_°ru˘_ödex_‰om_lba
(sdisk, 
lba
)];

824 
u64
 
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
);

825 
u8
 
high_pba
 = 
	`gë_high_pba_‰om_ãmp_èbÀ
(
Õmt
, 
¶Ÿ
);

827 
	`m≠_èbÀ_£t_high_pba
(
Õmt
, 
¶Ÿ
, 
high_pba
 | 
IN_CACHE_MASK
);

828 
	}
}

830 
	$˛ór_lba_d©a_ö_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
logicb64_t
 
lba
)

832 
m≠_èbÀ_°ru˘
 *
Õmt
 = &
sdisk
->
Õmt_¨øy
[
	`gë_m≠_èbÀ_°ru˘_ödex_‰om_lba
(sdisk, 
lba
)];

833 
u64
 
¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
);

834 
u8
 
high_pba
 = 
	`gë_high_pba_‰om_ãmp_èbÀ
(
Õmt
, 
¶Ÿ
);

836 
	`m≠_èbÀ_£t_high_pba
(
Õmt
, 
¶Ÿ
, 
high_pba
 & ~
IN_CACHE_MASK
);

837 
	}
}

	@shannon_mbr.h

10 #i‚de‡
__SHANNON_MBR_H


11 
	#__SHANNON_MBR_H


	)

13 
	~<löux/ty≥s.h
>

15 
	#MBR_WATERMARK
 0xa5a5a5a5

	)

16 
	#POOL_INFO_METADATA
 0x53535353

	)

17 
	#MBR_LOGICB_SHIFT
 9

	)

19 
	#SHANNON_MBR_SIZE
 512

	)

20 
	#LUN_REFRESH_MBR_THRESHOLD
 100

	)

22 
	#CURRENT_MBR_FORMAT_VERSION
 0x5430

	)

23 
	#MBR_ID_SIZE
 32

	)

24 
	ssh™n⁄_mbr
 {

25 
	mid
[
MBR_ID_SIZE
];

26 
__u64
 
	mmbr_f‹m©_vîsi⁄
;

27 
__u64
 
	mh¨dw¨e_vîsi⁄
;

28 
__u64
 
	mso·w¨e_vîsi⁄
;

29 
__u64
 
	m«nd_m™uÁ˘uª
;

30 
__u64
 
	m«nd_id
;

31 
__u64
 
	mˇ∑côy
;

33 
__u32
 
	mlun_amou¡
;

34 
__u32
 
	meblocks_ö_lun
;

35 
__u32
 
	m∑ges_ö_eblock
;

36 
__u32
 
	m«nd_∑ge_shi·
;

37 
__u32
 
	moob_size
;

38 
__u32
 
	mlogicb_shi·
;

39 
__u32
 
	m∂™e_‹dî
;

40 
__u32
 
	mcfg_ch™√ls
;

41 
__u32
 
	mcfg_lun£t_ö_ch™√l
;

42 
__u32
 
	mcfg_lun_ö_lun£t
;

44 
__u32
 
	möô_hŸ_sblk
;

45 
__u32
 
	möô_cﬁd_sblk
;

47 
__u16
 
	möãºu±_dñay
;

48 
__u8
 
	mecc_codew‹ds_ö_logicb
;

49 
__u8
 
	mecc_c‹ª˘i⁄_powî
;

50 
__u32
 
	mhi°‹y_îa£_cou¡
;

52 
__u64
 
	mpowî_cy˛e_cou¡
;

53 
__u64
 
	mpowî_⁄_£c⁄ds
;

54 
__u64
 
	mho°_wrôe_£˘‹s
;

55 
__u64
 
	mtŸÆ_wrôe_£˘‹s
;

56 
__u64
 
	mho°_ªad_£˘‹s
;

58 
__u32
 
	mÊash_drvmode
;

59 
__u8
 
	mluns_≥r_˚_mask
;

60 
__u8
 
	mlun_m≠_mode
;

61 
__u16
 
	møid_°rùes
;

63 
	#BAD_LUN_MAP_ARRAY_SIZE
 8

	)

64 
__u64
 
	mbad_phy_lun_m≠
[
BAD_LUN_MAP_ARRAY_SIZE
];

65 
__u32
 
	mmax_∑ges_ö_eblock
;

66 
__u32
 
	mu£r_logicb_shi·
;

67 
	#PRIORITIZE_WRITE
 0x0001UL

	)

68 
	#ATOMIC_WRITE
 0x0002UL

	)

69 
	#BIG_EPILOG
 0x0004UL

	)

70 
	#COMPACT_EPILOG
 0x0008UL

	)

71 
	#SNAP_READ_ENABLE
 0x0010UL

	)

72 
	#LIMIT_BW_WHEN_DISKFULL
 0x0020UL

	)

73 
	#VENDOR_MODE_CMD_ENABLE
 0x0040UL

	)

74 
	#SINGLE_HEAD_ENABLE
 0x0080UL

	)

75 
	#SLC_ENABLE
 0x0100UL

	)

76 
	#OVERLAP_WRITE
 0x0200UL

	)

77 
	#FAST_READ_ENABLE
 0x0400UL

	)

78 
__u64
 
	m„©uª_Êags
;

79 
__u8
 
	mpowî_budgë
;

81 
__u8
 
	mdma_max_ªad_limô
;

82 
	#CLK_200M
 0x5

	)

83 
	#CLK_166M
 0x6

	)

84 
__u16
 
	m˛k
;

85 
__u32
 
	mmax_out°™dög_bios
;

87 
__u32
 
	mmbr_upd©e
;

89 
__u8
 
	mãmp_thªshﬁd1
;

90 
__u8
 
	mãmp_¸ôiˇl_thªshﬁd1
;

92 
__u8
 
	mãmp_thªshﬁd2
;

93 
__u8
 
	mãmp_¸ôiˇl_thªshﬁd2
;

95 
__u64
 
	mpoﬁ_w©îm¨k
;

96 
__u16
 
	msdev_id
;

97 
__u16
 
	msdev_cou¡
;

99 
__u16
 
	msh¨ed_∑ges
;

100 
__u8
 
	mp£udo_∂™e
;

101 
__u8
 
	m∂™e_cou¡
;

103 
__u32
 
	m≥riod_ªad_≥riod
;

104 
__u32
 
	m≥riod_ªad_µa
;

106 
__u32
 
	mdummy_w‹dlöe
;

107 
__u16
 
	mmax_kìp_îa£d_hours
;

108 
__u16
 
	mªad_ªåy
;

109 
__u16
 
	mecc_Áûuª_øã_thªshﬁd
;

110 
__u16
 
	mmax_wrôe_bw
;

111 
__u16
 
	md©a_ªã¡i⁄_öãrvÆ
;

112 
__u8
 
	mµa_∑ge_width
;

113 
__u8
 
	mµa_∂™e_width
;

114 
__u32
 
	m˝s_vîsi⁄
;

116 
__u32
 
	movîœp_sblk
;

117 
__u32
 
	m≥_cy˛e
;

118 
__u8
 
	mª£rved
[180];

121 
	#SHANNON_NS_NUM
 1000

	)

122 
	#PRIORITY_LEVELS
 3

	)

128 
	#ns_©åi1_£˘‹s
(
ns_©åi
Ë(“s_©åi)>>24)

	)

129 
	#ns_©åi1_max_i›s
(
ns_©åi
Ë(“s_©åi)&((1UL<<24)-1))

	)

130 
	#make_ns_©åi1
(
size
, 
max_i›s
Ë(((size)<<24Ë| (max_i›s))

	)

138 
	#SEQ_NUM_SHIFT
 0

	)

139 
	#SEQ_NUM_MASK
 0x3FF

	)

140 
	#PRIORITY_SHIFT
 10

	)

141 
	#PRIORITY_MASK
 0xF

	)

142 
	#BLOCKSHIFT_SHIFT
 14

	)

143 
	#BLOCKSHIFT_MASK
 0xF

	)

144 
	#ns_©åi2_£q_num
(
ns_©åi2
Ë((“s_©åi2Ë>> 
SEQ_NUM_SHIFT
Ë& 
SEQ_NUM_MASK
)

	)

145 
	#ns_©åi2_¥i‹ôy
(
ns_©åi2
Ë((“s_©åi2Ë>> 
PRIORITY_SHIFT
Ë& 
PRIORITY_MASK
)

	)

146 
	#ns_©åi2_blockshi·
(
ns_©åi2
Ë((“s_©åi2Ë>> 
BLOCKSHIFT_SHIFT
Ë& 
BLOCKSHIFT_MASK
)

	)

147 
	#make_ns_©åi2
(
¥i‹ôy
, 
£q_num
, 
blockshi·
Ë((((£q_numË& 
SEQ_NUM_MASK
Ë<< 
SEQ_NUM_SHIFT
) | \

148 (((
¥i‹ôy
Ë& 
PRIORITY_MASK
Ë<< 
PRIORITY_SHIFT
) | \

149 (((
blockshi·
Ë& 
BLOCKSHIFT_MASK
Ë<< 
BLOCKSHIFT_SHIFT
))

	)

151 
	#POOL_INFO_LUNS
 32

	)

153 
	ssh™n⁄_poﬁ_öfo
 {

154 
__u32
 
	mf‹m©_vîsi⁄
;

155 
__u32
 
	mupd©e_cou¡
;

156 
__u16
 
	mcur_ns_£q_num
;

157 
__u16
 
	m∑d
[3];

158 
__u64
 
	mavaûabÀ_ˇ∑côy
;

159 
__u64
 
	mª£rved
[29];

160 
__u64
 
	mns_bôm≠
[16];

161 
__u64
 
	mns_©åi1
[
SHANNON_NS_NUM
];

162 
__u32
 
	mns_©åi2
[
SHANNON_NS_NUM
];

163 
__u32
 
	mns_©åi3
[
SHANNON_NS_NUM
];

	@shannon_memblock.h

10 #i‚de‡
__SHANNON_MEMBLOCK_H


11 
	#__SHANNON_MEMBLOCK_H


	)

13 
	~<löux/ty≥s.h
>

14 
	#MAP_TABLE
 (0x1)

	)

15 
	#TEMP_TABLE
 (0x2)

	)

16 
	#MAP_TABLE_MEMBLOCK_SIZE_SHIFT
 (22)

17 
	#TEMP_TABLE_MEMBLOCK_SIZE_SHIFT
 (20)

18 
	#MAP_TABLE_ENTRY_SIZE
 ((
u32
))

	)

19 
	#TEMP_TABLE_ENTRY_SIZE
 ((
u8
))

	)

22 
	#gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
lba
) ({ \

23 
u64
 
__¶Ÿ
; \

24 
u32
 
_°rù_size
 = (
sdisk
)->
°rù_size
 * (sdisk)->
sdev_cou¡
; \

25 i‡((
sdisk
)->
sdev_cou¡
 == 1) \

26 
__¶Ÿ
 = (
lba
); \

27 i‡((
_°rù_size
 & (_strip_size - 1)) == 0) \

28 
__¶Ÿ
 = (((
lba
Ë>> 
	`föd_fú°_bô
((*)&
_°rù_size
, (
u32
))Ë<< (
sdisk
)->
°rù_size_shi·
Ë+ (÷baË& ((sdisk)->
°rù_size
 - 1)); \

30 
__¶Ÿ
 = (((((
lba
Ë/ ((
sdisk
)->
°rù_size
 * (sdisk)->
sdev_cou¡
)Ë<< (sdisk)->
°rù_size_shi·
)) + ((lba) & ((sdisk)->strip_size - 1))); \

32 
__¶Ÿ
; \

33 })

	)

34 
	#gë_lba_‰om_Õmt_¶Ÿ
(
sdev
, 
sdisk
, 
¶Ÿ
Ë(((¶ŸË>> (sdisk)->
°rù_size_shi·
Ë* ((sdisk)->
°rù_size
 * (sdisk)->
sdev_cou¡
) + \

35 ((
¶Ÿ
Ë& ((
sdisk
)->
°rù_size
 - 1)Ë+ (
sdev
)->
sdev_id
 * (sdisk)->°rù_size)

	)

37 
	#LPMT_INVALID
 (~0x0u)

	)

38 
	ssh™n⁄_memblock_poﬁ
 {

39 
u32
 
	mmemblock_size
;

40 
u32
 
	míåy_size
;

41 
	#DEFAULT_MIN_THRESHOLD
 (30)

	)

42 
sh™n⁄_©omic_t
 
	mmö_thªshﬁd
;

43 
sh™n⁄_©omic_t
 
	mmax_thªshﬁd
;

44 
sh™n⁄_©omic_t
 
	m‰ì_˙t
;

45 
sh™n⁄_©omic_t
 
	mu£d_˙t
;

46 
sh™n⁄_w‹k_°ru˘
 
	mÆloc_w‹k
;

47 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	mmemblock_wq
;

49 
sh™n⁄_•ölock_t
 
	mli°_lock
;

50 
u8
 *
	mœ°
;

51 
u8
 *
	m‰ì_li°
;

54 
	ssˇâî_memblock
 {

55 
u64
 
	mtŸÆ_size
;

56 
u64
 
	mmemblock_size
;

57 
u32
 
	mmemblock_size_shi·
;

58 
u32
 
	míåy_size
;

59 
u32
 
	míåys_≥r_memblock
;

60 
u32
 
	mmemblock_cou¡
;

61 
	#MEMBLOCK_LOCK_CNT
 (16)

62 
sh™n⁄_muãx_t
 
li°_lock
[
MEMBLOCK_LOCK_CNT
];

	)

64 
u8
 **
	mmemblock_li°
;

66 
sh™n⁄_memblock_poﬁ
 *
	mmpoﬁ
;

69 
check_™d_Æloc_memblock
(
sˇâî_memblock
 *
smb
, 
logicb64_t
 
off£t
);

	@shannon_microcode.c

1 
u32
 
	gmi¸⁄_19_mi¸ocode_èbÀ
[] = {

93 
u32
 
	gtoshiba_a19_mi¸ocode_èbÀ
[] = {

282 
u32
 
	gtoshiba_a19_128gb_mi¸ocode_èbÀ
[] = {

471 
u32
 
	gtoshiba_19_mi¸ocode_èbÀ
[] = {

574 
u32
 
	gtoshiba_15_mi¸ocode_èbÀ
[] = {

760 
u32
 
	gßndisk_15_mi¸ocode_èbÀ
[] = {

1142 
	$wrôe_adv™˚d_ªad_mi¸ocode
(
sh™n⁄_dev
 *
sdev
, 
num
)

1144 
i
;

1145 
u32
 *
èbÀ
 = (u32 *)
sdev
->
mi¸ocode_¨øy
[
num
].table;

1146 
¨øy_size
 = 
sdev
->
mi¸ocode_¨øy
[
num
].
mi¸ocode_Àngth
;

1148 i‡((
num
 < 0Ë|| (num >
MICROCODE_ARRAY_SIZE
))

1151 
	`BUG_ON
(!(
sdev
->
mi¸ocode_¨øy
[
num
].
°©e
 & 
MICROCODE_VALID_MASK
));

1152 
	`BUG_ON
(
sdev
->
mi¸ocode_¨øy
[
num
].
°¨t_ªg
 == -1);

1153 
	`BUG_ON
((
sdev
->
mi¸ocode_¨øy
[
num
].
≥_cy˛e
 =0Ë&& 
	`sh™n⁄_dev_is_g5
(sdev));

1155 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

1157 i‡(
sdev
->
mi¸ocode_¨øy
[
num
].
°©e
 & 
MICROCODE_IN_USE_MASK
)

1158 
out
;

1160 
	`sh™n⁄_öfo
("%s: upd©ög mi¸ocodêèbÀ,áºay index=%d.\n", 
sdev
->
cdev_«me
, 
num
);

1161 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

1162 
i
 = 0; i < 
¨øy_size
; i++) {

1163 
	`sh™n⁄_iowrôe32
(
èbÀ
[
i
], (
u32
 *)
sdev
->
b¨
 + sdev->
mi¸ocode_¨øy
[
num
].
°¨t_ªg
 + i);

1164 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
Ë&& ((
i
 % 8) == 7)) {

1165 i‡(
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + sdev->
mi¸ocode_¨øy
[
num
].
°¨t_ªg
 + 
i
Ë!
èbÀ
[i])

1169 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

1171 i‡(
i
 !
¨øy_size
) {

1172 
	`sh™n⁄_îr
("update microcode failed.\n");

1173 
out
;

1176 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++) {

1177 i‡(
i
 =
num
) {

1178 
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 |
MICROCODE_IN_USE_MASK
;

1179 
sdev
->
cuºít_mi¸ocode_ödex
 = 
num
;

1181 
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 &~
MICROCODE_IN_USE_MASK
;

1184 
out
:

1185 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

1186 
	}
}

1188 
	$˛ón_Æl_mi¸ocode_u£d_°©e
(
sh™n⁄_dev
 *
sdev
)

1190 
i
;

1192 
sdev
->
cuºít_mi¸ocode_ödex
 = -1;

1193 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++)

1194 
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 &~
MICROCODE_IN_USE_MASK
;

1195 
	}
}

	@shannon_module_init.c

1 
	~<löux/fs.h
>

2 
	~<löux/bio.h
>

3 
	~<löux/öãºu±.h
>

4 
	~<löux/blkdev.h
>

5 
	~<löux/î∫o.h
>

6 
	~<löux/gíhd.h
>

7 
	~<löux/kdev_t.h
>

8 
	~<löux/kthªad.h
>

9 
	~<löux/kî√l.h
>

10 
	~<löux/moduÀ.h
>

11 
	~<löux/moduÀ∑øm.h
>

12 
	~<löux/pci.h
>

13 
	~<löux/sched.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<löux/vîsi⁄.h
>

16 
	~<löux/time.h
>

17 
	~<löux/com∂ëi⁄.h
>

18 
	~<löux/øndom.h
>

19 
	~<löux/cdev.h
>

20 
	~<löux/miscdevi˚.h
>

22 
	~<löux/f˙é.h
>

23 
	~<löux/hdªg.h
>

25 
	~<löux/˝u.h
>

26 
	~<asm/¥o˚ss‹.h
>

28 
	~"sh™n⁄_p‹t.h
"

30 
	#SHANNON_CTRL_MINORS
 64

	)

32 
	gsh™n⁄_scsi_mode
 = 0;

33 
moduÀ_∑øm
(
sh™n⁄_scsi_mode
, , 
S_IRUGO
|
S_IWUSR
);

35 
	gsh™n⁄_dev
;

36 
	gsh™n⁄_memblock_poﬁ
;

37 
sh™n⁄_memblock_poﬁ
 
m≠_èbÀ_poﬁ
;

38 
sh™n⁄_memblock_poﬁ
 
ãmp_èbÀ_poﬁ
;

39 
sh™n⁄_memblock_poﬁ_öô
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
, 
u32
 
memblock_size
, u32 
íåy_size
);

40 
sh™n⁄_memblock_poﬁ_de°roy
(
sh™n⁄_memblock_poﬁ
 *
mpoﬁ
);

41 
u64
 
gë_sh™n⁄_dev_£˘‹s
(
sh™n⁄_dev
 *
dev
);

42 
u64
 
gë_sh™n⁄_ns_£˘‹s
(
sh™n⁄_«me•a˚
 *
ns
);

43 
sh_ö¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
);

44 
sh_de¸ó£_u£rs
(
sh™n⁄_dev
 *
dev
);

45 
sh_ö¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *);

46 
sh_de¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *);

48 
sh™n⁄_li°_hód
 
	gsh™n⁄_dev_li°
;

49 
sh™n⁄_•ölock_t
 
devi˚_bôm≠_lock
;

50 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	gsh™n⁄_≥r˝u_wq
 = 
NULL
;

52 
sh™n⁄_li°_hód
 
sh™n⁄_poﬁ_li°
;

53 
sh™n⁄_muãx_t
 
poﬁ_£m
;

54 
	gsh™n⁄_poﬁ
;

55 
sh™n⁄_poﬁ
 *
•oﬁ_gë_ª„ªn˚
(shannon_pool *);

56 
•oﬁ_put_ª„ªn˚
(
sh™n⁄_poﬁ
 *);

59 
	$sh™n⁄_ªvÆid©e
(
gídisk
 *
disk
)

61 
sh™n⁄_dev
 *
dev
 = 
disk
->
¥iv©e_d©a
;

62 
	`£t_ˇ∑côy
(
disk
, 
	`gë_sh™n⁄_dev_£˘‹s
(
dev
));

64 
	}
}

66 
	$sh™n⁄_gëgeo
(
block_devi˚
 *
bdev
, 
hd_geomëry
 *
geo
)

68 
sh™n⁄_dev
 *
dev
 = 
bdev
->
bd_disk
->
¥iv©e_d©a
;

75 
geo
->
hóds
 = 32;

76 
geo
->
£˘‹s
 = 32;

77 
geo
->
cylödîs
 = 
	`gë_sh™n⁄_dev_£˘‹s
(
dev
Ë/ (geo->
hóds
 * geo->
£˘‹s
);

79 
	}
}

81 
	$sh™n⁄_ªvÆid©e_ns
(
gídisk
 *
disk
)

83 
sh™n⁄_«me•a˚
 *
ns
 = 
disk
->
¥iv©e_d©a
;

84 
	`£t_ˇ∑côy
(
disk
, 
	`gë_sh™n⁄_ns_£˘‹s
(
ns
));

86 
	}
}

88 
	$sh™n⁄_gëgeo_ns
(
block_devi˚
 *
bdev
, 
hd_geomëry
 *
geo
)

90 
sh™n⁄_«me•a˚
 *
ns
 = 
bdev
->
bd_disk
->
¥iv©e_d©a
;

97 
geo
->
hóds
 = 32;

98 
geo
->
£˘‹s
 = 32;

99 
geo
->
cylödîs
 = 
	`gë_sh™n⁄_ns_£˘‹s
(
ns
Ë/ (geo->
hóds
 * geo->
£˘‹s
);

101 
	}
}

103 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 28)

105 
	$sh™n⁄_›í
(
block_devi˚
 *
bdev
, 
fmode_t
 
mode
)

107 
sh™n⁄_dev
 *
dev
 = 
bdev
->
bd_disk
->
¥iv©e_d©a
;

108  
	`sh_ö¸ó£_u£rs
(
dev
);

109 
	}
}

111 
	$sh™n⁄_›í_ns
(
block_devi˚
 *
bdev
, 
fmode_t
 
mode
)

113 
sh™n⁄_«me•a˚
 *
ns
 = 
bdev
->
bd_disk
->
¥iv©e_d©a
;

114  
	`sh_ö¸ó£_u£rs_ns
(
ns
);

115 
	}
}

117 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 10, 0)

118 
	$sh™n⁄_ªÀa£
(
gídisk
 *
gd
, 
fmode_t
 
mode
)

120 
sh™n⁄_dev
 *
dev
 = 
gd
->
¥iv©e_d©a
;

121 
	`sh_de¸ó£_u£rs
(
dev
);

122 
	}
}

124 
	$sh™n⁄_ªÀa£_ns
(
gídisk
 *
gd
, 
fmode_t
 
mode
)

126 
sh™n⁄_«me•a˚
 *
ns
 = 
gd
->
¥iv©e_d©a
;

127 
	`sh_de¸ó£_u£rs_ns
(
ns
);

128 
	}
}

130 
	$sh™n⁄_ªÀa£
(
gídisk
 *
gd
, 
fmode_t
 
mode
)

132 
sh™n⁄_dev
 *
dev
 = 
gd
->
¥iv©e_d©a
;

133 
	`sh_de¸ó£_u£rs
(
dev
);

135 
	}
}

137 
	$sh™n⁄_ªÀa£_ns
(
gídisk
 *
gd
, 
fmode_t
 
mode
)

139 
sh™n⁄_«me•a˚
 *
ns
 = 
gd
->
¥iv©e_d©a
;

140 
	`sh_de¸ó£_u£rs_ns
(
ns
);

142 
	}
}

145 
block_devi˚_›î©i⁄s
 
	gsh™n⁄_›s
 = {

146 .
ow√r
 = 
THIS_MODULE
,

147 .
	ggëgeo
 = 
sh™n⁄_gëgeo
,

148 .
	gªvÆid©e_disk
 = 
sh™n⁄_ªvÆid©e
,

149 .
	g›í
 = 
sh™n⁄_›í
,

150 .
	gªÀa£
 = 
sh™n⁄_ªÀa£
,

155 
	$sh™n⁄_›í
(
öode
 *öode, 
fûe
 *
fûp
)

157 
sh™n⁄_dev
 *
dev
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

158  
	`sh_ö¸ó£_u£rs
(
dev
);

159 
	}
}

161 
	$sh™n⁄_›í_ns
(
öode
 *öode, 
fûe
 *
fûp
)

163 
sh™n⁄_«me•a˚
 *
ns
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

164  
	`sh_ö¸ó£_u£rs_ns
(
ns
);

165 
	}
}

167 
	$sh™n⁄_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

169 
sh™n⁄_dev
 *
dev
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

170 
	`sh_de¸ó£_u£rs
(
dev
);

172 
	}
}

174 
	$sh™n⁄_ªÀa£_ns
(
öode
 *öode, 
fûe
 *
fûp
)

176 
sh™n⁄_«me•a˚
 *
ns
 = 
öode
->
i_bdev
->
bd_disk
->
¥iv©e_d©a
;

177 
	`sh_de¸ó£_u£rs_ns
(
ns
);

179 
	}
}

181 
block_devi˚_›î©i⁄s
 
	gsh™n⁄_›s
 = {

182 .
ow√r
 = 
THIS_MODULE
,

183 .
	ggëgeo
 = 
sh™n⁄_gëgeo
,

184 .
	gªvÆid©e_disk
 = 
sh™n⁄_ªvÆid©e
,

185 .
	g›í
 = 
sh™n⁄_›í
,

186 .
	gªÀa£
 = 
sh™n⁄_ªÀa£
,

191 
block_devi˚_›î©i⁄s
 
	gsh™n⁄_›s_ns
 = {

192 .
ow√r
 = 
THIS_MODULE
,

193 .
	ggëgeo
 = 
sh™n⁄_gëgeo_ns
,

194 .
	gªvÆid©e_disk
 = 
sh™n⁄_ªvÆid©e_ns
,

195 .
	g›í
 = 
sh™n⁄_›í_ns
,

196 .
	gªÀa£
 = 
sh™n⁄_ªÀa£_ns
,

200 
	$sh™n⁄_˘æ_miscdevi˚_›í
(
öode
 *öode, 
fûe
 *
fûp
)

202 
sh™n⁄_dev
 *
sdev
 = 
NULL
;

203 
mö‹
 = 
	`imö‹
(
öode
);

204 
miscdevi˚
 *
c
 = 
NULL
;

205 
sh™n⁄_li°_hód
 *
li°
;

207 
	`sh™n⁄_•ö_lock_bh
(&
devi˚_bôm≠_lock
);

209 
	`sh™n⁄_li°_f‹_óch
(
li°
, &
sh™n⁄_dev_li°
) {

210 
sdev
 = 
	`gë_sh™n⁄_dev_‰om_li°
(
li°
);

211 
c
 = (
miscdevi˚
 *)
	`gë_miscdevi˚_‰om_sh™n⁄_dev
(
sdev
);

212 i‡(
c
->
mö‹
 == minor)

216 
	`sh™n⁄_•ö_u∆ock_bh
(&
devi˚_bôm≠_lock
);

218 i‡((
c
 =
NULL
Ë|| (c->
mö‹
 != minor)) {

219 
fûp
->
¥iv©e_d©a
 = 
NULL
;

220  -
ENODEV
;

222 
fûp
->
¥iv©e_d©a
 = 
sdev
;

225 
	}
}

227 
	$sh™n⁄_˘æ_miscdevi˚_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

230 
	}
}

232 
sh™n⁄_io˘l
(
sh™n⁄_fûe_t
 *
fûp
, 
cmd
, 
¨g
);

234 
	$sh™n⁄_io˘l_wøµî
(
fûe
 *
fûp
, 
cmd
, 
¨g
)

236  
	`sh™n⁄_io˘l
(
fûp
, 
cmd
, 
¨g
);

237 
	}
}

239 
fûe_›î©i⁄s
 
	gsh™n⁄_˘æ_miscdevi˚_f›s
 = {

240 .
ow√r
 = 
THIS_MODULE
,

241 .
	g›í
 = 
sh™n⁄_˘æ_miscdevi˚_›í
,

242 .
	gªÀa£
 = 
sh™n⁄_˘æ_miscdevi˚_ªÀa£
,

243 .
	gu∆ocked_io˘l
 = 
sh™n⁄_io˘l_wøµî
,

247 
	$miscdevi˚_öô
(
miscdevi˚
 *
md
, *
cdev_«me
)

249 
	`mem£t
(
md
, 0, (*md));

250 
md
->
mö‹
 = 
MISC_DYNAMIC_MINOR
;

251 
md
->
«me
 = 
cdev_«me
;

252 
md
->
f›s
 = &
sh™n⁄_˘æ_miscdevi˚_f›s
;

253 
	}
}

255 
	$sh™n⁄_poﬁ_miscdevi˚_›í
(
öode
 *öode, 
fûe
 *
fûp
)

257 *
•oﬁ
 = 
NULL
;

258 
mö‹
 = 
	`imö‹
(
öode
);

259 
miscdevi˚
 *
c
 = 
NULL
;

260 
sh™n⁄_li°_hód
 *
li°
;

262 
	`sh™n⁄_muãx_lock
(&
poﬁ_£m
);

263 
	`sh™n⁄_li°_f‹_óch
(
li°
, &
sh™n⁄_poﬁ_li°
) {

264 
•oﬁ
 = 
	`gë_sh™n⁄_poﬁ_‰om_li°
(
li°
);

265 
c
 = (
miscdevi˚
 *)
	`gë_miscdevi˚_‰om_sh™n⁄_poﬁ
(
•oﬁ
);

266 i‡(
c
->
mö‹
 == minor) {

267 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(spool);

271 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

273 i‡((
c
 =
NULL
Ë|| (c->
mö‹
 != minor)) {

274 
fûp
->
¥iv©e_d©a
 = 
NULL
;

275  -
ENODEV
;

277 
fûp
->
¥iv©e_d©a
 = 
•oﬁ
;

280 
	}
}

282 
	$sh™n⁄_poﬁ_miscdevi˚_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

284 *
•oﬁ
 = 
fûp
->
¥iv©e_d©a
;

285 
	`•oﬁ_put_ª„ªn˚
(
•oﬁ
);

287 
	}
}

289 
sh™n⁄_poﬁ_io˘l
(
sh™n⁄_fûe_t
 *
fûp
, 
cmd
, 
¨g
);

290 
	$sh™n⁄_poﬁ_io˘l_wøµî
(
fûe
 *
fûp
, 
cmd
, 
¨g
)

292  
	`sh™n⁄_poﬁ_io˘l
(
fûp
, 
cmd
, 
¨g
);

293 
	}
}

295 
fûe_›î©i⁄s
 
	gsh™n⁄_poﬁ_miscdevi˚_f›s
 = {

296 .
ow√r
 = 
THIS_MODULE
,

297 .
	g›í
 = 
sh™n⁄_poﬁ_miscdevi˚_›í
,

298 .
	gªÀa£
 = 
sh™n⁄_poﬁ_miscdevi˚_ªÀa£
,

299 .
	gu∆ocked_io˘l
 = 
sh™n⁄_poﬁ_io˘l_wøµî
,

302 
	$poﬁ_miscdevi˚_öô
(
miscdevi˚
 *
md
, *
cdev_«me
, *
nodíame
)

304 
	`mem£t
(
md
, 0, (*md));

305 
md
->
mö‹
 = 
MISC_DYNAMIC_MINOR
;

306 
md
->
«me
 = 
cdev_«me
;

307 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

308 
md
->
nodíame
 =Çodename;

310 
md
->
f›s
 = &
sh™n⁄_poﬁ_miscdevi˚_f›s
;

311 
	}
}

313 
	$sh™n⁄_¸óã_miscdevi˚
(*
misc_dev
, *
cdev_«me
, *
nodíame
, 
ty≥
)

315 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
misc_dev
;

316 
ªt
;

317 #i‡
	`deföed
(
__VMKLNX__
)

318 
mö‹
=254;

321 i‡(
ty≥
 =
FOR_SDEV
)

322 
	`miscdevi˚_öô
(
misc
, 
cdev_«me
);

324 
	`poﬁ_miscdevi˚_öô
(
misc
, 
cdev_«me
, 
nodíame
);

326 #i‡
	`deföed
(
__VMKLNX__
)

329 
misc
->
mö‹
 = minor--;

331 
ªt
 = 
	`misc_ªgi°î
(
misc
);

332 #i‡
	`deföed
(
__VMKLNX__
)

334 
ªt
 < 0 && 
mö‹
 > 0);

337  
ªt
;

338 
	}
}

340 
	$sh™n⁄_de°roy_miscdevi˚
(*
misc_dev
)

342 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
misc_dev
;

344 
	`misc_dîegi°î
(
misc
);

347 
	}
}

350 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 20)

351 
	#DEFINE_PCI_DEVICE_TABLE
(
_èbÀ
) \

352 c⁄° 
pci_devi˚_id
 
_èbÀ
[] 
__devöôd©a


	)

355 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 8, 0)

356 
	#DEFINE_PCI_DEVICE_TABLE
(
_èbÀ
) \

357 c⁄° 
pci_devi˚_id
 
_èbÀ
[]

	)

362 
	#PCI_VENDOR_ID_SHANNON
 0x1cb0

	)

364 
pci_devi˚_id
 
	gsh™n⁄_id_èbÀ
[] = {

365 #i‡!
deföed
(
CONFIG_SHANNON_EMU
Ë&& !deföed(
CONFIG_SHANNON_EMU_MODULE
)

367 { 
PCI_DEVICE
(
PCI_VENDOR_ID_XILINX
, 0x6024), },

368 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x0265), },

369 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x0275), },

370 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x1275), },

371 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x2275), },

372 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x1285), },

373 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x3275), },

374 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x05a5), },

375 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x25a5), },

376 { 
PCI_DEVICE
(
PCI_VENDOR_ID_SHANNON
, 0x35a5), },

378 { 
PCI_DEVICE
(
PCI_VENDOR_ID_NVIDIA
, 0x0774), },

379 { 
PCI_DEVICE
(0x8086, 0x27d8), },

380 { 
PCI_DEVICE
(0x8086, 0x1c20), },

381 { 
PCI_DEVICE
(0x1013, 0x00b8), },

385 
MODULE_DEVICE_TABLE
(
pci
, 
sh™n⁄_id_èbÀ
);

387 
sh™n⁄_scsi_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
id
);

388 
sh™n⁄_scsi_ªmove
(
pci_dev
 *
pdev
);

389 
sh™n⁄_ªmove
(*
d©a
, 
sh™n⁄_pci_dev_t
 *
pdev
);

390 
sh™n⁄_¥obe
(
sh™n⁄_pci_dev_t
 *
pdev
, c⁄° 
sh™n⁄_pci_devi˚_id_t
 *
id
, 
sh™n⁄_scsi_¥iv©e
 *
d©a
);

391 
__sh™n⁄_pci_ª£t_¥ï¨e
(
sh™n⁄_pci_dev_t
 *
pdev
);

392 
__sh™n⁄_pci_ª£t_föished
(
sh™n⁄_pci_dev_t
 *
pdev
);

394 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 8, 0)

395 
	$sh™n⁄_ªmove_wøµî
(
pci_dev
 *
pdev
)

397 
__devexô
 
	$sh™n⁄_ªmove_wøµî
(
pci_dev
 *
pdev
)

400 i‡(
sh™n⁄_scsi_mode
)

401 
	`sh™n⁄_scsi_ªmove
(
pdev
);

403 
	`sh™n⁄_ªmove
(
NULL
, 
pdev
);

404 
	}
}

406 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 8, 0)

407 
	$sh™n⁄_¥obe_wøµî
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
id
)

409 
__devöô
 
	$sh™n⁄_¥obe_wøµî
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
id
)

412 i‡(
sh™n⁄_scsi_mode
)

413  
	`sh™n⁄_scsi_¥obe
(
pdev
, 
id
);

415  
	`sh™n⁄_¥obe
(
pdev
, 
id
, 
NULL
);

416 
	}
}

418 
	$sh™n⁄_pci_ª£t_¥ï¨e
(
pci_dev
 *
pdev
)

420 
	`__sh™n⁄_pci_ª£t_¥ï¨e
((
sh™n⁄_pci_dev_t
 *)
pdev
);

421 
	}
}

423 
	$sh™n⁄_pci_ª£t_föished
(
pci_dev
 *
pdev
)

425 
	`__sh™n⁄_pci_ª£t_föished
((
sh™n⁄_pci_dev_t
 *)
pdev
);

426 
	}
}

428 
	$sh™n⁄_pci_ª£t_nŸify
(
pci_dev
 *
pdev
, 
boﬁ
 
¥ï¨e
)

430 i‡(
¥ï¨e
)

431 
	`sh™n⁄_pci_ª£t_¥ï¨e
(
pdev
);

433 
	`sh™n⁄_pci_ª£t_föished
(
pdev
);

434 
	}
}

436 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 13, 0)

437 
pci_îr‹_h™dÀrs
 
	gsh™n⁄_pci_îr‹_h™dÀrs
 = {

438 .
ª£t_¥ï¨e
 = 
sh™n⁄_pci_ª£t_¥ï¨e
,

439 .
	gª£t_d⁄e
 = 
sh™n⁄_pci_ª£t_föished
,

441 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 16, 0)

442 
pci_îr‹_h™dÀrs
 
	gsh™n⁄_pci_îr‹_h™dÀrs
 = {

443 .
ª£t_nŸify
 = 
sh™n⁄_pci_ª£t_nŸify
,

446 #ifde‡
RHEL_RELEASE_CODE


447 #i‡
RHEL_RELEASE_CODE
 >
RHEL_RELEASE_VERSION
(7, 2)

448 
pci_drivî_rh
 
	gsh™n⁄_pci_drivî_rh
 = {

449 .
size
 = (
pci_drivî_rh
),

450 .
	gª£t_nŸify
 = 
sh™n⁄_pci_ª£t_nŸify
,

454 
pci_îr‹_h™dÀrs
 
	gsh™n⁄_pci_îr‹_h™dÀrs
 = {
NULL
};

457 
pci_drivî
 
	gsh™n⁄_drivî
 = {

458 .
«me
 = "shannon",

459 .
	gid_èbÀ
 = 
sh™n⁄_id_èbÀ
,

460 .
	g¥obe
 = 
sh™n⁄_¥obe_wøµî
,

461 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 8, 0)

462 .
	gªmove
 = 
sh™n⁄_ªmove_wøµî
,

464 .
	gªmove
 = 
__devexô_p
(
sh™n⁄_ªmove_wøµî
),

466 .
	gshutdown
 = 
sh™n⁄_ªmove_wøµî
,

467 .
	gîr_h™dÀr
 = &
sh™n⁄_pci_îr‹_h™dÀrs
,

468 #ifde‡
RHEL_RELEASE_CODE


469 #i‡
RHEL_RELEASE_CODE
 >
RHEL_RELEASE_VERSION
(7, 2)

470 .
	gpci_drivî_rh
 = &
sh™n⁄_pci_drivî_rh
,

475 
sh™n⁄_kmem_ˇche_t
 *
sh™n⁄_ªq_¶ab
;

476 
sh™n⁄_kmem_ˇche_t
 *
sh™n⁄_bio_¶ab
;

477 
sh™n⁄_mempoﬁ_t
 *
sh™n⁄_ªq_poﬁ
;

478 
sh™n⁄_mempoﬁ_t
 *
sh™n⁄_bio_poﬁ
;

481 
sh™n⁄_li°_hód
 
sh™n⁄_poﬁ_li°
;

482 
sh™n⁄_muãx_t
 
poﬁ_£m
;

483 
sh™n⁄_maj‹
;

484 
sh™n⁄_auto_©èch
;

486 
sh™n⁄_£˘‹_size
;

487 
moduÀ_∑øm
(
sh™n⁄_£˘‹_size
, , 
S_IRUGO
|
S_IWUSR
);

488 
sh™n⁄_debug_Àvñ
;

489 
moduÀ_∑øm
(
sh™n⁄_debug_Àvñ
, , 
S_IRUGO
|
S_IWUSR
);

490 
sh™n⁄_f‹˚_rw
;

491 
moduÀ_∑øm
(
sh™n⁄_f‹˚_rw
, , 
S_IRUGO
|
S_IWUSR
);

492 
moduÀ_∑øm
(
sh™n⁄_maj‹
, , 0);

493 
moduÀ_∑øm
(
sh™n⁄_auto_©èch
, , 0);

494 
sh™n⁄_pm_qos_vÆue
;

495 
sh™n⁄_pm_qos_dißbÀ
;

496 
moduÀ_∑øm
(
sh™n⁄_pm_qos_vÆue
, , 
S_IRUGO
|
S_IWUSR
);

497 
moduÀ_∑øm
(
sh™n⁄_pm_qos_dißbÀ
, , 
S_IRUGO
|
S_IWUSR
);

498 
sh™n⁄_u£_iosched
;

499 
moduÀ_∑øm
(
sh™n⁄_u£_iosched
, , 
S_IRUGO
|
S_IWUSR
);

500 
sh™n⁄_buf„r_wrôe
;

501 
moduÀ_∑øm
(
sh™n⁄_buf„r_wrôe
, , 
S_IRUGO
|
S_IWUSR
);

502 
sh™n⁄_dißbÀ_öãrvñ_ª‰esh_mbr
;

503 
moduÀ_∑øm
(
sh™n⁄_dißbÀ_öãrvñ_ª‰esh_mbr
, , 
S_IRUGO
|
S_IWUSR
);

504 
sh™n⁄_√vî_h™g
;

505 
moduÀ_∑øm
(
sh™n⁄_√vî_h™g
, , 
S_IRUGO
|
S_IWUSR
);

506 
sh™n⁄_high_≥rf‹m™˚
;

507 
moduÀ_∑øm
(
sh™n⁄_high_≥rf‹m™˚
, , 
S_IRUGO
|
S_IWUSR
);

508 
sh™n⁄_fûl_löes
;

509 
moduÀ_∑øm
(
sh™n⁄_fûl_löes
, , 
S_IRUGO
|
S_IWUSR
);

510 
	gsh™n⁄_u£_≥r˝u_wq
;

511 
moduÀ_∑øm
(
sh™n⁄_u£_≥r˝u_wq
, , 
S_IRUGO
|
S_IWUSR
);

512 
sh™n⁄_öô_ãmp
;

513 
moduÀ_∑øm
(
sh™n⁄_öô_ãmp
, , 
S_IRUGO
|
S_IWUSR
);

514 
sh™n⁄_do_pci_ª£t
;

515 
moduÀ_∑øm
(
sh™n⁄_do_pci_ª£t
, , 
S_IRUGO
|
S_IWUSR
);

516 
sh™n⁄_do_¢≠ªad
;

517 
moduÀ_∑øm
(
sh™n⁄_do_¢≠ªad
, , 
S_IRUGO
|
S_IWUSR
);

518 
sh™n⁄_memblock_¥óŒoc
;

519 
moduÀ_∑øm
(
sh™n⁄_memblock_¥óŒoc
, , 
S_IRUGO
|
S_IWUSR
);

520 
sh™n⁄_f‹˚_ª˛aim_a˘iveblock
;

521 
moduÀ_∑øm
(
sh™n⁄_f‹˚_ª˛aim_a˘iveblock
, , 
S_IRUGO
|
S_IWUSR
);

522 
sh™n⁄_lﬂd_ªad⁄ly
;

523 
moduÀ_∑øm
(
sh™n⁄_lﬂd_ªad⁄ly
, , 
S_IRUGO
|
S_IWUSR
);

525 
sh™n⁄_u£_π_comp_thªad
;

526 
moduÀ_∑øm
(
sh™n⁄_u£_π_comp_thªad
, , 0);

528 
sh™n⁄_víd‹_cmd
;

529 
moduÀ_∑øm
(
sh™n⁄_víd‹_cmd
, , 
S_IRUGO
|
S_IWUSR
);

531 
sh™n⁄_ovîœp_wrôe
;

532 
moduÀ_∑øm
(
sh™n⁄_ovîœp_wrôe
, , 
S_IRUGO
|
S_IWUSR
);

533 
sh™n⁄_dy«mic_úq_dñay
;

534 
moduÀ_∑øm
(
sh™n⁄_dy«mic_úq_dñay
, , 
S_IRUGO
|
S_IWUSR
);

536 
sh™n⁄_Æloc_mempoﬁ
();

537 
sh™n⁄_‰ì_mempoﬁ
();

539 
	ghas_dma_dñay
 = 0;

540 
	$check_has_dma_dñay
()

542 #ifde‡
CONFIG_X86


543 
˝uöfo_x86
 *
c
 = 
NULL
;

545 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

546 
c
 = &
	`˝u_d©a
(0);

548 
c
 = &
˝u_d©a
[0];

550 
has_dma_dñay
 = !(
c
->
x86_víd‹
 =
X86_VENDOR_INTEL
);

551 #ifde‡
CONFIG_SHANNON_DMA_REORDER


552 
has_dma_dñay
 = 1;

555 
	`sh™n⁄_öfo
("˝u víd‹_id: %s, has_dma_dñay: %s.\n", 
c
->
x86_víd‹_id
, 
has_dma_dñay
 ? "yes" : "no");

557 #ifde‡
CONFIG_SHANNON_DMA_REORDER


558 
has_dma_dñay
 = 1;

560 
has_dma_dñay
 = 0;

565 
	}
}

567 
__öô
 
	$sh™n⁄_öô
()

569 
ªsu…
 = -
ENOMEM
;

570 
m≠_èbÀ_poﬁ
.
memblock_wq
 = 
NULL
;

571 
ãmp_èbÀ_poﬁ
.
memblock_wq
 = 
NULL
;

573 i‡(
sh™n⁄_scsi_mode
) {

574 
sh™n⁄_u£_≥r˝u_wq
 = 1;

575 
sh™n⁄_pm_qos_dißbÀ
 = 1;

578 
	`check_has_dma_dñay
();

580 
	`sh™n⁄_•ö_lock_öô
(&
devi˚_bôm≠_lock
);

581 
	`SHANNON_INIT_LIST_HEAD
(&
sh™n⁄_dev_li°
);

582 
sh™n⁄_maj‹
 = 
	`ªgi°î_blkdev
(shannon_major, "shannon");

583 
	`SHANNON_INIT_LIST_HEAD
(&
sh™n⁄_dev_li°
);

584 
	`SHANNON_INIT_LIST_HEAD
(&
sh™n⁄_poﬁ_li°
);

585 
	`sh™n⁄_muãx_öô
(&
poﬁ_£m
);

586 i‡(
sh™n⁄_u£_≥r˝u_wq
) {

587 
sh™n⁄_≥r˝u_wq
 = 
	`sh™n⁄_¸óã_w‹kqueue
("shn_percpu_wq");

588 i‡(
sh™n⁄_≥r˝u_wq
 =
NULL
) {

589 
	`sh™n⁄_îr
("alloc shannon_percpu_wq workqueue failed!\n");

590 
uƒegi°î_blkdev
;

594 i‡(
	`sh™n⁄_memblock_poﬁ_öô
(&
m≠_èbÀ_poﬁ
, 
MAP_TABLE_MEMBLOCK_SIZE_SHIFT
, 
MAP_TABLE_ENTRY_SIZE
))

595 
de°roy_wq
;

596 i‡(
	`sh™n⁄_memblock_poﬁ_öô
(&
ãmp_èbÀ_poﬁ
, 
TEMP_TABLE_MEMBLOCK_SIZE_SHIFT
, 
TEMP_TABLE_ENTRY_SIZE
))

597 
de°roy_wq
;

598 i‡(
	`sh™n⁄_Æloc_mempoﬁ
())

599 
de°roy_wq
;

601 
ªsu…
 = 
	`pci_ªgi°î_drivî
(&
sh™n⁄_drivî
);

602 i‡(
ªsu…
)

603 
‰ì_mempoﬁ
;

607 
‰ì_mempoﬁ
:

608 
	`sh™n⁄_‰ì_mempoﬁ
();

609 
de°roy_wq
:

610 i‡(
sh™n⁄_≥r˝u_wq
)

611 
	`sh™n⁄_de°roy_w‹kqueue
(
sh™n⁄_≥r˝u_wq
);

612 i‡(
m≠_èbÀ_poﬁ
.
memblock_wq
)

613 
	`sh™n⁄_de°roy_w‹kqueue
(
m≠_èbÀ_poﬁ
.
memblock_wq
);

614 i‡(
ãmp_èbÀ_poﬁ
.
memblock_wq
)

615 
	`sh™n⁄_de°roy_w‹kqueue
(
ãmp_èbÀ_poﬁ
.
memblock_wq
);

616 
uƒegi°î_blkdev
:

617 
	`uƒegi°î_blkdev
(
sh™n⁄_maj‹
, "shannon");

618  
ªsu…
;

619 
	}
}

621 
__exô
 
	$sh™n⁄_exô
()

623 
	`pci_uƒegi°î_drivî
(&
sh™n⁄_drivî
);

624 
	`sh™n⁄_memblock_poﬁ_de°roy
(&
m≠_èbÀ_poﬁ
);

625 
	`sh™n⁄_memblock_poﬁ_de°roy
(&
ãmp_èbÀ_poﬁ
);

626 
	`sh™n⁄_‰ì_mempoﬁ
();

628 i‡(
sh™n⁄_≥r˝u_wq
)

629 
	`sh™n⁄_de°roy_w‹kqueue
(
sh™n⁄_≥r˝u_wq
);

630 
	`uƒegi°î_blkdev
(
sh™n⁄_maj‹
, "shannon");

631 
	}
}

633 
MODULE_LICENSE
("GPL");

634 
MODULE_VERSION
("3.2.2.4");

635 
moduÀ_öô
(
sh™n⁄_öô
);

636 
moduÀ_exô
(
sh™n⁄_exô
);

	@shannon_nor.c

1 
	sn‹Êash_öfo
 {

2 
u64
 
	mmagic_numbî
;

3 
	m£rvi˚_èg
[32];

4 
	mmodñ_id
[40];

7 
	s∑øm_lök
 {

8 
u16
 
	mªg_off£t
;

9 
u16
 
	mÀngth
;

10 
u32
 
	mp_√xt
;

11 
	m∑øm_Êag
[32];

12 
u32
 
	mvÆues
[];

17 
	#NORFLASH_ERASE_ADDR
 0x34

	)

18 
	#NORFLASH_ERASE_CTRL
 0x35

	)

20 
	#NORFLASH_WRITE_ADDR
 0x36

	)

21 
	#NORFLASH_WRITE_CTRL
 0x37

	)

23 
	#NORFLASH_READ_ADDR
 0x38

	)

24 
	#NORFLASH_READ_LENGTH
 0x39

	)

25 
	#NORFLASH_READ_CTRL
 0x3a

	)

27 
	#NORFLASH_TIMEOUT
 1000000

28 

	)

32 
	$__u8_À2be
(*
buf
, 
cou¡
)

34 
i
, 
k
;

35 
__u8
 
d©a
, 
t
;

37 
i
 = 0; i < 
cou¡
; i++) {

38 
t
 = 0;

39 
d©a
 = ((
__u8
 *)
buf
)[
i
];

41 
k
 = 0; k < 8; k++) {

42 i‡(
d©a
 & (1 << 
k
))

43 
t
 |(1 << (7 - 
k
));

46 ((
__u8
 *)
buf
)[
i
] = 
t
;

48 
	}
}

51 
	$sh™n⁄_öô_n‹Êash
(
sh™n⁄_dev
 *
sdev
)

53 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

54 
sdev
->
n‹Êash_id
 = 
	`ªad_ªg_ß„
(sdev, (
u32
 *)sdev->
b¨
 + 
SH_NORFLASH_ID_OFFSET
);

56 
sdev
->
n‹Êash_id
 = 
	`ªad_ªg_ß„
(sdev, (
u32
 *)sdev->
b¨
 + 0x32);

57 
	`debugs1
("NOR fœsh id0x%x.\n", 
sdev
->
n‹Êash_id
);

59 i‡(0x01800119 =
sdev
->
n‹Êash_id
 || 0x20100119 == sdev->norflash_id) {

61 
sdev
->
n‹Êash
.
blk_cou¡
 = 542;

62 
sdev
->
n‹Êash
.
size_öbyãs
 = 510 * 64 * 1024 + 32 * 4 * 1024;

63 
sdev
->
n‹Êash
.
£gmíts
 = 2;

64 
sdev
->
n‹Êash
.
buf_addr
 = 0x800;

65 
sdev
->
n‹Êash
.
buf_size
 = 256;

66 
sdev
->
n‹Êash
.
¥iv©e_öt
 = 0;

68 
sdev
->
n‹Êash
.
£gmít
[0].
°¨t_phyaddr
 = 0x0;

69 
sdev
->
n‹Êash
.
£gmít
[0].
íd_phyaddr
 = 0x01FDFFFF;

70 
sdev
->
n‹Êash
.
£gmít
[0].
blk_size
 = 0x10000;

72 
sdev
->
n‹Êash
.
£gmít
[1].
°¨t_phyaddr
 = 0x01FE0000;

73 
sdev
->
n‹Êash
.
£gmít
[1].
íd_phyaddr
 = 0x01FFFFFF;

74 
sdev
->
n‹Êash
.
£gmít
[1].
blk_size
 = 0x1000;

76 } i‡(0x017E2201 =
sdev
->
n‹Êash_id
) {

78 
sdev
->
n‹Êash
.
blk_cou¡
 = 256;

79 
sdev
->
n‹Êash
.
size_öbyãs
 = 256 * 128 * 1024;

80 
sdev
->
n‹Êash
.
£gmíts
 = 1;

81 
sdev
->
n‹Êash
.
buf_addr
 = 0x800;

82 
sdev
->
n‹Êash
.
buf_size
 = 64;

83 
sdev
->
n‹Êash
.
¥iv©e_öt
 = 1;

85 
sdev
->
n‹Êash
.
£gmít
[0].
°¨t_phyaddr
 = 0x0;

86 
sdev
->
n‹Êash
.
£gmít
[0].
íd_phyaddr
 = 0x01FFFFFF;

87 
sdev
->
n‹Êash
.
£gmít
[0].
blk_size
 = 0x20000;

89 } i‡(0xEF6014FF =
sdev
->
n‹Êash_id
 || 0x62161400 == sdev->norflash_id) {

91 
sdev
->
n‹Êash
.
blk_cou¡
 = 256;

92 
sdev
->
n‹Êash
.
size_öbyãs
 = 256 * 4 * 1024;

93 
sdev
->
n‹Êash
.
£gmíts
 = 1;

94 
sdev
->
n‹Êash
.
buf_addr
 = 0x1000;

95 
sdev
->
n‹Êash
.
buf_size
 = 4096;

96 
sdev
->
n‹Êash
.
¥iv©e_öt
 = 0;

98 
sdev
->
n‹Êash
.
£gmít
[0].
°¨t_phyaddr
 = 0x0;

99 
sdev
->
n‹Êash
.
£gmít
[0].
íd_phyaddr
 = 0x0FFFFF;

100 
sdev
->
n‹Êash
.
£gmít
[0].
blk_size
 = 0x1000;

102 } i‡(0x0102194D =
sdev
->
n‹Êash_id
 || 0x20BB1910 == sdev->norflash_id || 0x20BA1910 == sdev->norflash_id) {

104 
sdev
->
n‹Êash
.
blk_cou¡
 = 512;

105 
sdev
->
n‹Êash
.
size_öbyãs
 = 512 * 64 * 1024;

106 
sdev
->
n‹Êash
.
£gmíts
 = 1;

107 
sdev
->
n‹Êash
.
buf_addr
 = 0x1000;

108 
sdev
->
n‹Êash
.
buf_size
 = 4096;

109 
sdev
->
n‹Êash
.
¥iv©e_öt
 = 0;

111 
sdev
->
n‹Êash
.
£gmít
[0].
°¨t_phyaddr
 = 0x0;

112 
sdev
->
n‹Êash
.
£gmít
[0].
íd_phyaddr
 = 0x1FFFFFF;

113 
sdev
->
n‹Êash
.
£gmít
[0].
blk_size
 = 0x10000;

116 
	`sh™n⁄_îr
("wr⁄g NOR fœsh id, 0x%x\n", 
sdev
->
n‹Êash_id
);

120 
	`sh™n⁄_muãx_öô
(&
sdev
->
n‹Êash_›s_£m
);

123 
	}
}

125 
	$sh™n⁄_n‹Êash_îa£
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
, u32 
Àngth
)

127 
£g
;

128 
u32
 
blk_size
;

129 
ªmaö
;

132 i‡(
phyaddr
 + 
Àngth
 > 
sdev
->
n‹Êash
.
size_öbyãs
) {

133 
	`sh™n⁄_îr
("overflow NORáddress!\n");

137 i‡(
Àngth
 == 0) {

138 
	`sh™n⁄_îr
("Àngth %d i†övÆid!\n", 
Àngth
);

142 
£g
 = 0; seg < 
sdev
->
n‹Êash
.
£gmíts
; seg++)

144 i‡(
phyaddr
 >
sdev
->
n‹Êash
.
£gmít
[
£g
].
°¨t_phyaddr
 &&Öhyadd∏<sdev->n‹Êash.£gmít[£g].
íd_phyaddr
)

147 i‡(
£g
 =
sdev
->
n‹Êash
.
£gmíts
) {

148 
	`sh™n⁄_îr
("ˇ¬Ÿ föd NOR segmíàtÿîa£,Öhyaddr=0x%08x.\n", 
phyaddr
);

152 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

154 i‡(
phyaddr
 % 
blk_size
) {

155 
	`sh™n⁄_îr
("phyaddr isÇot blockáligned\n");

159 
ªmaö
 = 
Àngth
;

160 
sdev
->
n‹Êash
.
¥ogªss
 = 0;

162 
ªmaö
 > 0)

165 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

166 i‡(
	`sh™n⁄_n‹Êash_îa£_g5
(
sdev
, 
phyaddr
) < 0)

169 i‡(
	`sh™n⁄_n‹Êash_îa£_g4
(
sdev
, 
phyaddr
) < 0)

173 
	`sh™n⁄_öfo
("îa£ NOR fœsh:Öhyaddr0x%x, blk_size=0x%x,Ñemaö0x%x,Üígth0x%x\n", 
phyaddr
, 
blk_size
, 
ªmaö
, 
Àngth
);

174 
	`sh™n⁄_m¶ìp
(15);

177 
phyaddr
 +
blk_size
;

178 i‡(
phyaddr
 > 
sdev
->
n‹Êash
.
£gmít
[
£g
].
íd_phyaddr
) {

180 i‡(++
£g
 >
sdev
->
n‹Êash
.
£gmíts
)

182 
phyaddr
 -
blk_size
;

183 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

184 
phyaddr
 +
blk_size
;

187 
ªmaö
 -
blk_size
;

188 
sdev
->
n‹Êash
.
¥ogªss
 = (
Àngth
 - 
ªmaö
) * 100 /Üength;

192 
	}
}

194 
	$sh™n⁄_n‹Êash_wrôe
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
, u32 
Àngth
, *
d©a
)

196 
£g
;

197 
u32
 *
buf
 = 
NULL
;

198 
u32
 
blk_size
;

199 
u32
 
x„r_size
;

200 
ªmaö
;

201 
u32
 
com∂ëe
;

202 
i
 = 0, 
ªt
 = 0;

204 i‡(
phyaddr
 + 
Àngth
 > 
sdev
->
n‹Êash
.
size_öbyãs
) {

205 
	`sh™n⁄_îr
("overflow NORáddress!\n");

209 i‡(
Àngth
 == 0 || (0 !=Üength % 4)) {

210 
	`sh™n⁄_îr
("Àngth %d i†övÆid!\n", 
Àngth
);

214 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
Ë&& (
phyaddr
 % 4096)) {

215 
	`sh™n⁄_îr
("phyaddr isÇot 4káligned\n");

219 
£g
 = 0; seg < 
sdev
->
n‹Êash
.
£gmíts
; seg++)

221 i‡(
phyaddr
 >
sdev
->
n‹Êash
.
£gmít
[
£g
].
°¨t_phyaddr
 &&Öhyadd∏<sdev->n‹Êash.£gmít[£g].
íd_phyaddr
)

224 i‡(
£g
 =
sdev
->
n‹Êash
.
£gmíts
) {

225 
	`sh™n⁄_îr
("ˇ¬Ÿ föd NOR segmíàtÿwrôe,Öhyaddr=0x%08x.\n", 
phyaddr
);

229 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

230 
ªmaö
 = 
Àngth
;

231 
com∂ëe
 = 0;

232 
sdev
->
n‹Êash
.
¥ogªss
 = 0;

234 
buf
 = (
u32
*)
	`sh™n⁄_kzÆloc
(
sdev
->
n‹Êash
.
buf_size
, 
GFP_SHANNON
);

235 i‡(!
buf
) {

236 
	`sh™n⁄_îr
("cannotálloc memory forÇor flash write.\n");

237  -
ENOMEM
;

240 
ªmaö
 > 0)

242 
x„r_size
 = 
ªmaö
 < 
sdev
->
n‹Êash
.
buf_size
 ?Ñemain : sdev->norflash.buf_size;

243 i‡((
phyaddr
 / 
blk_size
Ë!(’hyadd∏+ 
x„r_size
 - 1) / blk_size)) {

244 
	`sh™n⁄_îr
("across block span!\n");

245 
ªt
 = -1;

246 
Áûed
;

249 
	`sh™n⁄_mem£t
(
buf
, 0xFF, 
x„r_size
);

250 
	`sh™n⁄_mem˝y
(
buf
, 
d©a
 + 
com∂ëe
, 
x„r_size
);

251 i‡(
sdev
->
n‹Êash
.
¥iv©e_öt
)

252 
	`__u8_À2be
(
buf
, 
x„r_size
);

259 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

260 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

261 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

266  
i
 = 0; i < 
x„r_size
 / 4; i++) {

267 
	`sh™n⁄_øw_wrôñ
(
buf
[
i
], (
u32
 *)
sdev
->
b¨
 + sdev->
n‹Êash
.
buf_addr
 + i);

268 i‡((
i
 % 8) == 7) {

269 i‡(
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
) == 0x5a5a5a5a)

274 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

275 
	`sh™n⁄_i‹ód32
((
u32
*)
sdev
->
b¨
 + 
SH_NORFLASH_STATE_OFFSET
);

276 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

279 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

280 i‡(
	`sh™n⁄_n‹Êash_wrôe_g5
(
sdev
, 
phyaddr
) < 0) {

281 
ªt
 = -1;

282 
Áûed
;

285 i‡(
	`sh™n⁄_n‹Êash_wrôe_g4
(
sdev
, 
phyaddr
) < 0) {

286 
ªt
 = -1;

287 
Áûed
;

291 
	`sh™n⁄_öfo
("wrôêNOR fœsh:Öhyaddr0x%x, x„r_size=%d,Ñemaö%d,Üígth%d\n", 
phyaddr
, 
x„r_size
, 
ªmaö
, 
Àngth
);

292 
	`sh™n⁄_m¶ìp
(15);

295 
ªmaö
 -
x„r_size
;

296 
com∂ëe
 +
x„r_size
;

297 
sdev
->
n‹Êash
.
¥ogªss
 = (
Àngth
 - 
ªmaö
) * 100 /Üength;

299 
phyaddr
 +
x„r_size
;

301 i‡(
phyaddr
 > 
sdev
->
n‹Êash
.
£gmít
[
£g
].
íd_phyaddr
) {

303 i‡(++
£g
 >
sdev
->
n‹Êash
.
£gmíts
)

305 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

309 
Áûed
:

310 
	`sh™n⁄_k‰ì
(
buf
);

312  
ªt
;

313 
	}
}

315 
	$sh™n⁄_n‹Êash_ªad
(
sh™n⁄_dev
 *
sdev
, 
u32
 
phyaddr
, u32 
Àngth
, *
d©a
)

317 
£g
;

318 
u32
 *
buf
 = 
NULL
;

319 
u32
 
blk_size
;

320 
u32
 
x„r_size
;

321 
ªmaö
;

322 
u32
 
com∂ëe
;

323 
i
 = 0, 
ªt
 = 0;

326 i‡(
phyaddr
 + 
Àngth
 > 
sdev
->
n‹Êash
.
size_öbyãs
) {

327 
	`sh™n⁄_îr
("overflow NORáddress!\n");

331 i‡(
Àngth
 == 0 || (0 !=Üength % 4)) {

332 
	`sh™n⁄_îr
("Àngth %d i†övÆid!\n", 
phyaddr
);

336 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
Ë&& (
phyaddr
 % 4096)) {

337 
	`sh™n⁄_îr
("phyaddr isÇot 4káligned\n");

341 
£g
 = 0; seg < 
sdev
->
n‹Êash
.
£gmíts
; seg++)

343 i‡(
phyaddr
 >
sdev
->
n‹Êash
.
£gmít
[
£g
].
°¨t_phyaddr
 &&Öhyadd∏<sdev->n‹Êash.£gmít[£g].
íd_phyaddr
)

346 i‡(
£g
 =
sdev
->
n‹Êash
.
£gmíts
) {

347 
	`sh™n⁄_îr
("ˇ¬Ÿ föd NOR segmíàtÿªad,Öhyaddr=0x%08x.\n", 
phyaddr
);

351 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

352 
ªmaö
 = 
Àngth
;

353 
com∂ëe
 = 0;

354 
sdev
->
n‹Êash
.
¥ogªss
 = 0;

356 
buf
 = (
u32
*)
	`sh™n⁄_kzÆloc
(
sdev
->
n‹Êash
.
buf_size
, 
GFP_SHANNON
);

357 i‡(!
buf
) {

358 
	`sh™n⁄_îr
("cannotálloc memory forÇor flashÑead.\n");

359  -
ENOMEM
;

362 
ªmaö
 > 0)

364 
x„r_size
 = 
ªmaö
 < 
sdev
->
n‹Êash
.
buf_size
 ?Ñemain : sdev->norflash.buf_size;

365 i‡((
phyaddr
 / 
blk_size
Ë!(’hyadd∏+ 
x„r_size
 - 1) / blk_size)) {

366 
	`sh™n⁄_îr
("across block span!\n");

367 
ªt
 = -1;

368 
Áûed
;

371 
	`sh™n⁄_mem£t
(
buf
, 0xFF, 
x„r_size
);

373 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

374 i‡(
	`sh™n⁄_n‹Êash_ªad_g5
(
sdev
, 
phyaddr
) < 0) {

375 
ªt
 = -1;

376 
Áûed
;

379 i‡(
	`sh™n⁄_n‹Êash_ªad_g4
(
sdev
, 
phyaddr
, 
x„r_size
) < 0) {

380 
ªt
 = -1;

381 
Áûed
;

388 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

390  
i
 = 0; i < 
x„r_size
 / 4; i++)

391 
buf
[
i
] = 
	`sh™n⁄_øw_ªadl
–(
u32
 *)
sdev
->
b¨
 + sdev->
n‹Êash
.
buf_addr
 + i);

393 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

395 i‡(
sdev
->
n‹Êash
.
¥iv©e_öt
)

396 
	`__u8_À2be
(
buf
, 
x„r_size
);

397 
	`sh™n⁄_mem˝y
(
d©a
 + 
com∂ëe
, 
buf
, 
x„r_size
);

399 
	`sh™n⁄_öfo
("ªad NOR fœsh:Öhyaddr0x%x, x„r_size=%d,Ñemaö%d,Üígth%d\n", 
phyaddr
, 
x„r_size
, 
ªmaö
, 
Àngth
);

400 
	`sh™n⁄_m¶ìp
(15);

403 
ªmaö
 -
x„r_size
;

404 
com∂ëe
 +
x„r_size
;

405 
sdev
->
n‹Êash
.
¥ogªss
 = (
Àngth
 - 
ªmaö
) * 100 /Üength;

407 
phyaddr
 +
x„r_size
;

409 i‡(
phyaddr
 > 
sdev
->
n‹Êash
.
£gmít
[
£g
].
íd_phyaddr
) {

411 i‡(++
£g
 >
sdev
->
n‹Êash
.
£gmíts
)

413 
blk_size
 = 
sdev
->
n‹Êash
.
£gmít
[
£g
].blk_size;

417 
Áûed
:

418 
	`sh™n⁄_k‰ì
(
buf
);

420  
ªt
;

421 
	}
}

423 
	#NORFLASH_INFO_ADDR
 0X1FFF000

	)

425 
	$ªad_n‹Êash_öfo
(
sh™n⁄_dev
 *
sdev
)

427 
n‹Êash_öfo
 
n‹_buf
;

428 
u32
 
n‹Êash_öfo_addr
;

430 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

431 
n‹Êash_öfo_addr
 = 
sdev
->
n‹Êash
.
pcõ_phy_addr
 + 
NOR_PAGE_SIZE
 * 0xFF;

433 
n‹Êash_öfo_addr
 = 
NORFLASH_INFO_ADDR
;

435 
	`sh™n⁄_mem£t
(&
n‹_buf
, 0x00, (
n‹Êash_öfo
));

437 i‡(
	`sh™n⁄_n‹Êash_ªad
(
sdev
, 
n‹Êash_öfo_addr
, (
n‹Êash_öfo
), &
n‹_buf
)) {

438 
	`sh™n⁄_îr
("failedÅoÑead NOR flash.\n");

439 
u£_deÁu…
;

442 i‡(
	`sh™n⁄_mem_ªadq
(&
n‹_buf
.
magic_numbî
) != 0X646972656374696F)

444 
	`debugs1
("couldn't get valid serviceÅag from NOR flash.\n");

445 
u£_deÁu…
;

448 
sdev
->
has_£rvi˚_èg
 = 1;

449 
	`sh™n⁄_mem˝y
(
sdev
->
£rvi˚_èg
, 
n‹_buf
.service_tag, 32);

450 
	`sh™n⁄_mem˝y
(
sdev
->
modñ_id
, 
n‹_buf
.model_id, 40);

453 
u£_deÁu…
:

454 
sdev
->
has_£rvi˚_èg
 = 0;

455 
	`sh™n⁄_¢¥ötf
(
sdev
->
£rvi˚_èg
, 20, "%16.16Œx", sdev->
d«
);

456 
	`sh™n⁄_¢¥ötf
(
sdev
->
modñ_id
, 40, "Direct-IO PCIe Flash");

458 
	}
}

	@shannon_ns.c

1 
	~"sh™n⁄.h
"

2 
	~"sh™n⁄_io˘l.h
"

4 
sh™n⁄_li°_hód
 
	gsh™n⁄_poﬁ_li°
;

5 
	#MAX_POOL_COUNT
 26

	)

6 
	#SPOOL_MINORS
 16

	)

7 
	gpoﬁ_bôm≠
;

8 
sh™n⁄_muãx_t
 
	gpoﬁ_£m
;

9 
sh™n⁄_memblock_¥óŒoc
;

10 
sh™n⁄_memblock_poﬁ
 
m≠_èbÀ_poﬁ
;

11 
sh™n⁄_memblock_poﬁ
 
ãmp_èbÀ_poﬁ
;

13 
put_ªfcou¡
(
sh™n⁄_©omic_t
 *
ªfcou¡
, (*
ªÀa£
)(sh™n⁄_©omic_à*
kªf
))

15 
	`WARN_ON
(
ªÀa£
 =
NULL
);

16 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(
ªfcou¡
))

17 
	`ªÀa£
(
ªfcou¡
);

18 
	}
}

20 
	$gë_ªfcou¡
(
sh™n⁄_©omic_t
 *
ªfcou¡
)

22 
	`WARN_ON
(!
	`sh™n⁄_©omic_ªad
(
ªfcou¡
));

23 
	`sh™n⁄_©omic_öc
(
ªfcou¡
);

24 
	}
}

26 
	$‰ì_«me•a˚
(
sh™n⁄_©omic_t
 *
ªfcou¡
)

28 
sh™n⁄_«me•a˚
 *
ns
 = 
	`c⁄èöî_of
(
ªfcou¡
, shannon_namespace,Ñefcount);

30 
	`sh™n⁄_öfo
("thêªfcou¡ o‡«me•a˚ %d de¸ó£Åÿ0.\n", 
ns
->
idx
);

31 
	`sh™n⁄_m≠_èbÀ_‰ì_ns
(&
ns
->
sdisk
);

32 i‡(
ns
->
sdisk
.
queue
)

33 
	`sh™n⁄_blk_˛ónup_queue
(
ns
->
sdisk
.
queue
);

34 
ns
->
sdisk
.
queue
 = 
NULL
;

35 
	`sh™n⁄_k‰ì
(
ns
);

36 
	}
}

38 
sh™n⁄_«me•a˚
 *
	$ns_gë_ª„ªn˚
(
sh™n⁄_«me•a˚
 *
ns
)

40 i‡(!
ns
)

41  
NULL
;

42 
	`gë_ªfcou¡
(&
ns
->
ªfcou¡
);

43 i‡(
	`sh™n⁄_©omic_ªad
(&
ns
->
ªfcou¡
) == 1) {

44 
	`put_ªfcou¡
(&
ns
->
ªfcou¡
, 
‰ì_«me•a˚
);

45  
NULL
;

47  
ns
;

48 
	}
}

50 
	$ns_put_ª„ªn˚
(
sh™n⁄_«me•a˚
 *
ns
)

52 
	`put_ªfcou¡
(&
ns
->
ªfcou¡
, 
‰ì_«me•a˚
);

53 
	}
}

55 
	$sh_ö¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *
ns
)

57 
	`sh™n⁄_©omic_öc
(&
ns
->
u£rs
);

58 
	`sh™n⁄_b¨rõr
();

60 
	}
}

62 
	$sh_de¸ó£_u£rs_ns
(
sh™n⁄_«me•a˚
 *
ns
)

64 i‡(
	`sh™n⁄_©omic_dec_™d_ã°
(&
ns
->
u£rs
)) {

65 
	`sh™n⁄_öfo
("thêu£r†o‡«me•a˚ %d de¸ó£Åÿ0.\n", 
ns
->
idx
);

66 
	`put_ªfcou¡
(&
ns
->
ªfcou¡
, 
‰ì_«me•a˚
);

70 
	}
}

72 
sh™n⁄_disˇrd_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
logicb64_t
 
°¨t_lba
,Üogicb64_à
íd_lba
, 
dñ_ns
);

73 
	$ªÀa£_«me•a˚
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

75 
sh™n⁄_ns_¨g
 *
ns_¨g
;

76 
sh™n⁄_«me•a˚
 *
ns
;

77 
idx
, 
ªt
 = 0;

79 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

80 i‡(
ns_¨g
 =
NULL
) {

81 
	`sh™n⁄_îr
("AllocÇs_arg failed!\n");

82  -
ENOMEM
;

85 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_¨g
, (
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

86 (*
ns_¨g
))) {

87 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

88 
ªt
 = -
EFAULT
;

89 
out
;

91 
idx
 = 
ns_¨g
->
vﬁ_idx
;

92 
ns
 = 
•oﬁ
->ns[
idx
];

94 
ns
 = 
	`ns_gë_ª„ªn˚
(ns);

95 i‡(
ns
)

96 
	`sh™n⁄_disˇrd_ns
(
ns
, 0,Çs->
sdisk
.
£˘‹s
>>“s->
logicb_shi·
-9), 1);

97 
	`ns_put_ª„ªn˚
(
ns
);

99 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

100 
ns
 = 
•oﬁ
->ns[
idx
];

101 i‡(
ns
) {

102 i‡(
ns
->
sdisk
.
gd
) {

103 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

104 
	`sh™n⁄_îr
("ns->sdisk.gd isÇot NULL!\n");

105 
ªt
 = -
EBUSY
;

106 
out
;

108 i‡(
ns
->
sdisk
.
¥i‹ôy
 == 1) {

109 
	`sh™n⁄_©omic_dec
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
);

110 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) == 0)

111 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 0);

113 
•oﬁ
->
ns
[
idx
] = 
NULL
;

114 
	`sh™n⁄_b¨rõr
();

115 
	`sh_de¸ó£_u£rs_ns
(
ns
);

117 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

118 
	`sh™n⁄_˛ór_bô
(
idx
, &
•oﬁ
->
poﬁ_öfo
->
ns_bôm≠
);

119 
	`sh™n⁄_©omic_dec
(&
•oﬁ
->
ns_cou¡
);

120 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

121 
	`upd©e_poﬁ_öfo
(
•oﬁ
);

123 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

124 
out
:

125 
	`sh™n⁄_k‰ì
(
ns_¨g
);

126  
ªt
;

127 
	}
}

130 
	$ns_öôülize_v¨übÀs
(
sh™n⁄_«me•a˚
 *
ns
)

132 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

133 
i
, 
j
;

135 
ns
->
d©a_pba
.
lun_pba
 = 0x03ffffff;

136 
ns
->
d©a
 = &ns->
poﬁ
->
ns_d©a
[ns->
idx
];

137 
	`sh™n⁄_öô_waôqueue_hód
(&
ns
->
upd©e_ns_d©a_d⁄e_evít
);

138 
	`sh™n⁄_mem£t
(
ns
->
d©a
, 0, (*(ns->data)));

139 
	`sh™n⁄_©omic_£t
(&
ns
->
ios
, 0);

140 
	`sh™n⁄_muãx_öô
(&
ns
->
thrŸée_ios_£m
);

141 
	`sh™n⁄_©omic_£t
(&
ns
->
sdisk
.
≥ndög_bios
, 0);

142 
ns
->
sdisk
.
©èched
 = 
SHN_DISK_DETACHED
;

144 
	`sh™n⁄_•ö_lock_öô
(&
sdisk
->
ªc‹d_œãncy_lock
);

145 
	`sh™n⁄_•ö_lock_öô
(&
ns
->
d©a_lock
);

146 
sdisk
->
¥öt_œãncy_öãrvÆ
 = 0;

147 
	`sh™n⁄_öô_timî
(&
sdisk
->
¥öt_œãncy_timî
);

148 
	`sh™n⁄_£t_timî_c⁄ãxt
(&
sdisk
->
¥öt_œãncy_timî
, 
ns_¥öt_œãncy_fun˘i⁄
);

149 
i
 = 0; i < 2; i++) {

150 
j
 = 0; j < 
RMW_LIST_COUNT
; j++) {

151 
	`sh™n⁄_•ö_lock_öô
(&
sdisk
->
rmw_li°_lock
[
i
][
j
]);

152 
	`SHANNON_INIT_LIST_HEAD
(&
sdisk
->
rmw_li°
[
i
][
j
]);

155 
	}
}

159 
sh™n⁄_«me•a˚
 *
	$Æloc_«me•a˚
()

161 
sh™n⁄_«me•a˚
 *
ns
;

163 
ns
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_«me•a˚
), 
GFP_SHANNON
);

164 i‡(
ns
 =
NULL
) {

165 
	`sh™n⁄_îr
("CannotállocÇamespace.\n");

166  
NULL
;

168  
ns
;

169 
	}
}

172 
	$öô_⁄e_«me•a˚
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_ns_¨g
 *
ns_¨g
)

174 
	`ns_öôülize_v¨übÀs
(
ns
);

176 
ns
->
logicb_shi·
 = 
NS_LOGICB_SHIFT
;

177 
ns
->
logicb_size
 = 1UL <<Çs->
logicb_shi·
;

178 i‡((
ns_¨g
->
block_shi·
 >= 9) && (ns_arg->block_shift <= 12))

179 
ns
->
u£r_logicb_shi·
 = 
ns_¨g
->
block_shi·
;

181 
ns
->
u£r_logicb_shi·
 =Çs->
logicb_shi·
;

182 
ns
->
u£r_logicb_size
 = 1 <<Çs->
u£r_logicb_shi·
;

183 
ns
->
°rù_size_shi·
 = 
NS_STRIP_SIZE_SHIFT
;

184 
ns
->
°rù_size
 = 1 << 
NS_STRIP_SIZE_SHIFT
;

185 
ns
->
max_i›s
 = 
ns_¨g
->max_iops;

186 
ns
->
sdisk
.
¥i‹ôy
 = 
ns_¨g
->priority;

188 
	`sh™n⁄_¢¥ötf
(
ns
->
sdisk
.
disk_«me
, 16, "p%uvﬁ%u",Çs->
poﬁ
->
id
,Çs->
idx
);

189 
ns
->
maj‹
 =Çs->
poﬁ
->major;

191 i‡(
	`sh™n⁄_Æloc_m≠_èbÀ_ns
(&
ns
->
sdisk
, 
ns_¨g
->
£˘‹s
,Çs->
logicb_shi·
,Çs->
poﬁ
->
sdev_cou¡
,Çs->
°rù_size_shi·
) < 0) {

192 
	`sh™n⁄_îr
("Cannotálloc map_table forÇamespace.\n");

193  -
ENOMEM
;

195 
ns
->
sdisk
.
£˘‹s
 = 
ns_¨g
->sectors;

196 
	`sh™n⁄_©omic_£t
(&
ns
->
u£rs
, 1);

197 
	`sh™n⁄_©omic_£t
(&
ns
->
ªfcou¡
, 1);

200 
	}
}

203 
	$öô_«me•a˚s
(
sh™n⁄_poﬁ
 *
•oﬁ
)

205 
sh™n⁄_ns_¨g
 *
ns_¨g
;

206 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
;

207 
sh™n⁄_«me•a˚
 *
ns
;

208 
idx
, 
ªt
 = 0;

210 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

211 i‡(
ns_¨g
 =
NULL
) {

212 
	`sh™n⁄_îr
("AllocÇs_arg failed!\n");

213  -
ENOMEM
;

216 i‡(
sh™n⁄_memblock_¥óŒoc
 == 0) {

217 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

218 
	`sh™n⁄_memblock_poﬁ_add
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

220 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

221 
	`sh™n⁄_memblock_poﬁ_add
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

222 } i‡(
sh™n⁄_memblock_¥óŒoc
 > 0) {

223 
	`sh™n⁄_queue_w‹k
(
m≠_èbÀ_poﬁ
.
memblock_wq
, &m≠_èbÀ_poﬁ.
Æloc_w‹k
);

224 
	`sh™n⁄_queue_w‹k
(
ãmp_èbÀ_poﬁ
.
memblock_wq
, &ãmp_èbÀ_poﬁ.
Æloc_w‹k
);

227 
poﬁ_öfo
 = 
•oﬁ
->pool_info;

228 
idx
 = 0; idx < 
SHANNON_NS_NUM
; idx++) {

229 i‡(!
	`sh™n⁄_ã°_bô
(
idx
, (*)
poﬁ_öfo
->
ns_bôm≠
))

231 
	`sh™n⁄_©omic_öc
(&
•oﬁ
->
ns_cou¡
);

232 
ns_¨g
->
poﬁ_id
 = 
•oﬁ
->
id
;

233 
ns_¨g
->
vﬁ_idx
 = 
idx
;

234 
ns_¨g
->
max_i›s
 = 
	`ns_©åi1_max_i›s
(
poﬁ_öfo
->
ns_©åi1
[
idx
]);

235 
ns_¨g
->
£˘‹s
 = 
	`ns_©åi1_£˘‹s
(
poﬁ_öfo
->
ns_©åi1
[
idx
]);

236 
ns_¨g
->
¥i‹ôy
 = 
	`ns_©åi2_¥i‹ôy
(
poﬁ_öfo
->
ns_©åi2
[
idx
]);

237 
ns_¨g
->
£q_num
 = 
	`ns_©åi2_£q_num
(
poﬁ_öfo
->
ns_©åi2
[
idx
]);

238 
ns_¨g
->
block_shi·
 = 
	`ns_©åi2_blockshi·
(
poﬁ_öfo
->
ns_©åi2
[
idx
]);

240 
ns
 = 
	`Æloc_«me•a˚
();

241 i‡(
ns
 =
NULL
) {

242 
	`sh™n⁄_îr
("alloc_namespace failed.\n");

245 
ns
->
idx
 = 
ns_¨g
->
vﬁ_idx
;

246 
ns
->
£q_num
 = 
ns_¨g
->seq_num;

247 
ns
->
poﬁ
 = 
•oﬁ
;

248 i‡(
	`öô_⁄e_«me•a˚
(
ns
, 
ns_¨g
) < 0) {

249 
	`sh™n⁄_k‰ì
(
ns
);

250 
ªt
 = -
ENOMEM
;

253 
•oﬁ
->
ns
[ns->
idx
] =Çs;

256 
	`sh™n⁄_k‰ì
(
ns_¨g
);

258 
	}
}

261 
	$¸óã_«me•a˚
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

263 
sh™n⁄_dev
 *
sdev
;

264 
sh™n⁄_ns_¨g
 *
ns_¨g
;

265 
sh™n⁄_«me•a˚
 *
ns
;

266 
ªt
 = 0, 
i
;

268 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
ns_cou¡
Ë>
SHANNON_NS_NUM
) {

269 
	`sh™n⁄_îr
("we have %dÇamespaces, cannot createáÇew one.\n",

270 
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
ns_cou¡
));

271  -
EFAULT
;

274 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

275 i‡(
ns_¨g
 =
NULL
) {

276 
	`sh™n⁄_îr
("AllocÇs_arg failed!\n");

277  -
ENOMEM
;

280 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_¨g
, (
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

281 (*
ns_¨g
))) {

282 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

283 
ªt
 = -
EFAULT
;

284 
out
;

288 i‡((
ns_¨g
->
£˘‹s
 <0Ë|| (ns_¨g->
£q_num
 != 0) || \

289 (
ns_¨g
->
¥i‹ôy
 < 0Ë|| (ns_¨g->¥i‹ôy >
PRIORITY_LEVELS
)) {

290 
	`sh™n⁄_w¨n
("Wrongárguments: sectors=%d, seq_num=%d,Öriority=%d.\n",

291 
ns_¨g
->
£˘‹s
,Çs_¨g->
£q_num
,Çs_¨g->
¥i‹ôy
);

292 
ªt
 = -
EINVAL
;

293 
out
;

296 
ns
 = 
	`Æloc_«me•a˚
();

297 i‡(
ns
 =
NULL
) {

298 
	`sh™n⁄_îr
("Cannotállocate memory forÇamespace.\n");

299 
ªt
 = -
ENOMEM
;

300 
out
;

303 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

305 i‡(
ns_¨g
->
vﬁ_idx
 < 0) {

306 
ns
->
idx
 = 
	`sh™n⁄_föd_fú°_zîo_bô
((*)
•oﬁ
->
poﬁ_öfo
->
ns_bôm≠
,

307 
SHANNON_NS_NUM
);

311 
ns
->
idx
 = 
ns_¨g
->
vﬁ_idx
;

312 i‡(
ns
->
idx
 < 
SHANNON_NS_NUM


313 && 
	`sh™n⁄_ã°_bô
(
ns
->
idx
, (*)
•oﬁ
->
poﬁ_öfo
->
ns_bôm≠
)) {

314 
	`sh™n⁄_w¨n
("Name•a˚ #%dÉxi°s.\n", 
ns
->
idx
);

315 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

316 
	`sh_de¸ó£_u£rs_ns
(
ns
);

317 
ªt
 = -
EEXIST
;

318 
out
;

321 i‡(
ns
->
idx
 >
SHANNON_NS_NUM
) {

322 
	`sh™n⁄_îr
("⁄ly suµ‹à%dÇame•a˚s.\n", 
SHANNON_NS_NUM
);

323 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

324 
	`sh_de¸ó£_u£rs_ns
(
ns
);

325 
ªt
 = -
EFAULT
;

326 
out
;

328 
	`sh™n⁄_£t_bô
(
ns
->
idx
, 
•oﬁ
->
poﬁ_öfo
->
ns_bôm≠
);

330 
	`sh™n⁄_©omic_öc
(&
•oﬁ
->
ns_cou¡
);

332 
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
++;

333 
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
 &
NS_SEQ_NUM_MASK
;

334 i‡(
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
 == 0)

335 
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
 = 1;

336 
ns
->
£q_num
 = 
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
;

337 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

339 
ns
->
poﬁ
 = 
•oﬁ
;

340 i‡(
	`öô_⁄e_«me•a˚
(
ns
, 
ns_¨g
) < 0) {

341 
ªt
 = -
ENOMEM
;

342 
öô_Áûed
;

345 i‡(
ns_¨g
->
d©a
 !
NULL
) {

346 
ns_∑th_Àn
 = (
ns
->
d©a
->
«me
);

347 *
«me
;

348 
ªt
 = 
	`sh™n⁄_c›y_‰om_u£r
(
ns
->
d©a
, (
sh™n⁄_ns_d©a
 *
__u£r
)
ns_¨g
->data,

349 (*(
ns
->
d©a
)));

350 i‡(
ªt
) {

351 
	`sh™n⁄_îr
("Cannot copy data from userspace.\n");

352 
ªt
 = -
EFAULT
;

353 
«me_îr‹
;

355 
«me
 = 
ns
->
d©a
->name;

357 i‡(
	`sh™n⁄_°∫Àn
(
«me
, 
ns_∑th_Àn
) ==Çs_path_len) {

358 
	`sh™n⁄_îr
("VolumeÖathÅooÜong\n");

359 
ªt
 = -
EINVAL
;

360 
«me_îr‹
;

362 i‡(
	`sh™n⁄_°æí
(
«me
) != 0) {

363 
sh™n⁄_poﬁ
 *
p
;

364 
	`sh™n⁄_muãx_lock
(&
poﬁ_£m
);

365 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sh™n⁄_poﬁ_li°
, 
li°
) {

366 i‡(
p
->
id
 !
•oﬁ
->id)

367 
	`sh™n⁄_muãx_lock
(&
p
->
°©e_£m
);

368 i‡(
p
->
ns
) {

369 
i
;

370 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

371 
sh™n⁄_«me•a˚
 *
n
 = 
p
->
ns
[
i
];

372 i‡(!
n
)

374 i‡(!
	`°rcmp
(
«me
, 
n
->
d©a
->name)) {

375 
	`sh™n⁄_îr
("%sálso hasÇame %s\n",

376 
n
->
sdisk
.
disk_«me
,

377 
«me
);

378 i‡(
p
->
id
 !
•oﬁ
->id)

379 
	`sh™n⁄_muãx_u∆ock
(&
p
->
°©e_£m
);

380 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

381 
ªt
 = -
EEXIST
;

382 
«me_îr‹
;

386 i‡(
p
->
id
 !
•oﬁ
->id)

387 
	`sh™n⁄_muãx_u∆ock
(&
p
->
°©e_£m
);

389 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

390 
	`upd©e_ns_d©a
(
ns
);

393 
•oﬁ
->
ns
[ns->
idx
] =Çs;

394 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

395 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

396 i‡(
sdev
)

397 
	`sh™n⁄_m≠_èbÀ_íabÀ
(&
ns
->
sdisk
.
Õmt_¨øy
[
i
]);

400 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

401 
•oﬁ
->
poﬁ_öfo
->
ns_©åi1
[
ns
->
idx
] = 
	`make_ns_©åi1
“s->
sdisk
.
£˘‹s
,Çs->
max_i›s
);

402 
•oﬁ
->
poﬁ_öfo
->
ns_©åi2
[
ns
->
idx
] = 
	`make_ns_©åi2
“s->
sdisk
.
¥i‹ôy
,Çs->
£q_num
,Çs->
u£r_logicb_shi·
);

403 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

404 
	`upd©e_poﬁ_öfo
(
•oﬁ
);

406 
ªt
 = 
	`sh™n⁄_©èch_ns
(
•oﬁ
->
ns
[ns->
idx
]);

408 
ns_¨g
->
vﬁ_idx
 = 
ns
->
idx
;

409 
ns_¨g
->
£q_num
 = 
ns
->seq_num;

410 i‡(
ns_¨g
->
¥i‹ôy
 == 1) {

411 
	`sh™n⁄_©omic_öc
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
);

412 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) == 1)

413 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 32);

415 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

416 
ns_¨g
, (*ns_arg))) {

417 
	`sh™n⁄_îr
("Cannot copy dataÅo userspace.\n");

418  -
EFAULT
;

421 
out
;

422 
«me_îr‹
:

423 
	`sh™n⁄_m≠_èbÀ_‰ì_ns
(&
ns
->
sdisk
);

424 
öô_Áûed
:

426 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

427 
	`sh™n⁄_˛ór_bô
(
ns
->
idx
, &
•oﬁ
->
poﬁ_öfo
->
ns_bôm≠
);

428 
	`sh™n⁄_©omic_dec
(&
•oﬁ
->
ns_cou¡
);

429 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

430 
	`sh™n⁄_k‰ì
(
ns
);

432 
out
:

433 
	`sh™n⁄_k‰ì
(
ns_¨g
);

434  
ªt
;

435 
	}
}

437 
	$sh™n⁄_io˘l_£t_ns
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

439 
sh™n⁄_ns_¨g
 *
ns_¨g
;

440 
sh™n⁄_«me•a˚
 *
ns
;

441 
u32
 
ﬁd_max_i›s
;

442 
u16
 
ﬁd_¥i‹ôy
;

443 
u64
 
ﬁd_£˘‹s
;

444 
ªt
 = 0;

445 
idx
;

447 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

448 i‡(
ns_¨g
 =
NULL
) {

449 
	`sh™n⁄_îr
("AllocÇs_arg failed!\n");

450  -
ENOMEM
;

453 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_¨g
, (
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

454 (*
ns_¨g
))) {

455 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

456 
ªt
 = -
EFAULT
;

457 
out
;

461 i‡(((
ns_¨g
->
£âög
 & 
SET_SECTORS_MASK
Ë&& (ns_¨g->
£˘‹s
 <0)Ë|| (ns_¨g->
£q_num
 != 0) || \

462 ((
ns_¨g
->
£âög
 & 
SET_PRIORITY_MASK
Ë&& (“s_¨g->
¥i‹ôy
 < 0Ë|| (ns_¨g->¥i‹ôy >
PRIORITY_LEVELS
)))) {

463 
	`sh™n⁄_w¨n
("Wrongárguments: sectors=%d, seq_num=%d,Öriority=%d.\n",

464 
ns_¨g
->
£˘‹s
,Çs_¨g->
£q_num
,Çs_¨g->
¥i‹ôy
);

465 
ªt
 = -
EINVAL
;

466 
out
;

469 
idx
 = 
ns_¨g
->
vﬁ_idx
;

470 
ns
 = 
•oﬁ
->ns[
idx
];

471 i‡((
idx
 >
SHANNON_NS_NUM
Ë|| (
ns
 =
NULL
)) {

472 
	`sh™n⁄_îr
("«me•a˚ %d dÿnŸÉxi°.\n", 
idx
);

473 
ªt
 = -
EFAULT
;

474 
out
;

476 
ﬁd_max_i›s
 = 
ns
->
max_i›s
;

477 
ﬁd_¥i‹ôy
 = 
ns
->
sdisk
.
¥i‹ôy
;

478 
ﬁd_£˘‹s
 = 
ns
->
sdisk
.
£˘‹s
;

480 i‡(
ns_¨g
->
£âög
 & 
SET_MAX_IOPS_MASK
)

481 
ns
->
max_i›s
 = 
ns_¨g
->max_iops;

483 i‡(
ns_¨g
->
£âög
 & 
SET_PRIORITY_MASK
)

484 
ns
->
sdisk
.
¥i‹ôy
 = 
ns_¨g
->priority;

486 i‡(
ns_¨g
->
£âög
 & 
SET_SECTORS_MASK
) {

487 i‡(
ns_¨g
->
£˘‹s
 > 
ns
->
sdisk
.sectors) {

488 i‡((
ªt
 = 
	`sh™n⁄_m≠_èbÀ_ªsize
(&
ns
->
sdisk
, 
ns_¨g
->
£˘‹s
,Çs->
logicb_shi·
)) < 0) {

489 
	`sh™n⁄_îr
("CannotÑesize map_table forÇamespace.\n");

490 
ªt
 = -
ENOMEM
;

491 
£t_Áûed
;

493 
ns
->
sdisk
.
£˘‹s
 = 
ns_¨g
->sectors;

494 i‡(
ns
->
sdisk
.
gd
)

495 
	`sh™n⁄_£t_ˇ∑côy
(
ns
->
sdisk
.
gd
,Çs->sdisk.
£˘‹s
);

497 
	`sh™n⁄_îr
("%s:Çame•a˚ %dÅ¨gë se˘‹†mu° bêœrgêth™ cuºíà£˘‹s.\n", 
__func__
, 
idx
);

498 
ªt
 = -
EINVAL
;

499 
£t_Áûed
;

502 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

503 
•oﬁ
->
poﬁ_öfo
->
ns_©åi1
[
ns
->
idx
] = 
	`make_ns_©åi1
“s->
sdisk
.
£˘‹s
,Çs->
max_i›s
);

504 
•oﬁ
->
poﬁ_öfo
->
ns_©åi2
[
ns
->
idx
] = 
	`make_ns_©åi2
“s->
sdisk
.
¥i‹ôy
,Çs->
£q_num
,Çs->
u£r_logicb_shi·
);

505 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

506 
	`upd©e_poﬁ_öfo
(
•oﬁ
);

509 i‡(
ﬁd_¥i‹ôy
 =0 && 
ns
->
sdisk
.
¥i‹ôy
 == 1) {

510 
	`sh™n⁄_©omic_öc
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
);

511 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) == 1)

512 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 32);

513 } i‡(
ﬁd_¥i‹ôy
 =1 && 
ns
->
sdisk
.
¥i‹ôy
 == 0) {

514 
	`sh™n⁄_©omic_dec
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
);

515 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) == 0)

516 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 0);

518 
	`sh™n⁄_k‰ì
(
ns_¨g
);

521 
£t_Áûed
:

522 
ns
->
max_i›s
 = 
ﬁd_max_i›s
;

523 
ns
->
sdisk
.
¥i‹ôy
 = 
ﬁd_¥i‹ôy
;

524 
ns
->
sdisk
.
£˘‹s
 = 
ﬁd_£˘‹s
;

525 
out
:

526 
	`sh™n⁄_k‰ì
(
ns_¨g
);

527  
ªt
;

528 
	}
}

530 
	$sh™n⁄_©èch_ns
(
sh™n⁄_«me•a˚
 *
ns
)

532 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

534 i‡(
sdisk
->
gd
) {

535 
	`sh™n⁄_îr
("gídisk /dev/%†ÆªadyÉxi°s.\n", 
sdisk
->
disk_«me
);

536  -
EEXIST
;

538 
sdisk
->
gd
 = 
	`sh™n⁄_Æloc_disk
(
SHANNON_NS_NUM
);

539 i‡(!
sdisk
->
gd
) {

540 
	`sh™n⁄_îr
("%s:áŒoc_disk faûed.\n", 
sdisk
->
disk_«me
);

541  -
ENOMEM
;

543 i‡(
ns
->
poﬁ
->
ac˚ss_mode
 =
SHN_MODE_READONLY
)

544 
	`sh™n⁄_£t_disk_ro
(
sdisk
->
gd
, 1);

547 
sdisk
->
queue
 = 
	`sh™n⁄_¸óã_blkqueue
(
ns
, &sdisk->
queue_lock
, 1);

548 i‡(!
sdisk
->
queue
) {

549 
	`sh™n⁄_îr
("create_blkqueue failed!\n");

550 
	`sh™n⁄_put_disk
(
sdisk
->
gd
);

551  -
ENOMEM
;

553 
	`sh™n⁄_åim_£âög
(
sdisk
->
queue
);

554 
	`sh™n⁄_rŸ©i⁄Æ_£âög
(
sdisk
->
queue
);

555 
	`sh™n⁄_blk_queue_max_hw_£˘‹s
(
sdisk
->
queue
, 
SHN_BLK_DEF_MAX_SECTORS
);

556 
	`sh™n⁄_blk_queue_block_size
(
sdisk
->
queue
, 
ns
->
u£r_logicb_size
,Çs->
logicb_size
);

557 
	`sh™n⁄_blk_queue_io_mö
(
sdisk
->
queue
, 
ns
->
logicb_size
);

558 
	`sh™n⁄_blk_queue_io_›t
(
sdisk
->
queue
, 
ns
->
logicb_size
 *Çs->
°rù_size
);

559 
	`sh™n⁄_öô_gídisk
(
sdisk
->
gd
, sdisk->
disk_«me
, 
ns
->
maj‹
, 
SPOOL_MINORS
,

560 
ns
->
idx
 * 
SPOOL_MINORS
, 
sdisk
->
queue
,Çs);

561 
	`sh™n⁄_£t_ˇ∑côy
(
sdisk
->
gd
, sdisk->
£˘‹s
);

562 
sdisk
->
©èched
 = 
SHN_DISK_INATTACH
;

563 
	`sh™n⁄_add_disk
(
sdisk
->
gd
);

564 i‡(
ns
->
poﬁ
->
sysfs_öô_d⁄e
 == 0)

565 
	`sh™n⁄_îr
("%s: cannotádd kobjectÅo sysfs,Öool sysfs init failed.\n",

566 
ns
->
sdisk
.
disk_«me
);

567 i‡(
	`sh™n⁄_sysfs_öô_ns
(&
ns
->
sysfs_kobj
)) {

568 
	`sh™n⁄_îr
("%s:ádd kobje˘Åÿsysf†Áûed.\n", 
ns
->
sdisk
.
disk_«me
);

570 
	`debugs1
("%s: sysf†obje˘ inô d⁄e.\n", 
ns
->
sdisk
.
disk_«me
);

571 
ns
->
sysfs_öô_d⁄e
 = 1;

574 
sdisk
->
©èched
 = 
SHN_DISK_ATTACHED
;

575 
	`sh™n⁄_öfo
("AâachedÇame•a˚ %s\n", 
sdisk
->
disk_«me
);

578 
	}
}

580 
	$sh™n⁄_io˘l_©èch_ns
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

582 
sh™n⁄_ns_¨g
 *
ns_¨g
;

583 
sh™n⁄_«me•a˚
 *
ns
;

584 
idx
, 
ªt
 = 0;

586 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

587 i‡(
ns_¨g
 =
NULL
)

588  -
ENOMEM
;

590 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_¨g
, (
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

591 (*
ns_¨g
))) {

592 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

593 
ªt
 = -
EFAULT
;

594 
out
;

596 
idx
 = 
ns_¨g
->
vﬁ_idx
;

597 
ns
 = 
•oﬁ
->ns[
idx
];

598 i‡((
idx
 >
SHANNON_NS_NUM
Ë|| (
ns
 =
NULL
)) {

599 
	`sh™n⁄_îr
("«me•a˚ %d dÿnŸÉxi°.\n", 
idx
);

600 
ªt
 = -
EFAULT
;

601 
out
;

603 
ªt
 = 
	`sh™n⁄_©èch_ns
(
ns
);

605 
out
:

606 
	`sh™n⁄_k‰ì
(
ns_¨g
);

607  
ªt
;

608 
	}
}

610 
	$sh™n⁄_dëach_ns
(
sh™n⁄_«me•a˚
 *
ns
)

612 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

613 
sdisk
->
©èched
 = 
SHN_DISK_DETACHED
;

614 
	`°›_¥öt_œãncy_timî
(
sdisk
);

615 i‡(
sdisk
->
gd
) {

616 i‡(
ns
->
sysfs_öô_d⁄e
) {

617 
ns
->
sysfs_öô_d⁄e
 = 0;

618 
	`sh™n⁄_sysfs_exô_ns
(&
ns
->
sysfs_kobj
);

620 
ns
->
ho°_wrôe_£˘‹s_hi°‹y
 +
	`sh™n⁄_wrôe_£˘‹s
(
sdisk
->
gd
);

621 
ns
->
ho°_ªad_£˘‹s_hi°‹y
 +
	`sh™n⁄_ªad_£˘‹s
(
sdisk
->
gd
);

622 
	`sh™n⁄_dñ_gídisk
(
sdisk
->
gd
);

623 
	`sh™n⁄_put_disk
(
sdisk
->
gd
);

624 
	`sh™n⁄_öfo
("Dëached Dúe˘-IO PCIêFœsh devi˚ %†‰om OS.\n", 
sdisk
->
disk_«me
);

625 
sdisk
->
gd
 = 
NULL
;

627 i‡(
sdisk
->
queue
) {

628 
	`sh™n⁄_blk_˛ónup_queue
(
sdisk
->
queue
);

629 
sdisk
->
queue
 = 
NULL
;

631 
	}
}

634 
	$sh™n⁄_io˘l_dëach_ns
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

636 
sh™n⁄_ns_¨g
 *
ns_¨g
;

637 
sh™n⁄_«me•a˚
 *
ns
;

638 
idx
, 
ªt
 = 0;

639 
ﬁd_©èched
 = 0;

641 
ns_¨g
 = 
	`sh™n⁄_kzÆloc
((*ns_¨g), 
GFP_SHANNON
);

642 i‡(
ns_¨g
 =
NULL
) {

643 
	`sh™n⁄_îr
("AllocÇs_arg failed!\n");

644  -
ENOMEM
;

647 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_¨g
, (
sh™n⁄_ns_¨g
 * 
__u£r
)
¨g
,

648 (*
ns_¨g
))) {

649 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

650 
ªt
 = -
EFAULT
;

651 
out
;

653 
idx
 = 
ns_¨g
->
vﬁ_idx
;

654 
ns
 = 
•oﬁ
->ns[
idx
];

655 i‡((
idx
 >
SHANNON_NS_NUM
Ë|| (
ns
 =
NULL
)) {

656 
	`sh™n⁄_îr
("«me•a˚ %d dÿnŸÉxi°.\n", 
idx
);

657 
ªt
 = -
EFAULT
;

658 
out
;

660 i‡((
	`sh™n⁄_©omic_ªad
(&
ns
->
u£rs
Ë> 1Ë|| 
	`sh™n⁄_bio_ö_Êight_ns
(ns)) {

661 
	`sh™n⁄_îr
("ns->users=%d, bio_in_flight_ns=%d.\n",

662 
	`sh™n⁄_©omic_ªad
(&
ns
->
u£rs
),

663 
	`sh™n⁄_bio_ö_Êight_ns
(
ns
));

664 
ªt
 = -
EBUSY
;

665 
out
;

667 
ﬁd_©èched
 = 
ns
->
sdisk
.
©èched
;

668 
ns
->
sdisk
.
©èched
 = 
SHN_DISK_DETACHED
;

669 
	`sh™n⁄_b¨rõr
();

670 i‡((
	`sh™n⁄_©omic_ªad
(&
ns
->
u£rs
Ë> 1Ë|| 
	`sh™n⁄_bio_ö_Êight_ns
(ns)) {

671 
	`sh™n⁄_îr
("ns->users=%d, bio_in_flight_ns=%d.\n",

672 
	`sh™n⁄_©omic_ªad
(&
ns
->
u£rs
),

673 
	`sh™n⁄_bio_ö_Êight_ns
(
ns
));

674 
ªt
 = -
EBUSY
;

675 
ns
->
sdisk
.
©èched
 = 
ﬁd_©èched
;

676 
out
;

679 
	`sh™n⁄_dëach_ns
(
ns
);

681 
out
:

682 
	`sh™n⁄_k‰ì
(
ns_¨g
);

683  
ªt
;

684 
	}
}

686 
	$sh™n⁄_io˘l_gë_ns_°©us
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

688 
sh™n⁄_ns_°©us
 *
ns_°©us
;

689 
sh™n⁄_«me•a˚
 *
ns
;

690 
ªt
 = 0;

692 
ns_°©us
 = 
	`sh™n⁄_kzÆloc
((*ns_°©us), 
GFP_SHANNON
);

693 i‡(
ns_°©us
 =
NULL
) {

694 
	`sh™n⁄_îr
("Cannotállocate volume status.\n");

695  -
ENOMEM
;

697 i‡(
	`sh™n⁄_c›y_‰om_u£r
(
ns_°©us
, (
sh™n⁄_ns_°©us
 * 
__u£r
)
¨g
,

698 (*
ns_°©us
))) {

699 
	`sh™n⁄_îr
("Cannot get data from userspace.\n");

700 
ªt
 = -
EFAULT
;

701 
out
;

703 
ns
 = 
•oﬁ
->ns[
ns_°©us
->
idx
];

704 i‡((
ns_°©us
->
idx
 >
SHANNON_NS_NUM
Ë|| (
ns
 =
NULL
)) {

705 
	`sh™n⁄_îr
("«me•a˚ %d dÿnŸÉxi°.\n", 
ns_°©us
->
idx
);

706 
ªt
 = -
EFAULT
;

707 
out
;

710 
ns_°©us
->
poﬁ_id
 = 
•oﬁ
->
id
;

711 
ns_°©us
->
max_i›s
 = 
ns
->max_iops;

712 
ns_°©us
->
¥i‹ôy
 = 
ns
->
sdisk
.priority;

713 
ns_°©us
->
£˘‹s
 = 
ns
->
sdisk
.sectors;

714 
ns_°©us
->
£q_num
 = 
ns
->seq_num;

715 
ns_°©us
->
block_shi·
 = 
ns
->
u£r_logicb_shi·
;

716 
ns_°©us
->
°rù_size
 = 
ns
->strip_size;

717 
ns_°©us
->
vÆid_£˘‹s
 = 
	`gë_sdisk_vÆid_logicbs
(&
ns
->
sdisk
Ë<< (ns->
logicb_shi·
 - 9);

718 
ns_°©us
->
°©e
 = 
ns
->
sdisk
.
gd
 ? 
SHN_STATE_ATTACHED
 : 
SHN_STATE_DETACHED
;

720 
	`ns_upd©e_io_°©i°ics
(
ns
);

721 
ns_°©us
->
ho°_ªad_b™dwidth
 = 
ns
->host_read_bandwidth;

722 
ns_°©us
->
ho°_ªad_i›s
 = 
ns
->host_read_iops;

723 
ns_°©us
->
ho°_ªad_œãncy
 = 
ns
->host_read_latency;

724 
ns_°©us
->
ho°_wrôe_b™dwidth
 = 
ns
->host_write_bandwidth;

725 
ns_°©us
->
ho°_wrôe_i›s
 = 
ns
->host_write_iops;

726 
ns_°©us
->
ho°_wrôe_œãncy
 = 
ns
->host_write_latency;

728 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_ns_°©us
 * 
__u£r
)
¨g
,

729 
ns_°©us
, (*ns_status))) {

730 
	`sh™n⁄_îr
("Cannot copy dataÅo userspace.\n");

731 
ªt
 = -
EFAULT
;

732 
out
;

734 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_ns_d©a
 * 
__u£r
)
ns_°©us
->
d©a
,

735 
ns
->
d©a
, (*(ns->data)))) {

736 
	`sh™n⁄_îr
("Cannot copyÇs dataÅo userspace.\n");

737 
ªt
 = -
EFAULT
;

740 
out
:

741 
	`sh™n⁄_k‰ì
(
ns_°©us
);

742  
ªt
;

743 
	}
}

746 
	$£t_poﬁ_ro
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
ªad⁄ly
)

748 
sh™n⁄_«me•a˚
 *
ns
;

749 
i
;

751 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

752 
ns
 = 
•oﬁ
->ns[
i
];

753 i‡(
ns
 &&Çs->
sdisk
.
gd
)

754 
	`sh™n⁄_£t_disk_ro
(
ns
->
sdisk
.
gd
, 
ªad⁄ly
);

756 
	}
}

758 
	$gë_sdev_ªad⁄ly_ªas⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
)

760 
sh™n⁄_dev
 *
sdev
;

761 
sdev_ªas⁄
 = 0;

762 
i
;

764 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

765 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

766 i‡(
sdev
)

767 
sdev_ªas⁄
 |
sdev
->
ªad⁄ly_ªas⁄
;

769  
sdev_ªas⁄
;

770 
	}
}

772 
	$•oﬁ_upd©e_ac˚ss_mode
(
sh™n⁄_poﬁ
 *
•oﬁ
)

774 
u64
 
ªad⁄ly_ªas⁄
, 
sdev_ªas⁄
;

776 
sdev_ªas⁄
 = 
	`gë_sdev_ªad⁄ly_ªas⁄
(
•oﬁ
);

777 
ªad⁄ly_ªas⁄
 = 
•oﬁ
->ªad⁄ly_ªas⁄ | 
sdev_ªas⁄
;

778 i‡(
ªad⁄ly_ªas⁄
) {

779 
•oﬁ
->
ac˚ss_mode
 = 
SHN_MODE_READONLY
;

780 
	`sh™n⁄_w¨n
("pool->readonly_reason=0x%lx, sdev->readonly_reason=0x%lx.\n",

781 
•oﬁ
->
ªad⁄ly_ªas⁄
, 
sdev_ªas⁄
);

782 
	`sh™n⁄_w¨n
("SëáŒÇame•a˚ i¿poﬁ %dÅÿªad⁄ly!", 
•oﬁ
->
id
);

783 
	`£t_poﬁ_ro
(
•oﬁ
, 1);

785 
•oﬁ
->
ac˚ss_mode
 = 
SHN_MODE_READWRITE
;

786 
	`£t_poﬁ_ro
(
•oﬁ
, 0);

788  
•oﬁ
->
ac˚ss_mode
;

789 
	}
}

792 
	$c›y_poﬁ_öfo
(
sh™n⁄_poﬁ_öfo
 *
to
, sh™n⁄_poﬁ_öfÿ*
‰om
)

794 
i
;

795 
to
->
upd©e_cou¡
 = 
	`sh™n⁄_mem_ªadl
(&
‰om
->update_count);

796 
to
->
cur_ns_£q_num
 = 
	`sh™n⁄_mem_ªadw
(&
‰om
->cur_ns_seq_num);

797 
to
->
avaûabÀ_ˇ∑côy
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->available_capacity);

798 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

799 
to
->
ns_©åi1
[
i
] = 
	`sh™n⁄_mem_ªadq
(
‰om
->ns_attri1 + i);

800 
to
->
ns_©åi2
[
i
] = 
	`sh™n⁄_mem_ªadl
(
‰om
->ns_attri2 + i);

801 
to
->
ns_©åi3
[
i
] = 
	`sh™n⁄_mem_ªadl
(
‰om
->ns_attri3 + i);

803 
i
 = 0; i < (
SHANNON_NS_NUM
+63)/64; i++) {

804 
to
->
ns_bôm≠
[
i
] = 
	`sh™n⁄_mem_ªadq
(
‰om
->ns_bitmap + i);

806 
	}
}

808 
	$c›y_ns_d©a
(
sh™n⁄_ns_d©a
 *
to
, sh™n⁄_ns_d©®*
‰om
)

810 
to
->
vîsi⁄
 = 
	`sh™n⁄_mem_ªadq
(&
‰om
->version);

811 
	`sh™n⁄_mem˝y
(
to
->
«me
, 
‰om
->name, (to->name));

812 
	}
}

814 
	$upd©e_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
)

816 
sh™n⁄_dev
 *
sdev
;

817 
i
;

819 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

820 
•oﬁ
->
poﬁ_öfo
->
upd©e_cou¡
++;

821 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

823 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

824 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

825 i‡(
sdev
 =
NULL
)

827 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

828 
	`upd©e_poﬁ_öfo_g5
(
sdev
, 0);

830 
	`upd©e_poﬁ_öfo_g4
(
sdev
, 
•oﬁ
);

832 
	}
}

834 
	$ªcovî_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
±r
)

836 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
;

838 i‡(!
•oﬁ
 || !
±r
) {

839 
	`sh™n⁄_îr
("•oﬁ=0x%Õ,Öå=0x%Õ.\n", 
•oﬁ
, 
±r
);

842 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

843 
poﬁ_öfo
 = (
sh™n⁄_poﬁ_öfo
 *)
±r
;

844 i‡(
	`sh™n⁄_mem_ªadl
(&
poﬁ_öfo
->
upd©e_cou¡
Ë> 
•oﬁ
->pool_info->update_count) {

845 
	`c›y_poﬁ_öfo
(
•oﬁ
->
poﬁ_öfo
,Öool_info);

846 
•oﬁ
->
avaûabÀ_ˇ∑côy
 = spoﬁ->
poﬁ_öfo
->available_capacity;

848 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

850 
	}
}

852 
	$upd©e_ns_d©a_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

854 
sh™n⁄_«me•a˚
 *
ns
 = 
sbio
->
d©a
;

855 
sh™n⁄_dev
 *
sdev
 = 
ns
->
poﬁ
->
sdevs
[0];

856 
sh™n⁄_ªque°
 *
ªq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
sbio
->
ªq_li°
, shannon_request,

857 
bio_li°
);

858 
sh™n⁄_sb
 *
sb
;

860 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

861 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
 / sdev->
logicbs_ö_siblög_eblock
;

862 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

863 
	`sh™n⁄_•ö_lock_bh
(&
ns
->
d©a_lock
);

864 
	`£t_vÆid
(
sdev
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

865 i‡(
ns
->
d©a_pba
.
lun_pba
 != 0x03ffffff)

866 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ns
->
d©a_pba
.
lun
,Çs->d©a_pba.
lun_pba
);

867 
ns
->
d©a_pba
 = 
ªq
->
pba
;

868 
	`sh™n⁄_•ö_u∆ock_bh
(&
ns
->
d©a_lock
);

870 
	`sh™n⁄_öfo
("%s:Üun=%d,Üun_pba=%d.\n", 
__func__
, 
ªq
->
pba
.
lun
,Ñeq->pba.
lun_pba
);

871 
	`sh™n⁄_©omic_sub
(1, &
sb
->
ö_wrôe_logicbs
);

873 
	`sh™n⁄_dma_unm≠_sögÀ
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, 4096, 
SHANNON_DMA_TODEVICE
);

874 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
vút_addr
);

875 
	`‰ì_ªq
(
ªq
);

876 
	`‰ì_sbio
(
sbio
);

877 
ns
->
upd©e_ns_d©a_d⁄e
 = 1;

878 
	`sh™n⁄_wake_up
(&
ns
->
upd©e_ns_d©a_d⁄e_evít
);

879 
	}
}

884 
	$upd©e_ns_d©a
(
sh™n⁄_«me•a˚
 *
ns
)

886 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

887 
sh™n⁄_dev
 *
sdev
 = 
ns
->
poﬁ
->
sdevs
[0];

888 
sh™n⁄_bio
 *
sbio
;

889 *
buf
 = 
	`Æloc_logicb_buf
(
sdev
, 
GFP_SHANNON
);

890 
°ack_size
 = (()&°ack_sizeË& (
THREAD_SIZE
-1);

891 
°ack_size
 = 
THREAD_SIZE
 - stack_size;

893 
ns
->
d©a
->
vîsi⁄
++;

894 
	`c›y_ns_d©a
(
buf
, 
ns
->
d©a
);

896 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

897 
	`£t_sbio_debug_èg
(
sbio
, 
UPDATE_NS_DATA_TAG
);

898 
sbio
->
logicbs
 = 1;

899 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

900 
sbio
->
ˇŒback
 = 
upd©e_ns_d©a_ˇŒback
;

901 
sbio
->
may_¶ìp_ö_ˇŒback
 = 1;

902 
sbio
->
d©a
 = 
ns
;

904 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

905 
ªq
->
sbio
 = sbio;

906 
	`£t_ªq_debug_èg
(
ªq
, 
UPDATE_NS_DATA_TAG
, 0);

907 
ªq
->
›code
 = 
sh_cmd_wrôe
;

908 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

909 
ªq
->
d©©y≥
 = 
lba_ty≥
[
sdev
->
lba_f‹m©
];

910 i‡(
sdev
->
u£_duÆ_hód
)

911 
ªq
->
hód
 = 
COLD_HEAD
;

913 
ªq
->
hód
 = 
HOT_HEAD
;

914 
ªq
->
lba
 = 
övÆid_lba
[
sdev
->
lba_f‹m©
];

915 
ªq
->
ns_id
 = 
ns
->
idx
;

916 
ªq
->
ns_£q_num
 = 
ns
->
£q_num
;

917 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_sögÀ
(
sdev
->
pci_dev
, 
buf
, (*(
ns
->
d©a
)),

918 
SHANNON_DMA_TODEVICE
);

919 
ªq
->
vút_addr
 = 
buf
;

920 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

921 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

922 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

923 
ns
->
upd©e_ns_d©a_d⁄e
 = 0;

924 
	`add_wrôe_ªq_to_ªque°_queue_èû
(
sdev
, 
ªq
, 
ns
->
sdisk
.
¥i‹ôy
);

925 i‡(
°ack_size
 > 4096)

926 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

928 
	`sh™n⁄_pick_ªque°
(
sdev
, 1);

929 i‡(
sdev
->
u£_duÆ_hód
)

930 
	`mod_fûl_chunk_timî
(
sdev
, (1<<
COLD_INDEX
));

932 
	`mod_fûl_chunk_timî
(
sdev
, (1<<
HOT_INDEX
));

933 
	`sh™n⁄_waô_evít
(
ns
->
upd©e_ns_d©a_d⁄e_evít
,Çs->
upd©e_ns_d©a_d⁄e
 != 0);

935 
	}
}

937 
	$Æloc_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
)

939 
•oﬁ
->
ns
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_«me•a˚
 *Ë* 
SHANNON_NS_NUM
, 
GFP_SHANNON
);

940 i‡(
•oﬁ
->
ns
 =
NULL
) {

941 
	`sh™n⁄_îr
("Alloc spool->ns failed!\n");

942  -
ENOMEM
;

944 
•oﬁ
->
ns_d©a
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_ns_d©a
Ë* 
SHANNON_NS_NUM
, 
GFP_SHANNON
);

945 i‡(
•oﬁ
->
ns_d©a
 =
NULL
) {

946 
	`sh™n⁄_îr
("Alloc spool->ns_data failed\n");

947 
	`sh™n⁄_k‰ì
(
•oﬁ
->
ns
);

948  -
ENOMEM
;

950 
•oﬁ
->
poﬁ_öfo
 = 
	`sh™n⁄_kzÆloc
(65536, 
GFP_SHANNON
);

951 i‡(
•oﬁ
->
poﬁ_öfo
 =
NULL
) {

952 
	`sh™n⁄_îr
("AllocÖool_info failed!\n");

953 
	`sh™n⁄_k‰ì
(
•oﬁ
->
ns
);

954 
	`sh™n⁄_k‰ì
(
•oﬁ
->
ns_d©a
);

955  -
ENOMEM
;

957 
•oﬁ
->
poﬁ_öfo
->
cur_ns_£q_num
 = 1;

959 
	}
}

961 
	$ªÀa£_poﬁ_öfo
(
sh™n⁄_poﬁ
 *
•oﬁ
)

963 
	`sh™n⁄_k‰ì
(
•oﬁ
->
ns
);

964 
	`sh™n⁄_k‰ì
(
•oﬁ
->
ns_d©a
);

965 
	`sh™n⁄_k‰ì
(
•oﬁ
->
poﬁ_öfo
);

966 
	}
}

967 
	$‰ì_•oﬁ
(
sh™n⁄_©omic_t
 *
ªfcou¡
)

969 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`c⁄èöî_of
(
ªfcou¡
, shannon_pool,Ñefcount);

971 
	`sh™n⁄_öfo
("thêªfcou¡ o‡poﬁ %d de¸ó£Åÿ0.\n", 
•oﬁ
->
id
);

972 
	`ªÀa£_poﬁ_öfo
(
•oﬁ
);

973 
	`sh™n⁄_k‰ì
(
•oﬁ
);

974 
	}
}

976 
sh™n⁄_poﬁ
 *
	$•oﬁ_gë_ª„ªn˚
(
sh™n⁄_poﬁ
 *
•oﬁ
)

978 i‡(!
•oﬁ
)

979  
NULL
;

980 
	`gë_ªfcou¡
(&
•oﬁ
->
ªfcou¡
);

981 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
ªfcou¡
) == 1) {

982 
	`put_ªfcou¡
(&
•oﬁ
->
ªfcou¡
, 
‰ì_•oﬁ
);

983  
NULL
;

985  
•oﬁ
;

986 
	}
}

988 
	$•oﬁ_put_ª„ªn˚
(
sh™n⁄_poﬁ
 *
•oﬁ
)

990 
	`put_ªfcou¡
(&
•oﬁ
->
ªfcou¡
, 
‰ì_•oﬁ
);

991 
	}
}

994 
ªf‹m©
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_f‹m©_¨g2
 *
Árg
);

995 
sh™n⁄_poﬁ
 *
	$Æloc_poﬁ
(
sdev_cou¡
, 
u64
 
w©îm¨k
)

997 
sh™n⁄_poﬁ
 *
p
 = 
NULL
;

998 
ªåy
:

999 
p
 = 
	`sh™n⁄_kzÆloc
((*pË+ (
sh™n⁄_dev
 *Ë* 
sdev_cou¡
, 
GFP_SHANNON
);

1000 i‡(!
p
) {

1001 
	`sh™n⁄_w¨n
("Alloc shannon_pool failed!\n");

1002 
	`sh™n⁄_m¶ìp
(5);

1003 
ªåy
;

1005 i‡(
	`Æloc_poﬁ_öfo
(
p
) < 0) {

1006 
	`sh™n⁄_k‰ì
(
p
);

1007  
NULL
;

1010 
	`sh™n⁄_muãx_öô
(&
p
->
°©e_£m
);

1011 
	`sh™n⁄_muãx_öô
(&
p
->
poﬁ_öfo_£m
);

1012 
	`sh™n⁄_©omic_£t
(&
p
->
ªfcou¡
, 1);

1013 
	`sh™n⁄_©omic_£t
(&
p
->
ns_cou¡
, 0);

1014 
	`sh™n⁄_©omic_£t
(&
p
->
high_¥i‹ôy_ns_cou¡
, 0);

1015 
	`sh™n⁄_©omic64_£t
(&
p
->
u£d_logicbs
, 0);

1016 
	`sh™n⁄_©omic_£t
(&
p
->
ªcovî_ns_d©a_d⁄e
, 0);

1017 
	`sh™n⁄_öô_waôqueue_hód
(&
p
->
ªcovî_ns_d©a_d⁄e_evít
);

1018 
p
->
avaûabÀ_ˇ∑côy
 = 0;

1019 
p
->
physiˇl_ˇ∑côy
 = 0;

1020 
p
->
w©îm¨k
 = watermark;

1021 
p
->
id
 = 
	`sh™n⁄_föd_fú°_zîo_bô
(&
poﬁ_bôm≠
, 
MAX_POOL_COUNT
);

1022 i‡(
p
->
id
 =
MAX_POOL_COUNT
) {

1023 
	`sh™n⁄_îr
("⁄ly suµ‹à%dÖoﬁs.\n", 
MAX_POOL_COUNT
);

1024 
	`put_ªfcou¡
(&
p
->
ªfcou¡
, 
‰ì_•oﬁ
);

1025  
NULL
;

1027 
	`sh™n⁄_£t_bô
(
p
->
id
, &
poﬁ_bôm≠
);

1028 
p
->
sdev_cou¡
 = sdev_count;

1029 
p
->
⁄löe_sdev_cou¡
 = 0;

1030 
p
->
maj‹
 = 
	`sh™n⁄_ªgi°î_blkdev
(0, "shannon");

1031 
	`debugs0
("maj‹=%d.\n", 
p
->
maj‹
);

1032 
	`sh™n⁄_¢¥ötf
(
p
->
cdev_«me
, 16, "poﬁ%d",Ö->
id
);

1033 
	`sh™n⁄_¢¥ötf
(
p
->
nodíame
, 32, "sh™n⁄/%s",Ö->
cdev_«me
);

1034 
	`sh™n⁄_¸óã_miscdevi˚
(&
p
->
misc
,Ö->
cdev_«me
,Ö->
nodíame
, 
FOR_POOL
);

1035 i‡(
	`sh™n⁄_sysfs_öô_poﬁ
(&
p
->
sysfs_kobj
)) {

1036 
	`sh™n⁄_îr
("%s:ádd kobje˘Åÿsysf†Áûed.\n", 
p
->
cdev_«me
);

1038 
	`debugs1
("%s: sysf†obje˘ inô d⁄e.\n", 
p
->
cdev_«me
);

1039 
p
->
sysfs_öô_d⁄e
 = 1;

1041  
p
;

1042 
	}
}

1044 
	$ªÀa£_poﬁ
(
sh™n⁄_poﬁ
 *
•oﬁ
)

1046 
i
;

1048 i‡(
•oﬁ
->
maj‹
 > 0)

1049 
	`sh™n⁄_uƒegi°î_blkdev
(
•oﬁ
->
maj‹
, "shannon");

1050 
	`sh™n⁄_˛ór_bô
(
•oﬁ
->
id
, &
poﬁ_bôm≠
);

1051 i‡(
•oﬁ
->
ns
) {

1052 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

1053 i‡(
•oﬁ
->
ns
[
i
]) {

1054 
sh™n⁄_«me•a˚
 *
ns
 = 
•oﬁ
->ns[
i
];

1055 
	`sh™n⁄_dëach_ns
(
ns
);

1056 
•oﬁ
->
ns
[
i
] = 
NULL
;

1057 
	`sh™n⁄_b¨rõr
();

1058 
	`sh_de¸ó£_u£rs_ns
(
ns
);

1062 i‡(
•oﬁ
->
sysfs_öô_d⁄e
) {

1063 
	`sh™n⁄_sysfs_exô_poﬁ
(&
•oﬁ
->
sysfs_kobj
);

1066 
	`sh™n⁄_de°roy_miscdevi˚
(&
•oﬁ
->
misc
);

1067 
	`put_ªfcou¡
(&
•oﬁ
->
ªfcou¡
, 
‰ì_•oﬁ
);

1068 
	}
}

1070 
	$ªÀa£_poﬁ_°ru˘
(
sh™n⁄_poﬁ
 *
•oﬁ
)

1072 i‡(
•oﬁ
 =
NULL
)

1075 i‡(--
•oﬁ
->
⁄löe_sdev_cou¡
 == 0) {

1076 
	`sh™n⁄_muãx_lock
(&
poﬁ_£m
);

1077 
	`sh™n⁄_li°_dñ
(&
•oﬁ
->
li°
);

1078 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

1079 
	`sh™n⁄_memblock_poﬁ_dec_maxt
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1080 
	`sh™n⁄_memblock_poﬁ_dec_maxt
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1081 
	`ªÀa£_poﬁ
(
•oﬁ
);

1084 
	}
}

1086 
	$dñëe_poﬁ
(
sh™n⁄_poﬁ
 *
•oﬁ
)

1088 
i
, 
ªt
 = 0;

1089 
sh™n⁄_f‹m©_¨g2
 *
f‹m©_¨g2
;

1091 i‡(!
•oﬁ
) {

1092 
	`sh™n⁄_îr
("ThisÖool doesÇotÉxist!\n");

1093  -
EINVAL
;

1096 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
ns_cou¡
Ë&& spoﬁ->
⁄löe_sdev_cou¡
 =•oﬁ->
sdev_cou¡
) {

1097 
	`sh™n⁄_w¨n
("Warning: Cannot deleteÖool. %dÇamespaceáre in use.\n",

1098 
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
ns_cou¡
));

1099  -
EBUSY
;

1102 
f‹m©_¨g2
 = 
	`sh™n⁄_kzÆloc
((*f‹m©_¨g2), 
GFP_SHANNON
);

1103 i‡(
f‹m©_¨g2
 =
NULL
) {

1104 
	`sh™n⁄_îr
("Cannotállocate memory for format_arg2.\n");

1105  -
ENOMEM
;

1108 
	`sh™n⁄_muãx_lock
(&
poﬁ_£m
);

1109 
	`sh™n⁄_li°_dñ
(&
•oﬁ
->
li°
);

1110 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

1112 
	`sh™n⁄_memblock_poﬁ_dec_maxt
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1113 
	`sh™n⁄_memblock_poﬁ_dec_maxt
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1115 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1116 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

1117 
sh™n⁄_dev
 *
sdev
 = 
•oﬁ
->
sdevs
[
i
];

1118 i‡(!
sdev
)

1121 i‡(
	`sh™n⁄_Æloc_m≠_èbÀ
(&
sdev
->
sdisk
, sdev->sdisk.
£˘‹s
, sdev->
logicb_shi·
)) {

1122 
ªt
 = -
ENOMEM
;

1123 
	`sh™n⁄_îr
("cannotállocateÉnough memory for map_table!\n");

1125 
	`sdev_m≠_èbÀ_íabÀ
(
sdev
);

1126 
	`sh™n⁄_öô_blk_queue
(
sdev
);

1127 
	`sh™n⁄_b¨rõr
();

1128 
•oﬁ
->
sdevs
[
i
] = 
NULL
;

1129 
sdev
->
•oﬁ
 = 
NULL
;

1131 
sdev
->
mbr
.
sdev_id
 = 0;

1132 
sdev
->
mbr
.
sdev_cou¡
 = 0;

1133 
sdev
->
mbr
.
poﬁ_w©îm¨k
 = 0;

1134 i‡(
	`ªf‹m©
(
sdev
, 
f‹m©_¨g2
)) {

1135 
ªt
 = -
EFAULT
;

1136 
	`sh™n⁄_îr
("ªf‹m© devi˚ %d faûed!\n", 
i
);

1140 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1141 
	`ªÀa£_poﬁ
(
•oﬁ
);

1142 
	`sh™n⁄_k‰ì
(
f‹m©_¨g2
);

1143  
ªt
;

1144 
	}
}

1146 
sh™n⁄_poﬁ
 *
	$föd_poﬁ_f‹_sdev
(
sh™n⁄_dev
 *
sdev
)

1148 
u64
 
w©îm¨k
 = 
sdev
->
mbr
.
poﬁ_w©îm¨k
;

1149 
sh™n⁄_poﬁ
 *
p
;

1150 i‡(!
w©îm¨k
) {

1151 
	`sh™n⁄_öfo
("Thêpoﬁ_w©îm¨k o‡devi˚ %†i†NULL.\n", 
sdev
->
cdev_«me
);

1152  
NULL
;

1154 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sh™n⁄_poﬁ_li°
, 
li°
)

1155 i‡(
p
->
w©îm¨k
 == watermark)

1156  
p
;

1157 
p
 = 
	`Æloc_poﬁ
(
sdev
->
mbr
.
sdev_cou¡
, 
w©îm¨k
);

1158 
	`sh™n⁄_li°_add_èû
(&
p
->
li°
, &
sh™n⁄_poﬁ_li°
);

1159  
p
;

1160 
	}
}

1162 
sh™n⁄_poﬁ
 *
	$föd_sh™n⁄_poﬁ
(
u16
 
poﬁ_id
)

1164 
sh™n⁄_poﬁ
 *
•oﬁ
;

1165 
	`sh™n⁄_li°_f‹_óch_íåy
(
•oﬁ
, &
sh™n⁄_poﬁ_li°
, 
li°
)

1166 i‡(
poﬁ_id
 =
•oﬁ
->
id
)

1167  
•oﬁ
;

1168  
NULL
;

1169 
	}
}

1171 
sh™n⁄_dev
 *
	$föd_sh™n⁄_dev
(
u8
 
id
)

1173 
sh™n⁄_dev
 *
sdev
;

1174 
	`sh™n⁄_li°_f‹_óch_íåy
(
sdev
, &
sh™n⁄_dev_li°
, 
li°
)

1175 i‡(
sdev
->
drive_no
 =
id
)

1176  
sdev
;

1177  
NULL
;

1178 
	}
}

1180 
sh™n⁄_gë_øndom_byãs
(*, );

1181 
	$__¸óã_poﬁ
(
¨g
)

1183 
sh™n⁄_poﬁ
 *
•oﬁ
;

1184 
sh™n⁄_¸óã_poﬁ_¨g
 
¸óã_¨g
;

1185 
sh™n⁄_f‹m©_¨g2
 *
f‹m©_¨g2
;

1186 
sh™n⁄_dev
 *
sdev
;

1187 
ªt
 = 0;

1188 
i
;

1189 
u64
 
w©îm¨k
;

1191 i‡(
	`sh™n⁄_c›y_‰om_u£r
(&
¸óã_¨g
,

1192 (
sh™n⁄_¸óã_poﬁ_¨g
 * 
__u£r
)
¨g
,

1193 (
¸óã_¨g
))) {

1194 
	`sh™n⁄_îr
("CouldÇot copyÖool info from userspace.\n");

1195  -
EFAULT
;

1197 i‡(
¸óã_¨g
.
cou¡
 == 0) {

1198 
	`sh™n⁄_îr
("Cannot createáÖool with zero device.\n");

1199  -
EINVAL
;

1202 
i
 = 0; i < 
¸óã_¨g
.
cou¡
; i++) {

1203 
sdev
 = 
	`föd_sh™n⁄_dev
(
¸óã_¨g
.
dev_id
[
i
]);

1204 i‡(!
sdev
 || sdev->
•oﬁ
 || sdev->
sdisk
.
gd
) {

1205 i‡(!
sdev
) {

1206 
	`sh™n⁄_îr
("CreateÖool failed, device doesÇotÉxist.\n");

1207 
ªt
 = -
EINVAL
;

1208 } i‡(
sdev
->
•oﬁ
) {

1209 
	`sh™n⁄_îr
("device %s belongsÅoáÖool.\n");

1210 
ªt
 = -
EBUSY
;

1212 
	`sh™n⁄_îr
("CreateÖool failed, device isáttached.");

1213 
ªt
 = -
EBUSY
;

1217 i‡(
ªt
)

1218  
ªt
;

1220 
f‹m©_¨g2
 = 
	`sh™n⁄_kzÆloc
((*f‹m©_¨g2), 
GFP_SHANNON
);

1221 i‡(
f‹m©_¨g2
 =
NULL
) {

1222 
	`sh™n⁄_îr
("Cannotállocate memory for format_arg2.\n");

1223  -
ENOMEM
;

1226 
	`sh™n⁄_gë_øndom_byãs
(&
w©îm¨k
, (watermark));

1227 
•oﬁ
 = 
	`Æloc_poﬁ
(
¸óã_¨g
.
cou¡
, 
w©îm¨k
);

1228 
•oﬁ
->
⁄löe_sdev_cou¡
 = 
¸óã_¨g
.
cou¡
;

1229 
i
 = 0; i < 
¸óã_¨g
.
cou¡
; i++) {

1230 
sdev
 = 
	`föd_sh™n⁄_dev
(
¸óã_¨g
.
dev_id
[
i
]);

1231 
•oﬁ
->
sdevs
[
i
] = 
sdev
;

1232 
sdev
->
•oﬁ
 = spool;

1235 
•oﬁ
->
avaûabÀ_ˇ∑côy
 = 
¸óã_¨g
.
ˇ∑côy
;

1236 
•oﬁ
->
poﬁ_öfo
->
avaûabÀ_ˇ∑côy
 = 
¸óã_¨g
.
ˇ∑côy
;

1237 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

1238 
•oﬁ
->
poﬁ_öfo
->
upd©e_cou¡
++;

1240 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

1241 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

1242 
sdev
->
mbr
.
sdev_id
 = 
i
;

1243 
sdev
->
mbr
.
sdev_cou¡
 = 
•oﬁ
->sdev_count;

1244 
sdev
->
mbr
.
poﬁ_w©îm¨k
 = 
w©îm¨k
;

1245 
	`˛ór_©omic_¥i‹ôize_wrôe
(
sdev
);

1246 i‡(
	`ªf‹m©
(
sdev
, 
f‹m©_¨g2
)) {

1247 
ªt
 = -
EFAULT
;

1248 
	`sh™n⁄_îr
("ªf‹m© devi˚ %d faûed!\n", 
i
);

1251 
	`sh™n⁄_k‰ì
(
f‹m©_¨g2
);

1254 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

1255 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

1256 
	`sh™n⁄_m≠_èbÀ_‰ì
(&
sdev
->
sdisk
);

1258 
	`BUG_ON
(
sdev
->
sdisk
.
sdev_cou¡
 != 1);

1259 i‡(
sdev
->
sdisk
.
Õmt_¨øy
 && (sdev->sdisk.Õmt_¨øy[0].
m≠_èbÀ
.
memblock_cou¡
 != 0)) {

1260 i‡(
sdev
->
sdisk
.
queue
) {

1261 
	`sh™n⁄_blk_˛ónup_queue
(
sdev
->
sdisk
.
queue
);

1262 
sdev
->
sdisk
.
queue
 = 
NULL
;

1267 
	`sh™n⁄_li°_add_èû
(&
•oﬁ
->
li°
, &
sh™n⁄_poﬁ_li°
);

1269 
¸óã_¨g
.
poﬁ_id
 = 
•oﬁ
->
id
;

1270 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_¸óã_poﬁ_¨g
 * 
__u£r
)
¨g
,

1271 &
¸óã_¨g
, (create_arg))) {

1272 
	`sh™n⁄_îr
("CouldÇot copyÖool infoÅo userspace.\n");

1273  -
EFAULT
;

1276 i‡(!
ªt
) {

1277 i‡(
sh™n⁄_memblock_¥óŒoc
 == 0) {

1278 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1279 
	`sh™n⁄_memblock_poﬁ_add
(&
m≠_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1280 
	`sh™n⁄_memblock_poﬁ_öc_maxt
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1281 
	`sh™n⁄_memblock_poﬁ_add
(&
ãmp_èbÀ_poﬁ
, 
•oﬁ
->
avaûabÀ_ˇ∑côy
, 12);

1282 } i‡(
sh™n⁄_memblock_¥óŒoc
 > 0) {

1283 
	`sh™n⁄_queue_w‹k
(
m≠_èbÀ_poﬁ
.
memblock_wq
, &m≠_èbÀ_poﬁ.
Æloc_w‹k
);

1284 
	`sh™n⁄_queue_w‹k
(
ãmp_èbÀ_poﬁ
.
memblock_wq
, &ãmp_èbÀ_poﬁ.
Æloc_w‹k
);

1288  
ªt
;

1289 
	}
}

1291 
	$¸óã_poﬁ
(
¨g
)

1293 
ªt
;

1294 
	`sh™n⁄_muãx_lock
(&
poﬁ_£m
);

1295 
ªt
 = 
	`__¸óã_poﬁ
(
¨g
);

1296 
	`sh™n⁄_muãx_u∆ock
(&
poﬁ_£m
);

1297  
ªt
;

1298 
	}
}

1300 
	$check_mbr
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
sh™n⁄_mbr
 *
mbr
)

1302 i‡(
•oﬁ
->
sdev_cou¡
 !
mbr
->sdev_count) {

1303 
	`sh™n⁄_îr
("%d, sdev_cou¡ inc⁄si°ít!\n", 
__LINE__
);

1307 
	}
}

1309 
	$öô_sdev_ö_poﬁ
(
sh™n⁄_dev
 *
sdev
)

1311 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
	`föd_poﬁ_f‹_sdev
(
sdev
);

1312 
sh™n⁄_mbr
 *
mbr
 = &
sdev
->mbr;

1313 
ªt
;

1315 i‡(
•oﬁ
 =
NULL
)

1316  -
EINVAL
;

1317 
sdev
->
•oﬁ
 = spool;

1319 i‡(
mbr
->
sdev_id
 >
•oﬁ
->
sdev_cou¡
) {

1320 
	`sh™n⁄_îr
("%d, %s, c‹ru±ed sdev_id!\n", 
__LINE__
,

1321 
sdev
->
sdisk
.
disk_«me
);

1324 i‡(
•oﬁ
->
sdevs
[
mbr
->
sdev_id
]) {

1325 
	`sh™n⁄_îr
("%d, sdev_id c⁄Êi˘s!\n", 
__LINE__
);

1328 
•oﬁ
->
sdevs
[
mbr
->
sdev_id
] = 
sdev
;

1330 
•oﬁ
->
⁄löe_sdev_cou¡
++;

1331 
ªt
 = 
	`check_mbr
(
•oﬁ
, 
mbr
);

1332 i‡(
ªt
 < 0) {

1333 
	`sh™n⁄_îr
("Wrong mbr information!\n");

1334  -
EINVAL
;

1337 
	}
}

1340 *
	$gë_sh™n⁄_poﬁ_‰om_li°
(
sh™n⁄_li°_hód
 *
li°
)

1342  
	`c⁄èöî_of
(
li°
, 
sh™n⁄_poﬁ
,Üist);

1343 
	}
}

1345 *
	$gë_miscdevi˚_‰om_sh™n⁄_poﬁ
(*
•oﬁ
)

1347  &((
sh™n⁄_poﬁ
 *)
•oﬁ
)->
misc
;

1348 
	}
}

1350 
	$sh™n⁄_io˘l_gë_poﬁ_ˇp
(
¨g
)

1352 
ˇp
 = 0;

1353 
ªt
 = 0;

1355 
ˇp
 |
SUPPORT_SET_MAX_IOPS_MASK
;

1356 
ˇp
 |
SUPPORT_SET_PRIORITY_MASK
;

1357 
ˇp
 |
SUPPORT_SET_SECTORS_MASK
;

1359 i‡(
	`sh™n⁄_c›y_to_u£r
((* 
__u£r
)
¨g
, &
ˇp
, (cap))) {

1360 
	`sh™n⁄_îr
("Cannot copy dataÅo userspace.\n");

1361 
ªt
 = -
EFAULT
;

1364  
ªt
;

1365 
	}
}

1367 
	$sh™n⁄_poﬁ_©èch
(
sh™n⁄_poﬁ
 *
•oﬁ
)

1369 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
;

1370 
sh™n⁄_«me•a˚
 *
ns
;

1371 
idx
, 
ªsu…
, 
ªt
 = 0;

1373 i‡(
•oﬁ
->
⁄löe_sdev_cou¡
 !•oﬁ->
sdev_cou¡
) {

1374 
	`sh™n⁄_w¨n
("online_sdev_count=%d, sdev_count=%d.\n",

1375 
•oﬁ
->
⁄löe_sdev_cou¡
, spoﬁ->
sdev_cou¡
);

1379 
poﬁ_öfo
 = 
•oﬁ
->pool_info;

1380 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

1382 
idx
 = 0; idx < 
SHANNON_NS_NUM
; idx++) {

1383 i‡(!
	`sh™n⁄_ã°_bô
(
idx
, (*)
poﬁ_öfo
->
ns_bôm≠
))

1385 
ns
 = 
•oﬁ
->ns[
idx
];

1386 i‡(!
ns
) {

1387 
	`sh™n⁄_îr
("«me•a˚ %d i†NULL.\n", 
idx
);

1390 i‡(
ns
->
sdisk
.
¥i‹ôy
 == 1)

1391 
	`sh™n⁄_©omic_öc
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
);

1392 
ªsu…
 = 
	`sh™n⁄_©èch_ns
(
ns
);

1393 i‡(
ªsu…
 < 0)

1394 
ªt
 = 
ªsu…
;

1397 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) > 0)

1398 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 32);

1399 i‡(
•oﬁ
->
ac˚ss_mode
 =
SHN_MODE_READONLY
)

1400 
	`sh™n⁄_öfo
("Name•a˚†öÖoﬁ%dáªÑód⁄ly.\n", 
•oﬁ
->
id
);

1401  
ªt
;

1402 
	}
}

1404 
	$sh™n⁄_poﬁ_dëach
(
sh™n⁄_poﬁ
 *
•oﬁ
)

1406 
sh™n⁄_poﬁ_öfo
 *
poﬁ_öfo
;

1407 
sh™n⁄_«me•a˚
 *
ns
;

1408 
idx
;

1410 
poﬁ_öfo
 = 
•oﬁ
->pool_info;

1411 
idx
 = 0; idx < 
SHANNON_NS_NUM
; idx++) {

1412 i‡(!
	`sh™n⁄_ã°_bô
(
idx
, (*)
poﬁ_öfo
->
ns_bôm≠
))

1414 
ns
 = 
•oﬁ
->ns[
idx
];

1415 i‡(!
ns
) {

1416 
	`sh™n⁄_îr
("«me•a˚ %d i†NULL.\n", 
idx
);

1419 
	`sh™n⁄_dëach_ns
(
ns
);

1421 
	}
}

1423 
	$sh™n⁄_io˘l_gë_poﬁ_°©us
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¨g
)

1425 
sh™n⁄_poﬁ_°©us
 *
poﬁ_°©us
;

1426 
u64
 
phy_ˇp
;

1427 
i
, 
ªt
 = 0, 
logicb_shi·
 = 12;

1429 
poﬁ_°©us
 = 
	`sh™n⁄_kzÆloc
((*poﬁ_°©us), 
GFP_SHANNON
);

1430 i‡(
poﬁ_°©us
 =
NULL
) {

1431 
	`sh™n⁄_îr
("CannotállocateÖool_status.\n");

1432  -
ENOMEM
;

1435 
poﬁ_°©us
->
id
 = 
•oﬁ
->id;

1436 
poﬁ_°©us
->
°©e
 = 
•oﬁ
->state;

1437 
poﬁ_°©us
->
sdev_cou¡
 = 
•oﬁ
->sdev_count;

1438 
poﬁ_°©us
->
⁄löe_sdev_cou¡
 = 
•oﬁ
->online_sdev_count;

1439 
i
 = 0; i < 
MAX_DEVICE_NO
; i++)

1440 
poﬁ_°©us
->
sdev_id
[
i
] = ~0;

1441 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++)

1442 i‡(
•oﬁ
->
sdevs
[
i
]) {

1443 
poﬁ_°©us
->
sdev_id
[
i
] = 
•oﬁ
->
sdevs
[i]->
drive_no
;

1444 
phy_ˇp
 = 
	`ˇlcuœã_physiˇl_ˇ∑côy
(
•oﬁ
->
sdevs
[
i
]);

1445 
poﬁ_°©us
->
physiˇl_£˘‹s
 +
phy_ˇp
;

1446 
logicb_shi·
 = 
•oﬁ
->
sdevs
[
i
]->logicb_shift;

1448 
poﬁ_°©us
->
ac˚ss_mode
 = 
•oﬁ
->access_mode;

1449 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

1450 
poﬁ_°©us
->
u£d_£˘‹s
 = 
	`sh™n⁄_©omic64_ªad
(&
•oﬁ
->
u£d_logicbs
Ë<< (
logicb_shi·
-9);

1451 
poﬁ_°©us
->
ˇ∑côy
 = 
•oﬁ
->
avaûabÀ_ˇ∑côy
;

1452 
poﬁ_°©us
->
ns_cou¡
 = 
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->ns_count);

1453 
poﬁ_°©us
->
ovî¥ovisi⁄
 = 
•oﬁ
->overprovision;

1454 
poﬁ_°©us
->
ªad⁄ly_ªas⁄
 = 
•oﬁ
->ªad⁄ly_ªas⁄ | 
	`gë_sdev_ªad⁄ly_ªas⁄
(spool);

1455 
	`sh™n⁄_mem˝y
(&
poﬁ_°©us
->
ns_bôm≠
, &
•oﬁ
->
poﬁ_öfo
->ns_bitmap, (pool_status->ns_bitmap));

1456 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

1458 i‡(
	`sh™n⁄_c›y_to_u£r
((
sh™n⁄_poﬁ_°©us
 * 
__u£r
)
¨g
,

1459 
poﬁ_°©us
, (*pool_status))) {

1460 
	`sh™n⁄_îr
("Cannot copy dataÅo userspace.\n");

1461 
ªt
 = -
EFAULT
;

1464 
	`sh™n⁄_k‰ì
(
poﬁ_°©us
);

1465  
ªt
;

1466 
	}
}

1468 
	$sh™n⁄_poﬁ_io˘l
(
sh™n⁄_fûe_t
 *
fûp
, 
cmd
, 
¨g
)

1470 
sh™n⁄_poﬁ
 *
•oﬁ
;

1471 
ªt
 = -
ENOTTY
;

1473 
•oﬁ
 = 
	`sh™n⁄_fûe_¥iv©e_d©a
(
fûp
);

1474 i‡(
•oﬁ
 =
NULL
) {

1475 
	`sh™n⁄_îr
("pool is NULL!\n");

1476  
ªt
;

1479 i‡(
•oﬁ
->
⁄löe_sdev_cou¡
 !•oﬁ->
sdev_cou¡
 &&

1480 (
cmd
 =
SHANNON_IOCADDNS
 ||

1481 
cmd
 =
SHANNON_IOCDELNS
 ||

1482 
cmd
 =
SHANNON_IOCATTACHNS
 ||

1483 
cmd
 =
SHANNON_IOCSETNS
 ||

1484 
cmd
 =
SHANNON_IOCDETACHNS
)

1486 
	`sh™n⁄_îr
("⁄löe_sdev_cou¡=%d, cmd=0x%x.\n", 
•oﬁ
->
⁄löe_sdev_cou¡
, 
cmd
);

1487  -
ENOTTY
;

1492 i‡(
•oﬁ
->
ac˚ss_mode
 =
SHN_MODE_READONLY
 &&

1493 (
cmd
 =
SHANNON_IOCADDNS
 || cmd =
SHANNON_IOCSETNS
)

1495 
	`sh™n⁄_îr
("ac˚ss_mode=0x%x, cmd=0x%x.\n", 
•oﬁ
->
ac˚ss_mode
, 
cmd
);

1496  -
ENOTTY
;

1498 
cmd
) {

1499 
SHANNON_IOCDELPOOL
:

1500  
	`dñëe_poﬁ
(
•oﬁ
);

1501 
SHANNON_IOCADDNS
:

1502 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1503 
ªt
 = 
	`¸óã_«me•a˚
(
•oﬁ
, 
¨g
);

1504 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1505  
ªt
;

1506 
SHANNON_IOCDELNS
:

1507 
ªt
 = 
	`ªÀa£_«me•a˚
(
•oﬁ
, 
¨g
);

1508  
ªt
;

1509 
SHANNON_IOCATTACHNS
:

1510 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1511 
ªt
 = 
	`sh™n⁄_io˘l_©èch_ns
(
•oﬁ
, 
¨g
);

1512 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1513  
ªt
;

1514 
SHANNON_IOCDETACHNS
:

1515 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1516 
ªt
 = 
	`sh™n⁄_io˘l_dëach_ns
(
•oﬁ
, 
¨g
);

1517 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1518  
ªt
;

1519 
SHANNON_IOCSETNS
:

1520 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1521 
ªt
 = 
	`sh™n⁄_io˘l_£t_ns
(
•oﬁ
, 
¨g
);

1522 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1523  
ªt
;

1524 
SHANNON_IOCGETPOOL
:

1525 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1526 
ªt
 = 
	`sh™n⁄_io˘l_gë_poﬁ_°©us
(
•oﬁ
, 
¨g
);

1527 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1528  
ªt
;

1529 
SHANNON_IOCGETPOOLCAP
:

1530  
	`sh™n⁄_io˘l_gë_poﬁ_ˇp
(
¨g
);

1531 
SHANNON_IOCGETNS
:

1532 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

1533 
ªt
 = 
	`sh™n⁄_io˘l_gë_ns_°©us
(
•oﬁ
, 
¨g
);

1534 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

1535  
ªt
;

1537 
	`debugs0
("Unknow cmd=0x%x.\n", 
cmd
);

1538  
ªt
;

1542 
	}
}

1544 
	$ªÀa£_sdev_m≠_èbÀ
(
sh™n⁄_dev
 *
sdev
)

1546 
i
;

1547 
sh™n⁄_«me•a˚
 *
ns
;

1549 i‡(
sdev
->
•oﬁ
) {

1550 
i
 = 0; i < 
SHANNON_NS_NUM
; i++) {

1551 
ns
 = 
sdev
->
•oﬁ
->ns[
i
];

1552 i‡(
ns
 !
NULL
) {

1553 
	`sh™n⁄_m≠_èbÀ_dißbÀ
(&
ns
->
sdisk
.
Õmt_¨øy
[
sdev
->
mbr
.
sdev_id
]);

1554 
	`sh™n⁄_m≠_èbÀ_ª£t
(&
ns
->
sdisk
.
Õmt_¨øy
[
sdev
->
mbr
.
sdev_id
], 1);

1558 
	}
}

1560 
	~"sh™n⁄_ns_rw.c
"

	@shannon_ns_rw.c

2 
	$ö¸ó£_ns_≥ndög_bios
(
sh™n⁄_«me•a˚
 *
ns
)

4 
	`sh™n⁄_©omic_öc
(&
ns
->
sdisk
.
≥ndög_bios
);

5 
	}
}

7 
	$de¸ó£_ns_≥ndög_bios
(
sh™n⁄_«me•a˚
 *
ns
)

9 
	`sh™n⁄_©omic_dec
(&
ns
->
sdisk
.
≥ndög_bios
);

10 
	}
}

12 
	$ns_have_ªad_£˘‹s
(
sh™n⁄_«me•a˚
 *
ns
)

14  
	`sh™n⁄_ªad_£˘‹s
(
ns
->
sdisk
.
gd
);

15 
	}
}

17 
	$ns_have_ªad_ios
(
sh™n⁄_«me•a˚
 *
ns
)

19  
	`sh™n⁄_ªad_ios
(
ns
->
sdisk
.
gd
);

20 
	}
}

22 
	$ns_have_wrôãn_£˘‹s
(
sh™n⁄_«me•a˚
 *
ns
)

24  
	`sh™n⁄_wrôe_£˘‹s
(
ns
->
sdisk
.
gd
);

25 
	}
}

27 
	$ns_have_wrôãn_ios
(
sh™n⁄_«me•a˚
 *
ns
)

29  
	`sh™n⁄_wrôe_ios
(
ns
->
sdisk
.
gd
);

30 
	}
}

32 
	$ns_have_ªad_m£cs
(
sh™n⁄_«me•a˚
 *
ns
)

34  
	`sh™n⁄_ªad_m£cs
(
ns
->
sdisk
.
gd
);

35 
	}
}

37 
	$ns_have_wrôãn_m£cs
(
sh™n⁄_«me•a˚
 *
ns
)

39  
	`sh™n⁄_wrôe_m£cs
(
ns
->
sdisk
.
gd
);

40 
	}
}

42 
ölöe
 
	$is_œ°_wrôe_ªq_ö_dev
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ªque°
 *
ªq
, 
logicb64_t
 
œ°_lba
)

44 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

46 i‡((
ªq
->
dma_dú
 =
SHANNON_DMA_TODEVICE
Ë&& (
sdev
->
gc_thªad_°©e
 =
IN_GC_STATE
Ë&& (
ns
->
sdisk
.
¥i‹ôy
 == 0)) {

47 i‡(
ªq
->
lba
 =
œ°_lba
)

50 i‡(
•oﬁ
->
sdev_cou¡
 == 1)

52 i‡((((
ªq
->
lba
 & (
ns
->
°rù_size
 - 1)Ë=“s->°rù_sizê- 1)Ë&& ((1 +Ñeq->lb®+Çs->°rù_sizê* (
•oﬁ
->
sdev_cou¡
 - 1)Ë> 
œ°_lba
)))

57 
	}
}

59 
	#DEV_LOGICBS_ARRAY_SIZE
 (16Ë

	)

60 
	$ns_bÆ™˚_gc
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
, *
dev_logicbs_¨øy
, 
waô_gc_mask
)

62 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

63 
sh™n⁄_dev
 *
sdev
 = 
NULL
;

64 
u32
 
sdev_id
;

65 
u64
 
œ°_jiffõs
;

67 i‡(
waô_gc_mask
) {

68 (
sdev_id
 = 
	`sh™n⁄_föd_fú°_bô
(&
waô_gc_mask
, 
DEV_LOGICBS_ARRAY_SIZE
)) < DEV_LOGICBS_ARRAY_SIZE) {

69 
sdev
 = 
•oﬁ
->
sdevs
[
sdev_id
];

70 i‡(
sdev
 =
NULL
) {

71 
	`sh™n⁄_îr
("sdev id = %d, buàsdev d€¢`àexi° i¿poﬁ.\n", 
sdev_id
);

72 
	`BUG_ON
(1);

74 
œ°_jiffõs
 = 
	`gë_jiffõs
();

75 i‡(
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
) {

76 
	`sh™n⁄_˛ór_bô
(
sdev_id
, &
sbio
->
waô_dev_pick_mask
);

77 
waô_gc_mask
 &~(1 << 
sdev_id
);

78 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

82 i‡(
	`sh™n⁄_ã°_bô
(
sdev_id
, &
sbio
->
waô_dev_pick_mask
) == 0) {

83 
	`BUG_ON
(
dev_logicbs_¨øy
[
sdev_id
] == 0);

84 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

85 
waô_gc_mask
 &~(1 << 
sdev_id
);

86 
	`bÆ™˚_gc
(
sdev
, 
dev_logicbs_¨øy
[
sdev_id
]);

88 i‡((
ns
->
sdisk
.
¥i‹ôy
 =0Ë&& (
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) != 0)) {

89 
	`sh™n⁄_waô_evít
(
sdev
->
waô_pick_evít
, (((
	`gë_jiffõs
(Ë- 
œ°_jiffõs
Ë/ 
	`gë_HZ
()Ë>
BALANCE_GC_TIMEOUT
) || \

90 (
	`sh™n⁄_ã°_bô
(
sdev_id
, &
sbio
->
waô_dev_pick_mask
Ë=0Ë|| 
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
);

92 
	`sh™n⁄_˛ór_bô
(
sdev_id
, &
sbio
->
waô_dev_pick_mask
);

94 i‡(
sdev
->
sdisk
.
exô
 || sdev->
∂ug_out
) {

95 
	`sh™n⁄_˛ór_bô
(
sdev_id
, &
sbio
->
waô_dev_pick_mask
);

96 
waô_gc_mask
 &~(1 << 
sdev_id
);

97 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

102 
sdev_id
 = 0; sdev_id < 
•oﬁ
->
sdev_cou¡
; sdev_id++) {

103 
sdev
 = 
•oﬁ
->
sdevs
[
sdev_id
];

104 i‡(
sdev
 && 
dev_logicbs_¨øy
[
sdev_id
])

105 
	`bÆ™˚_gc
(
sdev
, 
dev_logicbs_¨øy
[
sdev_id
]);

108 
	}
}

110 
ölöe
 
u32
 
	$gë_sdev_ödex_‰om_lba
(
sh™n⁄_«me•a˚
 *
ns
, 
logicb64_t
 
lba
)

112 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

114 i‡(
•oﬁ
->
sdev_cou¡
 == 1)

116 i‡((
•oﬁ
->
sdev_cou¡
 & (spool->sdev_count - 1)) == 0)

117  (
lba
 >> 
ns
->
°rù_size_shi·
Ë& (
•oﬁ
->
sdev_cou¡
 - 1);

119  (
lba
 >> 
ns
->
°rù_size_shi·
Ë% 
•oﬁ
->
sdev_cou¡
;

120 
	}
}

122 
	$ns_upd©e_io_°©i°ics
(
sh™n⁄_«me•a˚
 *
ns
)

124 
u64
 
ho°_wrôe_ios_œ°
;

125 
u64
 
ho°_wrôe_m£cs_œ°
;

126 
u64
 
ho°_ªad_ios_œ°
;

127 
u64
 
ho°_ªad_m£cs_œ°
;

128 
jiffõs_dñè
;

129 
u£c_ñ≠£d
 = 0;

130 
Êags
;

132 
Êags
 = 
	`sh™n⁄_•ö_lock_úqßve
(&
ns
->
io_°©i°ics_lock
);

134 
jiffõs_dñè
 = ()
	`gë_jiffõs
(Ë- ()
ns
->
œ°_jiffõs
;

135 
u£c_ñ≠£d
 = 
	`sh™n⁄_jiffõs_to_u£cs
(
jiffõs_dñè
);

136 i‡(
u£c_ñ≠£d
 < 300000) {

137 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
ns
->
io_°©i°ics_lock
, 
Êags
);

140 
ns
->
œ°_jiffõs
 = 
	`gë_jiffõs
();

143 
ho°_wrôe_ios_œ°
 = 
ns
->
ho°_wrôe_ios
;

144 
ho°_wrôe_m£cs_œ°
 = 
ns
->
ho°_wrôe_m£cs
;

146 
ho°_ªad_ios_œ°
 = 
ns
->
ho°_ªad_ios
;

147 
ho°_ªad_m£cs_œ°
 = 
ns
->
ho°_ªad_m£cs
;

150 
ns
->
ho°_wrôe_£˘‹s
 = 
	`ns_have_wrôãn_£˘‹s
(ns);

151 
ns
->
ho°_wrôe_ios
 = 
	`ns_have_wrôãn_ios
(ns);

152 
ns
->
ho°_wrôe_m£cs
 = 
	`ns_have_wrôãn_m£cs
(ns);

154 
ns
->
ho°_ªad_£˘‹s
 = 
	`ns_have_ªad_£˘‹s
(ns);

155 
ns
->
ho°_ªad_ios
 = 
	`ns_have_ªad_ios
(ns);

156 
ns
->
ho°_ªad_m£cs
 = 
	`ns_have_ªad_m£cs
(ns);

158 i‡(
u£c_ñ≠£d
 > 0) {

159 
ns
->
ho°_wrôe_b™dwidth
 = (ns->
ho°_wrôe_£˘‹s
 -Çs->
ho°_wrôe_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

160 
ns
->
ho°_wrôe_i›s
 = (ns->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
Ë* 1000000 / 
u£c_ñ≠£d
;

161 
ns
->
ho°_wrôe_œãncy
 = (ns->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
) ? \

162 (
ns
->
ho°_wrôe_m£cs
 - 
ho°_wrôe_m£cs_œ°
Ë* 1000 / (ns->
ho°_wrôe_ios
 - 
ho°_wrôe_ios_œ°
) : 0;

163 
ns
->
ho°_ªad_b™dwidth
 = (ns->
ho°_ªad_£˘‹s
 -Çs->
ho°_ªad_£˘‹s_œ°
Ë/ 2 * 1000000 / 
u£c_ñ≠£d
;

164 
ns
->
ho°_ªad_i›s
 = (ns->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
Ë* 1000000 / 
u£c_ñ≠£d
;

165 
ns
->
ho°_ªad_œãncy
 = (ns->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
) ? \

166 (
ns
->
ho°_ªad_m£cs
 - 
ho°_ªad_m£cs_œ°
Ë* 1000 / (ns->
ho°_ªad_ios
 - 
ho°_ªad_ios_œ°
) : 0;

170 
ns
->
ho°_wrôe_£˘‹s_œ°
 =Çs->
ho°_wrôe_£˘‹s
;

171 
ns
->
ho°_ªad_£˘‹s_œ°
 =Çs->
ho°_ªad_£˘‹s
;

173 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
ns
->
io_°©i°ics_lock
, 
Êags
);

176 
	}
}

180 
sh™n⁄_gídisk_t
 *
	$gë_gídisk_‰om_ns
(
sh™n⁄_«me•a˚
 *
ns
)

182  
ns
->
sdisk
.
gd
;

183 
	}
}

185 
	$ns_gë_logicb_size
(
sh™n⁄_«me•a˚
 *
ns
)

187  
ns
->
logicb_size
;

188 
	}
}

190 
	$ns_gë_logicb_shi·
(
sh™n⁄_«me•a˚
 *
ns
)

192  
ns
->
logicb_shi·
;

193 
	}
}

195 
sh™n⁄_poﬁ
 *
	$ns_gë_poﬁ
(
sh™n⁄_«me•a˚
 *
ns
)

197  
ns
->
poﬁ
;

198 
	}
}

200 
sh™n⁄_disk
 *
	$gë_sh™n⁄_disk_‰om_ns
(
sh™n⁄_«me•a˚
 *
ns
)

202  &
ns
->
sdisk
;

203 
	}
}

205 
u64
 
	$poﬁ_u£d_logicbs
(
sh™n⁄_poﬁ
 *
•
)

207  
	`sh™n⁄_©omic64_ªad
(&
•
->
u£d_logicbs
);

208 
	}
}

210 
u64
 
	$poﬁ_avaûabÀ_ˇp
(
sh™n⁄_poﬁ
 *
•
)

212  
•
->
avaûabÀ_ˇ∑côy
;

213 
	}
}

215 
	$sh™n⁄_check_avaûabûôy_ns
(
sh™n⁄_«me•a˚
 *
ns
)

217 i‡(
	`u∆ikñy
(
ns
->
poﬁ
->
exô
)) {

218 
	`sh™n⁄_îr
("pool isÉxiting!\n");

222 i‡(
	`u∆ikñy
(
ns
->
poﬁ
->
°©e
 & 
SHN_STATE_ERROR_BIT
)) {

223 
	`sh™n⁄_îr
("poﬁ->°©e=0x%x\n", 
ns
->
poﬁ
->
°©e
);

227 i‡(
ns
->
sdisk
.
©èched
 =
SHN_DISK_DETACHED
) {

228 
	`sh™n⁄_îr
("«me•a˚%dáÃódy dëached.\n", 
ns
->
idx
);

233 
	}
}

235 
	$sh™n⁄_disk_ªad⁄ly_ns
(
sh™n⁄_«me•a˚
 *
ns
)

237 i‡(
	`u∆ikñy
(
ns
->
poﬁ
->
ac˚ss_mode
 =
SHN_MODE_READONLY
)) {

238 
	`sh™n⁄_w¨n
("pool->access_mode isÑeadonly!\n");

242 
	}
}

244 
u64
 
	$gë_sh™n⁄_ns_£˘‹s
(
sh™n⁄_«me•a˚
 *
ns
)

246  
ns
->
sdisk
.
£˘‹s
;

247 
	}
}

249 
	$sh™n⁄_disˇrd_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
logicb64_t
 
°¨t_lba
,Üogicb64_à
íd_lba
, 
dñ_ns
)

251 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

252 
i
, 
j
;

253 
logicb64_t
 
lba
, 
fú°_lba
, 
fú°_¶Ÿ
, 
¶Ÿ
;

254 
lun_pba
 
ﬁd_pba
;

255 
sh™n⁄_dev
 *
sdev
;

256 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

257 
u64
 
logicbs_disˇrded
 = 0;

260 i‡(
•oﬁ
->
ac˚ss_mode
 =
SHN_MODE_READONLY
)

262 
	`debugs1
("°¨t_lba=%d, cou¡=%d.\n", 
°¨t_lba
, 
íd_lba
 - start_lba);

263 i‡(
°¨t_lba
 >
íd_lba
)

266 
j
 = 0; j < 
ns
->
poﬁ
->
sdev_cou¡
; j++) {

267 
u64
 
tmp
;

268 
sdev
 = 
ns
->
poﬁ
->
sdevs
[
j
];

269 
	`BUG_ON
(
j
 !
sdev
->
sdev_id
);

270 
tmp
 = 
°¨t_lba
 / (
ns
->
°rù_size
 *Çs->
poﬁ
->
sdev_cou¡
);

271 i‡(((
°¨t_lba
 % (
ns
->
°rù_size
 *Çs->
poﬁ
->
sdev_cou¡
)Ë>>Çs->
°rù_size_shi·
Ë=
sdev
->
sdev_id
)

272 
fú°_lba
 = 
°¨t_lba
;

273 i‡(((
°¨t_lba
 % (
ns
->
°rù_size
 *Çs->
poﬁ
->
sdev_cou¡
)Ë>>Çs->
°rù_size_shi·
Ë< 
sdev
->
sdev_id
)

274 
fú°_lba
 = 
tmp
 * (
ns
->
°rù_size
 *Çs->
poﬁ
->
sdev_cou¡
Ë+ 
sdev
->
sdev_id
 *Çs->strip_size;

276 
fú°_lba
 = (
tmp
 + 1Ë* (
ns
->
°rù_size
 *Çs->
poﬁ
->
sdev_cou¡
Ë+ 
sdev
->
sdev_id
 *Çs->strip_size;

278 
fú°_¶Ÿ
 = 
	`gë_¶Ÿ_‰om_Õmt
(
sdisk
, 
fú°_lba
);

279 
i
 = 0; i < 
LOCK_COUNT
; i++) {

280 
¶Ÿ
 = 
fú°_¶Ÿ
 + 
i
;

281 
lba
 = 
	`gë_lba_‰om_Õmt_¶Ÿ
(
sdev
, 
sdisk
, 
¶Ÿ
);

282 i‡(
lba
 >
íd_lba
)

284 
	`Õmt_lock
(
sdev
, 
sdisk
, 
lba
);

286 
	`gë_lun_pba_‰om_lba
(
lba
, &
ﬁd_pba
, 
NULL
, 
sdisk
);

287 i‡((
ﬁd_pba
.
lun_pba
 !0x03ffffffË&& (
dñ_ns
 || !
	`ã°_wrôe_ö_¥o˚ss
(
sdev
, &old_pba))) {

288 
	`upd©e_m≠pög_èbÀ
(
sdisk
, 
lba
, 0x3ff, 0x03ffffff);

289 
	`£t_ﬁd_pba_°Æe
(
sdev
, 
ﬁd_pba
.
lun
, old_pba.
lun_pba
);

290 
	`sh™n⁄_©omic64_dec
(&
sdev
->
•oﬁ
->
u£d_logicbs
);

295 i‡(++
logicbs_disˇrded
 >= 2000) {

296 
logicbs_disˇrded
 = 0;

297 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
lba
);

298 
	`sh™n⁄_c⁄d_ªsched
();

299 
	`Õmt_lock
(
sdev
, 
sdisk
, 
lba
);

301 
¶Ÿ
 +
LOCK_COUNT
;

302 
lba
 = 
	`gë_lba_‰om_Õmt_¶Ÿ
(
sdev
, 
sdisk
, 
¶Ÿ
);

303 } 
lba
 < 
íd_lba
);

304 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
lba
);

307 
	}
}

309 
	$poﬁ_de„r_gc_timî
(
sh™n⁄_poﬁ
 *
•oﬁ
)

311 
sh™n⁄_dev
 *
sdev
;

312 
i
;

314 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

315 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

316 i‡(
	`sh™n⁄_timî_≥ndög
(&
sdev
->
gc_timî
))

317 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 10);

319 
	}
}

321 
	$ns_fs_bio_ªad_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

323 
sh™n⁄_«me•a˚
 *
ns
 = (sh™n⁄_«me•a˚ *)
sbio
->
d©a
;

324 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

325 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

326 
sh™n⁄_dev
 *
sdev
;

327 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

329 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

330 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

331 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

332 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

333 i‡(
ªq
->
sg2
)

334 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

335 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

336 
fú°_size
 = 
ns
->
logicb_size
 - (()
ªq
->
vút_addr
 & (ns->logicb_size - 1));

337 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
fú°_size
);

338 i‡(
fú°_size
 < 
ns
->
logicb_size
)

339 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
,Ñeq->
ªcovî_buf
 + 
fú°_size
, 
ns
->
logicb_size
 - first_size);

340 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

342 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

343 
	`sh™n⁄_îr
("lba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

344 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

346 
	`‰ì_ªq
(
ªq
);

349 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

350 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

351 i‡(
sbio
->
sg_cou¡
)

352 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

354 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

355 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

356 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

357 
	`‰ì_sbio
(
sbio
);

358 
	}
}

360 
	$ns_fs_bio_wrôe_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

362 
sh™n⁄_«me•a˚
 *
ns
 = (sh™n⁄_«me•a˚ *)
sbio
->
d©a
;

363 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

364 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

365 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

366 
sh™n⁄_dev
 *
sdev
;

367 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
œ°_sb
 = NULL;

368 
logicbs
 = 0;

370 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

371 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

372 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

373 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

374 i‡(
ªq
->
sg2
)

375 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

376 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

377 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

378 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

379 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

380 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

381 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

383 
	`sh™n⁄_öfo
("%s: sbio->°¨t_£˘‹=0x%lx, sbio->°©us=0x%x.\n", 
__func__
, 
sbio
->
°¨t_£˘‹
, sbio->
°©us
);

384 i‡((
œ°_sb
 =
NULL
Ë|| (œ°_sb =
sb
))

385 
logicbs
++;

387 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

388 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
sdev
->
ö_Êight_wrôes
);

389 
logicbs
 = 1;

391 
œ°_sb
 = 
sb
;

393 
	`‰ì_ªq
(
ªq
);

396 i‡(
logicbs
) {

397 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

398 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
sdev
->
ö_Êight_wrôes
);

401 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

402 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

403 i‡(
sbio
->
sg_cou¡
)

404 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

406 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

407 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

408 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

409 
	`‰ì_sbio
(
sbio
);

410 
	}
}

412 
	$ns_submô_Æig√d_ªad_bio
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
)

414 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

415 
sh™n⁄_dev
 *
sdev
, *
œ°_sdev
 = 
NULL
;

416 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

417 
sh™n⁄_sg_li°_t
 *
sg
;

418 
sh™n⁄_ªque°
 *
ªq
 = 
NULL
;

419 
sh™n⁄_sb
 *
sb
 = 
NULL
;

420 
i
, 
ªt
, 
logicbs
;

421 
u64
 
°¨t_£˘‹
 = 
sbio
->start_sector;

422 
lun_pba
Üun_pba;

423 
fú°_size
, 
œ°_size
 = 0;

424 
œ°_lun
 = -1, 
lun_logicbs
 = 0;

426 
logicbs
 = 
sbio
->
bio_size
 >> 
ns
->
logicb_shi·
;

427 
sbio
->
logicbs
 =Üogicbs;

428 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
logicbs
);

430 
sbio
->
ˇŒback
 = 
ns_fs_bio_ªad_ˇŒback
;

431 
sbio
->
d©a
 = 
ns
;

432 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

434 
sg
 = 
sbio
->sg;

435 
i
 = 0; i < 
logicbs
; i++) {

436 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

437 #ifde‡
CONFIG_SHANNON_DEBUG


438 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

440 
ªq
->
£ndî
 = 
FROM_HOST
;

441 
ªq
->
sbio
 = sbio;

442 
	`£t_ªq_ödex
(
ªq
, 
i
);

443 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

444 
ªq
->
›code
 = 
sh_cmd_ªad
;

445 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

446 
ªq
->
ns_id
 = 
ns
->
idx
;

447 
ªq
->
ns_£q_num
 = 
ns
->
£q_num
;

448 
ªq
->
lba
 = (
°¨t_£˘‹
 >> (
ns
->
logicb_shi·
 - 9)Ë+ 
i
;

449 
ªq
->
Àngth
 = 
ns
->
logicb_size
;

450 
ªq
->
sg
 = sg;

451 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

452 
fú°_size
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

454 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

455 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
sg
,Ñeq->
dma_dú
);

456 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

457 i‡(()
ªq
->
vút_addr
 & (ªq->
Àngth
 - 1)) {

458 
ªq
->
sg2
 = 
sg
;

459 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
sg
);

460 
œ°_size
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

461 
ªq
->
dma_addªss_2
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
sg
,Ñeq->
dma_dú
);

462 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

463 
	`BUG_ON
((
fú°_size
 + 
œ°_size
Ë!
sdev
->
logicb_size
);

465 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

466 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, 
NULL
, 
sdisk
);

467 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

468 i‡(
ªt
 < 0) {

469 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0, 
fú°_size
);

470 i‡(
ªq
->
vút_addr_2
)

471 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr_2
, 0, 
œ°_size
);

472 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

475 
ªq
->
pba
.
lun_pba
 =Üun_pba.lun_pba;

476 
ªq
->
pba
.
lun
 = 
lun_pba
.lun;

477 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

478 
ªq
->
£q_num
 = 
sb
->seq_num;

479 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

480 i‡(
œ°_sdev
 && ((
œ°_lun
 !
lun_pba
.
lun
Ë|| (œ°_sdev !
sdev
))) {

481 
	`lun£t_pick_ªque°
(
œ°_sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

482 
lun_logicbs
 = 0;

484 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
lun_pba
.lun], 
ªq
);

485 
œ°_sdev
 = 
sdev
;

486 
œ°_lun
 = 
lun_pba
.
lun
;

487 
lun_logicbs
++;

489 i‡(
œ°_sdev
) {

490 
	`lun£t_pick_ªque°
(
œ°_sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

493 
	}
}

495 
ölöe
 
	$check_poﬁ_‰ì_block
(
sh™n⁄_poﬁ
 *
•oﬁ
)

497 
sh™n⁄_dev
 *
sdev
;

498 
i
;

500 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

501 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

502 i‡(
sdev
 && sdev->
‰ì_blk˙t
 < 
GC_THRESHOLD_N3
)

503 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
block_ho°_wr
, (sdev->
sdisk
.
exô
 || (sdev->
‰ì_blk˙t
 >
GC_THRESHOLD_N3
)));

505 
	}
}

507 
ölöe
 
	$check_poﬁ_ªq_queue_Àngth
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
¥i‹ôy
)

509 
sh™n⁄_dev
 *
sdev
;

510 
i
;

511 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

512 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

513 i‡(
sdev
) {

514 i‡(
¥i‹ôy
) {

515 i‡((
sdev
->
ö_block_°©e
 < 2Ë&& (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë>
REQ_QUEUE_THRESHOLD_H
))

516 
sdev
->
ö_block_°©e
 = 2;

517 i‡(
sdev
->
ö_block_°©e
 == 2) {

518 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
limô_ªq_queue
[1], \

519 (
sdev
->
sdisk
.
exô
 || (sdev->
ö_block_°©e
 < 2Ë|| (
	`sh™n⁄_©omic_ªad
(&sdev->
wrôe_ªqs
[1]Ë< 
REQ_QUEUE_THRESHOLD_L
)));

522 i‡((
sdev
->
ö_block_°©e
 =0Ë&& (
	`ho°_ªq_queue_Àngth
(sdevË>
REQ_QUEUE_THRESHOLD_H
))

523 
sdev
->
ö_block_°©e
 = 1;

524 i‡(
sdev
->
ö_block_°©e
)

525 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
limô_ªq_queue
[0], \

526 (
sdev
->
sdisk
.
exô
 || (sdev->
ö_block_°©e
 =0Ë|| (
	`ho°_ªq_queue_Àngth
(sdevË< 
REQ_QUEUE_THRESHOLD_L
)));

530 
	}
}

532 
ölöe
 
	$sdev_submô_wrôe_ªque°
(
sh™n⁄_dev
 *
sdev
, 
dev_logicbs
, 
pick_ö_¥o˚ss
, 
fûl_hód
)

534 
	`sh™n⁄_©omic_add
(
dev_logicbs
, &
sdev
->
ö_Êight_wrôes
);

535 i‡(
pick_ö_¥o˚ss
)

536 
	`sh™n⁄_pick_ªque°
(
sdev
, 
dev_logicbs
);

538 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

539 
	`mod_fûl_chunk_timî
(
sdev
, 
fûl_hód
);

540 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
)

541 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 4);

542 #ifde‡
CONFIG_SHANNON_STATISTICS


543 
	`sh™n⁄_©omic_add
(
dev_logicbs
, &
sdev
->
‰om_ho°
);

545 
	}
}

547 
	$ns_submô_Æig√d_wrôe_bio
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
)

549 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

550 
sh™n⁄_dev
 *
sdev
, *
œ°_sdev
 = 
NULL
;

551 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

552 
sh™n⁄_ªque°
 *
ªq
;

553 
sh™n⁄_sg_li°_t
 *
sg
;

554 
u64
 
°¨t_£˘‹
 = 
sbio
->start_sector;

555 
logicb64_t
 
œ°_lba
;

556 
dev_logicbs
 = 0, 
fûl_hód
 = 0, 
hód_ödex
 = 0;

557 
i
, 
logicbs
;

558 
sh™n⁄_li°_hód
 
wrôe_li°
;

559 
ödex
, 
dev_logicbs_¨øy
[
DEV_LOGICBS_ARRAY_SIZE
] = {};

560 
waô_gc_mask
 = 0;

561 
°ack_size
;

563 
	`check_poﬁ_‰ì_block
(
•oﬁ
);

564 
	`check_poﬁ_ªq_queue_Àngth
(
•oﬁ
, 
ns
->
sdisk
.
¥i‹ôy
);

566 
°ack_size
 = (()&°ack_sizeË& (
THREAD_SIZE
-1);

567 
°ack_size
 = 
THREAD_SIZE
 - stack_size;

569 
logicbs
 = 
sbio
->
bio_size
 >> 
ns
->
logicb_shi·
;

570 
œ°_lba
 = 
logicbs
 + (
°¨t_£˘‹
 >> (
ns
->
logicb_shi·
 - 9)) - 1;

571 
sbio
->
logicbs
 =Üogicbs;

572 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, 
logicbs
);

574 
sbio
->
ˇŒback
 = 
ns_fs_bio_wrôe_ˇŒback
;

575 
sbio
->
d©a
 = 
ns
;

576 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

578 
sg
 = 
sbio
->sg;

579 
	`SHANNON_INIT_LIST_HEAD
(&
wrôe_li°
);

580 
i
 = 0; i < 
logicbs
; i++) {

581 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

582 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

583 
ªq
->
£ndî
 = 
FROM_HOST
;

584 
ªq
->
sbio
 = sbio;

585 
	`£t_ªq_ödex
(
ªq
, 
i
);

586 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

587 
ªq
->
›code
 = 
sh_cmd_wrôe
;

588 
ªq
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

589 
ªq
->
d©©y≥
 = 
LONG_LBA
;

590 
ªq
->
ns_id
 = 
ns
->
idx
;

591 
ªq
->
ns_£q_num
 = 
ns
->
£q_num
;

592 
ªq
->
lba
 = (
°¨t_£˘‹
 >> (
ns
->
logicb_shi·
 - 9)Ë+ 
i
;

593 
ªq
->
Àngth
 = 
ns
->
logicb_size
;

594 
ªq
->
sg
 = sg;

595 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

596 
ödex
 = 
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
);

597 
sdev
 = 
•oﬁ
->
sdevs
[
ödex
];

598 i‡(
	`is_œ°_wrôe_ªq_ö_dev
(
ns
, 
sdev
, 
ªq
, 
œ°_lba
)) {

599 
	`£t_ªq_waô_pick
(
ªq
);

600 
	`BUG_ON
(
	`sh™n⁄_ã°_bô
(
sdev
->
mbr
.
sdev_id
, &
sbio
->
waô_dev_pick_mask
));

601 
	`sh™n⁄_£t_bô
(
sdev
->
mbr
.
sdev_id
, &
sbio
->
waô_dev_pick_mask
);

602 
waô_gc_mask
 |1 << 
sdev
->
mbr
.
sdev_id
;

603 
	`sh™n⁄_©omic_öc
(&
sbio
->
u£r_cou¡
);

604 i‡(
	`u∆ikñy
(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
bÆ™˚_gc_timî
)))

605 
	`sh™n⁄_mod_timî
(&
sdev
->
bÆ™˚_gc_timî
, 
	`gë_jiffõs
(Ë+ 
BALANCE_GC_TIMEOUT
 * 
	`gë_HZ
());

607 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
sg
,Ñeq->
dma_dú
);

608 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

609 i‡(()
ªq
->
vút_addr
 & (ªq->
Àngth
 - 1)) {

610 
ªq
->
sg2
 = 
sg
;

611 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
sg
);

612 
ªq
->
dma_addªss_2
 = 
	`sh™n⁄_dma_m≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
sg
,Ñeq->
dma_dú
);

613 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

615 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

616 
	`ho°_gë_hód_™d_£t_pba_èbÀ
(
sdev
, 
sdisk
, 
sbio
->
bio
, 
ªq
);

617 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

618 
	`£t_lun_pba_övÆid
(&
ªq
->
pba
);

619 
hód_ödex
 = 
ªq
->
hód
 & 
HEAD_INDEX_MASK
;

620 
dev_logicbs_¨øy
[
ödex
]++;

622 i‡((
œ°_sdev
 =
NULL
Ë|| (œ°_sdev =
sdev
)) {

623 
dev_logicbs
++;

624 
fûl_hód
 |(1 << 
hód_ödex
);

626 
	`add_wrôe_li°_to_ªque°_queue_èû
(
œ°_sdev
, &
wrôe_li°
, 
dev_logicbs
, 
ns
->
sdisk
.
¥i‹ôy
);

627 
	`sdev_submô_wrôe_ªque°
(
œ°_sdev
, 
dev_logicbs
, 0, 
fûl_hód
);

629 
	`SHANNON_INIT_LIST_HEAD
(&
wrôe_li°
);

630 
dev_logicbs
 = 1;

631 
fûl_hód
 = 1 << 
hód_ödex
;

633 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
wrôe_li°
);

634 
œ°_sdev
 = 
sdev
;

636 i‡(
dev_logicbs
) {

637 
	`add_wrôe_li°_to_ªque°_queue_èû
(
œ°_sdev
, &
wrôe_li°
, 
dev_logicbs
, 
ns
->
sdisk
.
¥i‹ôy
);

638 
	`sdev_submô_wrôe_ªque°
(
œ°_sdev
, 
dev_logicbs
, 
°ack_size
 > 4096 ? 0 : 1, 
fûl_hód
);

641 
	`ns_bÆ™˚_gc
(
ns
, 
sbio
, 
dev_logicbs_¨øy
, 
waô_gc_mask
);

644 
	}
}

646 
	$ns_submô_Æig√d_bio
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
)

648 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_FROMDEVICE
)

649 
	`ns_submô_Æig√d_ªad_bio
(
ns
, 
sbio
);

650 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)

651 
	`ns_submô_Æig√d_wrôe_bio
(
ns
, 
sbio
);

654 
	}
}

657 
	$ns_n⁄Æig√d_ªad_bio_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

659 
sh™n⁄_«me•a˚
 *
ns
 = (sh™n⁄_«me•a˚ *)
sbio
->
d©a
;

660 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

661 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

662 
sh™n⁄_dev
 *
sdev
;

663 
logicb_size
 = 
ns
->logicb_size;

664 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

666 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

667 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

668 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

669 i‡(
ªq
->
Àngth
 =
ns
->
logicb_size
) {

670 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

671 i‡(
ªq
->
vút_addr_2
)

672 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

674 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

675 
fú°_size
 = 
logicb_size
 - (()
ªq
->
vút_addr
 & (logicb_size - 1));

676 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
fú°_size
);

677 i‡(
fú°_size
 < 
ns
->
logicb_size
)

678 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
,Ñeq->
ªcovî_buf
 + 
fú°_size
, 
logicb_size
 - first_size);

679 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

681 i‡(
	`u∆ikñy
(
sbio
->
°©us
))

682 
	`sh™n⁄_öfo
("%s():Üba=%ld,Üun=%d,Üun_pba=%d,Écc=0x%x,Ñeread=0x%x.\n",

683 
__func__
, 
ªq
->
lba
,Ñeq->
pba
.
lun
,Ñeq->pba.
lun_pba
,Ñeq->
_ecc
,Ñeq->
ªªad
);

685 
	`‰ì_ªq
(
ªq
);

688 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

689 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

690 i‡(
sbio
->
sg_cou¡
)

691 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

693 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

694 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

695 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

697 
	`‰ì_sbio
(
sbio
);

699 
	}
}

701 
	$ns_n⁄Æig√d_wrôe_bio_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

703 
sh™n⁄_«me•a˚
 *
ns
 = (sh™n⁄_«me•a˚ *)
sbio
->
d©a
;

704 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

705 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

706 
sh™n⁄_dev
 *
sdev
;

707 
logicb_size
 = 
ns
->logicb_size;

708 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

709 
sh™n⁄_sb
 *
sb
 = 
NULL
, *
œ°_sb
 = NULL;

710 
logicbs
 = 0;

712 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

713 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

714 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

715 
	`sh™n⁄_©omic_dec
(&
sdev
->
ö_Êight_wrôes
);

716 i‡(
ªq
->
Àngth
 =
logicb_size
) {

717 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg
,Ñeq->
dma_dú
);

718 i‡(
ªq
->
vút_addr_2
)

719 
	`sh™n⁄_dma_unm≠_⁄e_sg_∑ge
(
sdev
->
pci_dev
, 
ªq
->
sg2
,Ñeq->
dma_dú
);

720 i‡(
	`likñy
(!
	`lun_pba_is_övÆid
(&
ªq
->
pba
))) {

721 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

722 i‡(
	`likñy
(
sbio
->
°©us
 == 0)) {

723 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

724 
	`wrôe_ªque°_d⁄e
(
sdev
, 
sdisk
, 
ªq
);

725 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

727 
	`sh™n⁄_öfo
("%s: sbio->°¨t_£˘‹=0x%lx, sbio->°©us=0x%x.\n", 
__func__
, 
sbio
->
°¨t_£˘‹
, sbio->
°©us
);

728 i‡((
œ°_sb
 =
NULL
Ë|| (œ°_sb =
sb
))

729 
logicbs
++;

731 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

732 
logicbs
 = 1;

734 
œ°_sb
 = 
sb
;

737 
	`‰ì_ªq
(
ªq
);

740 i‡(
logicbs
) {

741 
	`sh™n⁄_©omic_sub
(
logicbs
, &
œ°_sb
->
ö_wrôe_logicbs
);

744 
	`sh™n⁄_com∂ëe_fs_io
(
sdisk
->
ho°d©a
, sdisk->
gd
, 
sbio
);

745 
	`de¸ó£_ns_≥ndög_bios
(
ns
);

746 i‡(
sbio
->
sg_cou¡
)

747 
	`sh™n⁄_sg_‰ì
(
sbio
->
sg
, sbio->
sg_cou¡
);

749 
sbio
->
œãncy
 = ((
	`gë_jiffõs
(Ë- sbio->
°¨t_time
Ë* 1000Ë/ 
	`gë_HZ
();

750 i‡(
sdisk
->
¥öt_œãncy_öãrvÆ
)

751 
	`ªc‹d_œãncy
(
sdisk
, 
sbio
);

753 
	`‰ì_sbio
(
sbio
);

754 
	}
}

756 
	$ns_submô_n⁄Æig√d_bio
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
, 
fú°_size
)

758 
sh™n⁄_poﬁ
 *
•oﬁ
 = 
ns
->
poﬁ
;

759 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

760 
sh™n⁄_dev
 *
sdev
 = 
NULL
;

761 
sh™n⁄_ªque°
 *
ªq
;

762 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
, *
√xt_sg
 = NULL;

763 
i
, 
ªmaöed_size
, 
und⁄e
 = 0;

764 
dev_logicbs_¨øy
[
DEV_LOGICBS_ARRAY_SIZE
] = {};

765 
waô_gc_mask
 = 0;

766 
logicb64_t
 
œ°_lba
 = (
sbio
->
°¨t_£˘‹
 >> (
ns
->
logicb_shi·
 - 9)Ë+ ((sbio->
bio_size
 - 
fú°_size
Ë/ 
	`ns_gë_logicb_size
(ns));

767 
u64
 
°¨t_off£t
;

770 
sdisk
->
n⁄Æig√d_bios
++;

771 
sbio
->
d©a
 = 
ns
;

772 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

773 
sbio
->
ˇŒback
 = 
ns_n⁄Æig√d_wrôe_bio_ˇŒback
;

774 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

776 
	`check_poﬁ_‰ì_block
(
•oﬁ
);

777 
	`check_poﬁ_ªq_queue_Àngth
(
•oﬁ
, 
ns
->
sdisk
.
¥i‹ôy
);

779 i‡(
	`u∆ikñy
(
sdisk
->
exô
)) {

780 
	`sh™n⁄_w¨n
("the disk isábsent!\n");

781  -
EIO
;

784 
sbio
->
ˇŒback
 = 
ns_n⁄Æig√d_ªad_bio_ˇŒback
;

785 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

788 
sbio
->
logicbs
 = 
	`ˇlcuœã_n⁄Æig√d_bio_u£r_cou¡
(sbio, 
ns
->
logicb_size
, 
fú°_size
);

789 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
 + 1);

792 i‡(
fú°_size
) {

793 
ªmaöed_size
 = 
fú°_size
;

794 
und⁄e
 = 1;

796 
ªmaöed_size
 = 
ns
->
logicb_size
;

797 
und⁄e
 = 0;

800 
°¨t_off£t
 = 
sbio
->
°¨t_£˘‹
 << 9;

801 
sg
 = 
sbio
->sg;

802 
i
 = 0;

803 
sg
 && 
	`sh™n⁄_sg_∑ge
(sg)) {

804 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

805 #ifde‡
CONFIG_SHANNON_DEBUG


806 
	`£t_ªq_debug_èg
(
ªq
, 
sbio
->
èg
, 
i
);

808 
ªq
->
£ndî
 = 
FROM_HOST
;

809 
ªq
->
sbio
 = sbio;

810 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

811 
	`£t_ªq_ödex
(
ªq
, 
i
);

812 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

813 
ªq
->
dma_dú
 = 
sbio
->dma_dir;

814 
ªq
->
sg
 = sg;

815 
ªq
->
vút_addr
 = 
	`sh™n⁄_sg_vút
(
sg
);

816 
ªq
->
Àngth
 = 
	`sh™n⁄_sg_Àngth
(
sg
);

817 
ªq
->
°¨t_off£t
 = start_offset;

818 
ªq
->
ns_id
 = 
ns
->
idx
;

819 
ªq
->
ns_£q_num
 = 
ns
->
£q_num
;

820 
ªq
->
lba
 = 
°¨t_off£t
 >> 
ns
->
logicb_shi·
;

821 
sdev
 = 
•oﬁ
->
sdevs
[
	`gë_sdev_ödex_‰om_lba
(
ns
, 
ªq
->
lba
)];

822 i‡(
	`is_œ°_wrôe_ªq_ö_dev
(
ns
, 
sdev
, 
ªq
, 
œ°_lba
) && \

823 (((
°¨t_off£t
 + 
	`sh™n⁄_sg_Àngth
(
sg
)Ë>> 
ns
->
logicb_shi·
Ë!
ªq
->
lba
)) {

824 
	`£t_ªq_waô_pick
(
ªq
);

825 
	`BUG_ON
(
	`sh™n⁄_ã°_bô
(
sdev
->
mbr
.
sdev_id
, &
sbio
->
waô_dev_pick_mask
));

826 
	`sh™n⁄_£t_bô
(
sdev
->
mbr
.
sdev_id
, &
sbio
->
waô_dev_pick_mask
);

827 
waô_gc_mask
 |1 << 
sdev
->
mbr
.
sdev_id
;

828 
	`sh™n⁄_©omic_öc
(&
sbio
->
u£r_cou¡
);

829 i‡(
	`u∆ikñy
(!
	`sh™n⁄_timî_≥ndög
(&
sdev
->
bÆ™˚_gc_timî
)))

830 
	`sh™n⁄_mod_timî
(&
sdev
->
bÆ™˚_gc_timî
, 
	`gë_jiffõs
(Ë+ 
BALANCE_GC_TIMEOUT
 * 
	`gë_HZ
());

832 
dev_logicbs_¨øy
[
sdev
->
mbr
.
sdev_id
]++;

834 
°¨t_off£t
 +
	`sh™n⁄_sg_Àngth
(
sg
);

836 i‡(
und⁄e
) {

837 
ªmaöed_size
 -
ªq
->
Àngth
;

838 i‡(
ªmaöed_size
 == 0) {

839 
ªmaöed_size
 = 
ns
->
logicb_size
;

840 
und⁄e
 = 0;

842 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

844 i‡((
	`sh™n⁄_sg_off£t
(
sg
Ë& 0x7Ë|| (
	`sh™n⁄_sg_Àngth
(sg) & 0x7)) {

845 
und⁄e
 = 1;

846 
ªmaöed_size
 -
ªq
->
Àngth
;

847 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

849 i‡(
ªq
->
Àngth
 =
ns
->
logicb_size
) {

850 
	`£nd_Æig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

852 
√xt_sg
 = 
	`sh™n⁄_sg_√xt
(
sg
);

853 i‡(
	`is_cou∂e_sg
(
sg
, 
√xt_sg
)) {

854 
ªq
->
sg2
 = 
√xt_sg
;

855 
ªq
->
vút_addr_2
 = 
	`sh™n⁄_sg_vút
(
√xt_sg
);

856 
ªq
->
Àngth
 = 
ns
->
logicb_size
;

857 
°¨t_off£t
 +
	`sh™n⁄_sg_Àngth
(
√xt_sg
);

858 
	`£nd_Æig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

860 
sg
 = 
√xt_sg
;

862 
und⁄e
 = 1;

863 
ªmaöed_size
 -
ªq
->
Àngth
;

864 
	`£nd_u«lig√d_ªq
(
sdev
, 
sdisk
, 
sbio
, 
ªq
);

870 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
) {

871 
	`sh™n⁄_©omic_öc
(&
sdev
->
ö_Êight_wrôes
);

872 i‡(
sdev
->
gc_thªad_°©e
 !
NO_RECLAIM
) {

873 
	`sh™n⁄_de„r_timî
(
sdev
, 
	`gë_HZ
() * 4);

876 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

877 
i
++;

880 i‡(
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)

881 
	`ns_bÆ™˚_gc
(
ns
, 
sbio
, 
dev_logicbs_¨øy
, 
waô_gc_mask
);

883 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

886 
	}
}

888 
	$sh™n⁄_submô_bio_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
)

890 
ªt
 = 0;

892 
sbio
->
ns_id
 = 
ns
->
idx
;

893 
sbio
->
ns_£q_num
 = 
ns
->
£q_num
;

894 i‡((
sbio
->
fú°_size
 =0Ë&& ((sbio->
bio_size
 & (
ns
->
logicb_size
 - 1)Ë=0Ë&& !sbio->
has_hﬁe
)

895 
ªt
 = 
	`ns_submô_Æig√d_bio
(
ns
, 
sbio
);

897 
ªt
 = 
	`ns_submô_n⁄Æig√d_bio
(
ns
, 
sbio
, sbio->
fú°_size
);

900  
ªt
;

901 
	}
}

903 
	#NS_THROTTLE_INTERVAL
 10

	)

904 
	$sh™n⁄_submô_bio_thrŸéög_ns
(
sh™n⁄_«me•a˚
 *
ns
, 
sh™n⁄_bio
 *
sbio
)

906 i‡(
ns
->
max_i›s
) {

907 
	`sh™n⁄_©omic_öc
(&
ns
->
ios
);

908 i‡(
	`sh™n⁄_©omic_ªad
(&
ns
->
ios
Ë>ns->
max_i›s
/(1000/
NS_THROTTLE_INTERVAL
)) {

909 
	`sh™n⁄_muãx_lock
(&
ns
->
thrŸée_ios_£m
);

910 i‡(
	`sh™n⁄_©omic_ªad
(&
ns
->
ios
Ë>Çs->
max_i›s
/(1000/
NS_THROTTLE_INTERVAL
)) {

911 
u32
 
time
 = 
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
());

912 
	`sh™n⁄_©omic_£t
(&
ns
->
ios
, 0);

913 i‡((
time
 - 
ns
->
thrŸée_ios_time_°amp
Ë>
NS_THROTTLE_INTERVAL
) {

914 
ns
->
thrŸée_ios_time_°amp
 = 
time
;

916 
	`sh™n⁄_m¶ìp
(
ns
->
thrŸée_ios_time_°amp
 + 
NS_THROTTLE_INTERVAL
 - 
time
 - 1);

917 
ns
->
thrŸée_ios_time_°amp
 = 
	`sh™n⁄_jiffõs_to_m£cs
(
	`gë_jiffõs
());

920 
	`sh™n⁄_muãx_u∆ock
(&
ns
->
thrŸée_ios_£m
);

921 
	`sh™n⁄_©omic_öc
(&
ns
->
ios
);

924  
	`sh™n⁄_submô_bio_ns
(
ns
, 
sbio
);

925 
	}
}

927 
	$sh™n⁄_bio_ö_Êight_ns
(
sh™n⁄_«me•a˚
 *
ns
)

929 i‡(
ns
->
sdisk
.
gd
)

930  
	`sh™n⁄_disk_ö_Êight
(
ns
->
sdisk
.
gd
);

933 
	}
}

935 
	$£t_poﬁ_h¨d_queue_limô
(
sh™n⁄_poﬁ
 *
•
, 
limô
)

937 
i
 = 0;

938 
•
->
h¨d_queue_limô
 = 
limô
;

939 ; 
i
 < 
•
->
sdev_cou¡
; i++) {

940 i‡(!
•
->
sdevs
[
i
])

942 
•
->
sdevs
[
i
]->
h¨d_queue_limô
 = 
limô
;

944 
	}
}

946 
	$ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
)

948 
sh™n⁄_dev
 *
sdev
;

949 
u64
 
phy_ˇp
 = 0;

950 
i
;

951 
i
 = 0; i < 
•oﬁ
->
sdev_cou¡
; i++) {

952 
sdev
 = 
•oﬁ
->
sdevs
[
i
];

953 i‡(
sdev
 && (sdev->
öô_d⁄e
 >
STAGE_RECOVER_DONE
)) {

954 i‡(
phy_ˇp
 =0 ||Öhy_ˇ∞> 
sdev
->
max_£˘‹s
)

955 
phy_ˇp
 = 
sdev
->
max_£˘‹s
;

956 i‡(
sdev
->
max_£˘‹s
 == 0)

957 
	`sh™n⁄_öfo
("%†max_£˘‹†i†0\n", 
sdev
->
sdisk
.
disk_«me
);

960 i‡(
phy_ˇp
 == 0) {

961 
	`sh™n⁄_w¨n
("%†phy_ˇ∞i†0\n", 
•oﬁ
->
cdev_«me
);

964 
phy_ˇp
 *
•oﬁ
->
sdev_cou¡
;

965 
•oﬁ
->
ovî¥ovisi⁄
 = (10000 * (
phy_ˇp
-•oﬁ->
avaûabÀ_ˇ∑côy
)) /Öhy_cap;

966 
•oﬁ
->
physiˇl_ˇ∑côy
 = 
phy_ˇp
;

968 
	}
}

970 
	$__£t_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
›
)

972 
•oﬁ
->
ovî¥ovisi⁄
 = 
›
 * 100;

973 
•oﬁ
->
avaûabÀ_ˇ∑côy
 = spoﬁ->
physiˇl_ˇ∑côy
 * (100-
›
) / 100;

974 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
poﬁ_öfo_£m
);

975 
•oﬁ
->
poﬁ_öfo
->
avaûabÀ_ˇ∑côy
 = spool->available_capacity;

976 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
poﬁ_öfo_£m
);

977 
	}
}

980 
	$£t_poﬁ_ovî¥ovisi⁄
(
sh™n⁄_poﬁ
 *
•oﬁ
, 
›
)

982 
	`sh™n⁄_muãx_lock
(&
•oﬁ
->
°©e_£m
);

983 
	`__£t_poﬁ_ovî¥ovisi⁄
(
•oﬁ
, 
›
);

984 i‡(
	`sh™n⁄_ã°_™d_˛ór_bô
(
SHN_REASON_LOW_OVERPROVISION
, &
•oﬁ
->
ªad⁄ly_ªas⁄
)) {

985 
	`sh™n⁄_öfo
("•oﬁ %d: cÀ¨Üow ovî¥ovisi⁄Ñód⁄lyÑós⁄.\n", 
•oﬁ
->
id
);

986 
	`•oﬁ_upd©e_ac˚ss_mode
(
•oﬁ
);

989 
	`upd©e_poﬁ_öfo
(
•oﬁ
);

990 
	`sh™n⁄_muãx_u∆ock
(&
•oﬁ
->
°©e_£m
);

991 
	}
}

993 
	$check_sbio_is_ovîwrôed
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_«me•a˚
 *
ns
)

995 
u64
 
off£t
 = 
sbio
->
°¨t_£˘‹
 << 9;

996 
lun_pba
Üun_pba;

997 
sh™n⁄_sg_li°_t
 *
sg
 = 
sbio
->sg;

1000 i‡(
	`gë_lun_pba_‰om_lba
(
off£t
 >> 
ns
->
logicb_shi·
, &
lun_pba
, 
NULL
, &ns->
sdisk
))

1002 
off£t
 +
	`sh™n⁄_sg_Àngth
(
sg
);

1003 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

1004 } 
sg
 && 
	`sh™n⁄_sg_∑ge
(sg));

1007 
	}
}

	@shannon_pci.c

1 
	~"sh™n⁄_pci.h
"

2 
	~"sh™n⁄_time.h
"

3 
	~<löux/pci.h
>

4 
	~<löux/vîsi⁄.h
>

5 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 19)

6 
	~<löux/pci_hŸ∂ug.h
>

9 
sh™n⁄_pci_dev_t
 *
	$sh™n⁄_pci_gë_¶Ÿ
(
sh™n⁄_pci_dev_t
 *
dev
, 
dev‚
)

11  (
sh™n⁄_pci_dev_t
 *)
	`pci_gë_¶Ÿ
(((
pci_dev
 *)
dev
)->
bus
, 
dev‚
);

12 
	}
}

14 
	$sh™n⁄_pci_dißbÀ_devi˚
(
sh™n⁄_pci_dev_t
 *
dev
)

16 
	`pci_dißbÀ_devi˚
((
pci_dev
 *)
dev
);

17 
	}
}

19 
	$sh™n⁄_pci_£t_ma°î
(
sh™n⁄_pci_dev_t
 *
dev
)

21 
	`pci_£t_ma°î
((
pci_dev
 *)
dev
);

22 
	}
}

24 * 
	$sh™n⁄_pci_Æloc_c⁄si°ít
(
sh™n⁄_pci_dev_t
 *
hwdev
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_dma_addr_t
 *
dma_h™dÀ
)

26  
	`pci_Æloc_c⁄si°ít
((
pci_dev
 *)
hwdev
, 
size
, 
dma_h™dÀ
);

27 
	}
}

29 
	$sh™n⁄_pci_‰ì_c⁄si°ít
(
sh™n⁄_pci_dev_t
 *
hwdev
, 
sh™n⁄_size_t
 
size
, *
vaddr
, 
sh™n⁄_dma_addr_t
 
dma_h™dÀ
)

31 
	`pci_‰ì_c⁄si°ít
((
pci_dev
 *)
hwdev
, 
size
, 
vaddr
, 
dma_h™dÀ
);

32 
	}
}

34 
	$sh™n⁄_pci_£t_drvd©a
(
sh™n⁄_pci_dev_t
 *
pdev
, *
d©a
)

36 
	`pci_£t_drvd©a
((
pci_dev
 *)
pdev
, 
d©a
);

37 
	}
}

39 
	$sh™n⁄_pci_íabÀ_devi˚
(
sh™n⁄_pci_dev_t
 *
dev
)

41  
	`pci_íabÀ_devi˚
((
pci_dev
 *)
dev
);

42 
	}
}

44 
	$sh™n⁄_pci_ªque°_ªgi⁄
(
sh™n⁄_pci_dev_t
 *
dev
, 
i
, c⁄° *
p
)

46  
	`pci_ªque°_ªgi⁄
((
pci_dev
 *)
dev
, 
i
, 
p
);

47 
	}
}

49 
	$sh™n⁄_pci_ªÀa£_ªgi⁄s
(
sh™n⁄_pci_dev_t
 *
pdev
)

51 
	`pci_ªÀa£_ªgi⁄s
((
pci_dev
 *)
pdev
);

52 
	}
}

54 
sh™n⁄_ªsour˚_size_t
 
	$sh™n⁄_pci_ªsour˚_°¨t
(
sh™n⁄_pci_dev_t
 *
dev
, 
b¨
)

56  
	`pci_ªsour˚_°¨t
((
pci_dev
 *)
dev
, 
b¨
);

57 
	}
}

59 
sh™n⁄_ªsour˚_size_t
 
	$sh™n⁄_pci_ªsour˚_Àn
(
sh™n⁄_pci_dev_t
 *
dev
, 
b¨
)

61  
	`pci_ªsour˚_Àn
((
pci_dev
 *)
dev
, 
b¨
);

62 
	}
}

64 
	$sh™n⁄_pci_íabÀ_msi
(
sh™n⁄_pci_dev_t
 *
dev
)

66  
	`pci_íabÀ_msi
((
pci_dev
 *)
dev
);

67 
	}
}

69 
	$sh™n⁄_pci_íabÀ_msix
(
sh™n⁄_pci_dev_t
 *
dev
, **
msix_d©a
, 
nvec
)

71 
i
;

72 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4, 12, 0)

73 
ªt
;

76 *
msix_d©a
 = 
	`sh™n⁄_kzÆloc
(
nvec
 * (
msix_íåy
), 
GFP_SHANNON
);

77 i‡(!(*
msix_d©a
)) {

78 
	`sh™n⁄_îr
("alloc msix data failed.\n");

79  -
ENOMEM
;

81 
i
 = 0; i < 
nvec
; i++)

82 ((
msix_íåy
*)(*
msix_d©a
))[
i
].
íåy
 = i;

84 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 12, 0)

85  
	`pci_íabÀ_msix
((
pci_dev
 *)
dev
, (
msix_íåy
*)(*
msix_d©a
), 
nvec
);

87 
ªt
 = 
	`pci_íabÀ_msix_ønge
((
pci_dev
 *)
dev
, (
msix_íåy
*)(*
msix_d©a
), 
nvec
,Çvec);

88 i‡(
ªt
 < 0)

89  
ªt
;

92 
	}
}

94 
	$sh™n⁄_pci_dißbÀ_msi
(
sh™n⁄_pci_dev_t
 *
dev
)

96 
	`pci_dißbÀ_msi
((
pci_dev
 *)
dev
);

97 
	}
}

99 
	$sh™n⁄_pci_dißbÀ_msix
(
sh™n⁄_pci_dev_t
 *
dev
, **
msix_d©a
)

101 
	`sh™n⁄_k‰ì
(*
msix_d©a
);

102 *
msix_d©a
 = 
NULL
;

103 
	`pci_dißbÀ_msix
((
pci_dev
 *)
dev
);

104 
	}
}

106 
	$sh™n⁄_pci_gë_msix_íåy
(
sh™n⁄_msix_íåy_t
 *
msix_d©a
, 
úq
, 
íåy_cou¡
)

108 
íåy
;

110 
íåy
 = 0;É¡ry < 
íåy_cou¡
;Éntry++)

111 i‡(((
msix_íåy
*)
msix_d©a
)[
íåy
].
ve˘‹
 =
úq
)

114  
íåy
;

115 
	}
}

117 
	$sh™n⁄_pci_gë_msix_ve˘‹
(
sh™n⁄_msix_íåy_t
 *
msix_d©a
, 
ödex
, 
íåy_cou¡
)

119 i‡(
ödex
 < 
íåy_cou¡
)

120  ((
msix_íåy
*)
msix_d©a
)[
ödex
].
ve˘‹
;

123 
	}
}

125 
	$check_hŸ_∂uggabÀ
(
sh™n⁄_pci_dev_t
 *
pdev
)

127 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 26)

128 
pci_dev
 *pci_dev = ((pci_dev *)
pdev
);

130 i‡((
pci_dev
->
¶Ÿ
 =
NULL
Ë|| (pci_dev->¶Ÿ->
hŸ∂ug
 == NULL))

137 
	}
}

139 
	$sh™n⁄_gë_ad≠ãr_°©us
(
sh™n⁄_pci_dev_t
 *
pdev
)

141 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 26)

142 
pci_dev
 *
dev
 = ((pci_dev *)
pdev
);

143 
hŸ∂ug_¶Ÿ
 *
hŸ∂ug
 = 
dev
->
¶Ÿ
->hotplug;

144 
ªt
;

145 
u8
 
ad≠ãr_°©us
;

147 
ªt
 = 
hŸ∂ug
->
›s
->
	`gë_ad≠ãr_°©us
(hŸ∂ug, &
ad≠ãr_°©us
);

148 i‡(
ªt
) {

149 
	`sh™n⁄_îr
("getádapter status failed!\n");

150  
ªt
;

153  
ad≠ãr_°©us
;

157 
	}
}

159 
	$sh™n⁄_dißbÀ_¶Ÿ
(
sh™n⁄_pci_dev_t
 *
pdev
)

161 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 26)

162 
pci_dev
 *
dev
 = ((pci_dev *)
pdev
);

163 
hŸ∂ug_¶Ÿ
 *
hŸ∂ug
 = 
dev
->
¶Ÿ
->hotplug;

165 
hŸ∂ug
->
›s
->
	`dißbÀ_¶Ÿ
(hotplug);

168 
	}
}

170 
ölöe
 
	$sh™n⁄_pci_pcõ_ˇp
(
pci_dev
 *
dev
)

172  
	`pci_föd_ˇ∑bûôy
(
dev
, 
PCI_CAP_ID_EXP
);

173 
	}
}

175 
	$sh™n⁄_dißbÀ_c‹ª˘abÀ_´r
(
sh™n⁄_pci_dev_t
 *
pdev
)

177 
u16
 
bus_vÆ
;

178 
pci_dev
 *
dev
 = (pci_dev *)
pdev
;

179 
bus_ˇp
;

181 i‡(
dev
->
bus
->
£lf
 =
NULL
)

184 
bus_ˇp
 = 
	`sh™n⁄_pci_pcõ_ˇp
(
dev
->
bus
->
£lf
);

185 i‡(
bus_ˇp
 == 0)

187 
	`pci_ªad_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
bus_ˇp
 + 
PCI_EXP_DEVCTL
, &
bus_vÆ
);

188 
	`pci_wrôe_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
bus_ˇp
 + 
PCI_EXP_DEVCTL
, (
bus_vÆ
 & ~
PCI_EXP_DEVCTL_CERE
));

189 
	}
}

191 
	$sh™n⁄_£t_max_∑ylﬂd_size
(
sh™n⁄_pci_dev_t
 *
pdev
)

193 
u16
 
vÆ
, 
bus_vÆ
, 
mps
, 
bus_mps
;

194 
pci_dev
 *
dev
 = (pci_dev *)
pdev
;

195 
dev_ˇp
, 
bus_ˇp
;

197 i‡(
dev
->
bus
->
£lf
 =
NULL
)

200 
dev_ˇp
 = 
	`sh™n⁄_pci_pcõ_ˇp
(
dev
);

201 i‡(
dev_ˇp
 == 0)

203 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
dev_ˇp
 + 
PCI_EXP_DEVCTL
, &
vÆ
);

204 
bus_ˇp
 = 
	`sh™n⁄_pci_pcõ_ˇp
(
dev
->
bus
->
£lf
);

205 i‡(
bus_ˇp
 == 0)

207 
	`pci_ªad_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
bus_ˇp
 + 
PCI_EXP_DEVCTL
, &
bus_vÆ
);

208 
mps
 = 
vÆ
 & 
PCI_EXP_DEVCTL_PAYLOAD
;

209 
bus_mps
 = 
bus_vÆ
 & 
PCI_EXP_DEVCTL_PAYLOAD
;

210 i‡(
mps
 !
bus_mps
) {

211 
vÆ
 &~
PCI_EXP_DEVCTL_PAYLOAD
;

212 
vÆ
 |
bus_mps
;

213 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
dev_ˇp
 + 
PCI_EXP_DEVCTL
, 
vÆ
);

215 
	}
}

217 
ölöe
 
boﬁ
 
	$sh™n⁄_pci_is_pcõ
(
pci_dev
 *
dev
)

219  !!
	`sh™n⁄_pci_pcõ_ˇp
(
dev
);

220 
	}
}

222 
	#PCI_EXP_DEVCAP2_TIMEOUT
 0xf

	)

223 
	#PCI_EXP_TIMEOUT_RANGE_A
 0x1

	)

224 
	#PCI_EXP_TIMEOUT_RANGE_B
 0x2

	)

225 
	#PCI_EXP_TIMEOUT_RANGE_C
 0x4

	)

226 
	$sh™n⁄_£t_bridge_timeout
(
sh™n⁄_pci_dev_t
 *
pdev
)

228 
pci_dev
 *
bridge
, *
dev
 = (pci_dev *)
pdev
;

229 
u32
 
ˇp
;

230 
u16
 
Êags
, 
˘æ
;

231 
pos
;

233 
bridge
 = 
dev
->
bus
->
£lf
;

234 i‡(!
bridge
 || !
	`sh™n⁄_pci_is_pcõ
(bridge))

237 
pos
 = 
	`sh™n⁄_pci_pcõ_ˇp
(
bridge
);

238 i‡(!
pos
)

242 
	`pci_ªad_c⁄fig_w‹d
(
bridge
, 
pos
 + 
PCI_EXP_FLAGS
, &
Êags
);

243 i‡((
Êags
 & 
PCI_EXP_FLAGS_VERS
) < 2)

246 
	`pci_ªad_c⁄fig_dw‹d
(
bridge
, 
pos
 + 
PCI_EXP_DEVCAP2
, &
ˇp
);

247 
	`sh™n⁄_öfo
("ˇp=0x%x.\n", 
ˇp
);

248 i‡(!(
ˇp
 & 
PCI_EXP_DEVCAP2_TIMEOUT
))

251 i‡(
ˇp
 & 
PCI_EXP_TIMEOUT_RANGE_B
) {

252 
	`pci_ªad_c⁄fig_w‹d
(
bridge
, 
pos
 + 
PCI_EXP_DEVCTL2
, &
˘æ
);

253 
	`sh™n⁄_öfo
("˘æ=0x%lx.\n", 
˘æ
);

254 
˘æ
 &= 0xf;

255 
˘æ
 |= 0x6;

256 
	`pci_wrôe_c⁄fig_w‹d
(
bridge
, 
pos
 + 
PCI_EXP_DEVCTL2
, 
˘æ
);

258 
	}
}

260 *
	$sh™n⁄_pci_gë_drvd©a
(
sh™n⁄_pci_dev_t
 *
pdev
)

262  
	`pci_gë_drvd©a
((
pci_dev
 *)
pdev
);

263 
	}
}

265 
	$sh™n⁄_pcõ_£t_ªadrq
(
sh™n⁄_pci_dev_t
 *
pdev
, 
rq
)

267 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 23)

268  
	`pcõ_£t_ªadrq
((
pci_dev
 *)
pdev
, 
rq
);

270 
pci_dev
 * 
dev
 = (pci_dev *)
pdev
;

271 
ˇp
, 
îr
 = -
EINVAL
;

272 
u16
 
˘l
, 
v
;

274 i‡(
rq
 < 128 ||Ñq > 4096 || (rq & (rq-1)))

275 
out
;

277 
v
 = (
	`ffs
(
rq
) - 8) << 12;

279 
ˇp
 = 
	`pci_föd_ˇ∑bûôy
(
dev
, 
PCI_CAP_ID_EXP
);

280 i‡(!
ˇp
)

281 
out
;

283 
îr
 = 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
ˇp
 + 
PCI_EXP_DEVCTL
, &
˘l
);

284 i‡(
îr
)

285 
out
;

287 i‡((
˘l
 & 
PCI_EXP_DEVCTL_READRQ
Ë!
v
) {

288 
˘l
 &~
PCI_EXP_DEVCTL_READRQ
;

289 
˘l
 |
v
;

290 
îr
 = 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
ˇp
 + 
PCI_EXP_DEVCTL
, 
˘l
);

293 
out
:

294  
îr
;

296 
	}
}

298 
	$gë_pci_öfo
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_pci_öfo
 *
öfo
)

300 
pci_dev
 *pci_dev = (pci_dev *)
pdev
;

302 
ˇp
 = -
EINVAL
;

304 
öfo
->
dev‚
 = 
pci_dev
->devfn;

305 
öfo
->
víd‹_id
 = 
pci_dev
->
víd‹
;

306 
öfo
->
devi˚_id
 = 
pci_dev
->
devi˚
;

307 
öfo
->
subsy°em_víd‹_id
 = 
pci_dev
->
subsy°em_víd‹
;

308 
öfo
->
subsy°em_devi˚_id
 = 
pci_dev
->
subsy°em_devi˚
;

309 
öfo
->
˛ass
 = 
pci_dev
->class;

310 i‡(
pci_dev
->
bus
)

311 
öfo
->
pci_bus_numbî
 = 
pci_dev
->
bus
->
numbî
;

313 
öfo
->
pci_bus_numbî
 = 255;

314 
öfo
->
pci_¶Ÿ_numbî
 = 
	`PCI_SLOT
(
pci_dev
->
dev‚
);

315 
öfo
->
pci_func_numbî
 = 
	`PCI_FUNC
(
pci_dev
->
dev‚
);

317 
ˇp
 = 
	`pci_föd_ˇ∑bûôy
(
pci_dev
, 
PCI_CAP_ID_EXP
);

319 i‡(
ˇp
) {

320 i‡(
	`pci_ªad_c⁄fig_w‹d
(
pci_dev
, 
ˇp
 + 
PCI_EXP_LNKSTA
, &
öfo
->
 k°a
))

321 
öfo
->
 k°a
 = 0;

322 i‡(
	`pci_ªad_c⁄fig_dw‹d
(
pci_dev
, 
ˇp
 + 
PCI_EXP_LNKCAP
, &
öfo
->
 kˇp
))

323 
öfo
->
 kˇp
 = 0;

325 
öfo
->
 k°a
 = 0;

326 
öfo
->
 kˇp
 = 0;

328 
	}
}

330 
	$gë_pci_úq_num
(
sh™n⁄_pci_dev_t
 *
pdev
)

332  ((
pci_dev
 *)
pdev
)->
úq
;

333 
	}
}

335 
sh™n⁄_devi˚_t
 *
	$gë_devi˚_‰om_pci_dev
(
sh™n⁄_pci_dev_t
 *
pdev
)

337  (
sh™n⁄_devi˚_t
 *)(&(((
pci_dev
 *)
pdev
)->
dev
));

338 
	}
}

340 
	$dev_is_8639
(
sh™n⁄_pci_dev_t
 *
pdev
)

342 
pci_dev
 *pci_dev = (pci_dev *)
pdev
;

343  (
pci_dev
->
devi˚
 == 0x1275)?1:0;

344 
	}
}

346 
	$dev_is_g5_ffß
(
sh™n⁄_pci_dev_t
 *
pdev
)

348 
pci_dev
 *pci_dev = (pci_dev *)
pdev
;

349  (
pci_dev
->
devi˚
 == 0x05a5)?1:0;

350 
	}
}

352 
	$dev_is_g5_Âga
(
sh™n⁄_pci_dev_t
 *
pdev
)

354 
pci_dev
 *pci_dev = (pci_dev *)
pdev
;

355  ((
pci_dev
->
devi˚
 == 0x25a5) || (pci_dev->device == 0x35a5))?1:0;

356 
	}
}

358 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

359 
	$sh™n⁄_pcõ_Êr
(
pci_dev
 *
dev
)

361 
i
;

362 
pos
;

363 
u32
 
ˇp
;

364 
u16
 
°©us
, 
c⁄åﬁ
;

366 
pos
 = 
	`pci_föd_ˇ∑bûôy
(
dev
, 
PCI_CAP_ID_EXP
);

367 i‡(!
pos
)

368  -
ENOTTY
;

370 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
pos
 + 
PCI_EXP_DEVCAP
, &
ˇp
);

371 i‡(!(
ˇp
 & 
PCI_EXP_DEVCAP_FLR
))

372  -
ENOTTY
;

375 
i
 = 0; i < 4; i++) {

376 i‡(
i
)

377 
	`sh™n⁄_m¶ìp
((1 << (
i
 - 1)) * 100);

379 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
pos
 + 
PCI_EXP_DEVSTA
, &
°©us
);

380 i‡(!(
°©us
 & 
PCI_EXP_DEVSTA_TRPND
))

381 
˛ór
;

384 
	`dev_îr
(&
dev
->dev, "transaction isÇot cleared; "

387 
˛ór
:

388 
	`pci_ªad_c⁄fig_w‹d
(
dev
, 
pos
 + 
PCI_EXP_DEVCTL
, &
c⁄åﬁ
);

389 
c⁄åﬁ
 |
PCI_EXP_DEVCTL_BCR_FLR
;

390 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, 
pos
 + 
PCI_EXP_DEVCTL
, 
c⁄åﬁ
);

392 
	`sh™n⁄_m¶ìp
(100);

395 
	}
}

397 
	$sh™n⁄_pci_af_Êr
(
pci_dev
 *
dev
)

399 
i
;

400 
pos
;

401 
u8
 
ˇp
;

402 
u8
 
°©us
;

404 
pos
 = 
	`pci_föd_ˇ∑bûôy
(
dev
, 
PCI_CAP_ID_AF
);

405 i‡(!
pos
)

406  -
ENOTTY
;

408 
	`pci_ªad_c⁄fig_byã
(
dev
, 
pos
 + 
PCI_AF_CAP
, &
ˇp
);

409 i‡(!(
ˇp
 & 
PCI_AF_CAP_TP
Ë|| !(ˇ∞& 
PCI_AF_CAP_FLR
))

410  -
ENOTTY
;

413 
i
 = 0; i < 4; i++) {

414 i‡(
i
)

415 
	`sh™n⁄_m¶ìp
((1 << (
i
 - 1)) * 100);

417 
	`pci_ªad_c⁄fig_byã
(
dev
, 
pos
 + 
PCI_AF_STATUS
, &
°©us
);

418 i‡(!(
°©us
 & 
PCI_AF_STATUS_TP
))

419 
˛ór
;

422 
	`dev_îr
(&
dev
->dev, "transaction isÇot cleared; "

425 
˛ór
:

426 
	`pci_wrôe_c⁄fig_byã
(
dev
, 
pos
 + 
PCI_AF_CTRL
, 
PCI_AF_CTRL_FLR
);

427 
	`sh™n⁄_m¶ìp
(100);

430 
	}
}

432 
	$sh™n⁄_pci_dev_d3_¶ìp
(
pci_dev
 *
dev
)

434 
dñay
 = 100;

435 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 33)

436 
dñay
 = 
dev
->
d3_dñay
;

438 
	`sh™n⁄_m¶ìp
(
dñay
);

439 
	}
}

441 
	$sh™n⁄_pci_pm_ª£t
(
pci_dev
 *
dev
)

443 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

444 
u16
 
c§
;

446 i‡(!
dev
->
pm_ˇp
)

447  -
ENOTTY
;

449 
	`pci_ªad_c⁄fig_w‹d
(
dev
, dev->
pm_ˇp
 + 
PCI_PM_CTRL
, &
c§
);

450 i‡(
c§
 & 
PCI_PM_CTRL_NO_SOFT_RESET
)

451  -
ENOTTY
;

453 i‡(
dev
->
cuºít_°©e
 !
PCI_D0
)

454  -
EINVAL
;

456 
c§
 &~
PCI_PM_CTRL_STATE_MASK
;

457 
c§
 |
PCI_D3hŸ
;

458 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, dev->
pm_ˇp
 + 
PCI_PM_CTRL
, 
c§
);

459 
	`sh™n⁄_pci_dev_d3_¶ìp
(
dev
);

461 
c§
 &~
PCI_PM_CTRL_STATE_MASK
;

462 
c§
 |
PCI_D0
;

463 
	`pci_wrôe_c⁄fig_w‹d
(
dev
, dev->
pm_ˇp
 + 
PCI_PM_CTRL
, 
c§
);

464 
	`sh™n⁄_pci_dev_d3_¶ìp
(
dev
);

466  -
ENOTTY
;

467 
	}
}

469 
	$sh™n⁄_pci_∑ª¡_bus_ª£t
(
pci_dev
 *
dev
)

471 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

472 
u16
 
˘æ
;

473 
pci_dev
 *
pdev
;

475 i‡(
	`pci_is_roŸ_bus
(
dev
->
bus
Ë|| dev->
sub‹dö©e
 || !dev->bus->
£lf
)

476  -
ENOTTY
;

478 
	`li°_f‹_óch_íåy
(
pdev
, &
dev
->
bus
->
devi˚s
, 
bus_li°
)

479 i‡(
pdev
 !
dev
)

480  -
ENOTTY
;

482 
	`pci_ªad_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
PCI_BRIDGE_CONTROL
, &
˘æ
);

483 
˘æ
 |
PCI_BRIDGE_CTL_BUS_RESET
;

484 
	`pci_wrôe_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
PCI_BRIDGE_CONTROL
, 
˘æ
);

485 
	`sh™n⁄_m¶ìp
(100);

487 
˘æ
 &~
PCI_BRIDGE_CTL_BUS_RESET
;

488 
	`pci_wrôe_c⁄fig_w‹d
(
dev
->
bus
->
£lf
, 
PCI_BRIDGE_CONTROL
, 
˘æ
);

489 
	`sh™n⁄_m¶ìp
(100);

491  -
ENOTTY
;

492 
	}
}

495 
	$sh™n⁄_pci_gë_max_lökwidth
(
sh™n⁄_pci_öfo
 *
öfo
)

497  
öfo
 ? ((öfo->
 kˇp
 >> 4) & 0x3f) : 0;

498 
	}
}

500 
	$sh™n⁄_pci_gë_cur_lökwidth
(
sh™n⁄_pci_öfo
 *
öfo
)

502  
öfo
 ? ((öfo->
 k°a
 >> 4) & 0x3f) : 0;

503 
	}
}

505 
	$sh™n⁄_pci_gë_max_lök•ìd
(
sh™n⁄_pci_öfo
 *
öfo
)

507  
öfo
 ? (öfo->
 kˇp
 & 0xf) : 0;

508 
	}
}

510 
	$sh™n⁄_pci_gë_cur_lök•ìd
(
sh™n⁄_pci_öfo
 *
öfo
)

512  
öfo
 ? (öfo->
 k°a
 & 0xf) : 0;

513 
	}
}

515 
	$sh™n⁄_pci_ª£t_fun˘i⁄
(
sh™n⁄_pci_dev_t
 *
pdev
)

517 
rc
 = 1;

518 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

520 i‡(!
pdev
)

523 
	`pci_ßve_°©e
(
pdev
);

524 
	`pci_wrôe_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, 
PCI_COMMAND_INTX_DISABLE
);

526 
rc
 = 
	`sh™n⁄_pcõ_Êr
(
pdev
);

527 i‡(
rc
 !-
ENOTTY
)

528 
d⁄e
;

530 
rc
 = 
	`sh™n⁄_pci_af_Êr
(
pdev
);

531 i‡(
rc
 !-
ENOTTY
)

532 
d⁄e
;

534 
rc
 = 
	`sh™n⁄_pci_pm_ª£t
(
pdev
);

535 i‡(
rc
 !-
ENOTTY
)

536 
d⁄e
;

539 
rc
 = 
	`sh™n⁄_pci_∑ª¡_bus_ª£t
(
pdev
);

540 
d⁄e
:

541 
	`pci_ª°‹e_°©e
(
pdev
);

543  
rc
;

544 
	}
}

546 
	$sh™n⁄_pci_gë_node
(
sh™n⁄_pci_dev_t
 *
pdev
)

548 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

549  
	`dev_to_node
(&(((
pci_dev
 *)
pdev
)->
dev
));

553 
	}
}

	@shannon_pci.h

1 #i‚de‡
__SHANNON_PCI_H


2 
	#__SHANNON_PCI_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

5 
	~"sh™n⁄_dma.h
"

7 
	ssh™n⁄_pci_öfo
 {

8 
u32
 
	mdev‚
;

9 
u16
 
	mvíd‹_id
;

10 
u16
 
	mdevi˚_id
;

11 
u16
 
	msubsy°em_víd‹_id
;

12 
u16
 
	msubsy°em_devi˚_id
;

13 
u32
 
	m˛ass
;

14 
u8
 
	mpci_bus_numbî
;

15 
u8
 
	mpci_¶Ÿ_numbî
;

16 
u8
 
	mpci_func_numbî
;

17 
u32
 
	m kˇp
;

18 
u16
 
	m k°a
;

21 
sh™n⁄_pci_dev_t
 *
sh™n⁄_pci_gë_¶Ÿ
(sh™n⁄_pci_dev_à*
dev
, 
dev‚
);

22 
sh™n⁄_pci_íabÀ_devi˚
(
sh™n⁄_pci_dev_t
 *
dev
);

23 
sh™n⁄_pci_dißbÀ_devi˚
(
sh™n⁄_pci_dev_t
 *
dev
);

25 *
sh™n⁄_pci_Æloc_c⁄si°ít
(
sh™n⁄_pci_dev_t
 *
hwdev
, 
sh™n⁄_size_t
 
size
, 
sh™n⁄_dma_addr_t
 *
dma_h™dÀ
);

26 
sh™n⁄_pci_‰ì_c⁄si°ít
(
sh™n⁄_pci_dev_t
 *
hwdev
, 
sh™n⁄_size_t
 
size
, *
vaddr
, 
sh™n⁄_dma_addr_t
 
dma_h™dÀ
);

28 
sh™n⁄_pci_£t_ma°î
(
sh™n⁄_pci_dev_t
 *
dev
);

29 
sh™n⁄_pci_£t_drvd©a
(
sh™n⁄_pci_dev_t
 *
pdev
, *
d©a
);

30 *
sh™n⁄_pci_gë_drvd©a
(
sh™n⁄_pci_dev_t
 *
pdev
);

31 
sh™n⁄_pci_ªque°_ªgi⁄
(
sh™n⁄_pci_dev_t
 *
dev
, 
i
, c⁄° *
p
);

32 
sh™n⁄_pci_ªÀa£_ªgi⁄s
(
sh™n⁄_pci_dev_t
 *
pdev
);

33 
sh™n⁄_ªsour˚_size_t
 
sh™n⁄_pci_ªsour˚_°¨t
(
sh™n⁄_pci_dev_t
 *
dev
, 
b¨
);

34 
sh™n⁄_ªsour˚_size_t
 
sh™n⁄_pci_ªsour˚_Àn
(
sh™n⁄_pci_dev_t
 *
dev
, 
b¨
);

35 
sh™n⁄_pci_íabÀ_msi
(
sh™n⁄_pci_dev_t
 *
dev
);

36 
sh™n⁄_pci_íabÀ_msix
(
sh™n⁄_pci_dev_t
 *
dev
, **
msix_d©a
, 
nvec
);

37 
sh™n⁄_pci_dißbÀ_msi
(
sh™n⁄_pci_dev_t
 *
dev
);

38 
sh™n⁄_pci_dißbÀ_msix
(
sh™n⁄_pci_dev_t
 *
dev
, **
msix_d©a
);

39 
sh™n⁄_pci_gë_msix_íåy
(
sh™n⁄_msix_íåy_t
 *
msix_d©a
, 
úq
, 
íåy_cou¡
);

40 
sh™n⁄_pci_gë_msix_ve˘‹
(
sh™n⁄_msix_íåy_t
 *
msix_d©a
, 
ödex
, 
íåy_cou¡
);

41 
check_hŸ_∂uggabÀ
(
sh™n⁄_pci_dev_t
 *
pdev
);

42 
sh™n⁄_gë_ad≠ãr_°©us
(
sh™n⁄_pci_dev_t
 *
dev
);

43 
sh™n⁄_dißbÀ_¶Ÿ
(
sh™n⁄_pci_dev_t
 *
dev
);

44 
sh™n⁄_dißbÀ_c‹ª˘abÀ_´r
(
sh™n⁄_pci_dev_t
 *
dev
);

45 
sh™n⁄_£t_max_∑ylﬂd_size
(
sh™n⁄_pci_dev_t
 *
dev
);

46 
sh™n⁄_£t_bridge_timeout
(
sh™n⁄_pci_dev_t
 *
dev
);

47 
sh™n⁄_pcõ_£t_ªadrq
(
sh™n⁄_pci_dev_t
 *
pdev
, 
rq
);

49 
gë_pci_öfo
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_pci_öfo
 *
öfo
);

50 
gë_pci_úq_num
(
sh™n⁄_pci_dev_t
 *
pdev
);

51 
sh™n⁄_devi˚_t
 * 
gë_devi˚_‰om_pci_dev
(
sh™n⁄_pci_dev_t
 *
pdev
);

52 
dev_is_8639
(
sh™n⁄_pci_dev_t
 *
pdev
);

53 
dev_is_g5_ffß
(
sh™n⁄_pci_dev_t
 *
pdev
);

54 
dev_is_g5_Âga
(
sh™n⁄_pci_dev_t
 *
pdev
);

55 
sh™n⁄_pci_gë_max_lökwidth
(
sh™n⁄_pci_öfo
 *
öfo
);

56 
sh™n⁄_pci_gë_cur_lökwidth
(
sh™n⁄_pci_öfo
 *
öfo
);

57 
sh™n⁄_pci_gë_max_lök•ìd
(
sh™n⁄_pci_öfo
 *
öfo
);

58 
sh™n⁄_pci_gë_cur_lök•ìd
(
sh™n⁄_pci_öfo
 *
öfo
);

59 
sh™n⁄_pci_ª£t_fun˘i⁄
(
sh™n⁄_pci_dev_t
 *
pdev
);

60 
sh™n⁄_pci_gë_node
(
sh™n⁄_pci_dev_t
 *
pdev
);

	@shannon_port.h

1 #i‚de‡
__SHANNON_PORT_H


2 
	#__SHANNON_PORT_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

6 
	~"sh™n⁄_time.h
"

7 
	~"sh™n⁄_w‹kqueue.h
"

8 
	~"sh™n⁄_li°.h
"

9 
	~"sh™n⁄_fûe.h
"

10 
	~"sh™n⁄_sˇâî.h
"

11 
	~"sh™n⁄_dma.h
"

12 
	~"sh™n⁄_pci.h
"

13 
	~"sh™n⁄_devi˚.h
"

14 
	~"sh™n⁄_block.h
"

15 
	~"sh™n⁄_sched.h
"

16 
	~"sh™n⁄_sysfs.h
"

17 
	~"sh™n⁄_waôqueue.h
"

18 
	~"sh™n⁄_scsi.h
"

19 
	~"sh™n⁄_memblock.h
"

24 *
gë_sh™n⁄_dev_‰om_li°
(
sh™n⁄_li°_hód
 *
li°
);

25 *
gë_miscdevi˚_‰om_sh™n⁄_dev
(
sh™n⁄_dev
 *
sdev
);

26 *
gë_sh™n⁄_poﬁ_‰om_li°
(
sh™n⁄_li°_hód
 *
li°
);

27 *
gë_miscdevi˚_‰om_sh™n⁄_poﬁ
(*
•oﬁ
);

33 
sh™n⁄_li°_hód
 
sh™n⁄_dev_li°
;

34 
	#FOR_SDEV
 0

	)

35 
	#FOR_POOL
 1

	)

36 
sh™n⁄_¸óã_miscdevi˚
(*
misc
, *
cdev_«me
, *
nodíame
, 
ty≥
);

37 
sh™n⁄_de°roy_miscdevi˚
(*
misc
);

	@shannon_prefetch.c

11 
	~"sh™n⁄.h
"

12 
	~"sh™n⁄_¥e„tch.h
"

14 
ölöe
 
	$¥e„tch_check_dev_åaffic
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_¥e„tch
 *
¥e„tch
)

16 
i
;

17 
u32
 
lun£t_qd
 = 0;

19 i‡(
¥e„tch
->
åaffic_Á˘‹
 == 0)

22 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

23 
lun£t_qd
 +
	`lun£t_queue_dïth
(&
sdev
->
lun£ts
[
i
]) / 16;

25 i‡(
lun£t_qd
 >(
sdev
->
lun£t_cou¡
 * 
¥e„tch
->
åaffic_Á˘‹
))

29 
	}
}

31 
	$h™dÀ_ˇche_¶Ÿ_ªq_li°
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
)

33 
sh™n⁄_ˇche_löe
 *
ˇche_löe
 = 
¶Ÿ
->cache_line;

34 
sh™n⁄_¥e„tch
 *
¥e„tch
 = 
ˇche_löe
->prefetch;

35 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

36 
sh™n⁄_disk
 *
sdisk
;

37 
logicb64_t
 
fú°_lba
 = 
ˇche_löe
->first_lba;

38 
ödex
, 
fú°_size
;

39 
ªt
, 
ö_ˇche
;

40 
lun_pba
Üun_pba;

42 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
¶Ÿ
->
ªq_li°
, 
li°
) {

43 
ö_ˇche
 = 0;

44 
	`sh™n⁄_li°_dñ_öô
(&
ªq
->
li°
);

45 
	`sh™n⁄_©omic_dec
(&
ˇche_löe
->
u£r_cou¡
);

46 
sdisk
 = 
	`c⁄èöî_of
(
¥e„tch
, 
sh™n⁄_disk
,Örefetch);

47 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

48 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, &
ö_ˇche
, 
sdisk
);

49 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

50 i‡(
ªt
 < 0) {

51 
fú°_size
 = 
sdev
->
logicb_size
 - (()
ªq
->
vút_addr
 & (sdev->logicb_size - 1));

52 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr
, 0, 
fú°_size
);

53 i‡(
fú°_size
 < 
sdev
->
logicb_size
)

54 
	`sh™n⁄_mem£t
(
ªq
->
vút_addr_2
, 0, 
sdev
->
logicb_size
 - 
fú°_size
);

55 
ªq
->
°©e
 = 
REQ_DONE
;

56 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

59 i‡(
ö_ˇche
 == 0) {

60 
sh™n⁄_poﬁ
 *
•oﬁ
;

61 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

62 
sh™n⁄_sb
 *
sb
;

63 
lun
;

65 i‡(!
	`l⁄g_lba_is_övÆid
(
ªq
->
lba
)) {

66 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

67 i‡(
•oﬁ
) {

68 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
ªq
->
ns_id
]);

69 i‡((
ns
 =
NULL
Ë|| (
ªq
->
ns_id
 >
SHANNON_NS_NUM
)) {

70 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
ªq
->
ns_id
);

71 
	`BUG
();

73 i‡(
ªq
->
ns_£q_num
 !
ns
->
£q_num
) {

74 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

75 
ªq
->
ns_£q_num
,Ñeq->
ns_id
, 
ns
->
£q_num
);

76 
	`BUG
();

78 
sdisk
 = &
ns
->sdisk;

81 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

82 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &ªq->
pba
, 
NULL
, 
sdisk
);

83 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

84 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

85 i‡(
ªt
 < 0) {

86 
	`sh™n⁄_log
("%s:Üb®%x may bêdisˇrded. Ju° ign‹êô.\n", 
sdev
->
sdisk
.
disk_«me
, 
ªq
->
lba
);

87 
ªq
->
°©e
 = 
REQ_DONE
;

88 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

91 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

92 
ªq
->
£q_num
 = 
sb
->seq_num;

95 
ªq
->
_ecc
 = 0;

96 
ªq
->
_mëad©a
 = 0;

97 
lun
 = 
ªq
->
pba
.lun;

98 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
ªq
);

99 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

103 
	`BUG_ON
(
ªq
->
lba
 < 
fú°_lba
);

104 
ödex
 = (
ªq
->
lba
 - 
fú°_lba
Ë% 
¶Ÿ
->
ˇche_cou¡
;

105 
ödex
 = index % 
¶Ÿ
->
ˇche_cou¡
;

106 
	`BUG_ON
(
¶Ÿ
->
¶Ÿ_ödex
 !(
ªq
->
lba
 - 
fú°_lba
Ë/ slŸ->
ˇche_cou¡
);

107 
fú°_size
 = 
sdev
->
logicb_size
 - (()
ªq
->
vút_addr
 & (sdev->logicb_size - 1));

108 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
¶Ÿ
->
ˇche
[
ödex
], 
fú°_size
);

109 i‡(
fú°_size
 < 
sdev
->
logicb_size
)

110 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
, 
¶Ÿ
->
ˇche
[
ödex
] + 
fú°_size
, 
sdev
->
logicb_size
 - first_size);

111 i‡(
ªq
->
£ndî
 =
FROM_HOST
)

112 
¶Ÿ
->
ho°_ªad_£˘‹s
 +
sdev
->
£˘‹s_ö_logicb
;

113 
ªq
->
°©e
 = 
REQ_DONE
;

114 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

116 
	`sh™n⁄_˛ór_bô
(
SLOT_HANDLE_REQ_LIST_BIT
, &
¶Ÿ
->
°©e
);

117 
	}
}

119 
	$¥e„tch_ˇche_¶Ÿ_ˇŒback
(
sh™n⁄_bio
 *
sbio
)

121 
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
 = (sh™n⁄_ˇche_¶Ÿ *)
sbio
->
d©a
;

122 
sh™n⁄_ˇche_löe
 *
ˇche_löe
 = 
¶Ÿ
->cache_line;

123 
sh™n⁄_¥e„tch
 *
¥e„tch
 = 
ˇche_löe
->prefetch;

124 
sh™n⁄_disk
 *
sdisk
 = 
	`c⁄èöî_of
(
¥e„tch
, shannon_disk,Örefetch);

125 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
sdisk
, shannon_dev, sdisk);

126 
sh™n⁄_ªque°
 *
ªq
, *
tmp
;

127 
lun_pba
Üun_pba;

128 
h™dÀ_ªq_li°
 = 0, 
ªt
;

130 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
ªq
, 
tmp
, &
sbio
->
ªq_li°
, 
bio_li°
) {

131 
	`sh™n⁄_li°_dñ
(&
ªq
->
bio_li°
);

132 i‡(
	`u∆ikñy
(
ªq
->
ªªad
 & 
RAID_READ_MASK
)) {

133 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
,Ñeq->
ªcovî_buf
, 
sdev
->
logicb_size
);

134 
	`‰ì_logicb_buf
(
sdev
, 
ªq
->
ªcovî_buf
);

135 
ªq
->
ªcovî_buf
 = 
NULL
;

137 
	`sh™n⁄_dma_unm≠_∑ge
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
,Ñeq->
dma_dú
);

138 i‡((
ªq
->
_ecc
 >
SH_FAKE_ERR
Ë|| !
	`gë_¥e„tch_íabÀ_°©e
(
¥e„tch
)) {

139 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

140 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, 
NULL
, 
sdisk
);

141 i‡(
ªt
 == 0)

142 
	`˛ór_lba_d©a_ö_ˇche
(
sdisk
, 
ªq
->
lba
);

143 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

146 
	`‰ì_ªq
(
ªq
);

149 
	`sh™n⁄_wrôe_lock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

150 
	`sh™n⁄_•ö_lock_bh
(&
¶Ÿ
->
li°_lock
);

151 
	`BUG_ON
(
	`sh™n⁄_ã°_bô
(
SLOT_HANDLE_REQ_LIST_BIT
, &
¶Ÿ
->
°©e
));

152 i‡(!
	`sh™n⁄_li°_em±y
(&
¶Ÿ
->
ªq_li°
)) {

153 
	`sh™n⁄_£t_bô
(
SLOT_HANDLE_REQ_LIST_BIT
, &
¶Ÿ
->
°©e
);

154 
h™dÀ_ªq_li°
 = 1;

156 
	`sh™n⁄_•ö_u∆ock_bh
(&
¶Ÿ
->
li°_lock
);

158 
	`BUG_ON
(!
	`sh™n⁄_ã°_bô
(
SLOT_WAIT_DATA_BIT
, &
¶Ÿ
->
°©e
));

159 
	`sh™n⁄_˛ór_bô
(
SLOT_WAIT_DATA_BIT
, &
¶Ÿ
->
°©e
);

160 
	`sh™n⁄_wrôe_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

162 if(
h™dÀ_ªq_li°
)

163 
	`h™dÀ_ˇche_¶Ÿ_ªq_li°
(
sdev
, 
¶Ÿ
);

165 
	`sh™n⁄_©omic_dec
(&
ˇche_löe
->
u£r_cou¡
);

166 
	`‰ì_sbio
(
sbio
);

167 
	}
}

169 
ölöe
 
	$ˇche_löe_¶Ÿs_ªady
(
sh™n⁄_ˇche_löe
 *
ˇche
)

171  (
	`sh™n⁄_©omic_ªad
(&
ˇche
->
u£r_cou¡
) == 0);

172 
	}
}

174 
	$ˇn_¥e„tch_ˇche_löe
(
sh™n⁄_ˇche_löe
 *
ˇche
)

176  
	`ˇche_löe_¶Ÿs_ªady
(
ˇche
);

177 
	}
}

179 
	$£t_Æl_ˇche_¶Ÿ_waô_d©a
(
sh™n⁄_ˇche_löe
 *
ˇche_löe
)

181 
i
;

183 
i
 = 0; i < 
ˇche_löe
->
¶Ÿ_cou¡
; i++)

184 
	`sh™n⁄_£t_bô
(
SLOT_WAIT_DATA_BIT
, &
ˇche_löe
->
¶Ÿ
[
i
].
°©e
);

185 
	}
}

187 
	$¥e„tch_ˇche_löe
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
sh™n⁄_ˇche_löe
 *
ˇche_löe
)

189 
sh™n⁄_disk
 *
sdisk
 = 
	`c⁄èöî_of
(
¥e„tch
, shannon_disk,Örefetch);

191 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
sdisk
, shannon_dev, sdisk);

192 
sh™n⁄_bio
 *
sbio
;

193 
sh™n⁄_ªque°
 *
ªq
;

194 
sh™n⁄_∑ge
 *
∑ge
;

195 
logicb64_t
 
ﬁd_fú°_lba
, 
fú°_lba
 = 
	`lba_rounddown_ˇche_löe
(
¥e„tch
,Öª„tch->
cuºít_¥e„tch_lba
);

196 
logicb64_t
 
°¨t_¥e„tch_lba
;

197 
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
;

198 
œ°_lun
 = -1, 
lun_logicbs
 = 0;

199 
lun_pba
Üun_pba;

200 
sh™n⁄_sb
 *
sb
;

201 
i
, 
j
, 
ªt
;

203 i‡(
ˇche_löe
->
löe_°©e
 =
CACHE_LINE_DESTROYED
)

205 i‡(
fú°_lba
 =
ˇche_löe
->first_lba)

207 i‡(
	`¥e„tch_check_dev_åaffic
(
sdev
, 
¥e„tch
))

210 
	`sh™n⁄_wrôe_lock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

211 i‡(
	`ˇn_¥e„tch_ˇche_löe
(
ˇche_löe
)) {

212 
ﬁd_fú°_lba
 = 
ˇche_löe
->
fú°_lba
;

213 i‡(
ﬁd_fú°_lba
 !
INVALID_LBA
) {

214 
i
 = 0; i < 
¥e„tch
->
lba_≥r_löe
; i++) {

215 i‡(
ﬁd_fú°_lba
 + 
i
 < (
sdisk
->
£˘‹s
 >> (
sdev
->
logicb_shi·
 - 9))) {

216 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

217 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ﬁd_fú°_lba
 + 
i
, &
lun_pba
, 
NULL
, 
sdisk
);

218 i‡(
ªt
 == 0)

219 
	`˛ór_lba_d©a_ö_ˇche
(
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

220 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

225 
	`£t_Æl_ˇche_¶Ÿ_waô_d©a
(
ˇche_löe
);

226 
	`sh™n⁄_©omic_add
(
ˇche_löe
->
¶Ÿ_cou¡
, &ˇche_löe->
u£r_cou¡
);

227 
ˇche_löe
->
fú°_lba
 = first_lba;

229 
	`sh™n⁄_wrôe_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

232 
	`sh™n⁄_wrôe_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

233 
°¨t_¥e„tch_lba
 = 
ˇche_löe
->
fú°_lba
;

235 
i
 = 0; i < 
ˇche_löe
->
¶Ÿ_cou¡
; i++) {

236 
¶Ÿ
 = &
ˇche_löe
->¶Ÿ[
i
];

237 
sbio
 = 
	`Æloc_sbio
(
GFP_SHANNON
);

238 
	`£t_sbio_debug_èg
(
sbio
, 
PREFETCH_TAG
);

239 
sbio
->
logicbs
 = 
¶Ÿ
->
ˇche_cou¡
;

240 
	`sh™n⁄_©omic_£t
(&
sbio
->
u£r_cou¡
, sbio->
logicbs
);

241 
sbio
->
ˇŒback
 = 
¥e„tch_ˇche_¶Ÿ_ˇŒback
;

242 
sbio
->
may_¶ìp_ö_ˇŒback
 = 0;

243 
sbio
->
d©a
 = (*)
¶Ÿ
;

245 
j
 = 0; j < 
¶Ÿ
->
ˇche_cou¡
; j++) {

246 
logicb64_t
 
èrgë_lba
 = 
fú°_lba
 + 
i
 * 
¶Ÿ
->
ˇche_cou¡
 + 
j
;

247 i‡(
°¨t_¥e„tch_lba
 > 
èrgë_lba
) {

248 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

251 i‡(
	`u∆ikñy
(
èrgë_lba
 > (
sdisk
->
£˘‹s
 >> (
sdev
->
logicb_shi·
 - 9)))) {

252 
	`sbio_ªÀa£
(
sdev
, 
sbio
);

255 
ªq
 = 
	`Æloc_ªq
(
GFP_SHANNON
);

256 
	`£t_ªq_debug_èg
(
ªq
, 
PREFETCH_TAG
, 
i
 * 
¶Ÿ
->
ˇche_cou¡
 + 
j
);

257 
ªq
->
£ndî
 = 
FROM_PREFETCH
;

258 
ªq
->
sbio
 = sbio;

259 
ªq
->
›code
 = 
sh_cmd_ªad
;

260 
ªq
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

261 
ªq
->
lba
 = 
èrgë_lba
;

262 
ªq
->
Àngth
 = 
sdev
->
logicb_size
;

263 
ªq
->
vút_addr
 = 
	`gë_ˇche_¶Ÿ_ödex_addr
(
¶Ÿ
, 
j
);

264 
∑ge
 = 
	`sh™n⁄_vút_to_∑ge
((*)
ªq
->
vút_addr
);

265 i‡(!
∑ge
) {

266 
	`sh™n⁄_îr
("vmalloc_to_page failed!.\n");

267 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

268 
	`‰ì_ªq
(
ªq
);

271 
ªq
->
dma_addªss
 = 
	`sh™n⁄_dma_m≠_∑ge
(
sdev
->
pci_dev
, 
∑ge
, 0, sdev->
logicb_size
,Ñeq->
dma_dú
);

272 i‡(
	`sh™n⁄_dma_m≠pög_îr‹
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
)) {

273 
	`sh™n⁄_îr
("shannon_dma_map_pageÉrror.\n");

274 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

275 
	`‰ì_ªq
(
ªq
);

278 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

279 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ªq
->
lba
, &
lun_pba
, 
NULL
, 
sdisk
);

280 i‡(
ªt
 == 0)

281 
	`£t_lba_d©a_ö_ˇche
(
sdisk
, 
ªq
->
lba
);

282 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ªq
->
lba
);

283 i‡(
ªt
 < 0) {

284 
	`sh™n⁄_dma_unm≠_∑ge
(
sdev
->
pci_dev
, 
ªq
->
dma_addªss
, sdev->
logicb_size
,Ñeq->
dma_dú
);

285 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

286 
	`‰ì_ªq
(
ªq
);

289 
¥e„tch
->
¥e„tch_cou¡
++;

290 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

291 
ªq
->
pba
.
lun_pba
 =Üun_pba.lun_pba;

292 
ªq
->
pba
.
lun
 = 
lun_pba
.lun;

293 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

294 
ªq
->
£q_num
 = 
sb
->seq_num;

295 
	`sh™n⁄_li°_add_èû
(&
ªq
->
bio_li°
, &
sbio
->
ªq_li°
);

296 
sb
 = 
sdev
->
sbs
 + 
ªq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

297 
ªq
->
£q_num
 = 
sb
->seq_num;

298 
	`SHANNON_INIT_LIST_HEAD
(&
ªq
->
chunk_li°
);

299 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[
lun_pba
.lun], 
ªq
);

300 i‡((
œ°_lun
 >0Ë&& (œ°_lu¿!
lun_pba
.
lun
)) {

301 
	`lun£t_pick_ªque°
(
sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

302 
lun_logicbs
 = 0;

304 
œ°_lun
 = 
lun_pba
.
lun
;

305 
lun_logicbs
++;

307 i‡(
œ°_lun
 >= 0)

308 
	`lun£t_pick_ªque°
(
sdev
->
lun
[
œ°_lun
]->
lun£t
, 
lun_logicbs
);

312 
	}
}

314 
sh™n⁄_ˇche_löe
 *
	$gë_√xt_¥e„tch_ˇche_löe
(
sh™n⁄_¥e„tch
 *
¥e„tch
)

316 
sh™n⁄_ˇche_löe
 *
ˇche_löe
 = 
NULL
;

317 
logicb64_t
 
œ°_hô_lba
 = 
	`sh™n⁄_©omic64_ªad
(&
¥e„tch
->last_hit_lba);

318 
u64
 
tmp_¥e„tch_löe
;

321 
¥e„tch
->
cuºít_¥e„tch_lba
 = 
	`lba_rounddown_ˇche_löe
’ª„tch, 
œ°_hô_lba
 +Öª„tch->
di°™˚_Á˘‹
 *Öª„tch->
lba_≥r_löe
);

323 
tmp_¥e„tch_löe
 = 
	`gë_ˇche_löe_‰om_lba
(
¥e„tch
,Öª„tch->
cuºít_¥e„tch_lba
);

324 
ˇche_löe
 = &
¥e„tch
->ˇche_löe[
tmp_¥e„tch_löe
];

325 i‡(
ˇche_löe
->
fú°_lba
 =
¥e„tch
->
cuºít_¥e„tch_lba
)

326  
NULL
;

328  
ˇche_löe
;

329 
	}
}

331 
	$sh™n⁄_ˇche_¶Ÿ_öô
(
sh™n⁄_ˇche_löe
 *
ˇche_löe
, 
u32
 
logicb_size
, u32 
ödex
)

333 
i
;

334 
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
 = &
ˇche_löe
->¶Ÿ[
ödex
];

335 
sh™n⁄_¥e„tch
 *
¥e„tch
 = 
ˇche_löe
->prefetch;

337 
	`BUG_ON
(
¶Ÿ
->
ˇche
 !
NULL
);

338 
¶Ÿ
->
ˇche
 = 
	`sh™n⁄_kzÆloc
(
¥e„tch
->
ˇche_≥r_¶Ÿ
 * (*), 
GFP_SHANNON
);

339 i‡(
¶Ÿ
->
ˇche
 =
NULL
)

342 
i
 = 0; i < 
¥e„tch
->
ˇche_≥r_¶Ÿ
; i++) {

343 
¶Ÿ
->
ˇche
[
i
] = 
	`sh™n⁄_kmÆloc
(
logicb_size
, 
GFP_SHANNON
);

344 i‡(
¶Ÿ
->
ˇche
[
i
] =
NULL
)

345 
Áûed
;

347 
¶Ÿ
->
°©e
 = 0;

348 
¶Ÿ
->
¶Ÿ_ödex
 = 
ödex
;

349 
¶Ÿ
->
ˇche_cou¡
 = 
¥e„tch
->
ˇche_≥r_¶Ÿ
;

350 
¶Ÿ
->
ho°_ªad_£˘‹s
 = 0;

351 
	`sh™n⁄_•ö_lock_öô
(&
¶Ÿ
->
li°_lock
);

352 
	`SHANNON_INIT_LIST_HEAD
(&
¶Ÿ
->
ªq_li°
);

353 
¶Ÿ
->
ˇche_löe
 = cache_line;

356 
Áûed
:

357 --
i
 >= 0) {

358 i‡(
¶Ÿ
->
ˇche
[
i
]) {

359 
	`sh™n⁄_k‰ì
(
¶Ÿ
->
ˇche
[
i
]);

360 
¶Ÿ
->
ˇche
[
i
] = 
NULL
;

363 
	`sh™n⁄_k‰ì
(
¶Ÿ
->
ˇche
);

364 
¶Ÿ
->
ˇche
 = 
NULL
;

365 
¶Ÿ
->
ˇche_cou¡
 = 0;

366 
¶Ÿ
->
¶Ÿ_ödex
 = -1;

368 
	}
}

370 
	$sh™n⁄_ˇche_¶Ÿ_de°roy
(
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
)

372 
i
;

374 
	`sh™n⁄_•ö_lock_bh
(&
¶Ÿ
->
li°_lock
);

375 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
¶Ÿ
->
ªq_li°
));

376 
	`sh™n⁄_•ö_u∆ock_bh
(&
¶Ÿ
->
li°_lock
);

377 
i
 = 0; i < 
¶Ÿ
->
ˇche_cou¡
; i++) {

378 i‡(
¶Ÿ
->
ˇche
[
i
]) {

379 
	`sh™n⁄_k‰ì
(
¶Ÿ
->
ˇche
[
i
]);

380 
¶Ÿ
->
ˇche
[
i
] = 
NULL
;

383 
	`sh™n⁄_k‰ì
(
¶Ÿ
->
ˇche
);

384 
¶Ÿ
->
ˇche
 = 
NULL
;

385 
¶Ÿ
->
ˇche_cou¡
 = 0;

386 
	}
}

388 
	$sh™n⁄_ˇche_löe_öô
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
u32
 
ödex
, u32 
logicb_size
)

390 
i
;

391 
sh™n⁄_ˇche_löe
 *
ˇche
 = &
¥e„tch
->
ˇche_löe
[
ödex
];

393 
ˇche
->
löe_°©e
 = 
CACHE_LINE_EMPTY
;

394 
ˇche
->
ˇche_löe_ödex
 = 
ödex
;

395 
ˇche
->
fú°_lba
 = 
INVALID_LBA
;

396 
ˇche
->
¶Ÿ_cou¡
 = 
¥e„tch
->
lba_≥r_löe
 /Öª„tch->
ˇche_≥r_¶Ÿ
;

397 
ˇche
->
¥e„tch
 =Örefetch;

398 
	`BUG_ON
(
ˇche
->
¶Ÿ
);

399 
ˇche
->
¶Ÿ
 = 
	`sh™n⁄_kzÆloc
(ˇche->
¶Ÿ_cou¡
 * (
sh™n⁄_ˇche_¶Ÿ
), 
GFP_SHANNON
);

400 i‡(
ˇche
->
¶Ÿ
 =
NULL
)

402 
i
 = 0; i < 
ˇche
->
¶Ÿ_cou¡
; i++) {

403 i‡(
	`sh™n⁄_ˇche_¶Ÿ_öô
(
ˇche
, 
logicb_size
, 
i
))

404 
Áûed
;

406 
	`sh™n⁄_rwlock_öô
(&
ˇche
->
ˇche_löe_lock
);

407 
	`sh™n⁄_©omic_£t
(&
ˇche
->
u£r_cou¡
, 0);

410 
Áûed
:

411 --
i
 >= 0)

412 
	`sh™n⁄_ˇche_¶Ÿ_de°roy
(&
ˇche
->
¶Ÿ
[
i
]);

413 
	`sh™n⁄_k‰ì
(
ˇche
->
¶Ÿ
);

414 
ˇche
->
¶Ÿ
 = 
NULL
;

415 
ˇche
->
¶Ÿ_cou¡
 = 0;

416 
ˇche
->
¥e„tch
 = 
NULL
;

418 
	}
}

420 
	$sh™n⁄_ˇche_löe_de°roy
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
ödex
)

422 
i
;

423 
sh™n⁄_ˇche_löe
 *
ˇche
;

424 i‡(
¥e„tch
->
ˇche_löe
 =
NULL
)

427 
ˇche
 = &
¥e„tch
->
ˇche_löe
[
ödex
];

428 i‡(
ˇche
->
löe_°©e
 !
CACHE_LINE_DESTROYED
) {

429 
	`sh™n⁄_wrôe_lock_bh
(&
ˇche
->
ˇche_löe_lock
);

430 i‡(
ˇche
->
löe_°©e
 !
CACHE_LINE_DESTROYED
) {

431 
ˇche
->
löe_°©e
 = 
CACHE_LINE_DESTROYED
;

432 
i
 = 0; i < 
ˇche
->
¶Ÿ_cou¡
; i++)

433 
	`sh™n⁄_ˇche_¶Ÿ_de°roy
(&
ˇche
->
¶Ÿ
[
i
]);

434 i‡(
ˇche
->
¶Ÿ
) {

435 
	`sh™n⁄_k‰ì
(
ˇche
->
¶Ÿ
);

436 
ˇche
->
¶Ÿ
 = 
NULL
;

438 
ˇche
->
fú°_lba
 = 
INVALID_LBA
;

440 
	`sh™n⁄_wrôe_u∆ock_bh
(&
ˇche
->
ˇche_löe_lock
);

442 
	}
}

444 
	$gë_lba_d©a_‰om_ˇche
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

446 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdisk
->prefetch;

447 
sh™n⁄_ˇche_löe
 *
ˇche_löe
 = 
	`gë_ˇche_löe_°ru˘
(
¥e„tch
, 
	`gë_ˇche_löe_‰om_lba
’ª„tch, 
ªq
->
lba
));

448 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
sdisk
, shannon_dev, sdisk);

449 
sh™n⁄_ˇche_¶Ÿ
 *
¶Ÿ
;

450 
¶Ÿ_ödex
;

451 
ˇche_löe_hô
 = 0;

452 
waô_d©a
 = 0;

453 
ödex
, 
fú°_size
;

455 
	`BUG_ON
(
ªq
->
lba
 =
INVALID_LBA
);

456 
	`sh™n⁄_ªad_lock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

457 
ˇche_löe_hô
 = ((
ˇche_löe
->
fú°_lba
 =
	`lba_rounddown_ˇche_löe
(
¥e„tch
, 
ªq
->
lba
)) ? 1 : 0);

458 i‡(
ˇche_löe_hô
) {

459 
	`BUG_ON
(
ªq
->
lba
 < 
ˇche_löe
->
fú°_lba
);

460 
	`BUG_ON
((
ªq
->
lba
 - 
ˇche_löe
->
fú°_lba
Ë>
¥e„tch
->
lba_≥r_löe
);

461 
¶Ÿ_ödex
 = (
ªq
->
lba
 - 
ˇche_löe
->
fú°_lba
Ë/ 
¥e„tch
->
ˇche_≥r_¶Ÿ
;

462 
¶Ÿ
 = &
ˇche_löe
->¶Ÿ[
¶Ÿ_ödex
];

464 
	`BUG_ON
(
¶Ÿ_ödex
 >
ˇche_löe
->
¶Ÿ_cou¡
);

465 i‡(
	`sh™n⁄_ã°_bô
(
SLOT_WAIT_DATA_BIT
, &
¶Ÿ
->
°©e
)) {

466 
	`sh™n⁄_•ö_lock_bh
(&
¶Ÿ
->
li°_lock
);

467 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
¶Ÿ
->
ªq_li°
);

468 
ªq
->
°©e
 = 
REQ_WAIT_CACHE
;

469 
	`sh™n⁄_•ö_u∆ock_bh
(&
¶Ÿ
->
li°_lock
);

470 
waô_d©a
 = 1;

471 
¥e„tch
->
waô_ˇche_ªad_hôs
++;

473 
ödex
 = (
ªq
->
lba
 - 
ˇche_löe
->
fú°_lba
Ë% 
¶Ÿ
->
ˇche_cou¡
;

474 
fú°_size
 = 
sdev
->
logicb_size
 - (()
ªq
->
vút_addr
 & (sdev->logicb_size - 1));

475 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr
, 
¶Ÿ
->
ˇche
[
ödex
], 
fú°_size
);

476 i‡(
fú°_size
 < 
sdev
->
logicb_size
)

477 
	`sh™n⁄_mem˝y
(
ªq
->
vút_addr_2
, 
¶Ÿ
->
ˇche
[
ödex
] + 
fú°_size
, 
sdev
->
logicb_size
 - first_size);

478 
¥e„tch
->
ˇche_hôs
++;

479 i‡(
ªq
->
£ndî
 =
FROM_HOST
)

480 
¶Ÿ
->
ho°_ªad_£˘‹s
 +
sdev
->
£˘‹s_ö_logicb
;

481 
	`sh™n⁄_©omic_dec
(&
ˇche_löe
->
u£r_cou¡
);

484 
¥e„tch
->
ˇche_miss
++;

485 
	`sh™n⁄_©omic_dec
(&
ˇche_löe
->
u£r_cou¡
);

487 
	`sh™n⁄_ªad_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

488 if(
ˇche_löe_hô
 && (
waô_d©a
 == 0)) {

489 
ªq
->
°©e
 = 
REQ_DONE
;

490 
	`sbio_ªÀa£
(
sdev
, 
ªq
->
sbio
);

493  
ˇche_löe_hô
;

494 
	}
}

496 
	#PREFETCH_BIO_SIZE_THRESHOLD
 (32768)

497 
	#LARGE_BLOCK_IO_THRESHOLD
 (4)

	)

499 
	$¥e„tch_check
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
)

501 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

502 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdisk
->prefetch;

503 
logicb64_t
 
fú°_lba
, 
œ°_lba
, 
œ°_hô_lba
, 
£˘‹_cou¡
;

505 i‡(!
	`gë_¥e„tch_íabÀ_°©e
(
¥e„tch
))

508 
fú°_lba
 = (
sbio
->
°¨t_£˘‹
 >> (
sdev
->
logicb_shi·
 - 9));

509 
£˘‹_cou¡
 = (
sbio
->
bio_size
 >> 9) + ((sbio->bio_size % 512) ? 1 : 0);

510 
œ°_lba
 = (
sbio
->
°¨t_£˘‹
 + 
£˘‹_cou¡
 - 1Ë>> (
sdev
->
logicb_shi·
 - 9);

511 
œ°_hô_lba
 = 
	`sh™n⁄_©omic64_ªad
(&
¥e„tch
->last_hit_lba);

512 i‡((
fú°_lba
 =
œ°_hô_lba
) || (first_lba == (last_hit_lba + 1))) {

513 
u64
 
£qªad_cou¡
 = 
	`sh™n⁄_©omic64_öc_ªtu∫
(&
¥e„tch
->seqread_count);

515 i‡((
sbio
->
bio_size
 >
¥e„tch
->
so·_bio_size_thªshﬁd
Ë&& (
	`sh™n⁄_disk_ö_Êight
(
sdev
->
sdisk
.
gd
Ë>¥e„tch->
œrge_block_io_thªshﬁd
))

516 
out
;

517 i‡((
sbio
->
bio_size
 >
¥e„tch
->
h¨d_bio_size_thªshﬁd
))

518 
out
;

520 i‡(
£qªad_cou¡
 >
¥e„tch
->
£qªad_thªshﬁd
) {

521 i‡(!
	`gë_¥e„tch_w‹kög_°©e
(
¥e„tch
)) {

522 i‡(
	`likñy
(
sdev
->
¥e„tch_thªad
)) {

523 
	`£t_¥e„tch_w‹kög
(
¥e„tch
);

524 
	`sh™n⁄_wake_up_¥o˚ss
(
sdev
->
¥e„tch_thªad
);

529 
	`sh™n⁄_©omic64_£t
(&
¥e„tch
->
£qªad_cou¡
, 0);

531 
out
:

532 
	`sh™n⁄_©omic64_£t
(&
¥e„tch
->
œ°_hô_lba
, 
œ°_lba
);

533 
	}
}

535 
	$ö¸ó£_ˇche_miss
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

537 
sdisk
->
¥e„tch
.
ˇche_miss
++;

538 
	}
}

540 
	$dr›_ˇche_löe
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
ˇche_löe
)

542 
sh™n⁄_disk
 *
sdisk
 = 
	`c⁄èöî_of
(
¥e„tch
, shannon_disk,Örefetch);

543 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
sdisk
, shannon_dev, sdisk);

544 
sh™n⁄_ˇche_löe
 *
ˇche
 = 
NULL
;

545 
logicb64_t
 
ﬁd_fú°_lba
;

546 
lun_pba
Üun_pba;

547 
i
, 
ªt
;

549 i‡(
¥e„tch
->
ˇche_löe
)

550 
ˇche
 = &
¥e„tch
->
ˇche_löe
[cache_line];

552 i‡(
ˇche
) {

553 
	`sh™n⁄_wrôe_lock_bh
(&
ˇche
->
ˇche_löe_lock
);

554 
ﬁd_fú°_lba
 = 
ˇche
->
fú°_lba
;

555 i‡(
ﬁd_fú°_lba
 !
INVALID_LBA
) {

556 
i
 = 0; i < 
¥e„tch
->
lba_≥r_löe
; i++) {

557 i‡(
ﬁd_fú°_lba
 + 
i
 < (
sdisk
->
£˘‹s
 << (
sdev
->
logicb_shi·
 - 9))) {

558 
	`Õmt_lock
(
sdev
, 
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

559 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
ﬁd_fú°_lba
 + 
i
, &
lun_pba
, 
NULL
, 
sdisk
);

560 i‡(
ªt
 == 0)

561 
	`˛ór_lba_d©a_ö_ˇche
(
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

562 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
ﬁd_fú°_lba
 + 
i
);

567 
ˇche
->
fú°_lba
 = 
INVALID_LBA
;

568 
	`sh™n⁄_wrôe_u∆ock_bh
(&
ˇche
->
ˇche_löe_lock
);

570 
	}
}

572 
	$dr›_Æl_ˇche_löe
(
sh™n⁄_dev
 *
sdev
)

574 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdev
->
sdisk
.prefetch;

575 
i
;

577 
i
 = 0; i < 
¥e„tch
->
ˇche_löes
; i++)

578 
	`dr›_ˇche_löe
(
¥e„tch
, 
i
);

579 
	}
}

581 
	$h™dÀ_¥e„tch_ªq_li°
(
sh™n⁄_¥e„tch
 *
¥e„tch
)

583 
sh™n⁄_disk
 *
sdisk
 = 
	`c⁄èöî_of
(
¥e„tch
, shannon_disk,Örefetch);

584 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
sdisk
, shannon_dev, sdisk);

585 
sh™n⁄_ªque°
 *
¥eq
 = 
NULL
;

586 
ªt
;

589 
	`sh™n⁄_•ö_lock_bh
(&
¥e„tch
->
li°_lock
);

590 i‡(!
	`sh™n⁄_li°_em±y
(&
¥e„tch
->
ªq_li°
)) {

591 
¥eq
 = 
	`sh™n⁄_li°_fú°_íåy
(&
¥e„tch
->
ªq_li°
, 
sh™n⁄_ªque°
, 
li°
);

592 
	`BUG_ON
(
¥eq
 =
NULL
);

593 
	`sh™n⁄_li°_dñ_öô
(&
¥eq
->
li°
);

595 
	`sh™n⁄_•ö_u∆ock_bh
(&
¥e„tch
->
li°_lock
);

598 
	`sh™n⁄_•ö_u∆ock_bh
(&
¥e„tch
->
li°_lock
);

600 
¥eq
->
°©e
 = 
REQ_PICKED_FROM_PREFETCH
;

601 i‡(
	`u∆ikñy
(!
	`gë_lba_d©a_‰om_ˇche
(
sdisk
, 
¥eq
))) {

602 
sh™n⁄_poﬁ
 *
•oﬁ
;

603 
sh™n⁄_«me•a˚
 *
ns
 = 
NULL
;

604 
sh™n⁄_sb
 *
sb
;

605 
lun
;

607 i‡(!
	`l⁄g_lba_is_övÆid
(
¥eq
->
lba
)) {

608 
•oﬁ
 = 
	`•oﬁ_gë_ª„ªn˚
(
sdev
->spool);

609 i‡(
•oﬁ
) {

610 
ns
 = 
	`ns_gë_ª„ªn˚
(
•oﬁ
->ns[
¥eq
->
ns_id
]);

611 i‡((
ns
 =
NULL
Ë|| (
¥eq
->
ns_id
 >
SHANNON_NS_NUM
)) {

612 
	`sh™n⁄_îr
("Wr⁄gÇs_id=%d.\n", 
¥eq
->
ns_id
);

613 
	`BUG
();

615 i‡(
¥eq
->
ns_£q_num
 !
ns
->
£q_num
) {

616 
	`sh™n⁄_îr
("WrongÇs_seq_num:Çs_seq_num=0x%lx,Çs_id=%d,Çs->seq_num=0x%lx.\n",

617 
¥eq
->
ns_£q_num
,Öªq->
ns_id
, 
ns
->
£q_num
);

618 
	`BUG
();

620 
sdisk
 = &
ns
->sdisk;

623 
	`Õmt_lock
(
sdev
, 
sdisk
, 
¥eq
->
lba
);

624 
ªt
 = 
	`gë_lun_pba_‰om_lba
(
¥eq
->
lba
, &¥eq->
pba
, 
NULL
, 
sdisk
);

625 
	`Õmt_u∆ock
(
sdev
, 
sdisk
, 
¥eq
->
lba
);

626 
	`put_•oﬁ_™d_ns
(
•oﬁ
, 
ns
);

627 i‡(
ªt
 < 0) {

628 
	`sh™n⁄_log
("%s:Üb®%x may bêdisˇrded. Ju° ign‹êô.\n", 
sdev
->
sdisk
.
disk_«me
, 
¥eq
->
lba
);

629 
¥eq
->
°©e
 = 
REQ_DONE
;

630 
	`sbio_ªÀa£
(
sdev
, 
¥eq
->
sbio
);

633 
sb
 = 
sdev
->
sbs
 + 
¥eq
->
pba
.
lun_pba
/sdev->
logicbs_ö_siblög_eblock
;

634 
¥eq
->
£q_num
 = 
sb
->seq_num;

637 
¥eq
->
_ecc
 = 0;

638 
¥eq
->
_mëad©a
 = 0;

639 
lun
 = 
¥eq
->
pba
.lun;

640 
	`add_lun_ªque°_queue_èû
(
sdev
->
lun
[lun], 
¥eq
);

641 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun
[lun]->
lun£t
->
submô_w‹k
);

644 
	}
}

646 
	$add_ªq_to_¥e„tch_li°
(
sh™n⁄_disk
 *
sdisk
, 
sh™n⁄_ªque°
 *
ªq
)

648 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdisk
->prefetch;

649 
sh™n⁄_ˇche_löe
 *
ˇche_löe
 = 
	`gë_ˇche_löe_°ru˘
(
¥e„tch
, 
	`gë_ˇche_löe_‰om_lba
’ª„tch, 
ªq
->
lba
));

651 
	`sh™n⁄_ªad_lock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

652 i‡((
ˇche_löe
->
fú°_lba
 =
	`lba_rounddown_ˇche_löe
(
¥e„tch
, 
ªq
->
lba
)))

653 
	`sh™n⁄_©omic_öc
(&
ˇche_löe
->
u£r_cou¡
);

655 
	`sh™n⁄_ªad_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

658 
	`sh™n⁄_ªad_u∆ock_bh
(&
ˇche_löe
->
ˇche_löe_lock
);

659 
	`sh™n⁄_•ö_lock_bh
(&
¥e„tch
->
li°_lock
);

660 i‡(
	`u∆ikñy
(!
	`gë_¥e„tch_íabÀ_°©e
(
¥e„tch
))) {

661 
	`sh™n⁄_•ö_u∆ock_bh
(&
¥e„tch
->
li°_lock
);

662 
	`sh™n⁄_©omic_dec
(&
ˇche_löe
->
u£r_cou¡
);

665 
ªq
->
°©e
 = 
REQ_IN_PREFETCH_REQ_LIST
;

666 
	`sh™n⁄_li°_add_èû
(&
ªq
->
li°
, &
¥e„tch
->
ªq_li°
);

667 
	`sh™n⁄_•ö_u∆ock_bh
(&
¥e„tch
->
li°_lock
);

670 
	}
}

672 
	$¥e„tch_thªad_‚
(*
d©a
)

674 
sh™n⁄_dev
 *
sdev
 = 
d©a
;

675 
sh™n⁄_disk
 *
sdisk
 = &
sdev
->sdisk;

676 
sh™n⁄_¥e„tch
 *
¥e„tch
 = &
sdisk
->prefetch;

677 
sh™n⁄_ˇche_löe
 *
ˇche_löe
;

678 
ªt
 = 0;

681 i‡(
	`sh™n⁄_kthªad_should_°›
())

684 
	`h™dÀ_¥e„tch_ªq_li°
(
¥e„tch
);

686 i‡(!
	`gë_¥e„tch_w‹kög_°©e
(
¥e„tch
Ë&& 
	`sh™n⁄_li°_em±y
(&¥e„tch->
ªq_li°
Ë&& !
	`sh™n⁄_kthªad_should_°›
()) {

687 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

688 i‡(!
	`gë_¥e„tch_w‹kög_°©e
(
¥e„tch
Ë&& 
	`sh™n⁄_li°_em±y
(&¥e„tch->
ªq_li°
Ë&& !
	`sh™n⁄_kthªad_should_°›
()) {

689 
	`sh™n⁄_scheduÀ
();

690 
¥e„tch
->
pﬁl_times
 = 0;

692 
	`__sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

696 i‡(
	`sh™n⁄_©omic64_ªad
(&
¥e„tch
->
£qªad_cou¡
Ë<Öª„tch->
£qªad_thªshﬁd
) {

697 
	`£t_¥e„tch_¶ìpög
(
¥e„tch
);

701 
ˇche_löe
 = 
	`gë_√xt_¥e„tch_ˇche_löe
(
¥e„tch
);

702 i‡(
ˇche_löe
 !
NULL
) {

703 i‡(
	`¥e„tch_ˇche_löe
(
¥e„tch
, 
ˇche_löe
)) {

704 
ªt
 = -1;

706 
¥e„tch
->
pﬁl_times
 = 0;

708 
ªt
 = -1;

711 i‡(
ªt
) {

712 
¥e„tch
->
pﬁl_times
++;

713 i‡(
¥e„tch
->
pﬁl_times
 >¥e„tch->
pﬁl_times_thªshﬁd
) {

714 
	`£t_¥e„tch_¶ìpög
(
¥e„tch
);

717 
	`sh™n⁄_udñay
(10);

720 
	`sh™n⁄_c⁄d_ªsched
();

722 
	`£t_¥e„tch_dißbÀ
(
¥e„tch
);

723 
	`sh™n⁄_b¨rõr
();

725 
	`h™dÀ_¥e„tch_ªq_li°
(
¥e„tch
);

728 
	}
}

730 
	$sh™n⁄_¥e„tch_öô
(
sh™n⁄_¥e„tch
 *
¥e„tch
, 
u32
 
logicb_size
)

732 
i
 = 0;

734 i‡(
	`gë_¥e„tch_íabÀ_°©e
(
¥e„tch
))

736 i‡(
logicb_size
 != 4096) {

737 
	`sh™n⁄_log
("logicb size isÇotÉqual 4096,Örefetch disable.\n");

740 i‡((
PREFETCH_LBA_PER_CACHE_LINE
 % 
PREFETCH_CACHE_PER_SLOT
) != 0) {

741 
	`sh™n⁄_log
("lba_pre_cache_line isÇotáligned cache_per_slot,Örefetch disable.\n");

744 
¥e„tch
->
ˇche_löes
 = 
PREFETCH_CACHE_LINE_COUNT
;

745 
¥e„tch
->
lba_≥r_löe
 = 
PREFETCH_LBA_PER_CACHE_LINE
;

746 
¥e„tch
->
ˇche_≥r_¶Ÿ
 = 
PREFETCH_CACHE_PER_SLOT
;

747 
¥e„tch
->
¶Ÿ_≥r_löe
 = 
PREFETCH_LBA_PER_CACHE_LINE
 / 
PREFETCH_CACHE_PER_SLOT
;

748 
¥e„tch
->
löe_size
 = 
logicb_size
 *Öª„tch->
lba_≥r_löe
;

749 
¥e„tch
->
tŸÆ_ˇches
 =Öª„tch->
lba_≥r_löe
 *Öª„tch->
ˇche_löes
;

750 
¥e„tch
->
tŸÆ_size
 =Öª„tch->
löe_size
 *Öª„tch->
ˇche_löes
;

752 
	`BUG_ON
(
¥e„tch
->
ˇche_löe
);

753 
¥e„tch
->
ˇche_löe
 = 
	`sh™n⁄_kzÆloc
((
sh™n⁄_ˇche_löe
Ë*Öª„tch->
ˇche_löes
, 
GFP_SHANNON
);

754 i‡(
¥e„tch
->
ˇche_löe
 =
NULL
)

755 
Áûed
;

756 
i
 = 0; i < 
¥e„tch
->
ˇche_löes
; i++) {

757 i‡(
	`sh™n⁄_ˇche_löe_öô
(
¥e„tch
, 
i
, 
logicb_size
))

758 
Áûed
;

760 
¥e„tch
->
ˇche_hôs
 = 0;

761 
¥e„tch
->
waô_ˇche_ªad_hôs
 = 0;

762 
¥e„tch
->
ˇche_miss
 = 0;

763 
¥e„tch
->
¥e„tch_cou¡
 = 0;

764 
¥e„tch
->
di°™˚_Á˘‹
 = 
DEFAULT_PREFETCH_DISTANCE_FACTOR
;

765 
¥e„tch
->
£qªad_thªshﬁd
 = 
DEFAULT_SEQREAD_THRESHOLD
;

766 
	`sh™n⁄_©omic64_£t
(&
¥e„tch
->
£qªad_cou¡
, 0);

767 
	`sh™n⁄_©omic_£t
(&
¥e„tch
->
œ°_hô_lba
, 
INVALID_LBA
);

768 
	`sh™n⁄_•ö_lock_öô
(&
¥e„tch
->
li°_lock
);

769 
	`SHANNON_INIT_LIST_HEAD
(&
¥e„tch
->
ªq_li°
);

770 
¥e„tch
->
pﬁl_times_thªshﬁd
 = 
DEFAULT_PREFETCH_POLL_TIMES
;

771 
¥e„tch
->
pﬁl_times
 = 0;

772 
¥e„tch
->
so·_bio_size_thªshﬁd
 = 
PREFETCH_SOFT_BIO_SIZE_THRESHOLD
;

773 
¥e„tch
->
h¨d_bio_size_thªshﬁd
 = 
PREFETCH_HARD_BIO_SIZE_THRESHOLD
;

774 
¥e„tch
->
œrge_block_io_thªshﬁd
 = 
PREFETCH_LARGE_BLOCK_IO_THRESHOLD
;

775 
¥e„tch
->
åaffic_Á˘‹
 = 
DEFAULT_PREFETCH_TRAFFIC_FACTOR
;

776 
	`£t_¥e„tch_íabÀ
(
¥e„tch
);

780 
Áûed
:

781 
	`sh™n⁄_öfo
("prefetch init failed.\n");

782 
	`£t_¥e„tch_dißbÀ
(
¥e„tch
);

784 i‡(
¥e„tch
->
ˇche_löe
) {

785 --
i
 >= 0)

786 
	`sh™n⁄_ˇche_löe_de°roy
(
¥e„tch
, 
i
);

787 
	`sh™n⁄_k‰ì
(
¥e„tch
->
ˇche_löe
);

788 
¥e„tch
->
ˇche_löe
 = 
NULL
;

792 
	}
}

794 
	$sh™n⁄_¥e„tch_de°roy
(
sh™n⁄_¥e„tch
 *
¥e„tch
)

796 
i
;

798 
	`£t_¥e„tch_dißbÀ
(
¥e„tch
);

799 
	`sh™n⁄_b¨rõr
();

800 i‡(
¥e„tch
->
ˇche_löe
) {

801 
i
 = 0; i < 
¥e„tch
->
ˇche_löes
; i++) {

802 
	`dr›_ˇche_löe
(
¥e„tch
, 
i
);

803 
	`sh™n⁄_ˇche_löe_de°roy
(
¥e„tch
, 
i
);

805 
	`sh™n⁄_k‰ì
(
¥e„tch
->
ˇche_löe
);

807 
	`sh™n⁄_mem£t
(
¥e„tch
, 0, (*prefetch));

808 
¥e„tch
->
ˇche_löe
 = 
NULL
;

809 
	`sh™n⁄_©omic64_£t
(&
¥e„tch
->
œ°_hô_lba
, 
INVALID_LBA
);

810 
	}
}

	@shannon_prefetch.h

12 #i‚de‡
__SHANNON_PREFETCH_H


13 
	#__SHANNON_PREFETCH_H


	)

15 
	#gë_ˇche_löe_‰om_lba
(
¥e„tch
, 
lba
Ë((÷baË/ (¥e„tch)->
lba_≥r_löe
Ë% (¥e„tch)->
ˇche_löes
)

	)

16 
	#lba_rounddown_ˇche_löe
(
¥e„tch
, 
lba
Ë((÷baË/ (¥e„tch)->
lba_≥r_löe
Ë* (¥e„tch)->lba_≥r_löe)

	)

17 
	#lba_roundup_ˇche_löe
(
¥e„tch
, 
lba
Ë(((÷baË/ (¥e„tch)->
lba_≥r_löe
Ë* (’ª„tch)->lba_≥r_löê+ 1)Ë- 1)

	)

18 
	#gë_ˇche_löe_°ru˘
(
¥e„tch
, 
l
Ë(&’ª„tch)->
ˇche_löe
[÷)])

	)

19 
	#gë_ˇche_¶Ÿ_ödex_addr
(
¶Ÿ
, 
ödex
Ë((¶Ÿ)->
ˇche
[(ödex)])

	)

21 
	ssh™n⁄_ˇche_¶Ÿ
 {

22 
	m¶Ÿ_ödex
;

23 
u32
 
	mˇche_cou¡
;

24 
	#SLOT_WAIT_DATA_BIT
 (1)

	)

25 
	#SLOT_HANDLE_REQ_LIST_BIT
 (2)

	)

26 
	m°©e
;

27 
u64
 
	mho°_ªad_£˘‹s
;

28 
sh™n⁄_•ölock_t
 
	mli°_lock
;

29 
sh™n⁄_li°_hód
 
	mªq_li°
;

30 
sh™n⁄_ˇche_löe
 *
	mˇche_löe
;

32 **
	mˇche
;

33 }
__©åibuã__
((
Æig√d
));

35 
	ssh™n⁄_ˇche_löe
 {

36 
u32
 
	mˇche_löe_ödex
;

38 
	#CACHE_LINE_DESTROYED
 (0)

	)

39 
	#CACHE_LINE_EMPTY
 (1)

	)

40 
	#CACHE_LINE_READY
 (2)

	)

41 
	mlöe_°©e
;

42 
	m¶Ÿ_cou¡
;

43 
sh™n⁄_¥e„tch
 *
	m¥e„tch
;

44 
logicb64_t
 
	mfú°_lba
;

45 
logicb64_t
 
	m°¨t_¥e„tch_lba
;

46 
sh™n⁄_©omic_t
 
	mu£r_cou¡
;

47 
sh™n⁄_rwlock_t
 
	mˇche_löe_lock
;

48 
sh™n⁄_ˇche_¶Ÿ
 *
	m¶Ÿ
;

49 }
__©åibuã__
((
Æig√d
));

51 
	#PREFETCH_LBA_PER_CACHE_LINE
 (32)

	)

52 
	#PREFETCH_CACHE_LINE_COUNT
 (64)

	)

53 
	#PREFETCH_CACHE_PER_SLOT
 (8)

	)

54 
	ssh™n⁄_¥e„tch
 {

55 
	#gë_¥e„tch_íabÀ_°©e
(
_¥e„tch
Ë(
	`sh™n⁄_ã°_bô
(
PREFETCH_ENABLE_BIT
, &(_¥e„tch)->
°©e
))

	)

56 
	#£t_¥e„tch_íabÀ
(
_¥e„tch
Ë(
	`sh™n⁄_£t_bô
(
PREFETCH_ENABLE_BIT
, &(_¥e„tch)->
°©e
))

	)

57 
	#£t_¥e„tch_dißbÀ
(
_¥e„tch
Ë(
	`sh™n⁄_˛ór_bô
(
PREFETCH_ENABLE_BIT
, &(_¥e„tch)->
°©e
))

	)

58 
	#gë_¥e„tch_w‹kög_°©e
(
_¥e„tch
Ë(
	`sh™n⁄_ã°_bô
(
PREFETCH_WORKING_BIT
, &(_¥e„tch)->
°©e
))

	)

59 
	#£t_¥e„tch_w‹kög
(
_¥e„tch
Ë(
	`sh™n⁄_£t_bô
(
PREFETCH_WORKING_BIT
, &(_¥e„tch)->
°©e
))

	)

60 
	#£t_¥e„tch_¶ìpög
(
_¥e„tch
Ë(
	`sh™n⁄_˛ór_bô
(
PREFETCH_WORKING_BIT
, &(_¥e„tch)->
°©e
))

	)

61 
	#PREFETCH_ENABLE_BIT
 (0)

	)

62 
	#PREFETCH_WORKING_BIT
 (1)

	)

63 
	m°©e
;

65 
u64
 
	mˇche_hôs
;

66 
u64
 
	mwaô_ˇche_ªad_hôs
;

67 
u64
 
	mˇche_miss
;

68 
u64
 
	m¥e„tch_cou¡
;

69 
	#DEFAULT_SEQREAD_THRESHOLD
 (128)

70 
u32
 
£qªad_thªshﬁd
;

	)

71 
	#DEFAULT_PREFETCH_TRAFFIC_FACTOR
 (2)

	)

72 
u32
 
	måaffic_Á˘‹
;

73 
	#DEFAULT_PREFETCH_DISTANCE_FACTOR
 (4)

	)

74 
	mdi°™˚_Á˘‹
;

75 
sh™n⁄_©omic64_t
 
	m£qªad_cou¡
;

76 
u64
 
	mœ°_£qªad_cou¡
;

77 
sh™n⁄_©omic64_t
 
	mœ°_hô_lba
;

78 
logicb64_t
 
	mcuºít_¥e„tch_lba
;

79 
	#DEFAULT_PREFETCH_POLL_TIMES
 (4)

	)

80 
	mpﬁl_times_thªshﬁd
;

81 
	mpﬁl_times
;

82 
	#PREFETCH_SOFT_BIO_SIZE_THRESHOLD
 (32 * 1024)

83 
	#PREFETCH_HARD_BIO_SIZE_THRESHOLD
 (
PREFETCH_LBA_PER_CACHE_LINE
 * 4096 * 2)

84 
so·_bio_size_thªshﬁd
;

	)

85 
	mh¨d_bio_size_thªshﬁd
;

86 
	#PREFETCH_LARGE_BLOCK_IO_THRESHOLD
 (4)

	)

87 
	mœrge_block_io_thªshﬁd
;

88 
sh™n⁄_•ölock_t
 
	mli°_lock
;

89 
sh™n⁄_li°_hód
 
	mªq_li°
;

91 
sh™n⁄_ˇche_löe
 *
	mˇche_löe
;

92 
sh™n⁄_èsk_°ru˘_t
 *
	m¥e„tch_thªad
;

94 
u32
 
	mtŸÆ_size
;

95 
u32
 
	mtŸÆ_ˇches
;

96 
u32
 
	mˇche_löes
;

97 
u32
 
	m¶Ÿ_≥r_löe
;

98 
u32
 
	mlba_≥r_löe
;

99 
u32
 
	mˇche_≥r_¶Ÿ
;

100 
u32
 
	mlöe_size
;

	@shannon_reconfig.c

1 
	$∑rôy_öô_f‹_ªc⁄fig
(
sh™n⁄_sb
 *
sb
, 
group_ödex
, 
µa
, 
u8
 
hód
)

3 
sh™n⁄_dev
 *
sdev
 = 
sb
->sdev;

4 
sh™n⁄_ªque°
 *
ªq
;

5 
sh™n⁄_lun
 *
lun
;

6 
hód_ödex
 = 
hód
 & 
HEAD_INDEX_MASK
;

8 
sb
->
sdev
->
∑rôy_öô_d⁄e
[
hód_ödex
] = 0;

10 
ªq
 = 
	`Æloc_ªq
(
GFP_NOWAIT
);

11 
	`£t_ªq_debug_èg
(
ªq
, 
PARITY_INIT_TAG
, 0);

12 
ªq
->
›code
 = 
sh_cmd_∑rôy_öô
;

13 
ªq
->
d©a_luns
 = 
sb
->
mö_d©a_luns
;

14 
ªq
->
pba
.
lun
 = 
	`gë_∑rôy_lun
(&
sb
->
sub_group
[
group_ödex
]);

15 
ªq
->
hód
 = head;

16 
ªq
->
µa
 =Öpa;

17 
	`sh™n⁄_öfo
("sb=%d,Üun=%d, group_ödex=%d,Ö∑=%d, hód=0x%x.\n", 
sb
->
sb_ödex
, 
ªq
->
pba
.
lun
, 
group_ödex
, 
µa
, 
hód
);

18 
lun
 = 
sdev
->lun[
ªq
->
pba
.lun];

19 
	`sh™n⁄_∑rôy_öô_cmd
(
lun
->
lun£t
, 
ªq
);

22 
	}
}

24 
	#MAX_WAIT_MSECS
 1500

	)

25 
	$sh™n⁄_ªc⁄fig
(
sh™n⁄_dev
 *
sdev
)

27 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
;

28 
u32
 
£u
, 
îr‹_cou¡
;

29 
i
, 
j
, 
°©us
, 
ﬁd_°©e
, 
waô
;

31 i‡(
sdev
->
ªc⁄fig_suµ‹t
 == 0) {

32 
	`sh™n⁄_w¨n
("Disk %†d€†nŸ suµ‹àªc⁄fig.\n", 
sdev
->
sdisk
.
disk_«me
);

35 
£u
 = 
	`ªad_ªg_ß„
(
sdev
, (
u32
 *)sdev->
b¨
 + 
SH_SEU_OFFSET
);

36 
	`sh™n⁄_öfo
("%s: seu=0x%x.\n", 
sdev
->
cdev_«me
, 
£u
);

37 i‡(
£u
 == ~0) {

38 
	`check_∂ugout
(
sdev
);

39 i‡(
sdev
->
∂ug_out
 == 0)

40 
sdev
->
°©e
 |
SHN_STATE_ERROR_BIT
;

41 
	`sh™n⁄_öfo
("sdev->∂ug_out=%d, sèã=0x%x.\n", 
sdev
->
∂ug_out
, sdev->
°©e
);

44 i‡(
sdev
->
ªc⁄fig_times
 > 
MAX_RECONFIG_TIMES
) {

45 
	`sh™n⁄_öfo
("%s:Åhi†devi˚ ha†bì¿öÑód⁄ly mode.\n", 
sdev
->
cdev_«me
);

48 
	`°›_w©chdog_timî
(
sdev
);

49 
sdev
->
big_lock
 = 1;

50 
sdev
->
sdisk
.
ö_ªc⁄fig
 = 1;

52 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

53 i‡(
has_dma_dñay
)

54 
	`__sh™n⁄_pick_ªque°
(
sdev
, 0xffffffff);

55 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

56 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

59 
sdev
->
tŸÆ_ªc⁄fig_times
++;

61 i‡((
	`gë_jiffõs
(Ë- 
sdev
->
fú°_jiffõ
Ë> 
	`gë_HZ
() * 60) {

62 
sdev
->
fú°_jiffõ
 = 
	`gë_jiffõs
();

63 
sdev
->
ªc⁄fig_times
 = 1;

65 
sdev
->
ªc⁄fig_times
++;

66 i‡(
sdev
->
ªc⁄fig_times
 > 
MAX_RECONFIG_TIMES
) {

67 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

68 
	`sh™n⁄_£t_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_SEU_INTERRUPT_OFFSET
, 
MASK_SEU_INTERRUPT
, 1);

69 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

70 
	`sh™n⁄_îr
("%s: seuÑegi°î=0x%x, sëÅÿªad⁄ly.\n", 
sdev
->
cdev_«me
, 
£u
);

71 
	`sh™n⁄_£t_bô
(
SHN_REASON_SEU_ERROR
, &
sdev
->
ªad⁄ly_ªas⁄
);

72 
	`upd©e_ac˚ss_mode
(
sdev
);

73 
out
;

76 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

77 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

78 
	`sh™n⁄_m¶ìp
(1);

79 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

81 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

82 
	`sh™n⁄_öfo
("%s: fû»∑gê°rùe.....\n", 
sdev
->
cdev_«me
);

83 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

84 (
sdev
->
lun_ö_group
[
i
] != 0) || \

85 (
sdev
->
wr_group
[
i
] != 0) || \

86 (
sdev
->
wr_∂™e
[
i
] != 0) || \

87 (
sdev
->
wr_logicb
[
i
] != 0))

88 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

93 #ifde‡
SHANNON_USE_WRITE_BUFFER


94 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[0]);

95 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[1]);

97 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

98 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

100 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

101 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

102 
	`sh™n⁄_m¶ìp
(1);

105 i‡(
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(sdev)) {

106 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

107 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
))

109 
	`¢≠_ªad_dißbÀ
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i], 1, 1);

110 
	`sh™n⁄_pﬁlög_cmd
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i]->
phy_lun_num
, 0, 0, 0);

113 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

114 
	`sh™n⁄_m¶ìp
(1);

115 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

118 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

119 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

120 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

121 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

122 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

124 
ﬁd_°©e
 = 
sdev
->
°©e
;

125 
sdev
->
°©e
 = 
SHN_STATE_RECONFIG
;

127 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

128 
	`sh™n⁄_muãx_lock
(&
sdev
->
n‹Êash_›s_£m
);

129 
	`sh™n⁄_m¶ìp
(10);

130 
	`sh™n⁄_öfo
("%s: sèπÑec⁄fig...\n", 
sdev
->
cdev_«me
);

131 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

132 
	`sh™n⁄_£t_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_CONTROL_OFFSET
, 
RECONFIG_START
, 1);

133 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

134 
waô
 = 0;

136 i‡(
waô
 > 
MAX_WAIT_MSECS
) {

137 
sdev
->
°©e
 = 
ﬁd_°©e
 | 
SHN_STATE_ERROR_BIT
;

138 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
w©chdog_w‹k
);

139 
	`sh™n⁄_îr
("ªc⁄figÅimeout! së sèã=0x%x.\n", 
sdev
->
°©e
);

140 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

141 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

142 
out
;

144 
	`sh™n⁄_m¶ìp
(1);

145 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

146 
°©us
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_STATUS_OFFSET
, 
RECONFIG_STATUS
);

147 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

148 
waô
++;

149 } 
°©us
);

150 
	`sh™n⁄_öfo
("%s: sètu†1 =%d.\n", 
sdev
->
cdev_«me
, 
°©us
);

151 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

152 
	`sh™n⁄_£t_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_CONTROL_OFFSET
, 
RECONFIG_START
, 0);

153 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

154 
	`sh™n⁄_m¶ìp
(100);

155 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

156 
îr‹_cou¡
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_STATUS_OFFSET
, 
ERROR_COUNT
);

157 
£u
 = 
	`sh™n⁄_i‹ód32
((
u32
 *)
sdev
->
b¨
 + 
SH_SEU_OFFSET
);

158 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

159 
	`sh™n⁄_öfo
("%s: check seu=0x%x.\n", 
sdev
->
cdev_«me
, 
£u
);

160 i‡((
îr‹_cou¡
 =0Ë&& (
£u
 >> 
SH_SEU_CRC_ERROR_SHIFT
)) {

161 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

162 
	`sh™n⁄_£t_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_CONTROL_OFFSET
, 
RECONFIG_START
, 1);

163 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

164 
waô
 = 0;

166 i‡(
waô
 > 
MAX_WAIT_MSECS
) {

167 
sdev
->
°©e
 = 
ﬁd_°©e
 | 
SHN_STATE_ERROR_BIT
;

168 
	`sh™n⁄_queue_w‹k
(
sdev
->
misc_wq
, &sdev->
w©chdog_w‹k
);

169 
	`sh™n⁄_îr
("ªc⁄figÅimeout! së sèã=0x%x.\n", 
sdev
->
°©e
);

170 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

171 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

172 
out
;

174 
	`sh™n⁄_m¶ìp
(1);

175 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

176 
°©us
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_STATUS_OFFSET
, 
RECONFIG_STATUS
);

177 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

178 
waô
++;

179 } 
°©us
);

180 
	`sh™n⁄_öfo
("%s: sètu†2=%d.\n", 
sdev
->
cdev_«me
, 
°©us
);

181 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

182 
	`sh™n⁄_£t_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_CONTROL_OFFSET
, 
RECONFIG_START
, 0);

183 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

184 
	`sh™n⁄_m¶ìp
(100);

186 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

187 
îr‹_cou¡
 = 
	`sh™n⁄_ªad_ªg
((
u32
 *)
sdev
->
b¨
 + 
SH_RECONFIG_STATUS_OFFSET
, 
ERROR_COUNT
);

188 
£u
 = 
	`sh™n⁄_i‹ód32
((
u32
 *)
sdev
->
b¨
 + 
SH_SEU_OFFSET
);

189 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

190 
	`sh™n⁄_öfo
("%s: check seuágaö. seu=0x%x.\n", 
sdev
->
cdev_«me
, 
£u
);

193 i‡(
îr‹_cou¡
 || (
£u
 >> 
SH_SEU_CRC_ERROR_SHIFT
)) {

194 
	`sh™n⁄_îr
("%s:Ñec⁄figÉº‹ cou¡=%d, seuÑegi°î=0x%x, sëÅÿªad⁄ly.\n", 
sdev
->
cdev_«me
, 
îr‹_cou¡
, 
£u
);

195 
	`sh™n⁄_£t_bô
(
SHN_REASON_SEU_ERROR
, &
sdev
->
ªad⁄ly_ªas⁄
);

196 
	`upd©e_ac˚ss_mode
(
sdev
);

199 
	`sh™n⁄_öfo
("%s:Ñec⁄fig föished.\n", 
sdev
->
cdev_«me
);

200 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
))

201 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
n‹Êash_›s_£m
);

203 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

204 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

205 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

206 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

207 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

209 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

210 
	`sh™n⁄_£t_˘æ_∑øm
(
sdev
);

211 
	`sh™n⁄_m¶ìp
(2);

212 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

213 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, 
ONFI_ASYNC_MODE
);

214 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

215 
	`sh™n⁄_m¶ìp
(10);

217 
	`sh™n⁄_öô_n‹Êash
(
sdev
);

218 
	`öô_globÆ_c⁄fig_ªgs_f‹_Êashid
(
sdev
);

219 #ifde‡
CONFIG_SHANNON_DMA_QUEUE_64BIT


220 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

221 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
DMA_QUEUE_64BIT
, 1);

222 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

226 
lun_£˘i⁄
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)
sdev
->
b¨
 + 256);

227 
	`ª£t_Æl_lun£t
(
sdev
, 
lun_£˘i⁄
);

229 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

230 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

231 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, sdev->
ifmode
 =
TOGGLE_MODE
 ? TOGGLE_MODE : 
ONFI_ASYNC_MODE
);

232 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

233 i‡((
sdev
->
h¨dw¨e_vîsi⁄
 >5Ë&& (sdev->
mi¸ocode_¨øy
[0].
mi¸ocode_Àngth
 > 0)) {

234 
	`˛ón_Æl_mi¸ocode_u£d_°©e
(
sdev
);

235 
	`wrôe_adv™˚d_ªad_mi¸ocode
(
sdev
, 0);

236 
sdev
->
adv™˚d_ªad_°©e
 |
ADV_READ_SUPPORT_MASK
;

238 
sdev
->
adv™˚d_ªad_°©e
 &~
ADV_READ_SUPPORT_MASK
;

247 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

248 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
lun£ts
[
i
].
sq_addr
, sdev->lun£ts[i].
sq_dma_addr
);

249 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
lun£ts
[
i
].
cq_addr
, sdev->lun£ts[i].
cq_dma_addr
);

250 
sdev
->
lun£ts
[
i
].
sq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
,

251 &
sdev
->
lun£ts
[
i
].
sq_dma_addr
, 
GFP_ATOMIC
);

252 
sdev
->
lun£ts
[
i
].
cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
,

253 &
sdev
->
lun£ts
[
i
].
cq_dma_addr
, 
GFP_ATOMIC
);

255 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

257 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
sq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr0
);

258 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
sq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr1
);

259 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
cq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr0
);

260 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
cq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr1
);

262 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
sq_hód
);

263 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

265 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

267 
sdev
->
lun£ts
[
i
].
sq_hód
 = sdev->lun£ts[i].
sq_hw_hód
;

268 
sdev
->
lun£ts
[
i
].
cq_hód
 = sdev->lun£ts[i].
cq_hw_hód
;

269 
sdev
->
lun£ts
[
i
].
cq_èû
 = sdev->lun£ts[i].
cq_hód
;

270 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = sdev->lun£ts[i].
cq_hód
;

272 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = sdev->lun£ts[i].
sq_hód
;

275 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
))

276 
	`lun_£t_Æl_„©uª
(
sdev
);

278 #ifde‡
SHANNON_USE_WRITE_BUFFER


279 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[0], sdev->
bufq_sq_dma_addr
[0]);

280 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[0], sdev->
bufq_cq_dma_addr
[0]);

281 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[1], sdev->
bufq_sq_dma_addr
[1]);

282 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[1], sdev->
bufq_cq_dma_addr
[1]);

283 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_ack_cq_addr
, sdev->
bufq_ack_cq_dma_addr
);

285 
sdev
->
bufq_sq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[0], 
GFP_ATOMIC
);

286 
sdev
->
bufq_cq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[0], 
GFP_ATOMIC
);

287 
sdev
->
bufq_sq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[1], 
GFP_ATOMIC
);

288 
sdev
->
bufq_cq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[1], 
GFP_ATOMIC
);

289 
sdev
->
bufq_ack_cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_ack_cq_dma_addr
, 
GFP_ATOMIC
);

290 i‡(
has_dma_dñay
)

291 
	`˛ór_comm™d_queue
((
u64
 *)
sdev
->
bufq_ack_cq_addr
, 0, 
QUEUE_SIZE
>>3, 
COMP_QUEUE_FILL
);

293 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

295 
sdev
->
bufq_b¨
[0] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[0]));

296 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
sq_dma_addr0
);

297 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
sq_dma_addr1
);

298 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
cq_dma_addr0
);

299 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
cq_dma_addr1
);

301 
sdev
->
bufq_b¨
[1] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[1]));

302 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
sq_dma_addr0
);

303 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
sq_dma_addr1
);

304 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
cq_dma_addr0
);

305 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
cq_dma_addr1
);

307 
sdev
->
bufq_ack_b¨
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
bufq_ack_öå_shi·
));

308 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_ack_cq_dma_addr
, &sdev->
bufq_ack_b¨
->
cq_dma_addr0
);

309 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_ack_cq_dma_addr
 >> 32Ë: 0, &sdev->
bufq_ack_b¨
->
cq_dma_addr1
);

311 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

312 
sdev
->
bufq_sq_hw_hód
[
i
] = 
	`sh™n⁄_ªadl
(&sdev->
bufq_b¨
[i]->
sq_hód
);

313 
sdev
->
bufq_sq_hód
[
i
] = sdev->
bufq_sq_hw_hód
[i];

314 
sdev
->
bufq_cq_hw_hód
[
i
] = 
	`sh™n⁄_ªadl
(&sdev->
bufq_b¨
[i]->
cq_hód
);

315 
sdev
->
bufq_cq_hód
[
i
] = sdev->
bufq_cq_hw_hód
[i];

316 
sdev
->
bufq_cq_èû
[
i
] = sdev->
bufq_cq_hód
[i];

317 
sdev
->
bufq_sq_hód_tmp
[
i
] = sdev->
bufq_sq_hód
[i];

319 
sdev
->
bufq_ack_cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->
bufq_ack_b¨
->
cq_hód
);

321 
sdev
->
bufq_ack_cq_hód
 = sdev->
bufq_ack_cq_hw_hód
;

322 
sdev
->
bufq_ack_cq_èû
 = sdev->
bufq_ack_cq_hód
;

323 
	`sh™n⁄_wrôñ
(
sdev
->
bufq_ack_cq_èû
, &sdev->
bufq_ack_b¨
->
ack_cq_èû
);

325 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

327 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, sdev->
«nd_∑ge_size
, sdev->
dummy_∑ge
, sdev->
dummy_dma_∑ge
);

328 
sdev
->
dummy_∑ge
 = 
	`sh™n⁄_pci_Æloc_c⁄si°ít
(sdev->
pci_dev
, sdev->
«nd_∑ge_size
, &sdev->
dummy_dma_∑ge
);

330 i‡(
	`sh™n⁄_dev_is_g5
(
sdev
)) {

331 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 0);

332 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

333 
j
 = 
i
 * 
sdev
->
max_lun_ö_lun£t
; j < (i + 1) * sdev->max_lun_in_lunset; j++) {

334 i‡(!
	`sh™n⁄_ã°_bô
(
j
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
)) {

335 
	`sh™n⁄_pﬁlög_cmd
(&
sdev
->
lun£ts
[
i
], 
j
, 1, 0x0, 0x0);

340 
	`sh™n⁄_m¶ìp
(2);

341 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

342 
	`sh™n⁄_£t_ªg
(&
sdev
->
globÆ_b¨
->
Êash
, 
FLASH_MODE
, sdev->
ifmode
);

343 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

344 
	`sh™n⁄_m¶ìp
(10);

345 
	`lun_£t_Æl_„©uª_wôh_¥io
(
sdev
, 1);

346 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

347 
j
 = 
i
 * 
sdev
->
max_lun_ö_lun£t
; j < (i + 1) * sdev->max_lun_in_lunset; j++) {

348 i‡(!
	`sh™n⁄_ã°_bô
(
j
, (*)
sdev
->
mbr
.
bad_phy_lun_m≠
)) {

349 
	`sh™n⁄_pﬁlög_cmd
(&
sdev
->
lun£ts
[
i
], 
j
, 1, 0x0, 0x0);

354 
	`sh™n⁄_m¶ìp
(2);

356 
	`öô_globÆ_c⁄fig_ªgs
(
sdev
);

359 
	`£t_avaûabÀ_øid_°rùes
(
sdev
);

361 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

362 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

363 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
sq_hód
);

364 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

365 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

366 
sdev
->
lun£ts
[
i
].
sq_hód
 = sdev->lun£ts[i].
sq_hw_hód
;

367 
sdev
->
lun£ts
[
i
].
cq_hód
 = sdev->lun£ts[i].
cq_hw_hód
;

368 
sdev
->
lun£ts
[
i
].
cq_èû
 = sdev->lun£ts[i].
cq_hód
;

369 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = sdev->lun£ts[i].
cq_hód
;

371 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = sdev->lun£ts[i].
sq_hód
;

372 
	`debugs1
("lun£t=%d, sq_hód_tmp=%d, cq_èû=%d.\n", 
i
, 
sdev
->
lun£ts
[i].
sq_hód_tmp
, sdev->lun£ts[i].
cq_èû
);

375 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

376 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

377 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

378 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

379 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

382 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

383 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

384 #ifde‡
SHANNON_USE_WRITE_BUFFER


385 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[0]);

386 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[1]);

389 
	`sh™n⁄_öfo
("%s: sídÖ¨ôy_öô.\n", 
sdev
->
cdev_«me
);

390 
	`∑rôy_öô_f‹_ªc⁄fig
(
sdev
->
a˘ive_blk
[0], sdev->
wr_group
[0], sdev->
wr_sb
[0] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[0], 
wrôe_hód
[0]);

391 
	`∑rôy_öô_f‹_ªc⁄fig
(
sdev
->
a˘ive_blk
[1], sdev->
wr_group
[1], sdev->
wr_sb
[1] * sdev->
∑ges_ö_eblock
 * sdev->
∂™es
 + sdev->
wr_chunk
[1], 
wrôe_hód
[1]);

393 
sdev
->
°©e
 = 
ﬁd_°©e
;

394 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

395 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

396 
	`wrôe_öãºu±_ve˘‹
(
sdev
, 
i
);

398 
out
:

399 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

400 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

401 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
lun£ts
[
i
].
ªq_queue
))

402 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun£ts
[
i
].
submô_w‹k
);

404 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

405 
sdev
->
sdisk
.
ö_ªc⁄fig
 = 0;

406 
sdev
->
big_lock
 = 0;

407 
	`sh™n⁄_wake_up
(&
sdev
->
big_lock_evít
);

408 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

409 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

410 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

411 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

412 
	`°¨t_w©chdog_timî
(
sdev
, 
WATCHDOG_SECONDS
);

414 
	`debug_¥öt
("exit.\n");

416 
	}
}

418 
	$sh™n⁄_ªc⁄fig_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

420 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
ªc⁄fig_w‹k
);

421 
	`sh™n⁄_ªc⁄fig
(
dev
);

422 
	}
}

424 
	$sh™n⁄_ª£t
(
sh™n⁄_dev
 *
sdev
)

426 
sh™n⁄_lun_b¨
 *
lun_£˘i⁄
;

427 
i
, 
ﬁd_°©e
;

429 i‡(
sdev
->
ª£t_times
 > 
MAX_RESET_TIMES
)

432 
	`°›_w©chdog_timî
(
sdev
);

433 
sdev
->
big_lock
 = 1;

434 
	`sh™n⁄_muãx_lock
(&
sdev
->
pick_£m
);

435 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

436 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

439 i‡((
	`gë_jiffõs
(Ë- 
sdev
->
fú°_ª£t_jiffõ
Ë> 
	`gë_HZ
() * 60000000) {

440 
sdev
->
fú°_ª£t_jiffõ
 = 
	`gë_jiffõs
();

441 
sdev
->
ª£t_times
 = 1;

443 
sdev
->
ª£t_times
++;

444 i‡(
sdev
->
ª£t_times
 > 
MAX_RESET_TIMES
) {

445 
	`sh™n⁄_öfo
("%s:Ñe£àskù≥d.\n", 
sdev
->
cdev_«me
);

446 
out
;

450 
sdev
->
tŸÆ_ª£t_times
++;

452 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

453 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

454 
	`sh™n⁄_m¶ìp
(1);

455 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

457 i‡(
sdev
->
ac˚ss_mode
 !
SHN_MODE_READONLY
) {

458 
	`sh™n⁄_öfo
("%s: fû»∑gê°rùe.....\n", 
sdev
->
cdev_«me
);

459 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

460 (
sdev
->
lun_ö_group
[
i
] != 0) || \

461 (
sdev
->
wr_group
[
i
] != 0) || \

462 (
sdev
->
wr_∂™e
[
i
] != 0) || \

463 (
sdev
->
wr_logicb
[
i
] != 0))

464 
	`£nd_dummy_ªq
(
sdev
, 
wrôe_hód
[
i
]);

469 #ifde‡
SHANNON_USE_WRITE_BUFFER


470 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[0]);

471 
	`sh™n⁄_muãx_lock
(&
sdev
->
bufq_sq_£m
[1]);

473 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

474 
	`sh™n⁄_muãx_lock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

476 
	`sh™n⁄_öfo
("%s: waô comm™d queuêi†em±y.\n", 
sdev
->
cdev_«me
);

477 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

478 
	`sh™n⁄_m¶ìp
(1);

481 i‡(
sdev
->
¢≠_ªad_íabÀ
 && 
	`sh™n⁄_dev_is_g5
(sdev)) {

482 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

483 i‡(
	`sh™n⁄_ã°_bô
(
sdev
->
lun
[
i
]->
phy_lun_num
, (*)sdev->
mbr
.
bad_phy_lun_m≠
))

485 
	`¢≠_ªad_dißbÀ
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i], 1, 1);

486 
	`sh™n⁄_pﬁlög_cmd
(
sdev
->
lun
[
i
]->
lun£t
, sdev->lun[i]->
phy_lun_num
, 0, 0, 0);

489 !
	`Æl_cmd_queue_is_em±y
(
sdev
))

490 
	`sh™n⁄_m¶ìp
(1);

491 
	`sh™n⁄_öfo
("%s: comm™d queuêi†em±yÇow.\n", 
sdev
->
cdev_«me
);

494 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

495 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

496 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

497 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

498 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

500 
ﬁd_°©e
 = 
sdev
->
°©e
;

501 
sdev
->
°©e
 = 
SHN_STATE_RESET
;

503 
lun_£˘i⁄
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)
sdev
->
b¨
 + 256);

504 
	`ª£t_Æl_lun£t
(
sdev
, 
lun_£˘i⁄
);

506 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

507 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
lun£ts
[
i
].
sq_addr
, sdev->lun£ts[i].
sq_dma_addr
);

508 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
lun£ts
[
i
].
cq_addr
, sdev->lun£ts[i].
cq_dma_addr
);

509 
sdev
->
lun£ts
[
i
].
sq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
,

510 &
sdev
->
lun£ts
[
i
].
sq_dma_addr
, 
GFP_ATOMIC
);

511 
sdev
->
lun£ts
[
i
].
cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
,

512 &
sdev
->
lun£ts
[
i
].
cq_dma_addr
, 
GFP_ATOMIC
);

514 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

516 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
sq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr0
);

517 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
sq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
sq_dma_addr1
);

518 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
lun£ts
[
i
].
cq_dma_addr
, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr0
);

519 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
lun£ts
[
i
].
cq_dma_addr
 >> 32Ë: 0, &sdev->lun£ts[i].
lun_b¨
->
cq_dma_addr1
);

521 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
sq_hód
);

522 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

524 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

526 
sdev
->
lun£ts
[
i
].
sq_hód
 = sdev->lun£ts[i].
sq_hw_hód
;

527 
sdev
->
lun£ts
[
i
].
cq_hód
 = sdev->lun£ts[i].
cq_hw_hód
;

528 
sdev
->
lun£ts
[
i
].
cq_èû
 = sdev->lun£ts[i].
cq_hód
;

529 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = sdev->lun£ts[i].
cq_hód
;

531 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = sdev->lun£ts[i].
sq_hód
;

534 
	`lun_£t_Æl_„©uª
(
sdev
);

536 #ifde‡
SHANNON_USE_WRITE_BUFFER


537 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[0], sdev->
bufq_sq_dma_addr
[0]);

538 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[0], sdev->
bufq_cq_dma_addr
[0]);

539 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_sq_addr
[1], sdev->
bufq_sq_dma_addr
[1]);

540 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_cq_addr
[1], sdev->
bufq_cq_dma_addr
[1]);

541 
	`sh™n⁄_dma_‰ì_cohîít
(
sdev
->
pci_dev
, 
QUEUE_SIZE
, (*)sdev->
bufq_ack_cq_addr
, sdev->
bufq_ack_cq_dma_addr
);

543 
sdev
->
bufq_sq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[0], 
GFP_ATOMIC
);

544 
sdev
->
bufq_cq_addr
[0] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[0], 
GFP_ATOMIC
);

545 
sdev
->
bufq_sq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_sq_dma_addr
[1], 
GFP_ATOMIC
);

546 
sdev
->
bufq_cq_addr
[1] = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_cq_dma_addr
[1], 
GFP_ATOMIC
);

547 
sdev
->
bufq_ack_cq_addr
 = 
	`sh™n⁄_dma_Æloc_cohîít
(sdev->
pci_dev
, 
QUEUE_SIZE
, &sdev->
bufq_ack_cq_dma_addr
, 
GFP_ATOMIC
);

548 i‡(
has_dma_dñay
)

549 
	`˛ór_comm™d_queue
((
u64
 *)
sdev
->
bufq_ack_cq_addr
, 0, 
QUEUE_SIZE
>>3, 
COMP_QUEUE_FILL
);

551 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

553 
sdev
->
bufq_b¨
[0] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[0]));

554 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
sq_dma_addr0
);

555 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
sq_dma_addr1
);

556 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[0], &sdev->
bufq_b¨
[0]->
cq_dma_addr0
);

557 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[0] >> 32Ë: 0, &sdev->
bufq_b¨
[0]->
cq_dma_addr1
);

559 
sdev
->
bufq_b¨
[1] = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
öå_big_shi·
[1]));

560 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_sq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
sq_dma_addr0
);

561 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_sq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
sq_dma_addr1
);

562 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_cq_dma_addr
[1], &sdev->
bufq_b¨
[1]->
cq_dma_addr0
);

563 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_cq_dma_addr
[1] >> 32Ë: 0, &sdev->
bufq_b¨
[1]->
cq_dma_addr1
);

565 
sdev
->
bufq_ack_b¨
 = (
sh™n⁄_lun_b¨
 *)((
u32
 *)sdev->
b¨
 + 256 + (8 * sdev->
bufq_ack_öå_shi·
));

566 
	`sh™n⁄_wrôñ
((
u32
)
sdev
->
bufq_ack_cq_dma_addr
, &sdev->
bufq_ack_b¨
->
cq_dma_addr0
);

567 
	`sh™n⁄_wrôñ
(((
dma_addr_t
Ë> 4Ë? (
u32
)(
sdev
->
bufq_ack_cq_dma_addr
 >> 32Ë: 0, &sdev->
bufq_ack_b¨
->
cq_dma_addr1
);

569 
i
 = 0; i < 
sdev
->
hód_cou¡
; i++) {

570 
sdev
->
bufq_sq_hw_hód
[
i
] = 
	`sh™n⁄_ªadl
(&sdev->
bufq_b¨
[i]->
sq_hód
);

571 
sdev
->
bufq_sq_hód
[
i
] = sdev->
bufq_sq_hw_hód
[i];

572 
sdev
->
bufq_cq_hw_hód
[
i
] = 
	`sh™n⁄_ªadl
(&sdev->
bufq_b¨
[i]->
cq_hód
);

573 
sdev
->
bufq_cq_hód
[
i
] = sdev->
bufq_cq_hw_hód
[i];

574 
sdev
->
bufq_cq_èû
[
i
] = sdev->
bufq_cq_hód
[i];

575 
sdev
->
bufq_sq_hód_tmp
[
i
] = sdev->
bufq_sq_hód
[i];

577 
sdev
->
bufq_ack_cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->
bufq_ack_b¨
->
cq_hód
);

578 
sdev
->
bufq_ack_cq_hód
 = sdev->
bufq_ack_cq_hw_hód
;

579 
sdev
->
bufq_ack_cq_èû
 = sdev->
bufq_ack_cq_hód
;

580 
	`sh™n⁄_wrôñ
(
sdev
->
bufq_ack_cq_èû
, &sdev->
bufq_ack_b¨
->
ack_cq_èû
);

582 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

585 
	`sh™n⁄_pci_‰ì_c⁄si°ít
(
sdev
->
pci_dev
, sdev->
«nd_∑ge_size
, sdev->
dummy_∑ge
, sdev->
dummy_dma_∑ge
);

586 
sdev
->
dummy_∑ge
 = 
	`sh™n⁄_pci_Æloc_c⁄si°ít
(sdev->
pci_dev
, sdev->
«nd_∑ge_size
, &sdev->
dummy_dma_∑ge
);

588 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

589 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
ªgs_›_lock
);

590 
sdev
->
lun£ts
[
i
].
sq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
sq_hód
);

591 
sdev
->
lun£ts
[
i
].
cq_hw_hód
 = 
	`sh™n⁄_ªadl
(&sdev->lun£ts[i].
lun_b¨
->
cq_hód
);

592 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
ªgs_›_lock
);

593 
sdev
->
lun£ts
[
i
].
sq_hód
 = sdev->lun£ts[i].
sq_hw_hód
;

594 
sdev
->
lun£ts
[
i
].
cq_hód
 = sdev->lun£ts[i].
cq_hw_hód
;

595 
sdev
->
lun£ts
[
i
].
cq_èû
 = sdev->lun£ts[i].
cq_hód
;

596 
sdev
->
lun£ts
[
i
].
cq_èû_tmp
 = sdev->lun£ts[i].
cq_hód
;

598 
sdev
->
lun£ts
[
i
].
sq_hód_tmp
 = sdev->lun£ts[i].
sq_hód
;

599 
	`debugs1
("lun£t=%d, sq_hód_tmp=%d, cq_èû=%d.\n", 
i
, 
sdev
->
lun£ts
[i].
sq_hód_tmp
, sdev->lun£ts[i].
cq_èû
);

602 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

603 
	`ªad_bufq_öãºu±_ve˘‹
(
sdev
);

604 
	`ªad_Ÿhî_öãºu±_ve˘‹
(
sdev
);

605 
	`sh™n⁄_˛ór_öãºu±
(
sdev
);

606 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0, (sdev->potential_interrupt_vectors));

609 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++)

610 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
sq_£m
);

611 #ifde‡
SHANNON_USE_WRITE_BUFFER


612 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[0]);

613 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
bufq_sq_£m
[1]);

616 
sdev
->
°©e
 = 
ﬁd_°©e
;

617 
	`sh™n⁄_mem£t
(
sdev
->
pŸítül_öãºu±_ve˘‹s
, 0xFF, (sdev->potential_interrupt_vectors));

618 
i
 = 0; i < 
MAX_MSIX_INTERRUPTS
; i++)

619 
	`wrôe_öãºu±_ve˘‹
(
sdev
, 
i
);

621 
out
:

622 
i
 = 0; i < 
sdev
->
lun£t_cou¡
; i++) {

623 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
lun£ts
[
i
].
lun_pick_£m
);

624 i‡(!
	`sh™n⁄_li°_em±y
(&
sdev
->
lun£ts
[
i
].
ªq_queue
))

625 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_ªad_wq
, &sdev->
lun£ts
[
i
].
submô_w‹k
);

627 
	`sh™n⁄_muãx_u∆ock
(&
sdev
->
pick_£m
);

628 
sdev
->
big_lock
 = 0;

629 
	`sh™n⁄_wake_up
(&
sdev
->
big_lock_evít
);

630 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[0]);

631 
	`sh™n⁄_wake_up
(&
sdev
->
limô_ªq_queue
[1]);

632 i‡(!
	`Æl_ªq_queue_is_em±y
(
sdev
))

633 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

634 
	`°¨t_w©chdog_timî
(
sdev
, 
WATCHDOG_SECONDS
);

636 
	`debug_¥öt
("exit.\n");

638 
	}
}

640 
	$sh™n⁄_ª£t_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

642 
sh™n⁄_dev
 *
dev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
ª£t_w‹k
);

643 
	`sh™n⁄_ª£t
(
dev
);

644 
	}
}

646 
	$sh™n⁄_upd©e_mi¸ocode
(
sh™n⁄_dev
 *
sdev
)

648 i‡(!(
sdev
->
adv™˚d_ªad_°©e
 & 
ADV_READ_SUPPORT_MASK
))

651 
sdev
->
adv™˚d_ªad_°©e
 |
UPDATING_MICROCODE_MASK
;

654 
	`sh™n⁄_m¶ìp
(1);

655 } 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ö_cmd_queue_adv_ªads
) != 0);

657 i‡(
	`should_upd©e_mi¸ocode
(
sdev
))

658 
	`wrôe_adv™˚d_ªad_mi¸ocode
(
sdev
, 
	`gë_upd©e_mi¸ocode
(sdev));

660 
	`sh™n⁄_•ö_lock_bh
(&
sdev
->
adv_ªad_li°_lock
);

661 
sdev
->
adv™˚d_ªad_°©e
 &~
UPDATING_MICROCODE_MASK
;

662 
	`put_adv_ªad_li°_to_ªq_queue
(
sdev
);

663 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdev
->
adv_ªad_li°_lock
);

665 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
w‹k
);

666 
	}
}

668 
	$sh™n⁄_upd©e_mi¸ocode_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

670 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_dev, 
upd©e_mi¸ocode_w‹k
);

671 
	`sh™n⁄_upd©e_mi¸ocode
(
sdev
);

672 
	}
}

	@shannon_regs.h

10 #i‚de‡
__SHANNON_REGS_H


11 
	#__SHANNON_REGS_H


	)

17 
	#SH_EXT_TEMP_THRESHOLD_OFFSET
 0x12

	)

19 
	#SH_EXT_TEMP_CRITICAL_THRESHOLD_OFFSET
 0x13

	)

21 
	#SH_INNER_TEMP_THRESHOLD_OFFSET
 0x14

	)

24 
	#SH_DCM_FREQ_OFFSET
 0x16

	)

27 
	#SH_DEBUG_DCM_OFFSET
 0x18

	)

29 
	#SH_RECONFIG_CONTROL_OFFSET
 0x19

	)

30 
	#SH_RECONFIG_START_MASK
 0x80000000

	)

31 
	#SH_RECONFIG_START_SHIFT
 31

	)

34 
	#SH_RECONFIG_STATUS_OFFSET
 0x1a

	)

35 
	#SH_RECONFIG_STATUS_MASK
 0x80000000

	)

36 
	#SH_RECONFIG_STATUS_SHIFT
 31

	)

37 
	#SH_RECONFIG_SUPPORT_MASK
 0x40000000

	)

38 
	#SH_RECONFIG_SUPPORT_SHIFT
 30

	)

39 
	#SH_ERROR_COUNT_MASK
 0x3fff0000

	)

40 
	#SH_ERROR_COUNT_SHIFT
 16

	)

41 
	#SH_DONE_COUNT_MASK
 0x0000ffff

	)

42 
	#SH_DONE_COUNT_SHIFT
 0

	)

45 
	#SH_NORFLASH_ID_OFFSET
 0x1c

	)

47 
	#SH_NORFLASH_OPT_OFFSET
 0x1d

	)

48 
	#SH_NORFLASH_ERASE_SHIFT
 31

	)

49 
	#SH_NORFLASH_WRITE_SHIFT
 30

	)

50 
	#SH_NORFLASH_READ_SHIFT
 29

	)

51 
	#SH_NORFLASH_ADDR_MASK
 0x0000ffff

	)

53 
	#SH_NORFLASH_STATE_OFFSET
 0x1e

	)

54 
	#SH_NORFLASH_STATE_MASK
 0x00000001

	)

55 
	#SH_NORFLASH_WRITE_PROTECT_MASK
 0x80000000

	)

58 
	#SH_G5_FPGA_NORFLASH_OFFSET
 0x21

	)

59 
	#SH_G5_FPGA_NORFLASH_MASK
 0xffffffff

	)

60 
	#SH_G5_FPGA_NORFLASH_SHIFT
 0x0

	)

63 
	#SH_SEU_OFFSET
 0x25

	)

64 
	#SH_SEU_ECC_ERROR_MASK
 0x7fffffff

	)

65 
	#SH_SEU_CRC_ERROR_SHIFT
 31

	)

68 
	#SH_VCC_TEMP_OFFSET
 0x26

	)

69 
	#SH_TEMP_SHIFT
 0

	)

70 
	#SH_TEMP_MASK
 0x000003ff

	)

71 
	#SH_VCCINT_SHIFT
 10

	)

72 
	#SH_VCCINT_MASK
 0x000ffc00

	)

73 
	#SH_VCCAUX_SHIFT
 20

	)

74 
	#SH_VCCAUX_MASK
 0x7ff00000

	)

77 
	#SH_SEU_INTERRUPT_OFFSET
 0x30

	)

78 
	#SH_MASK_SEU_INTERRUPT_MASK
 0x00000001

	)

79 
	#SH_MASK_SEU_INTERRUPT_SHIFT
 0

	)

82 
	#SH_ICAP_OFFSET
 0x33

	)

85 
	#SH_TEMP_STATUS
 0x3c

	)

86 
	#SH_TEMP_STATUS_MASK
 0x00000060

	)

87 
	#SH_TEMP_WARN
 0x00000020

	)

88 
	#SH_TEMP_CRIT_WARN
 0x00000060

	)

91 
	#SH_TEMP_AUX1_OFFSET
 0x3d

	)

93 
	#SH_TEMP_AUX2_OFFSET
 0x3e

	)

95 
	#SH_TEMP_BOARD_OFFSET
 0x3f

	)

96 
	#SH_EXTERNAL_TEMP_MASK
 0xff

	)

97 
	#SH_EXTERNAL_TEMP_SHIFT
 5

	)

100 
	#SH_CORE_CLK_OFFSET
 0xf2

	)

102 
	#SH_DP_CLK_OFFSET
 0xf3

	)

105 
	#SH_INTERN_TEMP_OFFSET
 0xf4

	)

106 
	#SH_CURRENT_TEMP_SHIFT
 0

	)

107 
	#SH_CURRENT_TEMP_MASK
 0x000000ff

	)

108 
	#SH_MAX_TEMP_SHIFT
 8

	)

109 
	#SH_MAX_TEMP_MASK
 0x0000ff00

	)

112 
	#SH_ADVANCED_READ_OFFSET
 0x0C00

	)

118 
	#SH_FLASH_MODE_SHIFT
 0

	)

119 
	#SH_FLASH_MODE_MASK
 0x0000000f

	)

120 
	#SH_CMD_CYCLE_SHIFT
 4

	)

121 
	#SH_CMD_CYCLE_MASK
 0x000000f0

	)

122 
	#SH_SECTORS_IN_PAGE_SHIFT
 8

	)

123 
	#SH_SECTORS_IN_PAGE_MASK
 0x0000ff00

	)

124 
	#SH_PAGES_IN_BLOCK_SHIFT
 16

	)

125 
	#SH_PAGES_IN_BLOCK_MASK
 0x00ff0000

	)

126 
	#SH_RESET_SHIFT
 24

	)

127 
	#SH_RESET_MASK
 0x01000000

	)

128 
	#SH_DMA_QUEUE_64BIT_SHIFT
 25

	)

129 
	#SH_DMA_QUEUE_64BIT_MASK
 0x02000000

	)

130 
	#SH_LED_SHIFT
 28

	)

131 
	#SH_LED_MASK
 0xf0000000

	)

132 
	#SH_G5_LED_SHIFT
 26

	)

133 
	#SH_G5_LED_MASK
 0x7c000000

	)

134 
	#SH_VPP_SHIFT
 31

	)

135 
	#SH_VPP_MASK
 0x80000000

	)

137 
	#GREEN_CONSTANT
 0x0

	)

138 
	#GREEN_FLASHING
 0x1

	)

139 
	#YELLOW_DARK
 0x0

	)

140 
	#YELLOW_BRIGHT
 0x4

	)

141 
	#YELLOW_SLOW_FLASH
 0x2

	)

142 
	#YELLOW_FAST_FLASH
 0x6

	)

145 
	#SH_SECTOR_SIZE_SHIFT
 0

	)

146 
	#SH_SECTOR_SIZE_MASK
 0x000000ff

	)

147 
	#SH_ECC_CODEWORDS_SHIFT
 8

	)

148 
	#SH_ECC_CODEWORDS_MASK
 0x0000ff00

	)

149 
	#SH_FULL_SECTOR_SIZE_SHIFT
 16

	)

150 
	#SH_FULL_SECTOR_SIZE_MASK
 0xffff0000

	)

151 
	#SH_FIRST_CODEWORD_OFFSET_SHIFT
 16

	)

152 
	#SH_FIRST_CODEWORD_OFFSET_MASK
 0xffff0000

	)

155 
	#SH_PLANE_MASK_SHIFT
 0

	)

156 
	#SH_PLANE_MASK_MASK
 0x000000ff

	)

157 
	#SH_LUN_ADDR_MASK_SHIFT
 8

	)

158 
	#SH_LUN_ADDR_MASK_MASK
 0x0000ff00

	)

159 
	#SH_FULL_PAGE_SIZE_SHIFT
 16

	)

160 
	#SH_FULL_PAGE_SIZE_MASK
 0xffff0000

	)

163 
	#SH_RAID_ENABLE_SHIFT
 0

	)

164 
	#SH_RAID_ENABLE_MASK
 0x00000001

	)

165 
	#SH_PER_BYTE_DISABLE_SHIFT
 4

	)

166 
	#SH_PER_BYTE_DISABLE_MASK
 0x00000030

	)

167 
	#SH_SECTORS_IN_CHUNK_SHIFT
 8

	)

168 
	#SH_SECTORS_IN_CHUNK_MASK
 0x0000ff00

	)

169 
	#SH_CHUNK_SIZE_SHIFT
 16

	)

170 
	#SH_CHUNK_SIZE_MASK
 0x00ff0000

	)

171 
	#SH_RAID_STRIPES_SHIFT
 24

	)

172 
	#SH_RAID_STRIPES_MASK
 0xff000000

	)

175 
	#SH_ECC_BYPASS_SHIFT
 0

	)

176 
	#SH_ECC_BYPASS_MASK
 0x000000ff

	)

177 
	#SH_ECC_CORRECT_POWER_SHIFT
 8

	)

178 
	#SH_ECC_CORRECT_POWER_MASK
 0x00000f00

	)

179 
	#SH_ECC_FORCE_SECOND_SHIFT
 12

	)

180 
	#SH_ECC_FORCE_SECOND_MASK
 0x0000f000

	)

181 
	#SH_ECC_CODEWORD_SIZE_SHIFT
 16

	)

182 
	#SH_ECC_CODEWORD_SIZE_MASK
 0xffff0000

	)

185 
	#SH_INT_DELAY_SHIFT
 0

	)

186 
	#SH_INT_DELAY_MASK
 0x0000ffff

	)

187 
	#SH_POWER_BUDGET_SHIFT
 16

	)

188 
	#SH_POWER_BUDGET_MASK
 0x00ff0000

	)

189 
	#SH_SEED_IN_HIGH_SHIFT
 24

	)

190 
	#SH_SEED_IN_HIGH_MASK
 0xff000000

	)

193 
	#SH_THROTTLE_SHIFT
 8

	)

194 
	#SH_THROTTLE_MASK
 0x0000ff00

	)

195 
	#SH_HALTREAD_SHIFT
 16

	)

196 
	#SH_HALTREAD_MASK
 0x00ff0000

	)

197 
	#SH_DMA_MAX_READ_SHIFT
 24

	)

198 
	#SH_DMA_MAX_READ_MASK
 0xff000000

	)

200 
	#sh™n⁄_£t_ªg
(
ªg_addr
, 
func
, 
vÆue
) \

201 
	`sh™n⁄_wrôñ
((
	`sh™n⁄_ªadl
(
ªg_addr
Ë& ~
SH_
##
func
##
_MASK
Ë| ((
vÆue
Ë<< SH_##func##
_SHIFT
),Ñeg_addr)

	)

203 
	#sh™n⁄_ªad_ªg
(
ªg_addr
, 
func
) \

204 ((
	`sh™n⁄_ªadl
(
ªg_addr
Ë& 
SH_
##
func
##
_MASK
Ë>> SH_##func##
_SHIFT
)

	)

	@shannon_scatter.c

1 
	~"sh™n⁄_sˇâî.h
"

2 
	~<löux/mm.h
>

3 
	~<löux/¶ab.h
>

4 
	~<löux/sˇâîli°.h
>

5 
	~<löux/vîsi⁄.h
>

7 
sh™n⁄_dma_addr_t
 
	$sh™n⁄_sg_dma_addªss
(
sh™n⁄_sg_li°_t
 *
sg
)

9  
	`sg_dma_addªss
((
sˇâîli°
 *)
sg
);

10 
	}
}

12 
	$sh™n⁄_sg_£t_dma_addªss
(
sh™n⁄_sg_li°_t
 *
sg
, 
sh™n⁄_dma_addr_t
 
dma_addr
)

14 
	`sg_dma_addªss
((
sˇâîli°
 *)
sg
Ë
dma_addr
;

15 
	}
}

17 
sh™n⁄_∑ge
 *
	$sh™n⁄_sg_∑ge
(
sh™n⁄_sg_li°_t
 *
sg
)

19 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

20  
	`sg_∑ge
((
sˇâîli°
 *)
sg
);

22  ((
sˇâîli°
 *)
sg
)->
∑ge
;

24 
	}
}

26 
	$sh™n⁄_sg_off£t
(
sh™n⁄_sg_li°_t
 *
sg
)

28  ((
sˇâîli°
 *)
sg
)->
off£t
;

29 
	}
}

31 
	$sh™n⁄_sg_Àngth
(
sh™n⁄_sg_li°_t
 *
sg
)

33  ((
sˇâîli°
 *)
sg
)->
Àngth
;

34 
	}
}

36 
	$sh™n⁄_sg_m¨k_íd
(
sh™n⁄_sg_li°_t
 *
sg
)

38 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

39 
	`sg_m¨k_íd
((
sˇâîli°
 *)
sg
);

41 
	}
}

43 
sh™n⁄_sg_li°_t
 *
	$sh™n⁄_sg_Æloc
(
√¡s
, 
sh™n⁄_gÂ_t
 
gÂ_mask
)

45  
	`kzÆloc
((
sˇâîli°
Ë* 
√¡s
, 
gÂ_mask
);

46 
	}
}

48 
	$sh™n⁄_sg_‰ì
(
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
)

50 
	`k‰ì
(
sgl
);

51 
	}
}

53 
	$sh™n⁄_sg_öô_èbÀ
(
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
)

55 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

56 
	`sg_öô_èbÀ
(
sgl
, 
√¡s
);

58 
	`mem£t
(
sgl
, 0, (
sˇâîli°
Ë* 
√¡s
);

60 
	}
}

62 
	$sh™n⁄_sg_£t_∑ge
(
sh™n⁄_sg_li°_t
 *
sg
, 
sh™n⁄_∑ge
 *
∑ge
,

63 
Àn
, 
off£t
)

65 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

66  
	`sg_£t_∑ge
((
sˇâîli°
 *)
sg
, 
∑ge
, 
Àn
, 
off£t
);

68 
sˇâîli°
 *
sg_löux
 = 
NULL
;

70 
sg_löux
 = (
sˇâîli°
 *)
sg
;

72 
sg_löux
->
∑ge
 =Öage;

73 
sg_löux
->
off£t
 = offset;

74 
sg_löux
->
Àngth
 = 
Àn
;

76 
	}
}

78 *
	$sh™n⁄_sg_vút
(
sh™n⁄_sg_li°_t
 *
sg
)

80 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

81  
	`sg_vút
((
sˇâîli°
 *)
sg
);

83  
	`∑ge_addªss
(((
sˇâîli°
 *)
sg
)->
∑ge
Ë+ ((sˇâîli° *)sg)->
off£t
;

85 
	}
}

87 
sh™n⁄_sg_li°_t
 *
	$sh™n⁄_sg_√xt
(
sh™n⁄_sg_li°_t
 *
sg
)

89 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

90  
	`sg_√xt
((
sˇâîli°
 *)
sg
);

92  (
sˇâîli°
 *)
sg
 + 1;

94 
	}
}

	@shannon_scatter.h

1 #i‚de‡
__SHANNON_SCATTER_H


2 
	#__SHANNON_SCATTER_H


	)

3 
	~"sh™n⁄_kc‹e.h
"

5 
	tsh™n⁄_sg_li°_t
;

7 
sh™n⁄_dma_addr_t
 
sh™n⁄_sg_dma_addªss
(
sh™n⁄_sg_li°_t
 *
sg
);

8 
sh™n⁄_sg_£t_dma_addªss
(
sh™n⁄_sg_li°_t
 *
sg
, 
sh™n⁄_dma_addr_t
 
dma_addr
);

9 
sh™n⁄_∑ge
 *
sh™n⁄_sg_∑ge
(
sh™n⁄_sg_li°_t
 *
sg
);

10 
sh™n⁄_sg_off£t
(
sh™n⁄_sg_li°_t
 *
sg
);

11 
sh™n⁄_sg_Àngth
(
sh™n⁄_sg_li°_t
 *
sg
);

12 
sh™n⁄_sg_m¨k_íd
(
sh™n⁄_sg_li°_t
 *
sg
);

14 
	#sh™n⁄_f‹_óch_sg
(
sgli°
, 
sg
, 
ƒ
, 
__i
) \

15 
__i
 = 0, 
sg
 = (
sgli°
); __ò< (
ƒ
); __i++, sg = 
	`sh™n⁄_sg_√xt
(sg))

	)

18 
sh™n⁄_sg_li°_t
 *
sh™n⁄_sg_Æloc
(
√¡s
, 
sh™n⁄_gÂ_t
 
gÂ_mask
);

19 
sh™n⁄_sg_‰ì
(
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
);

20 
sh™n⁄_sg_öô_èbÀ
(
sh™n⁄_sg_li°_t
 *
sgl
, 
√¡s
);

22 
sh™n⁄_sg_li°_t
 *
sh™n⁄_sg_√xt
(sh™n⁄_sg_li°_à*
sg
);

23 *
sh™n⁄_sg_vút
(
sh™n⁄_sg_li°_t
 *
sg
);

24 
sh™n⁄_sg_£t_∑ge
(
sh™n⁄_sg_li°_t
 *
sg
, 
sh™n⁄_∑ge
 *
∑ge
, 
Àn
, 
off£t
);

	@shannon_sched.c

1 
	~"sh™n⁄_sched.h
"

2 
	~<löux/kî√l.h
>

3 
	~<löux/öãºu±.h
>

4 
	~<löux/sched.h
>

5 
	~<löux/kthªad.h
>

6 
	~<löux/vîsi⁄.h
>

8 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 9, 0)

9 
	~<löux/sched/π.h
>

12 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4, 11, 0)

13 
	~<löux/sched/sig«l.h
>

14 
	~<löux/sched/debug.h
>

15 
	~<u≠i/löux/sched/ty≥s.h
>

18 *
	$sh™n⁄_cuºít
()

20  
cuºít
;

21 
	}
}

23 
	$sh™n⁄_sig«l_≥ndög
(*
p
)

25 
èsk_°ru˘
 *
èsk
 = (èsk_°ru˘ *)
p
;

26  
	`sig«l_≥ndög
(
èsk
);

27 
	}
}

29 
	$sh™n⁄_ö_so·úq
()

31  
	`ö_so·úq
();

32 
	}
}

35 
úqªtu∫_t
 
sh™n⁄_öãºu±_wøµî
(
úq
, *
d©a


36 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 19)

37 , 
±_ªgs
 *
ªgs


41 
sh™n⁄_öãºu±
(
úq
, 
d©a
);

42  
	gIRQ_HANDLED
;

45 
	$sh™n⁄_dißbÀ_úq
(
úq
)

47 
	`dißbÀ_úq
(
úq
);

48 
	}
}

50 
	$sh™n⁄_íabÀ_úq
(
úq
)

52 
	`íabÀ_úq
(
úq
);

53 
	}
}

55 
	$sh™n⁄_ªque°_úq
(
úq
, c⁄° *
dev«me
, *
d©a
)

57  
	`ªque°_úq
(
úq
, 
sh™n⁄_öãºu±_wøµî
, 0, 
dev«me
, 
d©a
);

58 
	}
}

60 
	$sh™n⁄_èskÀt_scheduÀ
(
sh™n⁄_èskÀt_°ru˘
 *
t
)

62 
	`èskÀt_scheduÀ
((
èskÀt_°ru˘
 *)
t
);

63 
	}
}

65 
sh™n⁄_èskÀt_öô
(
sh™n⁄_èskÀt_°ru˘
 *
t
, (*
func
)(), 
d©a
)

67 
	`èskÀt_öô
((
èskÀt_°ru˘
 *)
t
, 
func
, 
d©a
);

68 
	}
}

70 
	$sh™n⁄_‰ì_úq
(
úq
, *
dev_id
)

72 
	`‰ì_úq
(
úq
, 
dev_id
);

73 
	}
}

77 
	$sh™n⁄_wake_up_¥o˚ss
(
sh™n⁄_èsk_°ru˘_t
 *
tsk
)

79  
	`wake_up_¥o˚ss
((
èsk_°ru˘
 *)
tsk
);

80 
	}
}

82 
	$sh™n⁄_scheduÀ
()

84 
	`scheduÀ
();

85 
	}
}

87 sig√d 
__sched
 
	$sh™n⁄_scheduÀ_timeout
(sig√d 
timeout
)

89  
	`scheduÀ_timeout
(
timeout
);

90 
	}
}

92 
	$sh™n⁄_£t_cuºít_°©e
(
°©e
)

94 
	`£t_cuºít_°©e
(
°©e
);

95 
	}
}

97 
	$__sh™n⁄_£t_cuºít_°©e
(
°©e
)

99 
	`__£t_cuºít_°©e
(
°©e
);

100 
	}
}

102 
	$sh™n⁄_c⁄d_ªsched
()

104 
	`c⁄d_ªsched
();

105 
	}
}

107 
	$£t_thªad_n‹mÆ
()

109 
sched_∑øm
 
∑øm
 = { .
sched_¥i‹ôy
 = 0 };

110  
	`sched_£tscheduÀr
(
cuºít
, 
SCHED_NORMAL
, &
∑øm
);

111 
	}
}

113 
	$£t_thªad_π
()

115 
sched_∑øm
 
∑øm
 = { .
sched_¥i‹ôy
 = 
MAX_USER_RT_PRIO
-1 };

116  
	`sched_£tscheduÀr
(
cuºít
, 
SCHED_FIFO
, &
∑øm
);

117 
	}
}

120 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 22)

121 *
	$kva•rötf
(
gÂ_t
 
gÂ
, c⁄° *
fmt
, 
va_li°
 
≠
)

123 
Àn
;

124 *
p
;

125 
va_li°
 
aq
;

127 
	`va_c›y
(
aq
, 
≠
);

128 
Àn
 = 
	`v¢¥ötf
(
NULL
, 0, 
fmt
, 
aq
);

129 
	`va_íd
(
aq
);

131 
p
 = 
	`kmÆloc
(
Àn
+1, 
gÂ
);

132 i‡(!
p
)

133  
NULL
;

135 
	`v¢¥ötf
(
p
, 
Àn
+1, 
fmt
, 
≠
);

137  
p
;

138 
	}
}

142 
sh™n⁄_èsk_°ru˘_t
 * 
sh™n⁄_kthªad_run
((*
thªad‚
)(*
d©a
), *d©a, c⁄° *
«mefmt
, ...)

144 
sh™n⁄_èsk_°ru˘_t
 *
èsk
;

145 
va_li°
 
≠
;

146 *
p
;

148 
	`va_°¨t
(
≠
, 
«mefmt
);

149 
p
 = 
	`kva•rötf
(
GFP_SHANNON
, 
«mefmt
, 
≠
);

150 
	`va_íd
(
≠
);

152 
èsk
 = 
	`kthªad_run
(
thªad‚
, 
d©a
, 
p
);

153 
	`sh™n⁄_k‰ì
(
p
);

155  
èsk
;

156 
	}
}

158 
	$sh™n⁄_kthªad_°›
(
sh™n⁄_èsk_°ru˘_t
 *
k
)

160  
	`kthªad_°›
((
èsk_°ru˘
 *)
k
);

161 
	}
}

163 
	$sh™n⁄_kthªad_should_°›
()

165  
	`kthªad_should_°›
();

166 
	}
}

168 
	$sh™n⁄_£t_node_˝us_Ælowed
(
sh™n⁄_èsk_°ru˘_t
 *
k
, 
node
)

170 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

171 i‡(
node
 !
NUMA_NO_NODE
) {

172 c⁄° 
˝umask
 *˝umask = 
	`˝umask_of_node
(
node
);

174 i‡(!
	`˝umask_em±y
(
˝umask
))

175  
	`£t_˝us_Ælowed_±r
((
èsk_°ru˘
 *)
k
, 
˝umask
);

180 
	}
}

	@shannon_sched.h

1 #i‚de‡
__SHANNON_SCHED_H


2 
	#__SHANNON_SCHED_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

6 
	#SHANNON_IRQ_NONE
 0

	)

7 
	#SHANNON_IRQ_HANDLED
 1

	)

8 
	#SHANNON_IRQ_WAKE_THREAD
 2

	)

10 
	#SHN_TASK_RUNNING
 0

	)

11 
	#SHN_TASK_INTERRUPTIBLE
 1

	)

12 
	#SHN_TASK_UNINTERRUPTIBLE
 2

	)

13 
	#__SHN_TASK_STOPPED
 4

	)

14 
	#__SHN_TASK_TRACED
 8

	)

16 
	#SHN_EXIT_ZOMBIE
 16

	)

17 
	#SHN_EXIT_DEAD
 32

	)

19 
	#SHN_TASK_DEAD
 64

	)

20 
	#SHN_TASK_WAKEKILL
 128

	)

21 
	#SHN_TASK_WAKING
 256

	)

22 
	#SHN_TASK_STATE_MAX
 512

	)

24 
	#SHN_TASK_KILLABLE
 (
SHN_TASK_WAKEKILL
 | 
SHN_TASK_UNINTERRUPTIBLE
)

	)

25 
	#SHN_TASK_STOPPED
 (
SHN_TASK_WAKEKILL
 | 
__SHN_TASK_STOPPED
)

	)

26 
	#SHN_TASK_TRACED
 (
SHN_TASK_WAKEKILL
 | 
__SHN_TASK_TRACED
)

	)

28 
	ssh™n⁄_èskÀt_°ru˘
 {

29 
RESERVE_MEM
(56);

32 
	tsh™n⁄_èsk_°ru˘_t
;

34 *
sh™n⁄_cuºít
();

35 
sh™n⁄_sig«l_≥ndög
(*
p
);

36 
sh™n⁄_ö_so·úq
();

39 
sh™n⁄_öãºu±
(
úq
, *
d©a
);

40 
sh™n⁄_dißbÀ_úq
(
úq
);

41 
sh™n⁄_íabÀ_úq
(
úq
);

42 
sh™n⁄_ªque°_úq
(
úq
, c⁄° *
dev«me
, *
d©a
);

44 
sh™n⁄_èskÀt_scheduÀ
(
sh™n⁄_èskÀt_°ru˘
 *
t
);

45 
sh™n⁄_èskÀt_öô
(
sh™n⁄_èskÀt_°ru˘
 *
t
, (*
func
)(), 
d©a
);

46 
	`sh™n⁄_‰ì_úq
(
úq
, *
dev_id
);

49 
	`sh™n⁄_scheduÀ
();

50 sig√d 
	`sh™n⁄_scheduÀ_timeout
(sig√d 
timeout
);

51 
	`sh™n⁄_wake_up_¥o˚ss
(
sh™n⁄_èsk_°ru˘_t
 *
tsk
);

52 
	`sh™n⁄_£t_cuºít_°©e
(
°©e
);

53 
	`__sh™n⁄_£t_cuºít_°©e
(
°©e
);

54 
	`sh™n⁄_c⁄d_ªsched
();

55 
	`£t_thªad_π
();

56 
	`£t_thªad_n‹mÆ
();

57 
	`sh™n⁄_£t_node_˝us_Ælowed
(
sh™n⁄_èsk_°ru˘_t
 *
k
, 
node
);

60 
sh™n⁄_èsk_°ru˘_t
 * 
	`sh™n⁄_kthªad_run
((*
thªad‚
)(*
d©a
), *d©a, c⁄° *
«mefmt
, ...);

61 
	`sh™n⁄_kthªad_°›
(
sh™n⁄_èsk_°ru˘_t
 *
k
);

62 
	`sh™n⁄_kthªad_should_°›
();

	@shannon_scsi.c

1 
	~<scsi/scsi.h
>

2 
	~<scsi/scsi_cmnd.h
>

3 
	~<scsi/scsi_devi˚.h
>

4 
	~<scsi/scsi_ho°.h
>

5 
	~<scsi/scsi_eh.h
>

6 
	~<löux/pci.h
>

7 
	~<löux/vîsi⁄.h
>

8 
	~<löux/sˇâîli°.h
>

9 
	~<löux/blkdev.h
>

10 
	~<löux/highmem.h
>

11 
	~<löux/moduÀ.h
>

12 
	~"sh™n⁄_p‹t.h
"

14 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24)

16 
	$sh™n⁄_fûl_‰om_dev_buf„r
(*
scsi_cmnd
, *
¨r
, 
¨r_Àn
)

18 
scsi_cmnd
 *
s˝
 = (scsi_cmnd *)scsi_cmnd;

19 
k
, 
ªq_Àn
, 
a˘_Àn
, 
Àn
, 
a˘ive
;

20 * 
kaddr
;

21 * 
kaddr_off
;

22 
sˇâîli°
 * 
sg≤t
;

24 i‡(0 =
s˝
->
ªque°_bufÊí
)

26 i‡(
NULL
 =
s˝
->
ªque°_buf„r
)

27  (
DID_ERROR
 << 16);

28 i‡(! ((
s˝
->
sc_d©a_dúe˘i⁄
 =
DMA_BIDIRECTIONAL
) ||

29 (
s˝
->
sc_d©a_dúe˘i⁄
 =
DMA_FROM_DEVICE
)))

30  (
DID_ERROR
 << 16);

31 i‡(0 =
s˝
->
u£_sg
) {

32 
ªq_Àn
 = 
s˝
->
ªque°_bufÊí
;

33 
a˘_Àn
 = (
ªq_Àn
 < 
¨r_Àn
) ?Ñeq_len :árr_len;

34 
	`mem˝y
(
s˝
->
ªque°_buf„r
, 
¨r
, 
a˘_Àn
);

35 i‡(
s˝
->
ªsid
)

36 
s˝
->
ªsid
 -
a˘_Àn
;

38 
s˝
->
ªsid
 = 
ªq_Àn
 - 
a˘_Àn
;

41 
sg≤t
 = (
sˇâîli°
 *)
s˝
->
ªque°_buf„r
;

42 
a˘ive
 = 1;

43 
k
 = 0, 
ªq_Àn
 = 0, 
a˘_Àn
 = 0; k < 
s˝
->
u£_sg
; ++k, ++
sg≤t
) {

44 i‡(
a˘ive
) {

45 
kaddr
 = (*)

46 
	`km≠_©omic
(
sg≤t
->
∑ge
, 
KM_USER0
);

47 i‡(
NULL
 =
kaddr
)

48  (
DID_ERROR
 << 16);

49 
kaddr_off
 = (*)
kaddr
 + 
sg≤t
->
off£t
;

50 
Àn
 = 
sg≤t
->
Àngth
;

51 i‡((
ªq_Àn
 + 
Àn
Ë> 
¨r_Àn
) {

52 
a˘ive
 = 0;

53 
Àn
 = 
¨r_Àn
 - 
ªq_Àn
;

55 
	`mem˝y
(
kaddr_off
, 
¨r
 + 
ªq_Àn
, 
Àn
);

56 
	`kunm≠_©omic
(
kaddr
, 
KM_USER0
);

57 
a˘_Àn
 +
Àn
;

59 
ªq_Àn
 +
sg≤t
->
Àngth
;

61 i‡(
s˝
->
ªsid
)

62 
s˝
->
ªsid
 -
a˘_Àn
;

64 
s˝
->
ªsid
 = 
ªq_Àn
 - 
a˘_Àn
;

66 
	}
}

68 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 25)

70 
	$sh™n⁄_fûl_‰om_dev_buf„r
(*
scsi_cmnd
, *
¨r
, 
¨r_Àn
)

72 
scsi_cmnd
 *
s˝
 = (scsi_cmnd *)scsi_cmnd;

73 
k
, 
ªq_Àn
, 
a˘_Àn
, 
Àn
, 
a˘ive
;

74 * 
kaddr
;

75 * 
kaddr_off
;

76 
sˇâîli°
 * 
sg
;

78 i‡(0 =
s˝
->
ªque°_bufÊí
)

80 i‡(
NULL
 =
s˝
->
ªque°_buf„r
)

81  (
DID_ERROR
 << 16);

82 i‡(! ((
s˝
->
sc_d©a_dúe˘i⁄
 =
DMA_BIDIRECTIONAL
) ||

83 (
s˝
->
sc_d©a_dúe˘i⁄
 =
DMA_FROM_DEVICE
)))

84  (
DID_ERROR
 << 16);

85 i‡(0 =
s˝
->
u£_sg
) {

86 
ªq_Àn
 = 
s˝
->
ªque°_bufÊí
;

87 
a˘_Àn
 = (
ªq_Àn
 < 
¨r_Àn
) ?Ñeq_len :árr_len;

88 
	`mem˝y
(
s˝
->
ªque°_buf„r
, 
¨r
, 
a˘_Àn
);

89 i‡(
s˝
->
ªsid
)

90 
s˝
->
ªsid
 -
a˘_Àn
;

92 
s˝
->
ªsid
 = 
ªq_Àn
 - 
a˘_Àn
;

95 
a˘ive
 = 1;

96 
ªq_Àn
 = 
a˘_Àn
 = 0;

97 
	`scsi_f‹_óch_sg
(
s˝
, 
sg
, s˝->
u£_sg
, 
k
) {

98 i‡(
a˘ive
) {

99 
kaddr
 = (*)

100 
	`km≠_©omic
(
	`sg_∑ge
(
sg
), 
KM_USER0
);

101 i‡(
NULL
 =
kaddr
)

102  (
DID_ERROR
 << 16);

103 
kaddr_off
 = (*)
kaddr
 + 
sg
->
off£t
;

104 
Àn
 = 
sg
->
Àngth
;

105 i‡((
ªq_Àn
 + 
Àn
Ë> 
¨r_Àn
) {

106 
a˘ive
 = 0;

107 
Àn
 = 
¨r_Àn
 - 
ªq_Àn
;

109 
	`mem˝y
(
kaddr_off
, 
¨r
 + 
ªq_Àn
, 
Àn
);

110 
	`kunm≠_©omic
(
kaddr
, 
KM_USER0
);

111 
a˘_Àn
 +
Àn
;

113 
ªq_Àn
 +
sg
->
Àngth
;

115 i‡(
s˝
->
ªsid
)

116 
s˝
->
ªsid
 -
a˘_Àn
;

118 
s˝
->
ªsid
 = 
ªq_Àn
 - 
a˘_Àn
;

120 
	}
}

122 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 26)

124 
	$sh™n⁄_fûl_‰om_dev_buf„r
(*
scsi_cmnd
, *
¨r
, 
¨r_Àn
)

126 
scsi_cmnd
 *
s˝
 = (scsi_cmnd *)scsi_cmnd;

127 
k
, 
ªq_Àn
, 
a˘_Àn
, 
Àn
, 
a˘ive
;

128 * 
kaddr
;

129 * 
kaddr_off
;

130 
sˇâîli°
 *
sg
;

131 
scsi_d©a_buf„r
 *
sdb
 = 
	`scsi_ö
(
s˝
);

133 i‡(!
sdb
->
Àngth
)

135 i‡(!
sdb
->
èbÀ
.
sgl
)

136  (
DID_ERROR
 << 16);

137 i‡(!(
	`scsi_bidi_cmnd
(
s˝
Ë|| s˝->
sc_d©a_dúe˘i⁄
 =
DMA_FROM_DEVICE
))

138  (
DID_ERROR
 << 16);

139 
a˘ive
 = 1;

140 
ªq_Àn
 = 
a˘_Àn
 = 0;

141 
	`f‹_óch_sg
(
sdb
->
èbÀ
.
sgl
, 
sg
, sdb->èbÀ.
√¡s
, 
k
) {

142 i‡(
a˘ive
) {

143 
kaddr
 = (*)

144 
	`km≠_©omic
(
	`sg_∑ge
(
sg
), 
KM_USER0
);

145 i‡(
NULL
 =
kaddr
)

146  (
DID_ERROR
 << 16);

147 
kaddr_off
 = (*)
kaddr
 + 
sg
->
off£t
;

148 
Àn
 = 
sg
->
Àngth
;

149 i‡((
ªq_Àn
 + 
Àn
Ë> 
¨r_Àn
) {

150 
a˘ive
 = 0;

151 
Àn
 = 
¨r_Àn
 - 
ªq_Àn
;

153 
	`mem˝y
(
kaddr_off
, 
¨r
 + 
ªq_Àn
, 
Àn
);

154 
	`kunm≠_©omic
(
kaddr
, 
KM_USER0
);

155 
a˘_Àn
 +
Àn
;

157 
ªq_Àn
 +
sg
->
Àngth
;

159 i‡(
sdb
->
ªsid
)

160 
sdb
->
ªsid
 -
a˘_Àn
;

162 
sdb
->
ªsid
 = 
ªq_Àn
 - 
a˘_Àn
;

164 
	}
}

168 
	$sh™n⁄_fûl_‰om_dev_buf„r
(*
scsi_cmnd
, *
¨r
, 
¨r_Àn
)

170 
scsi_cmnd
 *
s˝
 = (scsi_cmnd *)scsi_cmnd;

171 
a˘_Àn
;

172 
scsi_d©a_buf„r
 *
sdb
 = 
	`scsi_ö
(
s˝
);

174 i‡(!
sdb
->
Àngth
)

176 i‡(!(
	`scsi_bidi_cmnd
(
s˝
Ë|| s˝->
sc_d©a_dúe˘i⁄
 =
DMA_FROM_DEVICE
))

177  
DID_ERROR
 << 16;

179 
a˘_Àn
 = 
	`sg_c›y_‰om_buf„r
(
sdb
->
èbÀ
.
sgl
, sdb->èbÀ.
√¡s
,

180 
¨r
, 
¨r_Àn
);

181 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 11, 0)

182 
sdb
->
ªsid
 = 
	`scsi_bufÊí
(
s˝
Ë- 
a˘_Àn
;

184 i‡(
sdb
->
ªsid
)

185 
sdb
->
ªsid
 -
a˘_Àn
;

187 
sdb
->
ªsid
 = 
	`scsi_bufÊí
(
s˝
Ë- 
a˘_Àn
;

191 
	}
}

195 
	$sh™n⁄_buûd_£n£_buf„r
(*
sbuff
, 
key
, 
asc
, 
asq
)

197 
	`mem£t
(
sbuff
, 0, 
SHANNON_SCSI_SENSE_LEN
);

198 
	`scsi_buûd_£n£_buf„r
(0, 
sbuff
, 
key
, 
asc
, 
asq
);

199 
	}
}

201 
	$íd_scsi_cmnd
(
sh™n⁄_bio
 *
sbio
, 
sh™n⁄_scsi_cmd_°©us
 
scsi_°©us
, *
£n£_buf„r
)

203 
scsi_cmnd
 *scsi_cmnd = (scsi_cmnd *)
sbio
->scsi_cmnd;

205 i‡((
scsi_°©us
 & 0xffË=
STATUS_CODE_CHECK_CONDITION
) {

206 i‡(
scsi_cmnd
 && 
£n£_buf„r
)

207 
	`mem˝y
(
scsi_cmnd
->
£n£_buf„r
, sí£_buf„r, 
SHANNON_SCSI_SENSE_LEN
);

209 
scsi_cmnd
->
ªsu…
 = 
scsi_°©us
;

210 
scsi_cmnd
->
ho°_s¸ibbÀ
 = 
NULL
;

211 
scsi_cmnd
->
	`scsi_d⁄e
(scsi_cmnd);

212 
	}
}

214 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24)

216 
	#sg_√xt
(
sg
Ë((sgË+ 1)

	)

217 
	#sg_œ°
(
sg
, 
√¡s
Ë(&(sg[“ítsË- 1]))

	)

222 
	#f‹_óch_sg
(
sgli°
, 
sg
, 
ƒ
, 
__i
) \

223 
__i
 = 0, 
sg
 = (
sgli°
); __ò< (
ƒ
); __i++, sg = 
	`sg_√xt
(sg))

	)

225 
	#sg_∑ge
(
sg
Ë((sg)->
∑ge
)

	)

229 
	$sh™n⁄_c⁄vît_scsi_scmd
(
sh™n⁄_bio
 *
sbio
, 
logicb_size
)

231 
scsi_cmnd
 *scsi_cmnd = (scsi_cmnd *)
sbio
->scsi_cmnd;

232 
∑ge
 *page;

233 
sh™n⁄_sg_li°_t
 *
sg
 = 
NULL
;

234 
i
, 
off£t
, 
ªmaöed_size
, 
m≠_size
 = 0, 
und⁄e
 = 0;

235 
•a˚_ö_∑ge
;

236 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

237 
scsi_d©a_buf„r
 *
sdb
 = &
scsi_cmnd
->sdb;

238 
sˇâîli°
 *
sgl
 = 
sdb
->
èbÀ
.sgl, *
sge
;

239 
sbio
->
bio_size
 = 
sdb
->
Àngth
;

241 
sˇâîli°
 *
sgl
 = (sˇâîli° *)
scsi_cmnd
->
ªque°_buf„r
, *
sge
;

242 
sbio
->
bio_size
 = 
scsi_cmnd
->
ªque°_bufÊí
;

245 i‡(
scsi_cmnd
->
sc_d©a_dúe˘i⁄
 =
DMA_FROM_DEVICE
)

246 
sbio
->
dma_dú
 = 
SHANNON_DMA_FROMDEVICE
;

247 i‡(
scsi_cmnd
->
sc_d©a_dúe˘i⁄
 =
DMA_TO_DEVICE
)

248 
sbio
->
dma_dú
 = 
SHANNON_DMA_TODEVICE
;

250 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

251 
sbio
->
£gmíts
 = 
sdb
->
èbÀ
.
√¡s
;

253 
sbio
->
£gmíts
 = 
scsi_cmnd
->
u£_sg
;

254 
	`BUG_ON
(0 =
scsi_cmnd
->
u£_sg
);

256 
sbio
->
sg_cou¡
 = 2 * ((sbio->
bio_size
 + 
logicb_size
 - 1)/logicb_sizeË+ sbio->
£gmíts
;

257 
sbio
->
sg
 = 
	`sh™n⁄_sg_Æloc
(sbio->
sg_cou¡
, 
GFP_ATOMIC
);

258 i‡(
sbio
->
sg
 =
NULL
) {

259 
	`sh™n⁄_îr
("alloc sg failed.\n");

260  -
ENOMEM
;

262 
	`sh™n⁄_sg_öô_èbÀ
(
sbio
->
sg
, sbio->
sg_cou¡
);

264 
sbio
->
fú°_size
 = 
logicb_size
 - ((sbio->
°¨t_£˘‹
 << 9) & (logicb_size - 1));

265 
sbio
->
fú°_size
 = sbio->fú°_sizê% 
logicb_size
;

266 
sbio
->
fú°_size
 = 
	`mö
(sbio->
bio_size
, sbio->first_size);

268 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

269 
	`debugs1
("sdb->length=%d, bio_size=%d, start_sector=0x%lx, segments=%d, sg_count=%d, first_size=%d.\n",

270 
sdb
->
Àngth
, 
sbio
->
bio_size
, sbio->
°¨t_£˘‹
, sbio->
£gmíts
, sbio->
sg_cou¡
, sbio->
fú°_size
);

272 
	`debugs1
("scsi_cmnd->request_bufflen=%d, bio_size=%d, start_sector=0x%lx, segments=%d, sg_count=%d, first_size=%d.\n",

273 
scsi_cmnd
->
ªque°_bufÊí
, 
sbio
->
bio_size
, sbio->
°¨t_£˘‹
, sbio->
£gmíts
, sbio->
sg_cou¡
, sbio->
fú°_size
);

276 
ªmaöed_size
 = 
sbio
->
fú°_size
 ? sbio->fú°_sizê: 
logicb_size
;

278 
sbio
->
has_hﬁe
 = 0;

279 
sbio
->
u£d_sg_cou¡
 = 0;

280 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

281 
	`f‹_óch_sg
(
sgl
, 
sge
, 
sdb
->
èbÀ
.
√¡s
, 
i
) {

282 
	`debugs1
("i=%d,Çíts=%d, off£t=%d,Üígth=%d.\n", 
i
, 
sdb
->
èbÀ
.
√¡s
, 
sge
->
off£t
, sge->
Àngth
);

284 
	`f‹_óch_sg
(
sgl
, 
sge
, 
scsi_cmnd
->
u£_sg
, 
i
) {

285 
	`debugs1
("i=%d,Çíts=%d, off£t=%d,Üígth=%d.\n", 
i
, 
scsi_cmnd
->
u£_sg
, 
sge
->
off£t
, sge->
Àngth
);

288 i‡((
i
 !0Ë&& (
sge
->
off£t
 != 0))

289 
sbio
->
has_hﬁe
 = 1;

291 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

292 i‡((
i
 !
sdb
->
èbÀ
.
√¡s
-1Ë&& ((
sge
->
off£t
 + sge->
Àngth
)&0xfff))

294 i‡((
i
 !
scsi_cmnd
->
u£_sg
-1Ë&& ((
sge
->
off£t
 + sge->
Àngth
)&0xfff))

296 
sbio
->
has_hﬁe
 = 1;

298 
off£t
 = 0;

299 
off£t
 < 
sge
->
Àngth
 && 
sbio
->
u£d_sg_cou¡
 < sbio->
sg_cou¡
) {

300 
•a˚_ö_∑ge
 = 
PAGE_SIZE
 - ((
sge
->
off£t
 + offset) % PAGE_SIZE);

301 i‡(
•a˚_ö_∑ge
 < 
ªmaöed_size
) {

302 i‡((
sge
->
Àngth
 - 
off£t
Ë< 
•a˚_ö_∑ge
) {

303 
m≠_size
 = 
sge
->
Àngth
 - 
off£t
;

304 
und⁄e
 = 1;

306 
m≠_size
 = 
•a˚_ö_∑ge
;

307 
und⁄e
 = 1;

310 i‡((
sge
->
Àngth
 - 
off£t
Ë< 
ªmaöed_size
) {

311 
m≠_size
 = 
sge
->
Àngth
 - 
off£t
;

312 
und⁄e
 = 1;

314 
m≠_size
 = 
ªmaöed_size
;

315 
und⁄e
 = 0;

318 
ªmaöed_size
 -
m≠_size
;

319 i‡(
ªmaöed_size
 == 0)

320 
ªmaöed_size
 = 
logicb_size
;

321 
sg
 = sg ? 
	`sh™n⁄_sg_√xt
(sgË: 
sbio
->sg;

322 
	`debugs1
("off£t=%d, m≠_size=%d.\n", 
off£t
, 
m≠_size
);

323 
∑ge
 = 
	`sg_∑ge
(
sge
);

324 
	`sh™n⁄_sg_£t_∑ge
(
sg
, 
∑ge
 + (
sge
->
off£t
 + off£t)/
PAGE_SIZE
, 
m≠_size
, (sge->offset + offset) % PAGE_SIZE);

325 
sbio
->
u£d_sg_cou¡
++;

326 
off£t
 +
m≠_size
;

328 
	`BUG_ON
(
off£t
 < 
sge
->
Àngth
);

331 
sg
 = 
sbio
->sg;

332 
i
 = 0; i < 
sbio
->
sg_cou¡
; i++) {

333 
	`sh™n⁄_öfo
("i=%d, sg=0x%lx, sh™n⁄_sg_∑ge(sg)=0x%lx.\n", 
i
, 
sg
, 
	`sh™n⁄_sg_∑ge
(sg));

334 
sg
 = 
	`sh™n⁄_sg_√xt
(sg);

339 
	}
}

341 
sh™n⁄_ª˚ive_scsi_cmd
(
sh™n⁄_bio
 *
sbio
, *
£n£_buf„r
);

342 
sh™n⁄_scsi_queuecomm™d_lck
(
scsi_cmnd
 *scsi_cmnd, (*
d⁄e_‚
)(scsi_cmnd *))

344 
Scsi_Ho°
 *
sho°
 = 
scsi_cmnd
->
devi˚
->
ho°
;

345 
scsi_devi˚
 *
sdevi˚
 = 
scsi_cmnd
->
devi˚
;

346 
scsi_èrgë
 *
°¨gë
 = 
	`scsi_èrgë
(
sdevi˚
);

348 
sh™n⁄_bio
 *
sbio
;

349 
£n£_buf„r
[
SHANNON_SCSI_SENSE_LEN
];

350 
ªt
;

352 
	`debugs1
("host=%d, channel=%d,Åarget=%d,Üun=%d, cmd=0x%x.\n",

353 
sho°
->
this_id
, 
°¨gë
->
ch™√l
, sèrgë->
id
, 
sdevi˚
->
lun
, *
scsi_cmnd
->
cmnd
);

354 
scsi_cmnd
->
scsi_d⁄e
 = 
d⁄e_‚
;

355 
sbio
 = 
	`Æloc_sbio
(
GFP_NOWAIT
);

356 
sbio
->
ho°d©a
 = (
sh™n⁄_scsi_¥iv©e
 *)
sho°
->hostdata;

357 
sbio
->
scsi_cmnd
 = scsi_cmnd;

358 
sbio
->
cmd
 = 
scsi_cmnd
->
cmnd
;

360 
scsi_cmnd
->
ho°_s¸ibbÀ
 = (*)
sbio
;

362 i‡(
°¨gë
->
id
 != 0) {

363 
	`debugs1
("èrgë i†ab£¡!Å¨gë=%d, cmd=0x%x.\n", 
°¨gë
->
id
, *
sbio
->
cmd
);

364 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_LOGICAL_UNIT_NOT_READY
, 0);

365 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

366 
	`‰ì_sbio
(
sbio
);

370 
ªt
 = 
	`sh™n⁄_ª˚ive_scsi_cmd
(
sbio
, 
£n£_buf„r
);

371  
ªt
;

372 
	}
}

374 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 37)

375 
	$DEF_SCSI_QCMD
(
sh™n⁄_scsi_queuecomm™d
)

378 c⁄° *
	$sh™n⁄_scsi_öfo
(
Scsi_Ho°
 *
ho°
)

381 
	}
}

383 
	$sh™n⁄_scsi_bio•¨am
(
scsi_devi˚
 *
sdev
, 
block_devi˚
 *
bdev
, 
£˘‹_t
 
ˇ∑côy
, 
geom
[])

385 
hóds
, 
£˘‹s
, 
cylödîs
;

387 
hóds
 = 64;

388 
£˘‹s
 = 32;

389 
cylödîs
 = ()
ˇ∑côy
 / (
hóds
 * 
£˘‹s
);

390 i‡(
cylödîs
 > 1024) {

391 
hóds
 = 255;

392 
£˘‹s
 = 63;

393 
cylödîs
 = ()
ˇ∑côy
 / (
hóds
 * 
£˘‹s
);

395 
geom
[0] = 
hóds
;

396 
geom
[1] = 
£˘‹s
;

397 
geom
[2] = 
cylödîs
;

400 
	}
}

402 
	$sh™n⁄_scsi_¶ave_c⁄figuª
(
scsi_devi˚
 *
sdp
)

404 
	`sh™n⁄_öfo
("¶ave_c⁄figuª <%u %u %u %u>\n", 
sdp
->
ho°
->
ho°_no
, sdp->
ch™√l
, sdp->
id
, sdp->
lun
);

405 i‡(
sdp
->
ho°
->
max_cmd_Àn
 != 32)

406 
sdp
->
ho°
->
max_cmd_Àn
 = 32;

407 i‡(
sdp
->
ho°
->
cmd_≥r_lun
)

408 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 19, 0)

409 
	`scsi_ch™ge_queue_dïth
(
sdp
, sdp->
ho°
->
cmd_≥r_lun
);

411 
	`scsi_adju°_queue_dïth
(
sdp
, 0, sdp->
ho°
->
cmd_≥r_lun
);

413 
	`blk_queue_max_£gmít_size
(
sdp
->
ªque°_queue
, 512 * 1024);

415 
	}
}

418 
scsi_ho°_ãm∂©e
 
	gsh™n⁄_scsi_ãm∂©e
 = {

419 .
moduÀ
 = 
THIS_MODULE
,

420 .
	g«me
 = "Shannon Direct IO",

421 .
	göfo
 = 
sh™n⁄_scsi_öfo
,

422 .
	g¶ave_c⁄figuª
 = 
sh™n⁄_scsi_¶ave_c⁄figuª
,

423 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 37)

424 .
	gqueuecomm™d
 = 
sh™n⁄_scsi_queuecomm™d_lck
,

426 .
	gqueuecomm™d
 = 
sh™n⁄_scsi_queuecomm™d
,

428 .
	gbios_∑øm
 = 
sh™n⁄_scsi_bio•¨am
,

429 .
	gˇn_queue
 = 0xfffff,

430 .
	gthis_id
 = -1,

431 .
	gsg_èbÀsize
 = 
SG_ALL
,

432 .
	gcmd_≥r_lun
 = 0x3fff,

433 .
	gmax_£˘‹s
 = 0xffff,

434 .
	gu£_˛u°îög
 = 
DISABLE_CLUSTERING
,

437 
sh™n⁄_ªmove
(*
d©a
, 
sh™n⁄_pci_dev_t
 *
pdev
);

438 
sh™n⁄_¥obe
(
sh™n⁄_pci_dev_t
 *
pdev
, c⁄° 
sh™n⁄_pci_devi˚_id_t
 *
id
, 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
);

439 
	$sh™n⁄_scsi_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
id
)

441 
Scsi_Ho°
 *
sho°
;

442 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
;

444 
sho°
 = 
	`scsi_ho°_Æloc
(&
sh™n⁄_scsi_ãm∂©e
, (
sh™n⁄_scsi_¥iv©e
));

445 
ho°d©a
 = (
sh™n⁄_scsi_¥iv©e
 *)
sho°
->hostdata;

446 
	`sh™n⁄_mem£t
(
ho°d©a
, 0, (
sh™n⁄_scsi_¥iv©e
));

447 
ho°d©a
->
scsi_ho°
 = 
sho°
;

448 
ho°d©a
->
scsi_ho°_no
 = 
sho°
->
ho°_no
;

449 
	`sh™n⁄_pci_£t_drvd©a
(
pdev
, 
ho°d©a
);

450 
	`sh™n⁄_•ö_lock_öô
(&
ho°d©a
->
°©s_lock
);

451 
ho°d©a
->
£˘‹s
[0] = hostdata->sectors[1] = 0;

452 
ho°d©a
->
ios
[0] = hostdata->ios[1] = 0;

453 
ho°d©a
->
ticks
[0] = hostdata->ticks[1] = 0;

454 
ho°d©a
->
ö_Êight
[0] = hostdata->in_flight[1] = 0;

455  
	`sh™n⁄_¥obe
(
pdev
, 
id
, 
ho°d©a
);

456 
	}
}

458 
	$sh™n⁄_scsi_ªmove
(
pci_dev
 *
pdev
)

460 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

461 
	`sh™n⁄_ªmove
(
ho°d©a
->
sdev
, 
pdev
);

462 
	`scsi_ho°_put
(
ho°d©a
->
scsi_ho°
);

463 
	}
}

465 
	$sh™n⁄_©èch_scsi
(
sh™n⁄_scsi_¥iv©e
 *
¥iv©e
, *
d©a
)

467 
pci_dev
 *
pdev
 = (pci_dev *)
d©a
;

468 
	`debugs1
("enter.\n");

469 i‡(
	`scsi_add_ho°
(
¥iv©e
->
scsi_ho°
, &
pdev
->
dev
))

471 
	`scsi_sˇn_ho°
(
¥iv©e
->
scsi_ho°
);

472 
	`debugs1
("exit.\n");

474 
	}
}

476 
	$sh™n⁄_dëach_scsi
(
sh™n⁄_scsi_¥iv©e
 *
¥iv©e
)

478 
	`debugs1
("enter.\n");

479 
	`scsi_ªmove_ho°
(
¥iv©e
->
scsi_ho°
);

480 
	`debugs1
("exit.\n");

481 
	}
}

	@shannon_scsi.h

1 #i‚de‡
__SHANNON_SCSI_H


2 
	#__SHANNON_SCSI_H


	)

4 
	~"sh™n⁄_w‹kqueue.h
"

6 
	#SHANNON_SCSI_SENSE_LEN
 32

	)

12 
	#SHN_DID_OK
 0x00

	)

13 
	#SHN_DID_NO_CONNECT
 0x01

	)

14 
	#SHN_DID_BUS_BUSY
 0x02

	)

15 
	#SHN_DID_TIME_OUT
 0x03

	)

16 
	#SHN_DID_BAD_TARGET
 0x04

	)

17 
	#SHN_DID_ABORT
 0x05

	)

18 
	#SHN_DID_PARITY
 0x06

	)

19 
	#SHN_DID_ERROR
 0x07

	)

20 
	#SHN_DID_RESET
 0x08

	)

21 
	#SHN_DID_BAD_INTR
 0x09

	)

22 
	#SHN_DID_PASSTHROUGH
 0x0®

	)

23 
	#SHN_DID_SOFT_ERROR
 0x0b

	)

24 
	#SHN_DID_IMM_RETRY
 0x0¯

	)

25 
	#SHN_DID_REQUEUE
 0x0d

	)

27 
	#SHN_DID_TRANSPORT_DISRUPTED
 0x0ê

	)

31 
	#SHN_DID_TRANSPORT_FAILFAST
 0x0‡

	)

32 
	#SHN_DID_TARGET_FAILURE
 0x10

	)

34 
	#SHN_DID_NEXUS_FAILURE
 0x11

	)

36 
	#SHN_DRIVER_OK
 0x00

	)

42 
	#SHN_DRIVER_BUSY
 0x01

	)

43 
	#SHN_DRIVER_SOFT
 0x02

	)

44 
	#SHN_DRIVER_MEDIA
 0x03

	)

45 
	#SHN_DRIVER_ERROR
 0x04

	)

47 
	#SHN_DRIVER_INVALID
 0x05

	)

48 
	#SHN_DRIVER_TIMEOUT
 0x06

	)

49 
	#SHN_DRIVER_HARD
 0x07

	)

50 
	#SHN_DRIVER_SENSE
 0x08

	)

56 
	#SENSE_KEY_NO_SENSE
 0x00

	)

57 
	#SENSE_KEY_RECOVERED_ERROR
 0x01

	)

58 
	#SENSE_KEY_NOT_READY
 0x02

	)

59 
	#SENSE_KEY_MEDIUM_ERROR
 0x03

	)

60 
	#SENSE_KEY_HARDWARE_ERROR
 0x04

	)

61 
	#SENSE_KEY_ILLEGAL_REQUEST
 0x05

	)

62 
	#SENSE_KEY_UNIT_ATTENTION
 0x06

	)

63 
	#SENSE_KEY_DATA_PROTECT
 0x07

	)

64 
	#SENSE_KEY_BLANK_CHECK
 0x08

	)

65 
	#SENSE_KEY_COPY_ABORTED
 0x0a

	)

66 
	#SENSE_KEY_ABORTED_COMMAND
 0x0b

	)

67 
	#SENSE_KEY_VOLUME_OVERFLOW
 0x0d

	)

68 
	#SENSE_KEY_MISCOMPARE
 0x0e

	)

71 
	#ASC_NO_ADDITIONAL_SENSE
 0x00

	)

72 
	#ASC_PERIPHERAL_DEV_WRITE_FAULT
 0x03

	)

73 
	#ASC_LOGICAL_UNIT_NOT_READY
 0x04

	)

74 
	#ASC_WARNING
 0x0B

	)

75 
	#ASC_LOG_BLOCK_GUARD_CHECK_FAILED
 0x10

	)

76 
	#ASC_LOG_BLOCK_APPTAG_CHECK_FAILED
 0x10

	)

77 
	#ASC_LOG_BLOCK_REFTAG_CHECK_FAILED
 0x10

	)

78 
	#ASC_UNRECOVERED_READ_ERR
 0x11

	)

79 
	#ASC_PARAMETER_LIST_LENGTH_ERR
 0x1a

	)

80 
	#ASC_MISCOMPARE_DURING_VERIFY
 0x1D

	)

81 
	#ASC_INVALID_OPCODE
 0x20

	)

82 
	#ASC_ADDR_OUT_OF_RANGE
 0x21

	)

83 
	#ASC_INVALID_COMMAND_OPCODE
 0x20

	)

84 
	#ASC_INVALID_FIELD_IN_CDB
 0x24

	)

85 
	#ASC_INVALID_LUN
 0x25

	)

86 
	#ASC_INVALID_FIELD_IN_PARAM_LIST
 0x26

	)

87 
	#ASC_POWERON_RESET
 0x29

	)

88 
	#ASC_FORMAT_COMMAND_FAILED
 0x31

	)

89 
	#ASC_SAVING_PARAMS_UNSUP
 0x39

	)

90 
	#ASC_INTERNAL_TARGET_FAILURE
 0x44

	)

91 
	#ASC_TRANSPORT_PROBLEM
 0x4b

	)

92 
	#ASC_THRESHOLD_EXCEEDED
 0x5d

	)

93 
	#ASC_LOW_POWER_COND_ON
 0x5e

	)

96 
	#ASCQ_CAUSE_NOT_REPORTABLE
 0x00

	)

97 
	#ASCQ_FORMAT_COMMAND_FAILED
 0x01

	)

98 
	#ASCQ_LOG_BLOCK_GUARD_CHECK_FAILED
 0x01

	)

99 
	#ASCQ_LOG_BLOCK_APPTAG_CHECK_FAILED
 0x02

	)

100 
	#ASCQ_LOG_BLOCK_REFTAG_CHECK_FAILED
 0x03

	)

101 
	#ASCQ_ACK_NAK_TO
 0x03

	)

102 
	#ASCQ_FORMAT_IN_PROGRESS
 0x04

	)

103 
	#ASCQ_POWER_LOSS_EXPECTED
 0x08

	)

104 
	#ASCQ_INVALID_LUN_ID
 0x09

	)

107 
	esh™n⁄_scsi_cmd_°©us


109 
	mSTATUS_CODE_GOOD
 = 0x00,

110 
	mSTATUS_CODE_CHECK_CONDITION
 = 0x02,

111 
	mSTATUS_CODE_CONDITION_MET
 = 0x04,

112 
	mSTATUS_CODE_BUSY
 = 0x08,

113 
	mSTATUS_CODE_RESERVATION_CONFLICT
 = 0x18,

114 
	mSTATUS_CODE_TASK_SET_FULL
 = 0x28,

115 
	mSTATUS_CODE_ACA_ACTIVE
 = 0x30,

116 
	mSTATUS_CODE_TASK_ABORTED
 = 0x40,

119 
	#CHECK_CONDITION_STATUS
 ((
SHN_DRIVER_SENSE
 << 24Ë| 
STATUS_CODE_CHECK_CONDITION
)

	)

121 
	ssh™n⁄_scsi_¥iv©e
 {

122 *
	mscsi_ho°
;

123 *
	msdev
;

125 
sh™n⁄_•ölock_t
 
	m°©s_lock
;

126 
	m£˘‹s
[2];

127 
	mios
[2];

128 
	mticks
[2];

129 
	mö_Êight
[2];

131 
	mscsi_ho°_no
;

134 
sh™n⁄_fûl_‰om_dev_buf„r
(*
scsi_cmnd
, *
¨r
, 
¨r_Àn
);

135 
sh™n⁄_buûd_£n£_buf„r
(*
sbuff
, 
key
, 
asc
, 
asq
);

136 
sh™n⁄_©èch_scsi
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, *
d©a
);

137 
sh™n⁄_dëach_scsi
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
);

138 
sh™n⁄_scsi_disk_ö_Êight
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
);

139 
sh™n⁄_scsi_£˘‹s
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
);

140 
sh™n⁄_scsi_ios
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
);

141 
sh™n⁄_scsi_m£cs
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
);

	@shannon_scsi_cmd.c

1 
	~"sh™n⁄.h
"

3 
ölöe
 
	$scsi_°©_£˘‹s_add
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
, 
£˘‹s
)

5 
ho°d©a
->
£˘‹s
[
wrôe
] += sectors;

6 
	}
}

8 
ölöe
 
	$scsi_°©_ios_öc
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

10 
ho°d©a
->
ios
[
wrôe
] += 1;

11 
	}
}

13 
ölöe
 
	$scsi_°©_ticks_add
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
, 
ticks
)

15 
ho°d©a
->
ticks
[
wrôe
] +=Åicks;

16 
	}
}

18 
ölöe
 
	$scsi_°©_ö_Êight_öc
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

20 
ho°d©a
->
ö_Êight
[
wrôe
] += 1;

21 
	}
}

23 
ölöe
 
	$scsi_°©_ö_Êight_dec
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

25 
ho°d©a
->
ö_Êight
[
wrôe
] -= 1;

26 
	}
}

28 
	$sh™n⁄_scsi_°¨t_io_ac˘
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
sh™n⁄_bio
 *
sbio
)

30 
wrôe
 = (
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)?1:0;

32 
	`sh™n⁄_•ö_lock_bh
(&
ho°d©a
->
°©s_lock
);

33 
	`scsi_°©_£˘‹s_add
(
ho°d©a
, 
wrôe
, (
sbio
->
bio_size
 >> 9));

34 
	`scsi_°©_ios_öc
(
ho°d©a
, 
wrôe
);

35 
	`scsi_°©_ö_Êight_öc
(
ho°d©a
, 
wrôe
);

36 
	`sh™n⁄_•ö_u∆ock_bh
(&
ho°d©a
->
°©s_lock
);

37 
	}
}

39 
	$sh™n⁄_scsi_íd_io_ac˘
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
sh™n⁄_bio
 *
sbio
, 
duøti⁄
)

41 
wrôe
 = (
sbio
->
dma_dú
 =
SHANNON_DMA_TODEVICE
)?1:0;

43 
	`sh™n⁄_•ö_lock_bh
(&
ho°d©a
->
°©s_lock
);

44 
	`scsi_°©_ticks_add
(
ho°d©a
, 
wrôe
, 
duøti⁄
);

45 
	`scsi_°©_ö_Êight_dec
(
ho°d©a
, 
wrôe
);

46 
	`sh™n⁄_•ö_u∆ock_bh
(&
ho°d©a
->
°©s_lock
);

47 
	}
}

49 
	$sh™n⁄_scsi_disk_ö_Êight
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
)

51  (
ho°d©a
->
ö_Êight
[0] + hostdata->in_flight[1]);

52 
	}
}

54 
	$sh™n⁄_scsi_£˘‹s
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

56  
ho°d©a
->
£˘‹s
[
wrôe
];

57 
	}
}

59 
	$sh™n⁄_scsi_ios
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

61  
ho°d©a
->
ios
[
wrôe
];

62 
	}
}

64 
	$sh™n⁄_scsi_m£cs
(
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
, 
wrôe
)

66  
	`sh™n⁄_jiffõs_to_m£cs
(
ho°d©a
->
ticks
[
wrôe
]);

67 
	}
}

70 
	#TEST_UNIT_READY
 0x00

	)

71 
	#REQUEST_SENSE
 0x03

	)

72 
	#READ_6
 0x08

	)

73 
	#WRITE_6
 0x0a

	)

74 
	#SEEK_6
 0x0b

	)

75 
	#INQUIRY
 0x12

	)

76 
	#RECOVER_BUFFERED_DATA
 0x14

	)

77 
	#MODE_SELECT
 0x15

	)

78 
	#MODE_SENSE
 0x1a

	)

79 
	#ALLOW_MEDIUM_REMOVAL
 0x1e

	)

80 
	#READ_CAPACITY
 0x25

	)

81 
	#READ_10
 0x28

	)

82 
	#WRITE_10
 0x2a

	)

83 
	#SEEK_10
 0x2b

	)

84 
	#SYNCHRONIZE_CACHE
 0x35

	)

85 
	#WRITE_SAME
 0x41

	)

86 
	#XDWRITEREAD_10
 0x53

	)

87 
	#MODE_SELECT_10
 0x55

	)

88 
	#MODE_SENSE_10
 0x5a

	)

89 
	#VARIABLE_LENGTH_CMD
 0x7f

	)

90 
	#REPORT_LUNS
 0xa0

	)

91 
	#READ_12
 0xa8

	)

92 
	#WRITE_12
 0xØ

	)

93 
	#READ_16
 0x88

	)

94 
	#COMPARE_AND_WRITE
 0x89

	)

95 
	#WRITE_16
 0x8a

	)

96 
	#WRITE_SAME_16
 0x93

	)

97 
	#SERVICE_ACTION_IN
 0x9e

	)

99 
	#SAI_READ_CAPACITY_16
 0x10

	)

100 
	#SAI_GET_LBA_STATUS
 0x12

	)

103 
	#REPORT_LUNS_CDB_ALLOC_LENGTH_OFFSET
 6

	)

104 
	#REPORT_LUNS_SR_OFFSET
 2

	)

105 
	#READ_CAP_16_CDB_ALLOC_LENGTH_OFFSET
 10

	)

106 
	#REQUEST_SENSE_CDB_ALLOC_LENGTH_OFFSET
 4

	)

107 
	#REQUEST_SENSE_DESC_OFFSET
 1

	)

108 
	#REQUEST_SENSE_DESC_MASK
 0x01

	)

109 
	#DESCRIPTOR_FORMAT_SENSE_DATA_TYPE
 1

	)

113 
	#GET_OPCODE
(
cdb
Ëcdb[0]

	)

115 
	#GET_U8_FROM_CDB
(
cdb
, 
ödex
Ë(cdb[ödex] << 0)

	)

117 
	#GET_U16_FROM_CDB
(
cdb
, 
ödex
Ë((cdb[ödex] << 8Ë| (cdb[ödex + 1] << 0))

	)

119 
	#GET_U24_FROM_CDB
(
cdb
, 
ödex
) ((cdb[index] << 16) | \

120 (
cdb
[
ödex
 + 1] << 8) | \

121 (
cdb
[
ödex
 + 2] << 0))

	)

123 
	#GET_U32_FROM_CDB
(
cdb
, 
ödex
) ((cdb[index] << 24) | \

124 (
cdb
[
ödex
 + 1] << 16) | \

125 (
cdb
[
ödex
 + 2] << 8) | \

126 (
cdb
[
ödex
 + 3] << 0))

	)

128 
	#GET_U64_FROM_CDB
(
cdb
, 
ödex
Ë((((
u64
)cdb[index]) << 56) | \

129 (((
u64
)
cdb
[
ödex
 + 1]) << 48) | \

130 (((
u64
)
cdb
[
ödex
 + 2]) << 40) | \

131 (((
u64
)
cdb
[
ödex
 + 3]) << 32) | \

132 (((
u64
)
cdb
[
ödex
 + 4]) << 24) | \

133 (((
u64
)
cdb
[
ödex
 + 5]) << 16) | \

134 (((
u64
)
cdb
[
ödex
 + 6]) << 8) | \

135 (((
u64
)
cdb
[
ödex
 + 7]Ë<< 0))

	)

139 
	#GET_REPORT_LUNS_ALLOC_LENGTH
(
cdb
) \

140 (
	`GET_U32_FROM_CDB
(
cdb
, 
REPORT_LUNS_CDB_ALLOC_LENGTH_OFFSET
))

	)

143 
	#GET_READ_CAP_16_ALLOC_LENGTH
(
cdb
) \

144 (
	`GET_U32_FROM_CDB
(
cdb
, 
READ_CAP_16_CDB_ALLOC_LENGTH_OFFSET
))

	)

146 
	#IS_READ_CAP_16
(
cdb
) \

147 ((
cdb
[0] =
SERVICE_ACTION_IN
 && cdb[1] =
SAI_READ_CAPACITY_16
Ë? 1 : 0)

	)

150 
	#GET_REQUEST_SENSE_ALLOC_LENGTH
(
cdb
) \

151 (
	`GET_U8_FROM_CDB
(
cdb
, 
REQUEST_SENSE_CDB_ALLOC_LENGTH_OFFSET
))

	)

155 
	#INQUIRY_EVPD_BYTE_OFFSET
 1

	)

156 
	#INQUIRY_PAGE_CODE_BYTE_OFFSET
 2

	)

157 
	#INQUIRY_EVPD_BIT_MASK
 1

	)

158 
	#INQUIRY_CDB_ALLOCATION_LENGTH_OFFSET
 3

	)

161 
	#VPD_SUPPORTED_PAGES
 0x00

	)

162 
	#VPD_SERIAL_NUMBER
 0x80

	)

163 
	#VPD_DEVICE_IDENTIFIERS
 0x83

	)

164 
	#VPD_EXTENDED_INQUIRY
 0x86

	)

165 
	#VPD_BLOCK_LIMITS
 0xB0

	)

166 
	#VPD_BLOCK_DEV_CHARACTERISTICS
 0xB1

	)

168 
	#GET_INQ_EVPD_BIT
(
cdb
) \

169 ((
	`GET_U8_FROM_CDB
(
cdb
, 
INQUIRY_EVPD_BYTE_OFFSET
) & \

170 
INQUIRY_EVPD_BIT_MASK
Ë? 1 : 0)

	)

172 
	#GET_INQ_PAGE_CODE
(
cdb
) \

173 (
	`GET_U8_FROM_CDB
(
cdb
, 
INQUIRY_PAGE_CODE_BYTE_OFFSET
))

	)

175 
	#GET_INQ_ALLOC_LENGTH
(
cdb
) \

176 (
	`GET_U16_FROM_CDB
(
cdb
, 
INQUIRY_CDB_ALLOCATION_LENGTH_OFFSET
))

	)

178 
	#INQ_STANDARD_INQUIRY_PAGE
 0x00

	)

179 
	#INQ_SUPPORTED_VPD_PAGES_PAGE
 0x00

	)

180 
	#INQ_UNIT_SERIAL_NUMBER_PAGE
 0x80

	)

181 
	#INQ_DEVICE_IDENTIFICATION_PAGE
 0x83

	)

182 
	#INQ_EXTENDED_INQUIRY_DATA_PAGE
 0x86

	)

183 
	#INQ_BLOCK_LIMITS_PAGE
 0xB0

	)

184 
	#INQ_BDEV_CHARACTERISTICS_PAGE
 0xB1

	)

185 
	#INQ_SERIAL_NUMBER_LENGTH
 32

	)

186 
	#INQ_NUM_SUPPORTED_VPD_PAGES
 6

	)

187 
	#VERSION_SPC_4
 0x06

	)

188 
	#STANDARD_INQUIRY_LENGTH
 36

	)

189 
	#ADDITIONAL_STD_INQ_LENGTH
 31

	)

190 
	#EXTENDED_INQUIRY_DATA_PAGE_LENGTH
 0x3C

	)

192 
	$sh™n⁄_check_ªadöess
(
sh™n⁄_bio
 *
sbio
, *
£n£_buf„r
)

194 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
ho°d©a
->sdev;

196 i‡(
	`u∆ikñy
(
sdev
->
sdisk
.
exô
)) {

197 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_NOT_READY
, 
ASC_LOGICAL_UNIT_NOT_READY
, 0);

198 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

202 i‡(
	`u∆ikñy
(
sdev
->
ho°_ac˚ss_blocked
)) {

203 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ABORTED_COMMAND
, 
ASC_NO_ADDITIONAL_SENSE
, 0);

204 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

208 i‡(
	`u∆ikñy
(
sdev
->
big_lock
))

209 
	`sh™n⁄_waô_evít_öãºu±ibÀ
(
sdev
->
big_lock_evít
, sdev->
big_lock
 == 0);

212 
	}
}

214 c⁄° *
	göq_víd‹_id
 = "Shannon";

215 c⁄° *
	göq_¥odu˘_id
 = "Direct-IO";

216 c⁄° *
	göq_¥odu˘_ªv
 = "0004";

217 
	$sh™n⁄_å™s_°™d¨d_öquúy_∑ge
(
sh™n⁄_bio
 *
sbio
,

218 
u8
 *
öq_ª•⁄£
, 
Æloc_Àn
)

221 
sh™n⁄_dev
 *
sdev
;

222 
ªt
;

224 
	`debugs1
("sbio=0x%lx.\n", 
sbio
);

225 
	`debugs1
("ho°d©a=0x%lx.\n", 
sbio
->
ho°d©a
);

226 
	`debugs1
("sdev=0x%lx.\n", 
sbio
->
ho°d©a
->
sdev
);

227 
sdev
 = (
sh™n⁄_dev
 *)
sbio
->
ho°d©a
->sdev;

228 
öq_ª•⁄£
[0] = 0;

230 
öq_ª•⁄£
[1] = 0;

231 
öq_ª•⁄£
[2] = 
VERSION_SPC_4
;

232 
öq_ª•⁄£
[3] = 2;

233 
öq_ª•⁄£
[4] = 
STANDARD_INQUIRY_LENGTH
 - 5;

234 
öq_ª•⁄£
[5] = 0;

235 
öq_ª•⁄£
[6] = 0;

236 
öq_ª•⁄£
[7] = 0x2;

237 
	`mem˝y
(&
öq_ª•⁄£
[8], 
öq_víd‹_id
, 
	`sh™n⁄_°æí
(inq_vendor_id));

238 
	`mem˝y
(&
öq_ª•⁄£
[16], 
öq_¥odu˘_id
, 
	`sh™n⁄_°æí
(inq_product_id));

239 
	`mem˝y
(&
öq_ª•⁄£
[32], 
öq_¥odu˘_ªv
, 
	`sh™n⁄_°æí
(inq_product_rev));

241 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
STANDARD_INQUIRY_LENGTH
);

242  
ªt
;

243 
	}
}

245 
	$sh™n⁄_å™s_suµ‹ãd_vpd_∑ges
(
sh™n⁄_bio
 *
sbio
,

246 
u8
 *
öq_ª•⁄£
, 
Æloc_Àn
)

248 
x„r_Àn
;

249 
ªt
;

251 
	`sh™n⁄_mem£t
(
öq_ª•⁄£
, 0, 
STANDARD_INQUIRY_LENGTH
);

252 
öq_ª•⁄£
[1] = 
INQ_SUPPORTED_VPD_PAGES_PAGE
;

253 
öq_ª•⁄£
[3] = 
INQ_NUM_SUPPORTED_VPD_PAGES
;

254 
öq_ª•⁄£
[4] = 
INQ_SUPPORTED_VPD_PAGES_PAGE
;

255 
öq_ª•⁄£
[5] = 
INQ_UNIT_SERIAL_NUMBER_PAGE
;

256 
öq_ª•⁄£
[6] = 
INQ_DEVICE_IDENTIFICATION_PAGE
;

257 
öq_ª•⁄£
[7] = 
INQ_EXTENDED_INQUIRY_DATA_PAGE
;

258 
öq_ª•⁄£
[8] = 
INQ_BLOCK_LIMITS_PAGE
;

259 
öq_ª•⁄£
[9] = 
INQ_BDEV_CHARACTERISTICS_PAGE
;

260 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
STANDARD_INQUIRY_LENGTH
);

261 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

262  
ªt
;

263 
	}
}

265 
	$sh™n⁄_å™s_unô_£rül_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
öq_ª•⁄£
, 
Æloc_Àn
)

267 
sh™n⁄_dev
 *
sdev
;

268 
x„r_Àn
;

269 
ªt
;

271 
sdev
 = (
sh™n⁄_dev
 *)
sbio
->
ho°d©a
->sdev;

273 
	`sh™n⁄_mem£t
(
öq_ª•⁄£
, 0, 
STANDARD_INQUIRY_LENGTH
);

274 
öq_ª•⁄£
[1] = 
INQ_UNIT_SERIAL_NUMBER_PAGE
;

275 
öq_ª•⁄£
[3] = 
INQ_SERIAL_NUMBER_LENGTH
;

276 
	`°∫˝y
(&
öq_ª•⁄£
[4], 
sdev
->
£rvi˚_èg
, 32);

277 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
STANDARD_INQUIRY_LENGTH
);

278 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

279  
ªt
;

280 
	}
}

282 
	$sh™n⁄_å™s_devi˚_id_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
öq_ª•⁄£
, 
Æloc_Àn
)

284 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
ho°d©a
->sdev;

286 
x„r_Àn
, 
ªt
;

288 
	`mem£t
(
öq_ª•⁄£
, 0, 
STANDARD_INQUIRY_LENGTH
);

289 
öq_ª•⁄£
[1] = 
INQ_DEVICE_IDENTIFICATION_PAGE
;

290 
öq_ª•⁄£
[3] = 20;

292 
öq_ª•⁄£
[4] = 0x01;

293 
öq_ª•⁄£
[5] = 0x03;

294 
öq_ª•⁄£
[6] = 0x00;

295 
öq_ª•⁄£
[7] = 16;

297 
öq_ª•⁄£
[8] = 0x63;

298 
öq_ª•⁄£
[9] = 0x33;

299 
öq_ª•⁄£
[10] = 0x33;

300 
öq_ª•⁄£
[11] = 0x30;

302 i‡(
	`sh™n⁄_°æí
(
sdev
->
£rvi˚_èg
) == 14) {

303 
öq_ª•⁄£
[12] = 
sdev
->
£rvi˚_èg
[0] + sdev->service_tag[1];

304 
öq_ª•⁄£
[13] = 
sdev
->
£rvi˚_èg
[2] + sdev->service_tag[3];

305 
	`mem˝y
(&
öq_ª•⁄£
[14], &
sdev
->
£rvi˚_èg
[4], 10);

307 
öq_ª•⁄£
[12] = 
sdev
->
£rvi˚_èg
[0];

308 
öq_ª•⁄£
[13] = 
sdev
->
£rvi˚_èg
[1];

309 
öq_ª•⁄£
[14] = (
sdev
->
£rvi˚_èg
[2] - '0') * 10 + (sdev->service_tag[3] - '0');

310 
öq_ª•⁄£
[15] = 
sdev
->
£rvi˚_èg
[4];

311 
öq_ª•⁄£
[16] = (
sdev
->
£rvi˚_èg
[5] - '0') * 10 + (sdev->service_tag[6] - '0');

312 
öq_ª•⁄£
[17] = 
sdev
->
£rvi˚_èg
[7];

313 
öq_ª•⁄£
[18] = 
sdev
->
£rvi˚_èg
[8];

314 
öq_ª•⁄£
[19] = (
sdev
->
£rvi˚_èg
[9] - '0') * 10 + (sdev->service_tag[10] - '0');

315 
öq_ª•⁄£
[20] = (
sdev
->
£rvi˚_èg
[11] - '0') * 10 + (sdev->service_tag[12] - '0');

316 
öq_ª•⁄£
[21] = 
sdev
->
£rvi˚_èg
[13];

317 
öq_ª•⁄£
[22] = 
sdev
->
£rvi˚_èg
[14];

318 
öq_ª•⁄£
[23] = 
sdev
->
£rvi˚_èg
[15];

321 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
STANDARD_INQUIRY_LENGTH
);

322 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

323  
ªt
;

324 
	}
}

326 
	$sh™n⁄_å™s_exãnded_öquúy
(
sh™n⁄_bio
 *
sbio
, 
Æloc_Àn
)

328 
u8
 *
öq_ª•⁄£
;

329 
ªt
;

330 
x„r_Àn
;

332 
öq_ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
, 
GFP_ATOMIC
);

333 i‡(
öq_ª•⁄£
 =
NULL
) {

334  -
ENOMEM
;

336 
öq_ª•⁄£
[1] = 
INQ_EXTENDED_INQUIRY_DATA_PAGE
;

337 
öq_ª•⁄£
[2] = 0x00;

338 
öq_ª•⁄£
[3] = 0x3C;

339 
öq_ª•⁄£
[4] = 0x00;

340 
öq_ª•⁄£
[5] = 0x01;

342 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
);

343 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

344 
	`sh™n⁄_k‰ì
(
öq_ª•⁄£
);

345  
ªt
;

346 
	}
}

348 
	$sh™n⁄_å™s_block_limôs_∑ge
(
sh™n⁄_bio
 *
sbio
, 
Æloc_Àn
)

350 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
ho°d©a
->sdev;

352 
u8
 *
öq_ª•⁄£
;

353 
ªt
;

354 
x„r_Àn
;

356 
öq_ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
, 
GFP_ATOMIC
);

357 i‡(
öq_ª•⁄£
 =
NULL
) {

358  -
ENOMEM
;

360 
öq_ª•⁄£
[1] = 
INQ_BLOCK_LIMITS_PAGE
;

361 
öq_ª•⁄£
[2] = 0x00;

362 
öq_ª•⁄£
[3] = 0x3C;

363 
öq_ª•⁄£
[6] = 0x00;

364 i‡(
sdev
->
u£r_logicb_size
 == 512)

365 
öq_ª•⁄£
[7] = 0x08;

367 
öq_ª•⁄£
[7] = 0x00;

369 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
);

370 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

371 
	`sh™n⁄_k‰ì
(
öq_ª•⁄£
);

372  
ªt
;

373 
	}
}

375 
	$sh™n⁄_å™s_bdev_ch¨_∑ge
(
sh™n⁄_bio
 *
sbio
, 
Æloc_Àn
)

377 
u8
 *
öq_ª•⁄£
;

378 
ªt
;

379 
x„r_Àn
;

381 
öq_ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
, 
GFP_ATOMIC
);

382 i‡(
öq_ª•⁄£
 =
NULL
) {

383  -
ENOMEM
;

385 
öq_ª•⁄£
[1] = 
INQ_BDEV_CHARACTERISTICS_PAGE
;

386 
öq_ª•⁄£
[2] = 0x00;

387 
öq_ª•⁄£
[3] = 0x3C;

388 
öq_ª•⁄£
[4] = 0x00;

389 
öq_ª•⁄£
[5] = 0x01;

390 
öq_ª•⁄£
[6] = 0x00;

392 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
EXTENDED_INQUIRY_DATA_PAGE_LENGTH
);

393 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
öq_ª•⁄£
, 
x„r_Àn
);

394 
	`sh™n⁄_k‰ì
(
öq_ª•⁄£
);

395  
ªt
;

396 
	}
}

398 
	$sh™n⁄_ª•_öquúy
(
sh™n⁄_bio
 *
sbio
, *
£n£_buf„r
)

400 
ªs
 = 0;

401 
u8
 
evpd
;

402 
u8
 
∑ge_code
;

403 
Æloc_Àn
;

404 
u8
 *
öq_ª•⁄£
;

407 
evpd
 = 
	`GET_INQ_EVPD_BIT
(
sbio
->
cmd
);

408 
∑ge_code
 = 
	`GET_INQ_PAGE_CODE
(
sbio
->
cmd
);

409 
Æloc_Àn
 = 
	`GET_INQ_ALLOC_LENGTH
(
sbio
->
cmd
);

410 
	`debugs1
("evpd=0x%x,Öage_code=0x%x,áŒoc_Àn=0x%x.\n", 
evpd
, 
∑ge_code
, 
Æloc_Àn
);

412 
öq_ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
STANDARD_INQUIRY_LENGTH
, 
GFP_ATOMIC
);

413 i‡(
öq_ª•⁄£
 =
NULL
) {

414  -
ENOMEM
;

417 i‡(
evpd
 == 0) {

418 i‡(
∑ge_code
 =
INQ_STANDARD_INQUIRY_PAGE
) {

419 
ªs
 = 
	`sh™n⁄_å™s_°™d¨d_öquúy_∑ge
(
sbio
, 
öq_ª•⁄£
, 
STANDARD_INQUIRY_LENGTH
);

421 
	`sh™n⁄_öfo
("unsuµ‹ãdÉvpd=%d,Öage_code=%d.\n", 
evpd
, 
∑ge_code
);

422 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

423 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

424 
out
;

427 
∑ge_code
) {

428 
VPD_SUPPORTED_PAGES
:

429 
ªs
 = 
	`sh™n⁄_å™s_suµ‹ãd_vpd_∑ges
(
sbio
, 
öq_ª•⁄£
, 
Æloc_Àn
);

431 
VPD_SERIAL_NUMBER
:

432 
ªs
 = 
	`sh™n⁄_å™s_unô_£rül_∑ge
(
sbio
, 
öq_ª•⁄£
, 
Æloc_Àn
);

434 
VPD_DEVICE_IDENTIFIERS
:

435 
ªs
 = 
	`sh™n⁄_å™s_devi˚_id_∑ge
(
sbio
, 
öq_ª•⁄£
, 
Æloc_Àn
);

437 
VPD_BLOCK_DEV_CHARACTERISTICS
:

438 
ªs
 = 
	`sh™n⁄_å™s_bdev_ch¨_∑ge
(
sbio
, 
Æloc_Àn
);

440 
VPD_EXTENDED_INQUIRY
:

441 
ªs
 = 
	`sh™n⁄_å™s_exãnded_öquúy
(
sbio
, 
Æloc_Àn
);

443 
VPD_BLOCK_LIMITS
:

444 
ªs
 = 
	`sh™n⁄_å™s_block_limôs_∑ge
(
sbio
, 
Æloc_Àn
);

447 
	`sh™n⁄_öfo
("unsuµ‹ãdÉvpd=%d,Öage_code=%d.\n", 
evpd
, 
∑ge_code
);

448 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

449 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

450 
out
;

453 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

454 
out
:

455 
	`sh™n⁄_k‰ì
(
öq_ª•⁄£
);

456  
ªs
;

458 
	}
}

461 
	#REPORT_LUNS_CDB_ALLOC_LENGTH_OFFSET
 6

	)

462 
	#REPORT_LUNS_SR_OFFSET
 2

	)

464 
	#ALL_LUNS_RETURNED
 0x02

	)

465 
	#ALL_WELL_KNOWN_LUNS_RETURNED
 0x01

	)

466 
	#RESTRICTED_LUNS_RETURNED
 0x00

	)

468 
	#GET_REPORT_LUNS_ALLOC_LENGTH
(
cdb
) \

469 (
	`GET_U32_FROM_CDB
(
cdb
, 
REPORT_LUNS_CDB_ALLOC_LENGTH_OFFSET
))

	)

471 
	#SHANNON_SCSI_RLUN_ARR_SZ
 16

	)

472 
	#LUN_ENTRY_SIZE
 8

	)

473 
	#DEF_MAX_LUNS
 1

	)

475 
	$sh™n⁄_ª•_ªp‹t_luns
(
sh™n⁄_bio
 *
sbio
)

477 
u32
 
Æloc_Àn
, 
x„r_Àn
, 
ª•_size
;

478 
u8
 
£À˘_ªp‹t
;

479 
ª•⁄£
[
SHANNON_SCSI_RLUN_ARR_SZ
];

480 
__be64
 
tmp_id
;

481 
__be32
 
tmp_Àn
;

483 
Æloc_Àn
 = 
	`GET_REPORT_LUNS_ALLOC_LENGTH
(
sbio
->
cmd
);

484 
£À˘_ªp‹t
 = 
	`GET_U8_FROM_CDB
(
sbio
->
cmd
, 
REPORT_LUNS_SR_OFFSET
);

485 
	`debugs1
("Æloc_Àn=%d, sñe˘_ªp‹t=%d.\n", 
Æloc_Àn
, 
£À˘_ªp‹t
);

486 
ª•_size
 = 
SHANNON_SCSI_RLUN_ARR_SZ
;

488 i‡((
£À˘_ªp‹t
 !
ALL_LUNS_RETURNED
) &&

489 (
£À˘_ªp‹t
 !
ALL_WELL_KNOWN_LUNS_RETURNED
) &&

490 (
£À˘_ªp‹t
 !
RESTRICTED_LUNS_RETURNED
)) {

492 
	`mem£t
(
ª•⁄£
, 0, 
SHANNON_SCSI_RLUN_ARR_SZ
);

493 
tmp_Àn
 = 
	`˝u_to_be32
(
DEF_MAX_LUNS
);

494 
	`sh™n⁄_mem˝y
(
ª•⁄£
, &
tmp_Àn
, (
u32
));

495 
tmp_id
 = 
	`˝u_to_be64
(0);

496 
	`sh™n⁄_mem˝y
(&
ª•⁄£
[8], &
tmp_id
, (
u64
));

497 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
ª•_size
);

498  
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
ª•⁄£
, 
x„r_Àn
);

501 
	}
}

504 
	#READ_CAP_10_RESP_SIZE
 8

	)

505 
	#READ_CAP_16_RESP_SIZE
 32

	)

506 
	$sh™n⁄_ª•_ªad_ˇ∑côy
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
£n£_buf„r
)

508 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
ho°d©a
->sdev;

509 
ªt
 = 0;

510 
u32
 
Æloc_Àn
 = 
READ_CAP_10_RESP_SIZE
;

511 
u32
 
ª•_size
 = 
READ_CAP_10_RESP_SIZE
;

512 
u32
 
x„r_Àn
;

513 
u32
 
lba_size
;

514 
u64
 
æba
;

515 
u8
 
cdb16
;

516 
u8
 *
ª•⁄£
;

517 
__be64
 
tmp_æba
;

518 
__be32
 
tmp_æba_32
;

519 
__be32
 
tmp_lba_size
;

521 
cdb16
 = 
	`IS_READ_CAP_16
(
sbio
->
cmd
);

522 i‡(
cdb16
) {

523 
Æloc_Àn
 = 
	`GET_READ_CAP_16_ALLOC_LENGTH
(
sbio
->
cmd
);

524 
ª•_size
 = 
READ_CAP_16_RESP_SIZE
;

527 
ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
ª•_size
, 
GFP_ATOMIC
);

528 i‡(
ª•⁄£
 =
NULL
) {

529 
	`sh™n⁄_îr
("allocateÑesponse buffer failed!\n");

530 
ªt
 = -
ENOMEM
;

531 
îr
;

534 
lba_size
 = 
sdev
->
u£r_logicb_size
;

535 
æba
 = (
sdev
->
sdisk
.
£˘‹s
 * 512ULË/ sdev->
u£r_logicb_size
 - 1;

537 i‡(!
cdb16
) {

540 
æba
 = 0xFFFFFFFF;

541 
tmp_æba_32
 = 
	`sh™n⁄_˝u_to_be32
(
æba
);

542 
tmp_lba_size
 = 
	`sh™n⁄_˝u_to_be32
(
lba_size
);

543 
	`sh™n⁄_mem˝y
(
ª•⁄£
, &
tmp_æba_32
, (
u32
));

544 
	`sh™n⁄_mem˝y
(&
ª•⁄£
[4], &
tmp_lba_size
, (
u32
));

546 
tmp_æba
 = 
	`sh™n⁄_˝u_to_be64
(
æba
);

547 
tmp_lba_size
 = 
	`sh™n⁄_˝u_to_be32
(
lba_size
);

548 
	`sh™n⁄_mem˝y
(
ª•⁄£
, &
tmp_æba
, (
u64
));

549 
	`sh™n⁄_mem˝y
(&
ª•⁄£
[8], &
tmp_lba_size
, (
u32
));

550 
ª•⁄£
[12] = 0;

551 i‡(
sdev
->
u£r_logicb_size
 == 4096) {

553 
ª•⁄£
[13] = 0;

556 
ª•⁄£
[13] = 3;

562 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
ª•_size
);

563 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
ª•⁄£
, 
x„r_Àn
);

564 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

565 
	`sh™n⁄_k‰ì
(
ª•⁄£
);

566  
ªt
;

567 
îr
:

568 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

569 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

570  
ªt
;

571 
	}
}

574 
	#MODE_PAGE_INFO_EXCEP
 0x1C

	)

575 
	#MODE_PAGE_CACHING
 0x08

	)

576 
	#MODE_PAGE_CONTROL
 0x0A

	)

577 
	#MODE_PAGE_POWER_CONDITION
 0x1A

	)

578 
	#MODE_PAGE_RETURN_ALL
 0x3F

	)

579 
	#MODE_PAGE_BLK_DES_LEN
 0x08

	)

580 
	#MODE_PAGE_LLBAA_BLK_DES_LEN
 0x10

	)

581 
	#MODE_PAGE_CACHING_LEN
 0x14

	)

582 
	#MODE_PAGE_CONTROL_LEN
 0x0C

	)

583 
	#MODE_PAGE_POW_CND_LEN
 0x28

	)

584 
	#MODE_PAGE_INF_EXC_LEN
 0x0C

	)

585 
	#MODE_PAGE_ALL_LEN
 0x54

	)

586 
	#MODE_SENSE6_MPH_SIZE
 4

	)

587 
	#MODE_SENSE6_ALLOC_LEN_OFFSET
 4

	)

588 
	#MODE_SENSE_PAGE_CONTROL_OFFSET
 2

	)

589 
	#MODE_SENSE_PAGE_CONTROL_MASK
 0xC0

	)

590 
	#MODE_SENSE_PAGE_CODE_OFFSET
 2

	)

591 
	#MODE_SENSE_PAGE_CODE_MASK
 0x3F

	)

592 
	#MODE_SENSE_SUBPAGE_CODE_OFFSET
 3

	)

593 
	#MODE_SENSE_LLBAA_OFFSET
 1

	)

594 
	#MODE_SENSE_LLBAA_MASK
 0x10

	)

595 
	#MODE_SENSE_LLBAA_SHIFT
 4

	)

596 
	#MODE_SENSE_DBD_OFFSET
 1

	)

597 
	#MODE_SENSE_DBD_MASK
 8

	)

598 
	#MODE_SENSE_DBD_SHIFT
 3

	)

599 
	#MODE_SENSE10_MPH_SIZE
 8

	)

600 
	#MODE_SENSE10_ALLOC_LEN_OFFSET
 7

	)

601 
	#MODE_SELECT_CDB_PAGE_FORMAT_OFFSET
 1

	)

602 
	#MODE_SELECT_CDB_SAVE_PAGES_OFFSET
 1

	)

603 
	#MODE_SELECT_6_CDB_PARAM_LIST_LENGTH_OFFSET
 4

	)

604 
	#MODE_SELECT_10_CDB_PARAM_LIST_LENGTH_OFFSET
 7

	)

605 
	#MODE_SELECT_CDB_PAGE_FORMAT_MASK
 0x10

	)

606 
	#MODE_SELECT_CDB_SAVE_PAGES_MASK
 0x1

	)

607 
	#MODE_SELECT_6_BD_OFFSET
 3

	)

608 
	#MODE_SELECT_10_BD_OFFSET
 6

	)

609 
	#MODE_SELECT_10_LLBAA_OFFSET
 4

	)

610 
	#MODE_SELECT_10_LLBAA_MASK
 1

	)

611 
	#MODE_SELECT_6_MPH_SIZE
 4

	)

612 
	#MODE_SELECT_10_MPH_SIZE
 8

	)

613 
	#CACHING_MODE_PAGE_WCE_MASK
 0x04

	)

614 
	#MODE_SENSE_BLK_DESC_ENABLED
 0

	)

615 
	#MODE_SENSE_BLK_DESC_COUNT
 1

	)

616 
	#MODE_SELECT_PAGE_CODE_MASK
 0x3F

	)

617 
	#SHORT_DESC_BLOCK
 8

	)

618 
	#LONG_DESC_BLOCK
 16

	)

619 
	#MODE_PAGE_POW_CND_LEN_FIELD
 0x26

	)

620 
	#MODE_PAGE_INF_EXC_LEN_FIELD
 0x0A

	)

621 
	#MODE_PAGE_CACHING_LEN_FIELD
 0x12

	)

622 
	#MODE_PAGE_CONTROL_LEN_FIELD
 0x0A

	)

623 
	#MODE_SENSE_PC_CURRENT_VALUES
 0

	)

626 
	#GET_MODE_SENSE_DBD
(
cdb
) \

627 ((
	`GET_U8_FROM_CDB
(
cdb
, 
MODE_SENSE_DBD_OFFSET
Ë& 
MODE_SENSE_DBD_MASK
) >> \

628 
MODE_SENSE_DBD_SHIFT
)

	)

630 
	#GET_MODE_SENSE_LLBAA
(
cdb
) \

631 ((
	`GET_U8_FROM_CDB
(
cdb
, 
MODE_SENSE_LLBAA_OFFSET
) & \

632 
MODE_SENSE_LLBAA_MASK
Ë>> 
MODE_SENSE_LLBAA_SHIFT
)

	)

634 
	#GET_MODE_SENSE_MPH_SIZE
(
cdb10
) \

635 (
cdb10
 ? 
MODE_SENSE10_MPH_SIZE
 : 
MODE_SENSE6_MPH_SIZE
)

	)

638 
	$sh™n⁄_å™s_fûl_mode_∑rm_hdr
(
u8
 *
ª•
, 
Àn
, u8 
cdb10
, u8 
ŒbØ
,

639 
u16
 
mode_d©a_Àngth
, u16 
blk_desc_Àn
)

642 i‡((
cdb10
 && 
Àn
 < 8) || (!cdb10 &&Üen < 4))

645 i‡(
cdb10
) {

646 
ª•
[0] = (
mode_d©a_Àngth
 & 0xFF00) >> 8;

647 
ª•
[1] = (
mode_d©a_Àngth
 & 0x00FF);

649 
ª•
[4] = 
ŒbØ
;

650 
ª•
[5] = 0;

651 
ª•
[6] = (
blk_desc_Àn
 & 0xFF00) >> 8;

652 
ª•
[7] = (
blk_desc_Àn
 & 0x00FF);

654 
ª•
[0] = (
mode_d©a_Àngth
 & 0x00FF);

656 
ª•
[3] = (
blk_desc_Àn
 & 0x00FF);

660 
	}
}

662 
ölöe
 
	$sh™n⁄_å™s_gë_blk_desc_Àn
(
u8
 
dbd
, u8 
ŒbØ
)

664 i‡(
dbd
 =
MODE_SENSE_BLK_DESC_ENABLED
) {

666  8 * (
ŒbØ
 + 1Ë* 
MODE_SENSE_BLK_DESC_COUNT
;

670 
	}
}

672 
	$sh™n⁄_å™s_fûl_ˇchög_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
ª•
, 
Àn
)

674 
u8
 
vwc
;

676 
vwc
 = 1;

677 
ª•
[0] = 
MODE_PAGE_CACHING
;

678 
ª•
[1] = 
MODE_PAGE_CACHING_LEN_FIELD
;

679 
ª•
[2] = 
vwc
 << 2;

681 
	}
}

683 
	$sh™n⁄_å™s_fûl_c⁄åﬁ_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
ª•
, 
Àn
)

685 i‡(
Àn
 < 
MODE_PAGE_CONTROL_LEN
)

688 
ª•
[0] = 
MODE_PAGE_CONTROL
;

689 
ª•
[1] = 
MODE_PAGE_CONTROL_LEN_FIELD
;

690 
ª•
[2] = 0x0E;

692 
ª•
[3] = 0x10;

694 
ª•
[5] = 0x40;

696 
ª•
[8] = 0xFF;

697 
ª•
[9] = 0xFF;

700 
	}
}

702 
	$sh™n⁄_å™s_fûl_pow_˙d_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
ª•
, 
Àn
)

704 i‡(
Àn
 < 
MODE_PAGE_POW_CND_LEN
)

707 
ª•
[0] = 
MODE_PAGE_POWER_CONDITION
;

708 
ª•
[1] = 
MODE_PAGE_POW_CND_LEN_FIELD
;

711 
	}
}

713 
	$sh™n⁄_å™s_fûl_öf_exc_∑ge
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
ª•
, 
Àn
)

715 i‡(
Àn
 < 
MODE_PAGE_INF_EXC_LEN
)

718 
ª•
[0] = 
MODE_PAGE_INFO_EXCEP
;

719 
ª•
[1] = 
MODE_PAGE_INF_EXC_LEN_FIELD
;

720 
ª•
[2] = 0x88;

723 
	}
}

725 
	$sh™n⁄_å™s_fûl_Æl_∑ges
(
sh™n⁄_bio
 *
sbio
, 
u8
 *
ª•
, 
Àn
)

727 
ªs
 = 0;

728 
u16
 
mode_∑ges_off£t_1
 = 0;

729 
u16
 
mode_∑ges_off£t_2
, 
mode_∑ges_off£t_3
, 
mode_∑ges_off£t_4
;

731 
mode_∑ges_off£t_2
 = 
mode_∑ges_off£t_1
 + 
MODE_PAGE_CACHING_LEN
;

732 
mode_∑ges_off£t_3
 = 
mode_∑ges_off£t_2
 + 
MODE_PAGE_CONTROL_LEN
;

733 
mode_∑ges_off£t_4
 = 
mode_∑ges_off£t_3
 + 
MODE_PAGE_POW_CND_LEN
;

734 
ªs
 = 
	`sh™n⁄_å™s_fûl_ˇchög_∑ge
(
sbio
, &
ª•
[
mode_∑ges_off£t_1
], 
MODE_PAGE_CACHING_LEN
);

735 i‡(
ªs
 != 0)

736 
out
;

737 
ªs
 = 
	`sh™n⁄_å™s_fûl_c⁄åﬁ_∑ge
(
sbio
, &
ª•
[
mode_∑ges_off£t_2
], 
MODE_PAGE_CONTROL_LEN
);

738 i‡(
ªs
 != 0)

739 
out
;

740 
ªs
 = 
	`sh™n⁄_å™s_fûl_pow_˙d_∑ge
(
sbio
, &
ª•
[
mode_∑ges_off£t_3
], 
MODE_PAGE_POW_CND_LEN
);

741 i‡(
ªs
 != 0)

742 
out
;

743 
ªs
 = 
	`sh™n⁄_å™s_fûl_öf_exc_∑ge
(
sbio
, &
ª•
[
mode_∑ges_off£t_4
], 
MODE_PAGE_INF_EXC_LEN
);

744 i‡(
ªs
 != 0)

745 
out
;

746 
out
:

747  
ªs
;

748 
	}
}

750 
sh™n⁄_å™s_mode_∑ge_¸óã
(
sh™n⁄_bio
 *
sbio
, 
u16
 
Æloc_Àn
, 
u8
 
cdb10
,

751 (*
mode_∑ge_fûl_func
)(
sh™n⁄_bio
 *
sbio
, 
u8
 *, ),

752 
u16
 
mode_∑ges_tŸ_Àn
)

754 
x„r_Àn
, 
ªt
 = 0;

755 
u8
 *
ª•⁄£
;

756 
u8
 
dbd
, 
ŒbØ
;

757 
u16
 
ª•_size
;

758 
mph_size
;

759 
u16
 
mode_∑ges_off£t_1
;

760 
u16
 
blk_desc_Àn
, 
blk_desc_off£t
, 
mode_d©a_Àngth
;

762 
dbd
 = 
	`GET_MODE_SENSE_DBD
(
sbio
->
cmd
);

763 
ŒbØ
 = 
	`GET_MODE_SENSE_LLBAA
(
sbio
->
cmd
);

764 
mph_size
 = 
	`GET_MODE_SENSE_MPH_SIZE
(
cdb10
);

765 
blk_desc_Àn
 = 
	`sh™n⁄_å™s_gë_blk_desc_Àn
(
dbd
, 
ŒbØ
);

766 
	`debugs1
("dbd=%d,ÜlbØ=%d, mph_size=%d, blk_desc_Àn=%d.\n", 
dbd
, 
ŒbØ
, 
mph_size
, 
blk_desc_Àn
);

768 
ª•_size
 = 
mph_size
 + 
blk_desc_Àn
 + 
mode_∑ges_tŸ_Àn
;

770 
mode_d©a_Àngth
 = 3 + (3 * 
cdb10
Ë+ 
blk_desc_Àn
 + 
mode_∑ges_tŸ_Àn
;

771 
blk_desc_off£t
 = 
mph_size
;

772 
mode_∑ges_off£t_1
 = 
blk_desc_off£t
 + 
blk_desc_Àn
;

773 
ª•⁄£
 = 
	`sh™n⁄_kzÆloc
(
ª•_size
, 
GFP_ATOMIC
);

774 
ªt
 = 
	`sh™n⁄_å™s_fûl_mode_∑rm_hdr
(&
ª•⁄£
[0], 
mph_size
, 
cdb10
, 
ŒbØ
, 
mode_d©a_Àngth
, 
blk_desc_Àn
);

776 
ªt
 = 
	`mode_∑ge_fûl_func
(
sbio
, &
ª•⁄£
[
mode_∑ges_off£t_1
], 
mode_∑ges_tŸ_Àn
);

777 
x„r_Àn
 = 
	`mö
(
Æloc_Àn
, 
ª•_size
);

778 
ªt
 = 
	`sh™n⁄_fûl_‰om_dev_buf„r
(
sbio
->
scsi_cmnd
, 
ª•⁄£
, 
x„r_Àn
);

780 
	`sh™n⁄_k‰ì
(
ª•⁄£
);

781  
ªt
;

782 
	}
}

784 
	$sh™n⁄_ª•_mode_£n£
(
sh™n⁄_bio
 *
sbio
, *
£n£_buf„r
)

786 
u16
 
Æloc_Àn
;

787 
u8
 
cdb10
 = 0;

788 
u8
 
∑ge_code
;

789 
u8
 
sub∑ge_code
;

790 
u8
 
pc
;

791 
ªt
;

793 i‡(
	`GET_OPCODE
(
sbio
->
cmd
Ë=
MODE_SENSE
) {

794 
Æloc_Àn
 = 
	`GET_U8_FROM_CDB
(
sbio
->
cmd
, 
MODE_SENSE6_ALLOC_LEN_OFFSET
);

796 
Æloc_Àn
 = 
	`GET_U16_FROM_CDB
(
sbio
->
cmd
, 
MODE_SENSE10_ALLOC_LEN_OFFSET
);

797 
cdb10
 = 1;

799 
pc
 = 
	`GET_U8_FROM_CDB
(
sbio
->
cmd
, 
MODE_SENSE_PAGE_CONTROL_OFFSET
Ë& 
MODE_SENSE_PAGE_CONTROL_MASK
;

800 
∑ge_code
 = 
	`GET_U8_FROM_CDB
(
sbio
->
cmd
, 
MODE_SENSE_PAGE_CODE_OFFSET
Ë& 
MODE_SENSE_PAGE_CODE_MASK
;

801 
sub∑ge_code
 = 
	`GET_U8_FROM_CDB
(
sbio
->
cmd
, 
MODE_SENSE_SUBPAGE_CODE_OFFSET
);

802 
	`debugs1
("›code=0x%x,áŒoc_Àn=%d,Öc=0x%x,Öage_code=0x%x.\n", 
	`GET_OPCODE
(
sbio
->
cmd
), 
Æloc_Àn
, 
pc
, 
∑ge_code
);

804 
∑ge_code
) {

805 
MODE_PAGE_CACHING
:

806 
ªt
 = 
	`sh™n⁄_å™s_mode_∑ge_¸óã
(
sbio
, 
Æloc_Àn
, 
cdb10
,

807 &
sh™n⁄_å™s_fûl_ˇchög_∑ge
,

808 
MODE_PAGE_CACHING_LEN
);

810 
MODE_PAGE_INFO_EXCEP
:

811 i‡(0 =
sub∑ge_code
)

812 
ªt
 = 
	`sh™n⁄_å™s_mode_∑ge_¸óã
(
sbio
, 
Æloc_Àn
, 
cdb10
,

813 &
sh™n⁄_å™s_fûl_öf_exc_∑ge
,

814 
MODE_PAGE_INF_EXC_LEN
);

816 
	`sh™n⁄_öfo
("unsuµ‹ãdÖage_code=0x%x, sub∑ge_code=0x%x.\n", 
∑ge_code
, 
sub∑ge_code
);

817 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

818 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

819 
out
;

822 
MODE_PAGE_POWER_CONDITION
:

823 
ªt
 = 
	`sh™n⁄_å™s_mode_∑ge_¸óã
(
sbio
, 
Æloc_Àn
, 
cdb10
,

824 &
sh™n⁄_å™s_fûl_pow_˙d_∑ge
,

825 
MODE_PAGE_POW_CND_LEN
);

827 
MODE_PAGE_CONTROL
:

828 
ªt
 = 
	`sh™n⁄_å™s_mode_∑ge_¸óã
(
sbio
, 
Æloc_Àn
, 
cdb10
,

829 &
sh™n⁄_å™s_fûl_c⁄åﬁ_∑ge
,

830 
MODE_PAGE_CONTROL_LEN
);

832 
MODE_PAGE_RETURN_ALL
:

833 i‡((0 =
sub∑ge_code
) || (0xff == subpage_code))

834 
ªt
 = 
	`sh™n⁄_å™s_mode_∑ge_¸óã
(
sbio
, 
Æloc_Àn
, 
cdb10
,

835 &
sh™n⁄_å™s_fûl_Æl_∑ges
,

836 
MODE_PAGE_ALL_LEN
);

838 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

839 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

840 
out
;

844 
	`sh™n⁄_öfo
("unsuµ‹ãdÖage_code=0x%x.\n", 
∑ge_code
);

845 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

846 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

847 
out
;

849 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

850 
out
:

852 
	}
}

854 
	$gë_d©a_å™s„r_öfo
(*
cmd
,

855 *
lba
, *
num
,

856 
u32
 *
ei_lba
)

858 *
ei_lba
 = 0;

860 *
cmd
) {

861 
VARIABLE_LENGTH_CMD
:

862 *
lba
 = (
u64
)
cmd
[19] | (u64)cmd[18] << 8 |

863 (
u64
)
cmd
[17] << 16 | (u64)cmd[16] << 24 |

864 (
u64
)
cmd
[15] << 32 | (u64)cmd[14] << 40 |

865 (
u64
)
cmd
[13] << 48 | (u64)cmd[12] << 56;

867 *
ei_lba
 = (
u32
)
cmd
[23] | (u32)cmd[22] << 8 |

868 (
u32
)
cmd
[21] << 16 | (u32)cmd[20] << 24;

870 *
num
 = (
u32
)
cmd
[31] | (u32)cmd[30] << 8 | (u32)cmd[29] << 16 |

871 (
u32
)
cmd
[28] << 24;

874 
WRITE_SAME_16
:

875 
WRITE_16
:

876 
READ_16
:

877 *
lba
 = (
u64
)
cmd
[9] | (u64)cmd[8] << 8 |

878 (
u64
)
cmd
[7] << 16 | (u64)cmd[6] << 24 |

879 (
u64
)
cmd
[5] << 32 | (u64)cmd[4] << 40 |

880 (
u64
)
cmd
[3] << 48 | (u64)cmd[2] << 56;

882 *
num
 = (
u32
)
cmd
[13] | (u32)cmd[12] << 8 | (u32)cmd[11] << 16 |

883 (
u32
)
cmd
[10] << 24;

885 
WRITE_12
:

886 
READ_12
:

887 *
lba
 = (
u32
)
cmd
[5] | (u32)cmd[4] << 8 | (u32)cmd[3] << 16 |

888 (
u32
)
cmd
[2] << 24;

890 *
num
 = (
u32
)
cmd
[9] | (u32)cmd[8] << 8 | (u32)cmd[7] << 16 |

891 (
u32
)
cmd
[6] << 24;

893 
WRITE_SAME
:

894 
WRITE_10
:

895 
READ_10
:

896 
XDWRITEREAD_10
:

897 *
lba
 = (
u32
)
cmd
[5] | (u32)cmd[4] << 8 | (u32)cmd[3] << 16 |

898 (
u32
)
cmd
[2] << 24;

900 *
num
 = (
u32
)
cmd
[8] | (u32)cmd[7] << 8;

902 
WRITE_6
:

903 
READ_6
:

904 *
lba
 = (
u32
)
cmd
[3] | (u32)cmd[2] << 8 |

905 (
u32
)(
cmd
[1] & 0x1f) << 16;

906 *
num
 = (0 =
cmd
[4]) ? 256 : cmd[4];

911 
	}
}

913 
sh™n⁄_c⁄vît_scsi_scmd
(
sh™n⁄_bio
 *
sbio
, 
logicb_size
);

914 
sh™n⁄_submô_bio
(
sh™n⁄_dev
 *
sdev
, 
sh™n⁄_bio
 *
sbio
);

915 
	$sh™n⁄_ª•_rw
(
sh™n⁄_bio
 *
sbio
)

917 
sh™n⁄_dev
 *
sdev
 = (sh™n⁄_dev *)
sbio
->
ho°d©a
->sdev;

918 
lba
 = 0;

919 
num
 = 0;

920 
£n£_buf„r
[
SHANNON_SCSI_SENSE_LEN
];

921 
u32
 
ei_lba
 = 0;

923 
	`gë_d©a_å™s„r_öfo
(
sbio
->
cmd
, &
lba
, &
num
, &
ei_lba
);

924 
	`SHANNON_INIT_LIST_HEAD
(&
sbio
->
ªq_li°
);

925 
sbio
->
°¨t_£˘‹
 = (
lba
 * 
sdev
->
u£r_logicb_size
)/512;

927 i‡(0 =
num
) {

928 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

932 i‡(
	`u∆ikñy
(
sbio
->
°¨t_£˘‹
 + 
num
 * 
sdev
->
u£r_logicb_size
 / 512Ë> (sdev->
sdisk
.
£˘‹s
 - 1))

934 
	`sh™n⁄_öfo
("LBA ouào‡ønge:Üba=%Œu,Çum=%u.\n", 
lba
, 
num
);

935 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_ADDR_OUT_OF_RANGE
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

936 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

937 
	`‰ì_sbio
(
sbio
);

941 
	`sh™n⁄_c⁄vît_scsi_scmd
(
sbio
, 
sdev
->
logicb_size
);

942 
sbio
->
°¨t_time
 = 
	`gë_jiffõs
();

943 
	`sh™n⁄_scsi_°¨t_io_ac˘
(
sdev
->
sdisk
.
ho°d©a
, 
sbio
);

944 
	`sh™n⁄_submô_bio
(
sdev
, 
sbio
);

946 
	}
}

948 
	$submô_scsi_rw_èsk
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

950 
sh™n⁄_bio
 *
sbio
 = 
	`c⁄èöî_of
(
w‹k
, sh™n⁄_bio, 
scsi_w‹k
);

951 
	`sh™n⁄_ª•_rw
(
sbio
);

952 
	}
}

954 
	$sh™n⁄_ª˚ive_scsi_cmd
(
sh™n⁄_bio
 *
sbio
, *
£n£_buf„r
)

956 
ªt
;

958 i‡(
	`sh™n⁄_check_ªadöess
(
sbio
, 
£n£_buf„r
)) {

959 
	`‰ì_sbio
(
sbio
);

963 *
sbio
->
cmd
) {

964 
INQUIRY
:

965 
	`debugs1
("INQUIRY\n");

966 
ªt
 = 
	`sh™n⁄_ª•_öquúy
(
sbio
, 
£n£_buf„r
);

967 
	`‰ì_sbio
(
sbio
);

969 
TEST_UNIT_READY
:

970 
	`debugs1
("TEST_UNIT_READY\n");

971 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

972 
	`‰ì_sbio
(
sbio
);

974 
SYNCHRONIZE_CACHE
:

975 
	`debugs1
("SYNCHRONIZE_CACHE\n");

976 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

977 
	`‰ì_sbio
(
sbio
);

979 
ALLOW_MEDIUM_REMOVAL
:

980 
	`debugs1
("ALLOW_MEDIUM_REMOVAL\n");

981 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

982 
	`‰ì_sbio
(
sbio
);

984 
REQUEST_SENSE
:

985 
	`debugs1
("REQUEST_SENSE, unsupported!\n");

986 
	`‰ì_sbio
(
sbio
);

988 
MODE_SELECT
:

989 
MODE_SELECT_10
:

990 
	`debugs1
("MODE_SELECT: cmd=0x%lx.\n", *
sbio
->
cmd
);

991 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

992 
	`‰ì_sbio
(
sbio
);

994 
MODE_SENSE
:

995 
MODE_SENSE_10
:

996 
	`debugs1
("MODE_SENSE: cmd=0x%lx.\n", *
sbio
->
cmd
);

997 
	`sh™n⁄_ª•_mode_£n£
(
sbio
, 
£n£_buf„r
);

998 
	`‰ì_sbio
(
sbio
);

1000 
REPORT_LUNS
:

1001 
	`debugs1
("REPORT_LUNS.\n");

1002 
	`sh™n⁄_ª•_ªp‹t_luns
(
sbio
);

1003 
	`íd_scsi_cmnd
(
sbio
, 
STATUS_CODE_GOOD
, 
£n£_buf„r
);

1004 
	`‰ì_sbio
(
sbio
);

1006 
READ_CAPACITY
:

1007 
	`debugs1
("READ_CAPACITY.\n");

1008 
	`sh™n⁄_ª•_ªad_ˇ∑côy
(
sbio
, 
£n£_buf„r
);

1009 
	`‰ì_sbio
(
sbio
);

1011 
SERVICE_ACTION_IN
:

1012 i‡(
	`IS_READ_CAP_16
(
sbio
->
cmd
)) {

1013 
	`debugs1
("READ_CAPACITY 16.\n");

1014 
	`sh™n⁄_ª•_ªad_ˇ∑côy
(
sbio
, 
£n£_buf„r
);

1015 
	`‰ì_sbio
(
sbio
);

1017 
	`debugs1
("unsuµ‹ãd Sîvi˚ A˘i⁄ CMD:0x%x\n", 
sbio
->
cmd
[1]);

1018 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

1019 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

1020 
	`‰ì_sbio
(
sbio
);

1023 
READ_16
:

1024 
READ_12
:

1025 
READ_10
:

1026 
READ_6
:

1027 
WRITE_16
:

1028 
WRITE_12
:

1029 
WRITE_10
:

1030 
WRITE_6
:

1031 
	`debugs1
("READ/WRITE, cmd=0x%x\n", *
sbio
->
cmd
);

1033 
	`sh™n⁄_öô_w‹k
(&
sbio
->
scsi_w‹k
, 
submô_scsi_rw_èsk
);

1034 
	`sh™n⁄_queue_w‹k
(
sh™n⁄_≥r˝u_wq
, &
sbio
->
scsi_w‹k
);

1037 
	`sh™n⁄_öfo
("unsuµ‹ãd SCSI CMD:0x%x\n", *
sbio
->
cmd
);

1038 
	`sh™n⁄_buûd_£n£_buf„r
(
£n£_buf„r
, 
SENSE_KEY_ILLEGAL_REQUEST
, 
ASC_INVALID_FIELD_IN_CDB
, 
ASCQ_CAUSE_NOT_REPORTABLE
);

1039 
	`íd_scsi_cmnd
(
sbio
, 
CHECK_CONDITION_STATUS
, 
£n£_buf„r
);

1040 
	`‰ì_sbio
(
sbio
);

1044 
	}
}

	@shannon_sysfs.c

1 
	~"sh™n⁄_pci.h
"

2 
	~"sh™n⁄_sysfs.h
"

3 
	~<löux/kobje˘.h
>

4 
	~<löux/sysfs.h
>

5 
	~<löux/î∫o.h
>

6 
	~<löux/moduÀ.h
>

7 
	~<löux/vîsi⁄.h
>

8 
	~<löux/gíhd.h
>

9 
	~<löux/miscdevi˚.h
>

10 
	~<löux/pci.h
>

11 
	~<löux/hwm⁄.h
>

12 
	~<löux/hwm⁄-sysfs.h
>

13 
	~"sh™n⁄_scsi.h
"

15 
	ssh™n⁄_©å
 {

16 
©åibuã
 
	m©å
;

17 
sh™n⁄_ssize_t
 (*
show
)(
	msh™n⁄_dev
 *, *);

18 
sh™n⁄_ssize_t
 (*
°‹e
)(
	msh™n⁄_dev
 *, c⁄° *, 
sh™n⁄_size_t
 
	mcou¡
);

21 
	ssh™n⁄_devi˚_©å
 {

22 
devi˚_©åibuã
 
	m©å
;

23 
sh™n⁄_ssize_t
 (*
show
)(
	msh™n⁄_dev
 *, *);

24 
sh™n⁄_ssize_t
 (*
°‹e
)(
	msh™n⁄_dev
 *, c⁄° *, 
sh™n⁄_size_t
 
	mcou¡
);

27 
	#deföe_⁄e_rw
(
_«me
) \

28 
sh™n⁄_©å
 
_«me
 = \

29 
	`__ATTR
(
_«me
, 0644, _«me##
_show
, _«me##
_°‹e
)

	)

31 
	#deföe_⁄e_ro
(
_«me
) \

32 
sh™n⁄_©å
 
_«me
 = \

33 
	`__ATTR_RO
(
_«me
)

	)

35 
	#deföe_⁄e_devi˚_rw
(
_«me
) \

36 
sh™n⁄_devi˚_©å
 
_«me
 = {\

37 .
©å
 = 
	`__ATTR
(
_«me
, 0644, 
sh™n⁄_devi˚_show
, 
sh™n⁄_devi˚_°‹e
), \

38 .
show
 = 
_«me
##
_show
,\

39 .
°‹e
 = 
_«me
##
_°‹e
,\

40 }

	)

42 
	#deföe_⁄e_devi˚_ro
(
_«me
) \

43 
sh™n⁄_devi˚_©å
 
_«me
 = {\

44 .
©å
 = 
	`__ATTR
(
_«me
, 0644, 
sh™n⁄_devi˚_show
, 
sh™n⁄_devi˚_°‹e
), \

45 .
show
 = 
_«me
##
_show
,\

46 }

	)

48 
	#to_sh™n⁄_©å
(
a
Ë
	`c⁄èöî_of
◊, 
sh™n⁄_©å
, 
©å
)

	)

49 
	#to_sh™n⁄_devi˚_©å
(
a
Ë
	`c⁄èöî_of
◊, 
sh™n⁄_devi˚_©å
, 
©å
)

	)

51 
sh™n⁄_scsi_mode
;

52 
sh™n⁄_ssize_t
 
	$sh™n⁄_devi˚_show
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
, *
buf
)

54 
pci_dev
 *
pdev
 = 
NULL
;

55 
sh™n⁄_dev
 *
sdev
 = 
NULL
;

56 
sh™n⁄_devi˚_©å
 *
ßâr
 = 
NULL
;

57 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

58 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
;

60 
pdev
 = 
	`c⁄èöî_of
(
dev
, 
pci_dev
, dev);

61 i‡(
sh™n⁄_scsi_mode
) {

62 
ho°d©a
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

63 
sdev
 = 
ho°d©a
->sdev;

65 
sdev
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

66 
ßâr
 = 
	`to_sh™n⁄_devi˚_©å
(
©å
);

68 i‡(
ßâr
->
show
)

69 
ªt
 = 
ßâr
->
	`show
(
sdev
, 
buf
);

71 
ªt
 = -
EIO
;

73  
ªt
;

74 
	}
}

76 
ssize_t
 
	$sh™n⁄_devi˚_°‹e
(
devi˚
 *
dev
, 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

78 
pci_dev
 *
pdev
 = 
NULL
;

79 
sh™n⁄_dev
 *
sdev
 = 
NULL
;

80 
sh™n⁄_devi˚_©å
 *
ßâr
 = 
NULL
;

81 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

82 
sh™n⁄_scsi_¥iv©e
 *
ho°d©a
;

84 
pdev
 = 
	`c⁄èöî_of
(
dev
, 
pci_dev
, dev);

85 i‡(
sh™n⁄_scsi_mode
) {

86 
ho°d©a
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

87 
sdev
 = 
ho°d©a
->sdev;

89 
sdev
 = 
	`sh™n⁄_pci_gë_drvd©a
(
pdev
);

90 
ßâr
 = 
	`to_sh™n⁄_devi˚_©å
(
©å
);

92 i‡(
ßâr
->
°‹e
)

93 
ªt
 = 
ßâr
->
	`°‹e
(
sdev
, 
buf
, 
cou¡
);

95 
ªt
 = -
EIO
;

97  
ªt
;

98 
	}
}

100 
sh™n⁄_ssize_t
 
	$sh™n⁄_show
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, *
buf
)

102 
sh™n⁄_dev
 *
sdev
 = 
	`to_sh™n⁄_dev
((
sh™n⁄_kobje˘_t
 *)
kobj
);

103 
sh™n⁄_©å
 *
ßâr
 = 
	`to_sh™n⁄_©å
(
©å
);

104 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

106 if(
ßâr
->
show
)

107 
ªt
 = 
ßâr
->
	`show
(
sdev
, 
buf
);

109 
ªt
 = -
EIO
;

111  
ªt
;

112 
	}
}

114 
sh™n⁄_ssize_t
 
	$sh™n⁄_°‹e
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

116 
sh™n⁄_dev
 *
sdev
 = 
	`to_sh™n⁄_dev
((
sh™n⁄_kobje˘_t
 *)
kobj
);

117 
sh™n⁄_©å
 *
ßâr
 = 
	`to_sh™n⁄_©å
(
©å
);

118 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

120 if(
ßâr
->
°‹e
)

121 
ªt
 = 
ßâr
->
	`°‹e
(
sdev
, 
buf
, 
cou¡
);

123 
ªt
 = -
EIO
;

125  
ªt
;

126 
	}
}

128 
	$sh™n⁄_sysfs_ªÀa£
(
kobje˘
 *
kobj
)

130 
	}
}

132 
sysfs_›s
 
	gsh™n⁄_sysfs_›s
 = {

133 .
show
 = 
sh™n⁄_show
,

134 .
	g°‹e
 = 
sh™n⁄_°‹e
,

137 
deföe_⁄e_ro
(
modñ
);

138 
deföe_⁄e_ro
(
fúmw¨e_vîsi⁄
);

139 
deföe_⁄e_ro
(
fúmw¨e_buûd
);

140 
deföe_⁄e_ro
(
drivî_vîsi⁄
);

141 
deföe_⁄e_ro
(
£rül_numbî
);

142 
deföe_⁄e_ro
(
«nd_m™uÁ˘uªr
);

143 
deföe_⁄e_ro
(
«nd_Êash_id
);

144 
deföe_⁄e_ro
(
ch™√ls
);

145 
deföe_⁄e_ro
(
lun£ts_ö_ch™√l
);

146 
deföe_⁄e_ro
(
luns_ö_lun£t
);

147 
deföe_⁄e_ro
(
avaûabÀ_luns
);

148 
deföe_⁄e_ro
(
eblocks_ö_lun
);

149 
deföe_⁄e_ro
(
∑ges_ö_eblock
);

150 
deföe_⁄e_ro
(
«nd_∑ge_size
);

151 
deföe_⁄e_ro
(
block_size
);

152 
deföe_⁄e_ro
(
u£_duÆ_hód
);

153 
deföe_⁄e_ro
(
powî_⁄_£c⁄ds
);

154 
deföe_⁄e_ro
(
powî_cy˛e_cou¡
);

155 
deföe_⁄e_ro
(
u£r_ˇ∑côy
);

156 
deföe_⁄e_ro
(
physiˇl_ˇ∑côy
);

157 
deföe_⁄e_ro
(
ovî¥ovisi⁄
);

158 
deföe_⁄e_ro
(
‰ì_blk˙t
);

159 
deföe_⁄e_ro
(
°©ic_bad_blk˙t
);

160 
deföe_⁄e_ro
(
dy«mic_bad_blk˙t
);

161 
deföe_⁄e_ro
(
max_îr_blocks
);

162 
deföe_⁄e_ro
(
ªc⁄fig_suµ‹t
);

163 
deföe_⁄e_ro
(
£u_Êag
);

164 
deföe_⁄e_ro
(
£u_¸c_îr‹
);

165 
deföe_⁄e_ro
(
£u_¸c_îr‹_hi°‹y
);

166 
deföe_⁄e_ro
(
£u_ecc_îr‹
);

167 
deföe_⁄e_ro
(
£u_ecc_îr‹_hi°‹y
);

168 
deföe_⁄e_ro
(
e°im©ed_li„_À·
);

169 
deföe_⁄e_ro
(
ho°_wrôe_£˘‹s
);

170 
deföe_⁄e_ro
(
ho°_wrôe_b™dwidth
);

171 
deföe_⁄e_ro
(
ho°_wrôe_i›s
);

172 
deföe_⁄e_ro
(
ho°_wrôe_œãncy
);

173 
deföe_⁄e_ro
(
tŸÆ_wrôe_£˘‹s
);

174 
deföe_⁄e_ro
(
tŸÆ_wrôe_b™dwidth
);

175 
deföe_⁄e_ro
(
wrôe_am∂ifõr
);

176 
deföe_⁄e_ro
(
wrôe_am∂ifõr_li„time
);

177 
deföe_⁄e_ro
(
ho°_ªad_£˘‹s
);

178 
deföe_⁄e_ro
(
ho°_ªad_b™dwidth
);

179 
deföe_⁄e_ro
(
ho°_ªad_i›s
);

180 
deföe_⁄e_ro
(
ho°_ªad_œãncy
);

181 
deföe_⁄e_ro
(
tŸÆ_gc_logicbs
);

182 
deföe_⁄e_ro
(
tŸÆ_wl_logicbs
);

183 
deföe_⁄e_ro
(
tŸÆ_îr_ªcovî_logicbs
);

184 
deföe_⁄e_ro
(
ãm≥øtuª_öt
);

185 
deföe_⁄e_ro
(
ãm≥øtuª_öt_max
);

186 
deföe_⁄e_ro
(
ãm≥øtuª_Êash
);

187 
deföe_⁄e_ro
(
ãm≥øtuª_Êash_max
);

188 
deföe_⁄e_ro
(
ãm≥øtuª_bﬂrd
);

189 
deföe_⁄e_ro
(
ãm≥øtuª_bﬂrd_max
);

190 
deföe_⁄e_rw
(
ãm≥øtuª_w¨nög_thªshﬁd
);

191 
deföe_⁄e_ro
(
vﬁège_öt
);

192 
deföe_⁄e_ro
(
vﬁège_öt_max
);

193 
deföe_⁄e_ro
(
vﬁège_aux
);

194 
deföe_⁄e_ro
(
vﬁège_aux_max
);

195 
deföe_⁄e_ro
(
ecc_Áûuª_times
);

196 
deföe_⁄e_ro
(
ecc_°©i°ics
);

197 
deföe_⁄e_ro
(
devi˚_°©e
);

198 
deföe_⁄e_ro
(
ac˚ss_mode
);

199 
deföe_⁄e_ro
(
ªad⁄ly_ªas⁄
);

200 
deföe_⁄e_ro
(
ªdu˚d_wrôe_ªas⁄
);

201 
deföe_⁄e_rw
(
pm_qos_vÆue
);

202 
deföe_⁄e_rw
(
ªcovî_øã
);

203 
deföe_⁄e_rw
(
hŸ_block_ª˛aim_¥i‹ôy
);

204 
deföe_⁄e_rw
(
su•icious_bad_lun_ödiˇt‹
);

205 
deföe_⁄e_rw
(
debug_Àvñ
);

206 
deföe_⁄e_rw
(
sh™n⁄_buf„r_wrôe
);

207 
deföe_⁄e_rw
(
sh™n⁄_pﬁl_times
);

208 
deföe_⁄e_rw
(
ªad_îr_msg_Àvñ
);

209 
deföe_⁄e_rw
(
wl_debug
);

210 
deföe_⁄e_rw
(
îr_check_debug
);

211 
deföe_⁄e_rw
(
ªad_di°urb_thªshﬁd
);

212 
deföe_⁄e_rw
(
›í_block_ªad_di°urb_thªshﬁd
);

213 
deföe_⁄e_rw
(
wl_timî_öãrvÆ
);

214 
deföe_⁄e_rw
(
max_ö_wl_logicbs
);

215 
deföe_⁄e_rw
(
wl_max_îa£_cou¡
);

216 
deföe_⁄e_rw
(
wl_îa£_cou¡_dñè_0
);

217 
deföe_⁄e_rw
(
wl_îa£_cou¡_dñè_1
);

218 
deföe_⁄e_rw
(
fûl_chunk_timî_expúe
);

219 
deföe_⁄e_rw
(
≥riod_ªad_≥riod
);

220 
deföe_⁄e_rw
(
≥riod_ªad_µa
);

221 
deföe_⁄e_rw
(
swôch_mi¸ocode
);

222 
deföe_⁄e_ro
(
£rvi˚_èg
);

223 
deföe_⁄e_ro
(
Âga_d«
);

224 
deföe_⁄e_ro
(
udid
);

225 
deföe_⁄e_ro
(
ª‰esh_mbr_cou¡
);

226 
deföe_⁄e_ro
(
©omic_wrôe
);

227 
deföe_⁄e_ro
(
¥i‹ôize_wrôe
);

228 
deföe_⁄e_ro
(
n⁄Æig√d_bios
);

229 
deföe_⁄e_rw
(
¥öt_œãncy_öãrvÆ
);

230 
deföe_⁄e_rw
(
h¨d_queue_limô
);

231 
deföe_⁄e_rw
(
cmd_queue_wrôes_limô
);

232 
deföe_⁄e_ro
(
h¨dw¨e_vîsi⁄
);

233 
deföe_⁄e_rw
(
ecc_Áûuª_øã_thªshﬁd
);

234 
deföe_⁄e_ro
(
˝s_¸c
);

235 
deföe_⁄e_rw
(
Á°_ªad
);

236 
deföe_⁄e_rw
(
dr›_ˇche
);

237 
deföe_⁄e_rw
(
¥e„tch_£qªad_thªshﬁd
);

238 
deföe_⁄e_rw
(
¥e„tch_pﬁl_times_thªshﬁd
);

239 
deföe_⁄e_rw
(
¥e„tch_so·_bio_size_thªshﬁd
);

240 
deföe_⁄e_rw
(
¥e„tch_h¨d_bio_size_thªshﬁd
);

241 
deföe_⁄e_rw
(
¥e„tch_œrge_block_io_thªshﬁd
);

242 
deföe_⁄e_rw
(
¥e„tch_di°™˚_Á˘‹
);

243 
deföe_⁄e_rw
(
¥e„tch_íabÀ
);

244 
deföe_⁄e_rw
(
¥e„tch_åaffic_Á˘‹
);

246 
deföe_⁄e_rw
(
upd©e_úq_dñay_öãrvÆ
);

247 
deföe_⁄e_rw
(
ªad_œãncy_divide
);

248 
deföe_⁄e_rw
(
wrôe_œãncy_divide
);

249 
deföe_⁄e_rw
(
ªad_thªshﬁd_Á˘‹
);

250 
deföe_⁄e_rw
(
wrôe_thªshﬁd_Á˘‹
);

251 
deföe_⁄e_rw
(
dy«mic_úq_dñay
);

252 
deföe_⁄e_rw
(
úq_dñay_Á˘‹
);

253 
deföe_⁄e_rw
(
mö_úq_dñay
);

254 
deföe_⁄e_rw
(
max_úq_dñay
);

256 #ifde‡
CONFIG_HWMON


257 
deföe_⁄e_devi˚_ro
(
«me
);

258 
deföe_⁄e_devi˚_ro
(
ãmp1_öput
);

259 
deföe_⁄e_devi˚_ro
(
ãmp1_œbñ
);

260 
deföe_⁄e_devi˚_ro
(
ãmp1_max
);

261 
deföe_⁄e_devi˚_ro
(
ãmp1_¸ô
);

262 
deföe_⁄e_devi˚_ro
(
ãmp2_öput
);

263 
deföe_⁄e_devi˚_ro
(
ãmp2_œbñ
);

264 
deföe_⁄e_devi˚_ro
(
ãmp2_max
);

265 
deföe_⁄e_devi˚_ro
(
ãmp2_¸ô
);

266 
deföe_⁄e_devi˚_ro
(
ãmp3_öput
);

267 
deföe_⁄e_devi˚_ro
(
ãmp3_œbñ
);

268 
deföe_⁄e_devi˚_ro
(
ãmp3_max
);

269 
deföe_⁄e_devi˚_ro
(
ãmp3_¸ô
);

271 
devi˚_©åibuã
 *
	gsh™n⁄_hwm⁄_©ås
[] = {

272 &
«me
.
©å
,

273 &
ãmp1_öput
.
©å
,

274 &
ãmp1_œbñ
.
©å
,

275 &
ãmp1_max
.
©å
,

276 &
ãmp1_¸ô
.
©å
,

277 &
ãmp2_öput
.
©å
,

278 &
ãmp2_œbñ
.
©å
,

279 &
ãmp2_max
.
©å
,

280 &
ãmp2_¸ô
.
©å
,

281 &
ãmp3_öput
.
©å
,

282 &
ãmp3_œbñ
.
©å
,

283 &
ãmp3_max
.
©å
,

284 &
ãmp3_¸ô
.
©å
,

285 
NULL
,

289 
©åibuã
 *
	gsh™n⁄_deÁu…_©ås
[] = {

290 &
modñ
.
©å
,

291 &
fúmw¨e_vîsi⁄
.
©å
,

292 &
fúmw¨e_buûd
.
©å
,

293 &
drivî_vîsi⁄
.
©å
,

294 &
£rül_numbî
.
©å
,

295 &
«nd_m™uÁ˘uªr
.
©å
,

296 &
«nd_Êash_id
.
©å
,

297 &
ch™√ls
.
©å
,

298 &
lun£ts_ö_ch™√l
.
©å
,

299 &
luns_ö_lun£t
.
©å
,

300 &
avaûabÀ_luns
.
©å
,

301 &
eblocks_ö_lun
.
©å
,

302 &
∑ges_ö_eblock
.
©å
,

303 &
«nd_∑ge_size
.
©å
,

304 &
block_size
.
©å
,

305 &
u£_duÆ_hód
.
©å
,

306 &
powî_⁄_£c⁄ds
.
©å
,

307 &
powî_cy˛e_cou¡
.
©å
,

308 &
u£r_ˇ∑côy
.
©å
,

309 &
physiˇl_ˇ∑côy
.
©å
,

310 &
ovî¥ovisi⁄
.
©å
,

311 &
‰ì_blk˙t
.
©å
,

312 &
°©ic_bad_blk˙t
.
©å
,

313 &
dy«mic_bad_blk˙t
.
©å
,

314 &
max_îr_blocks
.
©å
,

315 &
ªc⁄fig_suµ‹t
.
©å
,

316 &
£u_Êag
.
©å
,

317 &
£u_¸c_îr‹
.
©å
,

318 &
£u_¸c_îr‹_hi°‹y
.
©å
,

319 &
£u_ecc_îr‹
.
©å
,

320 &
£u_ecc_îr‹_hi°‹y
.
©å
,

321 &
e°im©ed_li„_À·
.
©å
,

322 &
ho°_wrôe_£˘‹s
.
©å
,

323 &
ho°_wrôe_b™dwidth
.
©å
,

324 &
ho°_wrôe_i›s
.
©å
,

325 &
ho°_wrôe_œãncy
.
©å
,

326 &
tŸÆ_wrôe_£˘‹s
.
©å
,

327 &
tŸÆ_wrôe_b™dwidth
.
©å
,

328 &
wrôe_am∂ifõr
.
©å
,

329 &
wrôe_am∂ifõr_li„time
.
©å
,

330 &
ho°_ªad_£˘‹s
.
©å
,

331 &
ho°_ªad_b™dwidth
.
©å
,

332 &
ho°_ªad_i›s
.
©å
,

333 &
ho°_ªad_œãncy
.
©å
,

334 &
tŸÆ_gc_logicbs
.
©å
,

335 &
tŸÆ_wl_logicbs
.
©å
,

336 &
tŸÆ_îr_ªcovî_logicbs
.
©å
,

337 &
ãm≥øtuª_öt
.
©å
,

338 &
ãm≥øtuª_öt_max
.
©å
,

339 &
ãm≥øtuª_Êash
.
©å
,

340 &
ãm≥øtuª_Êash_max
.
©å
,

341 &
ãm≥øtuª_bﬂrd
.
©å
,

342 &
ãm≥øtuª_bﬂrd_max
.
©å
,

343 &
ãm≥øtuª_w¨nög_thªshﬁd
.
©å
,

344 &
vﬁège_öt
.
©å
,

345 &
vﬁège_öt_max
.
©å
,

346 &
vﬁège_aux
.
©å
,

347 &
vﬁège_aux_max
.
©å
,

348 &
ecc_Áûuª_times
.
©å
,

349 &
ecc_°©i°ics
.
©å
,

350 &
devi˚_°©e
.
©å
,

351 &
ac˚ss_mode
.
©å
,

352 &
ªad⁄ly_ªas⁄
.
©å
,

353 &
ªdu˚d_wrôe_ªas⁄
.
©å
,

354 &
pm_qos_vÆue
.
©å
,

355 &
ªcovî_øã
.
©å
,

356 &
hŸ_block_ª˛aim_¥i‹ôy
.
©å
,

357 &
su•icious_bad_lun_ödiˇt‹
.
©å
,

358 &
debug_Àvñ
.
©å
,

359 &
sh™n⁄_buf„r_wrôe
.
©å
,

360 &
sh™n⁄_pﬁl_times
.
©å
,

361 &
ªad_îr_msg_Àvñ
.
©å
,

362 &
wl_debug
.
©å
,

363 &
îr_check_debug
.
©å
,

364 &
ªad_di°urb_thªshﬁd
.
©å
,

365 &
›í_block_ªad_di°urb_thªshﬁd
.
©å
,

366 &
wl_timî_öãrvÆ
.
©å
,

367 &
max_ö_wl_logicbs
.
©å
,

368 &
wl_max_îa£_cou¡
.
©å
,

369 &
wl_îa£_cou¡_dñè_0
.
©å
,

370 &
wl_îa£_cou¡_dñè_1
.
©å
,

371 &
fûl_chunk_timî_expúe
.
©å
,

372 &
≥riod_ªad_≥riod
.
©å
,

373 &
≥riod_ªad_µa
.
©å
,

374 &
swôch_mi¸ocode
.
©å
,

375 &
£rvi˚_èg
.
©å
,

376 &
Âga_d«
.
©å
,

377 &
udid
.
©å
,

378 &
ª‰esh_mbr_cou¡
.
©å
,

379 &
©omic_wrôe
.
©å
,

380 &
¥i‹ôize_wrôe
.
©å
,

381 &
n⁄Æig√d_bios
.
©å
,

382 &
¥öt_œãncy_öãrvÆ
.
©å
,

383 &
h¨d_queue_limô
.
©å
,

384 &
cmd_queue_wrôes_limô
.
©å
,

385 &
h¨dw¨e_vîsi⁄
.
©å
,

386 &
ecc_Áûuª_øã_thªshﬁd
.
©å
,

387 &
˝s_¸c
.
©å
,

388 &
upd©e_úq_dñay_öãrvÆ
.
©å
,

389 &
ªad_œãncy_divide
.
©å
,

390 &
wrôe_œãncy_divide
.
©å
,

391 &
wrôe_thªshﬁd_Á˘‹
.
©å
,

392 &
ªad_thªshﬁd_Á˘‹
.
©å
,

393 &
dy«mic_úq_dñay
.
©å
,

394 &
úq_dñay_Á˘‹
.
©å
,

395 &
mö_úq_dñay
.
©å
,

396 &
max_úq_dñay
.
©å
,

397 &
Á°_ªad
.
©å
,

398 &
dr›_ˇche
.
©å
,

399 &
¥e„tch_£qªad_thªshﬁd
.
©å
,

400 &
¥e„tch_pﬁl_times_thªshﬁd
.
©å
,

401 &
¥e„tch_so·_bio_size_thªshﬁd
.
©å
,

402 &
¥e„tch_h¨d_bio_size_thªshﬁd
.
©å
,

403 &
¥e„tch_œrge_block_io_thªshﬁd
.
©å
,

404 &
¥e„tch_di°™˚_Á˘‹
.
©å
,

405 &
¥e„tch_íabÀ
.
©å
,

406 &
¥e„tch_åaffic_Á˘‹
.
©å
,

407 
NULL
,

410 
sh™n⁄_ssize_t
 
	$pci_öfo_show
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, *
buf
)

412 
sh™n⁄_dev
 *
sdev
 = 
	`to_sh™n⁄_dev
((
sh™n⁄_kobje˘_t
 *)
kobj
->
∑ª¡
);

413 
sh™n⁄_©å
 *
ßâr
 = 
	`to_sh™n⁄_©å
(
©å
);

414 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

416 if(
ßâr
->
show
)

417 
ªt
 = 
ßâr
->
	`show
(
sdev
, 
buf
);

419 
ªt
 = -
EIO
;

421  
ªt
;

422 
	}
}

424 
sh™n⁄_ssize_t
 
	$pci_öfo_°‹e
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

426 
sh™n⁄_dev
 *
sdev
 = 
	`to_sh™n⁄_dev
((
sh™n⁄_kobje˘_t
 *)
kobj
->
∑ª¡
);

427 
sh™n⁄_©å
 *
ßâr
 = 
	`to_sh™n⁄_©å
(
©å
);

428 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

430 if(
ßâr
->
°‹e
)

431 
ªt
 = 
ßâr
->
	`°‹e
(
sdev
, 
buf
, 
cou¡
);

433 
ªt
 = -
EIO
;

435  
ªt
;

436 
	}
}

438 
sysfs_›s
 
	gpci_öfo_sysfs_›s
 = {

439 .
show
 = 
pci_öfo_show
,

440 .
	g°‹e
 = 
pci_öfo_°‹e
,

443 
deföe_⁄e_ro
(
víd‹_id
);

444 
deföe_⁄e_ro
(
devi˚_id
);

445 
deföe_⁄e_ro
(
subsy°em_víd‹_id
);

446 
deföe_⁄e_ro
(
subsy°em_devi˚_id
);

447 
deföe_⁄e_ro
(
pci_addªss
);

448 
deföe_⁄e_ro
(
pci_˛ass
);

449 
deföe_⁄e_ro
(
lökˇp
);

450 
deföe_⁄e_ro
(
lök°a
);

452 
©åibuã
 *
	gpci_öfo_deÁu…_©ås
[] = {

453 &
víd‹_id
.
©å
,

454 &
devi˚_id
.
©å
,

455 &
subsy°em_víd‹_id
.
©å
,

456 &
subsy°em_devi˚_id
.
©å
,

457 &
pci_addªss
.
©å
,

458 &
pci_˛ass
.
©å
,

459 &
lökˇp
.
©å
,

460 &
lök°a
.
©å
,

461 
NULL
,

464 
kobj_ty≥
 
	gsh™n⁄_kty≥
 = {

465 .
sysfs_›s
 = &
sh™n⁄_sysfs_›s
,

466 .
	gdeÁu…_©ås
 = 
sh™n⁄_deÁu…_©ås
,

467 .
	gªÀa£
 = 
sh™n⁄_sysfs_ªÀa£
,

470 
kobj_ty≥
 
	gpci_öfo_kty≥
 = {

471 .
sysfs_›s
 = &
pci_öfo_sysfs_›s
,

472 .
	gdeÁu…_©ås
 = 
pci_öfo_deÁu…_©ås
,

473 .
	gªÀa£
 = 
sh™n⁄_sysfs_ªÀa£
,

476 
	$sh™n⁄_sysfs_öô
(
sh™n⁄_kobje˘_t
 *
skobj
)

478 
ªt
;

479 
kobje˘
 *
pci_öfo
 = (kobje˘ *)
	`to_sh™n⁄_pci_öfo_kobj
(
skobj
);

480 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
	`to_sdev_misc
(
skobj
);

481 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

482 
kobje˘
 *
dev_kobj
 = &
misc
->
this_devi˚
->
kobj
;

484 
kobje˘
 *
dev_kobj
 = &
misc
->
˛ass
->
kobj
;

487 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

488 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

489 
ªt
 = 
	`kobje˘_öô_™d_add
((
kobje˘
 *)
skobj
, &
sh™n⁄_kty≥
, 
dev_kobj
, "shannon");

490 i‡(
ªt
)

491  
ªt
;

493 
	`mem£t
(
pci_öfo
, 0x00, (
sh™n⁄_kobje˘_t
));

494 
ªt
 = 
	`kobje˘_öô_™d_add
(
pci_öfo
, &
pci_öfo_kty≥
, (
kobje˘
 *)
skobj
, "pci_info");

495 i‡(
ªt
)

496 
dñ_skobj
;

498 
kobje˘
 *
kobj
 = (kobje˘*)
skobj
;

500 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

501 
	`kobje˘_öô
(
kobj
);

502 
kobj
->
∑ª¡
 = 
dev_kobj
;

503 
	`kobje˘_£t_«me
(
kobj
, "shannon");

504 
kobj
->
kty≥
 = &
sh™n⁄_kty≥
;

505 
ªt
 = 
	`kobje˘_add
(
kobj
);

506 i‡(
ªt
)

507  
ªt
;

509 
	`mem£t
(
pci_öfo
, 0x00, (
sh™n⁄_kobje˘_t
));

510 
	`kobje˘_öô
(
pci_öfo
);

511 
pci_öfo
->
∑ª¡
 = 
kobj
;

512 
	`kobje˘_£t_«me
(
pci_öfo
, "pci_info");

513 
pci_öfo
->
kty≥
 = &
pci_öfo_kty≥
;

514 
ªt
 = 
	`kobje˘_add
(
pci_öfo
);

515 i‡(
ªt
)

516 
dñ_skobj
;

519  
ªt
;

520 
dñ_skobj
:

521 
	`kobje˘_dñ
((
kobje˘
 *)
skobj
);

523  
ªt
;

524 
	}
}

526 
	$sh™n⁄_sysfs_exô
(
sh™n⁄_kobje˘_t
 *
skobj
)

528 
kobje˘
 *
pci_öfo
 = (kobje˘ *)
	`to_sh™n⁄_pci_öfo_kobj
(
skobj
);

530 
	`kobje˘_dñ
(
pci_öfo
);

531 
	`kobje˘_dñ
((
kobje˘
 *)
skobj
);

532 
	}
}

534 
kobje˘
 *
	$to_sdev_kobj
(
sh™n⁄_kobje˘_t
 *
skobj
)

536 
gídisk
 *
disk
 = (gídisk *)
	`to_sh™n⁄_disk
(
skobj
);

537 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

538 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

539  &
	`disk_to_dev
(
disk
)->
kobj
;

541  &
disk
->
dev
.
kobj
;

545  &
disk
->
kobj
;

547 
	}
}

549 
	$sh™n⁄_sysfs_lök
(
sh™n⁄_kobje˘_t
 *
skobj
)

551 
kobje˘
 *
sdev_kobj
 = 
	`to_sdev_kobj
(
skobj
);

552  
	`sysfs_¸óã_lök
(
sdev_kobj
, (
kobje˘
 *)
skobj
, "shannon");

553 
	}
}

555 
	$sh™n⁄_sysfs_u∆ök
(
sh™n⁄_kobje˘_t
 *
skobj
)

557 
kobje˘
 *
sdev_kobj
 = 
	`to_sdev_kobj
(
skobj
);

558 
	`sysfs_ªmove_lök
(
sdev_kobj
, "shannon");

559 
	}
}

561 
sh™n⁄_devi˚_t
 *
	$sh™n⁄_hwm⁄_öô
(
sh™n⁄_pci_dev_t
 *
pdev
)

563 #ifde‡
CONFIG_HWMON


564 
devi˚
 *
dev
 = &((
pci_dev
 *)
pdev
)->dev;

565 
devi˚
 *
hwm⁄_dev
 = 
NULL
;

567 
îr
 = 0;

568 
i
;

571 
i
 = 0; 
sh™n⁄_hwm⁄_©ås
[i] && !
îr
; i++)

572 
îr
 = 
	`devi˚_¸óã_fûe
(
dev
, 
sh™n⁄_hwm⁄_©ås
[
i
]);

574 i‡(
îr
) {

575 --
i
 >= 0)

576 
	`devi˚_ªmove_fûe
(
dev
, 
sh™n⁄_hwm⁄_©ås
[
i
]);

577 
	`sh™n⁄_w¨n
("create hwmon sysfs files failed!");

578  
NULL
;

581 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 10, 0)

582 
hwm⁄_dev
 = 
	`hwm⁄_devi˚_ªgi°î
(
dev
);

584 
hwm⁄_dev
 = 
	`hwm⁄_devi˚_ªgi°î_wôh_öfo
(
dev
, 
NULL
, NULL, NULL, NULL);

586 i‡(
	`IS_ERR
(
hwm⁄_dev
)) {

587 
	`sh™n⁄_w¨n
("hwmon_device_register failed!");

588 
i
 = 0; 
sh™n⁄_hwm⁄_©ås
[i]; i++)

589 
	`devi˚_ªmove_fûe
(
dev
, 
sh™n⁄_hwm⁄_©ås
[
i
]);

590  
NULL
;

593  
hwm⁄_dev
;

595  
NULL
;

597 
	}
}

599 
	$sh™n⁄_hwm⁄_exô
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_devi˚_t
 *
hwm⁄_dev
)

601 #ifde‡
CONFIG_HWMON


602 
devi˚
 *
dev
 = &((
pci_dev
 *)
pdev
)->dev;

603 
i
;

605 i‡(
	`SHANNON_IS_ERR_OR_NULL
(
hwm⁄_dev
))

608 
	`hwm⁄_devi˚_uƒegi°î
((
devi˚
 *)
hwm⁄_dev
);

609 
i
 = 0; 
sh™n⁄_hwm⁄_©ås
[i]; i++)

610 
	`devi˚_ªmove_fûe
(
dev
, 
sh™n⁄_hwm⁄_©ås
[
i
]);

612 
	}
}

616 
	ssh™n⁄_©å_ns
 {

617 
©åibuã
 
	m©å
;

618 
sh™n⁄_ssize_t
 (*
show
)(
	msh™n⁄_«me•a˚
 *, *);

619 
sh™n⁄_ssize_t
 (*
°‹e
)(
	msh™n⁄_«me•a˚
 *, c⁄° *, 
sh™n⁄_size_t
 
	mcou¡
);

622 
	#deföe_⁄e_rw_ns
(
_«me
) \

623 
sh™n⁄_©å_ns
 
_«me
##
_ns
 = \

624 
	`__ATTR
(
_«me
, 0644, _«me##
_ns_show
, _«me##
_ns_°‹e
)

	)

630 
	#deföe_⁄e_ro_ns
(
_«me
) \

631 
sh™n⁄_©å_ns
 
_«me
##
_ns
 = \

632 
	`__ATTR
(
_«me
, 0444, _«me##
_ns_show
, 
NULL
)

	)

635 
	#to_sh™n⁄_©å_ns
(
a
Ë
	`c⁄èöî_of
◊, 
sh™n⁄_©å_ns
, 
©å
)

	)

637 
sh™n⁄_ssize_t
 
	$sh™n⁄_show_ns
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, *
buf
)

639 
sh™n⁄_«me•a˚
 *
ns
 = 
	`to_sh™n⁄_«me•a˚
((
sh™n⁄_kobje˘_t
 *)
kobj
);

640 
sh™n⁄_©å_ns
 *
ßâr
 = 
	`to_sh™n⁄_©å_ns
(
©å
);

641 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

643 i‡(
ßâr
->
show
)

644 
ªt
 = 
ßâr
->
	`show
(
ns
, 
buf
);

646 
ªt
 = -
EIO
;

648  
ªt
;

649 
	}
}

651 
sh™n⁄_ssize_t
 
	$sh™n⁄_°‹e_ns
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

653 
sh™n⁄_«me•a˚
 *
ns
 = 
	`to_sh™n⁄_«me•a˚
((
sh™n⁄_kobje˘_t
 *)
kobj
);

654 
sh™n⁄_©å_ns
 *
ßâr
 = 
	`to_sh™n⁄_©å_ns
(
©å
);

655 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

657 i‡(
ßâr
->
°‹e
)

658 
ªt
 = 
ßâr
->
	`°‹e
(
ns
, 
buf
, 
cou¡
);

660 
ªt
 = -
EIO
;

662  
ªt
;

663 
	}
}

665 
	$sh™n⁄_sysfs_ªÀa£_ns
(
kobje˘
 *
kobj
)

667 
	}
}

669 
sysfs_›s
 
	gsh™n⁄_sysfs_›s_ns
 = {

670 .
show
 = 
sh™n⁄_show_ns
,

671 .
	g°‹e
 = 
sh™n⁄_°‹e_ns
,

674 
deföe_⁄e_ro_ns
(
ho°_wrôe_£˘‹s
);

675 
deföe_⁄e_ro_ns
(
ho°_ªad_£˘‹s
);

676 
deföe_⁄e_ro_ns
(
vÆid_£˘‹s
);

677 
deföe_⁄e_ro_ns
(
≥ndög_bios
);

678 
deföe_⁄e_ro_ns
(
n⁄Æig√d_bios
);

679 
deföe_⁄e_ro_ns
(
£q_num
);

680 
deföe_⁄e_ro_ns
(
rmw_li°
);

681 
deföe_⁄e_rw_ns
(
¥öt_œãncy_öãrvÆ
);

682 
deföe_⁄e_ro_ns
(
u£r_deföed_«me
);

684 
©åibuã
 *
	gsh™n⁄_deÁu…_©ås_ns
[] = {

685 &
ho°_wrôe_£˘‹s_ns
.
©å
,

686 &
ho°_ªad_£˘‹s_ns
.
©å
,

687 &
vÆid_£˘‹s_ns
.
©å
,

688 &
≥ndög_bios_ns
.
©å
,

689 &
n⁄Æig√d_bios_ns
.
©å
,

690 &
£q_num_ns
.
©å
,

691 &
rmw_li°_ns
.
©å
,

692 &
¥öt_œãncy_öãrvÆ_ns
.
©å
,

693 &
u£r_deföed_«me_ns
.
©å
,

694 
NULL
,

697 
kobj_ty≥
 
	gsh™n⁄_kty≥_ns
 = {

698 .
sysfs_›s
 = &
sh™n⁄_sysfs_›s_ns
,

699 .
	gdeÁu…_©ås
 = 
sh™n⁄_deÁu…_©ås_ns
,

700 .
	gªÀa£
 = 
sh™n⁄_sysfs_ªÀa£_ns
,

703 
	$sh™n⁄_sysfs_öô_ns
(
sh™n⁄_kobje˘_t
 *
skobj
)

705 
ªt
;

706 
gídisk
 *
disk
 = (gídisk *)
	`to_sh™n⁄_disk_ns
(
skobj
);

707 *
ns_«me
 = 
	`to_ns_«me
(
skobj
);

708 
kobje˘
 *
ns_kobj
;

709 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
	`ns_to_poﬁ_misc
(
skobj
);

710 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

711 
kobje˘
 *
poﬁ_kobj
 = &
misc
->
this_devi˚
->
kobj
;

713 
kobje˘
 *
poﬁ_kobj
 = &
misc
->
˛ass
->
kobj
;

716 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

717 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

718 
devi˚
 *
ddev
 = 
	`disk_to_dev
(
disk
);

720 
devi˚
 *
ddev
 = &
disk
->
dev
;

722 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

723 
ªt
 = 
	`kobje˘_öô_™d_add
((
kobje˘
 *)
skobj
, &
sh™n⁄_kty≥_ns
, &
ddev
->
kobj
, "shannon");

724 
ns_kobj
 = &
ddev
->
kobj
;

726 
kobje˘
 *
kobj
 = (kobje˘ *)
skobj
;

728 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

729 
	`kobje˘_öô
(
kobj
);

730 
kobj
->
∑ª¡
 = &
disk
->kobj;

731 
	`kobje˘_£t_«me
(
kobj
, "shannon");

732 
kobj
->
kty≥
 = &
sh™n⁄_kty≥_ns
;

733 
ªt
 = 
	`kobje˘_add
(
kobj
);

734 
ns_kobj
 = &
disk
->
kobj
;

737 i‡(
ªt
)

738  
ªt
;

739 
ªt
 = 
	`sysfs_¸óã_lök
(
poﬁ_kobj
, 
ns_kobj
, 
ns_«me
);

740 i‡(
ªt
)

741 
	`kobje˘_dñ
(
ns_kobj
);

742  
ªt
;

743 
	}
}

745 
	$sh™n⁄_sysfs_exô_ns
(
sh™n⁄_kobje˘_t
 *
skobj
)

747 *
ns_«me
 = 
	`to_ns_«me
(
skobj
);

748 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
	`ns_to_poﬁ_misc
(
skobj
);

749 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

750 
kobje˘
 *
poﬁ_kobj
 = &
misc
->
this_devi˚
->
kobj
;

752 
kobje˘
 *
poﬁ_kobj
 = &
misc
->
˛ass
->
kobj
;

754 
	`kobje˘_dñ
((
kobje˘
 *)
skobj
);

755 
	`sysfs_ªmove_lök
(
poﬁ_kobj
, 
ns_«me
);

756 
	}
}

759 
	ssh™n⁄_©å_poﬁ
 {

760 
©åibuã
 
	m©å
;

761 
sh™n⁄_ssize_t
 (*
show
)(
	msh™n⁄_poﬁ
 *, *);

762 
sh™n⁄_ssize_t
 (*
°‹e
)(
	msh™n⁄_poﬁ
 *, c⁄° *, 
sh™n⁄_size_t
 
	mcou¡
);

765 
	#deföe_⁄e_rw_poﬁ
(
_«me
) \

766 
sh™n⁄_©å_poﬁ
 
_«me
##
_poﬁ
 = \

767 
	`__ATTR
(
_«me
, 0644, _«me##
_poﬁ_show
, _«me##
_poﬁ_°‹e
)

	)

773 
	#deföe_⁄e_ro_poﬁ
(
_«me
) \

774 
sh™n⁄_©å_poﬁ
 
_«me
##
_poﬁ
 = \

775 
	`__ATTR
(
_«me
, 0444, _«me##
_poﬁ_show
, 
NULL
)

	)

777 
	#to_sh™n⁄_©å_poﬁ
(
a
Ë
	`c⁄èöî_of
◊, 
sh™n⁄_©å_poﬁ
, 
©å
)

	)

779 
sh™n⁄_ssize_t
 
	$sh™n⁄_show_poﬁ
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, *
buf
)

781 
sh™n⁄_poﬁ
 *
poﬁ
 = 
	`to_sh™n⁄_poﬁ
((
sh™n⁄_kobje˘_t
 *)
kobj
);

782 
sh™n⁄_©å_poﬁ
 *
ßâr
 = 
	`to_sh™n⁄_©å_poﬁ
(
©å
);

783 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

785 i‡(
ßâr
->
show
)

786 
ªt
 = 
ßâr
->
	`show
(
poﬁ
, 
buf
);

788 
ªt
 = -
EIO
;

790  
ªt
;

791 
	}
}

793 
sh™n⁄_ssize_t
 
	$sh™n⁄_°‹e_poﬁ
(
kobje˘
 *
kobj
, 
©åibuã
 *
©å
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

795 
sh™n⁄_poﬁ
 *
poﬁ
 = 
	`to_sh™n⁄_poﬁ
((
sh™n⁄_kobje˘_t
 *)
kobj
);

796 
sh™n⁄_©å_poﬁ
 *
ßâr
 = 
	`to_sh™n⁄_©å_poﬁ
(
©å
);

797 
sh™n⁄_ssize_t
 
ªt
 = -
EINVAL
;

799 i‡(
ßâr
->
°‹e
)

800 
ªt
 = 
ßâr
->
	`°‹e
(
poﬁ
, 
buf
, 
cou¡
);

802 
ªt
 = -
EIO
;

804  
ªt
;

805 
	}
}

807 
	$sh™n⁄_sysfs_ªÀa£_poﬁ
(
kobje˘
 *
kobj
)

809 
	}
}

811 
sysfs_›s
 
	gsh™n⁄_sysfs_›s_poﬁ
 = {

812 .
show
 = 
sh™n⁄_show_poﬁ
,

813 .
	g°‹e
 = 
sh™n⁄_°‹e_poﬁ
,

816 
deföe_⁄e_ro_poﬁ
(
u£d_•a˚_≥r˚¡age
);

817 
deföe_⁄e_ro_poﬁ
(
physiˇl_ˇ∑côy
);

818 
deföe_⁄e_rw_poﬁ
(
ovî¥ovisi⁄
);

819 
deföe_⁄e_rw_poﬁ
(
h¨d_queue_limô
);

821 
©åibuã
 *
	gsh™n⁄_deÁu…_©ås_poﬁ
[] = {

822 &
u£d_•a˚_≥r˚¡age_poﬁ
.
©å
,

823 &
physiˇl_ˇ∑côy_poﬁ
.
©å
,

824 &
ovî¥ovisi⁄_poﬁ
.
©å
,

825 &
h¨d_queue_limô_poﬁ
.
©å
,

826 
NULL
,

829 
kobj_ty≥
 
	gsh™n⁄_kty≥_poﬁ
 = {

830 .
sysfs_›s
 = &
sh™n⁄_sysfs_›s_poﬁ
,

831 .
	gdeÁu…_©ås
 = 
sh™n⁄_deÁu…_©ås_poﬁ
,

832 .
	gªÀa£
 = 
sh™n⁄_sysfs_ªÀa£_poﬁ
,

835 
	$sh™n⁄_sysfs_öô_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
)

837 
ªt
;

838 
miscdevi˚
 *
misc
 = (miscdevi˚ *)
	`to_poﬁ_misc
(
skobj
);

839 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

840 
devi˚
 *
poﬁ_dev
 = 
misc
->
this_devi˚
;

842 
˛ass_devi˚
 *
poﬁ_dev
 = 
misc
->
˛ass
;

845 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

846 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

847 
ªt
 = 
	`kobje˘_öô_™d_add
((
kobje˘
 *)
skobj
, &
sh™n⁄_kty≥_poﬁ
, &
poﬁ_dev
->
kobj
, "shannon");

849 
kobje˘
 *
kobj
 = (kobje˘ *)
skobj
;

851 
	`mem£t
(
skobj
, 0x00, (
sh™n⁄_kobje˘_t
));

852 
	`kobje˘_öô
(
kobj
);

853 
kobj
->
∑ª¡
 = &
poﬁ_dev
->kobj;

854 
	`kobje˘_£t_«me
(
kobj
, "shannon");

855 
kobj
->
kty≥
 = &
sh™n⁄_kty≥_poﬁ
;

856 
ªt
 = 
	`kobje˘_add
(
kobj
);

859  
ªt
;

860 
	}
}

862 
	$sh™n⁄_sysfs_exô_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
)

864 
	`kobje˘_dñ
((
kobje˘
 *)
skobj
);

865 
	}
}

	@shannon_sysfs.h

1 #i‚de‡
__SHANNON_SYSFS_H


2 
	#__SHANNON_SYSFS_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

6 
	s__sh™n⁄_kobje˘
 {

7 
RESERVE_MEM
(152);

10 
__sh™n⁄_kobje˘
 
	tsh™n⁄_kobje˘_t
;

12 
sh™n⁄_sysfs_öô
(
sh™n⁄_kobje˘_t
 *
skobj
);

13 
sh™n⁄_sysfs_exô
(
sh™n⁄_kobje˘_t
 *
skobj
);

14 
sh™n⁄_sysfs_lök
(
sh™n⁄_kobje˘_t
 *
skobj
);

15 
sh™n⁄_sysfs_u∆ök
(
sh™n⁄_kobje˘_t
 *
skobj
);

16 
sh™n⁄_devi˚_t
 *
sh™n⁄_hwm⁄_öô
(
sh™n⁄_pci_dev_t
 *
pdev
);

17 
sh™n⁄_hwm⁄_exô
(
sh™n⁄_pci_dev_t
 *
pdev
, 
sh™n⁄_devi˚_t
 *
hwm⁄_dev
);

19 
	gsh™n⁄_dev
;

21 
sh™n⁄_dev
 * 
to_sh™n⁄_dev
(
sh™n⁄_kobje˘_t
 *
skobj
);

22 *
to_sdev_misc
(
sh™n⁄_kobje˘_t
 *
skobj
);

23 *
to_sh™n⁄_disk
(
sh™n⁄_kobje˘_t
 *
skobj
);

24 
sh™n⁄_kobje˘_t
 *
to_sh™n⁄_pci_öfo_kobj
(sh™n⁄_kobje˘_à*
skobj
);

25 * 
sh™n⁄_disk_«me
(
sh™n⁄_dev
 *
sdev
);

26 
sh™n⁄_ssize_t
 
modñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

27 
sh™n⁄_ssize_t
 
fúmw¨e_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

28 
sh™n⁄_ssize_t
 
fúmw¨e_buûd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

29 
sh™n⁄_ssize_t
 
drivî_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

30 
sh™n⁄_ssize_t
 
£rül_numbî_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

31 
sh™n⁄_ssize_t
 
«nd_m™uÁ˘uªr_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

32 
sh™n⁄_ssize_t
 
«nd_Êash_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

33 
sh™n⁄_ssize_t
 
ch™√ls_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

34 
sh™n⁄_ssize_t
 
lun£ts_ö_ch™√l_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

35 
sh™n⁄_ssize_t
 
luns_ö_lun£t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

36 
sh™n⁄_ssize_t
 
avaûabÀ_luns_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

37 
sh™n⁄_ssize_t
 
eblocks_ö_lun_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

38 
sh™n⁄_ssize_t
 
∑ges_ö_eblock_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

39 
sh™n⁄_ssize_t
 
«nd_∑ge_size_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

40 
sh™n⁄_ssize_t
 
block_size_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

41 
sh™n⁄_ssize_t
 
u£_duÆ_hód_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

42 
sh™n⁄_ssize_t
 
powî_⁄_£c⁄ds_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

43 
sh™n⁄_ssize_t
 
powî_cy˛e_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

44 
sh™n⁄_ssize_t
 
u£r_ˇ∑côy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

45 
sh™n⁄_ssize_t
 
physiˇl_ˇ∑côy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

46 
sh™n⁄_ssize_t
 
ovî¥ovisi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

47 
sh™n⁄_ssize_t
 
‰ì_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

48 
sh™n⁄_ssize_t
 
°©ic_bad_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

49 
sh™n⁄_ssize_t
 
dy«mic_bad_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

50 
sh™n⁄_ssize_t
 
max_îr_blocks_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

51 
sh™n⁄_ssize_t
 
ªc⁄fig_suµ‹t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

52 
sh™n⁄_ssize_t
 
£u_Êag_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

53 
sh™n⁄_ssize_t
 
£u_¸c_îr‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

54 
sh™n⁄_ssize_t
 
£u_¸c_îr‹_hi°‹y_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

55 
sh™n⁄_ssize_t
 
£u_ecc_îr‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

56 
sh™n⁄_ssize_t
 
£u_ecc_îr‹_hi°‹y_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

57 
sh™n⁄_ssize_t
 
e°im©ed_li„_À·_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

58 
sh™n⁄_ssize_t
 
ho°_wrôe_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

59 
sh™n⁄_ssize_t
 
ho°_wrôe_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

60 
sh™n⁄_ssize_t
 
ho°_wrôe_i›s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

61 
sh™n⁄_ssize_t
 
ho°_wrôe_œãncy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

62 
sh™n⁄_ssize_t
 
tŸÆ_wrôe_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

63 
sh™n⁄_ssize_t
 
tŸÆ_wrôe_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

64 
sh™n⁄_ssize_t
 
wrôe_am∂ifõr_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

65 
sh™n⁄_ssize_t
 
wrôe_am∂ifõr_li„time_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

66 
sh™n⁄_ssize_t
 
ho°_ªad_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

67 
sh™n⁄_ssize_t
 
ho°_ªad_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

68 
sh™n⁄_ssize_t
 
ho°_ªad_i›s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

69 
sh™n⁄_ssize_t
 
ho°_ªad_œãncy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

70 
sh™n⁄_ssize_t
 
tŸÆ_gc_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

71 
sh™n⁄_ssize_t
 
tŸÆ_wl_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

72 
sh™n⁄_ssize_t
 
tŸÆ_îr_ªcovî_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

73 
sh™n⁄_ssize_t
 
ãm≥øtuª_öt_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

74 
sh™n⁄_ssize_t
 
ãm≥øtuª_öt_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

75 
sh™n⁄_ssize_t
 
ãm≥øtuª_Êash_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

76 
sh™n⁄_ssize_t
 
ãm≥øtuª_Êash_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

77 
sh™n⁄_ssize_t
 
ãm≥øtuª_bﬂrd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

78 
sh™n⁄_ssize_t
 
ãm≥øtuª_bﬂrd_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

79 
sh™n⁄_ssize_t
 
ãm≥øtuª_w¨nög_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

80 
sh™n⁄_ssize_t
 
ãm≥øtuª_w¨nög_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

81 
sh™n⁄_ssize_t
 
vﬁège_öt_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

82 
sh™n⁄_ssize_t
 
vﬁège_öt_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

83 
sh™n⁄_ssize_t
 
vﬁège_aux_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

84 
sh™n⁄_ssize_t
 
vﬁège_aux_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

85 
sh™n⁄_ssize_t
 
ecc_Áûuª_times_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

86 
sh™n⁄_ssize_t
 
ecc_°©i°ics_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

87 
sh™n⁄_ssize_t
 
devi˚_°©e_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

88 
sh™n⁄_ssize_t
 
ac˚ss_mode_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

89 
sh™n⁄_ssize_t
 
ªdu˚d_wrôe_ªas⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

90 
sh™n⁄_ssize_t
 
ªad⁄ly_ªas⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

91 
sh™n⁄_ssize_t
 
pm_qos_vÆue_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

92 
sh™n⁄_ssize_t
 
pm_qos_vÆue_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

93 
sh™n⁄_ssize_t
 
ªcovî_øã_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

94 
sh™n⁄_ssize_t
 
ªcovî_øã_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

95 
sh™n⁄_ssize_t
 
hŸ_block_ª˛aim_¥i‹ôy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

96 
sh™n⁄_ssize_t
 
hŸ_block_ª˛aim_¥i‹ôy_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

97 
sh™n⁄_ssize_t
 
su•icious_bad_lun_ödiˇt‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

98 
sh™n⁄_ssize_t
 
su•icious_bad_lun_ödiˇt‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

99 
sh™n⁄_ssize_t
 
debug_Àvñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

100 
sh™n⁄_ssize_t
 
debug_Àvñ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

101 
sh™n⁄_ssize_t
 
sh™n⁄_buf„r_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

102 
sh™n⁄_ssize_t
 
sh™n⁄_buf„r_wrôe_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

103 
sh™n⁄_ssize_t
 
sh™n⁄_pﬁl_times_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

104 
sh™n⁄_ssize_t
 
sh™n⁄_pﬁl_times_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

105 
sh™n⁄_ssize_t
 
ªad_îr_msg_Àvñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

106 
sh™n⁄_ssize_t
 
ªad_îr_msg_Àvñ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

107 
sh™n⁄_ssize_t
 
wl_debug_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

108 
sh™n⁄_ssize_t
 
wl_debug_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

109 
sh™n⁄_ssize_t
 
îr_check_debug_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

110 
sh™n⁄_ssize_t
 
îr_check_debug_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

111 
sh™n⁄_ssize_t
 
ªad_di°urb_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

112 
sh™n⁄_ssize_t
 
ªad_di°urb_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

113 
sh™n⁄_ssize_t
 
›í_block_ªad_di°urb_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

114 
sh™n⁄_ssize_t
 
›í_block_ªad_di°urb_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

115 
sh™n⁄_ssize_t
 
wl_timî_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

116 
sh™n⁄_ssize_t
 
wl_timî_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

117 
sh™n⁄_ssize_t
 
max_ö_wl_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

118 
sh™n⁄_ssize_t
 
max_ö_wl_logicbs_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

119 
sh™n⁄_ssize_t
 
wl_max_îa£_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

120 
sh™n⁄_ssize_t
 
wl_max_îa£_cou¡_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

121 
sh™n⁄_ssize_t
 
wl_îa£_cou¡_dñè_0_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

122 
sh™n⁄_ssize_t
 
wl_îa£_cou¡_dñè_0_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

123 
sh™n⁄_ssize_t
 
wl_îa£_cou¡_dñè_1_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

124 
sh™n⁄_ssize_t
 
wl_îa£_cou¡_dñè_1_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

125 
sh™n⁄_ssize_t
 
fûl_chunk_timî_expúe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

126 
sh™n⁄_ssize_t
 
fûl_chunk_timî_expúe_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

127 
sh™n⁄_ssize_t
 
£rvi˚_èg_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

128 
sh™n⁄_ssize_t
 
Âga_d«_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

129 
sh™n⁄_ssize_t
 
udid_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

130 
sh™n⁄_ssize_t
 
ª‰esh_mbr_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

131 
sh™n⁄_ssize_t
 
©omic_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

132 
sh™n⁄_ssize_t
 
¥i‹ôize_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

133 
sh™n⁄_ssize_t
 
n⁄Æig√d_bios_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

134 
sh™n⁄_ssize_t
 
«me_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

135 
sh™n⁄_ssize_t
 
ãmp1_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

136 
sh™n⁄_ssize_t
 
ãmp1_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

137 
sh™n⁄_ssize_t
 
ãmp1_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

138 
sh™n⁄_ssize_t
 
ãmp1_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

139 
sh™n⁄_ssize_t
 
ãmp2_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

140 
sh™n⁄_ssize_t
 
ãmp2_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

141 
sh™n⁄_ssize_t
 
ãmp2_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

142 
sh™n⁄_ssize_t
 
ãmp2_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

143 
sh™n⁄_ssize_t
 
ãmp3_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

144 
sh™n⁄_ssize_t
 
ãmp3_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

145 
sh™n⁄_ssize_t
 
ãmp3_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

146 
sh™n⁄_ssize_t
 
ãmp3_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

148 
sh™n⁄_ssize_t
 
víd‹_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

149 
sh™n⁄_ssize_t
 
devi˚_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

150 
sh™n⁄_ssize_t
 
subsy°em_víd‹_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

151 
sh™n⁄_ssize_t
 
subsy°em_devi˚_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

152 
sh™n⁄_ssize_t
 
pci_addªss_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

153 
sh™n⁄_ssize_t
 
pci_˛ass_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

154 
sh™n⁄_ssize_t
 
lökˇp_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

155 
sh™n⁄_ssize_t
 
lök°a_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

156 
sh™n⁄_ssize_t
 
≥riod_ªad_≥riod_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

157 
sh™n⁄_ssize_t
 
≥riod_ªad_≥riod_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

158 
sh™n⁄_ssize_t
 
≥riod_ªad_µa_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

159 
sh™n⁄_ssize_t
 
≥riod_ªad_µa_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

160 
sh™n⁄_ssize_t
 
swôch_mi¸ocode_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

161 
sh™n⁄_ssize_t
 
swôch_mi¸ocode_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

162 
sh™n⁄_ssize_t
 
¥öt_œãncy_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

163 
sh™n⁄_ssize_t
 
¥öt_œãncy_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

164 
sh™n⁄_ssize_t
 
h¨d_queue_limô_show
(
sh™n⁄_dev
 *, *
buf
);

165 
sh™n⁄_ssize_t
 
h¨d_queue_limô_°‹e
(
sh™n⁄_dev
 *, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

166 
sh™n⁄_ssize_t
 
cmd_queue_wrôes_limô_show
(
sh™n⁄_dev
 *, *
buf
);

167 
sh™n⁄_ssize_t
 
cmd_queue_wrôes_limô_°‹e
(
sh™n⁄_dev
 *, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

168 
sh™n⁄_ssize_t
 
h¨dw¨e_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

169 
sh™n⁄_ssize_t
 
ecc_Áûuª_øã_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

170 
sh™n⁄_ssize_t
 
ecc_Áûuª_øã_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

171 
sh™n⁄_ssize_t
 
˝s_¸c_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

172 
sh™n⁄_ssize_t
 
Á°_ªad_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

173 
sh™n⁄_ssize_t
 
Á°_ªad_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

175 
sh™n⁄_ssize_t
 
upd©e_úq_dñay_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

176 
sh™n⁄_ssize_t
 
upd©e_úq_dñay_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

177 
sh™n⁄_ssize_t
 
dy«mic_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

178 
sh™n⁄_ssize_t
 
dy«mic_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

179 
sh™n⁄_ssize_t
 
úq_dñay_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

180 
sh™n⁄_ssize_t
 
úq_dñay_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

181 
sh™n⁄_ssize_t
 
max_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

182 
sh™n⁄_ssize_t
 
max_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

183 
sh™n⁄_ssize_t
 
mö_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

184 
sh™n⁄_ssize_t
 
mö_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

185 
sh™n⁄_ssize_t
 
ªad_œãncy_divide_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

186 
sh™n⁄_ssize_t
 
ªad_œãncy_divide_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

187 
sh™n⁄_ssize_t
 
wrôe_œãncy_divide_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

188 
sh™n⁄_ssize_t
 
wrôe_œãncy_divide_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

189 
sh™n⁄_ssize_t
 
wrôe_thªshﬁd_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

190 
sh™n⁄_ssize_t
 
wrôe_thªshﬁd_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

191 
sh™n⁄_ssize_t
 
ªad_thªshﬁd_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

192 
sh™n⁄_ssize_t
 
ªad_thªshﬁd_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

193 
sh™n⁄_ssize_t
 
dr›_ˇche_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

194 
sh™n⁄_ssize_t
 
dr›_ˇche_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

195 
sh™n⁄_ssize_t
 
¥e„tch_£qªad_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

196 
sh™n⁄_ssize_t
 
¥e„tch_£qªad_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

197 
sh™n⁄_ssize_t
 
¥e„tch_pﬁl_times_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

198 
sh™n⁄_ssize_t
 
¥e„tch_pﬁl_times_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

199 
sh™n⁄_ssize_t
 
¥e„tch_so·_bio_size_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

200 
sh™n⁄_ssize_t
 
¥e„tch_so·_bio_size_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

201 
sh™n⁄_ssize_t
 
¥e„tch_h¨d_bio_size_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

202 
sh™n⁄_ssize_t
 
¥e„tch_h¨d_bio_size_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

203 
sh™n⁄_ssize_t
 
¥e„tch_œrge_block_io_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

204 
sh™n⁄_ssize_t
 
¥e„tch_œrge_block_io_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

205 
sh™n⁄_ssize_t
 
¥e„tch_di°™˚_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

206 
sh™n⁄_ssize_t
 
¥e„tch_di°™˚_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

207 
sh™n⁄_ssize_t
 
¥e„tch_íabÀ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

208 
sh™n⁄_ssize_t
 
¥e„tch_íabÀ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

209 
sh™n⁄_ssize_t
 
¥e„tch_åaffic_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
);

210 
sh™n⁄_ssize_t
 
¥e„tch_åaffic_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

214 *
to_ns_«me
(
sh™n⁄_kobje˘_t
 *
skobj
);

215 *
ns_to_poﬁ_misc
(
sh™n⁄_kobje˘_t
 *
skobj
);

216 
sh™n⁄_«me•a˚
 *
to_sh™n⁄_«me•a˚
(
sh™n⁄_kobje˘_t
 *
skobj
);

217 *
to_sh™n⁄_disk_ns
(
sh™n⁄_kobje˘_t
 *
skobj
);

218 
sh™n⁄_ssize_t
 
ho°_wrôe_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

219 
sh™n⁄_ssize_t
 
ho°_ªad_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

220 
sh™n⁄_ssize_t
 
vÆid_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

221 
sh™n⁄_ssize_t
 
≥ndög_bios_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

222 
sh™n⁄_ssize_t
 
n⁄Æig√d_bios_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

223 
sh™n⁄_ssize_t
 
£q_num_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

224 
sh™n⁄_ssize_t
 
rmw_li°_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

225 
sh™n⁄_ssize_t
 
¥öt_œãncy_öãrvÆ_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

226 
sh™n⁄_ssize_t
 
¥öt_œãncy_öãrvÆ_ns_°‹e
(
sh™n⁄_«me•a˚
 *
ns
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

227 
sh™n⁄_ssize_t
 
u£r_deföed_«me_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
);

228 
sh™n⁄_sysfs_öô_ns
(
sh™n⁄_kobje˘_t
 *
skobj
);

229 
sh™n⁄_sysfs_exô_ns
(
sh™n⁄_kobje˘_t
 *
skobj
);

232 
sh™n⁄_poﬁ
 *
to_sh™n⁄_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
);

233 *
to_poﬁ_misc
(
sh™n⁄_kobje˘_t
 *
skobj
);

234 
sh™n⁄_ssize_t
 
u£d_•a˚_≥r˚¡age_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
);

235 
sh™n⁄_ssize_t
 
physiˇl_ˇ∑côy_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
);

236 
sh™n⁄_sysfs_öô_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
);

237 
sh™n⁄_sysfs_exô_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
);

238 
sh™n⁄_ssize_t
 
ovî¥ovisi⁄_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
);

239 
sh™n⁄_ssize_t
 
ovî¥ovisi⁄_poﬁ_°‹e
(
sh™n⁄_poﬁ
 *
•oﬁ
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

240 
sh™n⁄_ssize_t
 
h¨d_queue_limô_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
);

241 
sh™n⁄_ssize_t
 
h¨d_queue_limô_poﬁ_°‹e
(
sh™n⁄_poﬁ
 *
•oﬁ
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
);

	@shannon_sysfs_core.c

5 
sh™n⁄_dev
 * 
	$to_sh™n⁄_dev
(
sh™n⁄_kobje˘_t
 *
skobj
)

7  
	`c⁄èöî_of
(
skobj
, 
sh™n⁄_dev
, 
sysfs_kobj
);

8 
	}
}

10 *
	$to_sdev_misc
(
sh™n⁄_kobje˘_t
 *
skobj
)

12 
sh™n⁄_dev
 *
p
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_dev, 
sysfs_kobj
);

13  &
p
->
misc
;

14 
	}
}

16 *
	$to_sh™n⁄_disk
(
sh™n⁄_kobje˘_t
 *
skobj
)

18 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_dev, 
sysfs_kobj
);

19  
sdev
->
sdisk
.
gd
;

20 
	}
}

22 
sh™n⁄_kobje˘_t
 *
	$to_sh™n⁄_pci_öfo_kobj
(
sh™n⁄_kobje˘_t
 *
skobj
)

24 
sh™n⁄_dev
 *
sdev
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_dev, 
sysfs_kobj
);

25  &
sdev
->
sysfs_pci_öfo_kobj
;

26 
	}
}

28 * 
	$sh™n⁄_disk_«me
(
sh™n⁄_dev
 *
sdev
)

30  
sdev
->
sdisk
.
disk_«me
;

31 
	}
}

33 
sh™n⁄_ssize_t
 
	$«nd_m™uÁ˘uªr_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

35  
	`sh™n⁄_•rötf
(
buf
, "%0#Œx\n", 
sdev
->
mbr
.
«nd_m™uÁ˘uª
);

36 
	}
}

38 
sh™n⁄_ssize_t
 
	$«nd_Êash_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

40  
	`sh™n⁄_•rötf
(
buf
, "%0#Œx\n", 
sdev
->
mbr
.
«nd_id
);

41 
	}
}

43 
sh™n⁄_ssize_t
 
	$ch™√ls_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

45  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
cfg_ch™√ls
);

46 
	}
}

48 
sh™n⁄_ssize_t
 
	$lun£ts_ö_ch™√l_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

50  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
cfg_lun£t_ö_ch™√l
);

51 
	}
}

53 
sh™n⁄_ssize_t
 
	$luns_ö_lun£t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

55  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
cfg_lun_ö_lun£t
);

56 
	}
}

58 
sh™n⁄_ssize_t
 
	$avaûabÀ_luns_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

60  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
lun_amou¡
);

61 
	}
}

63 
sh™n⁄_ssize_t
 
	$eblocks_ö_lun_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

65  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
eblocks_ö_lun
);

66 
	}
}

68 
sh™n⁄_ssize_t
 
	$∑ges_ö_eblock_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

70  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
mbr
.
∑ges_ö_eblock
);

71 
	}
}

73 
sh™n⁄_ssize_t
 
	$«nd_∑ge_size_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

75  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
«nd_∑ge_size
);

76 
	}
}

78 
sh™n⁄_ssize_t
 
	$block_size_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

80  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
logicb_size
);

81 
	}
}

83 
sh™n⁄_ssize_t
 
	$u£_duÆ_hód_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

85  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
u£_duÆ_hód
);

86 
	}
}

88 
sh™n⁄_ssize_t
 
	$powî_⁄_£c⁄ds_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

90 
	`upd©e_powî_⁄_£c⁄ds
(
sdev
);

91  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
powî_⁄_£c⁄ds
);

92 
	}
}

94 
sh™n⁄_ssize_t
 
	$powî_cy˛e_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

96  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
powî_cy˛e_cou¡
);

97 
	}
}

99 
sh™n⁄_ssize_t
 
	$u£r_ˇ∑côy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

101  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
sdisk
.
£˘‹s
);

102 
	}
}

104 
sh™n⁄_ssize_t
 
	$physiˇl_ˇ∑côy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

106  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
max_£˘‹s
);

107 
	}
}

109 
sh™n⁄_ssize_t
 
	$ovî¥ovisi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

111  
	`sh™n⁄_•rötf
(
buf
, "%d.%d\n", 
sdev
->
ovî¥ovisi⁄_øã
 / 100, sdev->overprovision_rate % 100);

112 
	}
}

114 
sh™n⁄_ssize_t
 
	$‰ì_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

116  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
‰ì_blk˙t
);

117 
	}
}

119 
sh™n⁄_ssize_t
 
	$°©ic_bad_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

121  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
°©ic_bad_blk˙t
));

122 
	}
}

124 
sh™n⁄_ssize_t
 
	$dy«mic_bad_blk˙t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

126  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
dy«mic_bad_blk˙t
));

127 
	}
}

129 
sh™n⁄_ssize_t
 
	$max_îr_blocks_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

131 
i
, 
lun
 = -1, 
max_îr_blocks
 = 0;

133 
i
 = 0; i < 
sdev
->
lun_cou¡
; i++) {

134 i‡(
	`sh™n⁄_©omic_ªad
(&
sdev
->
lun
[
i
]->
îr_blocks
Ë> 
max_îr_blocks
) {

135 
lun
 = 
i
;

136 
max_îr_blocks
 = 
	`sh™n⁄_©omic_ªad
(&
sdev
->
lun
[
i
]->
îr_blocks
);

140  
	`sh™n⁄_•rötf
(
buf
, "%dÉº block†öÜun=%d\n", 
max_îr_blocks
, 
lun
);

141 
	}
}

143 
sh™n⁄_ssize_t
 
	$ªc⁄fig_suµ‹t_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

145  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
ªc⁄fig_suµ‹t
);

146 
	}
}

148 
sh™n⁄_ssize_t
 
	$£u_Êag_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

150 i‡(
sdev
->
£u_¸c_îr‹
)

151  
	`sh™n⁄_•rötf
(
buf
, "uncorrectable\n");

152 i‡(
sdev
->
£u_ecc_îr‹
)

153  
	`sh™n⁄_•rötf
(
buf
, "correctable\n");

155  
	`sh™n⁄_•rötf
(
buf
, "normal\n");

156 
	}
}

158 
sh™n⁄_ssize_t
 
	$£u_¸c_îr‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

160  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
£u_¸c_îr‹
);

161 
	}
}

163 
sh™n⁄_ssize_t
 
	$£u_¸c_îr‹_hi°‹y_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

165  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
£u_¸c_îr‹_hi°‹y
);

166 
	}
}

168 
sh™n⁄_ssize_t
 
	$£u_ecc_îr‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

170  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
£u_ecc_îr‹
);

171 
	}
}

173 
sh™n⁄_ssize_t
 
	$£u_ecc_îr‹_hi°‹y_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

175  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
£u_ecc_îr‹_hi°‹y
);

176 
	}
}

179 
sh™n⁄_ssize_t
 
	$e°im©ed_li„_À·_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

181 i‡(
sdev
->
avîage_îa£_cou¡
 >sdev->
Êash_≥_thªshﬁd
)

182  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 0);

184  
	`sh™n⁄_•rötf
(
buf
, "%d\n", (
sdev
->
Êash_≥_thªshﬁd
 - sdev->
avîage_îa£_cou¡
) * 100 / sdev->flash_pe_threshold);

185 
	}
}

187 
sh™n⁄_ssize_t
 
	$ho°_wrôe_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

189  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
ho°_wrôe_£˘‹s
);

190 
	}
}

192 
sh™n⁄_ssize_t
 
	$ho°_wrôe_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

194 
	`upd©e_io_°©i°ics
(
sdev
);

195  
	`sh™n⁄_•rötf
(
buf
, "%Œu KB/s\n", 
sdev
->
ho°_wrôe_b™dwidth
);

196 
	}
}

198 
sh™n⁄_ssize_t
 
	$ho°_wrôe_i›s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

200 
	`upd©e_io_°©i°ics
(
sdev
);

201  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
ho°_wrôe_i›s
);

202 
	}
}

204 
sh™n⁄_ssize_t
 
	$ho°_wrôe_œãncy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

206 
	`upd©e_io_°©i°ics
(
sdev
);

207  
	`sh™n⁄_•rötf
(
buf
, "%Œu us\n", 
sdev
->
ho°_wrôe_œãncy
);

208 
	}
}

210 
sh™n⁄_ssize_t
 
	$tŸÆ_wrôe_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

212  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
tŸÆ_wrôe_£˘‹s
);

213 
	}
}

215 
sh™n⁄_ssize_t
 
	$tŸÆ_wrôe_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

217 
	`upd©e_io_°©i°ics
(
sdev
);

218  
	`sh™n⁄_•rötf
(
buf
, "%Œu KB/s\n", 
sdev
->
tŸÆ_wrôe_b™dwidth
);

219 
	}
}

221 
sh™n⁄_ssize_t
 
	$wrôe_am∂ifõr_li„time_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

223 i‡(
sdev
->
ho°_wrôe_£˘‹s
)

224  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
tŸÆ_wrôe_£˘‹s
 * 100 / sdev->
ho°_wrôe_£˘‹s
);

226  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 100);

227 
	}
}

229 
sh™n⁄_ssize_t
 
	$wrôe_am∂ifõr_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

231 
	`upd©e_io_°©i°ics
(
sdev
);

232  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
wrôe_am∂ifõr
);

233 
	}
}

235 
sh™n⁄_ssize_t
 
	$ho°_ªad_£˘‹s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

237 
sdev
->
ho°_ªad_£˘‹s
 = sdev->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_have_ªad_£˘‹s
(sdev);

238  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
ho°_ªad_£˘‹s
);

239 
	}
}

241 
sh™n⁄_ssize_t
 
	$ho°_ªad_b™dwidth_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

243 
	`upd©e_io_°©i°ics
(
sdev
);

244  
	`sh™n⁄_•rötf
(
buf
, "%Œu KB/s\n", 
sdev
->
ho°_ªad_b™dwidth
);

245 
	}
}

247 
sh™n⁄_ssize_t
 
	$h¨dw¨e_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

249  
	`sh™n⁄_•rötf
(
buf
, "0x%x\n", 
sdev
->
h¨dw¨e_vîsi⁄
);

250 
	}
}

252 
sh™n⁄_ssize_t
 
	$ecc_Áûuª_øã_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

254  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ecc_Áûuª_øã_thªshﬁd
);

255 
	}
}

257 
sh™n⁄_ssize_t
 
	$ecc_Áûuª_øã_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

259 
vÆ
;

260 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

262 i‡(
vÆ
 >= 0)

263 
sdev
->
ecc_Áûuª_øã_thªshﬁd
 = 
vÆ
;

264  
cou¡
;

265 
	}
}

267 
sh™n⁄_ssize_t
 
	$ho°_ªad_i›s_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

269 
	`upd©e_io_°©i°ics
(
sdev
);

270  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
ho°_ªad_i›s
);

271 
	}
}

273 
sh™n⁄_ssize_t
 
	$ho°_ªad_œãncy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

275 
	`upd©e_io_°©i°ics
(
sdev
);

276  
	`sh™n⁄_•rötf
(
buf
, "%Œu us\n", 
sdev
->
ho°_ªad_œãncy
);

277 
	}
}

279 
sh™n⁄_ssize_t
 
	$tŸÆ_gc_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

281  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
tŸÆ_gc_logicbs
);

282 
	}
}

284 
sh™n⁄_ssize_t
 
	$tŸÆ_wl_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

286  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
tŸÆ_wl_logicbs
);

287 
	}
}

289 
sh™n⁄_ssize_t
 
	$tŸÆ_îr_ªcovî_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

291  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
sdev
->
tŸÆ_îr_ªcovî_logicbs
);

292 
	}
}

294 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_öt_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

296 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

297  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_öt
);

298 
	}
}

300 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_öt_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

302 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

303  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_öt_max
);

304 
	}
}

306 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_Êash_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

308 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

309  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_Êash
);

310 
	}
}

312 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_Êash_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

314 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

315  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_Êash_max
);

316 
	}
}

318 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_bﬂrd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

320 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

321  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_bﬂrd
);

322 
	}
}

324 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_bﬂrd_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

326 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

327  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_bﬂrd_max
);

328 
	}
}

330 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_w¨nög_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

332  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_w¨nög_thªshﬁd
);

333 
	}
}

335 
sh™n⁄_ssize_t
 
	$ãm≥øtuª_w¨nög_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

337 
vÆ
;

338 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

340 i‡((
vÆ
 < 50) || (val > 90))

341  -
EINVAL
;

342 
sdev
->
ãm≥øtuª_w¨nög_thªshﬁd
 = 
vÆ
;

343  
cou¡
;

344 
	}
}

346 
sh™n⁄_ssize_t
 
	$vﬁège_öt_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

348 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

349  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
vﬁège_öt
);

350 
	}
}

352 
sh™n⁄_ssize_t
 
	$vﬁège_öt_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

354 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

355  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
vﬁège_öt_max
);

356 
	}
}

358 
sh™n⁄_ssize_t
 
	$vﬁège_aux_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

360 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

361  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
vﬁège_aux
);

362 
	}
}

364 
sh™n⁄_ssize_t
 
	$vﬁège_aux_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

366 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

367  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
vﬁège_aux_max
);

368 
	}
}

370 
sh™n⁄_ssize_t
 
	$ecc_Áûuª_times_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

372  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ecc_Áûuª_times
));

373 
	}
}

376 
sh™n⁄_ssize_t
 
	$ecc_°©i°ics_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

378 
i
, 
ªt
 = 0;

379 
i
 = 0; i <
sdev
->
ecc_c‹ª˘i⁄_powî
; i++)

380 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñë, "%Œu ", 
sdev
->
ecc_°©i°ics
[
i
]);

381 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñet, "\n");

383  
ªt
;

384 
	}
}

386 
sh™n⁄_ssize_t
 
	$devi˚_°©e_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

388 
sdev
->
°©e
)

390 
SHN_STATE_DETACHED
:

391  
	`sh™n⁄_•rötf
(
buf
, "°©e=%d, dëached\n", 
sdev
->
°©e
);

392 
SHN_STATE_ATTACHED
:

393  
	`sh™n⁄_•rötf
(
buf
, "°©e=%d,áâached\n", 
sdev
->
°©e
);

394 (
SHN_STATE_DETACHED
 | 
SHN_STATE_ERROR_BIT
):

395 (
SHN_STATE_ATTACHED
 | 
SHN_STATE_ERROR_BIT
):

396  
	`sh™n⁄_•rötf
(
buf
, "°©e=%d,Éº‹\n", 
sdev
->
°©e
);

398  
	`sh™n⁄_•rötf
(
buf
, "°©e=%d, unknown\n", 
sdev
->
°©e
);

400 
	}
}

402 
sh™n⁄_ssize_t
 
	$ac˚ss_mode_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

404 
sdev
->
ac˚ss_mode
)

406 
SHN_MODE_READWRITE
:

407  
	`sh™n⁄_•rötf
(
buf
, "mode=%d,Ñódwrôe\n", 
sdev
->
ac˚ss_mode
);

408 
SHN_MODE_REDUCED_WRITE
:

409  
	`sh™n⁄_•rötf
(
buf
, "mode=%d,Ñedu˚d-wrôe\n", 
sdev
->
ac˚ss_mode
);

410 
SHN_MODE_READONLY
:

411  
	`sh™n⁄_•rötf
(
buf
, "mode=%d,Ñód⁄ly\n", 
sdev
->
ac˚ss_mode
);

413  
	`sh™n⁄_•rötf
(
buf
, "mode=%d, unknown\n", 
sdev
->
ac˚ss_mode
);

415 
	}
}

417 
sh™n⁄_ssize_t
 
	$ªdu˚d_wrôe_ªas⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

419  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ªdu˚d_wrôe_ªas⁄
);

420 
	}
}

422 
sh™n⁄_ssize_t
 
	$ªad⁄ly_ªas⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

424  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ªad⁄ly_ªas⁄
);

425 
	}
}

427 
sh™n⁄_ssize_t
 
	$modñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

429  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
sdev
->
modñ_id
);

430 
	}
}

432 
sh™n⁄_ssize_t
 
	$fúmw¨e_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

434 i‡(
sdev
->
fúmw¨e_vîsi⁄
)

435  
	`sh™n⁄_•rötf
(
buf
, "%u.%u.%u\n", (
sdev
->
fúmw¨e_vîsi⁄
 & 0x0000ffff) >> 12, ((sdev->firmware_version & 0x0000ffff) >> 8) & 0xf, ((sdev->firmware_version & 0x0000ffff) >> 4) & 0xf);

437  
	`sh™n⁄_•rötf
(
buf
, "3.2.8\n");

438 
	}
}

440 
sh™n⁄_ssize_t
 
	$fúmw¨e_buûd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

442  
	`sh™n⁄_•rötf
(
buf
, "%x\n", 
sdev
->
fúmw¨e_èg
);

443 
	}
}

445 
sh™n⁄_ssize_t
 
	$˝s_¸c_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

447  
	`sh™n⁄_•rötf
(
buf
, "0x%08X\n", 
sdev
->
˝s_¸c
);

448 
	}
}

450 
sh™n⁄_ssize_t
 
	$drivî_vîsi⁄_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

452 i‡(
SHANNON_FIX_VERSION_CODE
)

453  
	`sh™n⁄_•rötf
(
buf
, "%d.%d.%d.%d\n", 
	`SHANNON_VERSION_MAJOR
(
SHANNON_VERSION_CODE
), 
	`SHANNON_VERSION_MINOR
(SHANNON_VERSION_CODE), 
	`SHANNON_VERSION_RELEASE
(SHANNON_VERSION_CODE), 
SHANNON_FIX_VERSION_CODE
);

455  
	`sh™n⁄_•rötf
(
buf
, "%d.%d.%d\n", 
	`SHANNON_VERSION_MAJOR
(
SHANNON_VERSION_CODE
), 
	`SHANNON_VERSION_MINOR
(SHANNON_VERSION_CODE), 
	`SHANNON_VERSION_RELEASE
(SHANNON_VERSION_CODE));

456 
	}
}

458 
sh™n⁄_ssize_t
 
	$Âga_d«_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

460  
	`sh™n⁄_•rötf
(
buf
, "%16.16Œx\n", 
sdev
->
d«
);

461 
	}
}

463 
sh™n⁄_ssize_t
 
	$£rül_numbî_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

465  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
sdev
->
£rvi˚_èg
);

466 
	}
}

468 
sh™n⁄_ssize_t
 
	$pm_qos_vÆue_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

470  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sh™n⁄_pm_qos_vÆue
);

471 
	}
}

473 
sh™n⁄_ssize_t
 
	$pm_qos_vÆue_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

475 
vÆ
;

476 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

478 
sh™n⁄_pm_qos_vÆue
 = 
vÆ
;

479  
cou¡
;

480 
	}
}

482 
sh™n⁄_ssize_t
 
	$ªcovî_øã_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

484  
	`sh™n⁄_•rötf
(
buf
, "%d MB/s\n", 
sdev
->
ªcovî_øã
);

485 
	}
}

487 
sh™n⁄_ssize_t
 
	$ªcovî_øã_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

489 
vÆ
;

490 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

492 i‡((
vÆ
 < 50) || (val > 500))

493  -
EINVAL
;

494 
sdev
->
ªcovî_øã
 = 
vÆ
;

495  
cou¡
;

496 
	}
}

498 
sh™n⁄_ssize_t
 
	$hŸ_block_ª˛aim_¥i‹ôy_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

500  
	`sh™n⁄_•rötf
(
buf
, "%d (N‹mÆ i†100)\n", 
sdev
->
hŸ_block_ª˛aim_¥i‹ôy
);

501 
	}
}

503 
sh™n⁄_ssize_t
 
	$hŸ_block_ª˛aim_¥i‹ôy_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

505 
vÆ
;

506 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

508 i‡((
vÆ
 < 50) || (val > 150))

509  -
EINVAL
;

510 
sdev
->
hŸ_block_ª˛aim_¥i‹ôy
 = 
vÆ
;

511  
cou¡
;

512 
	}
}

514 
sh™n⁄_ssize_t
 
	$su•icious_bad_lun_ödiˇt‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

516  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
su•icious_bad_lun_ödiˇt‹
);

517 
	}
}

519 
sh™n⁄_ssize_t
 
	$su•icious_bad_lun_ödiˇt‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

521 
vÆ
;

522 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

524 i‡((
vÆ
 < 1Ë|| (vÆ > 
sdev
->
sb_cou¡
))

525  -
EINVAL
;

526 
sdev
->
su•icious_bad_lun_ödiˇt‹
 = 
vÆ
;

527  
cou¡
;

528 
	}
}

530 
sh™n⁄_ssize_t
 
	$Á°_ªad_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

532  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
Á°_ªad_íabÀ
);

533 
	}
}

535 
sh™n⁄_ssize_t
 
	$Á°_ªad_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

537 
vÆ
;

538 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

540 i‡(!(
sdev
->
mbr
.
„©uª_Êags
 & 
FAST_READ_ENABLE
)) {

541 
	`sh™n⁄_îr
("This device don't support fastÑead.\n");

542  -
EINVAL
;

545 i‡(
vÆ
 == 0)

546 
sdev
->
Á°_ªad_íabÀ
 = 0;

548 
sdev
->
Á°_ªad_íabÀ
 = 1;

550  
cou¡
;

551 
	}
}

553 
sh™n⁄_debug_Àvñ
;

554 
sh™n⁄_ssize_t
 
	$debug_Àvñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

556  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sh™n⁄_debug_Àvñ
);

557 
	}
}

559 
sh™n⁄_ssize_t
 
	$debug_Àvñ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

561 
vÆ
;

562 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

564 i‡((
vÆ
 < 0) || (val > 4))

565  -
EINVAL
;

566 
sh™n⁄_debug_Àvñ
 = 
vÆ
;

567  
cou¡
;

568 
	}
}

570 
sh™n⁄_buf„r_wrôe
;

571 
sh™n⁄_ssize_t
 
	$sh™n⁄_buf„r_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

573  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sh™n⁄_buf„r_wrôe
);

574 
	}
}

576 
sh™n⁄_ssize_t
 
	$sh™n⁄_buf„r_wrôe_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

578 
vÆ
;

579 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

581 i‡((
vÆ
 < 0) || (val > 1))

582  -
EINVAL
;

583 
sh™n⁄_buf„r_wrôe
 = 
vÆ
;

584  
cou¡
;

585 
	}
}

587 
sh™n⁄_pﬁl_times
;

588 
sh™n⁄_ssize_t
 
	$sh™n⁄_pﬁl_times_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

590  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sh™n⁄_pﬁl_times
);

591 
	}
}

593 
sh™n⁄_ssize_t
 
	$sh™n⁄_pﬁl_times_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

595 
vÆ
;

596 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

598 i‡((
vÆ
 < 2) || (val > 8))

599  -
EINVAL
;

600 
sh™n⁄_pﬁl_times
 = 
vÆ
;

601  
cou¡
;

602 
	}
}

604 
sh™n⁄_ssize_t
 
	$ªad_îr_msg_Àvñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

606  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ªad_îr_msg_Àvñ
);

607 
	}
}

609 
sh™n⁄_ssize_t
 
	$ªad_îr_msg_Àvñ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

611 
vÆ
;

612 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

614 i‡((
vÆ
 < 0) || (val > 10))

615  -
EINVAL
;

616 
sdev
->
ªad_îr_msg_Àvñ
 = 
vÆ
;

617  
cou¡
;

618 
	}
}

620 
wl_debug
;

621 
sh™n⁄_ssize_t
 
	$wl_debug_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

623  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
wl_debug
);

624 
	}
}

626 
sh™n⁄_ssize_t
 
	$wl_debug_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

628 
vÆ
;

629 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

631 i‡((
vÆ
 < 0) || (val > 4))

632  -
EINVAL
;

633 
	`sh™n⁄_log
("%s: së wl_debugÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

634 
wl_debug
 = 
vÆ
;

635  
cou¡
;

636 
	}
}

638 
sh™n⁄_ssize_t
 
	$îr_check_debug_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

640  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
îr_check_debug
);

641 
	}
}

643 
sh™n⁄_ssize_t
 
	$îr_check_debug_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

645 
vÆ
;

646 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

648 i‡((
vÆ
 < 0) || (val > 4))

649  -
EINVAL
;

650 
	`sh™n⁄_log
("%s: sëÉº_check_debugÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

651 
sdev
->
îr_check_debug
 = 
vÆ
;

652  
cou¡
;

653 
	}
}

655 
sh™n⁄_ssize_t
 
	$ªad_di°urb_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

657  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ªad_di°urb_thªshﬁd
);

658 
	}
}

660 
sh™n⁄_ssize_t
 
	$ªad_di°urb_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

662 
vÆ
;

663 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

665 i‡((
vÆ
 < 10000) || (val > 100000000UL))

666  -
EINVAL
;

667 
	`sh™n⁄_log
("%s: sëÑód_di°urb_thªshﬁdÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

668 
sdev
->
ªad_di°urb_thªshﬁd
 = 
vÆ
;

669  
cou¡
;

670 
	}
}

672 
sh™n⁄_ssize_t
 
	$›í_block_ªad_di°urb_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

674  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
›í_block_ªad_di°urb_thªshﬁd
);

675 
	}
}

677 
sh™n⁄_ssize_t
 
	$›í_block_ªad_di°urb_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

679 
vÆ
;

680 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

682 i‡((
vÆ
 < 1000) || (val > 50000000UL))

683  -
EINVAL
;

684 
	`sh™n⁄_log
("%s: së o≥n_block_ªad_di°urb_thªshﬁdÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

685 
sdev
->
›í_block_ªad_di°urb_thªshﬁd
 = 
vÆ
;

686  
cou¡
;

687 
	}
}

689 
sh™n⁄_ssize_t
 
	$wl_timî_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

691  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
wl_timî_öãrvÆ
);

692 
	}
}

694 
sh™n⁄_ssize_t
 
	$wl_timî_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

696 
vÆ
;

697 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

699 i‡((
vÆ
 < 10) || (val > 36000UL))

700  -
EINVAL
;

701 
	`sh™n⁄_log
("%s: së wl_timî_öãrvÆÅÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

702 
sdev
->
wl_timî_öãrvÆ
 = 
vÆ
;

703 i‡((
sdev
->
sdisk
.
exô
 =0Ë&& (sdev->
°›_Æl
 =0Ë&& (sdev->
ac˚ss_mode
 !
SHN_MODE_READONLY
))

704 
	`sh™n⁄_mod_timî
(&
sdev
->
wl_timî
, 
	`gë_jiffõs
(Ë+ sdev->
wl_timî_öãrvÆ
 * 
	`gë_HZ
());

705  
cou¡
;

706 
	}
}

708 
sh™n⁄_ssize_t
 
	$max_ö_wl_logicbs_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

710  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
max_ö_wl_logicbs
);

711 
	}
}

713 
sh™n⁄_ssize_t
 
	$max_ö_wl_logicbs_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

715 
vÆ
;

716 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

718 i‡((
vÆ
 < 0) || (val > 1000UL))

719  -
EINVAL
;

720 
	`sh™n⁄_log
("%s: së max_ö_wl_logicb†tÿ%d.\n", 
sdev
->
sdisk
.
disk_«me
, 
vÆ
);

721 
sdev
->
max_ö_wl_logicbs
 = 
vÆ
;

722 
sdev
->
cuºít_max_ö_wl_logicbs
 = 
vÆ
;

723  
cou¡
;

724 
	}
}

726 
sh™n⁄_ssize_t
 
	$wl_max_îa£_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

728  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
wl_max_îa£_cou¡
);

729 
	}
}

731 
sh™n⁄_ssize_t
 
	$wl_max_îa£_cou¡_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

733 
vÆ
;

734 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

736 i‡((
vÆ
 < 1000) || (val > 20000))

737  -
EINVAL
;

738 
sdev
->
wl_max_îa£_cou¡
 = 
vÆ
;

739  
cou¡
;

740 
	}
}

742 
sh™n⁄_ssize_t
 
	$wl_îa£_cou¡_dñè_0_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

744  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
wl_îa£_cou¡_dñè
[0]);

745 
	}
}

747 
sh™n⁄_ssize_t
 
	$wl_îa£_cou¡_dñè_0_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

749 
vÆ
;

750 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

752 i‡((
vÆ
 <
sdev
->
wl_îa£_cou¡_dñè
[1]) || (val > 20000))

753  -
EINVAL
;

754 
sdev
->
wl_îa£_cou¡_dñè
[0] = 
vÆ
;

755  
cou¡
;

756 
	}
}

758 
sh™n⁄_ssize_t
 
	$wl_îa£_cou¡_dñè_1_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

760  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
wl_îa£_cou¡_dñè
[1]);

761 
	}
}

763 
sh™n⁄_ssize_t
 
	$wl_îa£_cou¡_dñè_1_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

765 
vÆ
;

766 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

768 i‡((
vÆ
 < 2Ë|| (vÆ >
sdev
->
wl_îa£_cou¡_dñè
[0]))

769  -
EINVAL
;

770 
sdev
->
wl_îa£_cou¡_dñè
[1] = 
vÆ
;

771  
cou¡
;

772 
	}
}

774 #ifde‡
SHANNON_USE_WRITE_BUFFER


775 
sh™n⁄_ssize_t
 
	$fûl_chunk_timî_expúe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

777  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
fûl_chunk_timî_expúe
);

778 
	}
}

780 
sh™n⁄_ssize_t
 
	$fûl_chunk_timî_expúe_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

782 
vÆ
;

783 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

785 i‡((
vÆ
 < 1) || (val > 60000))

786  -
EINVAL
;

787 
sdev
->
fûl_chunk_timî_expúe
 = 
vÆ
;

788  
cou¡
;

789 
	}
}

791 
sh™n⁄_ssize_t
 
	$fûl_chunk_timî_expúe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
Ë{  0; 
	}
}

792 
sh™n⁄_ssize_t
 
	$fûl_chunk_timî_expúe_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
Ë{  0; 
	}
}

795 
sh™n⁄_ssize_t
 
	$¥öt_œãncy_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

797  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
);

798 
	}
}

800 
sh™n⁄_ssize_t
 
	$¥öt_œãncy_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

802 
vÆ
;

803 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

805 i‡((
vÆ
 < 0) || (val > 86400))

806  -
EINVAL
;

807 i‡(
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
 !
vÆ
) {

808 
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
 = 
vÆ
;

809 i‡(
sdev
->
sdisk
.
¥öt_œãncy_öãrvÆ
)

810 
	`°¨t_¥öt_œãncy_timî
(&
sdev
->
sdisk
);

812 
	`°›_¥öt_œãncy_timî
(&
sdev
->
sdisk
);

814 
	`sh™n⁄_öfo
("modifyÖröt_œãncy_öãrvÆÅÿ%d.\n", 
vÆ
);

815  
cou¡
;

816 
	}
}

818 
sh™n⁄_ssize_t
 
	$h¨d_queue_limô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

820  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
h¨d_queue_limô
);

821 
	}
}

823 
sh™n⁄_ssize_t
 
	$h¨d_queue_limô_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

825 
vÆ
;

826 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

828 i‡((
vÆ
 < 0) || (val > 10000))

829  -
EINVAL
;

830 
sdev
->
h¨d_queue_limô
 = 
vÆ
;

831 
	`sh™n⁄_öfo
("%s, modify h¨d_queue_limôÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

832  
cou¡
;

833 
	}
}

835 
sh™n⁄_ssize_t
 
	$cmd_queue_wrôes_limô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

837  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
cmd_queue_wrôes_limô
);

838 
	}
}

840 
sh™n⁄_ssize_t
 
	$cmd_queue_wrôes_limô_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

842 
vÆ
;

843 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

845 i‡(
vÆ
 <((
sdev
->
max_luns_ö_group
 * sdev->
logicbs_ö_chunk
) >> 1)) {

846 
	`sh™n⁄_îr
("cmd_queue_wrôes_limô mu° bêgª©îÅh™ %d.\n", (
sdev
->
max_luns_ö_group
 * sdev->
logicbs_ö_chunk
) >> 1);

847  -
EINVAL
;

849 i‡(
vÆ
 > 1000000)

850  -
EINVAL
;

851 
sdev
->
cmd_queue_wrôes_limô
 = 
vÆ
;

852 
	`sh™n⁄_öfo
("%s, modify cmd_queue_wrôes_limôÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

853  
cou¡
;

854 
	}
}

856 
sh™n⁄_ssize_t
 
	$£rvi˚_èg_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

858  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
sdev
->
£rvi˚_èg
);

859 
	}
}

861 
sh™n⁄_ssize_t
 
	$udid_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

863  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
sdev
->
udid
);

864 
	}
}

866 
sh™n⁄_ssize_t
 
	$ª‰esh_mbr_cou¡_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

868  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
	`sh™n⁄_©omic_ªad
(&
sdev
->
ª‰esh_mbr_cou¡
));

869 
	}
}

871 
sh™n⁄_ssize_t
 
	$©omic_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

873  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
©omic_wrôe
 ? 1 : 0);

874 
	}
}

876 
sh™n⁄_ssize_t
 
	$¥i‹ôize_wrôe_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

878  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
¥i‹ôize_wrôe
 ? 1 : 0);

879 
	}
}

881 
sh™n⁄_ssize_t
 
	$n⁄Æig√d_bios_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

883  
	`sh™n⁄_•rötf
(
buf
, "%lu\n", 
sdev
->
sdisk
.
n⁄Æig√d_bios
);

884 
	}
}

887 
sh™n⁄_ssize_t
 
	$«me_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

889  
	`sh™n⁄_•rötf
(
buf
, "sh™n⁄-%s\n", 
sdev
->
sdisk
.
disk_«me
);

890 
	}
}

892 
sh™n⁄_ssize_t
 
	$ãmp1_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

894 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

895  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_bﬂrd
 * 1000);

896 
	}
}

898 
sh™n⁄_ssize_t
 
	$ãmp1_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

900  
	`sh™n⁄_•rötf
(
buf
, "Board\n");

901 
	}
}

903 
sh™n⁄_ssize_t
 
	$ãmp1_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

905  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_BOARD_THRESHOLD
 * 1000);

906 
	}
}

908 
sh™n⁄_ssize_t
 
	$ãmp1_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

910  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_BOARD_CRITICAL_THRESHOLD
 * 1000);

911 
	}
}

913 
sh™n⁄_ssize_t
 
	$ãmp2_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

915 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

916  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_Êash
 * 1000);

917 
	}
}

919 
sh™n⁄_ssize_t
 
	$ãmp2_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

921  
	`sh™n⁄_•rötf
(
buf
, "Flash\n");

922 
	}
}

924 
sh™n⁄_ssize_t
 
	$ãmp2_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

926  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_AUX1_THRESHOLD
 * 1000);

927 
	}
}

929 
sh™n⁄_ssize_t
 
	$ãmp2_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

931  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_AUX1_CRITICAL_THRESHOLD
 * 1000);

932 
	}
}

934 
sh™n⁄_ssize_t
 
	$ãmp3_öput_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

936 
	`upd©e_vﬁège_ãm≥øtuª
(
sdev
);

937  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
ãm≥øtuª_öt
 * 1000);

938 
	}
}

940 
sh™n⁄_ssize_t
 
	$ãmp3_œbñ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

942  
	`sh™n⁄_•rötf
(
buf
, "Controller\n");

943 
	}
}

945 
sh™n⁄_ssize_t
 
	$ãmp3_max_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

947  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_INNER_THRESHOLD
 * 1000);

948 
	}
}

950 
sh™n⁄_ssize_t
 
	$ãmp3_¸ô_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

952  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
TEMP_INNER_CRITICAL_THRESHOLD
 * 1000);

953 
	}
}

956 
sh™n⁄_ssize_t
 
	$víd‹_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

958  
	`sh™n⁄_•rötf
(
buf
, "%0#4.4x\n", 
sdev
->
pci_öfo
.
víd‹_id
);

959 
	}
}

961 
sh™n⁄_ssize_t
 
	$devi˚_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

963  
	`sh™n⁄_•rötf
(
buf
, "%0#4.4x\n", 
sdev
->
pci_öfo
.
devi˚_id
);

964 
	}
}

966 
sh™n⁄_ssize_t
 
	$subsy°em_víd‹_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

968  
	`sh™n⁄_•rötf
(
buf
, "%0#4.4x\n", 
sdev
->
pci_öfo
.
subsy°em_víd‹_id
);

969 
	}
}

971 
sh™n⁄_ssize_t
 
	$subsy°em_devi˚_id_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

973  
	`sh™n⁄_•rötf
(
buf
, "%0#4.4x\n", 
sdev
->
pci_öfo
.
subsy°em_devi˚_id
);

974 
	}
}

976 
sh™n⁄_ssize_t
 
	$pci_addªss_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

978  
	`sh™n⁄_•rötf
(
buf
, "%02.2x:%02.2x:%01.1x\n", 
sdev
->
pci_öfo
.
pci_bus_numbî
, sdev->pci_öfo.
pci_¶Ÿ_numbî
, sdev->pci_öfo.
pci_func_numbî
);

979 
	}
}

981 
sh™n⁄_ssize_t
 
	$pci_˛ass_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

983  
	`sh™n⁄_•rötf
(
buf
, "%0#6.6x\n", 
sdev
->
pci_öfo
.
˛ass
);

984 
	}
}

986 
sh™n⁄_ssize_t
 
	$lökˇp_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

988  
	`sh™n⁄_•rötf
(
buf
, "%†x %d\n", 
	`lök•ìd_°r
(
sdev
->
pci_öfo
.
 kˇp
 & 0xf), (sdev->pci_info.lnkcap >> 4) & 0x3f);

989 
	}
}

991 
sh™n⁄_ssize_t
 
	$lök°a_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

993  
	`sh™n⁄_•rötf
(
buf
, "%†x %d\n", 
	`lök•ìd_°r
(
sdev
->
pci_öfo
.
 k°a
 & 0xf), (sdev->pci_info.lnksta >> 4) & 0x3f);

994 
	}
}

996 
sh™n⁄_ssize_t
 
	$≥riod_ªad_≥riod_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

998  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
≥riod_ªad
.
≥riod
);

999 
	}
}

1001 
sh™n⁄_ssize_t
 
	$≥riod_ªad_≥riod_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1003 
vÆ
;

1004 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1006 i‡(
vÆ
 < 0)

1007  -
EINVAL
;

1008 
sdev
->
≥riod_ªad
.
≥riod
 = 
vÆ
;

1009 
	`sh™n⁄_öfo
("%s, modifyÖîiod_ªadÖîiodÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1010 i‡(
sdev
->
≥riod_ªad
.
≥riod
 > 0) {

1011 i‡(
	`≥riod_ªad_íabÀ
(
sdev
)) {

1012 
	`sh™n⁄_îr
("EnableÖeriodÑead failed.Öeriod_read_interval=%d,Öeriod_read_ppa=%d.\n", \

1013 
sdev
->
≥riod_ªad
.
_öãrvÆ
, sdev->≥riod_ªad.
µa
);

1016 
	`≥riod_ªad_dißbÀ
(
sdev
);

1018  
cou¡
;

1019 
	}
}

1021 
sh™n⁄_ssize_t
 
	$≥riod_ªad_µa_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1023  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
sdev
->
≥riod_ªad
.
µa
);

1024 
	}
}

1026 
sh™n⁄_ssize_t
 
	$≥riod_ªad_µa_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1028 
vÆ
;

1029 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1031 i‡(
vÆ
 >(
sdev
->
∑ges_ö_eblock
 * sdev->
∂™es
))

1032  -
EINVAL
;

1033 
sdev
->
≥riod_ªad
.
µa
 = 
vÆ
;

1034 
	`sh™n⁄_öfo
("%s, modifyÖîiod_ªad_µ®tÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1035 i‡((
sdev
->
≥riod_ªad
.
µa
 >0Ë&& (sdev->≥riod_ªad.µ®< sdev->
∑ges_ö_eblock
 * sdev->
∂™es
)) {

1036 i‡(
	`≥riod_ªad_íabÀ
(
sdev
))

1037 
	`sh™n⁄_îr
("EnableÖeriodÑead failed.Öeriod_read_interval=%d,Öeriod_read_ppa=%d.\n", \

1038 
sdev
->
≥riod_ªad
.
_öãrvÆ
, sdev->≥riod_ªad.
µa
);

1040 
	`≥riod_ªad_dißbÀ
(
sdev
);

1042  
cou¡
;

1043 
	}
}

1045 
sh™n⁄_ssize_t
 
	$swôch_mi¸ocode_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1047 
i
;

1049 
i
 = 0; i < 
MICROCODE_ARRAY_SIZE
; i++) {

1050 i‡(
sdev
->
mi¸ocode_¨øy
[
i
].
°©e
 & 
MICROCODE_IN_USE_MASK
)

1051  
	`sh™n⁄_•rötf
(
buf
, "ödex: %u.\n", 
i
);

1053  
	`sh™n⁄_•rötf
(
buf
, "index: -1.\n");

1054 
	}
}

1056 
sh™n⁄_ssize_t
 
	$swôch_mi¸ocode_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1058 
vÆ
;

1059 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1061 i‡((
vÆ
 < 0Ë|| (vÆ >
MICROCODE_ARRAY_SIZE
))

1062  -
EINVAL
;

1063 i‡(
sdev
->
mi¸ocode_¨øy
[
vÆ
].
°©e
 & 
MICROCODE_VALID_MASK
) {

1064 i‡(!(
sdev
->
mi¸ocode_¨øy
[
vÆ
].
°©e
 & 
MICROCODE_IN_USE_MASK
)) {

1065 
sdev
->
cuºít_mi¸ocode_ödex
 = 
vÆ
;

1066 i‡(
	`should_upd©e_mi¸ocode
(
sdev
))

1067 
	`sh™n⁄_queue_w‹k
(
sdev
->
sh™n⁄_wq
, &sdev->
upd©e_mi¸ocode_w‹k
);

1070  
cou¡
;

1071 
	}
}

1074 
sh™n⁄_«me•a˚
 *
	$to_sh™n⁄_«me•a˚
(
sh™n⁄_kobje˘_t
 *
skobj
)

1076  
	`c⁄èöî_of
(
skobj
, 
sh™n⁄_«me•a˚
, 
sysfs_kobj
);

1077 
	}
}

1079 *
	$to_sh™n⁄_disk_ns
(
sh™n⁄_kobje˘_t
 *
skobj
)

1081 
sh™n⁄_«me•a˚
 *
ns
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_«me•a˚, 
sysfs_kobj
);

1082  
ns
->
sdisk
.
gd
;

1083 
	}
}

1085 *
	$to_ns_«me
(
sh™n⁄_kobje˘_t
 *
skobj
)

1087 
sh™n⁄_«me•a˚
 *
ns
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_«me•a˚, 
sysfs_kobj
);

1088  
ns
->
sdisk
.
disk_«me
;

1089 
	}
}

1091 *
	$ns_to_poﬁ_misc
(
sh™n⁄_kobje˘_t
 *
skobj
)

1093 
sh™n⁄_«me•a˚
 *
ns
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_«me•a˚, 
sysfs_kobj
);

1094  &
ns
->
poﬁ
->
misc
;

1095 
	}
}

1097 
sh™n⁄_ssize_t
 
	$ho°_wrôe_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1099  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
ns
->
ho°_wrôe_£˘‹s_hi°‹y
 + 
	`sh™n⁄_wrôe_£˘‹s
“s->
sdisk
.
gd
));

1100 
	}
}

1102 
sh™n⁄_ssize_t
 
	$ho°_ªad_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1104  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
ns
->
ho°_ªad_£˘‹s_hi°‹y
 + 
	`sh™n⁄_ªad_£˘‹s
“s->
sdisk
.
gd
));

1105 
	}
}

1107 
sh™n⁄_ssize_t
 
	$vÆid_£˘‹s_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1109  
	`sh™n⁄_•rötf
(
buf
, "%Œu\n", 
	`gë_sdisk_vÆid_logicbs
(&
ns
->
sdisk
Ë<< (ns->
logicb_shi·
 - 9));

1110 
	}
}

1112 
sh™n⁄_ssize_t
 
	$≥ndög_bios_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1114  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
	`sh™n⁄_©omic_ªad
(&
ns
->
sdisk
.
≥ndög_bios
));

1115 
	}
}

1117 
sh™n⁄_ssize_t
 
	$n⁄Æig√d_bios_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1119  
	`sh™n⁄_•rötf
(
buf
, "%lu\n", 
ns
->
sdisk
.
n⁄Æig√d_bios
);

1120 
	}
}

1122 
sh™n⁄_ssize_t
 
	$£q_num_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1124  
	`sh™n⁄_•rötf
(
buf
, "%u\n", 
ns
->
£q_num
);

1125 
	}
}

1127 
sh™n⁄_ssize_t
 
	$rmw_li°_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1129 
sh™n⁄_disk
 *
sdisk
 = &
ns
->sdisk;

1130 
lba_li°
 *
p
;

1131 
i
, 
j
, 
ªt
 = 0;

1133 
i
 = 0; i < 2; i++) {

1134 
j
 = 0; j < 
RMW_LIST_COUNT
; j++) {

1135 
	`sh™n⁄_•ö_lock_bh
(&
sdisk
->
rmw_li°_lock
[
i
][
j
]);

1136 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñë, "%s%2d:> ", 
i
?"wrôe":"ªad", 
j
);

1137 
	`sh™n⁄_li°_f‹_óch_íåy
(
p
, &
sdisk
->
rmw_li°
[
i
][
j
], 
li°
) {

1138 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñë, " %d=%d.", 
p
->
lba
,Ö->
°©us
);

1140 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñet, "\n");

1141 
	`sh™n⁄_•ö_u∆ock_bh
(&
sdisk
->
rmw_li°_lock
[
i
][
j
]);

1143 
ªt
 +
	`sh™n⁄_•rötf
(
buf
 +Ñet, "----------------------------------\n");

1145  
ªt
;

1146 
	}
}

1148 
sh™n⁄_ssize_t
 
	$¥öt_œãncy_öãrvÆ_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1150  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
ns
->
sdisk
.
¥öt_œãncy_öãrvÆ
);

1151 
	}
}

1153 
sh™n⁄_ssize_t
 
	$¥öt_œãncy_öãrvÆ_ns_°‹e
(
sh™n⁄_«me•a˚
 *
ns
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1155 
vÆ
;

1156 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1158 i‡((
vÆ
 < 0) || (val > 86400))

1159  -
EINVAL
;

1160 i‡(
ns
->
sdisk
.
¥öt_œãncy_öãrvÆ
 !
vÆ
) {

1161 
ns
->
sdisk
.
¥öt_œãncy_öãrvÆ
 = 
vÆ
;

1162 i‡(
ns
->
sdisk
.
¥öt_œãncy_öãrvÆ
)

1163 
	`°¨t_¥öt_œãncy_timî
(&
ns
->
sdisk
);

1165 
	`°›_¥öt_œãncy_timî
(&
ns
->
sdisk
);

1167 
	`sh™n⁄_öfo
("modifyÇame•a˚ %dÖröt_œãncy_öãrvÆÅÿ%d.\n", 
ns
->
idx
, 
vÆ
);

1168  
cou¡
;

1169 
	}
}

1171 
sh™n⁄_ssize_t
 
	$u£r_deföed_«me_ns_show
(
sh™n⁄_«me•a˚
 *
ns
, *
buf
)

1173  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
ns
->
d©a
->
«me
);

1174 
	}
}

1178 
sh™n⁄_poﬁ
 *
	$to_sh™n⁄_poﬁ
(
sh™n⁄_kobje˘_t
 *
skobj
)

1180 
sh™n⁄_poﬁ
 *
•
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_poﬁ, 
sysfs_kobj
);

1181  
•
;

1182 
	}
}

1184 *
	$to_poﬁ_misc
(
sh™n⁄_kobje˘_t
 *
skobj
)

1186 
sh™n⁄_poﬁ
 *
•
 = 
	`c⁄èöî_of
(
skobj
, sh™n⁄_poﬁ, 
sysfs_kobj
);

1187  &
•
->
misc
;

1188 
	}
}

1190 
sh™n⁄_ssize_t
 
	$u£d_•a˚_≥r˚¡age_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
)

1192  
	`sh™n⁄_•rötf
(
buf
, "%llu\n",

1193 100 * (
	`sh™n⁄_©omic64_ªad
(&
•oﬁ
->
u£d_logicbs
) << 3)

1194 / 
•oﬁ
->
avaûabÀ_ˇ∑côy
);

1195 
	}
}

1197 
sh™n⁄_ssize_t
 
	$physiˇl_ˇ∑côy_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
)

1199 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

1200  
	`sh™n⁄_•rötf
(
buf
, "%Œu se˘‹s\n", 
•oﬁ
->
physiˇl_ˇ∑côy
);

1201 
	}
}

1203 
sh™n⁄_ssize_t
 
	$ovî¥ovisi⁄_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
)

1205 
	`ˇlcuœã_poﬁ_ovî¥ovisi⁄
(
•oﬁ
);

1206  
	`sh™n⁄_•rötf
(
buf
, "%d.%d\n", 
•oﬁ
->
ovî¥ovisi⁄
/100, spool->overprovision % 100);

1207 
	}
}

1209 
sh™n⁄_ssize_t
 
	$ovî¥ovisi⁄_poﬁ_°‹e
(
sh™n⁄_poﬁ
 *
•oﬁ
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1211 
vÆ
;

1212 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1213 i‡(
vÆ
 < 15 || val > 30)

1214  -
EINVAL
;

1215 
	`£t_poﬁ_ovî¥ovisi⁄
(
•oﬁ
, 
vÆ
);

1216  
cou¡
;

1217 
	}
}

1219 
sh™n⁄_ssize_t
 
	$h¨d_queue_limô_poﬁ_show
(
sh™n⁄_poﬁ
 *
•oﬁ
, *
buf
)

1221  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
•oﬁ
->
h¨d_queue_limô
);

1222 
	}
}

1224 
sh™n⁄_ssize_t
 
	$h¨d_queue_limô_poﬁ_°‹e
(
sh™n⁄_poﬁ
 *
•oﬁ
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1226 
vÆ
;

1227 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1229 i‡((
vÆ
 < 0) || (val > 10000))

1230  -
EINVAL
;

1231 i‡(
	`sh™n⁄_©omic_ªad
(&
•oﬁ
->
high_¥i‹ôy_ns_cou¡
) == 0) {

1232 
	`sh™n⁄_öfo
("%s,ÇÿhighÖri‹ôy vﬁumêexi°s!\n", 
•oﬁ
->
cdev_«me
);

1233  -
EINVAL
;

1235 
	`£t_poﬁ_h¨d_queue_limô
(
•oﬁ
, 
vÆ
);

1236 
	`sh™n⁄_öfo
("%s, modify h¨d_queue_limôÅÿ%d.\n", 
•oﬁ
->
cdev_«me
, 
vÆ
);

1237  
cou¡
;

1238 
	}
}

1240 
sh™n⁄_ssize_t
 
	$upd©e_úq_dñay_öãrvÆ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1242  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
upd©e_úq_dñay_öãrvÆ
);

1243 
	}
}

1245 
sh™n⁄_ssize_t
 
	$upd©e_úq_dñay_öãrvÆ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1247 
vÆ
;

1248 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1249 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1251 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1252 
	`sh™n⁄_öfo
("%s, upd©e_úq_dñay_öãrvÆ o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1253  -
EINVAL
;

1255 i‡(
vÆ
 < 0)

1256  -
EINVAL
;

1257 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1258 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1259 
	`sh™n⁄_m¶ìp
(2);

1260 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1261 
sdev
->
úq_dñay
.
upd©e_úq_dñay_öãrvÆ
 = 
vÆ
;

1262 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1263 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1264 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1265 
	`sh™n⁄_öfo
("%s, modify upd©e_úq_dñay_öãrvÆÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1266  
cou¡
;

1267 
	}
}

1269 
sh™n⁄_ssize_t
 
	$dy«mic_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1271  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
);

1272 
	}
}

1274 
sh™n⁄_ssize_t
 
	$dy«mic_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1276 
vÆ
;

1277 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1279 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1280 
	`sh™n⁄_öfo
("%s, dy«mic_úq_dñay o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1281  -
EINVAL
;

1283 i‡(
vÆ
 < 0)

1284  -
EINVAL
;

1285 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1286 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1287 
	`sh™n⁄_m¶ìp
(2);

1288 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1289 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
vÆ
;

1290 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1291 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1292 
	`sh™n⁄_öfo
("%s, modify dy«mic_úq_dñayÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1293  
cou¡
;

1294 
	}
}

1296 
sh™n⁄_ssize_t
 
	$úq_dñay_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1298  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
Á˘‹
);

1299 
	}
}

1301 
sh™n⁄_ssize_t
 
	$úq_dñay_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1303 
vÆ
;

1304 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1305 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1307 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1308 
	`sh™n⁄_öfo
("%s, irq_dñay_ÁcŸ∏⁄ly suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1309  -
EINVAL
;

1311 i‡(
vÆ
 < 0)

1312  -
EINVAL
;

1313 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1314 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1315 
	`sh™n⁄_m¶ìp
(2);

1316 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1317 
sdev
->
úq_dñay
.
Á˘‹
 = 
vÆ
;

1318 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1319 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1320 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1321 
	`sh™n⁄_öfo
("%s, modify dy«mic_úq_dñayÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1322  
cou¡
;

1323 
	}
}

1325 
sh™n⁄_ssize_t
 
	$ªad_œãncy_divide_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1327  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
ªad_œãncy_divide
);

1328 
	}
}

1330 
sh™n⁄_ssize_t
 
	$ªad_œãncy_divide_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1332 
vÆ
;

1333 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1334 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1336 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1337 
	`sh™n⁄_öfo
("%s,Ñód_œãncy_dividê⁄ly suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1338  -
EINVAL
;

1340 i‡(
vÆ
 <= 0)

1341  -
EINVAL
;

1342 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1343 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1344 
	`sh™n⁄_m¶ìp
(2);

1345 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1346 
sdev
->
úq_dñay
.
ªad_œãncy_divide
 = 
vÆ
;

1347 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1348 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1349 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1350 
	`sh™n⁄_öfo
("%s, modifyÑód_œãncy_dividêtÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1351  
cou¡
;

1352 
	}
}

1354 
sh™n⁄_ssize_t
 
	$wrôe_œãncy_divide_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1356  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
wrôe_œãncy_divide
);

1357 
	}
}

1359 
sh™n⁄_ssize_t
 
	$wrôe_œãncy_divide_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1361 
vÆ
;

1362 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1363 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1365 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1366 
	`sh™n⁄_öfo
("%s, wrôe_œãncy_devidê⁄ly suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1367  -
EINVAL
;

1369 i‡(
vÆ
 <= 0)

1370  -
EINVAL
;

1371 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1372 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1373 
	`sh™n⁄_m¶ìp
(2);

1374 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1375 
sdev
->
úq_dñay
.
wrôe_œãncy_divide
 = 
vÆ
;

1376 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1377 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1378 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1379 
	`sh™n⁄_öfo
("%s, modify wrôe_œãncy_dividêtÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1380  
cou¡
;

1381 
	}
}

1383 
sh™n⁄_ssize_t
 
	$wrôe_thªshﬁd_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1385  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
wrôe_thªshﬁd_Á˘‹
);

1386 
	}
}

1388 
sh™n⁄_ssize_t
 
	$wrôe_thªshﬁd_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1390 
vÆ
;

1391 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1392 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1394 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1395 
	`sh™n⁄_öfo
("%s, wrôe_thªshﬁd_Á˘‹ o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1396  -
EINVAL
;

1398 i‡(
vÆ
 < 0)

1399  -
EINVAL
;

1400 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1401 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1402 
	`sh™n⁄_m¶ìp
(2);

1403 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1404 
sdev
->
úq_dñay
.
wrôe_thªshﬁd_Á˘‹
 = 
vÆ
;

1405 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1406 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1407 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1408 
	`sh™n⁄_öfo
("%s, modify wrôe_thªshﬁd_Á˘‹Åÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1409  
cou¡
;

1410 
	}
}

1412 
sh™n⁄_ssize_t
 
	$ªad_thªshﬁd_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1414  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
ªad_thªshﬁd_Á˘‹
);

1415 
	}
}

1417 
sh™n⁄_ssize_t
 
	$ªad_thªshﬁd_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1419 
vÆ
;

1420 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1421 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1423 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1424 
	`sh™n⁄_öfo
("%s,Ñód_thªshﬁd_Á˘‹ o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1425  -
EINVAL
;

1427 i‡(
vÆ
 < 0)

1428  -
EINVAL
;

1429 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1430 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1431 
	`sh™n⁄_m¶ìp
(2);

1432 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1433 
sdev
->
úq_dñay
.
ªad_thªshﬁd_Á˘‹
 = 
vÆ
;

1434 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1435 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1436 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1437 
	`sh™n⁄_öfo
("%s, modifyÑód_thªshﬁd_Á˘‹Åÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1438  
cou¡
;

1439 
	}
}

1441 
sh™n⁄_ssize_t
 
	$max_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1443  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
max_úq_dñay
);

1444 
	}
}

1446 
sh™n⁄_ssize_t
 
	$max_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1448 
vÆ
;

1449 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1450 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1452 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1453 
	`sh™n⁄_öfo
("%s, max_úq_dñay o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1454  -
EINVAL
;

1456 i‡(
vÆ
 < 0)

1457  -
EINVAL
;

1458 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1459 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1460 
	`sh™n⁄_m¶ìp
(2);

1461 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1462 
sdev
->
úq_dñay
.
max_úq_dñay
 = 
vÆ
;

1463 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1464 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1465 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1466 
	`sh™n⁄_öfo
("%s, modify max_úq_dñayÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1467  
cou¡
;

1468 
	}
}

1470 
sh™n⁄_ssize_t
 
	$mö_úq_dñay_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1472  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
úq_dñay
.
mö_úq_dñay
);

1473 
	}
}

1475 
sh™n⁄_ssize_t
 
	$mö_úq_dñay_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1477 
vÆ
;

1478 
ﬁd_dy«mic_úq_dñay
 = 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
;

1479 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1481 i‡(!
	`sh™n⁄_dev_is_g5
(
sdev
)) {

1482 
	`sh™n⁄_öfo
("%s, mö_úq_dñay o∆y suµ‹àby G5 devi˚s.\n", 
sdev
->
cdev_«me
);

1483  -
EINVAL
;

1485 i‡(
vÆ
 < 0)

1486  -
EINVAL
;

1487 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 0;

1488 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1489 
	`sh™n⁄_m¶ìp
(2);

1490 
	`sh™n⁄_dñ_timî_sync
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
);

1491 
sdev
->
úq_dñay
.
mö_úq_dñay
 = 
vÆ
;

1492 
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 = 
ﬁd_dy«mic_úq_dñay
;

1493 i‡(
sdev
->
úq_dñay
.
dy«mic_úq_dñay
 && 
sh™n⁄_dy«mic_úq_dñay
)

1494 
	`sh™n⁄_mod_timî
(&
sdev
->
úq_dñay
.
upd©e_úq_dñay_timî
, 
	`sh™n⁄_m£cs_to_jiffõs
(sdev->úq_dñay.
upd©e_úq_dñay_öãrvÆ
Ë+ 
	`gë_jiffõs
());

1495 
	`sh™n⁄_öfo
("%s, modify mö_úq_dñayÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1496  
cou¡
;

1497 
	}
}

1499 
sh™n⁄_ssize_t
 
	$dr›_ˇche_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1501  
	`sh™n⁄_•rötf
(
buf
, "0\n");

1502 
	}
}

1504 
sh™n⁄_ssize_t
 
	$dr›_ˇche_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1506 
vÆ
;

1507 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1509 i‡(
vÆ
 != 0) {

1510 
	`dr›_Æl_ˇche_löe
(
sdev
);

1511 
	`sh™n⁄_öfo
("%s, dr› cachêföished.\n", 
sdev
->
cdev_«me
);

1513  
cou¡
;

1514 
	}
}

1516 
sh™n⁄_ssize_t
 
	$¥e„tch_£qªad_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1518  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
£qªad_thªshﬁd
);

1519 
	}
}

1521 
sh™n⁄_ssize_t
 
	$¥e„tch_£qªad_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1523 
vÆ
;

1524 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1526 i‡(
vÆ
 < 0 || val >= 100000)

1527  -
EINVAL
;

1529 
sdev
->
sdisk
.
¥e„tch
.
£qªad_thªshﬁd
 = 
vÆ
;

1530 
	`sh™n⁄_öfo
("%s, modify seqªad_thªshﬁdÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1532  
cou¡
;

1533 
	}
}

1535 
sh™n⁄_ssize_t
 
	$¥e„tch_pﬁl_times_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1537  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
pﬁl_times_thªshﬁd
);

1538 
	}
}

1540 
sh™n⁄_ssize_t
 
	$¥e„tch_pﬁl_times_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1542 
vÆ
;

1543 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1545 i‡(
vÆ
 < 0 || val >= 1000)

1546  -
EINVAL
;

1548 
sdev
->
sdisk
.
¥e„tch
.
pﬁl_times_thªshﬁd
 = 
vÆ
;

1549 
	`sh™n⁄_öfo
("%s, modifyÖª„tchÖﬁl_times_thªshﬁdÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1551  
cou¡
;

1552 
	}
}

1554 
sh™n⁄_ssize_t
 
	$¥e„tch_so·_bio_size_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1556  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
so·_bio_size_thªshﬁd
);

1557 
	}
}

1559 
sh™n⁄_ssize_t
 
	$¥e„tch_so·_bio_size_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1561 
vÆ
;

1562 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1564 i‡(
vÆ
 < 0)

1565  -
EINVAL
;

1567 
sdev
->
sdisk
.
¥e„tch
.
so·_bio_size_thªshﬁd
 = 
vÆ
;

1568 
	`sh™n⁄_öfo
("%s, modifyÖª„tch so·_bio_size_thªshﬁdÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1570  
cou¡
;

1571 
	}
}

1573 
sh™n⁄_ssize_t
 
	$¥e„tch_h¨d_bio_size_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1575  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
h¨d_bio_size_thªshﬁd
);

1576 
	}
}

1578 
sh™n⁄_ssize_t
 
	$¥e„tch_h¨d_bio_size_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1580 
vÆ
;

1581 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1583 i‡(
vÆ
 < 0)

1584  -
EINVAL
;

1586 
sdev
->
sdisk
.
¥e„tch
.
h¨d_bio_size_thªshﬁd
 = 
vÆ
;

1587 
	`sh™n⁄_öfo
("%s, modifyÖª„tch h¨d_bio_size_thªshﬁdÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1589  
cou¡
;

1590 
	}
}

1592 
sh™n⁄_ssize_t
 
	$¥e„tch_œrge_block_io_thªshﬁd_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1594  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
œrge_block_io_thªshﬁd
);

1595 
	}
}

1597 
sh™n⁄_ssize_t
 
	$¥e„tch_œrge_block_io_thªshﬁd_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1599 
vÆ
;

1600 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1602 i‡(
vÆ
 < 0)

1603  -
EINVAL
;

1605 
sdev
->
sdisk
.
¥e„tch
.
œrge_block_io_thªshﬁd
 = 
vÆ
;

1606 
	`sh™n⁄_öfo
("%s, modifyÖª„tchÜ¨ge_block_io_thªshﬁdÅÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1608  
cou¡
;

1609 
	}
}

1611 
sh™n⁄_ssize_t
 
	$¥e„tch_di°™˚_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1613  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
di°™˚_Á˘‹
);

1614 
	}
}

1616 
sh™n⁄_ssize_t
 
	$¥e„tch_di°™˚_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1618 
vÆ
;

1619 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1621 i‡(
vÆ
 < 0 || vÆ > (
sdev
->
sdisk
.
¥e„tch
.
ˇche_löes
 - 1))

1622  -
EINVAL
;

1624 
sdev
->
sdisk
.
¥e„tch
.
di°™˚_Á˘‹
 = 
vÆ
;

1625 
	`sh™n⁄_öfo
("%s, modifyÖª„tch di°™˚_Á˘‹Åÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1627  
cou¡
;

1628 
	}
}

1630 
sh™n⁄_ssize_t
 
	$¥e„tch_íabÀ_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1632  
	`sh™n⁄_•rötf
(
buf
, "%s\n", 
	`gë_¥e„tch_íabÀ_°©e
(&
sdev
->
sdisk
.
¥e„tch
) ? "enable" : "disable");

1633 
	}
}

1635 
sh™n⁄_ssize_t
 
	$¥e„tch_íabÀ_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1637 
vÆ
;

1638 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1640 i‡(
vÆ
 == 0)

1641 
	`£t_¥e„tch_dißbÀ
(&
sdev
->
sdisk
.
¥e„tch
);

1643 
	`£t_¥e„tch_íabÀ
(&
sdev
->
sdisk
.
¥e„tch
);

1645 
	`sh™n⁄_öfo
("%s,Öª„tch i†%s.\n", 
sdev
->
cdev_«me
, 
	`gë_¥e„tch_íabÀ_°©e
(&sdev->
sdisk
.
¥e„tch
) ? "enable" : "disable");

1647  
cou¡
;

1648 
	}
}

1650 
sh™n⁄_ssize_t
 
	$¥e„tch_åaffic_Á˘‹_show
(
sh™n⁄_dev
 *
sdev
, *
buf
)

1652  
	`sh™n⁄_•rötf
(
buf
, "%d\n", 
sdev
->
sdisk
.
¥e„tch
.
åaffic_Á˘‹
);

1653 
	}
}

1655 
sh™n⁄_ssize_t
 
	$¥e„tch_åaffic_Á˘‹_°‹e
(
sh™n⁄_dev
 *
sdev
, c⁄° *
buf
, 
sh™n⁄_size_t
 
cou¡
)

1657 
vÆ
;

1658 
vÆ
 = 
	`sh™n⁄_sim∂e_°πﬁ
(
buf
, 
NULL
, 10);

1660 i‡(
vÆ
 < 0)

1661  -
EINVAL
;

1663 
sdev
->
sdisk
.
¥e„tch
.
åaffic_Á˘‹
 = 
vÆ
;

1664 
	`sh™n⁄_öfo
("%s, modifyÖª„tchÅøffic_Á˘‹Åÿ%d.\n", 
sdev
->
cdev_«me
, 
vÆ
);

1666  
cou¡
;

1667 
	}
}

	@shannon_time.c

1 
	~"sh™n⁄_time.h
"

2 
	~<löux/jiffõs.h
>

3 
	~<löux/time.h
>

4 
	~<löux/timî.h
>

5 
	~<löux/dñay.h
>

6 
	~<löux/vîsi⁄.h
>

7 
	~<asm/∑øm.h
>

9 
	$gë_HZ
()

11  
HZ
;

12 
	}
}

15 
	$sh™n⁄_öô_timî
(
sh™n⁄_timî_li°
 *
timî
)

17 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 15, 0)

18 
	`öô_timî
((
timî_li°
 *)
timî
);

19 ((
timî_li°
 *)
timî
)->
fun˘i⁄
 = 
NULL
;

21 
	`__öô_timî
((
timî_li°
 *)
timî
, 
NULL
, 0);

23 
	}
}

25 
	$sh™n⁄_add_timî
(
sh™n⁄_timî_li°
 *
timî
, 
expúes
)

27 ((
timî_li°
 *)
timî
)->
expúes
 =Éxpires;

28 
	`add_timî
((
timî_li°
 *)
timî
);

29 
	}
}

31 
	$sh™n⁄_dñ_timî_sync
(
sh™n⁄_timî_li°
 *
timî
)

33  
	`dñ_timî_sync
((
timî_li°
 *)
timî
);

34 
	}
}

36 
	$sh™n⁄_dñ_timî
(
sh™n⁄_timî_li°
 *
timî
)

38  
	`dñ_timî
((
timî_li°
 *)
timî
);

39 
	}
}

41 
	$sh™n⁄_mod_timî
(
sh™n⁄_timî_li°
 *
timî
, 
expúes
)

43  
	`mod_timî
((
timî_li°
 *)
timî
, 
expúes
);

44 
	}
}

46 
	$sh™n⁄_timî_≥ndög
(
sh™n⁄_timî_li°
 * 
timî
)

48  
	`timî_≥ndög
((
timî_li°
 *)
timî
);

49 
	}
}

51 
sh™n⁄_£t_timî_c⁄ãxt
(
sh™n⁄_timî_li°
 *
timî
, (*
f
)(shannon_timer_list *))

53 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 15, 0)

54 ((
timî_li°
 *)
timî
)->
d©a
 = ()timer;

55 ((
timî_li°
 *)
timî
)->
fun˘i⁄
 = ((*Ë())
f
;

57 ((
timî_li°
 *)
timî
)->
fun˘i⁄
 = ((*Ë(timî_li° *))
f
;

59 
	}
}

61 
	$sh™n⁄_timî_has_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
)

63  ((
timî_li°
 *)
timî
)->
fun˘i⁄
 ? 1 : 0;

64 
	}
}

67 
	$sh™n⁄_m¶ìp
(
m£cs
)

69 
	`m¶ìp
(
m£cs
);

70 
	}
}

72 
	$sh™n⁄_udñay
(
u£cs
)

74 
	`udñay
(
u£cs
);

75 
	}
}

78 
	$gë_jiffõs
()

80  
jiffõs
;

81 
	}
}

83 
	$sh™n⁄_do_gëtimeofday
(
sh™n⁄_timevÆ
 *
tv
)

85 
timevÆ
 
time
;

86 
	`do_gëtimeofday
(&
time
);

87 
tv
->
tv_£c
 = 
time
.tv_sec;

88 
tv
->
tv_u£c
 = 
time
.tv_usec;

89 
	}
}

92 
	$sh™n⁄_jiffõs_to_m£cs
(c⁄° 
j
)

94  
	`jiffõs_to_m£cs
(
j
);

95 
	}
}

97 
	$sh™n⁄_jiffõs_to_u£cs
(c⁄° 
j
)

99  
	`jiffõs_to_u£cs
(
j
);

100 
	}
}

102 
	$sh™n⁄_m£cs_to_jiffõs
(c⁄° 
m
)

104  
	`m£cs_to_jiffõs
(
m
);

105 
	}
}

107 
	$sh™n⁄_u£cs_to_jiffõs
(c⁄° 
u
)

109  
	`u£cs_to_jiffõs
(
u
);

110 
	}
}

	@shannon_time.h

1 #i‚de‡
__SHANNON_TIME_H


2 
	#__SHANNON_TIME_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

6 
	#‰om_timî
(
v¨
, 
ˇŒback_timî
, 
timî_fõld«me
) \

7 
	`c⁄èöî_of
(
ˇŒback_timî
, 
	`ty≥of
(*
v¨
), 
timî_fõld«me
)

	)

10 
	s__sh™n⁄_timî_li°
 {

11 
RESERVE_MEM
(160);

14 
	ssh™n⁄_timevÆ
 {

15 
u64
 
	mtv_£c
;

16 
u64
 
	mtv_u£c
;

19 
__sh™n⁄_timî_li°
 
	tsh™n⁄_timî_li°
;

21 
gë_HZ
();

22 
sh™n⁄_öô_timî
(
sh™n⁄_timî_li°
 *
timî
);

23 
sh™n⁄_add_timî
(
sh™n⁄_timî_li°
 *
timî
, 
expúes
);

24 
sh™n⁄_£t_timî_c⁄ãxt
(
sh™n⁄_timî_li°
 *
timî
, (*
f
)(shannon_timer_list *));

25 
	`sh™n⁄_timî_has_fun˘i⁄
(
sh™n⁄_timî_li°
 *
timî
);

26 
	`sh™n⁄_dñ_timî_sync
(
sh™n⁄_timî_li°
 *
timî
);

27 
	`sh™n⁄_dñ_timî
(
sh™n⁄_timî_li°
 *
timî
);

28 
	`sh™n⁄_mod_timî
(
sh™n⁄_timî_li°
 *
timî
, 
expúes
);

29 
	`sh™n⁄_timî_≥ndög
(
sh™n⁄_timî_li°
 * 
timî
);

32 
	`sh™n⁄_m¶ìp
(
m£cs
);

33 
	`sh™n⁄_udñay
(
u£cs
);

35 
	`gë_jiffõs
();

36 
	`sh™n⁄_do_gëtimeofday
(
sh™n⁄_timevÆ
 *
tv
);

39 
	`sh™n⁄_jiffõs_to_m£cs
(c⁄° 
j
);

40 
	`sh™n⁄_jiffõs_to_u£cs
(c⁄° 
j
);

41 
	`sh™n⁄_m£cs_to_jiffõs
(c⁄° 
m
);

42 
	`sh™n⁄_u£cs_to_jiffõs
(c⁄° 
u
);

	@shannon_waitqueue.c

6 
	~<löux/öô.h
>

7 
	~<löux/moduÀ.h
>

8 
	~<löux/sched.h
>

9 
	~<löux/mm.h
>

10 
	~<löux/waô.h
>

11 
	~<löux/hash.h
>

12 
	~<löux/vîsi⁄.h
>

14 
	~"sh™n⁄_waôqueue.h
"

16 
	$__sh™n⁄_wake_up_comm⁄
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
mode
,

17 
ƒ_ex˛usive
, 
wake_Êags
, *
key
)

19 
sh™n⁄_waô_queue_t
 *
cuº
, *
√xt
;

21 
	`sh™n⁄_li°_f‹_óch_íåy_ß„
(
cuº
, 
√xt
, &
q
->
èsk_li°
,Åask_list) {

22 
Êags
 = 
cuº
->flags;

24 i‡(
cuº
->
	`func
(cuº, 
mode
, 
wake_Êags
, 
key
) &&

25 (
Êags
 & 
WQ_FLAG_EXCLUSIVE
Ë&& !--
ƒ_ex˛usive
)

28 
	}
}

30 
	$__sh™n⁄_wake_up
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
mode
,

31 
ƒ_ex˛usive
, *
key
)

33 
Êags
;

35 
	`•ö_lock_úqßve
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

36 
	`__sh™n⁄_wake_up_comm⁄
(
q
, 
mode
, 
ƒ_ex˛usive
, 0, 
key
);

37 
	`•ö_u∆ock_úqª°‹e
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

38 
	}
}

40 
	$__sh™n⁄_öô_waôqueue_hód
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_lock_˛ass_key
 *
key
)

42 
	`•ö_lock_öô
((
•ölock_t
 *)&
q
->
lock
);

43 
	`lockdï_£t_˛ass
((
•ölock_t
 *)&
q
->
lock
, (
lock_˛ass_key
 *)
key
);

44 
	`SHANNON_INIT_LIST_HEAD
(&
q
->
èsk_li°
);

45 
	}
}

47 
ölöe
 
	$__sh™n⁄_add_waô_queue
(
sh™n⁄_waô_queue_hód_t
 *
hód
, 
sh™n⁄_waô_queue_t
 *
√w
)

49 
	`sh™n⁄_li°_add
(&
√w
->
èsk_li°
, &
hód
->task_list);

50 
	}
}

52 
	$sh™n⁄_waôqueue_a˘ive
(
sh™n⁄_waô_queue_hód_t
 *
q
)

54  !
	`sh™n⁄_li°_em±y
(&
q
->
èsk_li°
);

55 
	}
}

57 
	$sh™n⁄_add_waô_queue
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_waô_queue_t
 *
waô
)

59 
Êags
;

61 
waô
->
Êags
 &~
WQ_FLAG_EXCLUSIVE
;

62 
	`•ö_lock_úqßve
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

63 
	`__sh™n⁄_add_waô_queue
(
q
, 
waô
);

64 
	`•ö_u∆ock_úqª°‹e
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

65 
	}
}

79 
	$sh™n⁄_¥ï¨e_to_waô
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_waô_queue_t
 *
waô
, 
°©e
)

81 
Êags
;

83 
waô
->
Êags
 &~
WQ_FLAG_EXCLUSIVE
;

84 
	`•ö_lock_úqßve
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

85 i‡(
	`sh™n⁄_li°_em±y
(&
waô
->
èsk_li°
))

86 
	`__sh™n⁄_add_waô_queue
(
q
, 
waô
);

87 
	`£t_cuºít_°©e
(
°©e
);

88 
	`•ö_u∆ock_úqª°‹e
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

89 
	}
}

101 
	$sh™n⁄_föish_waô
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_waô_queue_t
 *
waô
)

103 
Êags
;

105 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

119 i‡(!
	`sh™n⁄_li°_em±y_ˇªful
(&
waô
->
èsk_li°
)) {

120 
	`•ö_lock_úqßve
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

121 
	`sh™n⁄_li°_dñ_öô
(&
waô
->
èsk_li°
);

122 
	`•ö_u∆ock_úqª°‹e
((
•ölock_t
 *)&
q
->
lock
, 
Êags
);

124 
	}
}

126 
	$sh™n⁄_aut‹emove_wake_fun˘i⁄
(
sh™n⁄_waô_queue_t
 *
waô
, 
mode
, 
sync
, *
key
)

128 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(4, 13, 0)

129 
ªt
 = 
	`deÁu…_wake_fun˘i⁄
((
waô_queue_t
 *)
waô
, 
mode
, 
sync
, 
key
);

131 
ªt
 = 
	`deÁu…_wake_fun˘i⁄
((
waô_queue_íåy_t
 *)
waô
, 
mode
, 
sync
, 
key
);

134 i‡(
ªt
)

135 
	`sh™n⁄_li°_dñ_öô
(&
waô
->
èsk_li°
);

136  
ªt
;

137 
	}
}

	@shannon_waitqueue.h

1 #i‚de‡
__SHANNON_WAITQUEUE_H


2 
	#__SHANNON_WAITQUEUE_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

5 
	~"sh™n⁄_sched.h
"

6 
	~"sh™n⁄_li°.h
"

8 
	s__sh™n⁄_waô_queue_hód
 {

9 
sh™n⁄_•ölock_t
 
	mlock
;

10 
sh™n⁄_li°_hód
 
	mèsk_li°
;

12 
__sh™n⁄_waô_queue_hód
 
	tsh™n⁄_waô_queue_hód_t
;

14 
	ssh™n⁄_lock_˛ass_key
 {

15 
RESERVE_MEM
(16);

18 
__sh™n⁄_waô_queue
 
	tsh™n⁄_waô_queue_t
;

19 (*
	tsh™n⁄_waô_queue_func_t
)(
	tsh™n⁄_waô_queue_t
 *
	twaô
, 
	tmode
, 
	tÊags
, *
	tkey
);

21 
	s__sh™n⁄_waô_queue
 {

22 
Êags
;

23 *
¥iv©e
;

24 
sh™n⁄_waô_queue_func_t
 
func
;

25 
sh™n⁄_li°_hód
 
èsk_li°
;

28 
	`__sh™n⁄_wake_up
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
mode
, 
ƒ_ex˛usive
, *
key
);

29 
	`__sh™n⁄_öô_waôqueue_hód
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_lock_˛ass_key
 *
key
);

30 
	`sh™n⁄_waôqueue_a˘ive
(
sh™n⁄_waô_queue_hód_t
 *
q
);

31 
	`sh™n⁄_¥ï¨e_to_waô
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_waô_queue_t
 *
waô
, 
°©e
);

32 
	`sh™n⁄_föish_waô
(
sh™n⁄_waô_queue_hód_t
 *
q
, 
sh™n⁄_waô_queue_t
 *
waô
);

34 
	`sh™n⁄_aut‹emove_wake_fun˘i⁄
(
sh™n⁄_waô_queue_t
 *
waô
, 
mode
, 
sync
, *
key
);

36 
	#sh™n⁄_öô_waôqueue_hód
(
q
) \

38 
sh™n⁄_lock_˛ass_key
 
__key
; \

40 
	`__sh™n⁄_öô_waôqueue_hód
((
q
), &
__key
); \

41 
	}
} 0)

	)

43 
	#sh™n⁄_wake_up
(
x
Ë
	`__sh™n⁄_wake_up
(x, (
SHN_TASK_INTERRUPTIBLE
 | 
SHN_TASK_UNINTERRUPTIBLE
), 1, 
NULL
)

	)

45 
	#SHANNON_DEFINE_WAIT_FUNC
(
«me
, 
fun˘i⁄
) \

46 
sh™n⁄_waô_queue_t
 
«me
 = { \

47 .
¥iv©e
 = 
	`sh™n⁄_cuºít
(), \

48 .
func
 = 
fun˘i⁄
, \

49 .
èsk_li°
 = 
	`SHANNON_LIST_HEAD_INIT
((
«me
).task_list), \

50 }

	)

52 
	#SHANNON_DEFINE_WAIT
(
«me
Ë
	`SHANNON_DEFINE_WAIT_FUNC
“ame, 
sh™n⁄_aut‹emove_wake_fun˘i⁄
)

	)

54 
	#__sh™n⁄_waô_evít
(
wq
, 
c⁄dôi⁄
) \

56 
	`SHANNON_DEFINE_WAIT
(
__waô
); \

59 
	`sh™n⁄_¥ï¨e_to_waô
(&
wq
, &
__waô
, 
SHN_TASK_UNINTERRUPTIBLE
); \

60 i‡(
c⁄dôi⁄
) \

62 
	`sh™n⁄_scheduÀ
(); \

64 
	`sh™n⁄_föish_waô
(&
wq
, &
__waô
); \

65 } 0)

	)

67 
	#sh™n⁄_waô_evít
(
wq
, 
c⁄dôi⁄
) \

69 i‡(
c⁄dôi⁄
) \

71 
	`__sh™n⁄_waô_evít
(
wq
, 
c⁄dôi⁄
); \

72 } 0)

	)

74 
	#__sh™n⁄_waô_evít_öãºu±ibÀ
(
wq
, 
c⁄dôi⁄
, 
ªt
) \

76 
	`SHANNON_DEFINE_WAIT
(
__waô
); \

79 
	`sh™n⁄_¥ï¨e_to_waô
(&
wq
, &
__waô
, 
SHN_TASK_INTERRUPTIBLE
); \

80 i‡(
c⁄dôi⁄
) \

82 i‡(!
	`sh™n⁄_sig«l_≥ndög
(
	`sh™n⁄_cuºít
())) { \

83 
	`sh™n⁄_scheduÀ
(); \

86 
ªt
 = -
ERESTARTSYS
; \

89 
	`sh™n⁄_föish_waô
(&
wq
, &
__waô
); \

90 } 0)

	)

92 
	#sh™n⁄_waô_evít_öãºu±ibÀ
(
wq
, 
c⁄dôi⁄
) \

94 
__ªt
 = 0; \

95 i‡(!(
c⁄dôi⁄
)) \

96 
	`__sh™n⁄_waô_evít_öãºu±ibÀ
(
wq
, 
c⁄dôi⁄
, 
__ªt
); \

97 
__ªt
; \

98 })

	)

	@shannon_workqueue.c

1 
	~"sh™n⁄_w‹kqueue.h
"

2 
	~<löux/kî√l.h
>

3 
	~<löux/vîsi⁄.h
>

4 
	~<löux/w‹kqueue.h
>

6 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 20)

7 
	s__dñayed_w‹k
 {

8 
w‹k_°ru˘
 
	mw‹k
;

12 
	$sh™n⁄_öô_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
, 
sh™n⁄_w‹k_func_t
 
func
)

14 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

15 
	`INIT_WORK
((
w‹k_°ru˘
 *)
w‹k
, (
w‹k_func_t
)
func
);

17 
	`INIT_WORK
((
w‹k_°ru˘
 *)
w‹k
, (*)
func
, work);

19 
	}
}

21 
	$sh™n⁄_öô_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
sh™n⁄_w‹k_func_t
 
func
)

23 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

24 
	`INIT_DELAYED_WORK
((
dñayed_w‹k
 *)
w‹k
, (
w‹k_func_t
)
func
);

26 
	`INIT_WORK
((
w‹k_°ru˘
 *)
w‹k
, (*)
func
, work);

28 
	}
}

30 
sh™n⁄_dñayed_w‹k
 *
	$gë_dñayed_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

32 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

33 
dñayed_w‹k
 *dñayed_w‹k = 
	`c⁄èöî_of
((
w‹k_°ru˘
 *)
w‹k
, delayed_work, work);

34  (
sh™n⁄_dñayed_w‹k
 *)
dñayed_w‹k
;

36  (
sh™n⁄_dñayed_w‹k
 *)
w‹k
;

39 
	}
}

41 
	$sh™n⁄_queue_w‹k
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
, 
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

43  
	`queue_w‹k
((
w‹kqueue_°ru˘
 *)
wq
, (
w‹k_°ru˘
 *)
w‹k
);

44 
	}
}

46 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	$sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(c⁄° *
«me
)

48  
	`¸óã_sögÀthªad_w‹kqueue
(
«me
);

49 
	}
}

51 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	$sh™n⁄_¸óã_w‹kqueue
(c⁄° *
«me
)

53  
	`¸óã_w‹kqueue
(
«me
);

54 
	}
}

56 
	$sh™n⁄_de°roy_w‹kqueue
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
)

58 
	`de°roy_w‹kqueue
((
w‹kqueue_°ru˘
 *)
wq
);

59 
	}
}

61 
	$sh™n⁄_Êush_w‹kqueue
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
)

63 
	`Êush_w‹kqueue
((
w‹kqueue_°ru˘
 *)
wq
);

64 
	}
}

66 
	$sh™n⁄_ˇn˚l_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
)

68 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

69 
	`ˇn˚l_dñayed_w‹k
((
dñayed_w‹k
 *)
w‹k
);

71 
	`ˇn˚l_dñayed_w‹k
((
w‹k_°ru˘
 *)
w‹k
);

73 
	}
}

76 
	$sh™n⁄_queue_dñayed_w‹k
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
, 
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
dñay
)

78 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

79  
	`queue_dñayed_w‹k
((
w‹kqueue_°ru˘
 *)
wq
, (
dñayed_w‹k
 *)
w‹k
, 
dñay
);

81  
	`queue_dñayed_w‹k
((
w‹kqueue_°ru˘
 *)
wq
, (
w‹k_°ru˘
 *)
w‹k
, 
dñay
);

83 
	}
}

85 
	$sh™n⁄_scheduÀ_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
dñay
)

87 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

88  
	`scheduÀ_dñayed_w‹k
((
dñayed_w‹k
 *)
w‹k
, 
dñay
);

90  
	`scheduÀ_dñayed_w‹k
((
w‹k_°ru˘
 *)
w‹k
, 
dñay
);

92 
	}
}

94 
	$sh™n⁄_scheduÀ_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

96  
	`scheduÀ_w‹k
((
w‹k_°ru˘
 *)
w‹k
);

97 
	}
}

99 
	$sh™n⁄_w‹k_˛ór_≥ndög
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

101 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20)

102 
	`˛ór_bô
(0, &((
w‹k_°ru˘
 *)
w‹k
)->
≥ndög
);

103 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 22)

104 
	`w‹k_ªÀa£
((
w‹k_°ru˘
 *)
w‹k
);

105 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 16, 0)

106 
	`w‹k_˛ór_≥ndög
((
w‹k_°ru˘
 *)
w‹k
);

108 
	`˛ór_bô
(
WORK_STRUCT_PENDING_BIT
, 
	`w‹k_d©a_bôs
((
w‹k_°ru˘
 *)
w‹k
));

110 
	}
}

112 
	$sh™n⁄_w‹k_≥ndög
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
)

114 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20)

115  
	`ã°_bô
(0, &((
w‹k_°ru˘
 *)
w‹k
)->
≥ndög
);

117  
	`w‹k_≥ndög
((
w‹k_°ru˘
 *)
w‹k
);

119 
	}
}

121 
	$__sh™n⁄_ˇn˚l_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
)

123 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 15, 0)

124 
ªt
;

126 
ªt
 = 
	`dñ_timî
(&((
dñayed_w‹k
 *)
w‹k
)->
timî
);

127 i‡(
ªt
)

128 
	`sh™n⁄_w‹k_˛ór_≥ndög
((
sh™n⁄_w‹k_°ru˘
 *)(&((
dñayed_w‹k
 *)
w‹k
)->work));

129  
ªt
;

130 #ñi‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31)

131  
	`__ˇn˚l_dñayed_w‹k
((
dñayed_w‹k
 *)
w‹k
);

133 
ªt
;

134 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 20)

135 
ªt
 = 
	`dñ_timî
(&((
dñayed_w‹k
 *)
w‹k
)->
timî
);

136 i‡(
ªt
)

137 
	`sh™n⁄_w‹k_˛ór_≥ndög
((
sh™n⁄_w‹k_°ru˘
 *)(&((
dñayed_w‹k
 *)
w‹k
)->work));

139 
ªt
 = 
	`dñ_timî
(&(((
__dñayed_w‹k
 *)
w‹k
)->w‹k.
timî
));

140 i‡(
ªt
)

141 
	`sh™n⁄_w‹k_˛ór_≥ndög
((
sh™n⁄_w‹k_°ru˘
 *)(&((
__dñayed_w‹k
 *)
w‹k
)->work));

143  
ªt
;

145 
	}
}

147 
	#RT_MAX_LOOP_COUNT
 1000

	)

149 
	$π_thªad_‚
(*
d©a
)

151 
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
 = 
d©a
;

152 
sh™n⁄_π_w‹k_°ru˘
 *
πw
;

153 
Êags
;

154 
ªt
 = 
	`£t_thªad_π
();

155 
lo›_cou¡
, 
is_π
;

157 i‡(
ªt
)

158 
	`sh™n⁄_w¨n
("FaûedÅÿ£à'%s'ÅÿbêRT,Éº‹: %d.\n", 
πwq
->
thªad_«me
, 
ªt
);

160 
lo›_cou¡
 = 0;

161 
is_π
 = 1;

162 !
	`sh™n⁄_li°_em±y
(&
πwq
->
li°
)) {

163 
Êags
 = 
	`sh™n⁄_•ö_lock_úqßve
(&
πwq
->
lock
);

164 
πw
 = 
	`sh™n⁄_li°_fú°_íåy
(&
πwq
->
li°
, 
sh™n⁄_π_w‹k_°ru˘
,

165 
li°
);

166 
	`sh™n⁄_li°_dñ_öô
(&
πw
->
li°
);

167 
	`sh™n⁄_˛ór_bô
(
RT_WORK_STRUCT_PENDING_BIT
, &
πw
->
Êags
);

168 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
πwq
->
lock
, 
Êags
);

169 
πw
->
	`func
(rtw);

170 ++
lo›_cou¡
;

171 i‡(
lo›_cou¡
 >
RT_MAX_LOOP_COUNT
) {

172 i‡(
is_π
) {

173 
ªt
 = 
	`£t_thªad_n‹mÆ
();

174 
is_π
 = 0;

176 
	`sh™n⁄_c⁄d_ªsched
();

179 i‡(!
is_π
)

180 
	`£t_thªad_π
();

181 
	`sh™n⁄_wake_up
(&
πwq
->
Êush_evít
);

182 i‡(
	`u∆ikñy
(
	`sh™n⁄_kthªad_should_°›
()))

184 i‡(
	`sh™n⁄_li°_em±y
(&
πwq
->
li°
)) {

185 
	`sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_INTERRUPTIBLE
);

186 i‡(
	`sh™n⁄_li°_em±y
(&
πwq
->
li°
))

187 
	`sh™n⁄_scheduÀ
();

189 
	`__sh™n⁄_£t_cuºít_°©e
(
SHN_TASK_RUNNING
);

194 
	}
}

196 
sh™n⁄_π_w‹kqueue_°ru˘
 *
	$sh™n⁄_¸óã_sögÀthªad_π_w‹kqueue
(c⁄° *
«me
)

198 
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
 = 
	`sh™n⁄_kzÆloc
((*πwq), 
GFP_SHANNON
);

199 i‡(!
πwq
)

200  
NULL
;

201 
	`sh™n⁄_•ö_lock_öô
(&
πwq
->
lock
);

202 
	`SHANNON_INIT_LIST_HEAD
(&
πwq
->
li°
);

203 
	`sh™n⁄_öô_waôqueue_hód
(&
πwq
->
Êush_evít
);

204 
πwq
->
thªad
 = 
	`sh™n⁄_kthªad_run
(
π_thªad_‚
,Ñtwq, "%s", 
«me
);

205 i‡(
	`SHANNON_IS_ERR
(
πwq
->
thªad
)) {

206 
	`sh™n⁄_k‰ì
(
πwq
);

207  
NULL
;

209 
	`sh™n⁄_¢¥ötf
(
πwq
->
thªad_«me
, ‘twq->thªad_«me), "%s", 
«me
);

210  
πwq
;

211 
	}
}

213 
	$sh™n⁄_Êush_π_w‹kqueue
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
)

215 
	`sh™n⁄_wake_up_¥o˚ss
(
πwq
->
thªad
);

216 
	`sh™n⁄_waô_evít
(
πwq
->
Êush_evít
, 
	`sh™n⁄_li°_em±y
(&πwq->
li°
));

217 
	}
}

219 
	$sh™n⁄_de°roy_π_w‹kqueue
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
)

221 
	`sh™n⁄_Êush_π_w‹kqueue
(
πwq
);

222 
	`sh™n⁄_kthªad_°›
(
πwq
->
thªad
);

223 
	`sh™n⁄_k‰ì
(
πwq
);

224 
	}
}

226 
	$sh™n⁄_π_queue_w‹k
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
, 
sh™n⁄_π_w‹k_°ru˘
 *
w‹k
)

228 
Êags
;

229 
ªt
 = 0;

230 
Êags
 = 
	`sh™n⁄_•ö_lock_úqßve
(&
πwq
->
lock
);

231 i‡(!
	`sh™n⁄_ã°_™d_£t_bô
(
RT_WORK_STRUCT_PENDING_BIT
, &
w‹k
->
Êags
)) {

232 
	`BUG_ON
(!
	`sh™n⁄_li°_em±y
(&
w‹k
->
li°
));

233 
	`sh™n⁄_li°_add_èû
(&
w‹k
->
li°
, &
πwq
->list);

235 
ªt
 = -1;

236 
	`sh™n⁄_•ö_u∆ock_úqª°‹e
(&
πwq
->
lock
, 
Êags
);

237 i‡(
ªt
 == 0)

238 
	`sh™n⁄_wake_up_¥o˚ss
(
πwq
->
thªad
);

239  
ªt
;

240 
	}
}

242 
	$sh™n⁄_öô_π_w‹k
(
sh™n⁄_π_w‹k_°ru˘
 *
w‹k
, 
sh™n⁄_π_w‹k_func_t
 
func
)

244 
	`SHANNON_INIT_LIST_HEAD
(&
w‹k
->
li°
);

245 
w‹k
->
func
 = func;

246 
	}
}

	@shannon_workqueue.h

1 #i‚de‡
__SHANNON_WORKQUEUE_H


2 
	#__SHANNON_WORKQUEUE_H


	)

4 
	~"sh™n⁄_kc‹e.h
"

5 
	~"sh™n⁄_li°.h
"

6 
	~"sh™n⁄_sched.h
"

7 
	~"sh™n⁄_waôqueue.h
"

9 
	ssh™n⁄_w‹k_°ru˘
 {

10 
RESERVE_MEM
(216);

13 
	ssh™n⁄_dñayed_w‹k
 {

14 
RESERVE_MEM
(300);

17 (*
	tsh™n⁄_w‹k_func_t
)(
	tsh™n⁄_w‹k_°ru˘
 *
	tw‹k
);

18 
	tsh™n⁄_w‹kqueue_°ru˘_t
;

21 
	`sh™n⁄_öô_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
, 
sh™n⁄_w‹k_func_t
 
func
);

22 
	`sh™n⁄_öô_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
sh™n⁄_w‹k_func_t
 
func
);

23 
sh™n⁄_dñayed_w‹k
 *
	`gë_dñayed_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

24 
	`sh™n⁄_queue_w‹k
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
, 
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

25 
	`sh™n⁄_w‹k_≥ndög
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

26 
	`sh™n⁄_queue_dñayed_w‹k
(
sh™n⁄_w‹kqueue_°ru˘_t
*
wq
, 
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
dñay
);

27 
	`sh™n⁄_scheduÀ_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
, 
dñay
);

28 
	`sh™n⁄_scheduÀ_w‹k
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

29 
	`sh™n⁄_ˇn˚l_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
);

30 
	`__sh™n⁄_ˇn˚l_dñayed_w‹k
(
sh™n⁄_dñayed_w‹k
 *
w‹k
);

31 
	`sh™n⁄_w‹k_˛ór_≥ndög
(
sh™n⁄_w‹k_°ru˘
 *
w‹k
);

33 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	`sh™n⁄_¸óã_sögÀthªad_w‹kqueue
(c⁄° *
«me
);

34 
sh™n⁄_w‹kqueue_°ru˘_t
 *
	`sh™n⁄_¸óã_w‹kqueue
(c⁄° *
«me
);

35 
	`sh™n⁄_de°roy_w‹kqueue
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
);

36 
	`sh™n⁄_Êush_w‹kqueue
(
sh™n⁄_w‹kqueue_°ru˘_t
 *
wq
);

38 
	ssh™n⁄_π_w‹kqueue_°ru˘
 {

39 
sh™n⁄_•ölock_t
 
lock
;

40 
sh™n⁄_li°_hód
 
li°
;

41 
sh™n⁄_waô_queue_hód_t
 
Êush_evít
;

42 
sh™n⁄_èsk_°ru˘_t
 *
thªad
;

43 
thªad_«me
[32];

46 
sh™n⁄_π_w‹k_°ru˘
;

47 (*
	tsh™n⁄_π_w‹k_func_t
)(
	tsh™n⁄_π_w‹k_°ru˘
 *
	tw‹k
);

48 
	ssh™n⁄_π_w‹k_°ru˘
 {

49 
	#RT_WORK_STRUCT_PENDING_BIT
 0

	)

50 
Êags
;

51 
sh™n⁄_π_w‹k_func_t
 
func
;

52 
sh™n⁄_li°_hód
 
li°
;

55 
	`sh™n⁄_öô_π_w‹k
(
sh™n⁄_π_w‹k_°ru˘
 *
w‹k
, 
sh™n⁄_π_w‹k_func_t
 
func
);

56 
	`sh™n⁄_π_queue_w‹k
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
, 
sh™n⁄_π_w‹k_°ru˘
 *
w‹k
);

57 
sh™n⁄_π_w‹kqueue_°ru˘
 *
	`sh™n⁄_¸óã_sögÀthªad_π_w‹kqueue
(c⁄° *
«me
);

58 
	`sh™n⁄_de°roy_π_w‹kqueue
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
);

59 
	`sh™n⁄_Êush_π_w‹kqueue
(
sh™n⁄_π_w‹kqueue_°ru˘
 *
πwq
);

	@/usr/include/asm/param.h

2 #i‚de‡
__ASM_STUB_PARAM_H


3 
	#__ASM_STUB_PARAM_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/∑øm.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/∑øm.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/fcntl.h

1 #i‚de‡
_LINUX_FCNTL_H


2 
	#_LINUX_FCNTL_H


	)

4 
	~<asm/f˙é.h
>

8 
	#F_CANCELLK
 (
F_LINUX_SPECIFIC_BASE
+5)

	)

10 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
+0)

	)

11 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
+1)

	)

17 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

22 
	#DN_ACCESS
 0x00000001

	)

23 
	#DN_MODIFY
 0x00000002

	)

24 
	#DN_CREATE
 0x00000004

	)

25 
	#DN_DELETE
 0x00000008

	)

26 
	#DN_RENAME
 0x00000010

	)

27 
	#DN_ATTRIB
 0x00000020

	)

28 
	#DN_MULTISHOT
 0x80000000

	)

30 
	#AT_FDCWD
 -100

	)

33 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

34 
	#AT_REMOVEDIR
 0x200

	)

36 
	#AT_SYMLINK_FOLLOW
 0x400

	)

37 
	#AT_NO_AUTOMOUNT
 0x800

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

23 #unde‡
NR_OPEN


24 
sys˘l_ƒ_›í
;

25 
	#INR_OPEN
 1024

	)

27 
	#BLOCK_SIZE_BITS
 10

	)

28 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

30 
	#SEEK_SET
 0

	)

31 
	#SEEK_CUR
 1

	)

32 
	#SEEK_END
 2

	)

35 
	sfûes_°©_°ru˘
 {

36 
	mƒ_fûes
;

37 
	mƒ_‰ì_fûes
;

38 
	mmax_fûes
;

40 
fûes_°©_°ru˘
 
fûes_°©
;

41 
gë_max_fûes
();

43 
	söodes_°©_t
 {

44 
	mƒ_öodes
;

45 
	mƒ_unu£d
;

46 
	mdummy
[5];

48 
öodes_°©_t
 
öodes_°©
;

50 
Àa£s_íabÀ
, 
Àa£_bªak_time
;

52 #ifde‡
CONFIG_DNOTIFY


53 
dú_nŸify_íabÀ
;

56 
	#NR_FILE
 8192

	)

58 
	#MAY_EXEC
 1

	)

59 
	#MAY_WRITE
 2

	)

60 
	#MAY_READ
 4

	)

61 
	#MAY_APPEND
 8

	)

63 
	#FMODE_READ
 1

	)

64 
	#FMODE_WRITE
 2

	)

67 
	#FMODE_LSEEK
 4

	)

68 
	#FMODE_PREAD
 8

	)

69 
	#FMODE_PWRITE
 
FMODE_PREAD


	)

74 
	#FMODE_EXEC
 16

	)

76 
	#FMODE_32BITHASH
 ( (
fmode_t
)0x200)

	)

78 
	#FMODE_64BITHASH
 ( (
fmode_t
)0x400)

	)

80 
	#RW_MASK
 1

	)

81 
	#RWA_MASK
 2

	)

82 
	#READ
 0

	)

83 
	#WRITE
 1

	)

84 
	#READA
 2

	)

85 
	#SWRITE
 3

	)

86 
	#SPECIAL
 4

	)

87 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNC
))

	)

88 
	#WRITE_SYNC
 (
WRITE
 | (1 << 
BIO_RW_SYNC
))

	)

89 
	#WRITE_BARRIER
 ((1 << 
BIO_RW
Ë| (1 << 
BIO_RW_BARRIER
))

	)

91 
	#SEL_IN
 1

	)

92 
	#SEL_OUT
 2

	)

93 
	#SEL_EX
 4

	)

96 
	#FS_REQUIRES_DEV
 1

	)

97 
	#FS_BINARY_MOUNTDATA
 2

	)

98 
	#HAVE_FALLOCATE


	)

99 
	#FS_HAS_FALLOCATE
 4

	)

100 
	#FS_HAS_FIEMAP
 8

	)

101 
	#FS_HAS_FREEZE
 16

	)

102 
	#FS_HAS_TRYTOFREE
 32

	)

103 
	#FS_HAS_GETRESV
 64

	)

104 
	#FS_HAS_IODONE2
 128

	)

105 
	#FS_REVAL_DOT
 16384

	)

106 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

113 
	#MS_RDONLY
 1

	)

114 
	#MS_NOSUID
 2

	)

115 
	#MS_NODEV
 4

	)

116 
	#MS_NOEXEC
 8

	)

117 
	#MS_SYNCHRONOUS
 16

	)

118 
	#MS_REMOUNT
 32

	)

119 
	#MS_MANDLOCK
 64

	)

120 
	#MS_DIRSYNC
 128

	)

121 
	#MS_NOATIME
 1024

	)

122 
	#MS_NODIRATIME
 2048

	)

123 
	#MS_BIND
 4096

	)

124 
	#MS_MOVE
 8192

	)

125 
	#MS_REC
 16384

	)

126 
	#MS_VERBOSE
 32768

	)

128 
	#MS_SILENT
 32768

	)

129 
	#MS_POSIXACL
 (1<<16Ë

	)

130 
	#MS_UNBINDABLE
 (1<<17Ë

	)

131 
	#MS_PRIVATE
 (1<<18Ë

	)

132 
	#MS_SLAVE
 (1<<19Ë

	)

133 
	#MS_SHARED
 (1<<20Ë

	)

134 
	#MS_NO_LEASES
 (1<<21Ë

	)

135 
	#MS_HAS_SETLEASE
 (1<<22Ë

	)

136 
	#MS_I_VERSION
 (1<<23Ë

	)

137 
	#MS_HAS_NEW_AOPS
 (1<<24Ë

	)

138 
	#MS_HAS_LAUNDER_PAGE
 (1<<25Ë

	)

139 
	#MS_ACTIVE
 (1<<30)

	)

140 
	#MS_NOUSER
 (1<<31)

	)

145 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
)

	)

150 
	#MS_MGC_VAL
 0xC0ED0000

	)

151 
	#MS_MGC_MSK
 0xffff0000

	)

155 
	#S_SYNC
 1

	)

156 
	#S_NOATIME
 2

	)

157 
	#S_APPEND
 4

	)

158 
	#S_IMMUTABLE
 8

	)

159 
	#S_DEAD
 16

	)

160 
	#S_NOQUOTA
 32

	)

161 
	#S_DIRSYNC
 64

	)

162 
	#S_NOCMTIME
 128

	)

163 
	#S_SWAPFILE
 256

	)

164 
	#S_PRIVATE
 512

	)

165 
	#S_AUTOMOUNT
 2048

	)

168 
	#S_NOATTRKILL
 65536

	)

183 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

185 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

186 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

187 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

188 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

189 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

190 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

191 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

192 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

194 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

195 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

196 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

197 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

199 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

200 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

201 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

202 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

203 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

204 
	#IS_NO_LEASES
(
öode
Ë
	`__IS_FLG
(öode, 
MS_NO_LEASES
)

	)

205 
	#IS_SETLEASE
(
öode
Ë
	`__IS_FLG
(öode, 
MS_HAS_SETLEASE
)

	)

206 
	#IS_NEWAOPS
(
öode
Ë
	`__IS_FLG
(öode, 
MS_HAS_NEW_AOPS
)

	)

207 
	#IS_LAUNDERPAGE
(
öode
Ë
	`__IS_FLG
(öode, 
MS_HAS_LAUNDER_PAGE
)

	)

212 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

213 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

214 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

215 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

216 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

217 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

218 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

219 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

220 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

221 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

222 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

223 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

225 
	#BLKPG
 
	`_IO
(0x12,105)

	)

229 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

230 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

235 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

236 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

237 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

238 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

239 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

240 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

241 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

243 
	#BMAP_IOCTL
 1

	)

244 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

245 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

246 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

247 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

249 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

250 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

251 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

252 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

253 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

254 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

255 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

256 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

257 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

262 
	#FS_SECRM_FL
 0x00000001

	)

263 
	#FS_UNRM_FL
 0x00000002

	)

264 
	#FS_COMPR_FL
 0x00000004

	)

265 
	#FS_SYNC_FL
 0x00000008

	)

266 
	#FS_IMMUTABLE_FL
 0x00000010

	)

267 
	#FS_APPEND_FL
 0x00000020

	)

268 
	#FS_NODUMP_FL
 0x00000040

	)

269 
	#FS_NOATIME_FL
 0x00000080

	)

271 
	#FS_DIRTY_FL
 0x00000100

	)

272 
	#FS_COMPRBLK_FL
 0x00000200

	)

273 
	#FS_NOCOMP_FL
 0x00000400

	)

274 
	#FS_ECOMPR_FL
 0x00000800

	)

276 
	#FS_BTREE_FL
 0x00001000

	)

277 
	#FS_INDEX_FL
 0x00001000

	)

278 
	#FS_IMAGIC_FL
 0x00002000

	)

279 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

280 
	#FS_NOTAIL_FL
 0x00008000

	)

281 
	#FS_DIRSYNC_FL
 0x00010000

	)

282 
	#FS_TOPDIR_FL
 0x00020000

	)

283 
	#FS_EXTENT_FL
 0x00080000

	)

284 
	#FS_DIRECTIO_FL
 0x00100000

	)

285 
	#FS_RESERVED_FL
 0x80000000

	)

287 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

288 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

291 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

292 
	#SYNC_FILE_RANGE_WRITE
 2

	)

293 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/genhd.h

1 #i‚de‡
_LINUX_GENHD_H


2 
	#_LINUX_GENHD_H


	)

12 
	~<löux/ty≥s.h
>

17 
	mDOS_EXTENDED_PARTITION
 = 5,

18 
	mLINUX_EXTENDED_PARTITION
 = 0x85,

19 
	mWIN98_EXTENDED_PARTITION
 = 0x0f,

21 
	mLINUX_SWAP_PARTITION
 = 0x82,

22 
	mLINUX_RAID_PARTITION
 = 0xfd,

24 
	mSOLARIS_X86_PARTITION
 = 
LINUX_SWAP_PARTITION
,

25 
	mNEW_SOLARIS_X86_PARTITION
 = 0xbf,

27 
	mDM6_AUX1PARTITION
 = 0x51,

28 
	mDM6_AUX3PARTITION
 = 0x53,

29 
	mDM6_PARTITION
 = 0x54,

30 
	mEZD_PARTITION
 = 0x55,

32 
	mFREEBSD_PARTITION
 = 0xa5,

33 
	mOPENBSD_PARTITION
 = 0xa6,

34 
	mNETBSD_PARTITION
 = 0xa9,

35 
	mBSDI_PARTITION
 = 0xb7,

36 
	mMINIX_PARTITION
 = 0x81,

37 
	mUNIXWARE_PARTITION
 = 0x63,

41 
	s∑πôi⁄
 {

42 
	mboŸ_öd
;

43 
	mhód
;

44 
	m£˘‹
;

45 
	mcyl
;

46 
	msys_öd
;

47 
	míd_hód
;

48 
	míd_£˘‹
;

49 
	míd_cyl
;

50 
	m°¨t_£˘
;

51 
	mƒ_£˘s
;

52 } 
__©åibuã__
((
∑cked
));

56 #ifde‡
CONFIG_SOLARIS_X86_PARTITION


58 
	#SOLARIS_X86_NUMSLICE
 8

	)

59 
	#SOLARIS_X86_VTOC_SANE
 (0x600DDEEEUL)

	)

61 
	ssﬁ¨is_x86_¶i˚
 {

62 
__À16
 
	ms_èg
;

63 
__À16
 
	ms_Êag
;

64 
__À32
 
	ms_°¨t
;

65 
__À32
 
	ms_size
;

68 
	ssﬁ¨is_x86_vtoc
 {

69 
	mv_boŸöfo
[3];

70 
__À32
 
	mv_ßnôy
;

71 
__À32
 
	mv_vîsi⁄
;

72 
	mv_vﬁume
[8];

73 
__À16
 
	mv_£˘‹sz
;

74 
__À16
 
	mv_≈¨ts
;

75 
	mv_ª£rved
[10];

76 
sﬁ¨is_x86_¶i˚


77 
	mv_¶i˚
[
SOLARIS_X86_NUMSLICE
];

78 
	mtime°amp
[
SOLARIS_X86_NUMSLICE
];

79 
	mv_asciûabñ
[128];

84 #ifde‡
CONFIG_BSD_DISKLABEL


92 
	#BSD_DISKMAGIC
 (0x82564557ULË

	)

93 
	#BSD_MAXPARTITIONS
 16

	)

94 
	#OPENBSD_MAXPARTITIONS
 16

	)

95 
	#BSD_FS_UNUSED
 0

	)

96 
	sbsd_diskœbñ
 {

97 
__À32
 
	md_magic
;

98 
__s16
 
	md_ty≥
;

99 
__s16
 
	md_subty≥
;

100 
	md_ty≥«me
[16];

101 
	md_∑ck«me
[16];

102 
__u32
 
	md_£csize
;

103 
__u32
 
	md_n£˘‹s
;

104 
__u32
 
	md_¡øcks
;

105 
__u32
 
	md_ncylödîs
;

106 
__u32
 
	md_£˝îcyl
;

107 
__u32
 
	md_£˝îunô
;

108 
__u16
 
	md_•¨e•îåack
;

109 
__u16
 
	md_•¨e•îcyl
;

110 
__u32
 
	md_acylödîs
;

111 
__u16
 
	md_Ωm
;

112 
__u16
 
	md_öãæóve
;

113 
__u16
 
	md_åackskew
;

114 
__u16
 
	md_cylskew
;

115 
__u32
 
	md_hódswôch
;

116 
__u32
 
	md_åk£ek
;

117 
__u32
 
	md_Êags
;

118 
	#NDDATA
 5

	)

119 
__u32
 
	md_drived©a
[
NDDATA
];

120 
	#NSPARE
 5

	)

121 
__u32
 
	md_•¨e
[
NSPARE
];

122 
__À32
 
	md_magic2
;

123 
__À16
 
	md_checksum
;

126 
__À16
 
	md_≈¨tôi⁄s
;

127 
__À32
 
	md_bbsize
;

128 
__À32
 
	md_sbsize
;

129 
	sbsd_∑πôi⁄
 {

130 
__À32
 
	mp_size
;

131 
__À32
 
	mp_off£t
;

132 
__À32
 
	mp_fsize
;

133 
__u8
 
	mp_f°y≥
;

134 
__u8
 
	mp_‰ag
;

135 
__À16
 
	mp_˝g
;

136 } 
	md_∑πôi⁄s
[
BSD_MAXPARTITIONS
];

141 #ifde‡
CONFIG_UNIXWARE_DISKLABEL


147 
	#UNIXWARE_DISKMAGIC
 (0xCA5E600DULË

	)

148 
	#UNIXWARE_DISKMAGIC2
 (0x600DDEEEULË

	)

149 
	#UNIXWARE_NUMSLICE
 16

	)

150 
	#UNIXWARE_FS_UNUSED
 0

	)

152 
	sunixw¨e_¶i˚
 {

153 
__À16
 
	ms_œbñ
;

154 
__À16
 
	ms_Êags
;

155 
__À32
 
	m°¨t_£˘
;

156 
__À32
 
	mƒ_£˘s
;

159 
	sunixw¨e_diskœbñ
 {

160 
__À32
 
	md_ty≥
;

161 
__À32
 
	md_magic
;

162 
__À32
 
	md_vîsi⁄
;

163 
	md_£rül
[12];

164 
__À32
 
	md_ncylödîs
;

165 
__À32
 
	md_¡øcks
;

166 
__À32
 
	md_n£˘‹s
;

167 
__À32
 
	md_£csize
;

168 
__À32
 
	md_∑π_°¨t
;

169 
__À32
 
	md_unknown1
[12];

170 
__À32
 
	md_Æt_tbl
;

171 
__À32
 
	md_Æt_Àn
;

172 
__À32
 
	md_phys_cyl
;

173 
__À32
 
	md_phys_åk
;

174 
__À32
 
	md_phys_£c
;

175 
__À32
 
	md_phys_byãs
;

176 
__À32
 
	md_unknown2
;

177 
__À32
 
	md_unknown3
;

178 
__À32
 
	md_∑d
[8];

180 
	sunixw¨e_vtoc
 {

181 
__À32
 
	mv_magic
;

182 
__À32
 
	mv_vîsi⁄
;

183 
	mv_«me
[8];

184 
__À16
 
	mv_n¶i˚s
;

185 
__À16
 
	mv_unknown1
;

186 
__À32
 
	mv_ª£rved
[10];

187 
unixw¨e_¶i˚


188 
	mv_¶i˚
[
UNIXWARE_NUMSLICE
];

189 } 
	mvtoc
;

195 #ifde‡
CONFIG_MINIX_SUBPARTITION


196 
	#MINIX_NR_SUBPARTITIONS
 4

	)

	@/usr/include/linux/hdreg.h

1 #i‚de‡
_LINUX_HDREG_H


2 
	#_LINUX_HDREG_H


	)

9 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
u8
))

	)

10 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
u8
))

	)

11 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
u8
))

	)

13 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

14 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

15 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

17 
	#IDE_DRIVE_TASK_IN
 2

	)

19 
	#IDE_DRIVE_TASK_OUT
 3

	)

20 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

25 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

26 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

27 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

28 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

30 
	tèsk_i‹eg_t
;

31 
	tßè_i‹eg_t
;

33 
	uide_ªg_vÆid_s
 {

34 
	mÆl
 : 16;

36 
	md©a
 : 1;

37 
	mîr‹_„©uª
 : 1;

38 
	m£˘‹
 : 1;

39 
	mn£˘‹
 : 1;

40 
	mlcyl
 : 1;

41 
	mhcyl
 : 1;

42 
	m£À˘
 : 1;

43 
	m°©us_comm™d
 : 1;

45 
	md©a_hob
 : 1;

46 
	mîr‹_„©uª_hob
 : 1;

47 
	m£˘‹_hob
 : 1;

48 
	mn£˘‹_hob
 : 1;

49 
	mlcyl_hob
 : 1;

50 
	mhcyl_hob
 : 1;

51 
	m£À˘_hob
 : 1;

52 
	mc⁄åﬁ_hob
 : 1;

53 } 
	mb
;

54 } 
	tide_ªg_vÆid_t
;

56 
	side_èsk_ªque°_s
 {

57 
èsk_i‹eg_t
 
	mio_p‹ts
[8];

58 
èsk_i‹eg_t
 
	mhob_p‹ts
[8];

59 
ide_ªg_vÆid_t
 
	mout_Êags
;

60 
ide_ªg_vÆid_t
 
	mö_Êags
;

61 
	md©a_pha£
;

62 
	mªq_cmd
;

63 
	mout_size
;

64 
	mö_size
;

65 } 
	tide_èsk_ªque°_t
;

67 
	side_io˘l_ªque°_s
 {

68 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

69 *
	mout_buf„r
;

70 *
	mö_buf„r
;

71 } 
	tide_io˘l_ªque°_t
;

73 
	shd_drive_cmd_hdr
 {

74 
èsk_i‹eg_t
 
	mcomm™d
;

75 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

76 
èsk_i‹eg_t
 
	m„©uª
;

77 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

80 
	shd_drive_èsk_hdr
 {

81 
èsk_i‹eg_t
 
	md©a
;

82 
èsk_i‹eg_t
 
	m„©uª
;

83 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

84 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

85 
èsk_i‹eg_t
 
	mlow_cylödî
;

86 
èsk_i‹eg_t
 
	mhigh_cylödî
;

87 
èsk_i‹eg_t
 
	mdevi˚_hód
;

88 
èsk_i‹eg_t
 
	mcomm™d
;

89 } 
	tèsk_°ru˘_t
;

91 
	shd_drive_hob_hdr
 {

92 
èsk_i‹eg_t
 
	md©a
;

93 
èsk_i‹eg_t
 
	m„©uª
;

94 
èsk_i‹eg_t
 
	m£˘‹_cou¡
;

95 
èsk_i‹eg_t
 
	m£˘‹_numbî
;

96 
èsk_i‹eg_t
 
	mlow_cylödî
;

97 
èsk_i‹eg_t
 
	mhigh_cylödî
;

98 
èsk_i‹eg_t
 
	mdevi˚_hód
;

99 
èsk_i‹eg_t
 
	mc⁄åﬁ
;

100 } 
	thob_°ru˘_t
;

102 
	#TASKFILE_INVALID
 0x7fff

	)

103 
	#TASKFILE_48
 0x8000

	)

105 
	#TASKFILE_NO_DATA
 0x0000

	)

107 
	#TASKFILE_IN
 0x0001

	)

108 
	#TASKFILE_MULTI_IN
 0x0002

	)

110 
	#TASKFILE_OUT
 0x0004

	)

111 
	#TASKFILE_MULTI_OUT
 0x0008

	)

112 
	#TASKFILE_IN_OUT
 0x0010

	)

114 
	#TASKFILE_IN_DMA
 0x0020

	)

115 
	#TASKFILE_OUT_DMA
 0x0040

	)

116 
	#TASKFILE_IN_DMAQ
 0x0080

	)

117 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

119 
	#TASKFILE_P_IN
 0x0200

	)

120 
	#TASKFILE_P_OUT
 0x0400

	)

121 
	#TASKFILE_P_IN_DMA
 0x0800

	)

122 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

123 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

124 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

127 
	#WIN_NOP
 0x00

	)

131 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

135 
	#WIN_SRST
 0x08

	)

136 
	#WIN_DEVICE_RESET
 0x08

	)

140 
	#WIN_RECAL
 0x10

	)

141 
	#WIN_RESTORE
 
WIN_RECAL


	)

145 
	#WIN_READ
 0x20

	)

146 
	#WIN_READ_ONCE
 0x21

	)

147 
	#WIN_READ_LONG
 0x22

	)

148 
	#WIN_READ_LONG_ONCE
 0x23

	)

149 
	#WIN_READ_EXT
 0x24

	)

150 
	#WIN_READDMA_EXT
 0x25

	)

151 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

152 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

156 
	#WIN_MULTREAD_EXT
 0x29

	)

160 
	#WIN_WRITE
 0x30

	)

161 
	#WIN_WRITE_ONCE
 0x31

	)

162 
	#WIN_WRITE_LONG
 0x32

	)

163 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

164 
	#WIN_WRITE_EXT
 0x34

	)

165 
	#WIN_WRITEDMA_EXT
 0x35

	)

166 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

167 
	#WIN_SET_MAX_EXT
 0x37

	)

168 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

169 
	#WIN_MULTWRITE_EXT
 0x39

	)

173 
	#WIN_WRITE_VERIFY
 0x3C

	)

177 
	#WIN_VERIFY
 0x40

	)

178 
	#WIN_VERIFY_ONCE
 0x41

	)

179 
	#WIN_VERIFY_EXT
 0x42

	)

183 
	#WIN_FORMAT
 0x50

	)

187 
	#WIN_INIT
 0x60

	)

191 
	#WIN_SEEK
 0x70

	)

193 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

194 
	#WIN_DIAGNOSE
 0x90

	)

195 
	#WIN_SPECIFY
 0x91

	)

196 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

197 
	#WIN_STANDBYNOW2
 0x94

	)

198 
	#WIN_STANDBY2
 0x96

	)

199 
	#WIN_SETIDLE2
 0x97

	)

200 
	#WIN_CHECKPOWERMODE2
 0x98

	)

201 
	#WIN_SLEEPNOW2
 0x99

	)

205 
	#WIN_PACKETCMD
 0xA0

	)

206 
	#WIN_PIDENTIFY
 0xA1

	)

207 
	#WIN_QUEUED_SERVICE
 0xA2

	)

208 
	#WIN_SMART
 0xB0

	)

209 
	#CFA_ERASE_SECTORS
 0xC0

	)

210 
	#WIN_MULTREAD
 0xC4

	)

211 
	#WIN_MULTWRITE
 0xC5

	)

212 
	#WIN_SETMULT
 0xC6

	)

213 
	#WIN_READDMA_QUEUED
 0xC7

	)

214 
	#WIN_READDMA
 0xC8

	)

215 
	#WIN_READDMA_ONCE
 0xC9

	)

216 
	#WIN_WRITEDMA
 0xCA

	)

217 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

218 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

219 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

220 
	#WIN_GETMEDIASTATUS
 0xDA

	)

221 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

222 
	#WIN_POSTBOOT
 0xDC

	)

223 
	#WIN_PREBOOT
 0xDD

	)

224 
	#WIN_DOORLOCK
 0xDE

	)

225 
	#WIN_DOORUNLOCK
 0xDF

	)

226 
	#WIN_STANDBYNOW1
 0xE0

	)

227 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

228 
	#WIN_STANDBY
 0xE2

	)

229 
	#WIN_SETIDLE1
 0xE3

	)

230 
	#WIN_READ_BUFFER
 0xE4

	)

231 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

232 
	#WIN_SLEEPNOW1
 0xE6

	)

233 
	#WIN_FLUSH_CACHE
 0xE7

	)

234 
	#WIN_WRITE_BUFFER
 0xE8

	)

235 
	#WIN_WRITE_SAME
 0xE9

	)

237 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

238 
	#WIN_IDENTIFY
 0xEC

	)

239 
	#WIN_MEDIAEJECT
 0xED

	)

240 
	#WIN_IDENTIFY_DMA
 0xEE

	)

241 
	#WIN_SETFEATURES
 0xEF

	)

242 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

243 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

244 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

245 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

246 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

247 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

248 
	#WIN_SECURITY_DISABLE
 0xF6

	)

249 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

250 
	#WIN_SET_MAX
 0xF9

	)

251 
	#DISABLE_SEAGATE
 0xFB

	)

255 
	#SMART_READ_VALUES
 0xD0

	)

256 
	#SMART_READ_THRESHOLDS
 0xD1

	)

257 
	#SMART_AUTOSAVE
 0xD2

	)

258 
	#SMART_SAVE
 0xD3

	)

259 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

260 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

261 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

262 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

263 
	#SMART_ENABLE
 0xD8

	)

264 
	#SMART_DISABLE
 0xD9

	)

265 
	#SMART_STATUS
 0xDA

	)

266 
	#SMART_AUTO_OFFLINE
 0xDB

	)

270 
	#SMART_LCYL_PASS
 0x4F

	)

271 
	#SMART_HCYL_PASS
 0xC2

	)

274 
	#SETFEATURES_EN_8BIT
 0x01

	)

275 
	#SETFEATURES_EN_WCACHE
 0x02

	)

276 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

277 
	#SETFEATURES_EN_APM
 0x05

	)

278 
	#SETFEATURES_EN_SAME_R
 0x22

	)

279 
	#SETFEATURES_DIS_MSN
 0x31

	)

280 
	#SETFEATURES_DIS_RETRY
 0x33

	)

281 
	#SETFEATURES_EN_AAM
 0x42

	)

282 
	#SETFEATURES_RW_LONG
 0x44

	)

283 
	#SETFEATURES_SET_CACHE
 0x54

	)

284 
	#SETFEATURES_DIS_RLA
 0x55

	)

285 
	#SETFEATURES_EN_RI
 0x5D

	)

286 
	#SETFEATURES_EN_SI
 0x5E

	)

287 
	#SETFEATURES_DIS_RPOD
 0x66

	)

288 
	#SETFEATURES_DIS_ECC
 0x77

	)

289 
	#SETFEATURES_DIS_8BIT
 0x81

	)

290 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

291 
	#SETFEATURES_EN_DEFECT
 0x84

	)

292 
	#SETFEATURES_DIS_APM
 0x85

	)

293 
	#SETFEATURES_EN_ECC
 0x88

	)

294 
	#SETFEATURES_EN_MSN
 0x95

	)

295 
	#SETFEATURES_EN_RETRY
 0x99

	)

296 
	#SETFEATURES_EN_RLA
 0xAA

	)

297 
	#SETFEATURES_PREFETCH
 0xAB

	)

298 
	#SETFEATURES_EN_REST
 0xAC

	)

299 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

300 
	#SETFEATURES_DIS_AAM
 0xC2

	)

301 
	#SETFEATURES_EN_RPOD
 0xCC

	)

302 
	#SETFEATURES_DIS_RI
 0xDD

	)

303 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

304 
	#SETFEATURES_DIS_SI
 0xDE

	)

308 
	#SECURITY_SET_PASSWORD
 0xBA

	)

309 
	#SECURITY_UNLOCK
 0xBB

	)

310 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

311 
	#SECURITY_ERASE_UNIT
 0xBD

	)

312 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

313 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

315 
	shd_geomëry
 {

316 
	mhóds
;

317 
	m£˘‹s
;

318 
	mcylödîs
;

319 
	m°¨t
;

323 
	#HDIO_GETGEO
 0x0301

	)

324 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

325 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

326 
	#HDIO_GET_QDMA
 0x0305

	)

328 
	#HDIO_SET_XFER
 0x0306

	)

330 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

331 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

332 
	#HDIO_GET_32BIT
 0x0309

	)

333 
	#HDIO_GET_NOWERR
 0x030®

	)

334 
	#HDIO_GET_DMA
 0x030b

	)

335 
	#HDIO_GET_NICE
 0x030¯

	)

336 
	#HDIO_GET_IDENTITY
 0x030d

	)

337 
	#HDIO_GET_WCACHE
 0x030ê

	)

338 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

339 
	#HDIO_GET_ADDRESS
 0x0310

	)

341 
	#HDIO_GET_BUSSTATE
 0x031®

	)

342 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

343 
	#HDIO_DRIVE_RESET
 0x031¯

	)

344 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

345 
	#HDIO_DRIVE_TASK
 0x031ê

	)

346 
	#HDIO_DRIVE_CMD
 0x031‡

	)

347 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

350 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

351 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

352 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

353 
	#HDIO_SET_32BIT
 0x0324

	)

354 
	#HDIO_SET_NOWERR
 0x0325

	)

355 
	#HDIO_SET_DMA
 0x0326

	)

356 
	#HDIO_SET_PIO_MODE
 0x0327

	)

357 
	#HDIO_SCAN_HWIF
 0x0328

	)

358 
	#HDIO_SET_NICE
 0x0329

	)

359 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

360 
	#HDIO_SET_WCACHE
 0x032b

	)

361 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

362 
	#HDIO_SET_BUSSTATE
 0x032d

	)

363 
	#HDIO_SET_QDMA
 0x032ê

	)

364 
	#HDIO_SET_ADDRESS
 0x032‡

	)

368 
	mBUSSTATE_OFF
 = 0,

369 
	mBUSSTATE_ON
,

370 
	mBUSSTATE_TRISTATE


379 
	#__NEW_HD_DRIVE_ID


	)

387 
	shd_driveid
 {

388 
	mc⁄fig
;

389 
	mcyls
;

390 
	mª£rved2
;

391 
	mhóds
;

392 
	måack_byãs
;

393 
	m£˘‹_byãs
;

394 
	m£˘‹s
;

395 
	mvíd‹0
;

396 
	mvíd‹1
;

397 
	mvíd‹2
;

398 
	m£rül_no
[20];

399 
	mbuf_ty≥
;

400 
	mbuf_size
;

403 
	mecc_byãs
;

404 
	mfw_ªv
[8];

405 
	mmodñ
[40];

406 
	mmax_mu…£˘
;

407 
	mvíd‹3
;

408 
	mdw‹d_io
;

409 
	mvíd‹4
;

410 
	mˇ∑bûôy
;

416 
	mª£rved50
;

417 
	mvíd‹5
;

418 
	mtPIO
;

419 
	mvíd‹6
;

420 
	mtDMA
;

421 
	mfõld_vÆid
;

426 
	mcur_cyls
;

427 
	mcur_hóds
;

428 
	mcur_£˘‹s
;

429 
	mcur_ˇ∑côy0
;

430 
	mcur_ˇ∑côy1
;

431 
	mmu…£˘
;

432 
	mmu…£˘_vÆid
;

433 
	mlba_ˇ∑côy
;

434 
	mdma_1w‹d
;

435 
	mdma_mw‹d
;

436 
	meide_pio_modes
;

437 
	meide_dma_mö
;

438 
	meide_dma_time
;

439 
	meide_pio
;

440 
	meide_pio_i‹dy
;

441 
	mw‹ds69_70
[2];

445 
	mw‹ds71_74
[4];

448 
	mqueue_dïth
;

452 
	mw‹ds76_79
[4];

453 
	mmaj‹_ªv_num
;

454 
	mmö‹_ªv_num
;

455 
	mcomm™d_£t_1
;

473 
	mcomm™d_£t_2
;

491 
	mcfs£
;

503 
	mcfs_íabÀ_1
;

522 
	mcfs_íabÀ_2
;

541 
	mcsf_deÁu…
;

553 
	mdma_u…ø
;

554 
	må£uc
;

555 
	måsEuc
;

556 
	mCurAPMvÆues
;

557 
	mm¥c
;

558 
	mhw_c⁄fig
;

576 
	macou°ic
;

580 
	mm§qs
;

581 
	msx„π
;

582 
	mßl
;

583 
	m•g
;

584 
	mlba_ˇ∑côy_2
;

585 
	mw‹ds104_125
[22];

586 
	mœ°_lun
;

587 
	mw‹d127
;

595 
	mdlf
;

607 
	mcsfo
;

615 
	mw‹ds130_155
[26];

616 
	mw‹d156
;

617 
	mw‹ds157_159
[3];

618 
	mcÁ_powî
;

625 
	mw‹ds161_175
[15];

626 
	mw‹ds176_205
[30];

627 
	mw‹ds206_254
[49];

628 
	möãgrôy_w‹d
;

639 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

640 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

641 
	#IDE_NICE_0
 (2Ë

	)

642 
	#IDE_NICE_1
 (3Ë

	)

643 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/kdev_t.h

1 #i‚de‡
_LINUX_KDEV_T_H


2 
	#_LINUX_KDEV_T_H


	)

8 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

9 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

10 
	#MKDEV
(
ma
,
mi
Ë((ma)<<8 | (mi))

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

28 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

31 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

32 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

38 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

41 
	#__FUNCTION__
 (
__func__
)

	)

43 
	gmoduÀ
;

45 
m¨k_h¨dw¨e_unsuµ‹ãd
(c⁄° *
msg
);

46 
m¨k_ãch_¥evõw
(c⁄° *
msg
, 
moduÀ
 *
mod
);

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

21 
	~<löux/pci_ªgs.h
>

24 
	~<löux/pci_ids.h
>

34 
	#PCI_DEVFN
(
¶Ÿ
,
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

35 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

36 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

39 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

40 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

41 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

42 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

43 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/io˘l.h
>

15 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

18 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

21 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

27 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

30 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

33 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

35 
	sønd_poﬁ_öfo
 {

36 
	míå›y_cou¡
;

37 
	mbuf_size
;

38 
__u32
 
	mbuf
[0];

41 
	s∫d_°©e
 {

42 
__u32
 
	ms1
, 
	ms2
, 
	ms3
;

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

4 
	~<löux/auxvec.h
>

9 
	#CSIGNAL
 0x000000f‡

	)

10 
	#CLONE_VM
 0x00000100

	)

11 
	#CLONE_FS
 0x00000200

	)

12 
	#CLONE_FILES
 0x00000400

	)

13 
	#CLONE_SIGHAND
 0x00000800

	)

14 
	#CLONE_PTRACE
 0x00002000

	)

15 
	#CLONE_VFORK
 0x00004000

	)

16 
	#CLONE_PARENT
 0x00008000

	)

17 
	#CLONE_THREAD
 0x00010000

	)

18 
	#CLONE_NEWNS
 0x00020000

	)

19 
	#CLONE_SYSVSEM
 0x00040000

	)

20 
	#CLONE_SETTLS
 0x00080000

	)

21 
	#CLONE_PARENT_SETTID
 0x00100000

	)

22 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

23 
	#CLONE_DETACHED
 0x00400000

	)

24 
	#CLONE_UNTRACED
 0x00800000

	)

25 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_STOPPED
 0x02000000

	)

31 
	#SCHED_NORMAL
 0

	)

32 
	#SCHED_FIFO
 1

	)

33 
	#SCHED_RR
 2

	)

34 
	#SCHED_BATCH
 3

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
time_t
 
	mtv_£c
;

17 
su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

63 
	#CLOCK_SGI_CYCLE
 10

	)

64 
	#MAX_CLOCKS
 16

	)

65 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

66 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

71 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

109 #i‚de‡
HAVE_SECTOR_T


110 
	t£˘‹_t
;

113 #i‚de‡
HAVE_BLKCNT_T


114 
	tblk˙t_t
;

121 #i‚de‡
pgoff_t


122 
	#pgoff_t
 

	)

132 #ifde‡
__CHECKER__


133 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

135 
	#__bôwi£__


	)

137 #ifde‡
__CHECK_ENDIAN__


138 
	#__bôwi£
 
__bôwi£__


	)

140 
	#__bôwi£


	)

143 
__u16
 
	t__bôwi£
 
	t__À16
;

144 
__u16
 
	t__bôwi£
 
	t__be16
;

145 
__u32
 
	t__bôwi£
 
	t__À32
;

146 
__u32
 
	t__bôwi£
 
	t__be32
;

147 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

148 
__u64
 
	t__bôwi£
 
	t__À64
;

149 
__u64
 
	t__bôwi£
 
	t__be64
;

152 
__u16
 
	t__bôwi£
 
	t__sum16
;

153 
__u32
 
	t__bôwi£
 
	t__wsum
;

156 
	su°©
 {

157 
__kî√l_daddr_t
 
	mf_t‰ì
;

158 
__kî√l_öo_t
 
	mf_töode
;

159 
	mf_‚ame
[6];

160 
	mf_Âack
[6];

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132626

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

3 
	#RHEL_MAJOR
 5

	)

4 
	#RHEL_MINOR
 11

	)

5 
	#RHEL_RELEASE_CODE
 1291

	)

6 
	#RHEL_RELEASE_VERSION
(
a
,
b
Ë((◊Ë<< 8Ë+ (b))

	)

	@/usr/include/linux/wait.h

1 #i‚de‡
_LINUX_WAIT_H


2 
	#_LINUX_WAIT_H


	)

4 
	#WNOHANG
 0x00000001

	)

5 
	#WUNTRACED
 0x00000002

	)

6 
	#WSTOPPED
 
WUNTRACED


	)

7 
	#WEXITED
 0x00000004

	)

8 
	#WCONTINUED
 0x00000008

	)

9 
	#WNOWAIT
 0x01000000

	)

11 
	#__WNOTHREAD
 0x20000000

	)

12 
	#__WALL
 0x40000000

	)

13 
	#__WCLONE
 0x80000000

	)

16 
	#P_ALL
 0

	)

17 
	#P_PID
 1

	)

18 
	#P_PGID
 2

	)

	@/usr/include/scsi/scsi.h

24 #i‚de‡
_SCSI_SCSI_H


25 
	#_SCSI_SCSI_H
 1

	)

27 
	~<„©uªs.h
>

33 
	#TEST_UNIT_READY
 0x00

	)

34 
	#REZERO_UNIT
 0x01

	)

35 
	#REQUEST_SENSE
 0x03

	)

36 
	#FORMAT_UNIT
 0x04

	)

37 
	#READ_BLOCK_LIMITS
 0x05

	)

38 
	#REASSIGN_BLOCKS
 0x07

	)

39 
	#READ_6
 0x08

	)

40 
	#WRITE_6
 0x0a

	)

41 
	#SEEK_6
 0x0b

	)

42 
	#READ_REVERSE
 0x0f

	)

43 
	#WRITE_FILEMARKS
 0x10

	)

44 
	#SPACE
 0x11

	)

45 
	#INQUIRY
 0x12

	)

46 
	#RECOVER_BUFFERED_DATA
 0x14

	)

47 
	#MODE_SELECT
 0x15

	)

48 
	#RESERVE
 0x16

	)

49 
	#RELEASE
 0x17

	)

50 
	#COPY
 0x18

	)

51 
	#ERASE
 0x19

	)

52 
	#MODE_SENSE
 0x1a

	)

53 
	#START_STOP
 0x1b

	)

54 
	#RECEIVE_DIAGNOSTIC
 0x1c

	)

55 
	#SEND_DIAGNOSTIC
 0x1d

	)

56 
	#ALLOW_MEDIUM_REMOVAL
 0x1e

	)

58 
	#SET_WINDOW
 0x24

	)

59 
	#READ_CAPACITY
 0x25

	)

60 
	#READ_10
 0x28

	)

61 
	#WRITE_10
 0x2a

	)

62 
	#SEEK_10
 0x2b

	)

63 
	#WRITE_VERIFY
 0x2e

	)

64 
	#VERIFY
 0x2f

	)

65 
	#SEARCH_HIGH
 0x30

	)

66 
	#SEARCH_EQUAL
 0x31

	)

67 
	#SEARCH_LOW
 0x32

	)

68 
	#SET_LIMITS
 0x33

	)

69 
	#PRE_FETCH
 0x34

	)

70 
	#READ_POSITION
 0x34

	)

71 
	#SYNCHRONIZE_CACHE
 0x35

	)

72 
	#LOCK_UNLOCK_CACHE
 0x36

	)

73 
	#READ_DEFECT_DATA
 0x37

	)

74 
	#MEDIUM_SCAN
 0x38

	)

75 
	#COMPARE
 0x39

	)

76 
	#COPY_VERIFY
 0x3a

	)

77 
	#WRITE_BUFFER
 0x3b

	)

78 
	#READ_BUFFER
 0x3c

	)

79 
	#UPDATE_BLOCK
 0x3d

	)

80 
	#READ_LONG
 0x3e

	)

81 
	#WRITE_LONG
 0x3f

	)

82 
	#CHANGE_DEFINITION
 0x40

	)

83 
	#WRITE_SAME
 0x41

	)

84 
	#READ_TOC
 0x43

	)

85 
	#LOG_SELECT
 0x4c

	)

86 
	#LOG_SENSE
 0x4d

	)

87 
	#MODE_SELECT_10
 0x55

	)

88 
	#RESERVE_10
 0x56

	)

89 
	#RELEASE_10
 0x57

	)

90 
	#MODE_SENSE_10
 0x5a

	)

91 
	#PERSISTENT_RESERVE_IN
 0x5e

	)

92 
	#PERSISTENT_RESERVE_OUT
 0x5f

	)

93 
	#MOVE_MEDIUM
 0xa5

	)

94 
	#READ_12
 0xa8

	)

95 
	#WRITE_12
 0xØ

	)

96 
	#WRITE_VERIFY_12
 0x´

	)

97 
	#SEARCH_HIGH_12
 0xb0

	)

98 
	#SEARCH_EQUAL_12
 0xb1

	)

99 
	#SEARCH_LOW_12
 0xb2

	)

100 
	#READ_ELEMENT_STATUS
 0xb8

	)

101 
	#SEND_VOLUME_TAG
 0xb6

	)

102 
	#WRITE_LONG_2
 0xó

	)

108 
	#GOOD
 0x00

	)

109 
	#CHECK_CONDITION
 0x01

	)

110 
	#CONDITION_GOOD
 0x02

	)

111 
	#BUSY
 0x04

	)

112 
	#INTERMEDIATE_GOOD
 0x08

	)

113 
	#INTERMEDIATE_C_GOOD
 0x0a

	)

114 
	#RESERVATION_CONFLICT
 0x0c

	)

115 
	#COMMAND_TERMINATED
 0x11

	)

116 
	#QUEUE_FULL
 0x14

	)

118 
	#STATUS_MASK
 0x3e

	)

124 
	#NO_SENSE
 0x00

	)

125 
	#RECOVERED_ERROR
 0x01

	)

126 
	#NOT_READY
 0x02

	)

127 
	#MEDIUM_ERROR
 0x03

	)

128 
	#HARDWARE_ERROR
 0x04

	)

129 
	#ILLEGAL_REQUEST
 0x05

	)

130 
	#UNIT_ATTENTION
 0x06

	)

131 
	#DATA_PROTECT
 0x07

	)

132 
	#BLANK_CHECK
 0x08

	)

133 
	#COPY_ABORTED
 0x0a

	)

134 
	#ABORTED_COMMAND
 0x0b

	)

135 
	#VOLUME_OVERFLOW
 0x0d

	)

136 
	#MISCOMPARE
 0x0e

	)

143 
	#TYPE_DISK
 0x00

	)

144 
	#TYPE_TAPE
 0x01

	)

145 
	#TYPE_PROCESSOR
 0x03

	)

146 
	#TYPE_WORM
 0x04

	)

147 
	#TYPE_ROM
 0x05

	)

148 
	#TYPE_SCANNER
 0x06

	)

149 
	#TYPE_MOD
 0x07

	)

151 
	#TYPE_MEDIUM_CHANGER
 0x08

	)

152 
	#TYPE_ENCLOSURE
 0x0d

	)

153 
	#TYPE_NO_LUN
 0x7f

	)

161 
	sccs_mode£l_hód


163 
	m_r1
;

164 
	mmedium
;

165 
	m_r2
;

166 
	mblock_desc_Àngth
;

167 
	mdísôy
;

168 
	mnumbî_blocks_hi
;

170 
	mnumbî_blocks_med
;

171 
	mnumbî_blocks_lo
;

172 
	m_r3
;

173 
	mblock_Àngth_hi
;

175 
	mblock_Àngth_med
;

176 
	mblock_Àngth_lo
;

183 
	#COMMAND_COMPLETE
 0x00

	)

184 
	#EXTENDED_MESSAGE
 0x01

	)

185 
	#EXTENDED_MODIFY_DATA_POINTER
 0x00

	)

186 
	#EXTENDED_SDTR
 0x01

	)

187 
	#EXTENDED_EXTENDED_IDENTIFY
 0x02

	)

188 
	#EXTENDED_WDTR
 0x03

	)

189 
	#SAVE_POINTERS
 0x02

	)

190 
	#RESTORE_POINTERS
 0x03

	)

191 
	#DISCONNECT
 0x04

	)

192 
	#INITIATOR_ERROR
 0x05

	)

193 
	#ABORT
 0x06

	)

194 
	#MESSAGE_REJECT
 0x07

	)

195 
	#NOP
 0x08

	)

196 
	#MSG_PARITY_ERROR
 0x09

	)

197 
	#LINKED_CMD_COMPLETE
 0x0a

	)

198 
	#LINKED_FLG_CMD_COMPLETE
 0x0b

	)

199 
	#BUS_DEVICE_RESET
 0x0c

	)

201 
	#INITIATE_RECOVERY
 0x0‡

	)

202 
	#RELEASE_RECOVERY
 0x10

	)

204 
	#SIMPLE_QUEUE_TAG
 0x20

	)

205 
	#HEAD_OF_QUEUE_TAG
 0x21

	)

206 
	#ORDERED_QUEUE_TAG
 0x22

	)

213 
	#SCSI_IOCTL_GET_IDLUN
 0x5382

	)

217 
	#SCSI_IOCTL_TAGGED_ENABLE
 0x5383

	)

218 
	#SCSI_IOCTL_TAGGED_DISABLE
 0x5384

	)

221 
	#SCSI_IOCTL_PROBE_HOST
 0x5385

	)

224 
	#SCSI_IOCTL_GET_BUS_NUMBER
 0x5386

	)

	@/usr/include/asm-i386/param.h

1 #i‚de‡
_ASMi386_PARAM_H


2 
	#_ASMi386_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 
	#EXEC_PAGESIZE
 4096

	)

11 #i‚de‡
NOGROUP


12 
	#NOGROUP
 (-1)

	)

15 
	#MAXHOSTNAMELEN
 64

	)

16 
	#COMMAND_LINE_SIZE
 2048

	)

	@/usr/include/asm-x86_64/param.h

1 #i‚de‡
_ASMx86_64_PARAM_H


2 
	#_ASMx86_64_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 
	#EXEC_PAGESIZE
 4096

	)

11 #i‚de‡
NOGROUP


12 
	#NOGROUP
 (-1)

	)

15 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/errno.h

2 #i‚de‡
__ASM_STUB_ERRNO_H


3 
	#__ASM_STUB_ERRNO_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/î∫o.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/î∫o.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/asm/fcntl.h

2 #i‚de‡
__ASM_STUB_FCNTL_H


3 
	#__ASM_STUB_FCNTL_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/f˙é.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/f˙é.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/asm/ioctl.h

2 #i‚de‡
__ASM_STUB_IOCTL_H


3 
	#__ASM_STUB_IOCTL_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/io˘l.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/io˘l.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/asm/types.h

2 #i‚de‡
__ASM_STUB_TYPES_H


3 
	#__ASM_STUB_TYPES_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/ty≥s.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/ty≥s.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/linux/auxvec.h

1 #i‚de‡
_LINUX_AUXVEC_H


2 
	#_LINUX_AUXVEC_H


	)

4 
	~<asm/auxvec.h
>

8 
	#AT_NULL
 0

	)

9 
	#AT_IGNORE
 1

	)

10 
	#AT_EXECFD
 2

	)

11 
	#AT_PHDR
 3

	)

12 
	#AT_PHENT
 4

	)

13 
	#AT_PHNUM
 5

	)

14 
	#AT_PAGESZ
 6

	)

15 
	#AT_BASE
 7

	)

16 
	#AT_FLAGS
 8

	)

17 
	#AT_ENTRY
 9

	)

18 
	#AT_NOTELF
 10

	)

19 
	#AT_UID
 11

	)

20 
	#AT_EUID
 12

	)

21 
	#AT_GID
 13

	)

22 
	#AT_EGID
 14

	)

23 
	#AT_PLATFORM
 15

	)

24 
	#AT_HWCAP
 16

	)

25 
	#AT_CLKTCK
 17

	)

27 
	#AT_SECURE
 23

	)

28 
	#AT_BASE_PLATFORM
 24

	)

31 
	#AT_VECTOR_SIZE
 44

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

16 
	#XATTR_NAME_MAX
 255

	)

17 
	#XATTR_SIZE_MAX
 65536

	)

18 
	#XATTR_LIST_MAX
 65536

	)

20 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/pci_ids.h

9 
	#PCI_CLASS_NOT_DEFINED
 0x0000

	)

10 
	#PCI_CLASS_NOT_DEFINED_VGA
 0x0001

	)

12 
	#PCI_BASE_CLASS_STORAGE
 0x01

	)

13 
	#PCI_CLASS_STORAGE_SCSI
 0x0100

	)

14 
	#PCI_CLASS_STORAGE_IDE
 0x0101

	)

15 
	#PCI_CLASS_STORAGE_FLOPPY
 0x0102

	)

16 
	#PCI_CLASS_STORAGE_IPI
 0x0103

	)

17 
	#PCI_CLASS_STORAGE_RAID
 0x0104

	)

18 
	#PCI_CLASS_STORAGE_SATA
 0x0106

	)

19 
	#PCI_CLASS_STORAGE_SATA_AHCI
 0x010601

	)

20 
	#PCI_CLASS_STORAGE_SAS
 0x0107

	)

21 
	#PCI_CLASS_STORAGE_OTHER
 0x0180

	)

23 
	#PCI_BASE_CLASS_NETWORK
 0x02

	)

24 
	#PCI_CLASS_NETWORK_ETHERNET
 0x0200

	)

25 
	#PCI_CLASS_NETWORK_TOKEN_RING
 0x0201

	)

26 
	#PCI_CLASS_NETWORK_FDDI
 0x0202

	)

27 
	#PCI_CLASS_NETWORK_ATM
 0x0203

	)

28 
	#PCI_CLASS_NETWORK_OTHER
 0x0280

	)

30 
	#PCI_BASE_CLASS_DISPLAY
 0x03

	)

31 
	#PCI_CLASS_DISPLAY_VGA
 0x0300

	)

32 
	#PCI_CLASS_DISPLAY_XGA
 0x0301

	)

33 
	#PCI_CLASS_DISPLAY_3D
 0x0302

	)

34 
	#PCI_CLASS_DISPLAY_OTHER
 0x0380

	)

36 
	#PCI_BASE_CLASS_MULTIMEDIA
 0x04

	)

37 
	#PCI_CLASS_MULTIMEDIA_VIDEO
 0x0400

	)

38 
	#PCI_CLASS_MULTIMEDIA_AUDIO
 0x0401

	)

39 
	#PCI_CLASS_MULTIMEDIA_PHONE
 0x0402

	)

40 
	#PCI_CLASS_MULTIMEDIA_OTHER
 0x0480

	)

42 
	#PCI_BASE_CLASS_MEMORY
 0x05

	)

43 
	#PCI_CLASS_MEMORY_RAM
 0x0500

	)

44 
	#PCI_CLASS_MEMORY_FLASH
 0x0501

	)

45 
	#PCI_CLASS_MEMORY_OTHER
 0x0580

	)

47 
	#PCI_BASE_CLASS_BRIDGE
 0x06

	)

48 
	#PCI_CLASS_BRIDGE_HOST
 0x0600

	)

49 
	#PCI_CLASS_BRIDGE_ISA
 0x0601

	)

50 
	#PCI_CLASS_BRIDGE_EISA
 0x0602

	)

51 
	#PCI_CLASS_BRIDGE_MC
 0x0603

	)

52 
	#PCI_CLASS_BRIDGE_PCI
 0x0604

	)

53 
	#PCI_CLASS_BRIDGE_PCMCIA
 0x0605

	)

54 
	#PCI_CLASS_BRIDGE_NUBUS
 0x0606

	)

55 
	#PCI_CLASS_BRIDGE_CARDBUS
 0x0607

	)

56 
	#PCI_CLASS_BRIDGE_RACEWAY
 0x0608

	)

57 
	#PCI_CLASS_BRIDGE_OTHER
 0x0680

	)

59 
	#PCI_BASE_CLASS_COMMUNICATION
 0x07

	)

60 
	#PCI_CLASS_COMMUNICATION_SERIAL
 0x0700

	)

61 
	#PCI_CLASS_COMMUNICATION_PARALLEL
 0x0701

	)

62 
	#PCI_CLASS_COMMUNICATION_MULTISERIAL
 0x0702

	)

63 
	#PCI_CLASS_COMMUNICATION_MODEM
 0x0703

	)

64 
	#PCI_CLASS_COMMUNICATION_OTHER
 0x0780

	)

66 
	#PCI_BASE_CLASS_SYSTEM
 0x08

	)

67 
	#PCI_CLASS_SYSTEM_PIC
 0x0800

	)

68 
	#PCI_CLASS_SYSTEM_PIC_IOAPIC
 0x080010

	)

69 
	#PCI_CLASS_SYSTEM_PIC_IOXAPIC
 0x080020

	)

70 
	#PCI_CLASS_SYSTEM_DMA
 0x0801

	)

71 
	#PCI_CLASS_SYSTEM_TIMER
 0x0802

	)

72 
	#PCI_CLASS_SYSTEM_RTC
 0x0803

	)

73 
	#PCI_CLASS_SYSTEM_PCI_HOTPLUG
 0x0804

	)

74 
	#PCI_CLASS_SYSTEM_SDHCI
 0x0805

	)

75 
	#PCI_CLASS_SYSTEM_OTHER
 0x0880

	)

77 
	#PCI_BASE_CLASS_INPUT
 0x09

	)

78 
	#PCI_CLASS_INPUT_KEYBOARD
 0x0900

	)

79 
	#PCI_CLASS_INPUT_PEN
 0x0901

	)

80 
	#PCI_CLASS_INPUT_MOUSE
 0x0902

	)

81 
	#PCI_CLASS_INPUT_SCANNER
 0x0903

	)

82 
	#PCI_CLASS_INPUT_GAMEPORT
 0x0904

	)

83 
	#PCI_CLASS_INPUT_OTHER
 0x0980

	)

85 
	#PCI_BASE_CLASS_DOCKING
 0x0a

	)

86 
	#PCI_CLASS_DOCKING_GENERIC
 0x0a00

	)

87 
	#PCI_CLASS_DOCKING_OTHER
 0x0a80

	)

89 
	#PCI_BASE_CLASS_PROCESSOR
 0x0b

	)

90 
	#PCI_CLASS_PROCESSOR_386
 0x0b00

	)

91 
	#PCI_CLASS_PROCESSOR_486
 0x0b01

	)

92 
	#PCI_CLASS_PROCESSOR_PENTIUM
 0x0b02

	)

93 
	#PCI_CLASS_PROCESSOR_ALPHA
 0x0b10

	)

94 
	#PCI_CLASS_PROCESSOR_POWERPC
 0x0b20

	)

95 
	#PCI_CLASS_PROCESSOR_MIPS
 0x0b30

	)

96 
	#PCI_CLASS_PROCESSOR_CO
 0x0b40

	)

98 
	#PCI_BASE_CLASS_SERIAL
 0x0c

	)

99 
	#PCI_CLASS_SERIAL_FIREWIRE
 0x0c00

	)

100 
	#PCI_CLASS_SERIAL_FIREWIRE_OHCI
 0x0c0010

	)

101 
	#PCI_CLASS_SERIAL_ACCESS
 0x0c01

	)

102 
	#PCI_CLASS_SERIAL_SSA
 0x0c02

	)

103 
	#PCI_CLASS_SERIAL_USB
 0x0c03

	)

104 
	#PCI_CLASS_SERIAL_USB_UHCI
 0x0c0300

	)

105 
	#PCI_CLASS_SERIAL_USB_OHCI
 0x0c0310

	)

106 
	#PCI_CLASS_SERIAL_USB_EHCI
 0x0c0320

	)

107 
	#PCI_CLASS_SERIAL_FIBER
 0x0c04

	)

108 
	#PCI_CLASS_SERIAL_SMBUS
 0x0c05

	)

110 
	#PCI_BASE_CLASS_INTELLIGENT
 0x0e

	)

111 
	#PCI_CLASS_INTELLIGENT_I2O
 0x0e00

	)

113 
	#PCI_BASE_CLASS_SATELLITE
 0x0f

	)

114 
	#PCI_CLASS_SATELLITE_TV
 0x0f00

	)

115 
	#PCI_CLASS_SATELLITE_AUDIO
 0x0f01

	)

116 
	#PCI_CLASS_SATELLITE_VOICE
 0x0f03

	)

117 
	#PCI_CLASS_SATELLITE_DATA
 0x0f04

	)

119 
	#PCI_BASE_CLASS_CRYPT
 0x10

	)

120 
	#PCI_CLASS_CRYPT_NETWORK
 0x1000

	)

121 
	#PCI_CLASS_CRYPT_ENTERTAINMENT
 0x1001

	)

122 
	#PCI_CLASS_CRYPT_OTHER
 0x1080

	)

124 
	#PCI_BASE_CLASS_SIGNAL_PROCESSING
 0x11

	)

125 
	#PCI_CLASS_SP_DPIO
 0x1100

	)

126 
	#PCI_CLASS_SP_OTHER
 0x1180

	)

128 
	#PCI_CLASS_OTHERS
 0xff

	)

132 
	#PCI_VENDOR_ID_DYNALINK
 0x0675

	)

133 
	#PCI_DEVICE_ID_DYNALINK_IS64PH
 0x1702

	)

135 
	#PCI_VENDOR_ID_BERKOM
 0x0871

	)

136 
	#PCI_DEVICE_ID_BERKOM_A1T
 0xfÁ1

	)

137 
	#PCI_DEVICE_ID_BERKOM_T_CONCEPT
 0xfÁ2

	)

138 
	#PCI_DEVICE_ID_BERKOM_A4T
 0xfÁ4

	)

139 
	#PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO
 0xfÁ8

	)

141 
	#PCI_VENDOR_ID_COMPAQ
 0x0e11

	)

142 
	#PCI_DEVICE_ID_COMPAQ_TOKENRING
 0x0508

	)

143 
	#PCI_DEVICE_ID_COMPAQ_TACHYON
 0xa0fc

	)

144 
	#PCI_DEVICE_ID_COMPAQ_SMART2P
 0x´10

	)

145 
	#PCI_DEVICE_ID_COMPAQ_NETEL100
 0x´32

	)

146 
	#PCI_DEVICE_ID_COMPAQ_NETEL10
 0x´34

	)

147 
	#PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE
 0x´33

	)

148 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3I
 0x´35

	)

149 
	#PCI_DEVICE_ID_COMPAQ_NETEL100D
 0x´40

	)

150 
	#PCI_DEVICE_ID_COMPAQ_NETEL100PI
 0x´43

	)

151 
	#PCI_DEVICE_ID_COMPAQ_NETEL100I
 0xb011

	)

152 
	#PCI_DEVICE_ID_COMPAQ_CISS
 0xb060

	)

153 
	#PCI_DEVICE_ID_COMPAQ_CISSB
 0xb178

	)

154 
	#PCI_DEVICE_ID_COMPAQ_CISSC
 0x46

	)

155 
	#PCI_DEVICE_ID_COMPAQ_THUNDER
 0xf130

	)

156 
	#PCI_DEVICE_ID_COMPAQ_NETFLEX3B
 0xf150

	)

158 
	#PCI_VENDOR_ID_NCR
 0x1000

	)

159 
	#PCI_VENDOR_ID_LSI_LOGIC
 0x1000

	)

160 
	#PCI_DEVICE_ID_NCR_53C810
 0x0001

	)

161 
	#PCI_DEVICE_ID_NCR_53C820
 0x0002

	)

162 
	#PCI_DEVICE_ID_NCR_53C825
 0x0003

	)

163 
	#PCI_DEVICE_ID_NCR_53C815
 0x0004

	)

164 
	#PCI_DEVICE_ID_LSI_53C810AP
 0x0005

	)

165 
	#PCI_DEVICE_ID_NCR_53C860
 0x0006

	)

166 
	#PCI_DEVICE_ID_LSI_53C1510
 0x000a

	)

167 
	#PCI_DEVICE_ID_NCR_53C896
 0x000b

	)

168 
	#PCI_DEVICE_ID_NCR_53C895
 0x000c

	)

169 
	#PCI_DEVICE_ID_NCR_53C885
 0x000d

	)

170 
	#PCI_DEVICE_ID_NCR_53C875
 0x000f

	)

171 
	#PCI_DEVICE_ID_NCR_53C1510
 0x0010

	)

172 
	#PCI_DEVICE_ID_LSI_53C895A
 0x0012

	)

173 
	#PCI_DEVICE_ID_LSI_53C875A
 0x0013

	)

174 
	#PCI_DEVICE_ID_LSI_53C1010_33
 0x0020

	)

175 
	#PCI_DEVICE_ID_LSI_53C1010_66
 0x0021

	)

176 
	#PCI_DEVICE_ID_LSI_53C1030
 0x0030

	)

177 
	#PCI_DEVICE_ID_LSI_1030_53C1035
 0x0032

	)

178 
	#PCI_DEVICE_ID_LSI_53C1035
 0x0040

	)

179 
	#PCI_DEVICE_ID_NCR_53C875J
 0x008f

	)

180 
	#PCI_DEVICE_ID_LSI_FC909
 0x0621

	)

181 
	#PCI_DEVICE_ID_LSI_FC929
 0x0622

	)

182 
	#PCI_DEVICE_ID_LSI_FC929_LAN
 0x0623

	)

183 
	#PCI_DEVICE_ID_LSI_FC919
 0x0624

	)

184 
	#PCI_DEVICE_ID_LSI_FC919_LAN
 0x0625

	)

185 
	#PCI_DEVICE_ID_LSI_FC929X
 0x0626

	)

186 
	#PCI_DEVICE_ID_LSI_FC939X
 0x0642

	)

187 
	#PCI_DEVICE_ID_LSI_FC949X
 0x0640

	)

188 
	#PCI_DEVICE_ID_LSI_FC949ES
 0x0646

	)

189 
	#PCI_DEVICE_ID_LSI_FC919X
 0x0628

	)

190 
	#PCI_DEVICE_ID_NCR_YELLOWFIN
 0x0701

	)

191 
	#PCI_DEVICE_ID_LSI_61C102
 0x0901

	)

192 
	#PCI_DEVICE_ID_LSI_63C815
 0x1000

	)

193 
	#PCI_DEVICE_ID_LSI_SAS1064
 0x0050

	)

194 
	#PCI_DEVICE_ID_LSI_SAS1064R
 0x0411

	)

195 
	#PCI_DEVICE_ID_LSI_SAS1066
 0x005E

	)

196 
	#PCI_DEVICE_ID_LSI_SAS1068
 0x0054

	)

197 
	#PCI_DEVICE_ID_LSI_SAS1064A
 0x005C

	)

198 
	#PCI_DEVICE_ID_LSI_SAS1064E
 0x0056

	)

199 
	#PCI_DEVICE_ID_LSI_SAS1066E
 0x005A

	)

200 
	#PCI_DEVICE_ID_LSI_SAS1068E
 0x0058

	)

201 
	#PCI_DEVICE_ID_LSI_SAS1078
 0x0060

	)

203 
	#PCI_VENDOR_ID_ATI
 0x1002

	)

205 
	#PCI_DEVICE_ID_ATI_68800
 0x4158

	)

206 
	#PCI_DEVICE_ID_ATI_215CT222
 0x4354

	)

207 
	#PCI_DEVICE_ID_ATI_210888CX
 0x4358

	)

208 
	#PCI_DEVICE_ID_ATI_215ET222
 0x4554

	)

210 
	#PCI_DEVICE_ID_ATI_215GB
 0x4742

	)

211 
	#PCI_DEVICE_ID_ATI_215GD
 0x4744

	)

212 
	#PCI_DEVICE_ID_ATI_215GI
 0x4749

	)

213 
	#PCI_DEVICE_ID_ATI_215GP
 0x4750

	)

214 
	#PCI_DEVICE_ID_ATI_215GQ
 0x4751

	)

215 
	#PCI_DEVICE_ID_ATI_215XL
 0x4752

	)

216 
	#PCI_DEVICE_ID_ATI_215GT
 0x4754

	)

217 
	#PCI_DEVICE_ID_ATI_215GTB
 0x4755

	)

218 
	#PCI_DEVICE_ID_ATI_215_IV
 0x4756

	)

219 
	#PCI_DEVICE_ID_ATI_215_IW
 0x4757

	)

220 
	#PCI_DEVICE_ID_ATI_215_IZ
 0x475A

	)

221 
	#PCI_DEVICE_ID_ATI_210888GX
 0x4758

	)

222 
	#PCI_DEVICE_ID_ATI_215_LB
 0x4c42

	)

223 
	#PCI_DEVICE_ID_ATI_215_LD
 0x4c44

	)

224 
	#PCI_DEVICE_ID_ATI_215_LG
 0x4c47

	)

225 
	#PCI_DEVICE_ID_ATI_215_LI
 0x4c49

	)

226 
	#PCI_DEVICE_ID_ATI_215_LM
 0x4c4D

	)

227 
	#PCI_DEVICE_ID_ATI_215_LN
 0x4c4E

	)

228 
	#PCI_DEVICE_ID_ATI_215_LR
 0x4c52

	)

229 
	#PCI_DEVICE_ID_ATI_215_LS
 0x4c53

	)

230 
	#PCI_DEVICE_ID_ATI_264_LT
 0x4c54

	)

232 
	#PCI_DEVICE_ID_ATI_264VT
 0x5654

	)

233 
	#PCI_DEVICE_ID_ATI_264VU
 0x5655

	)

234 
	#PCI_DEVICE_ID_ATI_264VV
 0x5656

	)

236 
	#PCI_DEVICE_ID_ATI_RAGE128_RE
 0x5245

	)

237 
	#PCI_DEVICE_ID_ATI_RAGE128_RF
 0x5246

	)

238 
	#PCI_DEVICE_ID_ATI_RAGE128_RG
 0x5247

	)

240 
	#PCI_DEVICE_ID_ATI_RAGE128_RK
 0x524b

	)

241 
	#PCI_DEVICE_ID_ATI_RAGE128_RL
 0x524c

	)

242 
	#PCI_DEVICE_ID_ATI_RAGE128_SE
 0x5345

	)

243 
	#PCI_DEVICE_ID_ATI_RAGE128_SF
 0x5346

	)

244 
	#PCI_DEVICE_ID_ATI_RAGE128_SG
 0x5347

	)

245 
	#PCI_DEVICE_ID_ATI_RAGE128_SH
 0x5348

	)

246 
	#PCI_DEVICE_ID_ATI_RAGE128_SK
 0x534b

	)

247 
	#PCI_DEVICE_ID_ATI_RAGE128_SL
 0x534c

	)

248 
	#PCI_DEVICE_ID_ATI_RAGE128_SM
 0x534d

	)

249 
	#PCI_DEVICE_ID_ATI_RAGE128_SN
 0x534e

	)

251 
	#PCI_DEVICE_ID_ATI_RAGE128_TF
 0x5446

	)

252 
	#PCI_DEVICE_ID_ATI_RAGE128_TL
 0x544c

	)

253 
	#PCI_DEVICE_ID_ATI_RAGE128_TR
 0x5452

	)

254 
	#PCI_DEVICE_ID_ATI_RAGE128_TS
 0x5453

	)

255 
	#PCI_DEVICE_ID_ATI_RAGE128_TT
 0x5454

	)

256 
	#PCI_DEVICE_ID_ATI_RAGE128_TU
 0x5455

	)

258 
	#PCI_DEVICE_ID_ATI_RAGE128_LE
 0x4c45

	)

259 
	#PCI_DEVICE_ID_ATI_RAGE128_LF
 0x4c46

	)

261 
	#PCI_DEVICE_ID_ATI_RAGE128_MF
 0x4d46

	)

262 
	#PCI_DEVICE_ID_ATI_RAGE128_ML
 0x4d4c

	)

264 
	#PCI_DEVICE_ID_ATI_RAGE128_PA
 0x5041

	)

265 
	#PCI_DEVICE_ID_ATI_RAGE128_PB
 0x5042

	)

266 
	#PCI_DEVICE_ID_ATI_RAGE128_PC
 0x5043

	)

267 
	#PCI_DEVICE_ID_ATI_RAGE128_PD
 0x5044

	)

268 
	#PCI_DEVICE_ID_ATI_RAGE128_PE
 0x5045

	)

269 
	#PCI_DEVICE_ID_ATI_RAGE128_PF
 0x5046

	)

271 
	#PCI_DEVICE_ID_ATI_RAGE128_PG
 0x5047

	)

272 
	#PCI_DEVICE_ID_ATI_RAGE128_PH
 0x5048

	)

273 
	#PCI_DEVICE_ID_ATI_RAGE128_PI
 0x5049

	)

274 
	#PCI_DEVICE_ID_ATI_RAGE128_PJ
 0x504A

	)

275 
	#PCI_DEVICE_ID_ATI_RAGE128_PK
 0x504B

	)

276 
	#PCI_DEVICE_ID_ATI_RAGE128_PL
 0x504C

	)

277 
	#PCI_DEVICE_ID_ATI_RAGE128_PM
 0x504D

	)

278 
	#PCI_DEVICE_ID_ATI_RAGE128_PN
 0x504E

	)

279 
	#PCI_DEVICE_ID_ATI_RAGE128_PO
 0x504F

	)

280 
	#PCI_DEVICE_ID_ATI_RAGE128_PP
 0x5050

	)

281 
	#PCI_DEVICE_ID_ATI_RAGE128_PQ
 0x5051

	)

282 
	#PCI_DEVICE_ID_ATI_RAGE128_PR
 0x5052

	)

283 
	#PCI_DEVICE_ID_ATI_RAGE128_PS
 0x5053

	)

284 
	#PCI_DEVICE_ID_ATI_RAGE128_PT
 0x5054

	)

285 
	#PCI_DEVICE_ID_ATI_RAGE128_PU
 0x5055

	)

286 
	#PCI_DEVICE_ID_ATI_RAGE128_PV
 0x5056

	)

287 
	#PCI_DEVICE_ID_ATI_RAGE128_PW
 0x5057

	)

288 
	#PCI_DEVICE_ID_ATI_RAGE128_PX
 0x5058

	)

291 
	#PCI_DEVICE_ID_ATI_RADEON_QD
 0x5144

	)

292 
	#PCI_DEVICE_ID_ATI_RADEON_QE
 0x5145

	)

293 
	#PCI_DEVICE_ID_ATI_RADEON_QF
 0x5146

	)

294 
	#PCI_DEVICE_ID_ATI_RADEON_QG
 0x5147

	)

296 
	#PCI_DEVICE_ID_ATI_RADEON_QY
 0x5159

	)

297 
	#PCI_DEVICE_ID_ATI_RADEON_QZ
 0x515a

	)

299 
	#PCI_DEVICE_ID_ATI_RADEON_QL
 0x514c

	)

300 
	#PCI_DEVICE_ID_ATI_RADEON_QN
 0x514e

	)

301 
	#PCI_DEVICE_ID_ATI_RADEON_QO
 0x514f

	)

302 
	#PCI_DEVICE_ID_ATI_RADEON_Ql
 0x516c

	)

303 
	#PCI_DEVICE_ID_ATI_RADEON_BB
 0x4242

	)

305 
	#PCI_DEVICE_ID_ATI_RADEON_QM
 0x514d

	)

307 
	#PCI_DEVICE_ID_ATI_RADEON_QW
 0x5157

	)

308 
	#PCI_DEVICE_ID_ATI_RADEON_QX
 0x5158

	)

311 
	#PCI_DEVICE_ID_ATI_RADEON_Id
 0x4964

	)

312 
	#PCI_DEVICE_ID_ATI_RADEON_Ie
 0x4965

	)

313 
	#PCI_DEVICE_ID_ATI_RADEON_If
 0x4966

	)

314 
	#PCI_DEVICE_ID_ATI_RADEON_Ig
 0x4967

	)

316 
	#PCI_DEVICE_ID_ATI_RADEON_Ya
 0x5961

	)

317 
	#PCI_DEVICE_ID_ATI_RADEON_Yd
 0x5964

	)

320 
	#PCI_DEVICE_ID_ATI_RADEON_ND
 0x4e44

	)

321 
	#PCI_DEVICE_ID_ATI_RADEON_NE
 0x4e45

	)

322 
	#PCI_DEVICE_ID_ATI_RADEON_NF
 0x4e46

	)

323 
	#PCI_DEVICE_ID_ATI_RADEON_NG
 0x4e47

	)

327 
	#PCI_DEVICE_ID_ATI_RADEON_LY
 0x4c59

	)

328 
	#PCI_DEVICE_ID_ATI_RADEON_LZ
 0x4c5a

	)

330 
	#PCI_DEVICE_ID_ATI_RADEON_LW
 0x4c57

	)

331 
	#PCI_DEVICE_ID_ATI_RADEON_LX
 0x4c58

	)

333 
	#PCI_DEVICE_ID_ATI_RADEON_Ld
 0x4c64

	)

334 
	#PCI_DEVICE_ID_ATI_RADEON_Le
 0x4c65

	)

335 
	#PCI_DEVICE_ID_ATI_RADEON_Lf
 0x4c66

	)

336 
	#PCI_DEVICE_ID_ATI_RADEON_Lg
 0x4c67

	)

339 
	#PCI_DEVICE_ID_ATI_RS100
 0xˇb0

	)

340 
	#PCI_DEVICE_ID_ATI_RS200
 0xˇb2

	)

341 
	#PCI_DEVICE_ID_ATI_RS200_B
 0xcbb2

	)

342 
	#PCI_DEVICE_ID_ATI_RS250
 0xˇb3

	)

343 
	#PCI_DEVICE_ID_ATI_RS300_100
 0x5830

	)

344 
	#PCI_DEVICE_ID_ATI_RS300_133
 0x5831

	)

345 
	#PCI_DEVICE_ID_ATI_RS300_166
 0x5832

	)

346 
	#PCI_DEVICE_ID_ATI_RS300_200
 0x5833

	)

347 
	#PCI_DEVICE_ID_ATI_RS350_100
 0x7830

	)

348 
	#PCI_DEVICE_ID_ATI_RS350_133
 0x7831

	)

349 
	#PCI_DEVICE_ID_ATI_RS350_166
 0x7832

	)

350 
	#PCI_DEVICE_ID_ATI_RS350_200
 0x7833

	)

351 
	#PCI_DEVICE_ID_ATI_RS400_100
 0x5a30

	)

352 
	#PCI_DEVICE_ID_ATI_RS400_133
 0x5a31

	)

353 
	#PCI_DEVICE_ID_ATI_RS400_166
 0x5a32

	)

354 
	#PCI_DEVICE_ID_ATI_RS400_200
 0x5a33

	)

355 
	#PCI_DEVICE_ID_ATI_RS480
 0x5950

	)

357 
	#PCI_DEVICE_ID_ATI_IXP200_IDE
 0x4349

	)

358 
	#PCI_DEVICE_ID_ATI_IXP200_SMBUS
 0x4353

	)

359 
	#PCI_DEVICE_ID_ATI_IXP300_SMBUS
 0x4363

	)

360 
	#PCI_DEVICE_ID_ATI_IXP300_IDE
 0x4369

	)

361 
	#PCI_DEVICE_ID_ATI_IXP300_SATA
 0x436e

	)

362 
	#PCI_DEVICE_ID_ATI_IXP400_SMBUS
 0x4372

	)

363 
	#PCI_DEVICE_ID_ATI_IXP400_IDE
 0x4376

	)

364 
	#PCI_DEVICE_ID_ATI_IXP400_SATA
 0x4379

	)

365 
	#PCI_DEVICE_ID_ATI_IXP400_SATA2
 0x437a

	)

366 
	#PCI_DEVICE_ID_ATI_IXP600_SATA
 0x4380

	)

367 
	#PCI_DEVICE_ID_ATI_SBX00_SMBUS
 0x4385

	)

368 
	#PCI_DEVICE_ID_ATI_IXP600_IDE
 0x438c

	)

369 
	#PCI_DEVICE_ID_ATI_IXP700_SATA
 0x4390

	)

370 
	#PCI_DEVICE_ID_ATI_IXP700_IDE
 0x439c

	)

372 
	#PCI_VENDOR_ID_VLSI
 0x1004

	)

373 
	#PCI_DEVICE_ID_VLSI_82C592
 0x0005

	)

374 
	#PCI_DEVICE_ID_VLSI_82C593
 0x0006

	)

375 
	#PCI_DEVICE_ID_VLSI_82C594
 0x0007

	)

376 
	#PCI_DEVICE_ID_VLSI_82C597
 0x0009

	)

377 
	#PCI_DEVICE_ID_VLSI_82C541
 0x000c

	)

378 
	#PCI_DEVICE_ID_VLSI_82C543
 0x000d

	)

379 
	#PCI_DEVICE_ID_VLSI_82C532
 0x0101

	)

380 
	#PCI_DEVICE_ID_VLSI_82C534
 0x0102

	)

381 
	#PCI_DEVICE_ID_VLSI_82C535
 0x0104

	)

382 
	#PCI_DEVICE_ID_VLSI_82C147
 0x0105

	)

383 
	#PCI_DEVICE_ID_VLSI_VAS96011
 0x0702

	)

386 
	#PCI_DEVICE_ID_RD890_IOMMU
 0x5a23

	)

388 
	#PCI_VENDOR_ID_ADL
 0x1005

	)

389 
	#PCI_DEVICE_ID_ADL_2301
 0x2301

	)

391 
	#PCI_VENDOR_ID_NS
 0x100b

	)

392 
	#PCI_DEVICE_ID_NS_87415
 0x0002

	)

393 
	#PCI_DEVICE_ID_NS_87560_LIO
 0x000e

	)

394 
	#PCI_DEVICE_ID_NS_87560_USB
 0x0012

	)

395 
	#PCI_DEVICE_ID_NS_83815
 0x0020

	)

396 
	#PCI_DEVICE_ID_NS_83820
 0x0022

	)

397 
	#PCI_DEVICE_ID_NS_CS5535_ISA
 0x002b

	)

398 
	#PCI_DEVICE_ID_NS_CS5535_IDE
 0x002d

	)

399 
	#PCI_DEVICE_ID_NS_CS5535_AUDIO
 0x002e

	)

400 
	#PCI_DEVICE_ID_NS_CS5535_USB
 0x002f

	)

401 
	#PCI_DEVICE_ID_NS_GX_VIDEO
 0x0030

	)

402 
	#PCI_DEVICE_ID_NS_SATURN
 0x0035

	)

403 
	#PCI_DEVICE_ID_NS_SCx200_BRIDGE
 0x0500

	)

404 
	#PCI_DEVICE_ID_NS_SCx200_SMI
 0x0501

	)

405 
	#PCI_DEVICE_ID_NS_SCx200_IDE
 0x0502

	)

406 
	#PCI_DEVICE_ID_NS_SCx200_AUDIO
 0x0503

	)

407 
	#PCI_DEVICE_ID_NS_SCx200_VIDEO
 0x0504

	)

408 
	#PCI_DEVICE_ID_NS_SCx200_XBUS
 0x0505

	)

409 
	#PCI_DEVICE_ID_NS_SC1100_BRIDGE
 0x0510

	)

410 
	#PCI_DEVICE_ID_NS_SC1100_SMI
 0x0511

	)

411 
	#PCI_DEVICE_ID_NS_SC1100_XBUS
 0x0515

	)

412 
	#PCI_DEVICE_ID_NS_87410
 0xd001

	)

414 
	#PCI_DEVICE_ID_NS_GX_HOST_BRIDGE
 0x0028

	)

416 
	#PCI_VENDOR_ID_TSENG
 0x100c

	)

417 
	#PCI_DEVICE_ID_TSENG_W32P_2
 0x3202

	)

418 
	#PCI_DEVICE_ID_TSENG_W32P_b
 0x3205

	)

419 
	#PCI_DEVICE_ID_TSENG_W32P_c
 0x3206

	)

420 
	#PCI_DEVICE_ID_TSENG_W32P_d
 0x3207

	)

421 
	#PCI_DEVICE_ID_TSENG_ET6000
 0x3208

	)

423 
	#PCI_VENDOR_ID_WEITEK
 0x100e

	)

424 
	#PCI_DEVICE_ID_WEITEK_P9000
 0x9001

	)

425 
	#PCI_DEVICE_ID_WEITEK_P9100
 0x9100

	)

427 
	#PCI_VENDOR_ID_DEC
 0x1011

	)

428 
	#PCI_DEVICE_ID_DEC_BRD
 0x0001

	)

429 
	#PCI_DEVICE_ID_DEC_TULIP
 0x0002

	)

430 
	#PCI_DEVICE_ID_DEC_TGA
 0x0004

	)

431 
	#PCI_DEVICE_ID_DEC_TULIP_FAST
 0x0009

	)

432 
	#PCI_DEVICE_ID_DEC_TGA2
 0x000D

	)

433 
	#PCI_DEVICE_ID_DEC_FDDI
 0x000F

	)

434 
	#PCI_DEVICE_ID_DEC_TULIP_PLUS
 0x0014

	)

435 
	#PCI_DEVICE_ID_DEC_21142
 0x0019

	)

436 
	#PCI_DEVICE_ID_DEC_21052
 0x0021

	)

437 
	#PCI_DEVICE_ID_DEC_21150
 0x0022

	)

438 
	#PCI_DEVICE_ID_DEC_21152
 0x0024

	)

439 
	#PCI_DEVICE_ID_DEC_21153
 0x0025

	)

440 
	#PCI_DEVICE_ID_DEC_21154
 0x0026

	)

441 
	#PCI_DEVICE_ID_DEC_21285
 0x1065

	)

442 
	#PCI_DEVICE_ID_COMPAQ_42XX
 0x0046

	)

444 
	#PCI_VENDOR_ID_CIRRUS
 0x1013

	)

445 
	#PCI_DEVICE_ID_CIRRUS_7548
 0x0038

	)

446 
	#PCI_DEVICE_ID_CIRRUS_5430
 0x00a0

	)

447 
	#PCI_DEVICE_ID_CIRRUS_5434_4
 0x00a4

	)

448 
	#PCI_DEVICE_ID_CIRRUS_5434_8
 0x00a8

	)

449 
	#PCI_DEVICE_ID_CIRRUS_5436
 0x00ac

	)

450 
	#PCI_DEVICE_ID_CIRRUS_5446
 0x00b8

	)

451 
	#PCI_DEVICE_ID_CIRRUS_5480
 0x00bc

	)

452 
	#PCI_DEVICE_ID_CIRRUS_5462
 0x00d0

	)

453 
	#PCI_DEVICE_ID_CIRRUS_5464
 0x00d4

	)

454 
	#PCI_DEVICE_ID_CIRRUS_5465
 0x00d6

	)

455 
	#PCI_DEVICE_ID_CIRRUS_6729
 0x1100

	)

456 
	#PCI_DEVICE_ID_CIRRUS_6832
 0x1110

	)

457 
	#PCI_DEVICE_ID_CIRRUS_7543
 0x1202

	)

458 
	#PCI_DEVICE_ID_CIRRUS_4610
 0x6001

	)

459 
	#PCI_DEVICE_ID_CIRRUS_4612
 0x6003

	)

460 
	#PCI_DEVICE_ID_CIRRUS_4615
 0x6004

	)

462 
	#PCI_VENDOR_ID_IBM
 0x1014

	)

463 
	#PCI_DEVICE_ID_IBM_TR
 0x0018

	)

464 
	#PCI_DEVICE_ID_IBM_TR_WAKE
 0x003e

	)

465 
	#PCI_DEVICE_ID_IBM_CPC710_PCI64
 0x00fc

	)

466 
	#PCI_DEVICE_ID_IBM_SNIPE
 0x0180

	)

467 
	#PCI_DEVICE_ID_IBM_CITRINE
 0x028C

	)

468 
	#PCI_DEVICE_ID_IBM_GEMSTONE
 0xB166

	)

469 
	#PCI_DEVICE_ID_IBM_OBSIDIAN
 0x02BD

	)

470 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1
 0x0031

	)

471 
	#PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2
 0x0219

	)

472 
	#PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX
 0x021A

	)

473 
	#PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM
 0x0251

	)

474 
	#PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL
 0x252

	)

475 
	#PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM_PCIE
 0x0361

	)

476 
	#PCI_SUBVENDOR_ID_IBM
 0x1014

	)

477 
	#PCI_SUBDEVICE_ID_IBM_SATURN_SERIAL_ONE_PORT
 0x03d4

	)

479 
	#PCI_VENDOR_ID_UNISYS
 0x1018

	)

480 
	#PCI_DEVICE_ID_UNISYS_DMA_DIRECTOR
 0x001C

	)

482 
	#PCI_VENDOR_ID_COMPEX2
 0x101®

	)

483 
	#PCI_DEVICE_ID_COMPEX2_100VG
 0x0005

	)

485 
	#PCI_VENDOR_ID_WD
 0x101c

	)

486 
	#PCI_DEVICE_ID_WD_90C
 0xc24a

	)

488 
	#PCI_VENDOR_ID_AMI
 0x101e

	)

489 
	#PCI_DEVICE_ID_AMI_MEGARAID3
 0x1960

	)

490 
	#PCI_DEVICE_ID_AMI_MEGARAID
 0x9010

	)

491 
	#PCI_DEVICE_ID_AMI_MEGARAID2
 0x9060

	)

493 
	#PCI_VENDOR_ID_AMD
 0x1022

	)

494 
	#PCI_DEVICE_ID_AMD_K8_NB
 0x1100

	)

495 
	#PCI_DEVICE_ID_AMD_K8_NB_MISC
 0x1103

	)

496 
	#PCI_DEVICE_ID_AMD_10H_NB_HT
 0x1200

	)

497 
	#PCI_DEVICE_ID_AMD_10H_NB_MAP
 0x1201

	)

498 
	#PCI_DEVICE_ID_AMD_10H_NB_DRAM
 0x1202

	)

499 
	#PCI_DEVICE_ID_AMD_10H_NB_MISC
 0x1203

	)

500 
	#PCI_DEVICE_ID_AMD_10H_NB_LINK
 0x1204

	)

501 
	#PCI_DEVICE_ID_AMD_11H_NB_HT
 0x1300

	)

502 
	#PCI_DEVICE_ID_AMD_11H_NB_MAP
 0x1301

	)

503 
	#PCI_DEVICE_ID_AMD_11H_NB_DRAM
 0x1302

	)

504 
	#PCI_DEVICE_ID_AMD_11H_NB_MISC
 0x1303

	)

505 
	#PCI_DEVICE_ID_AMD_11H_NB_LINK
 0x1304

	)

506 
	#PCI_DEVICE_ID_AMD_LANCE
 0x2000

	)

507 
	#PCI_DEVICE_ID_AMD_LANCE_HOME
 0x2001

	)

508 
	#PCI_DEVICE_ID_AMD_SCSI
 0x2020

	)

509 
	#PCI_DEVICE_ID_AMD_SERENADE
 0x36c0

	)

510 
	#PCI_DEVICE_ID_AMD_FE_GATE_7006
 0x7006

	)

511 
	#PCI_DEVICE_ID_AMD_FE_GATE_7007
 0x7007

	)

512 
	#PCI_DEVICE_ID_AMD_FE_GATE_700C
 0x700C

	)

513 
	#PCI_DEVICE_ID_AMD_FE_GATE_700E
 0x700E

	)

514 
	#PCI_DEVICE_ID_AMD_COBRA_7401
 0x7401

	)

515 
	#PCI_DEVICE_ID_AMD_VIPER_7409
 0x7409

	)

516 
	#PCI_DEVICE_ID_AMD_VIPER_740B
 0x740B

	)

517 
	#PCI_DEVICE_ID_AMD_VIPER_7410
 0x7410

	)

518 
	#PCI_DEVICE_ID_AMD_VIPER_7411
 0x7411

	)

519 
	#PCI_DEVICE_ID_AMD_VIPER_7413
 0x7413

	)

520 
	#PCI_DEVICE_ID_AMD_VIPER_7440
 0x7440

	)

521 
	#PCI_DEVICE_ID_AMD_OPUS_7441
 0x7441

	)

522 
	#PCI_DEVICE_ID_AMD_OPUS_7443
 0x7443

	)

523 
	#PCI_DEVICE_ID_AMD_VIPER_7443
 0x7443

	)

524 
	#PCI_DEVICE_ID_AMD_OPUS_7445
 0x7445

	)

525 
	#PCI_DEVICE_ID_AMD_8111_LPC
 0x7468

	)

526 
	#PCI_DEVICE_ID_AMD_8111_IDE
 0x7469

	)

527 
	#PCI_DEVICE_ID_AMD_8111_SMBUS2
 0x746a

	)

528 
	#PCI_DEVICE_ID_AMD_8111_SMBUS
 0x746b

	)

529 
	#PCI_DEVICE_ID_AMD_8111_AUDIO
 0x746d

	)

530 
	#PCI_DEVICE_ID_AMD_8151_0
 0x7454

	)

531 
	#PCI_DEVICE_ID_AMD_8131_BRIDGE
 0x7450

	)

532 
	#PCI_DEVICE_ID_AMD_8131_APIC
 0x7451

	)

533 
	#PCI_DEVICE_ID_AMD_8132_BRIDGE
 0x7458

	)

534 
	#PCI_DEVICE_ID_AMD_HUDSON2_SMBUS
 0x780b

	)

535 
	#PCI_DEVICE_ID_AMD_CS5536_ISA
 0x2090

	)

536 
	#PCI_DEVICE_ID_AMD_CS5536_FLASH
 0x2091

	)

537 
	#PCI_DEVICE_ID_AMD_CS5536_AUDIO
 0x2093

	)

538 
	#PCI_DEVICE_ID_AMD_CS5536_OHC
 0x2094

	)

539 
	#PCI_DEVICE_ID_AMD_CS5536_EHC
 0x2095

	)

540 
	#PCI_DEVICE_ID_AMD_CS5536_UDC
 0x2096

	)

541 
	#PCI_DEVICE_ID_AMD_CS5536_UOC
 0x2097

	)

542 
	#PCI_DEVICE_ID_AMD_CS5536_IDE
 0x209A

	)

543 
	#PCI_DEVICE_ID_AMD_LX_VIDEO
 0x2081

	)

544 
	#PCI_DEVICE_ID_AMD_LX_AES
 0x2082

	)

545 
	#PCI_DEVICE_ID_AMD_HUDSON2_IDE
 0x780c

	)

546 
	#PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE
 0x7800

	)

548 
	#PCI_VENDOR_ID_TRIDENT
 0x1023

	)

549 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_DX
 0x2000

	)

550 
	#PCI_DEVICE_ID_TRIDENT_4DWAVE_NX
 0x2001

	)

551 
	#PCI_DEVICE_ID_TRIDENT_9320
 0x9320

	)

552 
	#PCI_DEVICE_ID_TRIDENT_9388
 0x9388

	)

553 
	#PCI_DEVICE_ID_TRIDENT_9397
 0x9397

	)

554 
	#PCI_DEVICE_ID_TRIDENT_939A
 0x939A

	)

555 
	#PCI_DEVICE_ID_TRIDENT_9520
 0x9520

	)

556 
	#PCI_DEVICE_ID_TRIDENT_9525
 0x9525

	)

557 
	#PCI_DEVICE_ID_TRIDENT_9420
 0x9420

	)

558 
	#PCI_DEVICE_ID_TRIDENT_9440
 0x9440

	)

559 
	#PCI_DEVICE_ID_TRIDENT_9660
 0x9660

	)

560 
	#PCI_DEVICE_ID_TRIDENT_9750
 0x9750

	)

561 
	#PCI_DEVICE_ID_TRIDENT_9850
 0x9850

	)

562 
	#PCI_DEVICE_ID_TRIDENT_9880
 0x9880

	)

563 
	#PCI_DEVICE_ID_TRIDENT_8400
 0x8400

	)

564 
	#PCI_DEVICE_ID_TRIDENT_8420
 0x8420

	)

565 
	#PCI_DEVICE_ID_TRIDENT_8500
 0x8500

	)

567 
	#PCI_VENDOR_ID_AI
 0x1025

	)

568 
	#PCI_DEVICE_ID_AI_M1435
 0x1435

	)

570 
	#PCI_VENDOR_ID_DELL
 0x1028

	)

571 
	#PCI_DEVICE_ID_DELL_RACIII
 0x0008

	)

572 
	#PCI_DEVICE_ID_DELL_RAC4
 0x0012

	)

573 
	#PCI_DEVICE_ID_DELL_PERC5
 0x0015

	)

575 
	#PCI_VENDOR_ID_MATROX
 0x102B

	)

576 
	#PCI_DEVICE_ID_MATROX_MGA_2
 0x0518

	)

577 
	#PCI_DEVICE_ID_MATROX_MIL
 0x0519

	)

578 
	#PCI_DEVICE_ID_MATROX_MYS
 0x051A

	)

579 
	#PCI_DEVICE_ID_MATROX_MIL_2
 0x051b

	)

580 
	#PCI_DEVICE_ID_MATROX_MYS_AGP
 0x051e

	)

581 
	#PCI_DEVICE_ID_MATROX_MIL_2_AGP
 0x051f

	)

582 
	#PCI_DEVICE_ID_MATROX_MGA_IMP
 0x0d10

	)

583 
	#PCI_DEVICE_ID_MATROX_G100_MM
 0x1000

	)

584 
	#PCI_DEVICE_ID_MATROX_G100_AGP
 0x1001

	)

585 
	#PCI_DEVICE_ID_MATROX_G200_PCI
 0x0520

	)

586 
	#PCI_DEVICE_ID_MATROX_G200_AGP
 0x0521

	)

587 
	#PCI_DEVICE_ID_MATROX_G400
 0x0525

	)

588 
	#PCI_DEVICE_ID_MATROX_G550
 0x2527

	)

589 
	#PCI_DEVICE_ID_MATROX_VIA
 0x4536

	)

591 
	#PCI_VENDOR_ID_CT
 0x102c

	)

592 
	#PCI_DEVICE_ID_CT_69000
 0x00c0

	)

593 
	#PCI_DEVICE_ID_CT_65545
 0x00d8

	)

594 
	#PCI_DEVICE_ID_CT_65548
 0x00dc

	)

595 
	#PCI_DEVICE_ID_CT_65550
 0x00e0

	)

596 
	#PCI_DEVICE_ID_CT_65554
 0x00e4

	)

597 
	#PCI_DEVICE_ID_CT_65555
 0x00e5

	)

599 
	#PCI_VENDOR_ID_MIRO
 0x1031

	)

600 
	#PCI_DEVICE_ID_MIRO_36050
 0x5601

	)

601 
	#PCI_DEVICE_ID_MIRO_DC10PLUS
 0x7e„

	)

602 
	#PCI_DEVICE_ID_MIRO_DC30PLUS
 0xd801

	)

604 
	#PCI_VENDOR_ID_NEC
 0x1033

	)

605 
	#PCI_DEVICE_ID_NEC_CBUS_1
 0x0001

	)

606 
	#PCI_DEVICE_ID_NEC_LOCAL
 0x0002

	)

607 
	#PCI_DEVICE_ID_NEC_ATM
 0x0003

	)

608 
	#PCI_DEVICE_ID_NEC_R4000
 0x0004

	)

609 
	#PCI_DEVICE_ID_NEC_486
 0x0005

	)

610 
	#PCI_DEVICE_ID_NEC_ACCEL_1
 0x0006

	)

611 
	#PCI_DEVICE_ID_NEC_UXBUS
 0x0007

	)

612 
	#PCI_DEVICE_ID_NEC_ACCEL_2
 0x0008

	)

613 
	#PCI_DEVICE_ID_NEC_GRAPH
 0x0009

	)

614 
	#PCI_DEVICE_ID_NEC_VL
 0x0016

	)

615 
	#PCI_DEVICE_ID_NEC_STARALPHA2
 0x002¯

	)

616 
	#PCI_DEVICE_ID_NEC_CBUS_2
 0x002d

	)

617 
	#PCI_DEVICE_ID_NEC_USB
 0x0035

	)

618 
	#PCI_DEVICE_ID_NEC_CBUS_3
 0x003b

	)

619 
	#PCI_DEVICE_ID_NEC_NAPCCARD
 0x003e

	)

620 
	#PCI_DEVICE_ID_NEC_PCX2
 0x0046

	)

621 
	#PCI_DEVICE_ID_NEC_NILE4
 0x005a

	)

622 
	#PCI_DEVICE_ID_NEC_VRC5476
 0x009b

	)

623 
	#PCI_DEVICE_ID_NEC_VRC4173
 0x00a5

	)

624 
	#PCI_DEVICE_ID_NEC_VRC5477_AC97
 0x00a6

	)

625 
	#PCI_DEVICE_ID_NEC_PC9821CS01
 0x800¯

	)

626 
	#PCI_DEVICE_ID_NEC_PC9821NRB06
 0x800d

	)

628 
	#PCI_VENDOR_ID_FD
 0x1036

	)

629 
	#PCI_DEVICE_ID_FD_36C70
 0x0000

	)

631 
	#PCI_VENDOR_ID_SI
 0x1039

	)

632 
	#PCI_DEVICE_ID_SI_5591_AGP
 0x0001

	)

633 
	#PCI_DEVICE_ID_SI_6202
 0x0002

	)

634 
	#PCI_DEVICE_ID_SI_503
 0x0008

	)

635 
	#PCI_DEVICE_ID_SI_ACPI
 0x0009

	)

636 
	#PCI_DEVICE_ID_SI_SMBUS
 0x0016

	)

637 
	#PCI_DEVICE_ID_SI_LPC
 0x0018

	)

638 
	#PCI_DEVICE_ID_SI_5597_VGA
 0x0200

	)

639 
	#PCI_DEVICE_ID_SI_6205
 0x0205

	)

640 
	#PCI_DEVICE_ID_SI_501
 0x0406

	)

641 
	#PCI_DEVICE_ID_SI_496
 0x0496

	)

642 
	#PCI_DEVICE_ID_SI_300
 0x0300

	)

643 
	#PCI_DEVICE_ID_SI_315H
 0x0310

	)

644 
	#PCI_DEVICE_ID_SI_315
 0x0315

	)

645 
	#PCI_DEVICE_ID_SI_315PRO
 0x0325

	)

646 
	#PCI_DEVICE_ID_SI_530
 0x0530

	)

647 
	#PCI_DEVICE_ID_SI_540
 0x0540

	)

648 
	#PCI_DEVICE_ID_SI_550
 0x0550

	)

649 
	#PCI_DEVICE_ID_SI_540_VGA
 0x5300

	)

650 
	#PCI_DEVICE_ID_SI_550_VGA
 0x5315

	)

651 
	#PCI_DEVICE_ID_SI_620
 0x0620

	)

652 
	#PCI_DEVICE_ID_SI_630
 0x0630

	)

653 
	#PCI_DEVICE_ID_SI_633
 0x0633

	)

654 
	#PCI_DEVICE_ID_SI_635
 0x0635

	)

655 
	#PCI_DEVICE_ID_SI_640
 0x0640

	)

656 
	#PCI_DEVICE_ID_SI_645
 0x0645

	)

657 
	#PCI_DEVICE_ID_SI_646
 0x0646

	)

658 
	#PCI_DEVICE_ID_SI_648
 0x0648

	)

659 
	#PCI_DEVICE_ID_SI_650
 0x0650

	)

660 
	#PCI_DEVICE_ID_SI_651
 0x0651

	)

661 
	#PCI_DEVICE_ID_SI_655
 0x0655

	)

662 
	#PCI_DEVICE_ID_SI_661
 0x0661

	)

663 
	#PCI_DEVICE_ID_SI_730
 0x0730

	)

664 
	#PCI_DEVICE_ID_SI_733
 0x0733

	)

665 
	#PCI_DEVICE_ID_SI_630_VGA
 0x6300

	)

666 
	#PCI_DEVICE_ID_SI_735
 0x0735

	)

667 
	#PCI_DEVICE_ID_SI_740
 0x0740

	)

668 
	#PCI_DEVICE_ID_SI_741
 0x0741

	)

669 
	#PCI_DEVICE_ID_SI_745
 0x0745

	)

670 
	#PCI_DEVICE_ID_SI_746
 0x0746

	)

671 
	#PCI_DEVICE_ID_SI_755
 0x0755

	)

672 
	#PCI_DEVICE_ID_SI_760
 0x0760

	)

673 
	#PCI_DEVICE_ID_SI_900
 0x0900

	)

674 
	#PCI_DEVICE_ID_SI_961
 0x0961

	)

675 
	#PCI_DEVICE_ID_SI_962
 0x0962

	)

676 
	#PCI_DEVICE_ID_SI_963
 0x0963

	)

677 
	#PCI_DEVICE_ID_SI_965
 0x0965

	)

678 
	#PCI_DEVICE_ID_SI_966
 0x0966

	)

679 
	#PCI_DEVICE_ID_SI_968
 0x0968

	)

680 
	#PCI_DEVICE_ID_SI_5511
 0x5511

	)

681 
	#PCI_DEVICE_ID_SI_5513
 0x5513

	)

682 
	#PCI_DEVICE_ID_SI_5517
 0x5517

	)

683 
	#PCI_DEVICE_ID_SI_5518
 0x5518

	)

684 
	#PCI_DEVICE_ID_SI_5571
 0x5571

	)

685 
	#PCI_DEVICE_ID_SI_5581
 0x5581

	)

686 
	#PCI_DEVICE_ID_SI_5582
 0x5582

	)

687 
	#PCI_DEVICE_ID_SI_5591
 0x5591

	)

688 
	#PCI_DEVICE_ID_SI_5596
 0x5596

	)

689 
	#PCI_DEVICE_ID_SI_5597
 0x5597

	)

690 
	#PCI_DEVICE_ID_SI_5598
 0x5598

	)

691 
	#PCI_DEVICE_ID_SI_5600
 0x5600

	)

692 
	#PCI_DEVICE_ID_SI_7012
 0x7012

	)

693 
	#PCI_DEVICE_ID_SI_7013
 0x7013

	)

694 
	#PCI_DEVICE_ID_SI_7016
 0x7016

	)

695 
	#PCI_DEVICE_ID_SI_7018
 0x7018

	)

697 
	#PCI_VENDOR_ID_ATTANSIC
 0x1969

	)

698 
	#PCI_DEVICE_ID_ATTANSIC_L1
 0x1048

	)

699 
	#PCI_DEVICE_ID_ATTANSIC_L2
 0x2048

	)

701 
	#PCI_VENDOR_ID_HP
 0x103c

	)

702 
	#PCI_DEVICE_ID_HP_VISUALIZE_EG
 0x1005

	)

703 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX6
 0x1006

	)

704 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX4
 0x1008

	)

705 
	#PCI_DEVICE_ID_HP_VISUALIZE_FX2
 0x100a

	)

706 
	#PCI_DEVICE_ID_HP_TACHYON
 0x1028

	)

707 
	#PCI_DEVICE_ID_HP_TACHLITE
 0x1029

	)

708 
	#PCI_DEVICE_ID_HP_J2585A
 0x1030

	)

709 
	#PCI_DEVICE_ID_HP_J2585B
 0x1031

	)

710 
	#PCI_DEVICE_ID_HP_J2973A
 0x1040

	)

711 
	#PCI_DEVICE_ID_HP_J2970A
 0x1042

	)

712 
	#PCI_DEVICE_ID_HP_DIVA
 0x1048

	)

713 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA1
 0x1049

	)

714 
	#PCI_DEVICE_ID_HP_DIVA_TOSCA2
 0x104A

	)

715 
	#PCI_DEVICE_ID_HP_DIVA_MAESTRO
 0x104B

	)

716 
	#PCI_DEVICE_ID_HP_REO_IOC
 0x10f1

	)

717 
	#PCI_DEVICE_ID_HP_VISUALIZE_FXE
 0x108b

	)

718 
	#PCI_DEVICE_ID_HP_DIVA_HALFDOME
 0x1223

	)

719 
	#PCI_DEVICE_ID_HP_DIVA_KEYSTONE
 0x1226

	)

720 
	#PCI_DEVICE_ID_HP_DIVA_POWERBAR
 0x1227

	)

721 
	#PCI_DEVICE_ID_HP_ZX1_IOC
 0x122a

	)

722 
	#PCI_DEVICE_ID_HP_PCIX_LBA
 0x122e

	)

723 
	#PCI_DEVICE_ID_HP_SX1000_IOC
 0x127c

	)

724 
	#PCI_DEVICE_ID_HP_DIVA_EVEREST
 0x1282

	)

725 
	#PCI_DEVICE_ID_HP_DIVA_AUX
 0x1290

	)

726 
	#PCI_DEVICE_ID_HP_DIVA_RMP3
 0x1301

	)

727 
	#PCI_DEVICE_ID_HP_DIVA_HURRICANE
 0x132a

	)

728 
	#PCI_DEVICE_ID_HP_CISSA
 0x3220

	)

729 
	#PCI_DEVICE_ID_HP_CISSC
 0x3230

	)

730 
	#PCI_DEVICE_ID_HP_CISSD
 0x3238

	)

731 
	#PCI_DEVICE_ID_HP_CISSE
 0x323A

	)

732 
	#PCI_DEVICE_ID_HP_CISSF
 0x323B

	)

733 
	#PCI_DEVICE_ID_HP_CISSH
 0x323C

	)

734 
	#PCI_DEVICE_ID_HP_ZX2_IOC
 0x4031

	)

736 
	#PCI_VENDOR_ID_PCTECH
 0x1042

	)

737 
	#PCI_DEVICE_ID_PCTECH_RZ1000
 0x1000

	)

738 
	#PCI_DEVICE_ID_PCTECH_RZ1001
 0x1001

	)

739 
	#PCI_DEVICE_ID_PCTECH_SAMURAI_IDE
 0x3020

	)

741 
	#PCI_VENDOR_ID_ASUSTEK
 0x1043

	)

742 
	#PCI_DEVICE_ID_ASUSTEK_0675
 0x0675

	)

744 
	#PCI_VENDOR_ID_DPT
 0x1044

	)

745 
	#PCI_DEVICE_ID_DPT
 0xa400

	)

747 
	#PCI_VENDOR_ID_OPTI
 0x1045

	)

748 
	#PCI_DEVICE_ID_OPTI_82C558
 0xc558

	)

749 
	#PCI_DEVICE_ID_OPTI_82C621
 0xc621

	)

750 
	#PCI_DEVICE_ID_OPTI_82C700
 0xc700

	)

751 
	#PCI_DEVICE_ID_OPTI_82C825
 0xd568

	)

753 
	#PCI_VENDOR_ID_ELSA
 0x1048

	)

754 
	#PCI_DEVICE_ID_ELSA_MICROLINK
 0x1000

	)

755 
	#PCI_DEVICE_ID_ELSA_QS3000
 0x3000

	)

758 
	#PCI_VENDOR_ID_BUSLOGIC
 0x104B

	)

759 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC
 0x0140

	)

760 
	#PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER
 0x1040

	)

761 
	#PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT
 0x8130

	)

763 
	#PCI_VENDOR_ID_TI
 0x104c

	)

764 
	#PCI_DEVICE_ID_TI_TVP4020
 0x3d07

	)

765 
	#PCI_DEVICE_ID_TI_4450
 0x8011

	)

766 
	#PCI_DEVICE_ID_TI_TSB43AB22
 0x8023

	)

767 
	#PCI_DEVICE_ID_TI_XX21_XX11
 0x8031

	)

768 
	#PCI_DEVICE_ID_TI_XX21_XX11_SD
 0x8034

	)

769 
	#PCI_DEVICE_ID_TI_X515
 0x8036

	)

770 
	#PCI_DEVICE_ID_TI_XX12
 0x8039

	)

771 
	#PCI_DEVICE_ID_TI_1130
 0xac12

	)

772 
	#PCI_DEVICE_ID_TI_1031
 0xac13

	)

773 
	#PCI_DEVICE_ID_TI_1131
 0xac15

	)

774 
	#PCI_DEVICE_ID_TI_1250
 0xac16

	)

775 
	#PCI_DEVICE_ID_TI_1220
 0xac17

	)

776 
	#PCI_DEVICE_ID_TI_1221
 0xac19

	)

777 
	#PCI_DEVICE_ID_TI_1210
 0xac1a

	)

778 
	#PCI_DEVICE_ID_TI_1450
 0xac1b

	)

779 
	#PCI_DEVICE_ID_TI_1225
 0xac1c

	)

780 
	#PCI_DEVICE_ID_TI_1251A
 0xac1d

	)

781 
	#PCI_DEVICE_ID_TI_1211
 0xac1e

	)

782 
	#PCI_DEVICE_ID_TI_1251B
 0xac1f

	)

783 
	#PCI_DEVICE_ID_TI_4410
 0xac41

	)

784 
	#PCI_DEVICE_ID_TI_4451
 0xac42

	)

785 
	#PCI_DEVICE_ID_TI_4510
 0xac44

	)

786 
	#PCI_DEVICE_ID_TI_4520
 0xac46

	)

787 
	#PCI_DEVICE_ID_TI_7510
 0xac47

	)

788 
	#PCI_DEVICE_ID_TI_7610
 0xac48

	)

789 
	#PCI_DEVICE_ID_TI_7410
 0xac49

	)

790 
	#PCI_DEVICE_ID_TI_1410
 0xac50

	)

791 
	#PCI_DEVICE_ID_TI_1420
 0xac51

	)

792 
	#PCI_DEVICE_ID_TI_1451A
 0xac52

	)

793 
	#PCI_DEVICE_ID_TI_1620
 0xac54

	)

794 
	#PCI_DEVICE_ID_TI_1520
 0xac55

	)

795 
	#PCI_DEVICE_ID_TI_1510
 0xac56

	)

796 
	#PCI_DEVICE_ID_TI_X620
 0xac8d

	)

797 
	#PCI_DEVICE_ID_TI_X420
 0xac8e

	)

799 
	#PCI_VENDOR_ID_SONY
 0x104d

	)

803 
	#PCI_VENDOR_ID_WINBOND2
 0x1050

	)

804 
	#PCI_DEVICE_ID_WINBOND2_89C940F
 0x5a5a

	)

805 
	#PCI_DEVICE_ID_WINBOND2_6692
 0x6692

	)

807 
	#PCI_VENDOR_ID_ANIGMA
 0x1051

	)

808 
	#PCI_DEVICE_ID_ANIGMA_MC145575
 0x0100

	)

810 
	#PCI_VENDOR_ID_EFAR
 0x1055

	)

811 
	#PCI_DEVICE_ID_EFAR_SLC90E66_1
 0x9130

	)

812 
	#PCI_DEVICE_ID_EFAR_SLC90E66_3
 0x9463

	)

814 
	#PCI_VENDOR_ID_MOTOROLA
 0x1057

	)

815 
	#PCI_DEVICE_ID_MOTOROLA_MPC105
 0x0001

	)

816 
	#PCI_DEVICE_ID_MOTOROLA_MPC106
 0x0002

	)

817 
	#PCI_DEVICE_ID_MOTOROLA_MPC107
 0x0004

	)

818 
	#PCI_DEVICE_ID_MOTOROLA_RAVEN
 0x4801

	)

819 
	#PCI_DEVICE_ID_MOTOROLA_FALCON
 0x4802

	)

820 
	#PCI_DEVICE_ID_MOTOROLA_HAWK
 0x4803

	)

821 
	#PCI_DEVICE_ID_MOTOROLA_HARRIER
 0x480b

	)

822 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200
 0x5803

	)

823 
	#PCI_DEVICE_ID_MOTOROLA_MPC5200B
 0x5809

	)

825 
	#PCI_VENDOR_ID_PROMISE
 0x105a

	)

826 
	#PCI_DEVICE_ID_PROMISE_20265
 0x0d30

	)

827 
	#PCI_DEVICE_ID_PROMISE_20267
 0x4d30

	)

828 
	#PCI_DEVICE_ID_PROMISE_20246
 0x4d33

	)

829 
	#PCI_DEVICE_ID_PROMISE_20262
 0x4d38

	)

830 
	#PCI_DEVICE_ID_PROMISE_20263
 0x0D38

	)

831 
	#PCI_DEVICE_ID_PROMISE_20268
 0x4d68

	)

832 
	#PCI_DEVICE_ID_PROMISE_20269
 0x4d69

	)

833 
	#PCI_DEVICE_ID_PROMISE_20270
 0x6268

	)

834 
	#PCI_DEVICE_ID_PROMISE_20271
 0x6269

	)

835 
	#PCI_DEVICE_ID_PROMISE_20275
 0x1275

	)

836 
	#PCI_DEVICE_ID_PROMISE_20276
 0x5275

	)

837 
	#PCI_DEVICE_ID_PROMISE_20277
 0x7275

	)

839 
	#PCI_VENDOR_ID_FOXCONN
 0x105b

	)

841 
	#PCI_VENDOR_ID_UMC
 0x1060

	)

842 
	#PCI_DEVICE_ID_UMC_UM8673F
 0x0101

	)

843 
	#PCI_DEVICE_ID_UMC_UM8886BF
 0x673a

	)

844 
	#PCI_DEVICE_ID_UMC_UM8886A
 0x886a

	)

847 
	#PCI_VENDOR_ID_MYLEX
 0x1069

	)

848 
	#PCI_DEVICE_ID_MYLEX_DAC960_P
 0x0001

	)

849 
	#PCI_DEVICE_ID_MYLEX_DAC960_PD
 0x0002

	)

850 
	#PCI_DEVICE_ID_MYLEX_DAC960_PG
 0x0010

	)

851 
	#PCI_DEVICE_ID_MYLEX_DAC960_LA
 0x0020

	)

852 
	#PCI_DEVICE_ID_MYLEX_DAC960_LP
 0x0050

	)

853 
	#PCI_DEVICE_ID_MYLEX_DAC960_BA
 0xBA56

	)

854 
	#PCI_DEVICE_ID_MYLEX_DAC960_GEM
 0xB166

	)

857 
	#PCI_VENDOR_ID_APPLE
 0x106b

	)

858 
	#PCI_DEVICE_ID_APPLE_BANDIT
 0x0001

	)

859 
	#PCI_DEVICE_ID_APPLE_HYDRA
 0x000e

	)

860 
	#PCI_DEVICE_ID_APPLE_UNI_N_FW
 0x0018

	)

861 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP
 0x0020

	)

862 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC
 0x0021

	)

863 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMACP
 0x0024

	)

864 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP_P
 0x0027

	)

865 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP15
 0x002d

	)

866 
	#PCI_DEVICE_ID_APPLE_UNI_N_PCI15
 0x002e

	)

867 
	#PCI_DEVICE_ID_APPLE_UNI_N_GMAC2
 0x0032

	)

868 
	#PCI_DEVICE_ID_APPLE_UNI_N_ATA
 0x0033

	)

869 
	#PCI_DEVICE_ID_APPLE_UNI_N_AGP2
 0x0034

	)

870 
	#PCI_DEVICE_ID_APPLE_IPID_ATA100
 0x003b

	)

871 
	#PCI_DEVICE_ID_APPLE_K2_ATA100
 0x0043

	)

872 
	#PCI_DEVICE_ID_APPLE_U3_AGP
 0x004b

	)

873 
	#PCI_DEVICE_ID_APPLE_K2_GMAC
 0x004c

	)

874 
	#PCI_DEVICE_ID_APPLE_SH_ATA
 0x0050

	)

875 
	#PCI_DEVICE_ID_APPLE_SH_SUNGEM
 0x0051

	)

876 
	#PCI_DEVICE_ID_APPLE_U3L_AGP
 0x0058

	)

877 
	#PCI_DEVICE_ID_APPLE_U3H_AGP
 0x0059

	)

878 
	#PCI_DEVICE_ID_APPLE_IPID2_AGP
 0x0066

	)

879 
	#PCI_DEVICE_ID_APPLE_IPID2_ATA
 0x0069

	)

880 
	#PCI_DEVICE_ID_APPLE_IPID2_FW
 0x006a

	)

881 
	#PCI_DEVICE_ID_APPLE_IPID2_GMAC
 0x006b

	)

882 
	#PCI_DEVICE_ID_APPLE_TIGON3
 0x1645

	)

884 
	#PCI_VENDOR_ID_YAMAHA
 0x1073

	)

885 
	#PCI_DEVICE_ID_YAMAHA_724
 0x0004

	)

886 
	#PCI_DEVICE_ID_YAMAHA_724F
 0x000d

	)

887 
	#PCI_DEVICE_ID_YAMAHA_740
 0x000a

	)

888 
	#PCI_DEVICE_ID_YAMAHA_740C
 0x000c

	)

889 
	#PCI_DEVICE_ID_YAMAHA_744
 0x0010

	)

890 
	#PCI_DEVICE_ID_YAMAHA_754
 0x0012

	)

893 
	#PCI_VENDOR_ID_QLOGIC
 0x1077

	)

894 
	#PCI_DEVICE_ID_QLOGIC_ISP10160
 0x1016

	)

895 
	#PCI_DEVICE_ID_QLOGIC_ISP1020
 0x1020

	)

896 
	#PCI_DEVICE_ID_QLOGIC_ISP1080
 0x1080

	)

897 
	#PCI_DEVICE_ID_QLOGIC_ISP12160
 0x1216

	)

898 
	#PCI_DEVICE_ID_QLOGIC_ISP1240
 0x1240

	)

899 
	#PCI_DEVICE_ID_QLOGIC_ISP1280
 0x1280

	)

900 
	#PCI_DEVICE_ID_QLOGIC_ISP2100
 0x2100

	)

901 
	#PCI_DEVICE_ID_QLOGIC_ISP2200
 0x2200

	)

902 
	#PCI_DEVICE_ID_QLOGIC_ISP2300
 0x2300

	)

903 
	#PCI_DEVICE_ID_QLOGIC_ISP2312
 0x2312

	)

904 
	#PCI_DEVICE_ID_QLOGIC_ISP2322
 0x2322

	)

905 
	#PCI_DEVICE_ID_QLOGIC_ISP6312
 0x6312

	)

906 
	#PCI_DEVICE_ID_QLOGIC_ISP6322
 0x6322

	)

907 
	#PCI_DEVICE_ID_QLOGIC_ISP2422
 0x2422

	)

908 
	#PCI_DEVICE_ID_QLOGIC_ISP2432
 0x2432

	)

909 
	#PCI_DEVICE_ID_QLOGIC_ISP2512
 0x2512

	)

910 
	#PCI_DEVICE_ID_QLOGIC_ISP2522
 0x2522

	)

911 
	#PCI_DEVICE_ID_QLOGIC_ISP5422
 0x5422

	)

912 
	#PCI_DEVICE_ID_QLOGIC_ISP5432
 0x5432

	)

914 
	#PCI_VENDOR_ID_CYRIX
 0x1078

	)

915 
	#PCI_DEVICE_ID_CYRIX_5510
 0x0000

	)

916 
	#PCI_DEVICE_ID_CYRIX_PCI_MASTER
 0x0001

	)

917 
	#PCI_DEVICE_ID_CYRIX_5520
 0x0002

	)

918 
	#PCI_DEVICE_ID_CYRIX_5530_LEGACY
 0x0100

	)

919 
	#PCI_DEVICE_ID_CYRIX_5530_IDE
 0x0102

	)

920 
	#PCI_DEVICE_ID_CYRIX_5530_AUDIO
 0x0103

	)

921 
	#PCI_DEVICE_ID_CYRIX_5530_VIDEO
 0x0104

	)

925 
	#PCI_VENDOR_ID_CONTAQ
 0x1080

	)

926 
	#PCI_DEVICE_ID_CONTAQ_82C693
 0xc693

	)

929 
	#PCI_VENDOR_ID_OLICOM
 0x108d

	)

930 
	#PCI_DEVICE_ID_OLICOM_OC2325
 0x0012

	)

931 
	#PCI_DEVICE_ID_OLICOM_OC2183
 0x0013

	)

932 
	#PCI_DEVICE_ID_OLICOM_OC2326
 0x0014

	)

934 
	#PCI_VENDOR_ID_SUN
 0x108e

	)

935 
	#PCI_DEVICE_ID_SUN_EBUS
 0x1000

	)

936 
	#PCI_DEVICE_ID_SUN_HAPPYMEAL
 0x1001

	)

937 
	#PCI_DEVICE_ID_SUN_RIO_EBUS
 0x1100

	)

938 
	#PCI_DEVICE_ID_SUN_RIO_GEM
 0x1101

	)

939 
	#PCI_DEVICE_ID_SUN_RIO_1394
 0x1102

	)

940 
	#PCI_DEVICE_ID_SUN_RIO_USB
 0x1103

	)

941 
	#PCI_DEVICE_ID_SUN_GEM
 0x2bad

	)

942 
	#PCI_DEVICE_ID_SUN_SIMBA
 0x5000

	)

943 
	#PCI_DEVICE_ID_SUN_PBM
 0x8000

	)

944 
	#PCI_DEVICE_ID_SUN_SCHIZO
 0x8001

	)

945 
	#PCI_DEVICE_ID_SUN_SABRE
 0xa000

	)

946 
	#PCI_DEVICE_ID_SUN_HUMMINGBIRD
 0xa001

	)

947 
	#PCI_DEVICE_ID_SUN_TOMATILLO
 0xa801

	)

948 
	#PCI_DEVICE_ID_SUN_CASSINI
 0xabba

	)

950 
	#PCI_VENDOR_ID_CMD
 0x1095

	)

951 
	#PCI_DEVICE_ID_CMD_643
 0x0643

	)

952 
	#PCI_DEVICE_ID_CMD_646
 0x0646

	)

953 
	#PCI_DEVICE_ID_CMD_648
 0x0648

	)

954 
	#PCI_DEVICE_ID_CMD_649
 0x0649

	)

956 
	#PCI_DEVICE_ID_SII_680
 0x0680

	)

957 
	#PCI_DEVICE_ID_SII_3112
 0x3112

	)

958 
	#PCI_DEVICE_ID_SII_1210SA
 0x0240

	)

961 
	#PCI_VENDOR_ID_BROOKTREE
 0x109e

	)

962 
	#PCI_DEVICE_ID_BROOKTREE_878
 0x0878

	)

963 
	#PCI_DEVICE_ID_BROOKTREE_879
 0x0879

	)

966 
	#PCI_VENDOR_ID_SGI
 0x10a9

	)

967 
	#PCI_DEVICE_ID_SGI_IOC3
 0x0003

	)

968 
	#PCI_DEVICE_ID_SGI_IOC4
 0x100a

	)

969 
	#PCI_VENDOR_ID_SGI_LITHIUM
 0x1002

	)

972 
	#PCI_VENDOR_ID_WINBOND
 0x10ad

	)

973 
	#PCI_DEVICE_ID_WINBOND_82C105
 0x0105

	)

974 
	#PCI_DEVICE_ID_WINBOND_83C553
 0x0565

	)

977 
	#PCI_VENDOR_ID_PLX
 0x10b5

	)

978 
	#PCI_DEVICE_ID_PLX_R685
 0x1030

	)

979 
	#PCI_DEVICE_ID_PLX_ROMULUS
 0x106a

	)

980 
	#PCI_DEVICE_ID_PLX_SPCOM800
 0x1076

	)

981 
	#PCI_DEVICE_ID_PLX_1077
 0x1077

	)

982 
	#PCI_DEVICE_ID_PLX_SPCOM200
 0x1103

	)

983 
	#PCI_DEVICE_ID_PLX_DJINN_ITOO
 0x1151

	)

984 
	#PCI_DEVICE_ID_PLX_R753
 0x1152

	)

985 
	#PCI_DEVICE_ID_PLX_OLITEC
 0x1187

	)

986 
	#PCI_DEVICE_ID_PLX_PCI200SYN
 0x3196

	)

987 
	#PCI_DEVICE_ID_PLX_9050
 0x9050

	)

988 
	#PCI_DEVICE_ID_PLX_9080
 0x9080

	)

989 
	#PCI_DEVICE_ID_PLX_GTEK_SERIAL2
 0xa001

	)

991 
	#PCI_VENDOR_ID_MADGE
 0x10b6

	)

992 
	#PCI_DEVICE_ID_MADGE_MK2
 0x0002

	)

994 
	#PCI_VENDOR_ID_3COM
 0x10b7

	)

995 
	#PCI_DEVICE_ID_3COM_3C985
 0x0001

	)

996 
	#PCI_DEVICE_ID_3COM_3C940
 0x1700

	)

997 
	#PCI_DEVICE_ID_3COM_3C339
 0x3390

	)

998 
	#PCI_DEVICE_ID_3COM_3C359
 0x3590

	)

999 
	#PCI_DEVICE_ID_3COM_3C940B
 0x80eb

	)

1000 
	#PCI_DEVICE_ID_3COM_3CR990
 0x9900

	)

1001 
	#PCI_DEVICE_ID_3COM_3CR990_TX_95
 0x9902

	)

1002 
	#PCI_DEVICE_ID_3COM_3CR990_TX_97
 0x9903

	)

1003 
	#PCI_DEVICE_ID_3COM_3CR990B
 0x9904

	)

1004 
	#PCI_DEVICE_ID_3COM_3CR990_FX
 0x9905

	)

1005 
	#PCI_DEVICE_ID_3COM_3CR990SVR95
 0x9908

	)

1006 
	#PCI_DEVICE_ID_3COM_3CR990SVR97
 0x9909

	)

1007 
	#PCI_DEVICE_ID_3COM_3CR990SVR
 0x990a

	)

1010 
	#PCI_VENDOR_ID_AL
 0x10b9

	)

1011 
	#PCI_DEVICE_ID_AL_M1533
 0x1533

	)

1012 
	#PCI_DEVICE_ID_AL_M1535
 0x1535

	)

1013 
	#PCI_DEVICE_ID_AL_M1541
 0x1541

	)

1014 
	#PCI_DEVICE_ID_AL_M1563
 0x1563

	)

1015 
	#PCI_DEVICE_ID_AL_M1621
 0x1621

	)

1016 
	#PCI_DEVICE_ID_AL_M1631
 0x1631

	)

1017 
	#PCI_DEVICE_ID_AL_M1632
 0x1632

	)

1018 
	#PCI_DEVICE_ID_AL_M1641
 0x1641

	)

1019 
	#PCI_DEVICE_ID_AL_M1644
 0x1644

	)

1020 
	#PCI_DEVICE_ID_AL_M1647
 0x1647

	)

1021 
	#PCI_DEVICE_ID_AL_M1651
 0x1651

	)

1022 
	#PCI_DEVICE_ID_AL_M1671
 0x1671

	)

1023 
	#PCI_DEVICE_ID_AL_M1681
 0x1681

	)

1024 
	#PCI_DEVICE_ID_AL_M1683
 0x1683

	)

1025 
	#PCI_DEVICE_ID_AL_M1689
 0x1689

	)

1026 
	#PCI_DEVICE_ID_AL_M5219
 0x5219

	)

1027 
	#PCI_DEVICE_ID_AL_M5228
 0x5228

	)

1028 
	#PCI_DEVICE_ID_AL_M5229
 0x5229

	)

1029 
	#PCI_DEVICE_ID_AL_M5451
 0x5451

	)

1030 
	#PCI_DEVICE_ID_AL_M7101
 0x7101

	)

1034 
	#PCI_VENDOR_ID_NEOMAGIC
 0x10c8

	)

1035 
	#PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO
 0x8005

	)

1036 
	#PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO
 0x8006

	)

1037 
	#PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO
 0x8016

	)

1040 
	#PCI_VENDOR_ID_TCONRAD
 0x10da

	)

1041 
	#PCI_DEVICE_ID_TCONRAD_TOKENRING
 0x0508

	)

1044 
	#PCI_VENDOR_ID_NVIDIA
 0x10de

	)

1045 
	#PCI_DEVICE_ID_NVIDIA_TNT
 0x0020

	)

1046 
	#PCI_DEVICE_ID_NVIDIA_TNT2
 0x0028

	)

1047 
	#PCI_DEVICE_ID_NVIDIA_UTNT2
 0x0029

	)

1048 
	#PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN
 0x002a

	)

1049 
	#PCI_DEVICE_ID_NVIDIA_VTNT2
 0x002C

	)

1050 
	#PCI_DEVICE_ID_NVIDIA_UVTNT2
 0x002D

	)

1051 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS
 0x0034

	)

1052 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE
 0x0035

	)

1053 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA
 0x0036

	)

1054 
	#PCI_DEVICE_ID_NVIDIA_NVENET_10
 0x0037

	)

1055 
	#PCI_DEVICE_ID_NVIDIA_NVENET_11
 0x0038

	)

1056 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2
 0x003e

	)

1057 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA
 0x0040

	)

1058 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800
 0x0041

	)

1059 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE
 0x0042

	)

1060 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x0045

	)

1061 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000
 0x004E

	)

1062 
	#PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS
 0x0052

	)

1063 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE
 0x0053

	)

1064 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA
 0x0054

	)

1065 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2
 0x0055

	)

1066 
	#PCI_DEVICE_ID_NVIDIA_NVENET_8
 0x0056

	)

1067 
	#PCI_DEVICE_ID_NVIDIA_NVENET_9
 0x0057

	)

1068 
	#PCI_DEVICE_ID_NVIDIA_CK804_AUDIO
 0x0059

	)

1069 
	#PCI_DEVICE_ID_NVIDIA_CK804_PCIE
 0x005d

	)

1070 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS
 0x0064

	)

1071 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE
 0x0065

	)

1072 
	#PCI_DEVICE_ID_NVIDIA_NVENET_2
 0x0066

	)

1073 
	#PCI_DEVICE_ID_NVIDIA_MCP2_MODEM
 0x0069

	)

1074 
	#PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO
 0x006a

	)

1075 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS
 0x0084

	)

1076 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE
 0x0085

	)

1077 
	#PCI_DEVICE_ID_NVIDIA_NVENET_4
 0x0086

	)

1078 
	#PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM
 0x0089

	)

1079 
	#PCI_DEVICE_ID_NVIDIA_CK8_AUDIO
 0x008a

	)

1080 
	#PCI_DEVICE_ID_NVIDIA_NVENET_5
 0x008c

	)

1081 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA
 0x008e

	)

1082 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT
 0x0090

	)

1083 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX
 0x0091

	)

1084 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800
 0x0098

	)

1085 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX
 0x0099

	)

1086 
	#PCI_DEVICE_ID_NVIDIA_ITNT2
 0x00A0

	)

1087 
	#PCI_DEVICE_ID_GEFORCE_6800A
 0x00c1

	)

1088 
	#PCI_DEVICE_ID_GEFORCE_6800A_LE
 0x00c2

	)

1089 
	#PCI_DEVICE_ID_GEFORCE_GO_6800
 0x00c8

	)

1090 
	#PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA
 0x00c9

	)

1091 
	#PCI_DEVICE_ID_QUADRO_FX_GO1400
 0x00cc

	)

1092 
	#PCI_DEVICE_ID_QUADRO_FX_1400
 0x00˚

	)

1093 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3
 0x00d1

	)

1094 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS
 0x00d4

	)

1095 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE
 0x00d5

	)

1096 
	#PCI_DEVICE_ID_NVIDIA_NVENET_3
 0x00d6

	)

1097 
	#PCI_DEVICE_ID_NVIDIA_MCP3_MODEM
 0x00d9

	)

1098 
	#PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO
 0x00da

	)

1099 
	#PCI_DEVICE_ID_NVIDIA_NVENET_7
 0x00df

	)

1100 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S
 0x00e1

	)

1101 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA
 0x00e3

	)

1102 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS
 0x00e4

	)

1103 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE
 0x00e5

	)

1104 
	#PCI_DEVICE_ID_NVIDIA_NVENET_6
 0x00e6

	)

1105 
	#PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO
 0x00ó

	)

1106 
	#PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2
 0x00ì

	)

1107 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1
 0x00f0

	)

1108 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1
 0x00f1

	)

1109 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2
 0x00f2

	)

1110 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1
 0x00f3

	)

1111 
	#PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT
 0x00f9

	)

1112 
	#PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280
 0x00fd

	)

1113 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR
 0x0100

	)

1114 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR
 0x0101

	)

1115 
	#PCI_DEVICE_ID_NVIDIA_QUADRO
 0x0103

	)

1116 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX
 0x0110

	)

1117 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2
 0x0111

	)

1118 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO
 0x0112

	)

1119 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR
 0x0113

	)

1120 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT
 0x0140

	)

1121 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6600
 0x0141

	)

1122 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL
 0x0145

	)

1123 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540
 0x014E

	)

1124 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200
 0x014F

	)

1125 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS
 0x0150

	)

1126 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2
 0x0151

	)

1127 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA
 0x0152

	)

1128 
	#PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO
 0x0153

	)

1129 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE
 0x0161

	)

1130 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200
 0x0164

	)

1131 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250
 0x0166

	)

1132 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1
 0x0167

	)

1133 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1
 0x0168

	)

1134 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460
 0x0170

	)

1135 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440
 0x0171

	)

1136 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420
 0x0172

	)

1137 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE
 0x0173

	)

1138 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO
 0x0174

	)

1139 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO
 0x0175

	)

1140 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32
 0x0176

	)

1141 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO
 0x0177

	)

1142 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL
 0x0178

	)

1143 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64
 0x0179

	)

1144 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_200
 0x017A

	)

1145 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL
 0x017B

	)

1146 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL
 0x017C

	)

1147 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16
 0x017D

	)

1148 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X
 0x0181

	)

1149 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X
 0x0182

	)

1150 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X
 0x0183

	)

1151 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000
 0x0185

	)

1152 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO
 0x0186

	)

1153 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO
 0x0187

	)

1154 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL
 0x0188

	)

1155 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC
 0x0189

	)

1156 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS
 0x018A

	)

1157 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL
 0x018B

	)

1158 
	#PCI_DEVICE_ID_NVIDIA_IGEFORCE2
 0x01a0

	)

1159 
	#PCI_DEVICE_ID_NVIDIA_NFORCE
 0x01a4

	)

1160 
	#PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO
 0x01b1

	)

1161 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS
 0x01b4

	)

1162 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_IDE
 0x01bc

	)

1163 
	#PCI_DEVICE_ID_NVIDIA_MCP1_MODEM
 0x01c1

	)

1164 
	#PCI_DEVICE_ID_NVIDIA_NVENET_1
 0x01c3

	)

1165 
	#PCI_DEVICE_ID_NVIDIA_NFORCE2
 0x01e0

	)

1166 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3
 0x0200

	)

1167 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_1
 0x0201

	)

1168 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE3_2
 0x0202

	)

1169 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_DDC
 0x0203

	)

1170 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B
 0x0211

	)

1171 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE
 0x0212

	)

1172 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT
 0x0215

	)

1173 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600
 0x0250

	)

1174 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400
 0x0251

	)

1175 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200
 0x0253

	)

1176 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL
 0x0258

	)

1177 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL
 0x0259

	)

1178 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL
 0x025B

	)

1179 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS
 0x0264

	)

1180 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE
 0x0265

	)

1181 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA
 0x0266

	)

1182 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2
 0x0267

	)

1183 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS
 0x0368

	)

1184 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE
 0x036E

	)

1185 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA
 0x037E

	)

1186 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2
 0x037F

	)

1187 
	#PCI_DEVICE_ID_NVIDIA_NVENET_12
 0x0268

	)

1188 
	#PCI_DEVICE_ID_NVIDIA_NVENET_13
 0x0269

	)

1189 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800
 0x0280

	)

1190 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X
 0x0281

	)

1191 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE
 0x0282

	)

1192 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO
 0x0286

	)

1193 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL
 0x0288

	)

1194 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL
 0x0289

	)

1195 
	#PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL
 0x028C

	)

1196 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA
 0x0301

	)

1197 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800
 0x0302

	)

1198 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000
 0x0308

	)

1199 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000
 0x0309

	)

1200 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA
 0x0311

	)

1201 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600
 0x0312

	)

1202 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE
 0x0314

	)

1203 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600
 0x031A

	)

1204 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650
 0x031B

	)

1205 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700
 0x031C

	)

1206 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200
 0x0320

	)

1207 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA
 0x0321

	)

1208 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1
 0x0322

	)

1209 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE
 0x0323

	)

1210 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200
 0x0324

	)

1211 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250
 0x0325

	)

1212 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500
 0x0326

	)

1213 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100
 0x0327

	)

1214 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32
 0x0328

	)

1215 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200
 0x0329

	)

1216 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI
 0x032A

	)

1217 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500
 0x032B

	)

1218 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300
 0x032C

	)

1219 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100
 0x032D

	)

1220 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA
 0x0330

	)

1221 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900
 0x0331

	)

1222 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT
 0x0332

	)

1223 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA
 0x0333

	)

1224 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT
 0x0334

	)

1225 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000
 0x0338

	)

1226 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700
 0x033F

	)

1227 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA
 0x0341

	)

1228 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700
 0x0342

	)

1229 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE
 0x0343

	)

1230 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE
 0x0344

	)

1231 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1
 0x0347

	)

1232 
	#PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2
 0x0348

	)

1233 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000
 0x034C

	)

1234 
	#PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100
 0x034E

	)

1235 
	#PCI_DEVICE_ID_NVIDIA_NVENET_14
 0x0372

	)

1236 
	#PCI_DEVICE_ID_NVIDIA_NVENET_15
 0x0373

	)

1237 
	#PCI_DEVICE_ID_NVIDIA_NVENET_16
 0x03E5

	)

1238 
	#PCI_DEVICE_ID_NVIDIA_NVENET_17
 0x03E6

	)

1239 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA
 0x03E7

	)

1240 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE
 0x03EC

	)

1241 
	#PCI_DEVICE_ID_NVIDIA_NVENET_18
 0x03EE

	)

1242 
	#PCI_DEVICE_ID_NVIDIA_NVENET_19
 0x03EF

	)

1243 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2
 0x03F6

	)

1244 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3
 0x03F7

	)

1245 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE
 0x0448

	)

1246 
	#PCI_DEVICE_ID_NVIDIA_NVENET_20
 0x0450

	)

1247 
	#PCI_DEVICE_ID_NVIDIA_NVENET_21
 0x0451

	)

1248 
	#PCI_DEVICE_ID_NVIDIA_NVENET_22
 0x0452

	)

1249 
	#PCI_DEVICE_ID_NVIDIA_NVENET_23
 0x0453

	)

1250 
	#PCI_DEVICE_ID_NVIDIA_NVENET_24
 0x054C

	)

1251 
	#PCI_DEVICE_ID_NVIDIA_NVENET_25
 0x054D

	)

1252 
	#PCI_DEVICE_ID_NVIDIA_NVENET_26
 0x054E

	)

1253 
	#PCI_DEVICE_ID_NVIDIA_NVENET_27
 0x054F

	)

1254 
	#PCI_DEVICE_ID_NVIDIA_NVENET_28
 0x07DC

	)

1255 
	#PCI_DEVICE_ID_NVIDIA_NVENET_29
 0x07DD

	)

1256 
	#PCI_DEVICE_ID_NVIDIA_NVENET_30
 0x07DE

	)

1257 
	#PCI_DEVICE_ID_NVIDIA_NVENET_31
 0x07DF

	)

1258 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP67_IDE
 0x0560

	)

1259 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP73_IDE
 0x056C

	)

1260 
	#PCI_DEVICE_ID_NVIDIA_NFORCE_MCP77_IDE
 0x0759

	)

1261 
	#PCI_DEVICE_ID_NVIDIA_NVENET_32
 0x0760

	)

1262 
	#PCI_DEVICE_ID_NVIDIA_NVENET_33
 0x0761

	)

1263 
	#PCI_DEVICE_ID_NVIDIA_NVENET_34
 0x0762

	)

1264 
	#PCI_DEVICE_ID_NVIDIA_NVENET_35
 0x0763

	)

1265 
	#PCI_DEVICE_ID_NVIDIA_NVENET_36
 0x0AB0

	)

1266 
	#PCI_DEVICE_ID_NVIDIA_NVENET_37
 0x0AB1

	)

1267 
	#PCI_DEVICE_ID_NVIDIA_NVENET_38
 0x0AB2

	)

1268 
	#PCI_DEVICE_ID_NVIDIA_NVENET_39
 0x0AB3

	)

1270 
	#PCI_VENDOR_ID_IMS
 0x10e0

	)

1271 
	#PCI_DEVICE_ID_IMS_TT128
 0x9128

	)

1272 
	#PCI_DEVICE_ID_IMS_TT3D
 0x9135

	)

1277 
	#PCI_VENDOR_ID_INTERG
 0x10ó

	)

1278 
	#PCI_DEVICE_ID_INTERG_1682
 0x1682

	)

1279 
	#PCI_DEVICE_ID_INTERG_2000
 0x2000

	)

1280 
	#PCI_DEVICE_ID_INTERG_2010
 0x2010

	)

1281 
	#PCI_DEVICE_ID_INTERG_5000
 0x5000

	)

1282 
	#PCI_DEVICE_ID_INTERG_5050
 0x5050

	)

1284 
	#PCI_VENDOR_ID_REALTEK
 0x10ec

	)

1285 
	#PCI_DEVICE_ID_REALTEK_8139
 0x8139

	)

1287 
	#PCI_VENDOR_ID_XILINX
 0x10ì

	)

1288 
	#PCI_DEVICE_ID_RME_DIGI96
 0x3fc0

	)

1289 
	#PCI_DEVICE_ID_RME_DIGI96_8
 0x3fc1

	)

1290 
	#PCI_DEVICE_ID_RME_DIGI96_8_PRO
 0x3fc2

	)

1291 
	#PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST
 0x3fc3

	)

1292 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP
 0x3fc5

	)

1293 
	#PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI
 0x3fc6

	)

1296 
	#PCI_VENDOR_ID_INIT
 0x1101

	)

1298 
	#PCI_VENDOR_ID_CREATIVE
 0x1102

	)

1299 
	#PCI_DEVICE_ID_CREATIVE_EMU10K1
 0x0002

	)

1300 
	#PCI_DEVICE_ID_CREATIVE_20K1
 0x0005

	)

1301 
	#PCI_DEVICE_ID_CREATIVE_20K2
 0x000b

	)

1302 
	#PCI_SUBDEVICE_ID_CREATIVE_SB0760
 0x0024

	)

1303 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08801
 0x0041

	)

1304 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08802
 0x0042

	)

1305 
	#PCI_SUBDEVICE_ID_CREATIVE_SB08803
 0x0043

	)

1306 
	#PCI_SUBDEVICE_ID_CREATIVE_HENDRIX
 0x6000

	)

1308 
	#PCI_VENDOR_ID_ECTIVA
 0x1102

	)

1309 
	#PCI_DEVICE_ID_ECTIVA_EV1938
 0x8938

	)

1311 
	#PCI_VENDOR_ID_TTI
 0x1103

	)

1312 
	#PCI_DEVICE_ID_TTI_HPT343
 0x0003

	)

1313 
	#PCI_DEVICE_ID_TTI_HPT366
 0x0004

	)

1314 
	#PCI_DEVICE_ID_TTI_HPT372
 0x0005

	)

1315 
	#PCI_DEVICE_ID_TTI_HPT302
 0x0006

	)

1316 
	#PCI_DEVICE_ID_TTI_HPT371
 0x0007

	)

1317 
	#PCI_DEVICE_ID_TTI_HPT374
 0x0008

	)

1318 
	#PCI_DEVICE_ID_TTI_HPT372N
 0x0009

	)

1320 
	#PCI_VENDOR_ID_VIA
 0x1106

	)

1321 
	#PCI_DEVICE_ID_VIA_8763_0
 0x0198

	)

1322 
	#PCI_DEVICE_ID_VIA_8380_0
 0x0204

	)

1323 
	#PCI_DEVICE_ID_VIA_3238_0
 0x0238

	)

1324 
	#PCI_DEVICE_ID_VIA_PT880
 0x0258

	)

1325 
	#PCI_DEVICE_ID_VIA_PT880ULTRA
 0x0308

	)

1326 
	#PCI_DEVICE_ID_VIA_PX8X0_0
 0x0259

	)

1327 
	#PCI_DEVICE_ID_VIA_3269_0
 0x0269

	)

1328 
	#PCI_DEVICE_ID_VIA_K8T800PRO_0
 0x0282

	)

1329 
	#PCI_DEVICE_ID_VIA_3296_0
 0x0296

	)

1330 
	#PCI_DEVICE_ID_VIA_8363_0
 0x0305

	)

1331 
	#PCI_DEVICE_ID_VIA_P4M800CE
 0x0314

	)

1332 
	#PCI_DEVICE_ID_VIA_VT3351
 0x0351

	)

1333 
	#PCI_DEVICE_ID_VIA_VT3364
 0x0364

	)

1334 
	#PCI_DEVICE_ID_VIA_8371_0
 0x0391

	)

1335 
	#PCI_DEVICE_ID_VIA_8501_0
 0x0501

	)

1336 
	#PCI_DEVICE_ID_VIA_82C561
 0x0561

	)

1337 
	#PCI_DEVICE_ID_VIA_82C586_1
 0x0571

	)

1338 
	#PCI_DEVICE_ID_VIA_82C576
 0x0576

	)

1339 
	#PCI_DEVICE_ID_VIA_SATA_EIDE
 0x0581

	)

1340 
	#PCI_DEVICE_ID_VIA_82C586_0
 0x0586

	)

1341 
	#PCI_DEVICE_ID_VIA_82C596
 0x0596

	)

1342 
	#PCI_DEVICE_ID_VIA_82C597_0
 0x0597

	)

1343 
	#PCI_DEVICE_ID_VIA_82C598_0
 0x0598

	)

1344 
	#PCI_DEVICE_ID_VIA_8601_0
 0x0601

	)

1345 
	#PCI_DEVICE_ID_VIA_8605_0
 0x0605

	)

1346 
	#PCI_DEVICE_ID_VIA_82C686
 0x0686

	)

1347 
	#PCI_DEVICE_ID_VIA_82C691_0
 0x0691

	)

1348 
	#PCI_DEVICE_ID_VIA_82C576_1
 0x1571

	)

1349 
	#PCI_DEVICE_ID_VIA_82C586_2
 0x3038

	)

1350 
	#PCI_DEVICE_ID_VIA_82C586_3
 0x3040

	)

1351 
	#PCI_DEVICE_ID_VIA_82C596_3
 0x3050

	)

1352 
	#PCI_DEVICE_ID_VIA_82C596B_3
 0x3051

	)

1353 
	#PCI_DEVICE_ID_VIA_82C686_4
 0x3057

	)

1354 
	#PCI_DEVICE_ID_VIA_82C686_5
 0x3058

	)

1355 
	#PCI_DEVICE_ID_VIA_8233_5
 0x3059

	)

1356 
	#PCI_DEVICE_ID_VIA_8233_0
 0x3074

	)

1357 
	#PCI_DEVICE_ID_VIA_8633_0
 0x3091

	)

1358 
	#PCI_DEVICE_ID_VIA_8367_0
 0x3099

	)

1359 
	#PCI_DEVICE_ID_VIA_8653_0
 0x3101

	)

1360 
	#PCI_DEVICE_ID_VIA_8622
 0x3102

	)

1361 
	#PCI_DEVICE_ID_VIA_8235_USB_2
 0x3104

	)

1362 
	#PCI_DEVICE_ID_VIA_8233C_0
 0x3109

	)

1363 
	#PCI_DEVICE_ID_VIA_8361
 0x3112

	)

1364 
	#PCI_DEVICE_ID_VIA_XM266
 0x3116

	)

1365 
	#PCI_DEVICE_ID_VIA_612X
 0x3119

	)

1366 
	#PCI_DEVICE_ID_VIA_862X_0
 0x3123

	)

1367 
	#PCI_DEVICE_ID_VIA_8753_0
 0x3128

	)

1368 
	#PCI_DEVICE_ID_VIA_8233A
 0x3147

	)

1369 
	#PCI_DEVICE_ID_VIA_8703_51_0
 0x3148

	)

1370 
	#PCI_DEVICE_ID_VIA_8237_SATA
 0x3149

	)

1371 
	#PCI_DEVICE_ID_VIA_XN266
 0x3156

	)

1372 
	#PCI_DEVICE_ID_VIA_6410
 0x3164

	)

1373 
	#PCI_DEVICE_ID_VIA_8754C_0
 0x3168

	)

1374 
	#PCI_DEVICE_ID_VIA_8235
 0x3177

	)

1375 
	#PCI_DEVICE_ID_VIA_8385_0
 0x3188

	)

1376 
	#PCI_DEVICE_ID_VIA_8377_0
 0x3189

	)

1377 
	#PCI_DEVICE_ID_VIA_8378_0
 0x3205

	)

1378 
	#PCI_DEVICE_ID_VIA_8783_0
 0x3208

	)

1379 
	#PCI_DEVICE_ID_VIA_8237
 0x3227

	)

1380 
	#PCI_DEVICE_ID_VIA_8251
 0x3287

	)

1381 
	#PCI_DEVICE_ID_VIA_8237A
 0x3337

	)

1382 
	#PCI_DEVICE_ID_VIA_8237S
 0x3372

	)

1383 
	#PCI_DEVICE_ID_VIA_8231
 0x8231

	)

1384 
	#PCI_DEVICE_ID_VIA_8231_4
 0x8235

	)

1385 
	#PCI_DEVICE_ID_VIA_8365_1
 0x8305

	)

1386 
	#PCI_DEVICE_ID_VIA_5324
 0x5324

	)

1387 
	#PCI_DEVICE_ID_VIA_CX700
 0x8324

	)

1388 
	#PCI_DEVICE_ID_VIA_VX800
 0x8353

	)

1389 
	#PCI_DEVICE_ID_VIA_8371_1
 0x8391

	)

1390 
	#PCI_DEVICE_ID_VIA_82C598_1
 0x8598

	)

1391 
	#PCI_DEVICE_ID_VIA_838X_1
 0xB188

	)

1392 
	#PCI_DEVICE_ID_VIA_83_87XX_1
 0xB198

	)

1394 
	#PCI_VENDOR_ID_SIEMENS
 0x110A

	)

1395 
	#PCI_DEVICE_ID_SIEMENS_DSCC4
 0x2102

	)

1398 
	#PCI_VENDOR_ID_VORTEX
 0x1119

	)

1399 
	#PCI_DEVICE_ID_VORTEX_GDT60x0
 0x0000

	)

1400 
	#PCI_DEVICE_ID_VORTEX_GDT6000B
 0x0001

	)

1401 
	#PCI_DEVICE_ID_VORTEX_GDT6x10
 0x0002

	)

1402 
	#PCI_DEVICE_ID_VORTEX_GDT6x20
 0x0003

	)

1403 
	#PCI_DEVICE_ID_VORTEX_GDT6530
 0x0004

	)

1404 
	#PCI_DEVICE_ID_VORTEX_GDT6550
 0x0005

	)

1405 
	#PCI_DEVICE_ID_VORTEX_GDT6x17
 0x0006

	)

1406 
	#PCI_DEVICE_ID_VORTEX_GDT6x27
 0x0007

	)

1407 
	#PCI_DEVICE_ID_VORTEX_GDT6537
 0x0008

	)

1408 
	#PCI_DEVICE_ID_VORTEX_GDT6557
 0x0009

	)

1409 
	#PCI_DEVICE_ID_VORTEX_GDT6x15
 0x000a

	)

1410 
	#PCI_DEVICE_ID_VORTEX_GDT6x25
 0x000b

	)

1411 
	#PCI_DEVICE_ID_VORTEX_GDT6535
 0x000c

	)

1412 
	#PCI_DEVICE_ID_VORTEX_GDT6555
 0x000d

	)

1413 
	#PCI_DEVICE_ID_VORTEX_GDT6x17RP
 0x0100

	)

1414 
	#PCI_DEVICE_ID_VORTEX_GDT6x27RP
 0x0101

	)

1415 
	#PCI_DEVICE_ID_VORTEX_GDT6537RP
 0x0102

	)

1416 
	#PCI_DEVICE_ID_VORTEX_GDT6557RP
 0x0103

	)

1417 
	#PCI_DEVICE_ID_VORTEX_GDT6x11RP
 0x0104

	)

1418 
	#PCI_DEVICE_ID_VORTEX_GDT6x21RP
 0x0105

	)

1420 
	#PCI_VENDOR_ID_EF
 0x111a

	)

1421 
	#PCI_DEVICE_ID_EF_ATM_FPGA
 0x0000

	)

1422 
	#PCI_DEVICE_ID_EF_ATM_ASIC
 0x0002

	)

1423 
	#PCI_VENDOR_ID_EF_ATM_LANAI2
 0x0003

	)

1424 
	#PCI_VENDOR_ID_EF_ATM_LANAIHB
 0x0005

	)

1426 
	#PCI_VENDOR_ID_IDT
 0x111d

	)

1427 
	#PCI_DEVICE_ID_IDT_IDT77201
 0x0001

	)

1429 
	#PCI_VENDOR_ID_FORE
 0x1127

	)

1430 
	#PCI_DEVICE_ID_FORE_PCA200E
 0x0300

	)

1433 
	#PCI_VENDOR_ID_PHILIPS
 0x1131

	)

1434 
	#PCI_DEVICE_ID_PHILIPS_SAA7146
 0x7146

	)

1435 
	#PCI_DEVICE_ID_PHILIPS_SAA9730
 0x9730

	)

1437 
	#PCI_VENDOR_ID_EICON
 0x1133

	)

1438 
	#PCI_DEVICE_ID_EICON_DIVA20
 0xe002

	)

1439 
	#PCI_DEVICE_ID_EICON_DIVA20_U
 0xe004

	)

1440 
	#PCI_DEVICE_ID_EICON_DIVA201
 0xe005

	)

1441 
	#PCI_DEVICE_ID_EICON_DIVA202
 0xe00b

	)

1442 
	#PCI_DEVICE_ID_EICON_MAESTRA
 0xe010

	)

1443 
	#PCI_DEVICE_ID_EICON_MAESTRAQ
 0xe012

	)

1444 
	#PCI_DEVICE_ID_EICON_MAESTRAQ_U
 0xe013

	)

1445 
	#PCI_DEVICE_ID_EICON_MAESTRAP
 0xe014

	)

1447 
	#PCI_VENDOR_ID_CISCO
 0x1137

	)

1449 
	#PCI_VENDOR_ID_ZIATECH
 0x1138

	)

1450 
	#PCI_DEVICE_ID_ZIATECH_5550_HC
 0x5550

	)

1454 
	#PCI_VENDOR_ID_SYSKONNECT
 0x1148

	)

1455 
	#PCI_DEVICE_ID_SYSKONNECT_TR
 0x4200

	)

1456 
	#PCI_DEVICE_ID_SYSKONNECT_GE
 0x4300

	)

1457 
	#PCI_DEVICE_ID_SYSKONNECT_YU
 0x4320

	)

1458 
	#PCI_DEVICE_ID_SYSKONNECT_9DXX
 0x4400

	)

1459 
	#PCI_DEVICE_ID_SYSKONNECT_9MXX
 0x4500

	)

1462 
	#PCI_VENDOR_ID_DIGI
 0x114f

	)

1463 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_E
 0x0070

	)

1464 
	#PCI_DEVICE_ID_DIGI_DF_M_E
 0x0071

	)

1465 
	#PCI_DEVICE_ID_DIGI_DF_M_IOM2_A
 0x0072

	)

1466 
	#PCI_DEVICE_ID_DIGI_DF_M_A
 0x0073

	)

1467 
	#PCI_DEVICE_ID_NEO_2DB9
 0x00C8

	)

1468 
	#PCI_DEVICE_ID_NEO_2DB9PRI
 0x00C9

	)

1469 
	#PCI_DEVICE_ID_NEO_2RJ45
 0x00CA

	)

1470 
	#PCI_DEVICE_ID_NEO_2RJ45PRI
 0x00CB

	)

1471 
	#PCIE_DEVICE_ID_NEO_4_IBM
 0x00F4

	)

1472 
	#PCIE_DEVICE_ID_NEO_2_OX_IBM
 0x00F6

	)

1474 
	#PCI_VENDOR_ID_XIRCOM
 0x115d

	)

1475 
	#PCI_DEVICE_ID_XIRCOM_RBM56G
 0x0101

	)

1476 
	#PCI_DEVICE_ID_XIRCOM_X3201_MDM
 0x0103

	)

1479 
	#PCI_VENDOR_ID_SERVERWORKS
 0x1166

	)

1480 
	#PCI_DEVICE_ID_SERVERWORKS_HE
 0x0008

	)

1481 
	#PCI_DEVICE_ID_SERVERWORKS_LE
 0x0009

	)

1482 
	#PCI_DEVICE_ID_SERVERWORKS_GCNB_LE
 0x0017

	)

1483 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB
 0x0036

	)

1484 
	#PCI_DEVICE_ID_SERVERWORKS_EPB
 0x0103

	)

1485 
	#PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE
 0x0132

	)

1486 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4
 0x0200

	)

1487 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5
 0x0201

	)

1488 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6
 0x0203

	)

1489 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000SB
 0x0205

	)

1490 
	#PCI_DEVICE_ID_SERVERWORKS_OSB4IDE
 0x0211

	)

1491 
	#PCI_DEVICE_ID_SERVERWORKS_CSB5IDE
 0x0212

	)

1492 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE
 0x0213

	)

1493 
	#PCI_DEVICE_ID_SERVERWORKS_HT1000IDE
 0x0214

	)

1494 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2
 0x0217

	)

1495 
	#PCI_DEVICE_ID_SERVERWORKS_CSB6LPC
 0x0227

	)

1496 
	#PCI_DEVICE_ID_SERVERWORKS_HT1100LD
 0x0408

	)

1498 
	#PCI_VENDOR_ID_SBE
 0x1176

	)

1499 
	#PCI_DEVICE_ID_SBE_WANXL100
 0x0301

	)

1500 
	#PCI_DEVICE_ID_SBE_WANXL200
 0x0302

	)

1501 
	#PCI_DEVICE_ID_SBE_WANXL400
 0x0104

	)

1503 
	#PCI_VENDOR_ID_TOSHIBA
 0x1179

	)

1504 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO
 0x0102

	)

1505 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_1
 0x0103

	)

1506 
	#PCI_DEVICE_ID_TOSHIBA_PICCOLO_2
 0x0105

	)

1507 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC95
 0x060a

	)

1508 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC97
 0x060f

	)

1509 
	#PCI_DEVICE_ID_TOSHIBA_TOPIC100
 0x0617

	)

1511 
	#PCI_VENDOR_ID_TOSHIBA_2
 0x102f

	)

1512 
	#PCI_DEVICE_ID_TOSHIBA_TC35815CF
 0x0030

	)

1513 
	#PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC
 0x0108

	)

1514 
	#PCI_DEVICE_ID_TOSHIBA_SPIDER_NET
 0x01b3

	)

1516 
	#PCI_VENDOR_ID_ATTO
 0x117c

	)

1517 
	#PCI_VENDOR_ID_RICOH
 0x1180

	)

1518 
	#PCI_DEVICE_ID_RICOH_RL5C465
 0x0465

	)

1519 
	#PCI_DEVICE_ID_RICOH_RL5C466
 0x0466

	)

1520 
	#PCI_DEVICE_ID_RICOH_RL5C475
 0x0475

	)

1521 
	#PCI_DEVICE_ID_RICOH_RL5C476
 0x0476

	)

1522 
	#PCI_DEVICE_ID_RICOH_RL5C478
 0x0478

	)

1523 
	#PCI_DEVICE_ID_RICOH_R5C822
 0x0822

	)

1525 
	#PCI_VENDOR_ID_DLINK
 0x1186

	)

1526 
	#PCI_DEVICE_ID_DLINK_DGE510T
 0x4c00

	)

1528 
	#PCI_VENDOR_ID_ARTOP
 0x1191

	)

1529 
	#PCI_DEVICE_ID_ARTOP_ATP850UF
 0x0005

	)

1530 
	#PCI_DEVICE_ID_ARTOP_ATP860
 0x0006

	)

1531 
	#PCI_DEVICE_ID_ARTOP_ATP860R
 0x0007

	)

1532 
	#PCI_DEVICE_ID_ARTOP_ATP865
 0x0008

	)

1533 
	#PCI_DEVICE_ID_ARTOP_ATP865R
 0x0009

	)

1534 
	#PCI_DEVICE_ID_ARTOP_AEC7610
 0x8002

	)

1535 
	#PCI_DEVICE_ID_ARTOP_AEC7612UW
 0x8010

	)

1536 
	#PCI_DEVICE_ID_ARTOP_AEC7612U
 0x8020

	)

1537 
	#PCI_DEVICE_ID_ARTOP_AEC7612S
 0x8030

	)

1538 
	#PCI_DEVICE_ID_ARTOP_AEC7612D
 0x8040

	)

1539 
	#PCI_DEVICE_ID_ARTOP_AEC7612SUW
 0x8050

	)

1540 
	#PCI_DEVICE_ID_ARTOP_8060
 0x8060

	)

1542 
	#PCI_VENDOR_ID_ZEITNET
 0x1193

	)

1543 
	#PCI_DEVICE_ID_ZEITNET_1221
 0x0001

	)

1544 
	#PCI_DEVICE_ID_ZEITNET_1225
 0x0002

	)

1547 
	#PCI_VENDOR_ID_FUJITSU_ME
 0x119e

	)

1548 
	#PCI_DEVICE_ID_FUJITSU_FS155
 0x0001

	)

1549 
	#PCI_DEVICE_ID_FUJITSU_FS50
 0x0003

	)

1551 
	#PCI_SUBVENDOR_ID_KEYSPAN
 0x11a9

	)

1552 
	#PCI_SUBDEVICE_ID_KEYSPAN_SX2
 0x5334

	)

1554 
	#PCI_VENDOR_ID_MARVELL
 0x11ab

	)

1555 
	#PCI_DEVICE_ID_MARVELL_GT64111
 0x4146

	)

1556 
	#PCI_DEVICE_ID_MARVELL_GT64260
 0x6430

	)

1557 
	#PCI_DEVICE_ID_MARVELL_MV64360
 0x6460

	)

1558 
	#PCI_DEVICE_ID_MARVELL_MV64460
 0x6480

	)

1559 
	#PCI_DEVICE_ID_MARVELL_GT96100
 0x9652

	)

1560 
	#PCI_DEVICE_ID_MARVELL_GT96100A
 0x9653

	)

1563 
	#PCI_VENDOR_ID_V3
 0x11b0

	)

1564 
	#PCI_DEVICE_ID_V3_V960
 0x0001

	)

1565 
	#PCI_DEVICE_ID_V3_V351
 0x0002

	)

1568 
	#PCI_VENDOR_ID_ATT
 0x11c1

	)

1569 
	#PCI_DEVICE_ID_ATT_VENUS_MODEM
 0x480

	)

1572 
	#PCI_VENDOR_ID_SPECIALIX
 0x11cb

	)

1573 
	#PCI_DEVICE_ID_SPECIALIX_IO8
 0x2000

	)

1574 
	#PCI_DEVICE_ID_SPECIALIX_RIO
 0x8000

	)

1575 
	#PCI_SUBDEVICE_ID_SPECIALIX_SPEED4
 0xa004

	)

1578 
	#PCI_VENDOR_ID_ANALOG_DEVICES
 0x11d4

	)

1579 
	#PCI_DEVICE_ID_AD1889JS
 0x1889

	)

1582 
	#PCI_DEVICE_ID_SEGA_BBA
 0x1234

	)

1584 
	#PCI_VENDOR_ID_ZORAN
 0x11de

	)

1585 
	#PCI_DEVICE_ID_ZORAN_36057
 0x6057

	)

1586 
	#PCI_DEVICE_ID_ZORAN_36120
 0x6120

	)

1589 
	#PCI_VENDOR_ID_COMPEX
 0x11f6

	)

1590 
	#PCI_DEVICE_ID_COMPEX_ENET100VG4
 0x0112

	)

1592 
	#PCI_VENDOR_ID_RP
 0x11„

	)

1593 
	#PCI_DEVICE_ID_RP32INTF
 0x0001

	)

1594 
	#PCI_DEVICE_ID_RP8INTF
 0x0002

	)

1595 
	#PCI_DEVICE_ID_RP16INTF
 0x0003

	)

1596 
	#PCI_DEVICE_ID_RP4QUAD
 0x0004

	)

1597 
	#PCI_DEVICE_ID_RP8OCTA
 0x0005

	)

1598 
	#PCI_DEVICE_ID_RP8J
 0x0006

	)

1599 
	#PCI_DEVICE_ID_RP4J
 0x0007

	)

1600 
	#PCI_DEVICE_ID_RP8SNI
 0x0008

	)

1601 
	#PCI_DEVICE_ID_RP16SNI
 0x0009

	)

1602 
	#PCI_DEVICE_ID_RPP4
 0x000A

	)

1603 
	#PCI_DEVICE_ID_RPP8
 0x000B

	)

1604 
	#PCI_DEVICE_ID_RP4M
 0x000D

	)

1605 
	#PCI_DEVICE_ID_RP2_232
 0x000E

	)

1606 
	#PCI_DEVICE_ID_RP2_422
 0x000F

	)

1607 
	#PCI_DEVICE_ID_URP32INTF
 0x0801

	)

1608 
	#PCI_DEVICE_ID_URP8INTF
 0x0802

	)

1609 
	#PCI_DEVICE_ID_URP16INTF
 0x0803

	)

1610 
	#PCI_DEVICE_ID_URP8OCTA
 0x0805

	)

1611 
	#PCI_DEVICE_ID_UPCI_RM3_8PORT
 0x080C

	)

1612 
	#PCI_DEVICE_ID_UPCI_RM3_4PORT
 0x080D

	)

1613 
	#PCI_DEVICE_ID_CRP16INTF
 0x0903

	)

1615 
	#PCI_VENDOR_ID_CYCLADES
 0x120e

	)

1616 
	#PCI_DEVICE_ID_CYCLOM_Y_Lo
 0x0100

	)

1617 
	#PCI_DEVICE_ID_CYCLOM_Y_Hi
 0x0101

	)

1618 
	#PCI_DEVICE_ID_CYCLOM_4Y_Lo
 0x0102

	)

1619 
	#PCI_DEVICE_ID_CYCLOM_4Y_Hi
 0x0103

	)

1620 
	#PCI_DEVICE_ID_CYCLOM_8Y_Lo
 0x0104

	)

1621 
	#PCI_DEVICE_ID_CYCLOM_8Y_Hi
 0x0105

	)

1622 
	#PCI_DEVICE_ID_CYCLOM_Z_Lo
 0x0200

	)

1623 
	#PCI_DEVICE_ID_CYCLOM_Z_Hi
 0x0201

	)

1624 
	#PCI_DEVICE_ID_PC300_RX_2
 0x0300

	)

1625 
	#PCI_DEVICE_ID_PC300_RX_1
 0x0301

	)

1626 
	#PCI_DEVICE_ID_PC300_TE_2
 0x0310

	)

1627 
	#PCI_DEVICE_ID_PC300_TE_1
 0x0311

	)

1628 
	#PCI_DEVICE_ID_PC300_TE_M_2
 0x0320

	)

1629 
	#PCI_DEVICE_ID_PC300_TE_M_1
 0x0321

	)

1631 
	#PCI_VENDOR_ID_ESSENTIAL
 0x120f

	)

1632 
	#PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER
 0x0001

	)

1634 
	#PCI_VENDOR_ID_O2
 0x1217

	)

1635 
	#PCI_DEVICE_ID_O2_6729
 0x6729

	)

1636 
	#PCI_DEVICE_ID_O2_6730
 0x673a

	)

1637 
	#PCI_DEVICE_ID_O2_6832
 0x6832

	)

1638 
	#PCI_DEVICE_ID_O2_6836
 0x6836

	)

1639 
	#PCI_DEVICE_ID_O2_8120
 0x8120

	)

1640 
	#PCI_DEVICE_ID_O2_8220
 0x8220

	)

1641 
	#PCI_DEVICE_ID_O2_8221
 0x8221

	)

1642 
	#PCI_DEVICE_ID_O2_8320
 0x8320

	)

1643 
	#PCI_DEVICE_ID_O2_8321
 0x8321

	)

1645 
	#PCI_VENDOR_ID_3DFX
 0x121a

	)

1646 
	#PCI_DEVICE_ID_3DFX_VOODOO
 0x0001

	)

1647 
	#PCI_DEVICE_ID_3DFX_VOODOO2
 0x0002

	)

1648 
	#PCI_DEVICE_ID_3DFX_BANSHEE
 0x0003

	)

1649 
	#PCI_DEVICE_ID_3DFX_VOODOO3
 0x0005

	)

1650 
	#PCI_DEVICE_ID_3DFX_VOODOO5
 0x0009

	)

1654 
	#PCI_VENDOR_ID_AVM
 0x1244

	)

1655 
	#PCI_DEVICE_ID_AVM_B1
 0x0700

	)

1656 
	#PCI_DEVICE_ID_AVM_C4
 0x0800

	)

1657 
	#PCI_DEVICE_ID_AVM_A1
 0x0a00

	)

1658 
	#PCI_DEVICE_ID_AVM_A1_V2
 0x0e00

	)

1659 
	#PCI_DEVICE_ID_AVM_C2
 0x1100

	)

1660 
	#PCI_DEVICE_ID_AVM_T1
 0x1200

	)

1663 
	#PCI_VENDOR_ID_STALLION
 0x124d

	)

1666 
	#PCI_VENDOR_ID_AT
 0x1259

	)

1667 
	#PCI_SUBDEVICE_ID_AT_2700FX
 0x2701

	)

1668 
	#PCI_SUBDEVICE_ID_AT_2701FX
 0x2703

	)

1670 
	#PCI_VENDOR_ID_ESS
 0x125d

	)

1671 
	#PCI_DEVICE_ID_ESS_ESS1968
 0x1968

	)

1672 
	#PCI_DEVICE_ID_ESS_ESS1978
 0x1978

	)

1673 
	#PCI_DEVICE_ID_ESS_ALLEGRO_1
 0x1988

	)

1674 
	#PCI_DEVICE_ID_ESS_ALLEGRO
 0x1989

	)

1675 
	#PCI_DEVICE_ID_ESS_CANYON3D_2LE
 0x1990

	)

1676 
	#PCI_DEVICE_ID_ESS_CANYON3D_2
 0x1992

	)

1677 
	#PCI_DEVICE_ID_ESS_MAESTRO3
 0x1998

	)

1678 
	#PCI_DEVICE_ID_ESS_MAESTRO3_1
 0x1999

	)

1679 
	#PCI_DEVICE_ID_ESS_MAESTRO3_HW
 0x199a

	)

1680 
	#PCI_DEVICE_ID_ESS_MAESTRO3_2
 0x199b

	)

1682 
	#PCI_VENDOR_ID_SATSAGEM
 0x1267

	)

1683 
	#PCI_DEVICE_ID_SATSAGEM_NICCY
 0x1016

	)

1686 
	#PCI_VENDOR_ID_ENSONIQ
 0x1274

	)

1687 
	#PCI_DEVICE_ID_ENSONIQ_CT5880
 0x5880

	)

1688 
	#PCI_DEVICE_ID_ENSONIQ_ES1370
 0x5000

	)

1689 
	#PCI_DEVICE_ID_ENSONIQ_ES1371
 0x1371

	)

1691 
	#PCI_VENDOR_ID_TRANSMETA
 0x1279

	)

1692 
	#PCI_DEVICE_ID_EFFICEON
 0x0060

	)

1694 
	#PCI_VENDOR_ID_ROCKWELL
 0x127A

	)

1696 
	#PCI_VENDOR_ID_ITE
 0x1283

	)

1697 
	#PCI_DEVICE_ID_ITE_IT8172G
 0x8172

	)

1698 
	#PCI_DEVICE_ID_ITE_IT8172G_AUDIO
 0x0801

	)

1699 
	#PCI_DEVICE_ID_ITE_8211
 0x8211

	)

1700 
	#PCI_DEVICE_ID_ITE_8212
 0x8212

	)

1701 
	#PCI_DEVICE_ID_ITE_8213
 0x8213

	)

1702 
	#PCI_DEVICE_ID_ITE_8872
 0x8872

	)

1703 
	#PCI_DEVICE_ID_ITE_IT8330G_0
 0xe886

	)

1706 
	#PCI_DEVICE_ID_ESS_ESS0100
 0x0100

	)

1708 
	#PCI_VENDOR_ID_ALTEON
 0x12´

	)

1711 
	#PCI_SUBVENDOR_ID_CONNECT_TECH
 0x12c4

	)

1712 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232
 0x0001

	)

1713 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232
 0x0002

	)

1714 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232
 0x0003

	)

1715 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485
 0x0004

	)

1716 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4
 0x0005

	)

1717 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485
 0x0006

	)

1718 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2
 0x0007

	)

1719 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485
 0x0008

	)

1720 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6
 0x0009

	)

1721 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1
 0x000A

	)

1722 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1
 0x000B

	)

1723 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ
 0x000C

	)

1724 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM
 0x000D

	)

1725 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI
 0x0100

	)

1726 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2
 0x0201

	)

1727 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4
 0x0202

	)

1728 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232
 0x0300

	)

1729 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232
 0x0301

	)

1730 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232
 0x0302

	)

1731 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1
 0x0310

	)

1732 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2
 0x0311

	)

1733 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4
 0x0312

	)

1734 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2
 0x0320

	)

1735 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4
 0x0321

	)

1736 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8
 0x0322

	)

1737 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485
 0x0330

	)

1738 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485
 0x0331

	)

1739 
	#PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485
 0x0332

	)

1742 
	#PCI_VENDOR_ID_NVIDIA_SGS
 0x12d2

	)

1743 
	#PCI_DEVICE_ID_NVIDIA_SGS_RIVA128
 0x0018

	)

1745 
	#PCI_SUBVENDOR_ID_CHASE_PCIFAST
 0x12E0

	)

1746 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST4
 0x0031

	)

1747 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST8
 0x0021

	)

1748 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16
 0x0011

	)

1749 
	#PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC
 0x0041

	)

1750 
	#PCI_SUBVENDOR_ID_CHASE_PCIRAS
 0x124D

	)

1751 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS4
 0xF001

	)

1752 
	#PCI_SUBDEVICE_ID_CHASE_PCIRAS8
 0xF010

	)

1754 
	#PCI_VENDOR_ID_AUREAL
 0x12eb

	)

1755 
	#PCI_DEVICE_ID_AUREAL_VORTEX_1
 0x0001

	)

1756 
	#PCI_DEVICE_ID_AUREAL_VORTEX_2
 0x0002

	)

1757 
	#PCI_DEVICE_ID_AUREAL_ADVANTAGE
 0x0003

	)

1759 
	#PCI_VENDOR_ID_ELECTRONICDESIGNGMBH
 0x12f8

	)

1760 
	#PCI_DEVICE_ID_LML_33R10
 0x8a02

	)

1763 
	#PCI_VENDOR_ID_SIIG
 0x131f

	)

1764 
	#PCI_SUBVENDOR_ID_SIIG
 0x131f

	)

1765 
	#PCI_DEVICE_ID_SIIG_1S_10x_550
 0x1000

	)

1766 
	#PCI_DEVICE_ID_SIIG_1S_10x_650
 0x1001

	)

1767 
	#PCI_DEVICE_ID_SIIG_1S_10x_850
 0x1002

	)

1768 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_550
 0x1010

	)

1769 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_650
 0x1011

	)

1770 
	#PCI_DEVICE_ID_SIIG_1S1P_10x_850
 0x1012

	)

1771 
	#PCI_DEVICE_ID_SIIG_1P_10x
 0x1020

	)

1772 
	#PCI_DEVICE_ID_SIIG_2P_10x
 0x1021

	)

1773 
	#PCI_DEVICE_ID_SIIG_2S_10x_550
 0x1030

	)

1774 
	#PCI_DEVICE_ID_SIIG_2S_10x_650
 0x1031

	)

1775 
	#PCI_DEVICE_ID_SIIG_2S_10x_850
 0x1032

	)

1776 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_550
 0x1034

	)

1777 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_650
 0x1035

	)

1778 
	#PCI_DEVICE_ID_SIIG_2S1P_10x_850
 0x1036

	)

1779 
	#PCI_DEVICE_ID_SIIG_4S_10x_550
 0x1050

	)

1780 
	#PCI_DEVICE_ID_SIIG_4S_10x_650
 0x1051

	)

1781 
	#PCI_DEVICE_ID_SIIG_4S_10x_850
 0x1052

	)

1782 
	#PCI_DEVICE_ID_SIIG_1S_20x_550
 0x2000

	)

1783 
	#PCI_DEVICE_ID_SIIG_1S_20x_650
 0x2001

	)

1784 
	#PCI_DEVICE_ID_SIIG_1S_20x_850
 0x2002

	)

1785 
	#PCI_DEVICE_ID_SIIG_1P_20x
 0x2020

	)

1786 
	#PCI_DEVICE_ID_SIIG_2P_20x
 0x2021

	)

1787 
	#PCI_DEVICE_ID_SIIG_2S_20x_550
 0x2030

	)

1788 
	#PCI_DEVICE_ID_SIIG_2S_20x_650
 0x2031

	)

1789 
	#PCI_DEVICE_ID_SIIG_2S_20x_850
 0x2032

	)

1790 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_550
 0x2040

	)

1791 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_650
 0x2041

	)

1792 
	#PCI_DEVICE_ID_SIIG_2P1S_20x_850
 0x2042

	)

1793 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_550
 0x2010

	)

1794 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_650
 0x2011

	)

1795 
	#PCI_DEVICE_ID_SIIG_1S1P_20x_850
 0x2012

	)

1796 
	#PCI_DEVICE_ID_SIIG_4S_20x_550
 0x2050

	)

1797 
	#PCI_DEVICE_ID_SIIG_4S_20x_650
 0x2051

	)

1798 
	#PCI_DEVICE_ID_SIIG_4S_20x_850
 0x2052

	)

1799 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_550
 0x2060

	)

1800 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_650
 0x2061

	)

1801 
	#PCI_DEVICE_ID_SIIG_2S1P_20x_850
 0x2062

	)

1802 
	#PCI_DEVICE_ID_SIIG_8S_20x_550
 0x2080

	)

1803 
	#PCI_DEVICE_ID_SIIG_8S_20x_650
 0x2081

	)

1804 
	#PCI_DEVICE_ID_SIIG_8S_20x_850
 0x2082

	)

1805 
	#PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL
 0x2050

	)

1807 
	#PCI_VENDOR_ID_RADISYS
 0x1331

	)

1809 
	#PCI_VENDOR_ID_DOMEX
 0x134a

	)

1810 
	#PCI_DEVICE_ID_DOMEX_DMX3191D
 0x0001

	)

1812 
	#PCI_VENDOR_ID_INTASHIELD
 0x135a

	)

1813 
	#PCI_DEVICE_ID_INTASHIELD_IS200
 0x0d80

	)

1815 
	#PCI_VENDOR_ID_QUATECH
 0x135C

	)

1816 
	#PCI_DEVICE_ID_QUATECH_QSC100
 0x0010

	)

1817 
	#PCI_DEVICE_ID_QUATECH_DSC100
 0x0020

	)

1818 
	#PCI_DEVICE_ID_QUATECH_ESC100D
 0x0050

	)

1819 
	#PCI_DEVICE_ID_QUATECH_ESC100M
 0x0060

	)

1821 
	#PCI_VENDOR_ID_SEALEVEL
 0x135e

	)

1822 
	#PCI_DEVICE_ID_SEALEVEL_U530
 0x7101

	)

1823 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM2
 0x7201

	)

1824 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM422
 0x7402

	)

1825 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM232
 0x7202

	)

1826 
	#PCI_DEVICE_ID_SEALEVEL_COMM4
 0x7401

	)

1827 
	#PCI_DEVICE_ID_SEALEVEL_COMM8
 0x7801

	)

1828 
	#PCI_DEVICE_ID_SEALEVEL_UCOMM8
 0x7804

	)

1830 
	#PCI_VENDOR_ID_HYPERCOPE
 0x1365

	)

1831 
	#PCI_DEVICE_ID_HYPERCOPE_PLX
 0x9050

	)

1832 
	#PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO
 0x0104

	)

1833 
	#PCI_SUBDEVICE_ID_HYPERCOPE_ERGO
 0x0106

	)

1834 
	#PCI_SUBDEVICE_ID_HYPERCOPE_METRO
 0x0107

	)

1835 
	#PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2
 0x0108

	)

1837 
	#PCI_VENDOR_ID_KAWASAKI
 0x136b

	)

1838 
	#PCI_DEVICE_ID_MCHIP_KL5A72002
 0xff01

	)

1840 
	#PCI_VENDOR_ID_CNET
 0x1371

	)

1841 
	#PCI_DEVICE_ID_CNET_GIGACARD
 0x434e

	)

1843 
	#PCI_VENDOR_ID_LMC
 0x1376

	)

1844 
	#PCI_DEVICE_ID_LMC_HSSI
 0x0003

	)

1845 
	#PCI_DEVICE_ID_LMC_DS3
 0x0004

	)

1846 
	#PCI_DEVICE_ID_LMC_SSI
 0x0005

	)

1847 
	#PCI_DEVICE_ID_LMC_T1
 0x0006

	)

1850 
	#PCI_VENDOR_ID_NETGEAR
 0x1385

	)

1851 
	#PCI_DEVICE_ID_NETGEAR_GA620
 0x620a

	)

1853 
	#PCI_VENDOR_ID_APPLICOM
 0x1389

	)

1854 
	#PCI_DEVICE_ID_APPLICOM_PCIGENERIC
 0x0001

	)

1855 
	#PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN
 0x0002

	)

1856 
	#PCI_DEVICE_ID_APPLICOM_PCI2000PFB
 0x0003

	)

1858 
	#PCI_VENDOR_ID_MOXA
 0x1393

	)

1859 
	#PCI_DEVICE_ID_MOXA_RC7000
 0x0001

	)

1860 
	#PCI_DEVICE_ID_MOXA_CP102
 0x1020

	)

1861 
	#PCI_DEVICE_ID_MOXA_CP102UL
 0x1021

	)

1862 
	#PCI_DEVICE_ID_MOXA_CP102U
 0x1022

	)

1863 
	#PCI_DEVICE_ID_MOXA_C104
 0x1040

	)

1864 
	#PCI_DEVICE_ID_MOXA_CP104U
 0x1041

	)

1865 
	#PCI_DEVICE_ID_MOXA_CP104JU
 0x1042

	)

1866 
	#PCI_DEVICE_ID_MOXA_CT114
 0x1140

	)

1867 
	#PCI_DEVICE_ID_MOXA_CP114
 0x1141

	)

1868 
	#PCI_DEVICE_ID_MOXA_CP118U
 0x1180

	)

1869 
	#PCI_DEVICE_ID_MOXA_CP132
 0x1320

	)

1870 
	#PCI_DEVICE_ID_MOXA_CP132U
 0x1321

	)

1871 
	#PCI_DEVICE_ID_MOXA_CP134U
 0x1340

	)

1872 
	#PCI_DEVICE_ID_MOXA_C168
 0x1680

	)

1873 
	#PCI_DEVICE_ID_MOXA_CP168U
 0x1681

	)

1875 
	#PCI_VENDOR_ID_CCD
 0x1397

	)

1876 
	#PCI_DEVICE_ID_CCD_2BD0
 0x2bd0

	)

1877 
	#PCI_DEVICE_ID_CCD_B000
 0xb000

	)

1878 
	#PCI_DEVICE_ID_CCD_B006
 0xb006

	)

1879 
	#PCI_DEVICE_ID_CCD_B007
 0xb007

	)

1880 
	#PCI_DEVICE_ID_CCD_B008
 0xb008

	)

1881 
	#PCI_DEVICE_ID_CCD_B009
 0xb009

	)

1882 
	#PCI_DEVICE_ID_CCD_B00A
 0xb00a

	)

1883 
	#PCI_DEVICE_ID_CCD_B00B
 0xb00b

	)

1884 
	#PCI_DEVICE_ID_CCD_B00C
 0xb00c

	)

1885 
	#PCI_DEVICE_ID_CCD_B100
 0xb100

	)

1886 
	#PCI_DEVICE_ID_CCD_B700
 0xb700

	)

1887 
	#PCI_DEVICE_ID_CCD_B701
 0xb701

	)

1889 
	#PCI_VENDOR_ID_EXAR
 0x13a8

	)

1890 
	#PCI_DEVICE_ID_EXAR_XR17C152
 0x0152

	)

1891 
	#PCI_DEVICE_ID_EXAR_XR17C154
 0x0154

	)

1892 
	#PCI_DEVICE_ID_EXAR_XR17C158
 0x0158

	)

1894 
	#PCI_VENDOR_ID_MICROGATE
 0x13c0

	)

1895 
	#PCI_DEVICE_ID_MICROGATE_USC
 0x0010

	)

1896 
	#PCI_DEVICE_ID_MICROGATE_SCA
 0x0030

	)

1898 
	#PCI_VENDOR_ID_3WARE
 0x13C1

	)

1899 
	#PCI_DEVICE_ID_3WARE_1000
 0x1000

	)

1900 
	#PCI_DEVICE_ID_3WARE_7000
 0x1001

	)

1901 
	#PCI_DEVICE_ID_3WARE_9000
 0x1002

	)

1903 
	#PCI_VENDOR_ID_IOMEGA
 0x13ˇ

	)

1904 
	#PCI_DEVICE_ID_IOMEGA_BUZ
 0x4231

	)

1906 
	#PCI_VENDOR_ID_ABOCOM
 0x13D1

	)

1907 
	#PCI_DEVICE_ID_ABOCOM_2BD1
 0x2BD1

	)

1909 
	#PCI_VENDOR_ID_CMEDIA
 0x13f6

	)

1910 
	#PCI_DEVICE_ID_CMEDIA_CM8338A
 0x0100

	)

1911 
	#PCI_DEVICE_ID_CMEDIA_CM8338B
 0x0101

	)

1912 
	#PCI_DEVICE_ID_CMEDIA_CM8738
 0x0111

	)

1913 
	#PCI_DEVICE_ID_CMEDIA_CM8738B
 0x0112

	)

1915 
	#PCI_VENDOR_ID_LAVA
 0x1407

	)

1916 
	#PCI_DEVICE_ID_LAVA_DSERIAL
 0x0100

	)

1917 
	#PCI_DEVICE_ID_LAVA_QUATRO_A
 0x0101

	)

1918 
	#PCI_DEVICE_ID_LAVA_QUATRO_B
 0x0102

	)

1919 
	#PCI_DEVICE_ID_LAVA_OCTO_A
 0x0180

	)

1920 
	#PCI_DEVICE_ID_LAVA_OCTO_B
 0x0181

	)

1921 
	#PCI_DEVICE_ID_LAVA_PORT_PLUS
 0x0200

	)

1922 
	#PCI_DEVICE_ID_LAVA_QUAD_A
 0x0201

	)

1923 
	#PCI_DEVICE_ID_LAVA_QUAD_B
 0x0202

	)

1924 
	#PCI_DEVICE_ID_LAVA_SSERIAL
 0x0500

	)

1925 
	#PCI_DEVICE_ID_LAVA_PORT_650
 0x0600

	)

1926 
	#PCI_DEVICE_ID_LAVA_PARALLEL
 0x8000

	)

1927 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_A
 0x8002

	)

1928 
	#PCI_DEVICE_ID_LAVA_DUAL_PAR_B
 0x8003

	)

1929 
	#PCI_DEVICE_ID_LAVA_BOCA_IOPPAR
 0x8800

	)

1931 
	#PCI_VENDOR_ID_TIMEDIA
 0x1409

	)

1932 
	#PCI_DEVICE_ID_TIMEDIA_1889
 0x7168

	)

1934 
	#PCI_VENDOR_ID_ICE
 0x1412

	)

1935 
	#PCI_DEVICE_ID_ICE_1712
 0x1712

	)

1936 
	#PCI_DEVICE_ID_VT1724
 0x1724

	)

1938 
	#PCI_VENDOR_ID_OXSEMI
 0x1415

	)

1939 
	#PCI_DEVICE_ID_OXSEMI_12PCI840
 0x8403

	)

1940 
	#PCI_DEVICE_ID_OXSEMI_PCIe840
 0xC000

	)

1941 
	#PCI_DEVICE_ID_OXSEMI_PCIe840_G
 0xC004

	)

1942 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_0
 0xC100

	)

1943 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_0_G
 0xC104

	)

1944 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1
 0xC110

	)

1945 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_G
 0xC114

	)

1946 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_U
 0xC118

	)

1947 
	#PCI_DEVICE_ID_OXSEMI_PCIe952_1_GU
 0xC11C

	)

1948 
	#PCI_DEVICE_ID_OXSEMI_16PCI954
 0x9501

	)

1949 
	#PCI_DEVICE_ID_OXSEMI_16PCI95N
 0x9511

	)

1950 
	#PCI_DEVICE_ID_OXSEMI_16PCI954PP
 0x9513

	)

1951 
	#PCI_DEVICE_ID_OXSEMI_16PCI952
 0x9521

	)

1953 
	#PCI_VENDOR_ID_SAMSUNG
 0x144d

	)

1955 
	#PCI_VENDOR_ID_GIGABYTE
 0x1458

	)

1957 
	#PCI_VENDOR_ID_AMBIT
 0x1468

	)

1959 
	#PCI_VENDOR_ID_MYRICOM
 0x14c1

	)

1961 
	#PCI_VENDOR_ID_TITAN
 0x14D2

	)

1962 
	#PCI_DEVICE_ID_TITAN_010L
 0x8001

	)

1963 
	#PCI_DEVICE_ID_TITAN_100L
 0x8010

	)

1964 
	#PCI_DEVICE_ID_TITAN_110L
 0x8011

	)

1965 
	#PCI_DEVICE_ID_TITAN_200L
 0x8020

	)

1966 
	#PCI_DEVICE_ID_TITAN_210L
 0x8021

	)

1967 
	#PCI_DEVICE_ID_TITAN_400L
 0x8040

	)

1968 
	#PCI_DEVICE_ID_TITAN_800L
 0x8080

	)

1969 
	#PCI_DEVICE_ID_TITAN_100
 0xA001

	)

1970 
	#PCI_DEVICE_ID_TITAN_200
 0xA005

	)

1971 
	#PCI_DEVICE_ID_TITAN_400
 0xA003

	)

1972 
	#PCI_DEVICE_ID_TITAN_800B
 0xA004

	)

1974 
	#PCI_VENDOR_ID_PANACOM
 0x14d4

	)

1975 
	#PCI_DEVICE_ID_PANACOM_QUADMODEM
 0x0400

	)

1976 
	#PCI_DEVICE_ID_PANACOM_DUALMODEM
 0x0402

	)

1979 
	#PCI_VENDOR_ID_AFAVLAB
 0x14db

	)

1980 
	#PCI_DEVICE_ID_AFAVLAB_P028
 0x2180

	)

1981 
	#PCI_DEVICE_ID_AFAVLAB_P030
 0x2182

	)

1982 
	#PCI_SUBDEVICE_ID_AFAVLAB_P061
 0x2150

	)

1984 
	#PCI_VENDOR_ID_BROADCOM
 0x14e4

	)

1985 
	#PCI_DEVICE_ID_TIGON3_5752
 0x1600

	)

1986 
	#PCI_DEVICE_ID_TIGON3_5752M
 0x1601

	)

1987 
	#PCI_DEVICE_ID_NX2_5709
 0x1639

	)

1988 
	#PCI_DEVICE_ID_NX2_5709S
 0x163a

	)

1989 
	#PCI_DEVICE_ID_TIGON3_5700
 0x1644

	)

1990 
	#PCI_DEVICE_ID_TIGON3_5701
 0x1645

	)

1991 
	#PCI_DEVICE_ID_TIGON3_5702
 0x1646

	)

1992 
	#PCI_DEVICE_ID_TIGON3_5703
 0x1647

	)

1993 
	#PCI_DEVICE_ID_TIGON3_5704
 0x1648

	)

1994 
	#PCI_DEVICE_ID_TIGON3_5704S_2
 0x1649

	)

1995 
	#PCI_DEVICE_ID_NX2_5706
 0x164a

	)

1996 
	#PCI_DEVICE_ID_NX2_5708
 0x164c

	)

1997 
	#PCI_DEVICE_ID_TIGON3_5702FE
 0x164d

	)

1998 
	#PCI_DEVICE_ID_NX2_57710
 0x164e

	)

1999 
	#PCI_DEVICE_ID_NX2_57711
 0x164f

	)

2000 
	#PCI_DEVICE_ID_NX2_57711E
 0x1650

	)

2001 
	#PCI_DEVICE_ID_TIGON3_5705
 0x1653

	)

2002 
	#PCI_DEVICE_ID_TIGON3_5705_2
 0x1654

	)

2003 
	#PCI_DEVICE_ID_TIGON3_5719
 0x1657

	)

2004 
	#PCI_DEVICE_ID_TIGON3_5721
 0x1659

	)

2005 
	#PCI_DEVICE_ID_TIGON3_5722
 0x165a

	)

2006 
	#PCI_DEVICE_ID_TIGON3_5723
 0x165b

	)

2007 
	#PCI_DEVICE_ID_TIGON3_5705M
 0x165d

	)

2008 
	#PCI_DEVICE_ID_TIGON3_5705M_2
 0x165e

	)

2009 
	#PCI_DEVICE_ID_NX2_57712
 0x1662

	)

2010 
	#PCI_DEVICE_ID_NX2_57712E
 0x1663

	)

2011 
	#PCI_DEVICE_ID_TIGON3_5714
 0x1668

	)

2012 
	#PCI_DEVICE_ID_TIGON3_5714S
 0x1669

	)

2013 
	#PCI_DEVICE_ID_TIGON3_5780
 0x166a

	)

2014 
	#PCI_DEVICE_ID_TIGON3_5780S
 0x166b

	)

2015 
	#PCI_DEVICE_ID_TIGON3_5705F
 0x166e

	)

2016 
	#PCI_DEVICE_ID_TIGON3_5754M
 0x1672

	)

2017 
	#PCI_DEVICE_ID_TIGON3_5755M
 0x1673

	)

2018 
	#PCI_DEVICE_ID_TIGON3_5756
 0x1674

	)

2019 
	#PCI_DEVICE_ID_TIGON3_5751
 0x1677

	)

2020 
	#PCI_DEVICE_ID_TIGON3_5715
 0x1678

	)

2021 
	#PCI_DEVICE_ID_TIGON3_5715S
 0x1679

	)

2022 
	#PCI_DEVICE_ID_TIGON3_5754
 0x167a

	)

2023 
	#PCI_DEVICE_ID_TIGON3_5755
 0x167b

	)

2024 
	#PCI_DEVICE_ID_TIGON3_5751M
 0x167d

	)

2025 
	#PCI_DEVICE_ID_TIGON3_5751F
 0x167e

	)

2026 
	#PCI_DEVICE_ID_TIGON3_5787F
 0x167f

	)

2027 
	#PCI_DEVICE_ID_TIGON3_5761E
 0x1680

	)

2028 
	#PCI_DEVICE_ID_TIGON3_5761
 0x1681

	)

2029 
	#PCI_DEVICE_ID_TIGON3_5764
 0x1684

	)

2030 
	#PCI_DEVICE_ID_NX2_57800
 0x168a

	)

2031 
	#PCI_DEVICE_ID_NX2_57840
 0x168d

	)

2032 
	#PCI_DEVICE_ID_NX2_57810
 0x168e

	)

2033 
	#PCI_DEVICE_ID_TIGON3_5787M
 0x1693

	)

2034 
	#PCI_DEVICE_ID_TIGON3_5782
 0x1696

	)

2035 
	#PCI_DEVICE_ID_TIGON3_5784
 0x1698

	)

2036 
	#PCI_DEVICE_ID_TIGON3_5786
 0x169a

	)

2037 
	#PCI_DEVICE_ID_TIGON3_5787
 0x169b

	)

2038 
	#PCI_DEVICE_ID_TIGON3_5788
 0x169c

	)

2039 
	#PCI_DEVICE_ID_TIGON3_5789
 0x169d

	)

2040 
	#PCI_DEVICE_ID_NX2_57800_MF
 0x16a5

	)

2041 
	#PCI_DEVICE_ID_TIGON3_5702X
 0x16a6

	)

2042 
	#PCI_DEVICE_ID_TIGON3_5703X
 0x16a7

	)

2043 
	#PCI_DEVICE_ID_TIGON3_5704S
 0x16a8

	)

2044 
	#PCI_DEVICE_ID_NX2_57800_VF
 0x16a9

	)

2045 
	#PCI_DEVICE_ID_NX2_5706S
 0x16Ø

	)

2046 
	#PCI_DEVICE_ID_NX2_57840_MF
 0x16a4

	)

2047 
	#PCI_DEVICE_ID_NX2_5708S
 0x16ac

	)

2048 
	#PCI_DEVICE_ID_NX2_57840_VF
 0x16ad

	)

2049 
	#PCI_DEVICE_ID_NX2_57810_MF
 0x16´

	)

2050 
	#PCI_DEVICE_ID_NX2_57810_VF
 0x16af

	)

2051 
	#PCI_DEVICE_ID_TIGON3_5702A3
 0x16c6

	)

2052 
	#PCI_DEVICE_ID_TIGON3_5703A3
 0x16c7

	)

2053 
	#PCI_DEVICE_ID_TIGON3_5781
 0x16dd

	)

2054 
	#PCI_DEVICE_ID_TIGON3_5753
 0x16f7

	)

2055 
	#PCI_DEVICE_ID_TIGON3_5753M
 0x16fd

	)

2056 
	#PCI_DEVICE_ID_TIGON3_5753F
 0x16„

	)

2057 
	#PCI_DEVICE_ID_TIGON3_5901
 0x170d

	)

2058 
	#PCI_DEVICE_ID_BCM4401B1
 0x170c

	)

2059 
	#PCI_DEVICE_ID_TIGON3_5901_2
 0x170e

	)

2060 
	#PCI_DEVICE_ID_TIGON3_5906
 0x1712

	)

2061 
	#PCI_DEVICE_ID_TIGON3_5906M
 0x1713

	)

2062 
	#PCI_DEVICE_ID_BCM4401
 0x4401

	)

2063 
	#PCI_DEVICE_ID_BCM4401B0
 0x4402

	)

2065 
	#PCI_VENDOR_ID_TOPIC
 0x151f

	)

2066 
	#PCI_DEVICE_ID_TOPIC_TP560
 0x0000

	)

2068 
	#PCI_VENDOR_ID_ENE
 0x1524

	)

2069 
	#PCI_DEVICE_ID_ENE_1211
 0x1211

	)

2070 
	#PCI_DEVICE_ID_ENE_1225
 0x1225

	)

2071 
	#PCI_DEVICE_ID_ENE_1410
 0x1410

	)

2072 
	#PCI_DEVICE_ID_ENE_710
 0x1411

	)

2073 
	#PCI_DEVICE_ID_ENE_712
 0x1412

	)

2074 
	#PCI_DEVICE_ID_ENE_1420
 0x1420

	)

2075 
	#PCI_DEVICE_ID_ENE_720
 0x1421

	)

2076 
	#PCI_DEVICE_ID_ENE_722
 0x1422

	)

2078 
	#PCI_VENDOR_ID_CHELSIO
 0x1425

	)

2081 
	#PCI_VENDOR_ID_SYBA
 0x1592

	)

2082 
	#PCI_DEVICE_ID_SYBA_2P_EPP
 0x0782

	)

2083 
	#PCI_DEVICE_ID_SYBA_1P_ECP
 0x0783

	)

2085 
	#PCI_VENDOR_ID_MORETON
 0x15Ø

	)

2086 
	#PCI_DEVICE_ID_RASTEL_2PORT
 0x2000

	)

2088 
	#PCI_VENDOR_ID_ZOLTRIX
 0x15b0

	)

2089 
	#PCI_DEVICE_ID_ZOLTRIX_2BD0
 0x2bd0

	)

2091 
	#PCI_VENDOR_ID_MELLANOX
 0x15b3

	)

2092 
	#PCI_DEVICE_ID_MELLANOX_TAVOR
 0x5a44

	)

2093 
	#PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE
 0x5a46

	)

2094 
	#PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT
 0x6278

	)

2095 
	#PCI_DEVICE_ID_MELLANOX_ARBEL
 0x6282

	)

2096 
	#PCI_DEVICE_ID_MELLANOX_SINAI_OLD
 0x5e8c

	)

2097 
	#PCI_DEVICE_ID_MELLANOX_SINAI
 0x6274

	)

2099 
	#PCI_VENDOR_ID_DFI
 0x15bd

	)

2101 
	#PCI_VENDOR_ID_PDC
 0x15e9

	)

2104 
	#PCI_VENDOR_ID_FARSITE
 0x1619

	)

2105 
	#PCI_DEVICE_ID_FARSITE_T2P
 0x0400

	)

2106 
	#PCI_DEVICE_ID_FARSITE_T4P
 0x0440

	)

2107 
	#PCI_DEVICE_ID_FARSITE_T1U
 0x0610

	)

2108 
	#PCI_DEVICE_ID_FARSITE_T2U
 0x0620

	)

2109 
	#PCI_DEVICE_ID_FARSITE_T4U
 0x0640

	)

2110 
	#PCI_DEVICE_ID_FARSITE_TE1
 0x1610

	)

2111 
	#PCI_DEVICE_ID_FARSITE_TE1C
 0x1612

	)

2113 
	#PCI_VENDOR_ID_ARIMA
 0x161f

	)

2114 
	#PCI_VENDOR_ID_BROCADE
 0x1657

	)

2115 
	#PCI_DEVICE_ID_BROCADE_CT
 0x0014

	)

2116 
	#PCI_DEVICE_ID_BROCADE_FC_8G1P
 0x0017

	)

2117 
	#PCI_DEVICE_ID_BROCADE_CT_FC
 0x0021

	)

2119 
	#PCI_VENDOR_ID_SIBYTE
 0x166d

	)

2120 
	#PCI_DEVICE_ID_BCM1250_HT
 0x0002

	)

2122 
	#PCI_VENDOR_ID_ATHEROS
 0x168c

	)

2124 
	#PCI_VENDOR_ID_NETCELL
 0x169c

	)

2125 
	#PCI_DEVICE_ID_REVOLUTION
 0x0044

	)

2127 
	#PCI_VENDOR_ID_CENATEK
 0x16CA

	)

2128 
	#PCI_DEVICE_ID_CENATEK_IDE
 0x0001

	)

2130 
	#PCI_VENDOR_ID_VITESSE
 0x1725

	)

2131 
	#PCI_DEVICE_ID_VITESSE_VSC7174
 0x7174

	)

2133 
	#PCI_VENDOR_ID_LINKSYS
 0x1737

	)

2134 
	#PCI_DEVICE_ID_LINKSYS_EG1064
 0x1064

	)

2136 
	#PCI_VENDOR_ID_ALTIMA
 0x173b

	)

2137 
	#PCI_DEVICE_ID_ALTIMA_AC1000
 0x03e8

	)

2138 
	#PCI_DEVICE_ID_ALTIMA_AC1001
 0x03e9

	)

2139 
	#PCI_DEVICE_ID_ALTIMA_AC9100
 0x03ó

	)

2140 
	#PCI_DEVICE_ID_ALTIMA_AC1003
 0x03eb

	)

2142 
	#PCI_VENDOR_ID_BELKIN
 0x1799

	)

2144 
	#PCI_VENDOR_ID_ARECA
 0x17d3

	)

2145 
	#PCI_DEVICE_ID_ARECA_1110
 0x1110

	)

2146 
	#PCI_DEVICE_ID_ARECA_1120
 0x1120

	)

2147 
	#PCI_DEVICE_ID_ARECA_1130
 0x1130

	)

2148 
	#PCI_DEVICE_ID_ARECA_1160
 0x1160

	)

2149 
	#PCI_DEVICE_ID_ARECA_1170
 0x1170

	)

2150 
	#PCI_DEVICE_ID_ARECA_1200
 0x1200

	)

2151 
	#PCI_DEVICE_ID_ARECA_1201
 0x1201

	)

2152 
	#PCI_DEVICE_ID_ARECA_1202
 0x1202

	)

2153 
	#PCI_DEVICE_ID_ARECA_1210
 0x1210

	)

2154 
	#PCI_DEVICE_ID_ARECA_1220
 0x1220

	)

2155 
	#PCI_DEVICE_ID_ARECA_1230
 0x1230

	)

2156 
	#PCI_DEVICE_ID_ARECA_1260
 0x1260

	)

2157 
	#PCI_DEVICE_ID_ARECA_1270
 0x1270

	)

2158 
	#PCI_DEVICE_ID_ARECA_1280
 0x1280

	)

2159 
	#PCI_DEVICE_ID_ARECA_1380
 0x1380

	)

2160 
	#PCI_DEVICE_ID_ARECA_1381
 0x1381

	)

2161 
	#PCI_DEVICE_ID_ARECA_1680
 0x1680

	)

2162 
	#PCI_DEVICE_ID_ARECA_1681
 0x1681

	)

2164 
	#PCI_VENDOR_ID_S2IO
 0x17d5

	)

2165 
	#PCI_DEVICE_ID_S2IO_WIN
 0x5731

	)

2166 
	#PCI_DEVICE_ID_S2IO_UNI
 0x5831

	)

2167 
	#PCI_DEVICE_ID_HERC_WIN
 0x5732

	)

2168 
	#PCI_DEVICE_ID_HERC_UNI
 0x5832

	)

2171 
	#PCI_VENDOR_ID_SITECOM
 0x182d

	)

2172 
	#PCI_DEVICE_ID_SITECOM_DC105V2
 0x3069

	)

2174 
	#PCI_VENDOR_ID_TOPSPIN
 0x1867

	)

2176 
	#PCI_VENDOR_ID_SOLARFLARE
 0x1924

	)

2177 
	#PCI_DEVICE_ID_SOLARFLARE_SFC4000A_0
 0x0703

	)

2178 
	#PCI_DEVICE_ID_SOLARFLARE_SFC4000A_1
 0x6703

	)

2179 
	#PCI_DEVICE_ID_SOLARFLARE_SFC4000B
 0x0710

	)

2181 
	#PCI_VENDOR_ID_TDI
 0x192E

	)

2182 
	#PCI_DEVICE_ID_TDI_EHCI
 0x0101

	)

2184 
	#PCI_VENDOR_ID_JMICRON
 0x197B

	)

2185 
	#PCI_DEVICE_ID_JMICRON_JMB360
 0x2360

	)

2186 
	#PCI_DEVICE_ID_JMICRON_JMB361
 0x2361

	)

2187 
	#PCI_DEVICE_ID_JMICRON_JMB362
 0x2362

	)

2188 
	#PCI_DEVICE_ID_JMICRON_JMB363
 0x2363

	)

2189 
	#PCI_DEVICE_ID_JMICRON_JMB365
 0x2365

	)

2190 
	#PCI_DEVICE_ID_JMICRON_JMB366
 0x2366

	)

2191 
	#PCI_DEVICE_ID_JMICRON_JMB368
 0x2368

	)

2193 
	#PCI_VENDOR_ID_QMI
 0x1a32

	)

2195 
	#PCI_VENDOR_ID_AZWAVE
 0x1a3b

	)

2197 
	#PCI_VENDOR_ID_TEKRAM
 0x1de1

	)

2198 
	#PCI_DEVICE_ID_TEKRAM_DC290
 0xdc29

	)

2200 
	#PCI_VENDOR_ID_HINT
 0x3388

	)

2201 
	#PCI_DEVICE_ID_HINT_VXPROII_IDE
 0x8013

	)

2203 
	#PCI_VENDOR_ID_3DLABS
 0x3d3d

	)

2204 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2
 0x0007

	)

2205 
	#PCI_DEVICE_ID_3DLABS_PERMEDIA2V
 0x0009

	)

2208 
	#PCI_VENDOR_ID_AKS
 0x416c

	)

2209 
	#PCI_DEVICE_ID_AKS_ALADDINCARD
 0x0100

	)

2213 
	#PCI_VENDOR_ID_S3
 0x5333

	)

2214 
	#PCI_DEVICE_ID_S3_TRIO
 0x8811

	)

2215 
	#PCI_DEVICE_ID_S3_868
 0x8880

	)

2216 
	#PCI_DEVICE_ID_S3_968
 0x88f0

	)

2217 
	#PCI_DEVICE_ID_S3_SAVAGE4
 0x8a25

	)

2218 
	#PCI_DEVICE_ID_S3_PROSAVAGE8
 0x8d04

	)

2219 
	#PCI_DEVICE_ID_S3_SONICVIBES
 0xˇ00

	)

2221 
	#PCI_VENDOR_ID_DUNORD
 0x5544

	)

2222 
	#PCI_DEVICE_ID_DUNORD_I3000
 0x0001

	)

2225 
	#PCI_VENDOR_ID_DCI
 0x6666

	)

2226 
	#PCI_DEVICE_ID_DCI_PCCOM4
 0x0001

	)

2227 
	#PCI_DEVICE_ID_DCI_PCCOM8
 0x0002

	)

2228 
	#PCI_DEVICE_ID_DCI_PCCOM2
 0x0004

	)

2230 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

2231 
	#PCI_DEVICE_ID_INTEL_EESSC
 0x0008

	)

2232 
	#PCI_DEVICE_ID_INTEL_PXHD_0
 0x0320

	)

2233 
	#PCI_DEVICE_ID_INTEL_PXHD_1
 0x0321

	)

2234 
	#PCI_DEVICE_ID_INTEL_PXH_0
 0x0329

	)

2235 
	#PCI_DEVICE_ID_INTEL_PXH_1
 0x032A

	)

2236 
	#PCI_DEVICE_ID_INTEL_PXHV
 0x032C

	)

2237 
	#PCI_DEVICE_ID_INTEL_82375
 0x0482

	)

2238 
	#PCI_DEVICE_ID_INTEL_82424
 0x0483

	)

2239 
	#PCI_DEVICE_ID_INTEL_82378
 0x0484

	)

2240 
	#PCI_DEVICE_ID_INTEL_I960
 0x0960

	)

2241 
	#PCI_DEVICE_ID_INTEL_I960RM
 0x0962

	)

2242 
	#PCI_DEVICE_ID_INTEL_8257X_SOL
 0x1062

	)

2243 
	#PCI_DEVICE_ID_INTEL_82573E_SOL
 0x1085

	)

2244 
	#PCI_DEVICE_ID_INTEL_82573L_SOL
 0x108F

	)

2245 
	#PCI_DEVICE_ID_INTEL_82815_MC
 0x1130

	)

2246 
	#PCI_DEVICE_ID_INTEL_82815_CGC
 0x1132

	)

2247 
	#PCI_DEVICE_ID_INTEL_82092AA_0
 0x1221

	)

2248 
	#PCI_DEVICE_ID_INTEL_7505_0
 0x2550

	)

2249 
	#PCI_DEVICE_ID_INTEL_7205_0
 0x255d

	)

2250 
	#PCI_DEVICE_ID_INTEL_82437
 0x122d

	)

2251 
	#PCI_DEVICE_ID_INTEL_82371FB_0
 0x122e

	)

2252 
	#PCI_DEVICE_ID_INTEL_82371FB_1
 0x1230

	)

2253 
	#PCI_DEVICE_ID_INTEL_82371MX
 0x1234

	)

2254 
	#PCI_DEVICE_ID_INTEL_82441
 0x1237

	)

2255 
	#PCI_DEVICE_ID_INTEL_82380FB
 0x124b

	)

2256 
	#PCI_DEVICE_ID_INTEL_82439
 0x1250

	)

2257 
	#PCI_DEVICE_ID_INTEL_80960_RP
 0x1960

	)

2258 
	#PCI_DEVICE_ID_INTEL_82840_HB
 0x1a21

	)

2259 
	#PCI_DEVICE_ID_INTEL_82845_HB
 0x1a30

	)

2260 
	#PCI_DEVICE_ID_INTEL_IOAT
 0x1a38

	)

2261 
	#PCI_DEVICE_ID_INTEL_CPT_SMBUS
 0x1c22

	)

2262 
	#PCI_DEVICE_ID_INTEL_CPT_LPC_MIN
 0x1c41

	)

2263 
	#PCI_DEVICE_ID_INTEL_CPT_LPC_MAX
 0x1c5f

	)

2264 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_SMBUS
 0x1e22

	)

2265 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MIN
 0x1e40

	)

2266 
	#PCI_DEVICE_ID_INTEL_PANTHERPOINT_LPC_MAX
 0x1e5f

	)

2267 
	#PCI_DEVICE_ID_INTEL_PATSBURG_SMBUS
 0x1d22

	)

2268 
	#PCI_DEVICE_ID_INTEL_PATSBURG_LPC_0
 0x1d40

	)

2269 
	#PCI_DEVICE_ID_INTEL_PATSBURG_LPC_1
 0x1d41

	)

2270 
	#PCI_DEVICE_ID_INTEL_82801AA_0
 0x2410

	)

2271 
	#PCI_DEVICE_ID_INTEL_82801AA_1
 0x2411

	)

2272 
	#PCI_DEVICE_ID_INTEL_82801AA_3
 0x2413

	)

2273 
	#PCI_DEVICE_ID_INTEL_82801AA_5
 0x2415

	)

2274 
	#PCI_DEVICE_ID_INTEL_82801AA_6
 0x2416

	)

2275 
	#PCI_DEVICE_ID_INTEL_82801AA_8
 0x2418

	)

2276 
	#PCI_DEVICE_ID_INTEL_82801AB_0
 0x2420

	)

2277 
	#PCI_DEVICE_ID_INTEL_82801AB_1
 0x2421

	)

2278 
	#PCI_DEVICE_ID_INTEL_82801AB_3
 0x2423

	)

2279 
	#PCI_DEVICE_ID_INTEL_82801AB_5
 0x2425

	)

2280 
	#PCI_DEVICE_ID_INTEL_82801AB_6
 0x2426

	)

2281 
	#PCI_DEVICE_ID_INTEL_82801AB_8
 0x2428

	)

2282 
	#PCI_DEVICE_ID_INTEL_82801BA_0
 0x2440

	)

2283 
	#PCI_DEVICE_ID_INTEL_82801BA_2
 0x2443

	)

2284 
	#PCI_DEVICE_ID_INTEL_82801BA_4
 0x2445

	)

2285 
	#PCI_DEVICE_ID_INTEL_82801BA_6
 0x2448

	)

2286 
	#PCI_DEVICE_ID_INTEL_82801BA_8
 0x244a

	)

2287 
	#PCI_DEVICE_ID_INTEL_82801BA_9
 0x244b

	)

2288 
	#PCI_DEVICE_ID_INTEL_82801BA_10
 0x244c

	)

2289 
	#PCI_DEVICE_ID_INTEL_82801BA_11
 0x244e

	)

2290 
	#PCI_DEVICE_ID_INTEL_82801E_0
 0x2450

	)

2291 
	#PCI_DEVICE_ID_INTEL_82801E_11
 0x245b

	)

2292 
	#PCI_DEVICE_ID_INTEL_82801CA_0
 0x2480

	)

2293 
	#PCI_DEVICE_ID_INTEL_82801CA_3
 0x2483

	)

2294 
	#PCI_DEVICE_ID_INTEL_82801CA_5
 0x2485

	)

2295 
	#PCI_DEVICE_ID_INTEL_82801CA_6
 0x2486

	)

2296 
	#PCI_DEVICE_ID_INTEL_82801CA_10
 0x248a

	)

2297 
	#PCI_DEVICE_ID_INTEL_82801CA_11
 0x248b

	)

2298 
	#PCI_DEVICE_ID_INTEL_82801CA_12
 0x248c

	)

2299 
	#PCI_DEVICE_ID_INTEL_82801DB_0
 0x24c0

	)

2300 
	#PCI_DEVICE_ID_INTEL_82801DB_1
 0x24c1

	)

2301 
	#PCI_DEVICE_ID_INTEL_82801DB_3
 0x24c3

	)

2302 
	#PCI_DEVICE_ID_INTEL_82801DB_5
 0x24c5

	)

2303 
	#PCI_DEVICE_ID_INTEL_82801DB_6
 0x24c6

	)

2304 
	#PCI_DEVICE_ID_INTEL_82801DB_9
 0x24c9

	)

2305 
	#PCI_DEVICE_ID_INTEL_82801DB_10
 0x24ˇ

	)

2306 
	#PCI_DEVICE_ID_INTEL_82801DB_11
 0x24cb

	)

2307 
	#PCI_DEVICE_ID_INTEL_82801DB_12
 0x24cc

	)

2308 
	#PCI_DEVICE_ID_INTEL_82801EB_0
 0x24d0

	)

2309 
	#PCI_DEVICE_ID_INTEL_82801EB_1
 0x24d1

	)

2310 
	#PCI_DEVICE_ID_INTEL_82801EB_3
 0x24d3

	)

2311 
	#PCI_DEVICE_ID_INTEL_82801EB_5
 0x24d5

	)

2312 
	#PCI_DEVICE_ID_INTEL_82801EB_6
 0x24d6

	)

2313 
	#PCI_DEVICE_ID_INTEL_82801EB_11
 0x24db

	)

2314 
	#PCI_DEVICE_ID_INTEL_82801EB_13
 0x24dd

	)

2315 
	#PCI_DEVICE_ID_INTEL_ESB_1
 0x25a1

	)

2316 
	#PCI_DEVICE_ID_INTEL_ESB_2
 0x25a2

	)

2317 
	#PCI_DEVICE_ID_INTEL_ESB_4
 0x25a4

	)

2318 
	#PCI_DEVICE_ID_INTEL_ESB_5
 0x25a6

	)

2319 
	#PCI_DEVICE_ID_INTEL_ESB_9
 0x25ab

	)

2320 
	#PCI_DEVICE_ID_INTEL_82820_HB
 0x2500

	)

2321 
	#PCI_DEVICE_ID_INTEL_82820_UP_HB
 0x2501

	)

2322 
	#PCI_DEVICE_ID_INTEL_82850_HB
 0x2530

	)

2323 
	#PCI_DEVICE_ID_INTEL_82860_HB
 0x2531

	)

2324 
	#PCI_DEVICE_ID_INTEL_E7501_MCH
 0x254c

	)

2325 
	#PCI_DEVICE_ID_INTEL_82845G_HB
 0x2560

	)

2326 
	#PCI_DEVICE_ID_INTEL_82845G_IG
 0x2562

	)

2327 
	#PCI_DEVICE_ID_INTEL_82865_HB
 0x2570

	)

2328 
	#PCI_DEVICE_ID_INTEL_82865_IG
 0x2572

	)

2329 
	#PCI_DEVICE_ID_INTEL_82875_HB
 0x2578

	)

2330 
	#PCI_DEVICE_ID_INTEL_82915G_HB
 0x2580

	)

2331 
	#PCI_DEVICE_ID_INTEL_82915G_IG
 0x2582

	)

2332 
	#PCI_DEVICE_ID_INTEL_82915GM_HB
 0x2590

	)

2333 
	#PCI_DEVICE_ID_INTEL_82915GM_IG
 0x2592

	)

2334 
	#PCI_DEVICE_ID_INTEL_5000_ERR
 0x25F0

	)

2335 
	#PCI_DEVICE_ID_INTEL_5000_FBD0
 0x25F5

	)

2336 
	#PCI_DEVICE_ID_INTEL_5000_FBD1
 0x25F6

	)

2337 
	#PCI_DEVICE_ID_INTEL_82945G_HB
 0x2770

	)

2338 
	#PCI_DEVICE_ID_INTEL_82945G_IG
 0x2772

	)

2339 
	#PCI_DEVICE_ID_INTEL_3000_HB
 0x2778

	)

2340 
	#PCI_DEVICE_ID_INTEL_82945GM_HB
 0x27A0

	)

2341 
	#PCI_DEVICE_ID_INTEL_82945GM_IG
 0x27A2

	)

2342 
	#PCI_DEVICE_ID_INTEL_82945GME_IG
 0x27AE

	)

2343 
	#PCI_DEVICE_ID_INTEL_ICH6_0
 0x2640

	)

2344 
	#PCI_DEVICE_ID_INTEL_ICH6_1
 0x2641

	)

2345 
	#PCI_DEVICE_ID_INTEL_ICH6_2
 0x2642

	)

2346 
	#PCI_DEVICE_ID_INTEL_ICH6_16
 0x266a

	)

2347 
	#PCI_DEVICE_ID_INTEL_ICH6_17
 0x266d

	)

2348 
	#PCI_DEVICE_ID_INTEL_ICH6_18
 0x266e

	)

2349 
	#PCI_DEVICE_ID_INTEL_ICH6_19
 0x266f

	)

2350 
	#PCI_DEVICE_ID_INTEL_ESB2_0
 0x2670

	)

2351 
	#PCI_DEVICE_ID_INTEL_ESB2_14
 0x2698

	)

2352 
	#PCI_DEVICE_ID_INTEL_ESB2_17
 0x269b

	)

2353 
	#PCI_DEVICE_ID_INTEL_ESB2_18
 0x269e

	)

2354 
	#PCI_DEVICE_ID_INTEL_ICH7_0
 0x27b8

	)

2355 
	#PCI_DEVICE_ID_INTEL_ICH7_1
 0x27b9

	)

2356 
	#PCI_DEVICE_ID_INTEL_ICH7_30
 0x27b0

	)

2357 
	#PCI_DEVICE_ID_INTEL_ICH7_31
 0x27bd

	)

2358 
	#PCI_DEVICE_ID_INTEL_ICH7_17
 0x27da

	)

2359 
	#PCI_DEVICE_ID_INTEL_ICH7_19
 0x27dd

	)

2360 
	#PCI_DEVICE_ID_INTEL_ICH7_20
 0x27de

	)

2361 
	#PCI_DEVICE_ID_INTEL_ICH7_21
 0x27df

	)

2362 
	#PCI_DEVICE_ID_INTEL_ICH8_0
 0x2810

	)

2363 
	#PCI_DEVICE_ID_INTEL_ICH8_1
 0x2811

	)

2364 
	#PCI_DEVICE_ID_INTEL_ICH8_2
 0x2812

	)

2365 
	#PCI_DEVICE_ID_INTEL_ICH8_3
 0x2814

	)

2366 
	#PCI_DEVICE_ID_INTEL_ICH8_4
 0x2815

	)

2367 
	#PCI_DEVICE_ID_INTEL_ICH8_5
 0x283e

	)

2368 
	#PCI_DEVICE_ID_INTEL_ICH8_6
 0x2850

	)

2369 
	#PCI_DEVICE_ID_INTEL_ICH9_0
 0x2910

	)

2370 
	#PCI_DEVICE_ID_INTEL_ICH9_1
 0x2911

	)

2371 
	#PCI_DEVICE_ID_INTEL_ICH9_2
 0x2912

	)

2372 
	#PCI_DEVICE_ID_INTEL_ICH9_3
 0x2913

	)

2373 
	#PCI_DEVICE_ID_INTEL_ICH9_4
 0x2914

	)

2374 
	#PCI_DEVICE_ID_INTEL_ICH9_5
 0x2915

	)

2375 
	#PCI_DEVICE_ID_INTEL_ICH9_6
 0x2930

	)

2376 
	#PCI_DEVICE_ID_INTEL_I7_MCR
 0x2c18

	)

2377 
	#PCI_DEVICE_ID_INTEL_I7_MC_TAD
 0x2c19

	)

2378 
	#PCI_DEVICE_ID_INTEL_I7_MC_RAS
 0x2c1a

	)

2379 
	#PCI_DEVICE_ID_INTEL_I7_MC_TEST
 0x2c1c

	)

2380 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_CTRL
 0x2c20

	)

2381 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_ADDR
 0x2c21

	)

2382 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_RANK
 0x2c22

	)

2383 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH0_TC
 0x2c23

	)

2384 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_CTRL
 0x2c28

	)

2385 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_ADDR
 0x2c29

	)

2386 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_RANK
 0x2c2a

	)

2387 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH1_TC
 0x2c2b

	)

2388 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_CTRL
 0x2c30

	)

2389 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_ADDR
 0x2c31

	)

2390 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_RANK
 0x2c32

	)

2391 
	#PCI_DEVICE_ID_INTEL_I7_MC_CH2_TC
 0x2c33

	)

2392 
	#PCI_DEVICE_ID_INTEL_I7_NONCORE
 0x2c41

	)

2393 
	#PCI_DEVICE_ID_INTEL_I7_NONCORE_ALT
 0x2c40

	)

2394 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE
 0x2c50

	)

2395 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_ALT
 0x2c51

	)

2396 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_NONCORE_REV2
 0x2c70

	)

2397 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_SAD
 0x2c81

	)

2398 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_LINK0
 0x2c90

	)

2399 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_QPI_PHY0
 0x2c91

	)

2400 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR
 0x2c98

	)

2401 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD
 0x2c99

	)

2402 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST
 0x2c9C

	)

2403 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL
 0x2ˇ0

	)

2404 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR
 0x2ˇ1

	)

2405 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK
 0x2ˇ2

	)

2406 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC
 0x2ˇ3

	)

2407 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL
 0x2ˇ8

	)

2408 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR
 0x2ˇ9

	)

2409 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK
 0x2ˇa

	)

2410 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC
 0x2ˇb

	)

2411 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MCR_REV2
 0x2d98

	)

2412 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TAD_REV2
 0x2d99

	)

2413 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_RAS_REV2
 0x2d9a

	)

2414 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_TEST_REV2
 0x2d9c

	)

2415 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_CTRL_REV2
 0x2da0

	)

2416 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_ADDR_REV2
 0x2da1

	)

2417 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_RANK_REV2
 0x2da2

	)

2418 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH0_TC_REV2
 0x2da3

	)

2419 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_CTRL_REV2
 0x2da8

	)

2420 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_ADDR_REV2
 0x2da9

	)

2421 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_RANK_REV2
 0x2dØ

	)

2422 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH1_TC_REV2
 0x2dab

	)

2423 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_CTRL_REV2
 0x2db0

	)

2424 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_ADDR_REV2
 0x2db1

	)

2425 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_RANK_REV2
 0x2db2

	)

2426 
	#PCI_DEVICE_ID_INTEL_LYNNFIELD_MC_CH2_TC_REV2
 0x2db3

	)

2427 
	#PCI_DEVICE_ID_INTEL_82855PM_HB
 0x3340

	)

2428 
	#PCI_DEVICE_ID_INTEL_IOAT_SNB
 0x402f

	)

2429 
	#PCI_DEVICE_ID_INTEL_IOAT_CNB
 0x360b

	)

2430 
	#PCI_DEVICE_ID_INTEL_IOAT_SCNB
 0x65ff

	)

2431 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG4
 0x3429

	)

2432 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG5
 0x342a

	)

2433 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG6
 0x342b

	)

2434 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG7
 0x342c

	)

2435 
	#PCI_DEVICE_ID_INTEL_X58_HUB_MGMT
 0x342e

	)

2436 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG0
 0x3430

	)

2437 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG1
 0x3431

	)

2438 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG2
 0x3432

	)

2439 
	#PCI_DEVICE_ID_INTEL_IOAT_TBG3
 0x3433

	)

2440 
	#PCI_DEVICE_ID_INTEL_82830_HB
 0x3575

	)

2441 
	#PCI_DEVICE_ID_INTEL_82830_CGC
 0x3577

	)

2442 
	#PCI_DEVICE_ID_INTEL_82855GM_HB
 0x3580

	)

2443 
	#PCI_DEVICE_ID_INTEL_82855GM_IG
 0x3582

	)

2444 
	#PCI_DEVICE_ID_INTEL_E7520_MCH
 0x3590

	)

2445 
	#PCI_DEVICE_ID_INTEL_E7320_MCH
 0x3592

	)

2446 
	#PCI_DEVICE_ID_INTEL_MCH_PA
 0x3595

	)

2447 
	#PCI_DEVICE_ID_INTEL_MCH_PA1
 0x3596

	)

2448 
	#PCI_DEVICE_ID_INTEL_MCH_PB
 0x3597

	)

2449 
	#PCI_DEVICE_ID_INTEL_MCH_PB1
 0x3598

	)

2450 
	#PCI_DEVICE_ID_INTEL_MCH_PC
 0x3599

	)

2451 
	#PCI_DEVICE_ID_INTEL_MCH_PC1
 0x359a

	)

2452 
	#PCI_DEVICE_ID_INTEL_E7525_MCH
 0x359e

	)

2453 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_ERR
 0x360c

	)

2454 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_FB0
 0x360f

	)

2455 
	#PCI_DEVICE_ID_INTEL_I7300_MCH_FB1
 0x3610

	)

2456 
	#PCI_DEVICE_ID_INTEL_IOAT_CNB
 0x360b

	)

2457 
	#PCI_DEVICE_ID_INTEL_FBD_CNB
 0x360c

	)

2458 
	#PCI_DEVICE_ID_INTEL_IOAT_JSF0
 0x3710

	)

2459 
	#PCI_DEVICE_ID_INTEL_ICH10_0
 0x3a14

	)

2460 
	#PCI_DEVICE_ID_INTEL_ICH10_1
 0x3a16

	)

2461 
	#PCI_DEVICE_ID_INTEL_ICH10_2
 0x3a18

	)

2462 
	#PCI_DEVICE_ID_INTEL_ICH10_3
 0x3a1a

	)

2463 
	#PCI_DEVICE_ID_INTEL_ICH10_4
 0x3a30

	)

2464 
	#PCI_DEVICE_ID_INTEL_ICH10_5
 0x3a60

	)

2465 
	#PCI_DEVICE_ID_INTEL_PCH_LPC_MIN
 0x3b00

	)

2466 
	#PCI_DEVICE_ID_INTEL_PCH_LPC_MAX
 0x3b1f

	)

2467 
	#PCI_DEVICE_ID_INTEL_PCH_SMBUS
 0x3b30

	)

2468 
	#PCI_DEVICE_ID_INTEL_5400_ERR
 0x4030

	)

2469 
	#PCI_DEVICE_ID_INTEL_5400_FBD0
 0x4035

	)

2470 
	#PCI_DEVICE_ID_INTEL_5400_FBD1
 0x4036

	)

2471 
	#PCI_DEVICE_ID_INTEL_TOLAPAI_0
 0x5031

	)

2472 
	#PCI_DEVICE_ID_INTEL_TOLAPAI_1
 0x5032

	)

2473 
	#PCI_DEVICE_ID_INTEL_82371SB_0
 0x7000

	)

2474 
	#PCI_DEVICE_ID_INTEL_82371SB_1
 0x7010

	)

2475 
	#PCI_DEVICE_ID_INTEL_82371SB_2
 0x7020

	)

2476 
	#PCI_DEVICE_ID_INTEL_82437VX
 0x7030

	)

2477 
	#PCI_DEVICE_ID_INTEL_82439TX
 0x7100

	)

2478 
	#PCI_DEVICE_ID_INTEL_82371AB_0
 0x7110

	)

2479 
	#PCI_DEVICE_ID_INTEL_82371AB
 0x7111

	)

2480 
	#PCI_DEVICE_ID_INTEL_82371AB_2
 0x7112

	)

2481 
	#PCI_DEVICE_ID_INTEL_82371AB_3
 0x7113

	)

2482 
	#PCI_DEVICE_ID_INTEL_82810_MC1
 0x7120

	)

2483 
	#PCI_DEVICE_ID_INTEL_82810_IG1
 0x7121

	)

2484 
	#PCI_DEVICE_ID_INTEL_82810_MC3
 0x7122

	)

2485 
	#PCI_DEVICE_ID_INTEL_82810_IG3
 0x7123

	)

2486 
	#PCI_DEVICE_ID_INTEL_82810E_MC
 0x7124

	)

2487 
	#PCI_DEVICE_ID_INTEL_82810E_IG
 0x7125

	)

2488 
	#PCI_DEVICE_ID_INTEL_82443LX_0
 0x7180

	)

2489 
	#PCI_DEVICE_ID_INTEL_82443LX_1
 0x7181

	)

2490 
	#PCI_DEVICE_ID_INTEL_82443BX_0
 0x7190

	)

2491 
	#PCI_DEVICE_ID_INTEL_82443BX_1
 0x7191

	)

2492 
	#PCI_DEVICE_ID_INTEL_82443BX_2
 0x7192

	)

2493 
	#PCI_DEVICE_ID_INTEL_440MX
 0x7195

	)

2494 
	#PCI_DEVICE_ID_INTEL_440MX_6
 0x7196

	)

2495 
	#PCI_DEVICE_ID_INTEL_82443MX_0
 0x7198

	)

2496 
	#PCI_DEVICE_ID_INTEL_82443MX_1
 0x7199

	)

2497 
	#PCI_DEVICE_ID_INTEL_82443MX_3
 0x719b

	)

2498 
	#PCI_DEVICE_ID_INTEL_82443GX_0
 0x71a0

	)

2499 
	#PCI_DEVICE_ID_INTEL_82443GX_2
 0x71a2

	)

2500 
	#PCI_DEVICE_ID_INTEL_82372FB_1
 0x7601

	)

2501 
	#PCI_DEVICE_ID_INTEL_SCH_IDE
 0x811a

	)

2502 
	#PCI_DEVICE_ID_INTEL_82454GX
 0x84c4

	)

2503 
	#PCI_DEVICE_ID_INTEL_82450GX
 0x84c5

	)

2504 
	#PCI_DEVICE_ID_INTEL_82451NX
 0x84ˇ

	)

2505 
	#PCI_DEVICE_ID_INTEL_82454NX
 0x84cb

	)

2506 
	#PCI_DEVICE_ID_INTEL_84460GX
 0x84ó

	)

2507 
	#PCI_DEVICE_ID_INTEL_IXP4XX
 0x8500

	)

2508 
	#PCI_DEVICE_ID_INTEL_IXP2800
 0x9004

	)

2509 
	#PCI_DEVICE_ID_INTEL_S21152BB
 0xb152

	)

2511 
	#PCI_VENDOR_ID_SCALEMP
 0x8686

	)

2512 
	#PCI_DEVICE_ID_SCALEMP_VSMP_CTL
 0x1010

	)

2514 
	#PCI_VENDOR_ID_COMPUTONE
 0x8e0e

	)

2515 
	#PCI_DEVICE_ID_COMPUTONE_IP2EX
 0x0291

	)

2516 
	#PCI_DEVICE_ID_COMPUTONE_PG
 0x0302

	)

2517 
	#PCI_SUBVENDOR_ID_COMPUTONE
 0x8e0e

	)

2518 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG4
 0x0001

	)

2519 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG8
 0x0002

	)

2520 
	#PCI_SUBDEVICE_ID_COMPUTONE_PG6
 0x0003

	)

2522 
	#PCI_VENDOR_ID_KTI
 0x8e2e

	)

2524 
	#PCI_VENDOR_ID_ADAPTEC
 0x9004

	)

2525 
	#PCI_DEVICE_ID_ADAPTEC_7810
 0x1078

	)

2526 
	#PCI_DEVICE_ID_ADAPTEC_7821
 0x2178

	)

2527 
	#PCI_DEVICE_ID_ADAPTEC_38602
 0x3860

	)

2528 
	#PCI_DEVICE_ID_ADAPTEC_7850
 0x5078

	)

2529 
	#PCI_DEVICE_ID_ADAPTEC_7855
 0x5578

	)

2530 
	#PCI_DEVICE_ID_ADAPTEC_3860
 0x6038

	)

2531 
	#PCI_DEVICE_ID_ADAPTEC_1480A
 0x6075

	)

2532 
	#PCI_DEVICE_ID_ADAPTEC_7860
 0x6078

	)

2533 
	#PCI_DEVICE_ID_ADAPTEC_7861
 0x6178

	)

2534 
	#PCI_DEVICE_ID_ADAPTEC_7870
 0x7078

	)

2535 
	#PCI_DEVICE_ID_ADAPTEC_7871
 0x7178

	)

2536 
	#PCI_DEVICE_ID_ADAPTEC_7872
 0x7278

	)

2537 
	#PCI_DEVICE_ID_ADAPTEC_7873
 0x7378

	)

2538 
	#PCI_DEVICE_ID_ADAPTEC_7874
 0x7478

	)

2539 
	#PCI_DEVICE_ID_ADAPTEC_7895
 0x7895

	)

2540 
	#PCI_DEVICE_ID_ADAPTEC_7880
 0x8078

	)

2541 
	#PCI_DEVICE_ID_ADAPTEC_7881
 0x8178

	)

2542 
	#PCI_DEVICE_ID_ADAPTEC_7882
 0x8278

	)

2543 
	#PCI_DEVICE_ID_ADAPTEC_7883
 0x8378

	)

2544 
	#PCI_DEVICE_ID_ADAPTEC_7884
 0x8478

	)

2545 
	#PCI_DEVICE_ID_ADAPTEC_7885
 0x8578

	)

2546 
	#PCI_DEVICE_ID_ADAPTEC_7886
 0x8678

	)

2547 
	#PCI_DEVICE_ID_ADAPTEC_7887
 0x8778

	)

2548 
	#PCI_DEVICE_ID_ADAPTEC_7888
 0x8878

	)

2550 
	#PCI_VENDOR_ID_ADAPTEC2
 0x9005

	)

2551 
	#PCI_DEVICE_ID_ADAPTEC2_2940U2
 0x0010

	)

2552 
	#PCI_DEVICE_ID_ADAPTEC2_2930U2
 0x0011

	)

2553 
	#PCI_DEVICE_ID_ADAPTEC2_7890B
 0x0013

	)

2554 
	#PCI_DEVICE_ID_ADAPTEC2_7890
 0x001f

	)

2555 
	#PCI_DEVICE_ID_ADAPTEC2_3940U2
 0x0050

	)

2556 
	#PCI_DEVICE_ID_ADAPTEC2_3950U2D
 0x0051

	)

2557 
	#PCI_DEVICE_ID_ADAPTEC2_7896
 0x005f

	)

2558 
	#PCI_DEVICE_ID_ADAPTEC2_7892A
 0x0080

	)

2559 
	#PCI_DEVICE_ID_ADAPTEC2_7892B
 0x0081

	)

2560 
	#PCI_DEVICE_ID_ADAPTEC2_7892D
 0x0083

	)

2561 
	#PCI_DEVICE_ID_ADAPTEC2_7892P
 0x008f

	)

2562 
	#PCI_DEVICE_ID_ADAPTEC2_7899A
 0x00c0

	)

2563 
	#PCI_DEVICE_ID_ADAPTEC2_7899B
 0x00c1

	)

2564 
	#PCI_DEVICE_ID_ADAPTEC2_7899D
 0x00c3

	)

2565 
	#PCI_DEVICE_ID_ADAPTEC2_7899P
 0x00cf

	)

2566 
	#PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN
 0x0500

	)

2567 
	#PCI_DEVICE_ID_ADAPTEC2_SCAMP
 0x0503

	)

2570 
	#PCI_VENDOR_ID_HOLTEK
 0x9412

	)

2571 
	#PCI_DEVICE_ID_HOLTEK_6565
 0x6565

	)

2573 
	#PCI_VENDOR_ID_NETMOS
 0x9710

	)

2574 
	#PCI_DEVICE_ID_NETMOS_9705
 0x9705

	)

2575 
	#PCI_DEVICE_ID_NETMOS_9715
 0x9715

	)

2576 
	#PCI_DEVICE_ID_NETMOS_9735
 0x9735

	)

2577 
	#PCI_DEVICE_ID_NETMOS_9745
 0x9745

	)

2578 
	#PCI_DEVICE_ID_NETMOS_9755
 0x9755

	)

2579 
	#PCI_DEVICE_ID_NETMOS_9805
 0x9805

	)

2580 
	#PCI_DEVICE_ID_NETMOS_9815
 0x9815

	)

2581 
	#PCI_DEVICE_ID_NETMOS_9835
 0x9835

	)

2582 
	#PCI_DEVICE_ID_NETMOS_9845
 0x9845

	)

2583 
	#PCI_DEVICE_ID_NETMOS_9855
 0x9855

	)

2585 
	#PCI_VENDOR_ID_3COM_2
 0xa727

	)

2587 
	#PCI_SUBVENDOR_ID_EXSYS
 0xd84d

	)

2588 
	#PCI_SUBDEVICE_ID_EXSYS_4014
 0x4014

	)

2589 
	#PCI_SUBDEVICE_ID_EXSYS_4055
 0x4055

	)

2591 
	#PCI_VENDOR_ID_TIGERJET
 0xe159

	)

2592 
	#PCI_DEVICE_ID_TIGERJET_300
 0x0001

	)

2593 
	#PCI_DEVICE_ID_TIGERJET_100
 0x0002

	)

2595 
	#PCI_VENDOR_ID_TTTECH
 0x0357

	)

2596 
	#PCI_DEVICE_ID_TTTECH_MC322
 0x000A

	)

2598 
	#PCI_VENDOR_ID_XILINX_RME
 0xó60

	)

2599 
	#PCI_DEVICE_ID_RME_DIGI32
 0x9896

	)

2600 
	#PCI_DEVICE_ID_RME_DIGI32_PRO
 0x9897

	)

2601 
	#PCI_DEVICE_ID_RME_DIGI32_8
 0x9898

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_CAP_LIST
 0x10

	)

46 
	#PCI_STATUS_66MHZ
 0x20

	)

47 
	#PCI_STATUS_UDF
 0x40

	)

48 
	#PCI_STATUS_FAST_BACK
 0x80

	)

49 
	#PCI_STATUS_PARITY
 0x100

	)

50 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

51 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

52 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

53 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

54 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

55 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

56 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

57 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

58 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

60 
	#PCI_CLASS_REVISION
 0x08

	)

61 
	#PCI_REVISION_ID
 0x08

	)

62 
	#PCI_CLASS_PROG
 0x09

	)

63 
	#PCI_CLASS_DEVICE
 0x0®

	)

65 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

66 
	#PCI_LATENCY_TIMER
 0x0d

	)

67 
	#PCI_HEADER_TYPE
 0x0ê

	)

68 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

69 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

70 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

72 
	#PCI_BIST
 0x0‡

	)

73 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

74 
	#PCI_BIST_START
 0x40

	)

75 
	#PCI_BIST_CAPABLE
 0x80

	)

83 
	#PCI_BASE_ADDRESS_0
 0x10

	)

84 
	#PCI_BASE_ADDRESS_1
 0x14

	)

85 
	#PCI_BASE_ADDRESS_2
 0x18

	)

86 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

87 
	#PCI_BASE_ADDRESS_4
 0x20

	)

88 
	#PCI_BASE_ADDRESS_5
 0x24

	)

89 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

90 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

92 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

96 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

97 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

98 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

102 
	#PCI_CARDBUS_CIS
 0x28

	)

103 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

104 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

105 
	#PCI_ROM_ADDRESS
 0x30

	)

106 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

107 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

109 
	#PCI_CAPABILITY_LIST
 0x34

	)

112 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

113 
	#PCI_INTERRUPT_PIN
 0x3d

	)

114 
	#PCI_MIN_GNT
 0x3ê

	)

115 
	#PCI_MAX_LAT
 0x3‡

	)

118 
	#PCI_PRIMARY_BUS
 0x18

	)

119 
	#PCI_SECONDARY_BUS
 0x19

	)

120 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

121 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

122 
	#PCI_IO_BASE
 0x1¯

	)

123 
	#PCI_IO_LIMIT
 0x1d

	)

124 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

125 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

126 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

127 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

128 
	#PCI_SEC_STATUS
 0x1ê

	)

129 
	#PCI_MEMORY_BASE
 0x20

	)

130 
	#PCI_MEMORY_LIMIT
 0x22

	)

131 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

132 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

133 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

134 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

135 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

136 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

137 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

138 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

139 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

140 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

141 
	#PCI_IO_BASE_UPPER16
 0x30

	)

142 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

145 
	#PCI_ROM_ADDRESS1
 0x38

	)

147 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

148 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

149 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

150 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

151 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

152 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

153 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

154 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

157 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

159 
	#PCI_CB_SEC_STATUS
 0x16

	)

160 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

161 
	#PCI_CB_CARD_BUS
 0x19

	)

162 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

163 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

164 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

165 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

166 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

167 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

168 
	#PCI_CB_IO_BASE_0
 0x2c

	)

169 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

170 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

171 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

172 
	#PCI_CB_IO_BASE_1
 0x34

	)

173 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

174 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

175 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

176 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

178 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

179 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

180 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

181 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

182 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

183 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

184 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

185 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

186 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

188 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

189 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

190 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

191 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

196 
	#PCI_CAP_LIST_ID
 0

	)

197 
	#PCI_CAP_ID_PM
 0x01

	)

198 
	#PCI_CAP_ID_AGP
 0x02

	)

199 
	#PCI_CAP_ID_VPD
 0x03

	)

200 
	#PCI_CAP_ID_SLOTID
 0x04

	)

201 
	#PCI_CAP_ID_MSI
 0x05

	)

202 
	#PCI_CAP_ID_CHSWP
 0x06

	)

203 
	#PCI_CAP_ID_PCIX
 0x07

	)

204 
	#PCI_CAP_ID_HT
 0x08

	)

205 
	#PCI_CAP_ID_VNDR
 0x09

	)

206 
	#PCI_CAP_ID_SHPC
 0x0C

	)

207 
	#PCI_CAP_ID_EXP
 0x10

	)

208 
	#PCI_CAP_ID_MSIX
 0x11

	)

209 
	#PCI_CAP_ID_AF
 0x13

	)

210 
	#PCI_CAP_LIST_NEXT
 1

	)

211 
	#PCI_CAP_FLAGS
 2

	)

212 
	#PCI_CAP_SIZEOF
 4

	)

216 
	#PCI_PM_PMC
 2

	)

217 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

218 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

219 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

220 
	#PCI_PM_CAP_DSI
 0x0020

	)

221 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

222 
	#PCI_PM_CAP_D1
 0x0200

	)

223 
	#PCI_PM_CAP_D2
 0x0400

	)

224 
	#PCI_PM_CAP_PME
 0x0800

	)

225 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

226 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

227 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

228 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

229 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

230 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

231 
	#PCI_PM_CTRL
 4

	)

232 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

233 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0004

	)

234 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

235 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

236 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

237 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

238 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

239 
	#PCI_PM_PPB_B2_B3
 0x40

	)

240 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

241 
	#PCI_PM_DATA_REGISTER
 7

	)

242 
	#PCI_PM_SIZEOF
 8

	)

246 
	#PCI_AGP_VERSION
 2

	)

247 
	#PCI_AGP_RFU
 3

	)

248 
	#PCI_AGP_STATUS
 4

	)

249 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

250 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

251 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

252 
	#PCI_AGP_STATUS_FW
 0x0010

	)

253 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

254 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

255 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

256 
	#PCI_AGP_COMMAND
 8

	)

257 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

258 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

259 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

260 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

261 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

262 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

263 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

264 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

265 
	#PCI_AGP_SIZEOF
 12

	)

269 
	#PCI_VPD_ADDR
 2

	)

270 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

271 
	#PCI_VPD_ADDR_F
 0x8000

	)

272 
	#PCI_VPD_DATA
 4

	)

276 
	#PCI_SID_ESR
 2

	)

277 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

278 
	#PCI_SID_ESR_FIC
 0x20

	)

279 
	#PCI_SID_CHASSIS_NR
 3

	)

283 
	#PCI_MSI_FLAGS
 2

	)

284 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

285 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

286 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

287 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

288 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

289 
	#PCI_MSI_RFU
 3

	)

290 
	#PCI_MSI_ADDRESS_LO
 4

	)

291 
	#PCI_MSI_ADDRESS_HI
 8

	)

292 
	#PCI_MSI_DATA_32
 8

	)

293 
	#PCI_MSI_DATA_64
 12

	)

294 
	#PCI_MSI_MASK_BIT
 16

	)

297 
	#PCI_MSIX_FLAGS
 2

	)

298 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

299 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

300 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

301 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

302 
	#PCI_MSIX_FLAGS_BITMASK
 (1 << 0)

	)

306 
	#PCI_CHSWP_CSR
 2

	)

307 
	#PCI_CHSWP_DHA
 0x01

	)

308 
	#PCI_CHSWP_EIM
 0x02

	)

309 
	#PCI_CHSWP_PIE
 0x04

	)

310 
	#PCI_CHSWP_LOO
 0x08

	)

311 
	#PCI_CHSWP_PI
 0x30

	)

312 
	#PCI_CHSWP_EXT
 0x40

	)

313 
	#PCI_CHSWP_INS
 0x80

	)

317 
	#PCI_AF_LENGTH
 2

	)

318 
	#PCI_AF_CAP
 3

	)

319 
	#PCI_AF_CAP_TP
 0x01

	)

320 
	#PCI_AF_CAP_FLR
 0x02

	)

321 
	#PCI_AF_CTRL
 4

	)

322 
	#PCI_AF_CTRL_FLR
 0x01

	)

323 
	#PCI_AF_STATUS
 5

	)

324 
	#PCI_AF_STATUS_TP
 0x01

	)

328 
	#PCI_X_CMD
 2

	)

329 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

330 
	#PCI_X_CMD_ERO
 0x0002

	)

331 
	#PCI_X_CMD_READ_2K
 0x0008

	)

332 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

333 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

334 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

335 
	#PCI_X_STATUS
 4

	)

336 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

337 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

338 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

339 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

340 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

341 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

342 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

343 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

344 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

345 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

346 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

347 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

348 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

352 
	#PCI_EXP_FLAGS
 2

	)

353 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

354 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

355 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

356 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

357 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

358 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

359 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

360 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

361 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

362 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

363 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

364 
	#PCI_EXP_DEVCAP
 4

	)

365 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

366 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

367 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

368 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

369 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

370 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

371 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

372 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

373 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

374 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

375 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

376 
	#PCI_EXP_DEVCTL
 8

	)

377 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

378 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

379 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

380 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

381 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

382 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

383 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

384 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

385 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

386 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

387 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

388 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

389 
	#PCI_EXP_DEVSTA
 10

	)

390 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

391 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

392 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

393 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

394 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

395 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

396 
	#PCI_EXP_LNKCAP
 12

	)

397 
	#PCI_EXP_LNKCTL
 16

	)

398 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

399 
	#PCI_EXP_LNKSTA
 18

	)

400 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

401 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x01

	)

402 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x02

	)

403 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

404 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

405 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

406 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

407 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

408 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

409 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

410 
	#PCI_EXP_SLTCAP
 20

	)

411 
	#PCI_EXP_SLTCTL
 24

	)

412 
	#PCI_EXP_SLTSTA
 26

	)

413 
	#PCI_EXP_RTCTL
 28

	)

414 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

415 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

416 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

417 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

418 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

419 
	#PCI_EXP_RTCAP
 30

	)

420 
	#PCI_EXP_RTSTA
 32

	)

427 
	#PCI_EXP_DEVCAP2
 36

	)

428 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

429 
	#PCI_EXP_DEVCAP2_LTR
 0x800

	)

430 
	#PCI_EXP_OBFF_MASK
 0xc0000

	)

431 
	#PCI_EXP_OBFF_MSG
 0x40000

	)

432 
	#PCI_EXP_OBFF_WAKE
 0x80000

	)

433 
	#PCI_EXP_DEVCTL2
 40

	)

434 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

435 
	#PCI_EXP_IDO_REQ_EN
 0x100

	)

436 
	#PCI_EXP_IDO_CMP_EN
 0x200

	)

437 
	#PCI_EXP_LTR_EN
 0x400

	)

438 
	#PCI_EXP_OBFF_MSGA_EN
 0x2000

	)

439 
	#PCI_EXP_OBFF_MSGB_EN
 0x4000

	)

440 
	#PCI_EXP_OBFF_WAKE_EN
 0x6000

	)

441 
	#PCI_EXP_LNKCTL2
 48

	)

442 
	#PCI_EXP_SLTCTL2
 56

	)

445 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

446 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

447 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

449 
	#PCI_EXT_CAP_ID_ERR
 1

	)

450 
	#PCI_EXT_CAP_ID_VC
 2

	)

451 
	#PCI_EXT_CAP_ID_DSN
 3

	)

452 
	#PCI_EXT_CAP_ID_PWR
 4

	)

453 
	#PCI_EXT_CAP_ID_ACS
 13

	)

454 
	#PCI_EXT_CAP_ID_ARI
 14

	)

455 
	#PCI_EXT_CAP_ID_ATS
 15

	)

456 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

457 
	#PCI_EXT_CAP_ID_LTR
 24

	)

460 
	#PCI_ERR_UNCOR_STATUS
 4

	)

461 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

462 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

463 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

464 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

465 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

466 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

467 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

468 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

469 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

470 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

471 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

472 
	#PCI_ERR_UNCOR_MASK
 8

	)

474 
	#PCI_ERR_UNCOR_SEVER
 12

	)

476 
	#PCI_ERR_COR_STATUS
 16

	)

477 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

478 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

479 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

480 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

481 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

482 
	#PCI_ERR_COR_MASK
 20

	)

484 
	#PCI_ERR_CAP
 24

	)

485 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

486 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

487 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

488 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

489 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

490 
	#PCI_ERR_HEADER_LOG
 28

	)

491 
	#PCI_ERR_ROOT_COMMAND
 44

	)

493 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

495 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

497 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

498 
	#PCI_ERR_ROOT_STATUS
 48

	)

499 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

501 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

503 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

505 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

506 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

507 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

508 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

509 
	#PCI_ERR_ROOT_COR_SRC
 52

	)

510 
	#PCI_ERR_ROOT_SRC
 54

	)

513 
	#PCI_VC_PORT_REG1
 4

	)

514 
	#PCI_VC_PORT_REG2
 8

	)

515 
	#PCI_VC_PORT_CTRL
 12

	)

516 
	#PCI_VC_PORT_STATUS
 14

	)

517 
	#PCI_VC_RES_CAP
 16

	)

518 
	#PCI_VC_RES_CTRL
 20

	)

519 
	#PCI_VC_RES_STATUS
 26

	)

522 
	#PCI_PWR_DSR
 4

	)

523 
	#PCI_PWR_DATA
 8

	)

524 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

525 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

526 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

527 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

528 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

529 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

530 
	#PCI_PWR_CAP
 12

	)

531 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

541 
	#HT_3BIT_CAP_MASK
 0xE0

	)

542 
	#HT_CAPTYPE_SLAVE
 0x00

	)

543 
	#HT_CAPTYPE_HOST
 0x20

	)

545 
	#HT_5BIT_CAP_MASK
 0xF8

	)

546 
	#HT_CAPTYPE_IRQ
 0x80

	)

547 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

548 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

549 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

550 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

551 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

552 
	#HT_MSI_FLAGS
 0x02

	)

553 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

554 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

555 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

556 
	#HT_MSI_ADDR_LO
 0x04

	)

557 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

558 
	#HT_MSI_ADDR_HI
 0x08

	)

559 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

560 
	#HT_CAPTYPE_VCSET
 0xB8

	)

561 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

562 
	#HT_CAPTYPE_GEN3
 0xD0

	)

563 
	#HT_CAPTYPE_PM
 0xE0

	)

566 
	#PCI_ARI_CAP
 0x04

	)

567 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

568 
	#PCI_ARI_CAP_ACS
 0x0002

	)

569 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

570 
	#PCI_ARI_CTRL
 0x06

	)

571 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

572 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

573 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

576 
	#PCI_ATS_CAP
 0x04

	)

577 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

578 
	#PCI_ATS_MAX_QDEP
 32

	)

579 
	#PCI_ATS_CTRL
 0x06

	)

580 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

581 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

582 
	#PCI_ATS_MIN_STU
 12

	)

585 
	#PCI_SRIOV_CAP
 0x04

	)

586 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

587 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

588 
	#PCI_SRIOV_CTRL
 0x08

	)

589 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

590 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

591 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

592 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

593 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

594 
	#PCI_SRIOV_STATUS
 0x0®

	)

595 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

596 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

597 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

598 
	#PCI_SRIOV_NUM_VF
 0x10

	)

599 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

600 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

601 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

602 
	#PCI_SRIOV_VF_DID
 0x1®

	)

603 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

604 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

605 
	#PCI_SRIOV_BAR
 0x24

	)

606 
	#PCI_SRIOV_NUM_BARS
 6

	)

607 
	#PCI_SRIOV_VFM
 0x3¯

	)

608 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

609 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

610 
	#PCI_SRIOV_VFM_UA
 0x0

	)

611 
	#PCI_SRIOV_VFM_MI
 0x1

	)

612 
	#PCI_SRIOV_VFM_MO
 0x2

	)

613 
	#PCI_SRIOV_VFM_AV
 0x3

	)

615 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

616 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

617 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

618 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

619 
	#PCI_LTR_SCALE_SHIFT
 10

	)

622 
	#PCI_ACS_CAP
 0x04

	)

623 
	#PCI_ACS_SV
 0x01

	)

624 
	#PCI_ACS_TB
 0x02

	)

625 
	#PCI_ACS_RR
 0x04

	)

626 
	#PCI_ACS_CR
 0x08

	)

627 
	#PCI_ACS_UF
 0x10

	)

628 
	#PCI_ACS_EC
 0x20

	)

629 
	#PCI_ACS_DT
 0x40

	)

630 
	#PCI_ACS_CTRL
 0x06

	)

631 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-i386/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-i386/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/asm-i386/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-i386/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

23 
__sig√d__
 
	t__s64
;

24 
	t__u64
;

	@/usr/include/asm-x86_64/errno.h

1 #i‚de‡
_X8664_ERRNO_H


2 
	#_X8664_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-x86_64/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/asm-x86_64/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-x86_64/types.h

1 #i‚de‡
_X86_64_TYPES_H


2 
	#_X86_64_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 
__sig√d__
 
	t__s64
;

23 
	t__u64
;

	@/usr/include/asm/auxvec.h

2 #i‚de‡
__ASM_STUB_AUXVEC_H


3 
	#__ASM_STUB_AUXVEC_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/auxvec.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/auxvec.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/asm/posix_types.h

2 #i‚de‡
__ASM_STUB_POSIX_TYPES_H


3 
	#__ASM_STUB_POSIX_TYPES_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/posix_ty≥s.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/posix_ty≥s.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

5 #unde‡
NULL


6 #i‡
deföed
(
__˝lu•lus
)

7 
	#NULL
 0

	)

9 
	#NULL
 ((*)0)

	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/fcntl.h

1 #i‚de‡
_ASM_GENERIC_FCNTL_H


2 
	#_ASM_GENERIC_FCNTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#O_ACCMODE
 00000003

	)

9 
	#O_RDONLY
 00000000

	)

10 
	#O_WRONLY
 00000001

	)

11 
	#O_RDWR
 00000002

	)

12 #i‚de‡
O_CREAT


13 
	#O_CREAT
 00000100

	)

15 #i‚de‡
O_EXCL


16 
	#O_EXCL
 00000200

	)

18 #i‚de‡
O_NOCTTY


19 
	#O_NOCTTY
 00000400

	)

21 #i‚de‡
O_TRUNC


22 
	#O_TRUNC
 00001000

	)

24 #i‚de‡
O_APPEND


25 
	#O_APPEND
 00002000

	)

27 #i‚de‡
O_NONBLOCK


28 
	#O_NONBLOCK
 00004000

	)

30 #i‚de‡
O_SYNC


31 
	#O_SYNC
 00010000

	)

33 #i‚de‡
FASYNC


34 
	#FASYNC
 00020000

	)

36 #i‚de‡
O_DIRECT


37 
	#O_DIRECT
 00040000

	)

39 #i‚de‡
O_LARGEFILE


40 
	#O_LARGEFILE
 00100000

	)

42 #i‚de‡
O_DIRECTORY


43 
	#O_DIRECTORY
 00200000

	)

45 #i‚de‡
O_NOFOLLOW


46 
	#O_NOFOLLOW
 00400000

	)

48 #i‚de‡
O_NOATIME


49 
	#O_NOATIME
 01000000

	)

52 #i‚de‡
O_NDELAY


53 
	#O_NDELAY
 
O_NONBLOCK


	)

56 
	#F_DUPFD
 0

	)

57 
	#F_GETFD
 1

	)

58 
	#F_SETFD
 2

	)

59 
	#F_GETFL
 3

	)

60 
	#F_SETFL
 4

	)

61 #i‚de‡
F_GETLK


62 
	#F_GETLK
 5

	)

63 
	#F_SETLK
 6

	)

64 
	#F_SETLKW
 7

	)

66 #i‚de‡
F_SETOWN


67 
	#F_SETOWN
 8

	)

68 
	#F_GETOWN
 9

	)

70 #i‚de‡
F_SETSIG


71 
	#F_SETSIG
 10

	)

72 
	#F_GETSIG
 11

	)

76 
	#FD_CLOEXEC
 1

	)

79 #i‚de‡
F_RDLCK


80 
	#F_RDLCK
 0

	)

81 
	#F_WRLCK
 1

	)

82 
	#F_UNLCK
 2

	)

86 #i‚de‡
F_EXLCK


87 
	#F_EXLCK
 4

	)

88 
	#F_SHLCK
 8

	)

92 #i‚de‡
F_INPROGRESS


93 
	#F_INPROGRESS
 16

	)

97 
	#LOCK_SH
 1

	)

98 
	#LOCK_EX
 2

	)

99 
	#LOCK_NB
 4

	)

101 
	#LOCK_UN
 8

	)

103 
	#LOCK_MAND
 32

	)

104 
	#LOCK_READ
 64

	)

105 
	#LOCK_WRITE
 128

	)

106 
	#LOCK_RW
 192

	)

108 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

110 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


111 #i‚de‡
__ARCH_FLOCK_PAD


112 
	#__ARCH_FLOCK_PAD


	)

115 
	sÊock
 {

116 
	ml_ty≥
;

117 
	ml_whí˚
;

118 
off_t
 
	ml_°¨t
;

119 
off_t
 
	ml_Àn
;

120 
pid_t
 
	ml_pid
;

121 
	m__ARCH_FLOCK_PAD


125 #i‚de‡
CONFIG_64BIT


127 #i‚de‡
F_GETLK64


128 
	#F_GETLK64
 12

	)

129 
	#F_SETLK64
 13

	)

130 
	#F_SETLKW64
 14

	)

133 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


134 #i‚de‡
__ARCH_FLOCK64_PAD


135 
	#__ARCH_FLOCK64_PAD


	)

138 
	sÊock64
 {

139 
	ml_ty≥
;

140 
	ml_whí˚
;

141 
loff_t
 
	ml_°¨t
;

142 
loff_t
 
	ml_Àn
;

143 
pid_t
 
	ml_pid
;

144 
	m__ARCH_FLOCK64_PAD


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

24 
	#_IOC_SIZEBITS
 14

	)

25 
	#_IOC_DIRBITS
 2

	)

27 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

28 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

29 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

30 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

32 
	#_IOC_NRSHIFT
 0

	)

33 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

34 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

35 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

40 
	#_IOC_NONE
 0U

	)

41 
	#_IOC_WRITE
 1U

	)

42 
	#_IOC_READ
 2U

	)

44 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

45 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

46 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

47 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

48 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

50 #ifde‡
__KERNEL__


52 
__övÆid_size_¨gumít_f‹_IOC
;

53 
	#_IOC_TYPECHECK
(
t
) \

54 (((
t
) == (t[1]) && \

55 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

56 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

58 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

62 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

63 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

64 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

65 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

66 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

67 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

68 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

71 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

72 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

73 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

74 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

78 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

79 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

80 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

81 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

82 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-i386/auxvec.h

1 #i‚de‡
__ASMi386_AUXVEC_H


2 
	#__ASMi386_AUXVEC_H


	)

8 
	#AT_SYSINFO
 32

	)

9 
	#AT_SYSINFO_EHDR
 33

	)

	@/usr/include/asm-i386/posix_types.h

1 #i‚de‡
__ARCH_I386_POSIX_TYPES_H


2 
	#__ARCH_I386_POSIX_TYPES_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__USE_ALL
)

43 
	mvÆ
[2];

45 
	m__vÆ
[2];

47 } 
	t__kî√l_fsid_t
;

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 #unde‡
__FD_SET


52 
	#__FD_SET
(
fd
,
fd£ç
) \

53 
__asm__
 
	`__vﬁ©ûe__
("btsl %1,%0": \

54 "+m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

56 #unde‡
__FD_CLR


57 
	#__FD_CLR
(
fd
,
fd£ç
) \

58 
__asm__
 
	`__vﬁ©ûe__
("btrl %1,%0": \

59 "+m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

61 #unde‡
__FD_ISSET


62 
	#__FD_ISSET
(
fd
,
fd£ç
Ë(
	`__exãnsi⁄__
 ({ \

63 
__ªsu…
; \

64 
__asm__
 
	`__vﬁ©ûe__
("btl %1,%2 ; setb %0" \

65 :"=q" (
__ªsu…
Ë:"r" ((Ë(
fd
)), \

66 "m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
))); \

67 
__ªsu…
; }))

	)

69 #unde‡
__FD_ZERO


70 
	#__FD_ZERO
(
fd£ç
) \

72 
__d0
, 
__d1
; \

73 
__asm__
 
	`__vﬁ©ûe__
("cld ;Ñep ; stosl" \

74 :"=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)), \

75 "=&c" (
__d0
), "=&D" (
__d1
) \

76 :"a" (0), "1" (
__FDSET_LONGS
), \

77 "2" ((
__kî√l_fd_£t
 *Ë(
fd£ç
)) : "memory"); \

78 } 0)

	)

	@/usr/include/asm-x86_64/auxvec.h

1 #i‚de‡
__ASM_X86_64_AUXVEC_H


2 
	#__ASM_X86_64_AUXVEC_H


	)

4 
	#AT_SYSINFO_EHDR
 33

	)

	@/usr/include/asm-x86_64/posix_types.h

1 #i‚de‡
_ASM_X86_64_POSIX_TYPES_H


2 
	#_ASM_X86_64_POSIX_TYPES_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
115
2548
shannon.h
shannon.mod.c
shannon_512.c
shannon_block.c
shannon_block.h
shannon_buffer.c
shannon_cdev.c
shannon_config.h
shannon_debug.c
shannon_device.c
shannon_device.h
shannon_dma.c
shannon_dma.h
shannon_dna.c
shannon_emu.c
shannon_emu.h
shannon_epilog.c
shannon_err_handler.c
shannon_err_injection.c
shannon_file.c
shannon_file.h
shannon_fpga_emu.c
shannon_ftl.c
shannon_g4.c
shannon_g5.c
shannon_ioctl.c
shannon_ioctl.h
shannon_kcore.c
shannon_kcore.h
shannon_list.h
shannon_main.c
shannon_map_table.c
shannon_mbr.h
shannon_memblock.h
shannon_microcode.c
shannon_module_init.c
shannon_nor.c
shannon_ns.c
shannon_ns_rw.c
shannon_pci.c
shannon_pci.h
shannon_port.h
shannon_prefetch.c
shannon_prefetch.h
shannon_reconfig.c
shannon_regs.h
shannon_scatter.c
shannon_scatter.h
shannon_sched.c
shannon_sched.h
shannon_scsi.c
shannon_scsi.h
shannon_scsi_cmd.c
shannon_sysfs.c
shannon_sysfs.h
shannon_sysfs_core.c
shannon_time.c
shannon_time.h
shannon_waitqueue.c
shannon_waitqueue.h
shannon_workqueue.c
shannon_workqueue.h
/usr/include/asm/param.h
/usr/include/linux/errno.h
/usr/include/linux/fcntl.h
/usr/include/linux/fs.h
/usr/include/linux/genhd.h
/usr/include/linux/hdreg.h
/usr/include/linux/ioctl.h
/usr/include/linux/kdev_t.h
/usr/include/linux/kernel.h
/usr/include/linux/pci.h
/usr/include/linux/random.h
/usr/include/linux/sched.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/scsi/scsi.h
/usr/include/asm-i386/param.h
/usr/include/asm-x86_64/param.h
/usr/include/asm/errno.h
/usr/include/asm/fcntl.h
/usr/include/asm/ioctl.h
/usr/include/asm/types.h
/usr/include/features.h
/usr/include/linux/auxvec.h
/usr/include/linux/limits.h
/usr/include/linux/pci_ids.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/asm-i386/errno.h
/usr/include/asm-i386/fcntl.h
/usr/include/asm-i386/ioctl.h
/usr/include/asm-i386/types.h
/usr/include/asm-x86_64/errno.h
/usr/include/asm-x86_64/fcntl.h
/usr/include/asm-x86_64/ioctl.h
/usr/include/asm-x86_64/types.h
/usr/include/asm/auxvec.h
/usr/include/asm/posix_types.h
/usr/include/gnu/stubs.h
/usr/include/linux/stddef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/fcntl.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-i386/auxvec.h
/usr/include/asm-i386/posix_types.h
/usr/include/asm-x86_64/auxvec.h
/usr/include/asm-x86_64/posix_types.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/asm-generic/errno-base.h
